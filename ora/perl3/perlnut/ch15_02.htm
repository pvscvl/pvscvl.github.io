<html><head><title>The IO::Socket Module (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">15.2. The IO::Socket Module</h2>

<p><a name="INDEX-1941" /><a name="INDEX-1942" /><a name="INDEX-1943" />The IO::Socket module included in the
core Perl distribution provides an object-oriented approach to socket
programming. This module provides a convenient way to handle the
large number of options you have to deal with, and it handles the
laborious task of forming addresses. IO::Socket is built upon the
Socket module provided in the standard library. It inherits from
IO::Handle, which supports a class of filehandle objects for much of
the IO library. The following IO::Socket functions are simply
frontends for the corresponding built-in functions and use the same
syntax:
</p>

<blockquote><pre class="code">socket
socketpair
bind
listen
send
recv
peername (same as getpeername)
sockname (same as getsockname)</pre></blockquote>

<p><a name="INDEX-1944" />The <tt class="literal">accept</tt> function
in IO::Socket is slightly different from the equivalent function,
however, and is described later in the chapter.
</p>

<p>IO:Socket contains two subclasses: INET and UNIX. The INET subclass
is used to create and manipulate Internet-domain sockets, such as
those used in the examples. The UNIX subclass creates Unix domain
sockets.
</p>

<a name="perlnut2-CHP-15-SECT-2.1" /><div class="sect2">
<h3 class="sect2">15.2.1. Client-Side Sockets</h3>

<p><a name="INDEX-1945" /><a name="INDEX-1946" />IO::Socket greatly simplifies the
implementation of a socket for client communications. The following
example creates an Internet-domain socket (using the INET subclass)
and attempts to connect to the specified server:
</p>

<blockquote><pre class="code">use IO::Socket;
$sock = new IO::Socket::INET (PeerAddr =&gt; 'www.ora.com',
                              PeerPort =&gt; 80,
                              Proto    =&gt; 'tcp');
die "$!" unless $sock;</pre></blockquote>

<p><tt class="literal">IO::Socket::INET::new</tt> creates an object containing
a socket filehandle and connects it to the host and port specified in
<tt class="literal">PeerAddr</tt> and <tt class="literal">PeerPort</tt>. The
object <tt class="literal">$sock</tt> can then be written to and read from
like other socket filehandles.
</p>

</div>
<a name="perlnut2-CHP-15-SECT-2.2" /><div class="sect2">
<h3 class="sect2">15.2.2. Server-Side Sockets</h3>

<p><a name="INDEX-1947" /><a name="INDEX-1948" />On the server side, IO::Socket
provides a nice wrapper for creating server sockets. The wrapper
encompasses the <tt class="literal">socket</tt>, <tt class="literal">bind</tt>,
and <tt class="literal">listen</tt> procedures, while creating a new
IO::Socket object. For example, we can create an Internet-domain
socket with <tt class="literal">IO::Socket::INET</tt>:
</p>

<blockquote><pre class="code">use IO::Socket;
$sock = new IO::Socket::INET (LocalAddr =&gt; 'maude.ora.com',
                              LocalPort =&gt; 8888,
                              Proto     =&gt; 'tcp',
                              Listen    =&gt; 5);
die "$!" unless $sock;</pre></blockquote>

<p>The parameters for the new socket object determine whether it is a
server or a client socket. Because we're creating a
server socket, <tt class="literal">LocalAddr</tt> and
<tt class="literal">LocalPort</tt> provide the address and port to bind to
the socket. The <tt class="literal">Listen</tt> parameter gives the queue
size for the number of client requests that can wait for an
<tt class="literal">accept</tt> at any one time.
</p>

<p><a name="INDEX-1949" />When the server receives a client
request, it calls the <tt class="literal">accept</tt> method on the socket
object. This creates a new socket object on which the rest of the
communication can take place:
</p>

<blockquote><pre class="code">$new_sock = $sock-&gt;accept( );</pre></blockquote>

<p>When communication is finished on both client and server sockets,
they should be destroyed with <tt class="literal">close</tt>. If a socket
is not properly closed, the next time you attempt to use a socket
with the same name, the system will complain that the socket is
already in use.
</p>

</div>
<a name="perlnut2-CHP-15-SECT-2.3" /><div class="sect2">
<h3 class="sect2">15.2.3. IO::Socket Methods</h3>

<p>The following methods are defined in IO::Socket and can be used on
socket objects of either the INET or UNIX class.
</p>



<a name="INDEX-1950" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>accept</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
accept ([<em class="replaceable">pkg</em>])
</pre><p><a name="INDEX-1950" />Performs the <tt class="literal">accept</tt>
system call on a socket and returns a new object. The new object is
created in the same class as the listen socket, unless
<em class="replaceable"><tt>pkg</tt></em> is specified. The object can be used
to communicate with the client that tried to connect. In a scalar
context, the new socket is returned, or <tt class="literal">undef</tt> is
returned on failure. In an array context, a two-element array is
returned containing the new socket and the peer address, or an empty
list is returned on failure.
</p></div>

<a name="INDEX-1951" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>protocol</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
protocol
</pre><p><a name="INDEX-1951" />Returns the protocol number for the
protocol being used on the socket, if known. If the protocol is
unknown, as with an AF_UNIX socket, returns <tt class="literal">0</tt>
</p></div>

<a name="INDEX-1952" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sockdomain</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
sockdomain
</pre><p><a name="INDEX-1952" />Returns the number representing
the socket address domain. For example, an AF_INET socket has the
value <tt class="literal">&amp;AF_INET</tt>.
</p></div>

<a name="INDEX-1953" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sockopt</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
sockopt (<em class="replaceable">opt</em>, [<em class="replaceable">val</em>])
</pre><p><a name="INDEX-1953" />Sets and retrieves socket option
<em class="replaceable"><tt>opt</tt></em> in the SOL_SOCKET level. The value
<em class="replaceable"><tt>val</tt></em> is set for the option, if given. If no
value is provided, the function returns the current setting for the
option.
</p></div>

<a name="INDEX-1954" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>socktype</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
socktype
</pre><p><a name="INDEX-1954" />Returns the number representing
the socket type. For example, a SOCK_STREAM socket has the value
<tt class="literal">&amp;SOCK_STREAM</tt>.
</p></div>

<a name="INDEX-1955" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>timeout</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
timeout ([<em class="replaceable">val</em>])
</pre><p><a name="INDEX-1955" />Sets or retrieves the timeout value
associated with a socket. Without an argument, the current value is
returned. If a timeout of <em class="replaceable"><tt>val</tt></em> is given,
the setting is changed to <em class="replaceable"><tt>val</tt></em>, and the
previous value is returned.
</p></div>

</div>
<a name="perlnut2-CHP-15-SECT-2.4" /><div class="sect2">
<h3 class="sect2">15.2.4. IO::Socket::INET Reference</h3>

<p><a name="INDEX-1956" /><a name="INDEX-1957" /><a name="INDEX-1958" />An Internet-domain socket is created
with the <tt class="literal">new</tt> method from the IO::Socket::INET
subclass. The constructor can take the following options:
</p>

<dl>
<dt><b><tt class="literal">PeerAddr =&gt;</tt> <em class="replaceable">hostname</em><tt class="literal">[</tt>:<em class="replaceable">port</em><tt class="literal">]</tt></b></dt>
<dd>
<a name="INDEX-1959" />Specifies the remote host
and optional port number for a client connection.
<em class="replaceable"><tt>hostname</tt></em> can be either a name, such as
<em class="emphasis">www.oreilly.com</em>, or an IP number
of the form 207.44.21.2.
</p>
</dd>


<dt><b><tt class="literal">PeerPort =&gt;</tt> <em class="replaceable">port</em></b></dt>
<dd>
<a name="INDEX-1960" />Specifies the port number
on the remote host for a client connection. The name of the service
(such as <tt class="literal">http</tt> or <tt class="literal">nntp</tt>) may be
used for the argument if the port number is not known.
</p>
</dd>


<dt><b><tt class="literal">LocalAddr =&gt;</tt> <em class="replaceable">hostname</em>[:<em class="replaceable">port</em>]</b></dt>
<dd>
<a name="INDEX-1961" />Specifies the local
address (and optional port number) to bind to a server-side socket.
</p>
</dd>


<dt><b><tt class="literal">LocalPort =&gt;</tt> <em class="replaceable">port</em></b></dt>
<dd>
<a name="INDEX-1962" />Specifies the local port
number (or service name) to bind to a server-side socket.
</p>
</dd>


<dt><b><tt class="literal">Proto =&gt;</tt> <em class="replaceable">name</em></b></dt>
<dd>
<a name="INDEX-1963" />Specifies the protocol to
be run on the socket, i.e., <tt class="literal">tcp</tt> or
<tt class="literal">udp</tt>.
</p>
</dd>


<dt><b><tt class="literal">Type =&gt; SOCK_STREAM | SOCK_DGRAM</tt></b></dt>
<dd>
<a name="INDEX-1964" />Specifies the type of socket.
<tt class="literal">SOCK_STREAM</tt> indicates a stream-based socket
connection, and <tt class="literal">SOCK_DGRAM</tt> indicates a
message-based (datagram) connection.
</p>
</dd>


<dt><b><tt class="literal">Listen =&gt;</tt> <em class="replaceable">n</em></b></dt>
<dd>
<a name="INDEX-1965" />Sets the listen-queue size to
<em class="replaceable"><tt>n</tt></em> number of client requests.
</p>
</dd>


<dt><b><tt class="literal">Reuse =&gt; 1</tt></b></dt>
<dd>
<a name="INDEX-1966" />Given a nonzero number,
this option allows the local bind address to be reused should the
socket need to be reopened after an error.
</p>
</dd>


<dt><b><tt class="literal">Timeout =&gt;</tt> <em class="replaceable">n</em></b></dt>
<dd>
<a name="INDEX-1967" />Sets the timeout.
</p>
</dd>

</dl>

<p>Whether a server (receiving) or client (requesting) socket is created
depends on the parameters provided to the constructor. If
<tt class="literal">Listen</tt> is defined, a server socket is
automatically created. If no protocol is specified, it is derived
from the service on the given port number. If no port number is
given, <tt class="literal">tcp</tt> is used by default.
</p>

<a name="perlnut2-CHP-15-SECT-2.4.1" /><div class="sect3">
<h3 class="sect3">15.2.4.1. IO::Socket::INET methods</h3>

<p>The following methods can be used on socket filehandle objects
created by IO::Socket::INET.
</p>

<a name="INDEX-1968" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>peeraddr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
peeraddr
</pre><p><a name="INDEX-1968" />Returns the address part
(packed string) of the socket-address data structure for the remote
host to which a socket connects.
</p></div>

<a name="INDEX-1969" /><a name="INDEX-1970" /><a name="INDEX-1971" /><a name="INDEX-1972" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>peerhost</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
peerhost
</pre><p><a name="INDEX-1969" />Returns the remote host
address in the dotted-quad string form, e.g., 207.44.27.2.<a name="INDEX-1970" /><a name="INDEX-1971" /><a name="INDEX-1972" />
</p></div>

<a name="INDEX-1973" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>peerport</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
peerport
</pre><p><a name="INDEX-1973" />Returns the port number
for the remote host to which a socket connects.
</p></div>

<a name="INDEX-1974" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sockaddr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
sockaddr
</pre><p><a name="INDEX-1974" />Returns the address part
(as a packed string) of the socket-address data structure for the
socket.
</p></div>

<a name="INDEX-1975" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sockhost</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
sockhost
</pre><p><a name="INDEX-1975" />Returns the address part
of the socket-address data structure in the dotted-quad string form,
e.g., 207.44.27.2.
</p></div>

<a name="INDEX-1976" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sockport</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
sockport
</pre><p><a name="INDEX-1976" />Returns the local port
number for the socket.
</p></div>
</div>
</div>
<a name="perlnut2-CHP-15-SECT-2.5" /><div class="sect2">
<h3 class="sect2">15.2.5. IO::Socket::UNIX Reference</h3>

<p><a name="INDEX-1977" /><a name="INDEX-1978" /><a name="INDEX-1979" />The IO::Socket::UNIX subclass creates
a Unix-domain socket. Unix-domain sockets are local to the current
host and are used internally to implement pipes, thus providing
communication between unrelated processes. Using sockets provides
finer control than using named pipes, also called FIFO (first-in,
first-out) buffers. This is because receiving sockets can distinguish
between different client connections, which can then be assigned to
different sessions with the <tt class="literal">accept</tt> call.
</p>

<p>The IO::Socket::UNIX constructor (<tt class="literal">new( )</tt>) creates
the socket and returns an object containing a filehandle. The
constructor can take the following options:
</p>

<dl>
<dt><b><tt class="literal">Type =&gt; SOCK_STREAM | SOCK_DGRAM</tt></b></dt>
<dd>
<a name="INDEX-1980" />Indicates the type of socket:
<tt class="literal">SOCK_STREAM</tt> for streaming,
<tt class="literal">SOCK_DGRAM</tt> for packets or datagrams.
</p>
</dd>


<dt><b><tt class="literal">Local =&gt;</tt> <em class="replaceable">pathname</em></b></dt>
<dd>
<a name="INDEX-1981" />Provides the pathname of
the FIFO buffer to bind to the socket.
</p>
</dd>


<dt><b><tt class="literal">Peer =&gt;</tt> <em class="replaceable">pathname</em></b></dt>
<dd>
<a name="INDEX-1982" />Provides the pathname to
the destination FIFO buffer.
</p>
</dd>


<dt><b><tt class="literal">Listen =&gt;</tt> <em class="replaceable">n</em></b></dt>
<dd>
<a name="INDEX-1983" />Creates a listen socket and sets the
queue size to <em class="replaceable"><tt>n</tt></em>.
</p>
</dd>

</dl>

<p>The following methods can be used on an object created with
IO::Socket::UNIX.
</p>

<a name="INDEX-1984" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>hostpath</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
hostpath
</pre><p><a name="INDEX-1984" />Returns the pathname to
the local FIFO buffer.
</p></div>

<a name="INDEX-1985" /><a name="INDEX-1986" /><a name="INDEX-1987" /><a name="INDEX-1988" /><a name="INDEX-1989" /><a name="INDEX-1990" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>peerpath</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
peerpath
</pre><p><a name="INDEX-1985" />Returns the pathname to
the destination or peer FIFO.<a name="INDEX-1986" /><a name="INDEX-1987" /><a name="INDEX-1988" /><a name="INDEX-1989" /><a name="INDEX-1990" /> 
</p></div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">15. Sockets</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16. Email Connectivity</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>