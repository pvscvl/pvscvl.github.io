<html><head><title>Perl Functions in Alphabetical Order (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl in a Nutshell" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">5.2. Perl Functions in Alphabetical Order</h2>

<a name="INDEX-901" /><a name="INDEX-902" /><a name="INDEX-903" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="abs"><b>abs</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
abs <em class="emphasis">value</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-903" />Returns the absolute value of its
argument (or <tt class="literal">$_</tt> if omitted).
</p></div>

<a name="INDEX-904" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="accept"><b>accept</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
accept <em class="emphasis">newsocket</em>, <em class="emphasis">genericsocket</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-904" />Readies a server process to accept
socket connections from clients. Execution is suspended until a
connection is made, at which time the
<em class="replaceable"><tt>newsocket</tt></em> filehandle is opened and
attached to the newly made connection. The function returns the
connected address if the call succeeds or false otherwise (and it
puts the error code into <tt class="literal">$!</tt>).
<em class="replaceable"><tt>genericsocket</tt></em> must be a filehandle already
opened via the <tt class="literal">socket</tt> function and bound to one of
the server's network addresses.
</p></div>

<a name="INDEX-905" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="alarm"><b>alarm</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
alarm <em class="emphasis">n</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-905" />Sends a
<tt class="literal">SIGALRM</tt> signal to the executing Perl program after
<em class="replaceable"><tt>n</tt></em> seconds. On some older systems, alarms
go off "at the top of the second,"
so, for instance, an <tt class="literal">alarm 1</tt> may go off anywhere
between 0 to 1 seconds from now, depending on when in the current
second it is. An <tt class="literal">alarm 2</tt> may go off anywhere from
1 to 2 seconds from now. And so on.
</p><p>Each call disables the previous timer, and an argument of
<tt class="literal">0</tt> may be supplied to cancel the previous timer
without starting a new one. The return value is the number of seconds
remaining on the previous timer.
</p></div>

<a name="INDEX-906" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="atan2"><b>atan2</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
atan2 <em class="emphasis">y</em>, <em class="emphasis">x</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-906" />Returns the
arctangent of
<em class="replaceable"><tt>y</em><tt class="literal">/</tt><em class="replaceable">x</tt></em>in the range -<img src="figs/U03C0.gif" alt="Figure 5.4" width="10" height="8" /> to <img src="figs/U03C0.gif" alt="Figure 5.4" width="10" height="8" />. A quick way to get an
approximate value of <img src="figs/U03C0.gif" alt="Figure 5.4" width="10" height="8" /> is to say:
</p><blockquote><pre class="code">$pi = atan2(1,1) * 4;</pre></blockquote><p>For the tangent operation, you may use the <tt class="literal">POSIX::tan(
)</tt> function, or use the familiar relation:
</p><blockquote><pre class="code">sub tan { sin($_[0]) / cos($_[0]) }</pre></blockquote></div>

<a name="INDEX-907" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="bind"><b>bind</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
bind <em class="emphasis">socket</em>, <em class="emphasis">address</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-907" />Attaches an address to an
already opened socket specified by the
<em class="replaceable"><tt>socket</tt></em> filehandle. The function returns
true for success, false otherwise (and puts the error code into
<tt class="literal">$!</tt>). <em class="replaceable"><tt>address</tt></em> should be
a packed address of the proper type for the socket.
</p></div>

<a name="INDEX-908" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="binmode"><b>binmode</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
binmode <em class="emphasis">filehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-908" />Arranges for the
file to be treated in binary mode on operating systems that
distinguish between binary and text files. It should be called after
<tt class="literal">open</tt> but before any I/O is done on the filehandle.
The only way to reset binary mode on a filehandle is to reopen the
file.
</p><p><tt class="literal">binmode</tt> has no effect under Unix, Plan9, or other
systems that use a single <tt class="literal">\n</tt> (newline) character
as a line delimiter. On systems such as Win32 or MS-DOS,
<tt class="literal">binmode</tt> is needed to prevent the translation of
the line delimiter characters to and from <tt class="literal">\n</tt>.
</p></div>

<a name="INDEX-909" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="bless"><b>bless</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
bless $<em class="emphasis">ref</em>, [<em class="emphasis">classname</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-909" />Looks up the item
pointed to by reference <em class="replaceable"><tt>ref</tt></em> and tells the
item that it is now an object in the
<em class="replaceable"><tt>classname</tt></em> package&#x2014;or the current
package if no class name is specified. It returns the reference for
convenience, since a <tt class="literal">bless</tt> is often the last thing
in a constructor function. (Always use the two-argument version if
the constructor doing the blessing might be inherited by a derived
class. In such cases, the class you want to bless your object into
will normally be found as the first argument to the constructor in
question.)
</p></div>

<a name="INDEX-910" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="caller"><b>caller</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
caller [<em class="emphasis">n</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-910" />Returns information
about the stack of current subroutine calls. Without an argument, it
returns the package name in a scalar context; in a list context, it
returns the package name, filename, and line number from which the
currently executing subroutine was called:
</p><blockquote><pre class="code">($package, $filename, $line) = caller;</pre></blockquote><p>With an argument it evaluates <em class="replaceable"><tt>n</tt></em> as the
number of stack frames to go back before the current one. It also
reports some additional information that the debugger uses to print a
stack trace:
</p><blockquote><pre class="code">$i = 0;
while (($pack, $file, $line, $subname, $hasargs, 
        $wantarray, $evaltext, $is_require) = caller($i++)) {
    ...
}</pre></blockquote><p>Furthermore, when called from within the DB package,
<tt class="literal">caller</tt> returns more detailed information: it sets
the list variable <tt class="literal">@DB::args</tt> as the argument passed
in the given stack frame.
</p></div>

<a name="INDEX-911" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="chdir"><b>chdir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
chdir <em class="emphasis">dirname</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-911" />Changes the working
directory to <em class="replaceable"><tt>dirname</tt></em>, if possible. If
<em class="replaceable"><tt>dirname</tt></em> is omitted, it changes to the home
directory. The function returns <tt class="literal">1</tt> upon success,
<tt class="literal">0</tt> otherwise (and puts the error code into
<tt class="literal">$!</tt>).
</p></div>

<a name="INDEX-912" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="chmod"><b>chmod</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
chmod <em class="emphasis">mode</em>, <em class="emphasis">filelist</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-912" />Changes the
permissions of a list of files. The first argument must be the
permissions mode given in its octal number representation. The
function returns the number of files successfully changed. For
example:
</p><blockquote><pre class="code">$cnt = chmod 0755, 'file1', 'file2';</pre></blockquote><p>will set <tt class="literal">$cnt</tt> to <tt class="literal">0</tt>,
<tt class="literal">1</tt>, or <tt class="literal">2</tt>, depending on how many
files got changed (in the sense that the operation succeeded, not in
the sense that the bits were different afterward).
</p></div>

<a name="INDEX-913" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="chomp"><b>chomp</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
chomp $<em class="emphasis">var</em>
chomp @<em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-913" />Removes any
line-ending characters of a string in
<tt class="literal">$</tt><em class="replaceable"><tt>var</tt></em>, or each string in
<tt class="literal">@</tt><em class="replaceable"><tt>list</tt></em>, that correspond
to the current value of <tt class="literal">$/</tt> (not just any last
character, as <tt class="literal">chop</tt> does). <tt class="literal">chomp</tt>
returns the number of characters deleted. If <tt class="literal">$/</tt> is
empty (in paragraph mode), <tt class="literal">chomp</tt> removes all
newlines from the selected string (or strings, if
<tt class="literal">chomp</tt>ing a list). If no argument is given, the
function <tt class="literal">chomp</tt>s the <tt class="literal">$_</tt>
variable.
</p></div>

<a name="INDEX-914" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="chop"><b>chop</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
chop $<em class="emphasis">var</em>
chop @<em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-914" />Chops off the last
character of a string contained in the variable
<tt class="literal">$</tt><em class="replaceable"><tt>var</tt></em> (or strings in
each element of a
<tt class="literal">@</tt><em class="replaceable"><tt>list</tt></em>) and returns the
character chopped. The <tt class="literal">chop</tt> operator is used
primarily to remove the newline from the end of an input record but
is more efficient than <tt class="literal">s/\n$//</tt>. If no argument is
given, the function chops the <tt class="literal">$_</tt> variable.
</p></div>

<a name="INDEX-915" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="chown"><b>chown</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
chown <em class="emphasis">uid</em>, <em class="emphasis">gid</em>, <em class="emphasis">files</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-915" />Changes the owner
and group of a list of files. The first two arguments must be the
<em class="emphasis">numerical</em> <em class="replaceable"><tt>uid</tt></em> and
<em class="replaceable"><tt>gid</tt></em>, in that order. The function returns
the number of files successfully changed.
</p><p>On most systems, you are not allowed to change the ownership of the
file unless you're the superuser, although you
should be able to change the group to any of your secondary groups.
On insecure systems, these restrictions may be relaxed, but this is
not a portable assumption.
</p></div>

<a name="INDEX-916" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="chr"><b>chr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
chr <em class="emphasis">number</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-916" />Returns
the character represented by <em class="replaceable"><tt>number</tt></em> in the
character set. For example, <tt class="literal">chr(65)</tt> is
"A" in ASCII.
</p></div>

<a name="INDEX-917" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="chroot"><b>chroot</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
chroot <em class="emphasis">dirname</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-917" />Changes the root
directory for the current process to
<em class="replaceable"><tt>dirname</tt></em>&#x2014;the starting point for
pathnames beginning with <tt class="literal">/</tt>. This directory is
inherited across <tt class="literal">exec</tt> calls and by all
subprocesses. There is no way to undo a <tt class="literal">chroot</tt>.
Only the superuser can use this function.
</p></div>

<a name="INDEX-918" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="close"><b>close</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
close <em class="emphasis">filehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-918" />Closes the file, socket,
or pipe associated with the given filehandle. You
don't have to close
<em class="replaceable"><tt>filehandle</tt></em> if you are immediately going to
do another <tt class="literal">open</tt> on it, since the next
<tt class="literal">open</tt> will close it for you. However, an explicit
<tt class="literal">close</tt> on an input file resets the line counter
(<tt class="literal">$.</tt>), while the implicit <tt class="literal">close</tt>
done by <tt class="literal">open</tt> does not. Closing a pipe will wait
for the process executing on the pipe to complete and will prevent
the script from exiting before the pipeline is finished. Also,
closing a pipe explicitly puts the status value of the command
executing on the pipe into <tt class="literal">$?</tt>.
</p><p><em class="replaceable"><tt>filehandle</tt></em> may be an expression with a
value that gives a real filehandle name. It may also be a reference
to a filehandle object returned by some of the object-oriented I/O
packages.
</p></div>

<a name="INDEX-919" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="closedir"><b>closedir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
closedir <em class="emphasis">dirhandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-919" />Closes a
directory associated with the given directory handle opened by
<tt class="literal">opendir</tt>.
</p></div>

<a name="INDEX-920" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="connect"><b>connect</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
connect <em class="emphasis">socket</em>, <em class="emphasis">address</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-920" />Initiates a
connection with another process that is waiting at an
<tt class="literal">accept</tt> on the filehandle
<em class="replaceable"><tt>socket</tt></em>. The function returns true for
success, false otherwise (and puts the error code into
<tt class="literal">$!</tt>). <em class="replaceable"><tt>address</tt></em> is a
packed network address of the proper type for
<em class="replaceable"><tt>socket</tt></em>.
</p><p>To disconnect a socket, use either <tt class="literal">close</tt> or
<tt class="literal">shutdown</tt>.
</p></div>

<a name="INDEX-921" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="cos"><b>cos</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
cos <em class="emphasis">num</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-921" />Returns the cosine of
<em class="replaceable"><tt>num</tt></em> (expressed in radians). For the
inverse cosine operation, you may use the <tt class="literal">POSIX::acos(
)</tt> function, or use this relation:
</p><blockquote><pre class="code">sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }</pre></blockquote></div>

<a name="INDEX-922" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="crypt"><b>crypt</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
crypt <em class="emphasis">string</em>, <em class="emphasis">salt</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-922" />Used by the
<tt class="literal">passwd</tt> function on Unix systems to produce a
unique 13-character string (stored in the system's
password file) from the first 8 characters of the given
<em class="replaceable"><tt>string</tt></em> and the 2-character
<em class="replaceable"><tt>salt</tt></em>. The Perl function operates the same
way and returns a 13-character string with the first 2 characters as
the <em class="replaceable"><tt>salt</tt></em>. <tt class="literal">crypt</tt> uses a
modified version of the Data Encryption Standard, which produces a
one-way encryption; the resulting string cannot be decrypted to
determine the original string. <tt class="literal">crypt</tt> can be used
to check that a password is correct by comparing the string from the
function to the string found in <em class="emphasis">/etc/passwd</em> (if
you have permission to do this):
</p><blockquote><pre class="code">if (crypt ($guess, $pass) eq $pass) {
       # guess is correct
   }</pre></blockquote><p>The variable <tt class="literal">$pass</tt> is the password string from the
password file. <tt class="literal">crypt</tt> merely uses the first two
characters from this string for the <em class="replaceable"><tt>salt</tt></em>argument.
</p></div>

<a name="INDEX-923" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="dbmclose"><b>dbmclose</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
dbmclose %<em class="emphasis">hash</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-923" />Breaks the
binding between a DBM file and a hash.
</p><p>This function is actually just a call to <tt class="literal">untie</tt>
with the proper arguments, but is provided for backward compatibility
with older versions of Perl.
</p></div>

<a name="INDEX-924" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="dbmopen"><b>dbmopen</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
dbmopen %<em class="emphasis">hash</em>, <em class="emphasis">dbname</em>, <em class="emphasis">mode</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-924" />Binds a DBM file
(<em class="replaceable"><tt>dbname</tt></em>) to a hash
(%<em class="replaceable"><tt>hash</em>). <em class="replaceable">dbname</em>is the name of the database without the <em class="emphasis">.dir</tt></em> or
<em class="emphasis">.pag</em> extension. Note that while not deprecated,
<tt class="literal">dbmopen</tt> has basically been superseded by
<tt class="literal">tie( )</tt>. If the database does not exist, and a
valid mode is specified, the database is created with the permissions
specified by <em class="replaceable"><tt>mode</tt></em> (as modified by the
umask). To prevent creation of the database if it
doesn't exist, you may specify a
<em class="replaceable"><tt>mode</tt></em> of <tt class="literal">undef</tt>, and the
function will return a false value if it can't find
an existing database. If your system supports only the older DBM
functions, you may have only one <tt class="literal">dbmopen</tt> in your
program.
</p><p>Values assigned to the hash prior to the <tt class="literal">dbmopen</tt>
are not accessible. If you don't have write access
to the DBM file, you can only read the hash variables, not set them.
</p><p>This function is actually just a call to <tt class="literal">tie</tt> with
the proper arguments, but is provided for backward compatibility with
older versions of Perl.
</p></div>

<a name="INDEX-925" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="defined"><b>defined</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
defined <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-925" />Returns a Boolean
value saying whether the scalar value resulting from
<em class="replaceable"><tt>expr</tt></em> has a real value. If no argument is
given, <tt class="literal">defined</tt> checks <tt class="literal">$_</tt>.
</p><p>A scalar that contains no valid string, numeric, or reference value
is known as the undefined value, or <tt class="literal">undef</tt>. Many
operations return the undefined value under exceptional conditions,
such as end-of-file, uninitialized variable, system error, and so on.
This function allows you to distinguish between an undefined null
string and a defined null string when you're using
operators that might return a real null string.
</p><p>You can use <tt class="literal">defined</tt> to see if a subroutine exists,
that is, if the subroutine definition has been successfully parsed.
However, using <tt class="literal">defined</tt> on an array or a hash is
not guaranteed to produce intuitive results and should be avoided.
</p></div>

<a name="INDEX-926" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="delete"><b>delete</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
delete $<em class="emphasis">hash</em>{<em class="emphasis">key</em>}
delete @<em class="replaceable"><tt>hash</em>{@<em class="replaceable">keys</tt></em>}
</pre></td><td align="right" /></tr></table><a name="INDEX-926" />Deletes the specified
<em class="replaceable"><tt>key</em> or <em class="replaceable">keys</tt></em> and
associated values from the specified <em class="replaceable"><tt>hash</tt></em>.
(It doesn't delete a file. See <a href="ch05_02.htm">unlink</a> for that.) Deleting from
<tt class="literal">$ENV{}</tt> modifies the environment. Deleting from a
hash that is bound to a (writable) DBM file deletes the entry from
the DBM file.
</p><p>For normal hashes, the <tt class="literal">delete</tt> function returns the
value (not the key) that was deleted, but this behavior is not
guaranteed for tied hashes, such as those bound to DBM files. To test
whether a hash element has been deleted, use
<tt class="literal">exists</tt>.
</p></div>

<a name="INDEX-927" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="die"><b>die</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
die <em class="emphasis">message</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-927" />Prints
<em class="replaceable"><tt>message</tt></em> to the standard error output and
exits the Perl program with a nonzero exit status.
<em class="replaceable"><tt>message</tt></em> can be a list value, like the
arguments to <tt class="literal">print</tt>, from which the elements are
concatenated into a single string for output. If
<em class="replaceable"><tt>message</tt></em> does not end with a newline
(<tt class="literal">\n</tt>), the current script filename, line number,
and input line number (if any) are appended to the message with a
newline. With no argument, the function outputs the string
<tt class="literal">Died</tt> as its default.
</p><p><tt class="literal">die</tt> exits the programs with the current value of
the <tt class="literal">$!</tt> variable, which contains the text
describing the most recent operating system error value. This value
can be used in the <em class="replaceable"><tt>message</tt></em> to describe
what the problem may have been.
</p><p><tt class="literal">die</tt> behaves differently inside an
<tt class="literal">eval</tt> statement. It places the error message in the
<tt class="literal">$@</tt> variable and aborts the
<tt class="literal">eval</tt>, which returns an undefined value. This use
of <tt class="literal">die</tt> can raise runtime exceptions that can be
caught at a higher level of the program.
</p></div>

<a name="INDEX-928" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="do"><b>do</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
do {<em class="emphasis">block</em>}
</pre></td><td align="right" /></tr></table><a name="INDEX-928" />Executes
the sequence of commands in the <em class="replaceable"><tt>block</tt></em> and
returns the value of the last expression evaluated. When modified by
a loop modifier, Perl executes the <em class="replaceable"><tt>block</tt></em>once before testing the loop condition. (On other statements, the
loop modifiers test the conditional first.)
</p></div>

<a name="INDEX-929" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="dump"><b>dump</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
dump <em class="emphasis">label</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-929" />During
program execution, causes an immediate core dump after code previous
to it has already been executed. Primarily, this is so that you can
use the <tt class="literal">undump</tt> program to turn your core dump into
an executable binary after having initialized all your variables at
the beginning of the program. Please note that you
shouldn't use <tt class="literal">dump( )</tt> or
<tt class="literal">undump( )</tt> with the availability of the Perl
Compiler (B modules) as part of your Perl distribution. In addition,
you're unlikely to have success with
<tt class="literal">dump</tt> or <tt class="literal">undump</tt> on most modern
Unix systems (that support dynamic loading from
<tt class="literal">libdl</tt>). <tt class="literal">dump</tt> arranges for the
revived binary, when run, to begin by executing a
<tt class="literal">goto</tt> label (with all the restrictions that
<tt class="literal">goto</tt> suffers). Think of the operation as a
<tt class="literal">goto</tt> with an intervening core dump and
reincarnation. If <em class="replaceable"><tt>label</tt></em> is omitted, the
function arranges for the program to restart from the top. Note that
any files opened at the time of the dump will no longer be open when
the program is reincarnated. See also the <em class="emphasis">-u</em>
command-line switch.
</p><p>As of Perl 5.8, <tt class="literal">dump</tt> is now largely obsolete,
partly because it's difficult to convert a core file
into an executable, and because the real compiler backends for
generating portable bytecode and compilable C code have superseded
it. That's why you should now invoke it as <tt class="literal">"CORE::dump(
)"</tt> if you don't want to be warned against a possible typo.
</p><p>The <tt class="literal">undump</tt> program is not available on all systems
and may not be compatible with specific ports of Perl.
</p></div>

<a name="INDEX-930" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="each"><b>each</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
each %<em class="emphasis">hash</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-930" />Returns a two-element
list consisting of the key and value for the next element of a hash.
With successive calls to <tt class="literal">each</tt>, you can iterate
over the entire hash. Entries are returned in an indeterminate order.
When the hash is entirely read, a null list is returned. The next
call to <tt class="literal">each</tt> after that will start a new
iteration. The iterator can be reset either by reading all the
elements from the hash or by calling the <tt class="literal">keys</tt>
function in scalar context. You must not add elements to the hash
while iterating over it, although you are permitted to use
<tt class="literal">delete</tt>. In a scalar context,
<tt class="literal">each</tt> returns only the key.
</p><p>There is a single iterator for each hash, shared by all
<tt class="literal">each</tt>, <tt class="literal">keys</tt>, and
<tt class="literal">values</tt> function calls in the program. This means
that after a <tt class="literal">keys</tt> or <tt class="literal">values</tt>
call, the next <tt class="literal">each</tt> call will start again from the
beginning.
</p></div>

<a name="INDEX-931" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="endgrent"><b>endgrent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
endgrent
</pre></td><td align="right" /></tr></table><a name="INDEX-931" />Closes the groups
file (usually <em class="emphasis">/etc/group</em> on Unix systems) if
open. Not implemented on Win32 systems.
</p></div>

<a name="INDEX-932" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="endhostent"><b>endhostent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
endhostent
</pre></td><td align="right" /></tr></table><a name="INDEX-932" />Closes the
hosts file (usually <em class="emphasis">/etc/hosts</em> on Unix systems)
if open. Not implemented on Win32 systems.
</p></div>

<a name="INDEX-933" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="endnetent"><b>endnetent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
endnetent
</pre></td><td align="right" /></tr></table><a name="INDEX-933" />Closes the
networks file (usually <em class="emphasis">/etc/networks</em> on Unix
systems) if open. Not implemented on Win32 systems.
</p></div>

<a name="INDEX-934" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="endprotoent"><b>endprotoent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
endprotoent
</pre></td><td align="right" /></tr></table><a name="INDEX-934" />Closes the
prototypes file (usually <em class="emphasis">/etc/prototypes</em> on Unix
systems) if open. Not implemented on Win32 systems.
</p></div>

<a name="INDEX-935" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="endpwent"><b>endpwent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
endpwent
</pre></td><td align="right" /></tr></table><a name="INDEX-935" />Closes the
password file (<em class="emphasis">/etc/passwd</em> or equivalent on Unix
systems) if open. Not implemented on Win32 systems.
</p></div>

<a name="INDEX-936" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="endservent"><b>endservent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
endservent
</pre></td><td align="right" /></tr></table><a name="INDEX-936" />Closes the
services file (usually <em class="emphasis">/etc/services</em> on Unix
systems) if open. Not implemented on Win32 systems.
</p></div>

<a name="INDEX-937" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="eof"><b>eof</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
eof <em class="emphasis">filehandle</em>
eof( )
</pre></td><td align="right" /></tr></table><a name="INDEX-937" />Returns true if the
next read on <em class="replaceable"><tt>filehandle</tt></em> will return
end-of-file, or if <em class="replaceable"><tt>filehandle</tt></em> is not open.
<em class="replaceable"><tt>filehandle</tt></em> may be an expression with a
value that gives the real filehandle name. An <tt class="literal">eof</tt>
without an argument returns the end-of-file status for the last file
read. Empty parentheses <tt class="literal">( )</tt> may be used in
connection with the combined files listed on the command line. That
is, inside a <tt class="literal">while (&lt;&gt;)</tt> loop, <tt class="literal">eof(
)</tt> will detect the end of only the last of a group of files.
Use <tt class="literal">eof(ARGV)</tt> or <tt class="literal">eof</tt> (without
parentheses) to test each file in a <tt class="literal">while
(&lt;&gt;)</tt> loop. For example, the following code inserts
dashes just before the last line of the last file:
</p><blockquote><pre class="code">while (&lt;&gt;) {
    if (eof( )) {
        print "-" x 30, "\n";
    }
    print;
}</pre></blockquote></div>

<a name="INDEX-938" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="eval"><b>eval</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
eval <em class="emphasis">string</em>
eval {<em class="emphasis">block</em>}
</pre></td><td align="right" /></tr></table><a name="INDEX-938" />Evaluates the
expression or code in its argument at runtime as a separate Perl
program within the context of the larger script. Any variable
settings remain afterward, as do any subroutine or format
definitions. The code of the <tt class="literal">eval</tt> is treated as a
block, so any locally scoped variables declared within the
<tt class="literal">eval</tt> last only until the <tt class="literal">eval</tt>
is done. (See also <a href="ch05_02.htm">local</a> and
<a href="ch05_02.htm">my</a>.) The value returned from an
<tt class="literal">eval</tt> is the value of the last expression
evaluated. Like subroutines, you may also use the
<tt class="literal">return</tt> function to return a value and exit the
<tt class="literal">eval</tt>.
</p><p>With <tt class="literal">eval</tt> <em class="replaceable"><tt>string</tt></em>, the
contents of <em class="replaceable"><tt>string</tt></em> are compiled and
executed at runtime. For example:
</p><blockquote><pre class="code">$a = 3, $b = 4;
$c = '$a * $b';
print (eval "$c"); # Prints 12</pre></blockquote><p>The string form of <tt class="literal">eval</tt> is useful for executing
strings produced at runtime from standard or other dynamic input
sources. If the string produces an error, either from syntax or at
runtime, the <tt class="literal">eval</tt> exits with the undefined value
and places the error in <tt class="literal">$@</tt>. If
<em class="replaceable"><tt>string</tt></em> is omitted, the operator evaluates
<tt class="literal">$_</tt>.
</p><p>The block form of <tt class="literal">eval</tt> is used in Perl programs to
handle runtime errors (exceptions). The code in
<em class="replaceable"><tt>block</tt></em> is compiled only once during the
compilation of the main program. If there is a syntax error in the
block, it will produce an error at compile time. If the code in
<em class="replaceable"><tt>block</tt></em> produces a runtime error (or if a
<tt class="literal">die</tt> statement is encountered), the
<tt class="literal">eval</tt> exits, and the error is placed in
<tt class="literal">$@</tt>. For example, the following code can be used to
trap a divide-by-zero error at runtime:
</p><blockquote><pre class="code">eval {
      $a = 10; $b = 0;
      $c = $a / $b;     # Causes runtime error
                        # Trapped by eval
     };
print $@;               # Prints "Illegal division by 0 at
                        # try.pl line 3"</pre></blockquote><p>As with any code in a block, a final semicolon is not required.</p></div>

<a name="INDEX-939" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="exec"><b>exec</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
exec <em class="emphasis">command</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-939" />Terminates the
currently running Perl script and executes the program named in
<em class="replaceable"><tt>command</tt></em>. The Perl program does not resume
after the <tt class="literal">exec</tt> unless the <tt class="literal">exec</tt>
cannot be run and produces an error. Unlike
<tt class="literal">system</tt>, the executed
<em class="replaceable"><tt>command</tt></em> is not forked off into a child
process. An <tt class="literal">exec</tt> completely replaces the script in
its current process.
</p><p><em class="replaceable"><tt>command</tt></em> may be a scalar containing a
string with the name of the program to run and any arguments. This
string is checked for shell metacharacters, and if there are any,
passes the string to <tt class="literal">/bin/sh/ -c</tt> for parsing.
Otherwise, the string is read as a program command, bypassing any
shell processing. The first word of the string is used as the program
name, with any remaining words used as arguments.
</p><p><em class="replaceable"><tt>command</tt></em> may also be a list value in which
the first element is parsed as the program name and remaining
elements as arguments. For example:
</p><blockquote><pre class="code">exec 'echo', 'Your arguments are: ', @ARGV;</pre></blockquote><p>The <tt class="literal">exec</tt> function is not implemented for Perl on
Win32 platforms.
</p></div>

<a name="INDEX-940" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="exists"><b>exists</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
exists $<em class="emphasis">hash</em>{$<em class="emphasis">key</em>}
</pre></td><td align="right" /></tr></table><a name="INDEX-940" />Returns true if the
specified hash key exists, even if the corresponding value is
undefined.
</p></div>

<a name="INDEX-941" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="exit"><b>exit</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
exit <em class="emphasis">status</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-941" />Exits the current
Perl process immediately with that value given by
<em class="replaceable"><tt>status</tt></em>. This could be the entire Perl
script you are running or only a child process created by
<tt class="literal">fork</tt>. Here's a fragment that lets
a user exit the program by typing <tt class="literal">x</tt> or
<tt class="literal">X</tt>:
</p><blockquote><pre class="code">$ans = &lt;STDIN&gt;;
exit 0 if $ans =~ /^[Xx]/;</pre></blockquote><p>If <em class="replaceable"><tt>status</tt></em> is omitted, the function exits
with <tt class="literal">0</tt>. You shouldn't use
<tt class="literal">exit</tt> to abort a subroutine if
there's any chance that someone might want to trap
whatever error happened. Use <tt class="literal">die</tt> instead, which
can be trapped by an <tt class="literal">eval</tt>.
</p></div>

<a name="INDEX-942" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="exp"><b>exp</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
exp <em class="emphasis">num</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-942" />Returns
<em class="emphasis">e</em> to the power of
<em class="replaceable"><tt>num</em>. If <em class="replaceable">num</tt></em> is
omitted, it gives <tt class="literal">exp($_)</tt>. To do general
exponentiation, use the <tt class="literal">**</tt> operator.
</p></div>

<a name="INDEX-943" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="fcntl"><b>fcntl</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
fcntl <em class="emphasis">filehandle</em>, <em class="emphasis">function</em>, <em class="emphasis">arg</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-943" />Calls
the file control <em class="replaceable"><tt>function</tt></em> (with the
function-specific <em class="replaceable"><tt>arg</tt></em>) to use on the file
or device opened with <em class="replaceable"><tt>filehandle</tt></em>.
<tt class="literal">fcntl</tt> calls Unix's
<tt class="literal">fcntl</tt> function (not available on Win32 platforms).
If the function is not implemented, the program exits with a fatal
error. <tt class="literal">fcntl</tt> sets file descriptors for a
filehandle. This built-in command is usable when you use the Fcntl
module in the standard distribution:
</p><blockquote><pre class="code">use Fcntl;</pre></blockquote><p>This module imports the correct <em class="replaceable"><tt>function</tt></em>definitions. See the description of the Fcntl module in <a href="ch08_01.htm">Chapter 8, "Standard Modules"</a>. 
</p><p>The return value of <tt class="literal">fcntl</tt> (and
<tt class="literal">ioctl</tt>) is as follows:
</p><a name="ch05-43-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>System call returns</p>
</th>
<th>
<p>Perl returns</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">-1</tt></p>
</td>
<td>
<p>Undefined value</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">0</tt></p>
</td>
<td>
<p>String <tt class="literal">"0 but true"</tt></p>
</td>
</tr>
<tr>
<td>
<p>Anything else</p>
</td>
<td>
<p>That number</p>
</td>
</tr>

</table>
<p>Thus Perl returns true on success and false on failure, yet you can
still easily determine the actual value returned by the operating
system.
</p></div>

<a name="INDEX-944" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="fileno"><b>fileno</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
fileno <em class="emphasis">filehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-944" />Returns the file
descriptor for a filehandle. (A file descriptor is a small integer,
unlike the filehandle, which is a symbol.) It returns
<tt class="literal">undef</tt> if the handle is not open.
It's useful for constructing bitmaps for
<tt class="literal">select</tt> and for passing to certain obscure system
calls if <tt class="literal">syscall</tt> is implemented.
It's also useful for double-checking that the
<tt class="literal">open</tt> function gave you the file descriptor you
wanted.
</p></div>

<a name="INDEX-945" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="flock"><b>flock</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
flock <em class="emphasis">filehandle</em>, <em class="emphasis">operation</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-945" />Establishes or
removes a lock on a file opened with
<em class="replaceable"><tt>filehandle</tt></em>. This function calls one of the
Unix functions <tt class="literal">flock</tt>, <tt class="literal">lockf</tt>, or
the locking capabilities of <tt class="literal">fcntl</tt>, whichever your
system supports. If none of these functions exist on your system,
<tt class="literal">flock</tt> will produce a fatal error.
</p><p><em class="replaceable"><tt>operation</tt></em> is the type of locking function
to perform. The number by each operation name is the argument that
Perl's <tt class="literal">flock</tt> takes by default.
You may also use the operation names if you explicitly import them
from the Fcntl module with <tt class="literal">use Fcntl ":flock"</tt>.
</p><dl>
<dt><a name="<tt class="literal">LOCK_SH</tt> (1)"><b><tt class="literal">LOCK_SH</tt> (1)</b></dt>
<dd>
Establishes a shared lock on the file (read lock).</p>
</dd>


<dt><a name="<tt class="literal">LOCK_EX</tt> (2)"><b><tt class="literal">LOCK_EX</tt> (2)</b></dt>
<dd>
Establishes an exclusive lock on the file (write lock).</p>
</dd>


<dt><a name="<tt class="literal">LOCK_UN</tt> (8)"><b><tt class="literal">LOCK_UN</tt> (8)</b></dt>
<dd>
Removes a lock from the file.</p>
</dd>


<dt><a name="<tt class="literal">LOCK_NB</tt> (4)"><b><tt class="literal">LOCK_NB</tt> (4)</b></dt>
<dd>
Prevents <tt class="literal">flock</tt> from blocking while trying to
establish a lock with <tt class="literal">LOCK_SH</tt> or
<tt class="literal">LOCK_EX</tt> and instructs it to return immediately.
<tt class="literal">LOCK_NB</tt> must be <em class="emphasis">or</em>ed with the
other operation as an expression for the operation argument, i.e.,
<tt class="literal">(LOCK_EX |</tt> <tt class="literal">LOCK_NB)</tt>.
</p>
</dd>

</dl></div>

<a name="INDEX-946" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="fork"><b>fork</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
fork
</pre></td><td align="right" /></tr></table><a name="INDEX-946" />Spawns a child
process that executes the code immediately following the
<tt class="literal">fork</tt> call until the process is terminated (usually
with an <tt class="literal">exit</tt>). The child process runs parallel to
the parent process and shares all the parent's
variables and open filehandles. The function returns the child pid to
the parent process and <tt class="literal">0</tt> to the child process on
success. If it fails, it returns the undefined value to the parent
process, and no child process is created. If you
<tt class="literal">fork</tt> your child processes, you'll
have to <tt class="literal">wait</tt> on their zombies when they die. 
The
<tt class="literal">fork</tt> function is unlikely to be implemented on any
operating system not resembling Unix, unless it purports POSIX
compliance.
</p></div>

<a name="INDEX-947" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="formline"><b>formline</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
formline <em class="emphasis">picture</em>, <em class="emphasis">variables</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-947" />Internal function
used by formats, although you may also call it. It formats a list of
values (<em class="replaceable"><tt>variables</tt></em>) according to the
contents of <em class="replaceable"><tt>picture</tt></em>, placing the output
into the format output accumulator, <tt class="literal">$^A</tt>. When a
<tt class="literal">write</tt> is done, the contents of
<tt class="literal">$^A</tt> are written to a filehandle, but you can also
read <tt class="literal">$^A</tt> yourself and set <tt class="literal">$^A</tt>
back to "". Note that a format
typically does one <tt class="literal">formline</tt> per line of form, but
the <tt class="literal">formline</tt> function itself
doesn't care how many newlines are embedded in the
<em class="replaceable"><tt>picture</tt></em>. This means that the
<tt class="literal">~</tt> and <tt class="literal">~~</tt> tokens will treat the
entire <em class="replaceable"><tt>picture</tt></em> as a single line. Thus, you
may need to use multiple formlines to implement a single-record
format, such as the format compiler.
</p><p>Be careful if you put double quotes around the picture, since an
<tt class="literal">@</tt> character may be taken to mean the beginning of
an array name. <tt class="literal">formline</tt> always returns true. See
<a href="ch04_01.htm">Chapter 4, "The Perl Language"</a> for more information.
</p></div>

<a name="INDEX-948" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getc"><b>getc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getc <em class="emphasis">filehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-948" />Returns the next byte
from the input file attached to
<em class="replaceable"><tt>filehandle</tt></em>. At end-of-file, it returns a
null string. If <em class="replaceable"><tt>filehandle</tt></em> is omitted, the
function reads from STDIN. This operator is very slow, but is
occasionally useful for single-character input from the keyboard.
</p></div>

<a name="INDEX-949" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getgrent"><b>getgrent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getgrent
</pre></td><td align="right" /></tr></table><a name="INDEX-949" />Returns the next
entry from the systems group file (usually
<em class="emphasis">/etc/group</em> on Unix systems) starting from the
top. Returns null when end-of-file is reached. The return value from
<tt class="literal">getgrent</tt> in list context is:
</p><blockquote><pre class="code">($name, $passwd, $gid, $members)</pre></blockquote><p>in which <tt class="literal">$members</tt> contains a space-separated list
of the login names of the members of the group. In scalar context,
<tt class="literal">getgrent</tt> returns only the group name.
</p></div>

<a name="INDEX-950" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getgrgid"><b>getgrgid</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getgrgid <em class="emphasis">gid</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-950" />Retrieves a group
file (<em class="emphasis">/etc/group</em>) entry by group number
<em class="replaceable"><tt>gid</tt></em>. The return value in list context is:
</p><blockquote><pre class="code">($name, $passwd, $gid, $members)</pre></blockquote><p>in which <tt class="literal">$members</tt> contains a space-separated list
of the login names of the members of the group. If you want to do
this repeatedly, consider caching the data in a hash using
<tt class="literal">getgrent</tt>. In scalar context,
<tt class="literal">getgrgid</tt> returns only the group name.
</p></div>

<a name="INDEX-951" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getgrnam"><b>getgrnam</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getgrnam <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-951" />Retrieves a group
file entry by the group name <em class="replaceable"><tt>name</tt></em>. The
return value in list context is:
</p><blockquote><pre class="code">($name, $passwd, $gid, $members)</pre></blockquote><p>in which <tt class="literal">$members</tt> contains a space-separated list
of the login names of the members of the group. In scalar context,
<tt class="literal">getgrnam</tt> returns only the numeric group ID.
</p></div>

<a name="INDEX-952" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="gethostbyaddr"><b>gethostbyaddr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
gethostbyaddr <em class="emphasis">address</em>, [<em class="emphasis">addrtype</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-952" />Retrieves
the hostname (and alternate addresses) of a packed binary network
<em class="replaceable"><tt>address</tt></em>.
(<em class="replaceable"><tt>addrtype</tt></em> indicates the type of address
given. Since <tt class="literal">gethostbyaddr</tt> is used almost solely
for Internet IP addresses, <em class="replaceable"><tt>addrtype</tt></em> is not
needed.) The return value in list context is:
</p><blockquote><pre class="code">($name, $aliases, $addrtype, $length, @addrs)</pre></blockquote><p>in which <tt class="literal">@addrs</tt> is a list of packed binary
addresses. In the Internet domain, each address is four bytes long
and can be unpacked by something like:
</p><blockquote><pre class="code">($a, $b, $c, $d) = unpack('C4', $addrs[0]);</pre></blockquote><p>In scalar context, <tt class="literal">gethostbyaddr</tt> returns only the
hostname.
</p></div>

<a name="INDEX-953" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="gethostbyname"><b>gethostbyname</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
gethostbyname <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-953" />Retrieves
the address (and other names) of a network hostname. The return value
in list context is:
</p><blockquote><pre class="code">($name, $aliases, $addrtype, $length, @addrs)</pre></blockquote><p>in which <tt class="literal">@addrs</tt> is a list of raw addresses. In
scalar context, <tt class="literal">gethostbyname</tt> returns only the
host address.
</p></div>

<a name="INDEX-954" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="gethostent"><b>gethostent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
gethostent
</pre></td><td align="right" /></tr></table><a name="INDEX-954" />Retrieves the
next entry from your system's network hosts file
(usually <em class="emphasis">/etc/hosts</em> on Unix). The return value
from <tt class="literal">gethostent</tt> is:
</p><blockquote><pre class="code">($name, $aliases, $addrtype, $length, @addrs)</pre></blockquote><p>in which <tt class="literal">@addrs</tt> is a list of raw addresses.
Scripts that use this function should not be considered portable.
</p></div>

<a name="INDEX-955" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getlogin"><b>getlogin</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getlogin
</pre></td><td align="right" /></tr></table><a name="INDEX-955" />Returns the
current login from <em class="emphasis">/etc/utmp</em> (Unix systems
only), if any. If null, use <tt class="literal">getpwuid</tt>. For example:
</p><blockquote><pre class="code">$login = getlogin || getpwuid($&lt;) || "Intruder!!";</pre></blockquote></div>

<a name="INDEX-956" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getnetbyaddr"><b>getnetbyaddr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getnetbyaddr <em class="emphasis">address</em>, [<em class="emphasis">addrtype</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-956" />Retrieves the
network name or names of the given network
<em class="replaceable"><tt>address</tt></em>.
(<em class="replaceable"><tt>addrtype</tt></em> indicates the type of address.
Often, this function is used for IP addresses, in which the type is
not needed.) The return value in list context is:
</p><blockquote><pre class="code">($name, $aliases, $addrtype, $net)</pre></blockquote><p>In scalar context, <tt class="literal">getnetbyaddr</tt> returns only the
network name.
</p></div>

<a name="INDEX-957" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getnetbyname"><b>getnetbyname</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getnetbyname <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-957" />Retrieves the
network address of a network <em class="replaceable"><tt>name</tt></em>. The
return value in list context is:
</p><blockquote><pre class="code">($name, $aliases, $addrtype, $net)</pre></blockquote><p>In scalar context, <tt class="literal">getnetbyname</tt> returns only the
network address.
</p></div>

<a name="INDEX-958" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getnetent"><b>getnetent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getnetent
</pre></td><td align="right" /></tr></table><a name="INDEX-958" />Retrieves the
next line from your <em class="emphasis">/etc/networks</em> file, or
system equivalent. The return value in list context is:
</p><blockquote><pre class="code">($name, $aliases, $addrtype, $net)</pre></blockquote><p>In scalar context, <tt class="literal">getnetent</tt> returns only the
network name.
</p></div>

<a name="INDEX-959" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getpeername"><b>getpeername</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getpeername <em class="emphasis">socket</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-959" />Returns the
packed socket address of the other end of the
<em class="replaceable"><tt>socket</tt></em> connection. For example:
</p><blockquote><pre class="code">use Socket;
$hersockaddr = getpeername SOCK;
($port, $heraddr) = unpack_sockaddr_in($hersockaddr);
$herhostname = gethostbyaddr($heraddr, AF_INET);
$herstraddr = inet_ntoa($heraddr);</pre></blockquote></div>

<a name="INDEX-960" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getpgrp"><b>getpgrp</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getpgrp <em class="emphasis">pid</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-960" />Returns the
current process group for the specified process ID
(<em class="replaceable"><tt>pid</tt></em>). Use a
<em class="replaceable"><tt>pid</tt></em> of <tt class="literal">0</tt> for the
current process. Invoking <tt class="literal">getpgrp</tt> will produce a
fatal error if used on a machine that doesn't
implement the <tt class="literal">getpgrp</tt> system call. If
<em class="replaceable"><tt>pid</tt></em> is omitted, the function returns the
process group of the current process (the same as using a
<em class="replaceable"><tt>pid</tt></em> of <tt class="literal">0</tt>). On systems
implementing this operator with the POSIX
<tt class="literal">getpgrp(2)</tt> system call,
<em class="replaceable"><tt>pid</tt></em> must be omitted or, if supplied, must
be <tt class="literal">0</tt>.
</p></div>

<a name="INDEX-961" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getppid"><b>getppid</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getppid
</pre></td><td align="right" /></tr></table><a name="INDEX-961" />Returns the
process ID of the parent process. On a typical Unix system, if your
parent process ID changes to <tt class="literal">1</tt>, your parent
process has died, and you've been adopted by the
<em class="emphasis">init</em> program.
</p></div>

<a name="INDEX-962" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getpriority"><b>getpriority</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getpriority <em class="emphasis">type</em>, <em class="emphasis">id</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-962" />Returns the
current priority for a process, a process group, or a user.
<em class="replaceable"><tt>type</tt></em> indicates which of these three
process types to return. (The type identifiers are system-specific.
Consult the manpage for <tt class="literal">getpriority</tt>.) The
<em class="replaceable"><tt>id</tt></em> gives the specific ID of the
corresponding process type in <em class="replaceable"><tt>type</tt></em>: a
process ID, a process-group ID, or a user ID. The value
<tt class="literal">0</tt> in <em class="emphasis">who</em> gives the priority
for the current process, process group, or user.
</p><p>The priority will be an integer value. Lower values indicate higher
priority (negative values may be returned on some systems). Invoking
<tt class="literal">getpriority</tt> will produce a fatal error if used on
a machine that doesn't implement the
<tt class="literal">getpriority</tt> system call.
</p></div>

<a name="INDEX-963" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getprotobyname"><b>getprotobyname</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getprotobyname <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-963" />Translates
a protocol name to its corresponding number. The return value in list
context is:
</p><blockquote><pre class="code">($name, $aliases, $protocol_number)</pre></blockquote><p>In scalar context, <tt class="literal">getprotobyname</tt> returns only the
protocol number.
</p></div>

<a name="INDEX-964" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getprotobynumber"><b>getprotobynumber</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getprotobynumber <em class="emphasis">number</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-964" />Translates
a protocol number to its corresponding name. The return value in list
context is:
</p><blockquote><pre class="code">($name, $aliases, $protocol_number)</pre></blockquote><p>In scalar context, <tt class="literal">getprotobynumber</tt> returns only
the protocol name.
</p></div>

<a name="INDEX-965" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getprotoent"><b>getprotoent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getprotoent
</pre></td><td align="right" /></tr></table><a name="INDEX-965" />Retrieves the
next line from the <em class="emphasis">/etc/protocols</em> file (on some
Unix systems). Returns null at the end of the file. The return value
from <tt class="literal">getprotoent</tt> is:
</p><blockquote><pre class="code">($name, $aliases, $protocol_number)</pre></blockquote><p>In scalar context, <tt class="literal">getprotoent</tt> returns only the
protocol name.
</p></div>

<a name="INDEX-966" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getpwent"><b>getpwent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getpwent
</pre></td><td align="right" /></tr></table><a name="INDEX-966" />Retrieves the
next line from the <em class="emphasis">/etc/passwd</em> file (or its
equivalent coming from another server). Returns null at the end of
the file. The return value in list context is:
</p><blockquote><pre class="code">($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)</pre></blockquote><p>Some machines may use the quota and comment fields for other
purposes, but the remaining fields will always be the same. To set up
a hash for translating login names to uids, do this:
</p><blockquote><pre class="code">while (($name, $passwd, $uid) = getpwent) {
    $uid{$name} = $uid;
}</pre></blockquote><p>In scalar context, <tt class="literal">getpwent</tt> returns only the
username.
</p></div>

<a name="INDEX-967" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getpwnam"><b>getpwnam</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getpwnam <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-967" />Retrieves the
<em class="emphasis">passwd</em> file entry of a user
<em class="replaceable"><tt>name</tt></em>. The return value in list context is:
</p><blockquote><pre class="code">($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)</pre></blockquote><p>If you want to do this repeatedly, consider caching the data in a
hash using <tt class="literal">getpwent</tt>.
</p><p>In scalar context, <tt class="literal">getpwnam</tt> returns only the
numeric user ID.
</p></div>

<a name="INDEX-968" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getpwuid"><b>getpwuid</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getpwuid <em class="emphasis">uid</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-968" />Retrieves the
<em class="emphasis">passwd</em> file entry with the user ID
<em class="replaceable"><tt>uid</tt></em>. The return value in list context is:
</p><blockquote><pre class="code">($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell)</pre></blockquote><p>If you want to do this repeatedly, consider slurping the data into a
hash using <tt class="literal">getpwent</tt>.
</p><p>In scalar context, <tt class="literal">getpwuid</tt> returns the username.</p></div>

<a name="INDEX-969" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getservbyname"><b>getservbyname</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getservbyname <em class="emphasis">name</em>, <em class="emphasis">proto</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-969" />Translates a
service (port) name to its corresponding port number.
<em class="replaceable"><tt>proto</tt></em> is a protocol name such as
<tt class="literal">tcp</tt>. The return value in list context is:
</p><blockquote><pre class="code">($name, $aliases, $port_number, $protocol_name)</pre></blockquote><p>In scalar context, <tt class="literal">getservbyname</tt> returns only the
service port number.
</p></div>

<a name="INDEX-970" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getservbyport"><b>getservbyport</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getservbyport <em class="emphasis">port</em>, <em class="emphasis">proto</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-970" />Translates a
service (port) number to its corresponding names.
<em class="replaceable"><tt>proto</tt></em> is a protocol name such as
<tt class="literal">tcp</tt>. The return value in list context is:
</p><blockquote><pre class="code">($name, $aliases, $port_number, $protocol_name)</pre></blockquote><p>In scalar context, <tt class="literal">getservbyport</tt> returns only the
service port name.
</p></div>

<a name="INDEX-971" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getservent"><b>getservent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getservent
</pre></td><td align="right" /></tr></table><a name="INDEX-971" />Retrieves the
next listing from the <em class="emphasis">/etc/services</em> file or its
equivalent. Returns null at the end of the file. The return value in
list context is:
</p><blockquote><pre class="code">($name, $aliases, $port_number, $protocol_name)</pre></blockquote><p>In scalar context, <tt class="literal">getservent</tt> returns only the
service port name.
</p></div>

<a name="INDEX-972" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getsockname"><b>getsockname</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getsockname <em class="emphasis">socket</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-972" />Returns the
packed socket address of this end of the
<em class="replaceable"><tt>socket</tt></em> connection.
</p></div>

<a name="INDEX-973" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="getsockopt"><b>getsockopt</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
getsockopt <em class="emphasis">socket</em>, <em class="emphasis">level</em>, <em class="emphasis">optname</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-973" />Returns the
value of the socket option <em class="replaceable"><tt>optname</tt></em>, or the
undefined value if there is an error.
<em class="replaceable"><tt>level</tt></em> identifies the protocol level used
by <em class="replaceable"><tt>socket</tt></em>. Options vary for different
protocols. See also <a href="ch05_02.htm">setsockopt</a>.

</p></div>

<a name="INDEX-974" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="glob"><b>glob</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
glob <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-974" />Performs filename
expansion (globbing) on <em class="replaceable"><tt>expr</tt></em>, returning
the next successive name on each call. If
<em class="replaceable"><tt>expr</tt></em> is omitted, <tt class="literal">$_</tt> is
<tt class="literal">glob</tt>bed instead. This is the internal function
implementing the <tt class="literal">&lt;*&gt;</tt> operator, except that
it may be easier to type this way.
</p><p>The <tt class="literal">glob</tt> function is not related to the Perl
notion of typeglobs, other than that they both use a
<tt class="literal">*</tt> to represent multiple items.
</p></div>

<a name="INDEX-975" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="gmtime"><b>gmtime</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
gmtime <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-975" />Converts a time
string as returned by the <tt class="literal">time</tt> function to a
nine-element list with the time correct for Greenwich Mean Time zone
(a.k.a. GMT, UTC, etc.). Typically used as follows:
</p><blockquote><pre class="code">($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
        gmtime(time);</pre></blockquote><p>All list elements are numeric and come straight out of a C language
<tt class="literal">struct tm</tt>. In particular, this means that
<tt class="literal">$mon</tt> has the range <tt class="literal">0..11</tt>,
<tt class="literal">$wday</tt> has the range <tt class="literal">0..6</tt>, and
the year has had 1,900 subtracted from it. (You can remember which
elements are <tt class="literal">0</tt>-based because
you're always using these as subscripts into
<tt class="literal">0</tt>-based arrays containing month and day names.) If
<em class="replaceable"><tt>expr</tt></em> is omitted, it does
<tt class="literal">gmtime(time)</tt>. For example, to print the current
month in London:
</p><blockquote><pre class="code">$london_month = (qw(Jan Feb Mar Apr May Jun
        Jul Aug Sep Oct Nov Dec))[(gmtime)[4]];</pre></blockquote><p>The Perl library module Time::Local contains a subroutine,
<tt class="literal">timegm( )</tt>, that can convert in the opposite
direction.
</p><p>In scalar context, <tt class="literal">gmtime</tt> returns a
<tt class="literal">ctime(3)</tt>-like string based on the GMT time value.
</p></div>

<a name="INDEX-976" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="goto"><b>goto</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
goto <em class="replaceable"><tt>label</tt></em>
goto &amp;<em class="replaceable"><tt>name</tt></em>
</pre></td><td align="right" /></tr></table><a name="INDEX-976" />Finds the statement
labeled with <em class="replaceable"><tt>label</tt></em> (or an expression that
evaluates to a label) and resumes execution there. It may not be used
to go into any construct that requires initialization, such as a
subroutine or a <tt class="literal">foreach</tt> loop. It also
can't be used to go into a construct that is
optimized away. It can be used to go almost anywhere else within the
dynamic scope, including out of subroutines, but for that purpose,
it's usually better to use another construct, such
as <tt class="literal">last</tt> or <tt class="literal">die</tt>.
</p><p><tt class="literal">goto</tt>
<tt class="literal">&amp;</tt><em class="replaceable"><tt>name</tt></em> substitutes a
call to the named subroutine for the currently running subroutine.
This is used by <tt class="literal">AUTOLOAD</tt> subroutines that wish to
load another subroutine and pretend that this subroutine&#x2014;and
not the original one&#x2014;had been called in the first place (except
that any modifications to <tt class="literal">@_</tt> in the original
subroutine are propagated to the replacement subroutine). After the
<tt class="literal">goto</tt>, not even <tt class="literal">caller</tt> will be
able to tell that the original routine was called first.
</p></div>

<a name="INDEX-977" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="grep"><b>grep</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
grep <em class="emphasis">expr</em>, <em class="emphasis">list</em>
grep {<em class="emphasis">block</em>} <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-977" />Evaluates
<em class="replaceable"><tt>expr</em> or <em class="replaceable">block</tt></em>in a Boolean context for each element of
<em class="replaceable"><tt>list</tt></em>, temporarily setting
<tt class="literal">$_</tt> to each element in turn. In list context, it
returns a list of those elements for which the expression is true.
Mostly used like Unix <em class="emphasis">grep</em>, in which
<em class="replaceable"><tt>expr</tt></em> is a search pattern, and list
elements that match are returned. In scalar context,
<tt class="literal">grep</tt> returns the number of times the expression
was true.
</p><p>For example, presuming <tt class="literal">@all_lines</tt> contains lines
of code, this example weeds out comment lines:
</p><blockquote><pre class="code">@code_lines = grep !/^#/, @all_lines;</pre></blockquote></div>

<a name="INDEX-978" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="hex"><b>hex</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
hex <em class="emphasis">hexnum</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-978" />Converts a hexadecimal
string <em class="replaceable"><tt>hexnum</tt></em> into its equivalent decimal
value. If <em class="replaceable"><tt>hexnum</tt></em> is omitted, it interprets
<tt class="literal">$_</tt>. The following code sets
<tt class="literal">$number</tt> to 4,294,906,560:
</p><blockquote><pre class="code">$number = hex("ffff12c0");</pre></blockquote><p>To do the inverse function, use: </p><blockquote><pre class="code">sprintf "%lx", $number;   # That's a letter 'l', not a one</pre></blockquote></div>

<a name="INDEX-979" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="index"><b>index</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
index <em class="emphasis">string</em>, <em class="emphasis">substr</em>, [<em class="emphasis">start</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-979" />Returns the position of
the first occurrence of <em class="replaceable"><tt>substr</tt></em> in
<em class="replaceable"><tt>string</tt></em>. The
<em class="replaceable"><tt>start</tt></em>, if specified, specifies the
position to start looking in the string. Positions are integer
numbers based at <tt class="literal">0</tt>. If the substring is not found,
the <tt class="literal">index</tt> function returns <tt class="literal">-1</tt>.
</p></div>

<a name="INDEX-980" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="int"><b>int</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
int <em class="emphasis">num</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-980" />Returns
the integer portion of <em class="replaceable"><tt>num</tt></em>. If
<em class="replaceable"><tt>num</tt></em> is omitted, the function uses
<tt class="literal">$_</tt>.
</p></div>

<a name="INDEX-981" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="ioctl"><b>ioctl</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
ioctl <em class="emphasis">filehandle</em>, <em class="emphasis">function</em>, <em class="emphasis">arg</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-981" />Calls the
<tt class="literal">ioctl</tt> Unix system call to perform
<em class="replaceable"><tt>function</tt></em> (with the function-specific
<em class="replaceable"><tt>arg</tt></em>) on the file or device opened with
<em class="replaceable"><tt>filehandle</tt></em>. See <a href="ch05_02.htm">fcntl</a>
for a description of return values.
</p></div>

<a name="INDEX-982" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="join"><b>join</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
join <em class="emphasis">char</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-982" />Joins the separate
strings of <em class="replaceable"><tt>list</tt></em> into a single string with
fields separated by the value of <em class="replaceable"><tt>char</tt></em> and
returns the string. For example:
</p><blockquote><pre class="code">$_ = join ':', $login,$passwd,$uid,$gid,$gcos,$home,$shell;</pre></blockquote><p>To do the opposite, see <a href="ch05_02.htm">split</a>. To join things
together into fixed-position fields, see  <a href="ch05_02.htm">pack</a>.
</p></div>

<a name="INDEX-983" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="keys"><b>keys</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
keys %<em class="emphasis">hash</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-983" />Returns a list
consisting of all the keys of the named hash. The keys are returned
in an apparently random order, but it is the same order that either
the <tt class="literal">values</tt> or <tt class="literal">each</tt> function
produces (assuming that the hash has not been modified between
calls).
</p><p>In scalar context, <tt class="literal">keys</tt> returns the number of
elements of the hash (and resets the <tt class="literal">each</tt>
iterator).
</p><p><tt class="literal">keys</tt> can be used as an lvalue to increase the
number of hash buckets allocated for the hash:
</p><blockquote><pre class="code">keys <em class="replaceable"><tt>%hash</tt></em> = 200;</pre></blockquote></div>

<a name="INDEX-984" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="kill"><b>kill</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
kill <em class="emphasis">sig</em>, <em class="emphasis">processes</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-984" />Sends a signal,
<em class="replaceable"><tt>sig</tt></em>, to a list of
<em class="replaceable"><tt>processes</tt></em>. You may use a signal name in
quotes (without a <tt class="literal">SIG</tt> on the front). This function
returns the number of processes successfully signaled. If the signal
is negative, the function kills process groups instead of processes.
</p></div>

<a name="INDEX-985" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="last"><b>last</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
last <em class="emphasis">label</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-985" />Immediately exits the loop
identified by <em class="replaceable"><tt>label</tt></em>. If
<em class="replaceable"><tt>label</tt></em> is omitted, the command refers to
the innermost enclosing loop.
</p></div>

<a name="INDEX-986" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="lc"><b>lc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
lc <em class="emphasis">string</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-986" />Returns a
lowercase version of <em class="replaceable"><tt>string</tt></em> (or
<tt class="literal">$_</tt>, if omitted). This is the
internal function implementing the <tt class="literal">\L</tt> escape in
double-quoted strings.
</p></div>

<a name="INDEX-987" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="lcfirst"><b>lcfirst</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
lcfirst <em class="emphasis">string</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-987" />Returns a version
of <em class="replaceable"><tt>string</tt></em> (or <tt class="literal">$_</tt>, if
omitted) with the first character lowercased. This is the internal
function implementing the <tt class="literal">\l</tt> escape in
double-quoted strings.
</p></div>

<a name="INDEX-988" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="length"><b>length</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
length <em class="emphasis">val</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-988" />Returns the length
in bytes of the scalar value <em class="replaceable"><tt>val</tt></em>. If
<em class="replaceable"><tt>val</tt></em> is omitted, the function returns the
length of <tt class="literal">$_</tt>.
</p><p>Do not try to use <tt class="literal">length</tt> to find the size of an
array or hash. Use <tt class="literal">scalar
@</tt><em class="replaceable"><tt>array</tt></em> for the size of an array,
and <tt class="literal">scalar keys %</tt><em class="replaceable"><tt>hash</tt></em>for the size of a hash.
</p></div>

<a name="INDEX-989" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="link"><b>link</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
link <em class="emphasis">oldfile</em>, <em class="emphasis">newfile</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-989" />Creates
a Unix hard link from a new filename,
<em class="replaceable"><tt>newfile</tt></em>, to an existing file,
<em class="replaceable"><tt>oldfile</tt></em>, on the same filesystem. The
function returns <tt class="literal">1</tt> for success,
<tt class="literal">0</tt> otherwise (and puts the error code into
<tt class="literal">$!</tt>). This function is unlikely to be implemented
on non-Unix systems. See also <a href="ch05_02.htm">symlink</a>.
</p></div>

<a name="INDEX-990" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="listen"><b>listen</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
listen <em class="emphasis">socket</em>, <em class="emphasis">queuesize</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-990" />Tells the operating
system that you are ready to accept connections on
<em class="replaceable"><tt>socket</tt></em> and sets the number of waiting
connections to <em class="replaceable"><tt>queuesize</tt></em>. If the queue is
full, clients trying to connect to the socket will be refused
connection.
</p></div>

<a name="INDEX-991" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="local"><b>local</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
local <em class="emphasis">vars</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-991" />Declares one or more
global variables <em class="replaceable"><tt>vars</tt></em> to have temporary
values within the innermost enclosing block, subroutine,
<tt class="literal">eval</tt>, or file. The new value is initially
<tt class="literal">undef</tt> for scalars and <tt class="literal">( )</tt> for
arrays and hashes. If more than one variable is listed, the list must
be placed in parentheses, because the operator binds more tightly
than a comma. All the listed variables must be legal lvalues, that
is, something you can assign to. This operator works by saving the
current values of those variables on a hidden stack and restoring
them upon exiting the block, subroutine, <tt class="literal">eval</tt>, or
file.
</p><p>Subroutines called within the scope of a local variable will see the
localized inner value of the variable. The technical term for this
process is "dynamic scoping." Use
<tt class="literal">my</tt> for true private variables.
</p></div>

<a name="INDEX-992" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="localtime"><b>localtime</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
localtime <em class="emphasis">val</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-992" />Converts the
value returned by <tt class="literal">time</tt> to a nine-element list with
the time corrected for the local time zone. It's
typically used as follows:
</p><blockquote><pre class="code">($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
        localtime(time);</pre></blockquote><p>All list elements are numeric. The element <tt class="literal">$mon</tt>
(month) has the range <tt class="literal">0..11</tt>, and
<tt class="literal">$wday</tt> (weekday) has the range
<tt class="literal">0..6</tt>. The year has had 1,900 subtracted from it.
(You can remember which elements are <tt class="literal">0</tt>-based
because you're always using them as subscripts into
<tt class="literal">0</tt>-based arrays containing month and day names.) If
<em class="emphasis">val</em> is omitted, it does
<tt class="literal">localtime(time)</tt>. For example, to get the name of
the current day of the week:
</p><blockquote><pre class="code">$thisday = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[(localtime)[6]];</pre></blockquote><p>The Perl library module Time::Local contains a subroutine,
<tt class="literal">timelocal( )</tt>, that can convert in the opposite
direction.
</p><p>In scalar context, <tt class="literal">localtime</tt> returns a
<tt class="literal">ctime(3)</tt>-like string based on the localtime value.
</p></div>

<a name="INDEX-993" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="log"><b>log</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
log <em class="emphasis">num</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-993" />Returns
logarithm (base <em class="emphasis">e</em>) of
<em class="replaceable"><tt>num</em>. If <em class="replaceable">num</tt></em> is
omitted, the function uses <tt class="literal">$_</tt>.
</p></div>

<a name="INDEX-994" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="lstat"><b>lstat</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
lstat <em class="emphasis">file</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-994" />Like
<tt class="literal">stat</tt>, returns information on
<em class="replaceable"><tt>file</tt></em>, except that if
<em class="replaceable"><tt>file</tt></em> is a symbolic link,
<tt class="literal">lstat</tt> returns information about the link;
<tt class="literal">stat</tt> returns information about the file pointed to
by the link. (If symbolic links are unimplemented on your system, a
normal <tt class="literal">stat</tt> is done instead.)
</p></div>

<a name="INDEX-995" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="map"><b>map</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
map {<em class="emphasis">block</em>} <em class="emphasis">list</em>
map <em class="emphasis">expr</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-995" />Evaluates the
<em class="replaceable"><tt>block</em> or <em class="replaceable">expr</em>for each element of <em class="replaceable">list</tt></em> (locally setting
<tt class="literal">$_</tt> to each element) and returns the list value
composed of the results of each evaluation. It evaluates
<em class="replaceable"><tt>block</em> or <em class="replaceable">expr</em>in a list context, so each element of <em class="replaceable">list</tt></em>may produce zero, one, or more elements in the returned value. These
are all flattened into one list. For instance:
</p><blockquote><pre class="code">@words = map { split ' ' } @lines;</pre></blockquote><p>splits a list of lines into a list of words. Often, though, there is
a one-to-one mapping between input values and output values:
</p><blockquote><pre class="code">@chars = map chr, @nums;</pre></blockquote><p>This statement translates a list of numbers to the corresponding
characters.
</p></div>

<a name="INDEX-996" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="mkdir"><b>mkdir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
mkdir <em class="emphasis">filename</em>, <em class="emphasis">mode</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-996" />Creates the
directory specified by <em class="replaceable"><tt>filename</tt></em>, with
permissions specified by the numeric <em class="replaceable"><tt>mode</tt></em>(as modified by the current umask). If it succeeds, it returns
<tt class="literal">1</tt>; otherwise, it returns <tt class="literal">0</tt> and
sets <tt class="literal">$!</tt> (from the value of
<tt class="literal">errno</tt>).
</p></div>

<a name="INDEX-997" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="msgctl"><b>msgctl</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
msgctl <em class="emphasis">id</em>, <em class="emphasis">cmd</em>, <em class="emphasis">arg</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-997" />Calls the
<tt class="literal">msgctl</tt> system call, which is used to perform
different control operations on IPC message queues. (See the
<tt class="literal">msgctl</tt> documentation on your system for details.)
If <em class="replaceable"><tt>cmd</tt></em> is
<tt class="literal">&amp;IPC_STAT</tt>, then <em class="replaceable"><tt>arg</tt></em>must be a variable that will hold the returned
<tt class="literal">msqid_ds</tt> structure. The return values work like
those of <tt class="literal">fnctl</tt>: the undefined value for error,
<tt class="literal">0 but</tt> <tt class="literal">true</tt> for zero, or the
actual return value otherwise. On error, it puts the error code into
<tt class="literal">$!</tt>. Before calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "msg.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-998" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="msgget"><b>msgget</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
msgget <em class="emphasis">key</em>, <em class="emphasis">flags</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-998" />Calls the System V
IPC <tt class="literal">msgget</tt> system call. See the
<tt class="literal">msgget</tt> documentation on your system for details.
The function returns the message queue ID, or the undefined value if
there is an error. On error, it puts the error code into
<tt class="literal">$!</tt>. Before calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "msg.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-999" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="msgrcv"><b>msgrcv</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
msgrcv <em class="emphasis">id</em>, <em class="emphasis">var</em>, <em class="emphasis">size</em>, <em class="emphasis">type</em>, <em class="emphasis">flags</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-999" />Calls the System V
IPC <tt class="literal">msgrcv</tt> system call to receive a message from
message queue <em class="replaceable"><tt>id</tt></em> into variable
<em class="replaceable"><tt>var</tt></em> with a maximum message size of
<em class="replaceable"><tt>size</tt></em>. When a message is received, the
message type will be the first thing in
<em class="replaceable"><tt>var</tt></em>, and the maximum length of
<em class="replaceable"><tt>var</em> is <em class="replaceable">size</tt></em>plus the size of the message type. The function returns true if
successful, or false if there is an error. On error, it puts the
error code into <tt class="literal">$!</tt>. Before calling, you should
say:
</p><blockquote><pre class="code">require "ipc.ph";
require "msg.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-1000" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="msgsnd"><b>msgsnd</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
msgsnd <em class="emphasis">id</em>, <em class="emphasis">msg</em>, <em class="emphasis">flags</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1000" />Calls the System V
IPC <tt class="literal">msgsnd</tt> system call to send the message
<em class="replaceable"><tt>msg</tt></em> to the message queue
<em class="replaceable"><tt>id</em>. <em class="replaceable">msg</tt></em> must
begin with the long integer message type. You can create a message
like this:
</p><blockquote><pre class="code">$msg = pack "L a*", $type, $text_of_message;</pre></blockquote><p>The function returns true if successful, or false if there is an
error. On error, it puts the error code into <tt class="literal">$!</tt>.
Before calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "msg.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-1001" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="my"><b>my</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
my <em class="emphasis">vars</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1001" />Declares one or more
private variables to exist only within the innermost enclosing block,
subroutine, <tt class="literal">eval</tt>, or file. The new value is
initially <tt class="literal">undef</tt> for scalars and <tt class="literal">(
)</tt> for arrays and hashes. If more than one variable is
listed, the list must be placed in parentheses, because the operator
binds more tightly than a comma. Only simple scalars or complete
arrays and hashes may be declared this way. The variable name may not
be package-qualified, because package variables are all global, and
private variables are not related to any package.
</p><p>Unlike <tt class="literal">local</tt>, this operator has nothing to do with
global variables, other than hiding any other variable of the same
name from view within its scope. (A global variable can always be
accessed through its package-qualified form or a symbolic reference,
however.) A private variable is not visible until the statement after
its declaration. Subroutines called from within the scope of such a
private variable cannot see the private variable unless the
subroutine is also textually declared within the scope of the
variable.
</p></div>

<a name="INDEX-1002" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="next"><b>next</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
next <em class="emphasis">label</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1002" />Immediately jumps to
the next iteration of the loop identified by
<em class="replaceable"><tt>label</tt></em> or the innermost enclosing loop, if
there is no argument. If there is a <tt class="literal">continue</tt>
block, it will be executed immediately after the
<tt class="literal">next</tt>, before the loop is reiterated.
</p></div>

<a name="INDEX-1003" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="no"><b>no</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
no <em class="emphasis">Module</em> <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1003" />Effectively
"undoes" the <tt class="literal">use</tt>
function. Used to deactivate pragmas (compiler directives) for
sections of your program. For instance:
</p><blockquote><pre class="code">no strict 'refs'</pre></blockquote><p>allows soft references to the end of the block scope if: </p><blockquote><pre class="code">use strict 'refs'</pre></blockquote><p>was previously invoked.</p></div>

<a name="INDEX-1004" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="oct"><b>oct</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
oct <em class="emphasis">ostring</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1004" />Interprets
<em class="replaceable"><tt>ostring</tt></em> as an octal string and returns the
equivalent decimal value. (If <em class="replaceable"><tt>ostring</tt></em>happens to start with <tt class="literal">0x</tt>, it is interpreted as a
hex string instead.) The following will handle decimal, octal, and
hex in the standard notation:
</p><blockquote><pre class="code">$val = oct $val if $val =~ /^0/;</pre></blockquote><p>If <em class="replaceable"><tt>ostring</tt></em> is omitted, the function
interprets <tt class="literal">$_</tt>. To perform the inverse function on
octal numbers, use:
</p><blockquote><pre class="code">$oct_string = sprintf "%lo", $number;</pre></blockquote></div>

<a name="INDEX-1005" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="open"><b>open</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
open <em class="emphasis">filehandle</em>, <em class="emphasis">filename</em>

open <em class="replaceable"><tt>filehandle</em>, <em class="replaceable">mode</em>, <em class="replaceable">filename</tt></em>

open <em class="replaceable"><tt>filehandle</em>, <em class="replaceable">mode</em>, <em class="replaceable">expr</em>, <em class="replaceable">list (new in 5.8)</tt></em>

open <em class="replaceable"><tt>filehandle</em>, <em class="replaceable">mode</em>, <em class="replaceable">reference (new in 5.8)</tt></em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1005" />Opens
the file given by <em class="replaceable"><tt>filename</tt></em> and associates
it with <em class="replaceable"><tt>filehandle</tt></em>. If
<em class="replaceable"><tt>filehandle</tt></em> is omitted, the scalar variable
of the same name as the <em class="replaceable"><tt>filehandle</tt></em> must
contain the filename. (And you must also be careful to use
<tt class="literal">or die</tt> after the statement rather than
<tt class="literal">||</tt> <tt class="literal">die</tt>, because the precedence
of <tt class="literal">||</tt> is higher than list operators such as
<tt class="literal">open</tt>.)
</p><p>If <em class="replaceable"><tt>filename</tt></em> is preceded by either
<tt class="literal">&lt;</tt> or nothing, the file is opened for input
(read-only). If <em class="replaceable"><tt>filename</tt></em> is preceded by
<tt class="literal">&gt;</tt>, the file is opened for output. If the file
doesn't exist, it will be created; if the file
exists, it will be overwritten with output using
<tt class="literal">&gt;</tt>. Preceding the filename with
<tt class="literal">&gt;&gt;</tt> opens an output file for appending. For
both read and write access, use a <tt class="literal">+</tt> before
<tt class="literal">&lt;</tt> or <tt class="literal">&gt;</tt>.
</p><p>If you choose to use the three-or-more-arguments form of
<tt class="literal">open</tt>, you can use separate
<em class="replaceable"><tt>mode</tt></em> and
<em class="replaceable"><tt>filename</tt></em> arguments, such as
<tt class="literal">open($</tt><em class="replaceable"><tt>fh</tt></em><tt class="literal">,
$</tt><em class="replaceable"><tt>mode</tt></em><tt class="literal">,
$</tt><em class="replaceable"><tt>filename</tt></em><tt class="literal">)</tt>,
in which <tt class="literal">$</tt><em class="replaceable"><tt>mode</tt></em>represents an open mode or pipe. For example:
</p><blockquote><pre class="code">my $mode = '+&lt;';
my $filename = 'whatever.txt';
open(FH, $mode, $filename)
    or die("can't open $filename: $!");</pre></blockquote><p>As covered in <a href="ch04_01.htm">Chapter 4, "The Perl Language"</a>, you can build Perl 5.8
and newer with PerlIO support, which offers additional features for
your system's I/O (STDIO). This allows you to do
neat things, such as specify <tt class="literal">utf-8</tt> as your default
encoding for all of your I/O, or set your default line endings with
<tt class="literal">'crlf'</tt>. In addition, you can select piping to or
extracting information from an external program with
<tt class="literal">'|-'</tt> and <tt class="literal">'-|'</tt>, respectively.
For example:
</p><blockquote><pre class="code">my $prog = "webster overworked";
open($fh, '-|', $prog)
    or die("can't open pipe to '$prog': $!");</pre></blockquote><p>or, similarly:</p><blockquote><pre class="code">my @prog_info = qw(/usr/contrib/bin/webster overworked);
open($fh, '-|', @prog_info)
    or die(...);</pre></blockquote><p>A filehandle may also be attached to a process by using a piped
command. If the filename begins with <tt class="literal">|</tt>, the
filename is interpreted as a command to which output is to be piped.
If the filename ends with a <tt class="literal">|</tt>, the filename is
interpreted as a command that pipes input to you. You may not have an
<tt class="literal">open</tt> command that pipes both in and out.
</p><p>Any pipe command containing shell metacharacters is passed to the
shell for execution; otherwise, it is executed directly by Perl. The
filename <tt class="literal">-</tt> refers to STDIN, and
<tt class="literal">&gt;</tt> refers to STDOUT. <tt class="literal">open</tt>
returns nonzero upon success, the undefined value otherwise. If the
<tt class="literal">open</tt> involved a pipe, the return value happens to
be the process ID of the subprocess.
</p></div>

<a name="INDEX-1006" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="opendir"><b>opendir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
opendir <em class="emphasis">dirhandle</em>, <em class="emphasis">directory</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1006" />Opens a
<em class="replaceable"><tt>directory</tt></em> for processing by
<tt class="literal">readdir</tt>, <tt class="literal">telldir</tt>,
<tt class="literal">seekdir</tt>, <tt class="literal">rewinddir</tt>, and
<tt class="literal">closedir</tt>. The function returns true if successful.
Directory handles have their own namespace separate from filehandles.
</p></div>

<a name="INDEX-1007" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="ord"><b>ord</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
ord <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1007" />Returns the numeric
ASCII value of the first character of
<em class="replaceable"><tt>expr</em>. If <em class="emphasis">expr</tt></em> is
omitted, it uses <tt class="literal">$_</tt>. The return value is always
unsigned. If you want a signed value, use
<tt class="literal">unpack('c'</tt>,
<em class="replaceable"><tt>expr</tt></em><tt class="literal">)</tt>. If you want all
the characters of the string converted to a list of numbers, use
<tt class="literal">unpack('C*'</tt>,
<em class="replaceable"><tt>expr</tt></em><tt class="literal">)</tt> instead.
</p></div>

<a name="INDEX-1008" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="our"><b>our</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
our <em class="emphasis">vars</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1008" />Declares the listed
variables to be valid globals within the enclosing block, file, or
<tt class="literal">eval</tt>. <em class="replaceable"><tt>vars</tt></em> must be in
parentheses if more than one value is used. <tt class="literal">our( )</tt>
has the same scoping rules as a
"my" declaration but does not
create a local variable. Variables that you create with <tt class="literal">our(
)</tt> will be visible across its lexical scope and may cross
package boundaries. Unlike <tt class="literal">use</tt><em class="replaceable"><tt>vars</tt></em>, <tt class="literal">our( )</tt>
is not package scoped; the package in which the variable is entered
is determined at the point of declaration, not at the time of use.
This means the following behavior holds:
</p><blockquote><pre class="code">package Foo;
                our $bar;           # Declares $Foo::bar for rest of lexical scope
                $bar = 20;

                package Bar;
                print $bar;         # Prints 20</pre></blockquote><p>You my use multiple <tt class="literal">our</tt> declarations in the same
lexical scope if they are in different packages. If they are in the
same package, Perl will emit warnings if you have asked for them:
</p><blockquote><pre class="code">use warnings;
                package Foo;
                our $bar;           # Declares $Foo::bar for rest of lexical scope
                $bar = 20;

                package Bar;
                our $bar = 30;      # Declares $Bar::bar for rest of lexical scope
                print $bar;         # Prints 30
                our $bar;           # Emits warning</pre></blockquote></div>

<a name="INDEX-1009" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="pack"><b>pack</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
pack <em class="emphasis">template</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1009" />Takes a
list of values and packs it into a binary structure, returning the
string containing the structure. <em class="replaceable"><tt>template</tt></em>is a sequence of characters that give the order and type of values,
as follows:
</p><a name="ch05-110-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Character</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">@</tt></p>
</td>
<td>
<p>Null-fill to absolute position.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">(</tt></p>
</td>
<td>
<p>Start of a <tt class="literal">( )</tt> group.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">a</tt></p>
</td>
<td>
<p>An ASCII string, will be null padded.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">A</tt></p>
</td>
<td>
<p>An ASCII string, will be space padded.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">b</tt></p>
</td>
<td>
<p>A bit string, low-to-high order (such as <tt class="literal">vec( )</tt>).</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">B</tt></p>
</td>
<td>
<p>A bit string, high-to-low order.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">c</tt></p>
</td>
<td>
<p>A signed char value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">C</tt></p>
</td>
<td>
<p>An unsigned char value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">d</tt></p>
</td>
<td>
<p>A double-precision float in the native format.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">D</tt></p>
</td>
<td>
<p>A long double-precision float in the native format. Long doubles are
avai able only if your system supports long double values and if Perl
has been compiled to support these values. Causes a fatal error
otherwise. New in 5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">f</tt></p>
</td>
<td>
<p>A single-precision float in the native format.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">F</tt></p>
</td>
<td>
<p>A floating-point value in the native format, i.e., a Perl internal
floating-point value (NV). New in 5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">h</tt></p>
</td>
<td>
<p>A hexadecimal string, low nybble first.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">H</tt></p>
</td>
<td>
<p>A hexadecimal string, high nybble first.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">i</tt></p>
</td>
<td>
<p>A signed integer value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">I</tt></p>
</td>
<td>
<p>An unsigned integer value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">l</tt></p>
</td>
<td>
<p>A signed long value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">j</tt></p>
</td>
<td>
<p>A signed integer value, i.e., a Perl internal integer (IV). New in
5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">J</tt></p>
</td>
<td>
<p>An unsigned integer value, i.e., a Perl internal unsigned integer
(UV). New in 5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">L</tt></p>
</td>
<td>
<p>An unsigned long value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">n</tt></p>
</td>
<td>
<p>A short in "network" (big-endian)
order.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">N</tt></p>
</td>
<td>
<p>A long in "network" (big-endian)
order.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">p</tt></p>
</td>
<td>
<p>A pointer to a string.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">P</tt></p>
</td>
<td>
<p>A pointer to a structure (fixed-length string).</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">q</tt></p>
</td>
<td>
<p>A signed quad (64-bit) value. New in 5.8.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Q</tt></p>
</td>
<td>
<p>An unsigned quad value. Quads are available only if your system
supports 64-bit integer values and if Perl has been compiled to
support these values. Causes a fatal error otherwise. New in 5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>A signed short value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">S</tt></p>
</td>
<td>
<p>An unsigned short value.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">v</tt></p>
</td>
<td>
<p>A short in "VAX" (little-endian)
order.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">V</tt></p>
</td>
<td>
<p>A long in "VAX" (little-endian)
order.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">u</tt></p>
</td>
<td>
<p>A uuencoded string.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">U</tt></p>
</td>
<td>
<p>A Unicode character number. Encodes to UTF-8 internally (or
UTF-EBCDIC in EBCDIC platforms). New in 5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">w</tt></p>
</td>
<td>
<p>A BER compressed integer.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">x</tt></p>
</td>
<td>
<p>A null byte.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">X</tt></p>
</td>
<td>
<p>Back up a byte.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Z</tt></p>
</td>
<td>
<p>A null terminated (ASCII) string. Will be null padded. New in 5.8.</p>
</td>
</tr>

</table>Each character may optionally be followed by a number that gives a
repeat count. Together the character and the repeat count make a
field specifier. Field specifiers may be separated by whitespace,
which will be ignored. With all types except <tt class="literal">a</tt> and
<tt class="literal">A</tt>, the <tt class="literal">pack</tt> function will
gobble up that many values from the <em class="replaceable"><tt>list</tt></em>.
Specifying <tt class="literal">*</tt> for the repeat count means to use
however many items are left. The <tt class="literal">a</tt> and
<tt class="literal">A</tt> types gobble just one value, but pack it as a
string of length <em class="replaceable"><tt>count</tt></em>, padding with nulls
or spaces as necessary. (When unpacking, <tt class="literal">A</tt> strips
trailing spaces and nulls, but <tt class="literal">a</tt> does not.) Real
numbers (floats and doubles) are in the native machine format only;
due to the multiplicity of floating formats, and the lack of a
standard network representation, no facility for interchange has been
made.
</p><p>Generally, the same template may also be used in the
<tt class="literal">unpack</tt> function. If you want to join variable
length fields with a delimiter, use the <tt class="literal">join</tt>
function.
</p></div>
<a name="INDEX-1010" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="package"><b>package</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
package <em class="emphasis">namespace</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1010" />Declares that the
rest of the innermost enclosing block, subroutine,
<tt class="literal">eval</tt>, or file belongs to the indicated
<em class="replaceable"><tt>namespace</tt></em>. (The scope of a
<tt class="literal">package</tt> declaration is thus the same as the scope
of a <tt class="literal">local</tt> or <tt class="literal">my</tt> declaration.)
All subsequent references to unqualified global identifiers will be
resolved by looking them up in the declared packages symbol table. A
<tt class="literal">package</tt> declaration affects only global
variables&#x2014;including those you've used
<tt class="literal">local</tt> on&#x2014;but not lexical variables created
with <tt class="literal">my</tt>.
</p><p>Using <tt class="literal">package</tt> without an argument is possible, but
since its semantics are unclear, <tt class="literal">package;</tt> has been
depracated in Perl 5.8. If you intend to disallow variables that
aren't fully qualified, use
<tt class="literal">strict;</tt> instead.
</p><p>Typically, you put a <tt class="literal">package</tt> declaration as the
first thing in a file that will be included by the
<tt class="literal">require</tt> or <tt class="literal">use</tt> operator, but
you can put one anywhere that a statement would be legal. When
defining a class or a module file, it is customary to name the
package the same name as the file, to avoid confusion.
(It's also customary to name such packages beginning
with a capital letter, because lowercase modules are, by convention,
interpreted as pragmas.)
</p></div>

<a name="INDEX-1011" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="pipe"><b>pipe</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
pipe <em class="emphasis">readhandle</em>, <em class="emphasis">writehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1011" />Opens a pair of
connected pipes. This call is almost always used right before a
<tt class="literal">fork</tt>, after which the pipes reader should close
<em class="replaceable"><tt>writehandle</tt></em>, and the writer should close
<em class="replaceable"><tt>readhandle</tt></em>. (Otherwise, the pipe
won't indicate end-of-file to the reader when the
writer closes it.) Note that if you set up a loop of piped processes,
deadlock can occur unless you are very careful. In addition, note
that Perl's pipes use standard I/O buffering, so you
may need to set <tt class="literal">$|</tt> on your
<em class="replaceable"><tt>writehandle</tt></em> to flush after each output
command, depending on the application. See <a href="ch05_02.htm">select</a> 
<em class="replaceable"><tt>filehandle</tt></em>.
</p></div>

<a name="INDEX-1012" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="pop"><b>pop</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
pop @<em class="emphasis">array</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1012" />Treats an array like a
stack, popping and returning the last value of the array and
shortening the array by one element. If
<em class="replaceable"><tt>array</tt></em> is omitted, the function pops
<tt class="literal">@ARGV</tt> (in the main program) or
<tt class="literal">@_</tt> (in subroutines).
</p><p>If there are no elements in the array, <tt class="literal">pop</tt> returns
the undefined value. See also <a href="ch05_02.htm">push</a> and
<a href="ch05_02.htm">shift</a>. If you want to pop more than one element,
use <tt class="literal">splice</tt>.
</p></div>

<a name="INDEX-1013" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="pos"><b>pos</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
pos $<em class="emphasis">scalar</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1013" />Returns the location
in <em class="replaceable"><tt>scalar</tt></em> where the last
<tt class="literal">m//g</tt> search over <em class="replaceable"><tt>scalar</tt></em>left off. It returns the offset of the character after the last one
matched. This is the offset where the next <tt class="literal">m//g</tt>
search on that string will start. Remember that the offset of the
beginning of the string is <tt class="literal">0</tt>. For example:
</p><blockquote><pre class="code">$grafitto = "fee fie foe foo";
while ($grafitto =~ m/e/g) {
    print pos $grafitto, "\n";
}</pre></blockquote><p>prints <tt class="literal">2</tt>, <tt class="literal">3</tt>,
<tt class="literal">7</tt>, and <tt class="literal">11</tt>, the offsets of each
of the characters following an "e".
The <tt class="literal">pos</tt> function may be assigned a value to tell
the next <tt class="literal">m//g</tt> where to start.
</p></div>

<a name="INDEX-1014" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="print"><b>print</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
print [<em class="replaceable"><tt>filehandle</em>] <em class="replaceable">list</tt></em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1014" />Prints a string or a
comma-separated list of strings to the specified
<em class="replaceable"><tt>filehandle</tt></em>. If no filehandle is given, the
function prints to the currently open filehandle (STDOUT initially).
The function returns <tt class="literal">1</tt> if successful,
<tt class="literal">0</tt> otherwise. <em class="replaceable"><tt>filehandle</tt></em>may be a scalar variable name (unsubscripted), in which case the
variable contains either the name of the actual filehandle or a
reference to a filehandle object from one of the object-oriented
filehandle packages. <em class="replaceable"><tt>filehandle</tt></em> may also
be a block that returns either kind of value:
</p><blockquote><pre class="code">print { $OK ? "STDOUT" : "STDERR" } "stuff\n";
print { $iohandle[$i] } "stuff\n";</pre></blockquote><p>If <em class="replaceable"><tt>list</tt></em> is also omitted,
<tt class="literal">$_</tt> is printed. Note that because
<tt class="literal">print</tt> takes a list, anything in the
<em class="replaceable"><tt>list</tt></em> is evaluated in list context.
</p></div>

<a name="INDEX-1015" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="printf"><b>printf</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
printf [<em class="emphasis">filehandle</em>] <em class="emphasis">format</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1015" />Prints a formatted
string of the elements in <em class="replaceable"><tt>list</tt></em> to
<em class="replaceable"><tt>filehandle</tt></em> or, if omitted, the currently
selected output filehandle. This is similar to the C
library's <tt class="literal">printf</tt> and
<tt class="literal">fprintf</tt> functions, except that the
<tt class="literal">*</tt> field width specifier is not supported. The
function is exactly equivalent to:
</p><blockquote><pre class="code">print <em class="replaceable"><tt>filehandle</em> sprintf(<em class="replaceable">format</em>, <em class="replaceable">list</tt></em>);</pre></blockquote><p><tt class="literal">printf</tt> and <tt class="literal">sprintf</tt> use the same
format syntax, but <tt class="literal">sprintf</tt> returns only a string;
it doesn't print to a filehandle. The
<em class="replaceable"><tt>format</tt></em> string contains text with embedded
field specifiers into which the elements of
<em class="replaceable"><tt>list</tt></em> are substituted in order, one per
field. Field specifiers follow the form:
</p><blockquote><pre class="code">%<em class="replaceable"><tt>m.nx</em></pre></blockquote><p>A percent sign begins each field, and <em class="replaceable">x</tt></em> is
the type of field. The optional <em class="replaceable"><tt>m</tt></em> gives
the minimum field width for appropriate field types (negative
<em class="replaceable"><tt>m</tt></em> left-justifies). The
<em class="replaceable"><tt>.n</tt></em> gives the precision for a specific
field type, such as the number of digits after a decimal point for
floating-point numbers, the maximum length for a string, and the
minimum length for an integer.
</p><p>Field specifiers (<em class="replaceable"><tt>x</tt></em>) may be the following:</p><a name="ch05-117-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Code</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">%</tt></p>
</td>
<td>
<p>Percent sign</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">c</tt></p>
</td>
<td>
<p>Character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">d</tt></p>
</td>
<td>
<p>Decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">e</tt></p>
</td>
<td>
<p>Exponential format floating-point number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">E</tt></p>
</td>
<td>
<p>Exponential format floating-point number with uppercase E</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">f</tt></p>
</td>
<td>
<p>Fixed-point format floating-point number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">g</tt></p>
</td>
<td>
<p>Floating-point number, in either exponential or fixed decimal notation</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">G</tt></p>
</td>
<td>
<p>Like <tt class="literal">g</tt> with uppercase E (if applicable)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ld</tt></p>
</td>
<td>
<p>Long decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lo</tt></p>
</td>
<td>
<p>Long octal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lu</tt></p>
</td>
<td>
<p>Long unsigned decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lx</tt></p>
</td>
<td>
<p>Long hexadecimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">o</tt></p>
</td>
<td>
<p>Octal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>String</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">u</tt></p>
</td>
<td>
<p>Unsigned decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">x</tt></p>
</td>
<td>
<p>Hexadecimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">X</tt></p>
</td>
<td>
<p>Hexadecimal integer with uppercase letters</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">p</tt></p>
</td>
<td>
<p>The Perl value's address in hexadecimal</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">n</tt></p>
</td>
<td>
<p>Special value that stores the number of characters output so far into
the next variable in the parameter list
</p>
</td>
</tr>

</table></div>

<a name="INDEX-1016" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="prototype"><b>prototype</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
prototype <em class="emphasis">function</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1016" />Returns the
prototype of a function as a string, or <tt class="literal">undef</tt> if
the function has no prototype. <em class="replaceable"><tt>function</tt></em> is
the name of the function or a reference to it.
</p></div>

<a name="INDEX-1017" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="push"><b>push</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
push @<em class="emphasis">array</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1017" />Pushes
the elements of <em class="replaceable"><tt>list</tt></em> onto the end of
<em class="replaceable"><tt>array</tt></em>. The length of
<em class="replaceable"><tt>array</tt></em> increases by the length of
<em class="replaceable"><tt>list</tt></em>. The function returns this new
length. See also <a href="ch05_02.htm">pop</a> and
 <a href="ch05_02.htm">unshift</a>.
</p></div>

<a name="INDEX-1018" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="q/string/"><b>q/string/</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
q/<em class="emphasis">string</em>/
qq/<em class="emphasis">string</em>/
qx/<em class="emphasis">string</em>/
qw/<em class="emphasis">strings</em>/
</pre></td><td align="right" /></tr></table><a name="INDEX-1018" />Generalized forms of quoting.
<tt class="literal">q//</tt> is equivalent to using single quotes (literal,
no variable interpolation). <tt class="literal">qq//</tt> is equivalent to
double quotes (literal, interpolated). <tt class="literal">qx//</tt> is
equivalent to using backticks for commands (interpolated). And
<tt class="literal">qw//</tt> is equivalent to splitting a single-quoted
string on whitespace.
</p></div>

<a name="INDEX-1019" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="quotemeta"><b>quotemeta</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
quotemeta <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1019" />Returns the
value of <em class="replaceable"><tt>expr</tt></em> (or <tt class="literal">$_</tt> if
not specified) with all non-alphanumeric characters backslashed. This
is the internal function implementing the <tt class="literal">\Q</tt>
escape in interpolative contexts (including double-quoted strings,
backticks, and patterns).
</p></div>

<a name="INDEX-1020" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="rand"><b>rand</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
rand <em class="emphasis">num</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1020" />Returns
a random fractional number between <tt class="literal">0</tt> and the value
of <em class="replaceable"><tt>num</em>. (<em class="replaceable">num</em>should be positive.) If <em class="replaceable">num</tt></em> is omitted,
the function returns a value between <tt class="literal">0</tt> and
<tt class="literal">1</tt> (including <tt class="literal">0</tt>, but excluding
<tt class="literal">1</tt>). See also  <a href="ch05_02.htm">srand</a>.
</p><p>To get an integral value, combine this with <tt class="literal">int</tt>,
as in:
</p><blockquote><pre class="code">$roll = int(rand 6) + 1;       # $roll is now an integer between 1 and 6</pre></blockquote></div>

<a name="INDEX-1021" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="read"><b>read</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
read <em class="emphasis">filehandle</em>, $<em class="emphasis">var</em>, <em class="emphasis">length</em>, [<em class="emphasis">offset</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1021" />Attempts to read
<em class="replaceable"><tt>length</tt></em> bytes of data into variable
<em class="replaceable"><tt>var</tt></em> from the specified
<em class="replaceable"><tt>filehandle</tt></em>. The function returns the
number of bytes actually read, or <tt class="literal">0</tt> at
end-of-file. It returns the undefined value on error.
<em class="replaceable"><tt>var</tt></em> will grow or shrink to the length
actually read. The <em class="replaceable"><tt>offset</tt></em>, if specified,
says where in the variable to start putting bytes, so that you can do
a <tt class="literal">read</tt> into the middle of a string.
</p><p>To copy data from the filehandle FROM into the filehandle TO, you
could say:
</p><blockquote><pre class="code">while (read FROM, $buf, 16384) {
    print TO $buf;
}</pre></blockquote><p>Note that the opposite of <tt class="literal">read</tt> is simply
<tt class="literal">print</tt>, which already knows the length of the
string you want to write and can write a string of any length.
</p><p>Perl's <tt class="literal">read</tt> function is actually
implemented in terms of standard I/O's
<tt class="literal">fread</tt> function, so the actual
<tt class="literal">read</tt> system call may read more than
<em class="replaceable"><tt>length</tt></em> bytes to fill the input buffer, and
<tt class="literal">fread</tt> may do more than one system
<tt class="literal">read</tt> to fill the buffer. To gain greater control,
specify the real system call using <tt class="literal">sysread</tt>.
</p></div>

<a name="INDEX-1022" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="readdir"><b>readdir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
readdir <em class="emphasis">dirhandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1022" />Reads directory
entries from a directory handle opened by <tt class="literal">opendir</tt>.
In scalar context, this function returns the next directory entry, if
any; otherwise, it returns an undefined value. In list context, it
returns all the rest of the entries in the directory, which will of
course be a null list if there are none.
</p></div>

<a name="INDEX-1023" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="readline"><b>readline</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
readline *<em class="replaceable"><tt>filehandle</tt></em></pre></td><td align="right" /></tr></table><a name="INDEX-1023" />Reads a line or
lines from the specified <em class="replaceable"><tt>filehandle</tt></em>. (A
typeglob of the filehandle name should be supplied.) Returns one line
per call in a scalar context. Returns a list of all lines until the
end-of-file in list context.
</p></div>

<a name="INDEX-1024" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="readlink"><b>readlink</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
readlink <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1024" />Returns the name
of a file pointed to by the symbolic link
<em class="replaceable"><tt>name</em>. <em class="replaceable">name</tt></em>should evaluate to a filename, the last component of which is a
symbolic link. If it is not a symbolic link, or if symbolic links are
not implemented, or if a system error occurs, the undefined value is
returned, and you should check the error code in
<tt class="literal">$!</tt>. If <em class="replaceable"><tt>name</tt></em> is omitted,
the function uses <tt class="literal">$_</tt>.
</p></div>

<a name="INDEX-1025" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="readpipe"><b>readpipe</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
readpipe <em class="replaceable"><tt>cmd</tt></em></pre></td><td align="right" /></tr></table><a name="INDEX-1025" />Executes
<em class="replaceable"><tt>cmd</tt></em> as a system command and returns the
collected standard output of the command. In a scalar context, the
output is returned as a single, possibly multiline, string. In list
context, a list of output lines is returned.
</p></div>

<a name="INDEX-1026" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="recv"><b>recv</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
recv <em class="emphasis">socket</em>, $<em class="emphasis">var</em>, <em class="emphasis">len</em>, <em class="emphasis">flags</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1026" />Receives a message on
a socket. It attempts to receive <em class="replaceable"><tt>len</tt></em> bytes
of data into variable <em class="replaceable"><tt>var</tt></em> from the
specified <em class="replaceable"><tt>socket</tt></em> filehandle. The function
returns the address of the sender, or the undefined value if
there's an error. <em class="replaceable"><tt>var</tt></em>will grow or shrink to the length actually read. The function takes
the same flags as the <tt class="literal">recv(2)</tt> system call.
</p></div>

<a name="INDEX-1027" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="redo"><b>redo</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
redo [<em class="emphasis">label</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1027" />Restarts a loop block
identified by <em class="replaceable"><tt>label</tt></em> without reevaluating
the conditional. The <tt class="literal">continue</tt> block, if any, is
not executed. If the <em class="replaceable"><tt>label</tt></em> is omitted, the
command refers to the innermost enclosing loop.
</p></div>

<a name="INDEX-1028" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="ref"><b>ref</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
ref $<em class="emphasis">var</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1028" />Returns a
string indicating the type of the object referenced if
<em class="replaceable"><tt>var</tt></em> is a reference; returns the null
string otherwise. Built-in types include:
</p><blockquote><pre class="code">REF
SCALAR
ARRAY
HASH
CODE
GLOB</pre></blockquote><p>If the referenced object has been blessed into a package, that
package name is returned instead. You can think of
<tt class="literal">ref</tt> as a
"typeof" operator.
</p></div>

<a name="INDEX-1029" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="rename"><b>rename</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
rename <em class="emphasis">oldname</em>, <em class="emphasis">newname</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1029" />Changes the name of
a file from <em class="replaceable"><tt>oldname</tt></em> to
<em class="replaceable"><tt>newname</tt></em>. It returns <tt class="literal">1</tt>
for success, <tt class="literal">0</tt> otherwise (and puts the error code
into <tt class="literal">$!</tt>). It will not work across filesystem
boundaries. If there is already a file named
<em class="replaceable"><tt>newname</tt></em>, it will be destroyed.
</p></div>

<a name="INDEX-1030" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="require"><b>require</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
require <em class="emphasis">filename</em>
require <em class="emphasis">num</em>
require <em class="emphasis">package</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1030" />Asserts a dependency
of some kind depending on its argument. (If an argument is not
supplied, <tt class="literal">$_</tt> is used.)
</p><p>If the argument is a string <em class="replaceable"><tt>filename</tt></em>, this
function includes and executes the Perl code found in the separate
file of that name. This is similar to performing an
<tt class="literal">eval</tt> on the contents of the file, except that
<tt class="literal">require</tt> checks to see that the library file has
not been included already. The function also knows how to search the
include path stored in the <tt class="literal">@INC</tt> array.
</p><p>If <tt class="literal">require</tt>s argument is a number
<em class="replaceable"><tt>num</tt></em>, the version number of the currently
executing Perl binary (as known by <tt class="literal">$]</tt>) is compared
to <em class="replaceable"><tt>num</tt></em>. If it is smaller, execution is
immediately aborted. Thus, a script that requires Perl version 5.003
can have as its first line:
</p><blockquote><pre class="code">require 5.003;</pre></blockquote><p>and earlier versions of Perl will abort.</p><p>If <tt class="literal">require</tt>'s argument is a
package name, <tt class="literal">require</tt> assumes an automatic
<em class="emphasis">.pm</em> suffix, making it easy to load standard
modules. This is like <tt class="literal">use</tt>, except that it happens
at runtime, not compile time, and the <tt class="literal">import</tt>
routine is not called.
</p></div>

<a name="INDEX-1031" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="reset"><b>reset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
reset <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1031" />Used
at the top of a loop or in a <tt class="literal">continue</tt> block at the
end of a loop to clear global variables or reset
<tt class="literal">??</tt> searches so they work again.
<em class="replaceable"><tt>expr</tt></em> is a list of single characters
(hyphens are allowed for ranges). All scalar variables, arrays, and
hashes beginning with one of those letters are reset to their
pristine state. If <em class="replaceable"><tt>expr</tt></em> is omitted,
one-match searches
(<tt class="literal">?</tt><em class="replaceable"><tt>PATTERN</tt></em><tt class="literal">?</tt>)
are reset to match again. The function resets variables or searches
for the current package only. It always returns <tt class="literal">1</tt>.
</p><p>Lexical variables (created by <tt class="literal">my</tt>) are not
affected. Use of <tt class="literal">reset</tt> is vaguely deprecated.
</p></div>

<a name="INDEX-1032" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="return"><b>return</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
return <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1032" />Returns from a
subroutine (or <tt class="literal">eval</tt>) with the value of
<em class="replaceable"><tt>expr</tt></em>. (In the absence of an explicit
<tt class="literal">return</tt>, the value of the last expression evaluated
is returned.) Use of <tt class="literal">return</tt> outside of a
subroutine or <tt class="literal">eval</tt> will result in a fatal error.
</p><p>The supplied expression will be evaluated in the context of the
subroutine invocation. That is, if the subroutine was called in a
scalar context, <em class="replaceable"><tt>expr</tt></em> is also evaluated in
scalar context. If the subroutine was invoked in a list context, then
<em class="replaceable"><tt>expr</tt></em> is also evaluated in list context and
can return a list value. A return with no argument returns the
undefined value in scalar context and a null list in list context.
The context of the subroutine call can be determined from within the
subroutine by using the (misnamed) <tt class="literal">wantarray</tt>
function.
</p></div>

<a name="INDEX-1033" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="reverse"><b>reverse</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
reverse <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1033" />Returns a list
value consisting of the elements of <em class="replaceable"><tt>list</tt></em>in the opposite order. This is fairly efficient because it just swaps
the pointers around. In scalar context, the function concatenates all
the elements of <em class="replaceable"><tt>list</tt></em> together and returns
the reverse of this character by character.
</p></div>

<a name="INDEX-1034" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="rewinddir"><b>rewinddir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
rewinddir <em class="emphasis">dirhandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1034" />Sets the current
position to the beginning of the directory for the
<tt class="literal">readdir</tt> routine on
<em class="replaceable"><tt>dirhandle</tt></em>. The function may not be
available on all machines that support <tt class="literal">readdir</tt>.
</p></div>

<a name="INDEX-1035" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="rindex"><b>rindex</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
rindex <em class="emphasis">str</em>, <em class="emphasis">substr</em>, [<em class="emphasis">position</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1035" />Works just like
<tt class="literal">index</tt> except that it returns the position of the
last occurrence of <em class="replaceable"><tt>substr</tt></em> in
<em class="replaceable"><tt>str</tt></em> (a reverse <tt class="literal">index</tt>).
The function returns <tt class="literal">-1</tt> if not found.
<em class="replaceable"><tt>position</tt></em>, if specified, is the rightmost
position that may be returned, i.e., how far in the string the
function can search.
</p></div>

<a name="INDEX-1036" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="rmdir"><b>rmdir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
rmdir <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1036" />Deletes the
directory specified by <em class="replaceable"><tt>name</tt></em> if it is
empty. If it succeeds, it returns <tt class="literal">1</tt>; otherwise, it
returns <tt class="literal">0</tt> and puts the error code into
<tt class="literal">$!</tt>. If <em class="replaceable"><tt>name</tt></em> is omitted,
the function uses <tt class="literal">$_</tt>.
</p></div>

<a name="INDEX-1037" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="scalar"><b>scalar</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
scalar <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1037" />Forces an expression
<em class="replaceable"><tt>expr</tt></em> to be evaluated in scalar context.
</p></div>

<a name="INDEX-1038" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="seek"><b>seek</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
seek <em class="emphasis">filehandle</em>, <em class="emphasis">offset</em>, <em class="emphasis">whence</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1038" />Positions the file pointer
for <em class="replaceable"><tt>filehandle</tt></em>, just like the
<tt class="literal">fseek(3)</tt> call of standard I/O. The first position
in a file is at offset <tt class="literal">0</tt>, not offset
<tt class="literal">1</tt>, and offsets refer to byte positions, not line
numbers. The function returns <tt class="literal">1</tt> upon success,
<tt class="literal">0</tt> otherwise. For handiness, the function can
calculate offsets from various file positions for you. The value of
<em class="replaceable"><tt>whence</tt></em> specifies which of three file
positions your <em class="replaceable"><tt>offset</tt></em> is relative to:
<tt class="literal">0</tt>, the beginning of the file;
<tt class="literal">1</tt>, the current position in the file; or
<tt class="literal">2</tt>, the end of the file.
<em class="replaceable"><tt>offset</tt></em> may be negative for a
<em class="replaceable"><tt>whence</tt></em> of <tt class="literal">1</tt> or
<tt class="literal">2</tt>.
</p></div>

<a name="INDEX-1039" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="seekdir"><b>seekdir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
seekdir <em class="emphasis">dirhandle</em>, <em class="emphasis">pos</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1039" />Sets the current
position for the <tt class="literal">readdir</tt> routine on
<em class="replaceable"><tt>dirhandle</em>. <em class="replaceable">pos</tt></em>must be a value returned by <tt class="literal">telldir</tt>. This function
has the same caveats about possible directory compaction as the
corresponding system library routine.
</p></div>

<a name="INDEX-1040" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="select"><b>select</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
select <em class="emphasis">filehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1040" />Returns the currently
selected output filehandle, and if
<em class="replaceable"><tt>filehandle</tt></em> is supplied, sets that as the
current default filehandle for output. This has two effects. First, a
<tt class="literal">write</tt> or a <tt class="literal">print</tt> without a
filehandle argument will default to this
<em class="replaceable"><tt>filehandle</tt></em>. Second, special variables
related to output will refer to this output filehandle.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="select"><b>select</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
select <em class="emphasis">rbits</em>, <em class="emphasis">wbits</em>, <em class="emphasis">ebits</em>, <em class="emphasis">timeout</em>
</pre></td><td align="right" /></tr></table>The four-argument <tt class="literal">select</tt> operator is totally
unrelated to the previously described <tt class="literal">select</tt>
operator. This operator is for discovering which (if any) of your
file descriptors are ready to do input or output, or to report an
exceptional condition. It calls the <tt class="literal">select(2)</tt>
system call with the bitmasks you've specified,
which you can construct using <tt class="literal">fileno</tt> and
<tt class="literal">vec</tt>, like this:
</p><blockquote><pre class="code">$rbits = $wbits = $ebits = "";
vec($rbits, fileno(STDIN), 1) = 1;
vec($wbits, fileno(STDOUT), 1) = 1;
$ein = $rin | $win;</pre></blockquote><p>The <tt class="literal">select</tt> call blocks until one or more file
descriptors is ready for reading, writing, or reporting an error
condition. <em class="replaceable"><tt>timeout</tt></em> is given in seconds and
tells <tt class="literal">select</tt> how long to wait.
</p></div>

<a name="INDEX-1041" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="semctl"><b>semctl</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
semctl <em class="emphasis">id</em>, <em class="emphasis">semnum</em>, <em class="emphasis">cmd</em>, <em class="emphasis">arg</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1041" />Calls the System V
IPC system call <tt class="literal">semctl(2)</tt>. If
<em class="replaceable"><tt>cmd</tt></em> is <tt class="literal">&amp;IPC_STAT</tt> or
<tt class="literal">&amp;GETALL</tt>, then <em class="replaceable"><tt>arg</tt></em>must be a variable which will hold the returned
<tt class="literal">semid_ds</tt> structure or semaphore value array. The
function returns like <tt class="literal">ioctl</tt>: the undefined value
for error, <tt class="literal">0 but true</tt> for zero, or the actual
return value otherwise. On error, it puts the error code into
<tt class="literal">$!</tt>. Before calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "sem.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-1042" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="semget"><b>semget</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
semget <em class="emphasis">key</em>, <em class="emphasis">nsems</em>, <em class="emphasis">size</em>, <em class="emphasis">flags</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1042" />Calls the System V
IPC system call <tt class="literal">semget(2)</tt>. The function returns
the semaphore ID, or the undefined value if there is an error. On
error, it puts the error code into <tt class="literal">$!</tt>. Before
calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "sem.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-1043" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="semop"><b>semop</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
semop <em class="emphasis">key</em>, <em class="emphasis">opstring</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1043" />Calls the System V
IPC system call <tt class="literal">semop(2)</tt> to perform semaphore
operations such as signaling and waiting.
<em class="replaceable"><tt>opstring</tt></em> must be a packed array of
<tt class="literal">semop</tt> structures. You can make each
<tt class="literal">semop</tt> structure by saying <tt class="literal">pack('s*',
$semnum, $semop, $semflag)</tt>. The number of semaphore
operations is implied by the length of
<em class="replaceable"><tt>opstring</tt></em>. The function returns true if
successful or false if there is an error. On error, it puts the error
code into <tt class="literal">$!</tt>. Before calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "sem.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-1044" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="send"><b>send</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
send <em class="emphasis">socket</em>, <em class="emphasis">msg</em>, <em class="emphasis">flags</em>, [<em class="emphasis">dest</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1044" />Sends a
message <em class="replaceable"><tt>msg</tt></em> on a socket. It takes the same
flags as the system call of the same name (see
<tt class="literal">send(2)</tt>). On unconnected sockets, you must specify
a destination <em class="replaceable"><tt>dest</tt></em> to send to, in which
case <tt class="literal">send</tt> works like <tt class="literal">sendto(2)</tt>.
The function returns the number of bytes sent, or the undefined value
if there is an error. On error, it puts the error code into
<tt class="literal">$!</tt>.
</p><p>Some non-Unix systems improperly treat sockets as different objects
than ordinary file descriptors, which means that you must always use
<tt class="literal">send</tt> and <tt class="literal">recv</tt> on sockets rather
than the standard I/O operators.
</p></div>

<a name="INDEX-1045" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sethostent"><b>sethostent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sethostent <em class="emphasis">stayopen</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1045" />Opens the hosts
file (usually <em class="emphasis">/etc/hosts</em> on Unix systems) and
resets the "current" selection to
the top of the file. <em class="replaceable"><tt>stayopen</tt></em>, if nonzero,
keeps the file open across calls to other functions. Not implemented
on Win32 systems.
</p></div>

<a name="INDEX-1046" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setgrent"><b>setgrent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setgrent
</pre></td><td align="right" /></tr></table><a name="INDEX-1046" />Opens the groups
file (usually <em class="emphasis">/etc/group</em> on Unix systems) and
resets the top of the file as the starting point for any read and/or
write functions on the file (with the proper permissions). This
function will reset the <tt class="literal">getgrent</tt> function back to
retrieve group entries from the start of the group file. Not
implemented on Win32 systems.
</p></div>

<a name="INDEX-1047" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setnetent"><b>setnetent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setnetent <em class="emphasis">stayopen</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1047" />Opens the
networks file (usually <em class="emphasis">/etc/group</em>) and resets
the "current" selection to the top
of the file. <em class="replaceable"><tt>stayopen</tt></em>, if nonzero, keeps
the file open across calls to other functions. Not implemented on
Win32 systems.
</p></div>

<a name="INDEX-1048" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setpgrp"><b>setpgrp</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setpgrp <em class="emphasis">pid</em>, <em class="emphasis">pgrp</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1048" />Sets the current
process group <em class="replaceable"><tt>pgrp</tt></em> for the specified
<em class="replaceable"><tt>pid</em> (use a <em class="replaceable">pid</tt></em>of <tt class="literal">0</tt> for the current process). Invoking
<tt class="literal">setpgrp</tt> will produce a fatal error if used on a
machine that doesn't implement
<tt class="literal">setpgrp(2)</tt>. Some systems will ignore the arguments
you provide and always do <tt class="literal">setpgrp(0, $$)</tt>.
Fortunately, those are the arguments you usually provide. (For better
portability, use the <tt class="literal">setpgid( )</tt> function in the
POSIX module, or if you're really just trying to
daemonize your script, consider the <tt class="literal">POSIX::setsid(
)</tt> function as well.)
</p></div>

<a name="INDEX-1049" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setpriority"><b>setpriority</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setpriority <em class="emphasis">which</em>, <em class="emphasis">who</em>, <em class="emphasis">priority</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1049" />Sets the
current <em class="replaceable"><tt>priority</tt></em> for a process, a process
group, or a user. <em class="replaceable"><tt>which</tt></em> must indicate one
of these types: <tt class="literal">PRIO_PROCESS</tt>,
<tt class="literal">PRIO_PGRP</tt>, or <tt class="literal">PRIO_USER</tt>.
<em class="replaceable"><tt>who</tt></em>, therefore, identifies the specific
process, process group, or user with its ID.
<em class="replaceable"><tt>priority</tt></em> is an integer number that will be
added to or subtracted from the current priority; the lower the
number, the higher the priority. The interpretation of a given
priority may vary from one operating system to the next. See <tt class="literal">setpriority</tt> on your system. Invoking
<tt class="literal">setpriority</tt> will produce a fatal error if used on
a machine that doesn't implement
<tt class="literal">setpriority</tt>.
</p></div>

<a name="INDEX-1050" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setprotoent"><b>setprotoent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setprotoent <em class="emphasis">stayopen</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1050" />Opens the
prototypes file (usually <em class="emphasis">/etc/prototypes</em>) and
resets the "current" selection to
the top of the file. <em class="replaceable"><tt>stayopen</tt></em>, if nonzero,
keeps the file open across calls to other functions. Not implemented
on Win32 systems.
</p></div>

<a name="INDEX-1051" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setpwent"><b>setpwent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setpwent
</pre></td><td align="right" /></tr></table><a name="INDEX-1051" />Opens the
password file (usually <em class="emphasis">/etc/passwd</em>) and resets
the top of the file as the starting point for any read and/or write
functions on the file (with the proper permissions). This function
will reset the <tt class="literal">getpwent</tt> function back to retrieve
group entries from the start of the group file. Not implemented on
Win32 systems.
</p></div>

<a name="INDEX-1052" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setservent"><b>setservent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setservent <em class="emphasis">stayopen</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1052" />Opens the
services file (usually <em class="emphasis">/etc/services</em>) and resets
the "current" selection to the top
of the file. <em class="replaceable"><tt>stayopen</tt></em>, if nonzero, keeps
the file open across calls to other functions. Not implemented on
Win32 systems.
</p></div>

<a name="INDEX-1053" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="setsockopt"><b>setsockopt</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
setsockopt <em class="emphasis">socket</em>, <em class="emphasis">level</em>, <em class="emphasis">optname</em>, <em class="emphasis">optval</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1053" />Sets the socket
option requested (<em class="replaceable"><tt>optname</tt></em>) to the value
<em class="replaceable"><tt>optval</tt></em>. The function returns undefined if
there is an error. <em class="replaceable"><tt>optval</tt></em> may be specified
as <tt class="literal">undef</tt> if you don't want to
pass an argument. <em class="replaceable"><tt>level</tt></em> specifies the
protocol type used on the socket.
</p></div>

<a name="INDEX-1054" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="shift"><b>shift</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
shift @<em class="emphasis">array</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1054" />Removes the first
value of <tt class="literal">@</tt><em class="replaceable"><tt>array</tt></em> and
returns it, shortening the array by 1 and moving everything down. If
there are no elements in the array, the function returns the
undefined value. If
<tt class="literal">@</tt><em class="replaceable"><tt>array</tt></em> is omitted, the
function shifts <tt class="literal">@ARGV</tt> (in the main program), or
<tt class="literal">@_</tt> (in subroutines). See also
 <a href="ch05_02.htm">unshift</a>,  <a href="ch05_02.htm">push</a>,
 and <a href="ch05_02.htm">pop</a>.
<tt class="literal">shift</tt> and <tt class="literal">unshift</tt> functions do
the same thing to the left end of an array that
<tt class="literal">pop</tt> and <tt class="literal">push</tt> do to the right
end.
</p></div>

<a name="INDEX-1055" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="shmctl"><b>shmctl</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
shmctl <em class="emphasis">id</em>, <em class="emphasis">cmd</em>, <em class="emphasis">arg</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1055" />Calls the System V
IPC system call, <tt class="literal">shmctl(2)</tt>, for performing
operations on shared memory segments. If
<em class="replaceable"><tt>cmd</tt></em> is <tt class="literal">&amp;IPC_STAT</tt>,
then <em class="replaceable"><tt>arg</tt></em> must be a variable that will hold
the returned <tt class="literal">shmid_ds</tt> structure. The function
returns like <tt class="literal">ioctl</tt>: the undefined value for error,
<tt class="literal">"0 but true"</tt> for <tt class="literal">0</tt>, or the
actual return value otherwise. On error, it puts the error code into
<tt class="literal">$!</tt>. Before calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "shm.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-1056" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="shmget"><b>shmget</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
shmget <em class="emphasis">key</em>, <em class="emphasis">size</em>, <em class="emphasis">flags</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1056" />Calls the System V
IPC system call, <tt class="literal">shmget(2)</tt>. The function returns
the shared memory segment ID, or the undefined value if there is an
error. On error, it puts the error code into <tt class="literal">$!</tt>.
Before calling, you should say:
</p><blockquote><pre class="code">require "ipc.ph";
require "shm.ph";</pre></blockquote><p>This function is available only on machines supporting System V IPC.</p></div>

<a name="INDEX-1057" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="shmread"><b>shmread</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
shmread <em class="emphasis">id</em>, <em class="emphasis">var</em>, <em class="emphasis">pos</em>, <em class="emphasis">size</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1057" />Reads from the
shared memory segment <em class="replaceable"><tt>id</tt></em> starting at
position <em class="replaceable"><tt>pos</tt></em> for size
<em class="replaceable"><tt>size</tt></em> (by attaching to it, copying out, and
detaching from it). <em class="replaceable"><tt>var</tt></em> must be a variable
that will hold the data read. The function returns true if successful
or false if there is an error. On error, it puts the error code into
<tt class="literal">$!</tt>. This function is available only on machines
supporting System V IPC.
</p></div>

<a name="INDEX-1058" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="shmwrite"><b>shmwrite</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
shmwrite <em class="emphasis">id</em>, <em class="emphasis">string</em>, <em class="emphasis">pos</em>, <em class="emphasis">size</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1058" />Writes to the
shared memory segment ID starting at position
<em class="replaceable"><tt>pos</tt></em> for size
<em class="replaceable"><tt>size</tt></em> (by attaching to it, copying in, and
detaching from it). If <em class="replaceable"><tt>string</tt></em> is too long,
only <em class="replaceable"><tt>size</tt></em> bytes are used; if
<em class="replaceable"><tt>string</tt></em> is too short, nulls are written to
fill out <em class="replaceable"><tt>size</tt></em> bytes. The function returns
true if successful or false if there is an error. On error, it puts
the error code into <tt class="literal">$!</tt>. This function is available
only on machines supporting System V IPC.
</p></div>

<a name="INDEX-1059" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="shutdown"><b>shutdown</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
shutdown <em class="emphasis">socket</em>, <em class="emphasis">how</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1059" />Shuts down a
socket connection in the manner indicated by
<em class="replaceable"><tt>how</em>. If <em class="replaceable">how</tt></em> is
<tt class="literal">0</tt>, further receives are disallowed. If
<em class="replaceable"><tt>how</tt></em> is <tt class="literal">1</tt>, further sends
are disallowed. If <em class="replaceable"><tt>how</tt></em> is
<tt class="literal">2</tt>, everything is disallowed.
</p><p>This function will not shut down your system; you'll
have to execute an external program to do that. See
<a href="ch05_02.htm">system</a>.
</p></div>

<a name="INDEX-1060" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sin"><b>sin</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sin <em class="emphasis">num</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1060" />Returns
the sine of <em class="replaceable"><tt>num</tt></em> (expressed in radians). If
<em class="replaceable"><tt>num</tt></em> is omitted, it returns the sine of
<tt class="literal">$_</tt>.
</p></div>

<a name="INDEX-1061" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sleep"><b>sleep</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sleep <em class="emphasis">n</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1061" />Causes the script to
sleep for <em class="replaceable"><tt>n</tt></em> seconds, or forever if no
argument is given. It may be interrupted by sending the process a
<tt class="literal">SIGALRM</tt>. The function returns the number of
seconds actually slept. On some systems, the function sleeps till the
"top of the second." So, for
instance, a <tt class="literal">sleep 1</tt> may sleep anywhere from 0 to 1
second, depending on when in the current second you started sleeping.
</p></div>

<a name="INDEX-1062" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="socket"><b>socket</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
socket <em class="emphasis">socket</em>, <em class="emphasis">domain</em>, <em class="emphasis">type</em>, <em class="emphasis">protocol</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1062" />Opens a socket of the
specified kind and attaches it to filehandle
<em class="replaceable"><tt>socket</em>. <em class="replaceable">domain</tt></em>,
<em class="replaceable"><tt>type</tt></em>, and
<em class="replaceable"><tt>protocol</tt></em> are specified the same as for
<tt class="literal">socket(2)</tt>. Before using this function, your
program should contain the line:
</p><blockquote><pre class="code">use Socket;</pre></blockquote><p>This setting gives you the proper constants. The function returns
true if successful.
</p></div>

<a name="INDEX-1063" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="socketpair"><b>socketpair</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
socketpair <em class="emphasis">sock1</em>, <em class="emphasis">sock2</em>, <em class="emphasis">domain</em>, <em class="emphasis">type</em>, <em class="emphasis">prtcl</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1063" />Creates an
unnamed pair of sockets in the specified
<em class="replaceable"><tt>domain</tt></em> and of the specified
<em class="replaceable"><tt>type</em>. <em class="replaceable">domain</tt></em>,
<em class="replaceable"><tt>type</tt></em>, and
<em class="replaceable"><tt>protocol</tt></em> are specified the same as for
<tt class="literal">socketpair(2)</tt>. If <tt class="literal">socketpair</tt> is
unimplemented, invoking this function yields a fatal error. The
function returns true if successful.
</p><p>This function is typically used just before a
<tt class="literal">fork</tt>. One of the resulting processes should close
<em class="replaceable"><tt>sock1</tt></em>, and the other should close
<em class="replaceable"><tt>sock2</tt></em>. You can use these sockets
bidirectionally, unlike the filehandles created by the
<tt class="literal">pipe</tt> function.
</p></div>

<a name="INDEX-1064" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sort"><b>sort</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sort [<em class="emphasis">code</em>] <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1064" />Sorts a
<em class="replaceable"><tt>list</tt></em> and returns the sorted list value. By
default (without a <em class="replaceable"><tt>code</tt></em> argument), it
sorts in standard string comparison order (undefined values sorting
before defined null strings, which sort before everything else).
<em class="replaceable"><tt>code</tt></em>, if given, may be the name of a
subroutine or a code block (anonymous subroutine) that defines its
own comparison mechanism for sorting elements of
<em class="replaceable"><tt>list</tt></em>. The routine must return to the
<tt class="literal">sort</tt> function an integer less than, equal to, or
greater than 0, depending on how the elements of the list will be
ordered. (The handy <tt class="literal">&lt;=&gt;</tt> and
<tt class="literal">cmp</tt> operators can be used to perform three-way
numeric and string comparisons.)
</p><p>The normal calling code for subroutines is bypassed, with the
following effects: the subroutine may not be a recursive subroutine,
and the two elements to be compared are passed into the subroutine as
<tt class="literal">$a</tt> and <tt class="literal">$b</tt>, not via
<tt class="literal">@_</tt>. The variables <tt class="literal">$a</tt> and
<tt class="literal">$b</tt> are passed by reference, so
don't modify them in the subroutine.
</p><p>Do not declare <tt class="literal">$a</tt> and <tt class="literal">$b</tt> as
lexical variables (with <tt class="literal">my</tt>). They are package
globals (though they're exempt from the usual
restrictions on globals when you're using
<tt class="literal">use</tt> <tt class="literal">strict</tt>). However, you do
need to make sure your <tt class="literal">sort</tt> routine is in the same
package, or else you must qualify <tt class="literal">$a</tt> and
<tt class="literal">$b</tt> with the package name of the caller.
</p><p>In versions preceding 5.005, Perl's
<tt class="literal">sort</tt> is implemented in terms of
C's <tt class="literal">qsort(3)</tt> function. Some
<tt class="literal">qsort(3)</tt> versions will dump core if your sort
subroutine provides inconsistent ordering of values. As of 5.005,
however, this is no longer true.
</p></div>

<a name="INDEX-1065" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="splice"><b>splice</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
splice <em class="emphasis">@array</em>, <em class="emphasis">pos</em>, [<em class="emphasis">n</em>], [<em class="emphasis">list</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1065" />Removes
<em class="replaceable"><tt>n</tt></em> number of elements from
<tt class="literal">@</tt><em class="replaceable"><tt>array</tt></em> starting at
position <em class="replaceable"><tt>pos</tt></em>, replacing them with the
elements of <em class="replaceable"><tt>list</tt></em>, if provided. The
function returns the elements removed from the array. The array grows
or shrinks as necessary. If <em class="replaceable"><tt>n</tt></em> is omitted,
the function removes everything from <em class="replaceable"><tt>pos</tt></em>onward.
</p></div>

<a name="INDEX-1066" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="split"><b>split</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
split /<em class="emphasis">pattern</em>/, <em class="emphasis">string</em>, [<em class="emphasis">limit</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1066" />Scans a
<em class="replaceable"><tt>string</tt></em> for delimiters that match
<em class="replaceable"><tt>pattern</tt></em> and splits the string into a list
of substrings, returning the resulting list value in list context, or
the count of substrings in scalar context. The delimiters are
determined by repeated pattern matching, using the regular expression
given in <em class="replaceable"><tt>pattern</tt></em>, so the delimiters may be
of any size and need not be the same string on every match. If the
<em class="replaceable"><tt>pattern</tt></em> doesn't match at
all, <tt class="literal">split</tt> returns the original string as a single
substring. If it matches once, you get two substrings, and so on.
</p><p>If <em class="replaceable"><tt>limit</tt></em> is specified and is not negative,
the function splits into no more than that many fields. If
<em class="replaceable"><tt>limit</tt></em> is negative, it is treated as if an
arbitrarily large <em class="replaceable"><tt>limit</tt></em> has been
specified. If <em class="replaceable"><tt>limit</tt></em> is omitted, trailing
null fields are stripped from the result (which potential users of
<tt class="literal">pop</tt> would do well to remember). If
<tt class="literal">string</tt> is omitted, the function splits the
<tt class="literal">$_</tt> string. If <em class="replaceable"><tt>pattern</tt></em>is also omitted, the function splits on whitespace,
<tt class="literal">/\s+/</tt>, after skipping any leading whitespace.
</p><p>If the <em class="replaceable"><tt>pattern</tt></em> contains parentheses, then
the substring matched by each pair of parentheses is included in the
resulting list, interspersed with the fields that are ordinarily
returned. Here's a simple case:
</p><blockquote><pre class="code">split /([-,])/, "1-10,20";</pre></blockquote><p>This produces the list value: </p><blockquote><pre class="code">(1, '-', 10, ',', 20)</pre></blockquote></div>

<a name="INDEX-1067" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sprintf"><b>sprintf</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sprintf <em class="emphasis">format</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1067" />Returns a string
formatted by the <tt class="literal">printf</tt> conventions. The
<em class="replaceable"><tt>format</tt></em> string contains text with embedded
field specifiers into which the elements of
<em class="replaceable"><tt>list</tt></em> are substituted, one per field. Field
specifiers are roughly of the form:
</p><blockquote><pre class="code">%<em class="replaceable"><tt>m.nx</em></pre></blockquote><p>in which <em class="replaceable">m</tt></em> and
<em class="replaceable"><tt>n</tt></em> are optional sizes with interpretation
that depends on the type of field, and <em class="replaceable"><tt>x</tt></em>is one of the following:
</p><a name="ch05-171-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Code</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">%</tt></p>
</td>
<td>
<p>Percent sign</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">c</tt></p>
</td>
<td>
<p>Character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">d</tt></p>
</td>
<td>
<p>Decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">e</tt></p>
</td>
<td>
<p>Exponential format floating-point number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">E</tt></p>
</td>
<td>
<p>Exponential format floating-point number with uppercase E</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">f</tt></p>
</td>
<td>
<p>Fixed-point format floating-point number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">g</tt></p>
</td>
<td>
<p>Floating-point number, in either exponential or fixed decimal notation</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">G</tt></p>
</td>
<td>
<p>Like <tt class="literal">g</tt> with uppercase E (if applicable)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ld</tt></p>
</td>
<td>
<p>Long decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lo</tt></p>
</td>
<td>
<p>Long octal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lu</tt></p>
</td>
<td>
<p>Long unsigned decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lx</tt></p>
</td>
<td>
<p>Long hexadecimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">o</tt></p>
</td>
<td>
<p>Octal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>String</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">u</tt></p>
</td>
<td>
<p>Unsigned decimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">x</tt></p>
</td>
<td>
<p>Hexadecimal integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">X</tt></p>
</td>
<td>
<p>Hexadecimal integer with uppercase letters</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">p</tt></p>
</td>
<td>
<p>The Perl value's address in hexadecimal</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">n</tt></p>
</td>
<td>
<p>Special value that stores the number of characters output so far into
the next variable in the parameter list.
</p>
</td>
</tr>

</table><em class="replaceable"><tt>m</tt></em> is typically the minimum length of the
field (negative for left-justified), and <em class="replaceable"><tt>n</tt></em>is precision for exponential formats and the maximum length for other
formats. Padding is typically done with spaces for strings and zeroes
for numbers. The <tt class="literal">*</tt> character as a length specifier
is not supported.
</p></div>
<a name="INDEX-1068" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sqrt"><b>sqrt</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sqrt <em class="emphasis">num</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1068" />Returns the square
root of <em class="replaceable"><tt>num</tt></em>, or <tt class="literal">$_</tt> if
omitted. For other roots such as cube roots, you can use the
<tt class="literal">**</tt> operator to raise something to a fractional
power.
</p></div>

<a name="INDEX-1069" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="srand"><b>srand</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
srand <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1069" />Sets the random
number seed for the <tt class="literal">rand</tt> operator so that
<tt class="literal">rand</tt> can produce a different sequence each time
you run your program. If <em class="replaceable"><tt>expr</tt></em> is omitted,
a default seed is used that is a mix of difficult-to-predict,
system-dependent values. If you call <tt class="literal">rand</tt> and
haven't called <tt class="literal">srand</tt>,
<tt class="literal">rand</tt> calls <tt class="literal">srand</tt> with the
default seed.
</p></div>

<a name="INDEX-1070" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="stat"><b>stat</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
stat <em class="emphasis">file</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1070" />Returns
a 13-element list giving the statistics for a
<em class="replaceable"><tt>file</tt></em>, indicated by either a filehandle or
an expression that gives its name. It's typically
used as follows:
</p><blockquote><pre class="code">($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
    $atime,$mtime,$ctime,$blksize,$blocks)
            = stat $filename;</pre></blockquote><p>Not all fields are supported on all filesystem types. Here are the
meanings of the fields:
</p><a name="ch05-175-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Field</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">dev</tt></p>
</td>
<td>
<p>Device number of filesystem</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ino</tt></p>
</td>
<td>
<p>Inode number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mode</tt></p>
</td>
<td>
<p>File mode (type and permissions)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">nlink</tt></p>
</td>
<td>
<p>Number of (hard) links to the file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">uid</tt></p>
</td>
<td>
<p>Numeric user ID of file's owner</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">gid</tt></p>
</td>
<td>
<p>Numeric group ID of file's owner</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">rdev</tt></p>
</td>
<td>
<p>The device identifier (special files only)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">size</tt></p>
</td>
<td>
<p>Total size of file, in bytes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">atime</tt></p>
</td>
<td>
<p>Last access time since the epoch</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mtime</tt></p>
</td>
<td>
<p>Last modification time since the epoch</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ctime</tt></p>
</td>
<td>
<p>Inode change time (not creation time!) since the epoch</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">blksize</tt></p>
</td>
<td>
<p>Preferred blocksize for file system I/O</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">blocks</tt></p>
</td>
<td>
<p>Actual number of blocks allocated</p>
</td>
</tr>

</table><tt class="literal">$dev</tt> and <tt class="literal">$ino</tt>, taken together,
uniquely identify a file. The <tt class="literal">$blksize</tt> and
<tt class="literal">$blocks</tt> are likely defined only on BSD-derived
filesystems. The <tt class="literal">$blocks</tt> field (if defined) is
reported in 512-byte blocks. Note that <tt class="literal">$blocks*512</tt>
can differ greatly from <tt class="literal">$size</tt> for files containing
unallocated blocks, or "holes,"
which aren't counted in <tt class="literal">$blocks</tt>.
</p><p>If <tt class="literal">stat</tt> is passed the special filehandle
consisting of an underline, no actual <tt class="literal">stat</tt> is
done, but the current contents of the <tt class="literal">stat</tt>
structure from the last <tt class="literal">stat</tt> or
<tt class="literal">stat</tt>-based file test (the <tt class="literal">-x</tt>
operators) is returned.
</p></div>

<a name="INDEX-1071" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="study"><b>study</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
study <em class="emphasis">scalar</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1071" />This function takes
extra time to study <em class="replaceable"><tt>scalar</tt></em>(<tt class="literal">$_</tt> if unspecified) in anticipation of doing many
pattern matches on the string before it is next modified. You may
have only one <tt class="literal">study</tt> active at a time&#x2014;if you
study a different scalar, the first is
"unstudied."
</p></div>

<a name="INDEX-1072" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sub"><b>sub</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sub <em class="emphasis">name</em> [<em class="emphasis">proto</em>] {<em class="emphasis">block</em>}
sub [<em class="emphasis">proto</em>] <em class="emphasis">name</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1072" />Declares
and defines a subroutine. <em class="replaceable"><tt>name</tt></em> is the name
given to the subroutine; <em class="replaceable"><tt>block</tt></em> is the code
that will be executed when the subroutine is called. Without
<em class="replaceable"><tt>block</tt></em>, this statement declares only a
subroutine, which must be defined at a later point in your program.
<em class="replaceable"><tt>proto</tt></em> is a sequence of symbols that places
constraints on the arguments that the subroutine will receive. See
<a href="ch04_07.htm">Section 4.7, "Subroutines"</a>.
</p></div>

<a name="INDEX-1073" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="substr"><b>substr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
substr <em class="emphasis">string</em>, <em class="emphasis">pos</em>, [<em class="emphasis">n</em>, <em class="emphasis">replacement</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1073" />Extracts and
returns a substring <em class="replaceable"><tt>n</tt></em> characters long,
starting at character position <em class="replaceable"><tt>pos</tt></em>, from a
given <em class="replaceable"><tt>string</tt></em>. If
<em class="replaceable"><tt>pos</tt></em> is negative, the substring starts that
far from the end of the string instead. If
<em class="replaceable"><tt>n</tt></em> is omitted, everything to the end of the
string is returned. If <em class="replaceable"><tt>n</tt></em> is negative, the
length is calculated to leave that many characters off the end of the
string.
</p><p>You can use <tt class="literal">substr( )</tt> as an lvalue&#x2014;replacing
the delimited substring with a new string&#x2014;if
<em class="replaceable"><tt>string</tt></em> is given as an lvalue. You can also
specify a <em class="replaceable"><tt>replacement</tt></em> string in the fourth
parameter to replace the substring. The original extracted substring
is still returned.
</p></div>

<a name="INDEX-1074" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="symlink"><b>symlink</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
symlink <em class="emphasis">oldfile</em>, <em class="emphasis">newfile</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1074" />Creates a new
filename symbolically linked to the old filename. The function
returns <tt class="literal">1</tt> for success, <tt class="literal">0</tt>
otherwise. On systems that don't support symbolic
links, it produces a fatal error at runtime. Be careful if you supply
a relative symbolic link, since it will be interpreted relative to
the location of the symbolic link itself, not your current working
directory. See also  <a href="ch05_02.htm">link</a> and
 <a href="ch05_02.htm">readlink</a>.
</p></div>

<a name="INDEX-1075" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="syscall"><b>syscall</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
syscall <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1075" />Calls the system
call specified as the first element of the list, passing the
remaining elements as arguments to the system call. The function
produces a fatal error if <tt class="literal">syscall(2)</tt> is
unimplemented. The arguments are interpreted as follows: if a given
argument is numeric, the argument is passed as a C integer. If not, a
pointer to the string value is passed.
</p></div>

<a name="INDEX-1076" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sysopen"><b>sysopen</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sysopen <em class="emphasis">filehandle</em>, <em class="emphasis">filename</em>, <em class="emphasis">mode</em>, [<em class="emphasis">perms</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1076" />Opens the file
given by <em class="replaceable"><tt>filename</tt></em> and associates it with
<em class="replaceable"><tt>filehandle</tt></em>. This function calls
<tt class="literal">open(2)</tt> with the parameters
<em class="replaceable"><tt>filename</em>, <em class="replaceable">mode</tt></em>,
and <em class="replaceable"><tt>perms</tt></em>.
</p><p>The possible values and flag bits of the
<em class="replaceable"><tt>mode</tt></em> parameter are system-dependent; they
are available via the Fcntl library module. However, for historical
reasons, some values are universal: <tt class="literal">0</tt> means
read-only, <tt class="literal">1</tt> means write-only, and
<tt class="literal">2</tt> means read/write.
</p><p>If the file named by <em class="replaceable"><tt>filename</tt></em> does not
exist, and <tt class="literal">sysopen</tt> creates it (typically because
<em class="replaceable"><tt>mode</tt></em> includes the
<tt class="literal">O_CREAT</tt> flag), then the value of
<em class="replaceable"><tt>perms</tt></em> specifies the permissions of the
newly created file. If <em class="replaceable"><tt>perms</tt></em> is omitted,
the default value is <tt class="literal">0666</tt>, which allows read and
write for all. This default is reasonable. See
 <a href="ch05_02.htm">umask</a>.
</p><p>The FileHandle module provides a more object-oriented approach to
<tt class="literal">sysopen</tt>. See also  <a href="ch05_02.htm">open</a>.
</p></div>

<a name="INDEX-1077" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sysread"><b>sysread</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sysread <em class="emphasis">filehandle</em>, <em class="emphasis">scalar</em>, <em class="emphasis">length</em>, [<em class="emphasis">offset</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1077" />Reads
<em class="replaceable"><tt>length</tt></em> bytes of data into variable
<em class="replaceable"><tt>scalar</tt></em> from the specified
<em class="replaceable"><tt>filehandle</tt></em>. The function returns the
number of bytes actually read, or <tt class="literal">0</tt> at
end-of-file. It returns the undefined value on error.
<em class="replaceable"><tt>scalar</tt></em> will grow or shrink to the length
actually read. The <em class="replaceable"><tt>offset</tt></em>, if specified,
says where in the string to start putting the bytes so you can read
into the middle of a string that's being used as a
buffer. You should be prepared to handle the problems (such as
interrupted system calls) that standard I/O normally handles for you.
</p></div>

<a name="INDEX-1078" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="sysseek"><b>sysseek</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
sysseek <em class="emphasis">filehandle</em>, <em class="emphasis">offset</em>, <em class="emphasis">whence</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1078" />A variant of
<tt class="literal">seek( )</tt> that sets and gets the
file's system read/write position using the
<tt class="literal">lseek(2)</tt> system call. It's the
only reliable way to seek before a <tt class="literal">sysread( )</tt> or
<tt class="literal">syswrite( )</tt>. Returns the new position, or
<tt class="literal">undef</tt> on failure. Arguments are the same as for
<tt class="literal">seek</tt>.
</p></div>

<a name="INDEX-1079" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="system"><b>system</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
system <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1079" />Executes any
program on the system for you. It does exactly the same thing as
<tt class="literal">exec</tt> <em class="replaceable"><tt>list</tt></em> except that
it does a <tt class="literal">fork</tt> first, and then, after the
<tt class="literal">exec</tt>, it waits for the <tt class="literal">exec</tt>ed
program to complete. That is, it runs the program for you and returns
when it's done, unlike <tt class="literal">exec</tt>,
which never returns (if it succeeds). Note that argument processing
varies depending on the number of arguments, as described for
<tt class="literal">exec</tt>. The return value is the exit status of the
program as returned by the <tt class="literal">wait(2)</tt> call. To get
the actual exit value, divide by 256. (The lower eight bits are set
if the process died from a signal.) See  <a href="ch05_02.htm">exec</a>.
</p></div>

<a name="INDEX-1080" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="syswrite"><b>syswrite</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
syswrite <em class="emphasis">filehandle</em>, <em class="emphasis">scalar</em>, <em class="emphasis">length</em>, [<em class="emphasis">offset</em>]
</pre></td><td align="right" /></tr></table><a name="INDEX-1080" />Writes
<em class="replaceable"><tt>length</tt></em> bytes of data from variable
<em class="replaceable"><tt>scalar</tt></em> to the specified
<em class="replaceable"><tt>filehandle</tt></em>. The function returns the
number of bytes actually written, or the undefined value on error.
You should be prepared to handle the problems that standard I/O
normally handles for you, such as partial writes. The
<em class="replaceable"><tt>offset</tt></em>, if specified, says where in the
string to start writing from, in case you're using
the string as a buffer, for instance, or need to recover from a
partial write.
</p><p>Do not mix calls to <tt class="literal">print</tt> (or
<tt class="literal">write</tt>) and <tt class="literal">syswrite</tt> on the same
filehandle unless you really know what you're doing.
</p></div>

<a name="INDEX-1081" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="tell"><b>tell</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
tell <em class="emphasis">filehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1081" />Returns
the current file position (in bytes, <tt class="literal">0</tt>-based) for
<em class="replaceable"><tt>filehandle</tt></em>. This value is typically fed to
the <tt class="literal">seek</tt> function at a future time to get back to
the current position. If <em class="replaceable"><tt>filehandle</tt></em> is
omitted, the function returns the position of the last file read.
File positions are only meaningful on regular files. Devices, pipes,
and sockets have no file position.
</p></div>

<a name="INDEX-1082" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="telldir"><b>telldir</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
telldir <em class="emphasis">dirhandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1082" />Returns the
current position of the <tt class="literal">readdir</tt> routines on a
directory handle (<em class="replaceable"><tt>dirhandle</tt></em>). This value
may be given to <tt class="literal">seekdir</tt> to access a particular
location in a directory. The function has the same caveats about
possible directory compaction as the corresponding system library
routine. This function may not be implemented everywhere that
<tt class="literal">readdir</tt> is. Even if it is, no calculation may be
done with the return value. It's just an opaque
value, meaningful only to <tt class="literal">seekdir</tt>.
</p></div>

<a name="INDEX-1083" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="tie"><b>tie</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
tie <em class="emphasis">variable</em>, <em class="emphasis">classname</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1083" />Binds a
<em class="replaceable"><tt>variable</tt></em> to a package class,
<em class="replaceable"><tt>classname</tt></em>, that will provide the
implementation for the variable. Any additional arguments
(<em class="replaceable"><tt>list</tt></em>) are passed to the
"new" method of the class (meaning
<tt class="literal">TIESCALAR</tt>, <tt class="literal">TIEARRAY</tt>, or
<tt class="literal">TIEHASH</tt>). Typically, these are arguments that
might be passed to the <tt class="literal">dbm_open(3)</tt> function of C,
but this is package-dependent. The object returned by the
"new" method is also returned by
the <tt class="literal">tie</tt> function, which can be useful if you want
to access other methods in <em class="replaceable"><tt>classname</tt></em>. (The
object can also be accessed through the <tt class="literal">tied</tt>
function.)
</p><p>A class implementing a hash should provide the following methods: </p><blockquote><pre class="code">TIEHASH $class, <em class="replaceable"><tt>LIST</tt></em>
DESTROY $self
FETCH $self, $key
STORE $self, $key, $value
DELETE $self, $key
EXISTS $self, $key
FIRSTKEY $self
NEXTKEY $self, $lastkey</pre></blockquote><p>A class implementing an ordinary array should provide the following
methods:
</p><blockquote><pre class="code">TIEARRAY $classname, <em class="replaceable"><tt>LIST</tt></em>
DESTROY $self
FETCH $self, $subscript
STORE $self, $subscript, $value</pre></blockquote><p>A class implementing a scalar should provide the following methods: </p><blockquote><pre class="code">TIESCALAR $classname, <em class="replaceable"><tt>LIST</tt></em>
DESTROY $self
FETCH $self, 
STORE $self, $value</pre></blockquote><p>Unlike <tt class="literal">dbmopen</tt>, the <tt class="literal">tie</tt>
function will not <tt class="literal">use</tt> or
<tt class="literal">require</tt> a module for you&#x2014;you need to do that
explicitly yourself.
</p></div>

<a name="INDEX-1084" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="tied"><b>tied</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
tied <em class="emphasis">variable</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1084" />Returns a reference
to the object underlying <em class="replaceable"><tt>variable</tt></em> (the
same value that was originally returned by the <tt class="literal">tie</tt>
call that bound the variable to a package). It returns the undefined
value if <em class="replaceable"><tt>variable</tt></em> isn't
tied to a package. So, for example, you can use:
</p><blockquote><pre class="code">ref tied %hash</pre></blockquote><p>to find out which package your hash is currently tied to.</p></div>

<a name="INDEX-1085" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="time"><b>time</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
time
</pre></td><td align="right" /></tr></table><a name="INDEX-1085" />Returns
the number of non-leap seconds since January 1, 1970, UTC. The
returned value is suitable for feeding to <tt class="literal">gmtime</tt>
and <tt class="literal">localtime</tt>, for comparison with file
modification and access times returned by <tt class="literal">stat</tt>,
and for feeding to <tt class="literal">utime</tt>.
</p></div>

<a name="INDEX-1086" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="times"><b>times</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
times
</pre></td><td align="right" /></tr></table><a name="INDEX-1086" />Returns a
four-element list giving the user and system CPU times, in seconds
(possibly fractional), for this process and for the children of this
process:
</p><blockquote><pre class="code">($user, $system, $cuser, $csystem) = times;</pre></blockquote><p>For example, to time the execution speed of a section of Perl code: </p><blockquote><pre class="code">$start = (times)[0];
...
$end = (times)[0];
printf "that took %.2f CPU seconds\n", $end - $start;</pre></blockquote></div>

<a name="INDEX-1087" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="truncate"><b>truncate</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
truncate <em class="emphasis">file</em>, <em class="emphasis">length</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1087" />Truncates a
<em class="replaceable"><tt>file</tt></em> (given as a filehandle or by name) to
the specified length. The function produces a fatal error if
<tt class="literal">truncate(2)</tt> or an equivalent
isn't implemented on your system.
</p></div>

<a name="INDEX-1088" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="uc"><b>uc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
uc <em class="emphasis">string</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1088" />Returns an
uppercased version of <em class="replaceable"><tt>string</tt></em> (or
<tt class="literal">$_</tt> if <em class="replaceable"><tt>string</tt></em> is
omitted). This is the internal function implementing the
<tt class="literal">\U</tt> escape in double-quoted strings. POSIX
<tt class="literal">setlocale(3)</tt> settings are respected.
</p></div>

<a name="INDEX-1089" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="ucfirst"><b>ucfirst</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
ucfirst <em class="emphasis">string</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1089" />Returns a version
of <em class="replaceable"><tt>string</tt></em> (or <tt class="literal">$_</tt> if
<em class="replaceable"><tt>string</tt></em> is omitted) with the first
character uppercased. This is the internal function that implements
the <tt class="literal">\u</tt> escape in double-quoted strings. POSIX
<tt class="literal">setlocale(3)</tt> settings are respected.
</p></div>

<a name="INDEX-1090" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="umask"><b>umask</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
umask <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1090" />Sets the umask for
the process to <em class="replaceable"><tt>expr</tt></em> and returns the old
one. (The umask tells Unix which permission bits to disallow when
creating a file.) If <em class="replaceable"><tt>expr</tt></em> is omitted, the
function merely returns the current umask. For example, to ensure
that the "other" bits are turned on
and that the "user" bits are turned
off, try something like:
</p><blockquote><pre class="code">umask((umask( ) &amp; 077) | 7);</pre></blockquote></div>

<a name="INDEX-1091" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="undef"><b>undef</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
undef <em class="emphasis">expr</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1091" />Undefines the value
of <em class="replaceable"><tt>expr</tt></em>, which must be an lvalue. Use only
on a scalar value, an entire array or hash, or a subroutine name
(using the <tt class="literal">&amp;</tt> prefix). Any storage associated
with the object will be recovered for reuse (though not returned to
the system, for most versions of Unix). The <tt class="literal">undef</tt>
function will probably not do what you expect on most special
variables. The function always returns the undefined value. This is
useful because you can omit the <em class="replaceable"><tt>expr</tt></em>, in
which case nothing gets undefined, but you still get an undefined
value that you could, for instance, return from a subroutine to
indicate an error.
</p><p>You may use <tt class="literal">undef</tt> as a placeholder on the left
side of a list assignment, in which case the corresponding value from
the right side is simply discarded. Apart from that, you may not use
<tt class="literal">undef</tt> as an lvalue.
</p></div>

<a name="INDEX-1092" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="unlink"><b>unlink</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
unlink <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1092" />Deletes a list of
files. (Under Unix, it will remove a link to a file, but the file may
still exist if another link references it.) If
<em class="replaceable"><tt>list</tt></em> is omitted, it unlinks the file given
in <tt class="literal">$_</tt>. The function returns the number of files
successfully deleted. Note that <tt class="literal">unlink</tt> will not
delete directories unless you are the superuser and the
<em class="emphasis">-U</em> flag is supplied to Perl. Even if these
conditions are met, be warned that unlinking a directory can inflict
serious damage on your filesystem. Use <tt class="literal">rmdir</tt>
instead.
</p></div>

<a name="INDEX-1093" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="unpack"><b>unpack</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
unpack <em class="emphasis">template</em>, <em class="emphasis">string</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1093" />Takes a string
(<em class="replaceable"><tt>string</tt></em>) representing a data structure and
expands it into a list value, returning the list value.
(<tt class="literal">unpack</tt> does the reverse of
<tt class="literal">pack</tt>.) In a scalar context, it can be used to
unpack a single value. The <em class="replaceable"><tt>template</tt></em> has
much the same format as the <tt class="literal">pack</tt> function&#x2014;it
specifies the order and type of the values to be unpacked. See
 <a href="ch05_02.htm">pack</a> for a more detailed description of
<em class="replaceable"><tt>template</tt></em>.
</p></div>

<a name="INDEX-1094" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="unshift"><b>unshift</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
unshift <em class="emphasis">@array</em>, <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1094" />Prepends the
elements of <em class="replaceable"><tt>list</tt></em> to the front of the array
and returns the new number of elements in the array.
</p></div>

<a name="INDEX-1095" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="untie"><b>untie</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
untie <em class="emphasis">variable</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1095" />Breaks the binding
between a variable and a package. See  <a href="ch05_02.htm">tie</a>.
</p></div>

<a name="INDEX-1096" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="use"><b>use</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
use <em class="emphasis">Module</em> <em class="emphasis">list</em>
use <em class="emphasis">version</em>
use <em class="emphasis">Module</em> <em class="emphasis">version</em> <em class="emphasis">list</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1096" />If the
first argument is a number, it is treated as a version number. If the
version of Perl is less than <em class="replaceable"><tt>version</tt></em>, an
error message is printed and Perl exits. This provides a way to check
the Perl version at compilation time instead of waiting for runtime.
</p><p>If <em class="replaceable"><tt>version</tt></em> appears between
<em class="replaceable"><tt>Module</tt></em> and
<em class="replaceable"><tt>list</tt></em>, then <tt class="literal">use</tt> calls
the <tt class="literal">version</tt> method in class
<em class="replaceable"><tt>Module</tt></em> with
<em class="replaceable"><tt>version</tt></em> as an argument.
</p><p>Otherwise, <tt class="literal">use</tt> imports some semantics into the
current package from the named <em class="replaceable"><tt>Module</tt></em>,
generally by aliasing certain subroutine or variable names into your
package. It is exactly equivalent to the following:
</p><blockquote><pre class="code">BEGIN { require <em class="replaceable"><tt>Module</em>; import <em class="replaceable">Module</em> <em class="replaceable">list</tt></em>; }</pre></blockquote><p>The <tt class="literal">BEGIN</tt> forces the <tt class="literal">require</tt>
and <tt class="literal">import</tt> to happen at compile time. The
<tt class="literal">require</tt> makes sure that the module is loaded into
memory if it hasn't been yet. The
<tt class="literal">import</tt> is not a built-in
function&#x2014;it's just an ordinary static method
call into the package named by <em class="replaceable"><tt>Module</tt></em> that
tells the module to import the list of features back into the current
package. The module can implement its import method any way it likes,
though most modules just choose to derive their import method via
inheritance from the Exporter class defined in the Exporter module.
</p><p>If you don't want your namespace altered, explicitly
supply an empty list:
</p><blockquote><pre class="code">use <em class="replaceable"><tt>Module</em> ( );</pre></blockquote><p>This is exactly equivalent to the following: </p><blockquote><pre class="code">BEGIN { require <em class="replaceable">Module</tt></em>; }</pre></blockquote><p>Because this is a wide-open interface, pragmas (compiler directives)
are also implemented this way. (See <a href="ch08_01.htm">Chapter 8, "Standard Modules"</a> for
descriptions of the currently implemented pragmas.) These
pseudomodules typically import semantics into the current block
scope, unlike ordinary modules, which import symbols into the current
package. (The latter are effective through the end of the file.)
</p><p>There's a corresponding declaration,
<tt class="literal">no</tt>, that
"unimports" any meanings originally
imported by <tt class="literal">use</tt> but have since become less
important:
</p><blockquote><pre class="code">no integer;
no strict 'refs';</pre></blockquote></div>

<a name="INDEX-1097" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="utime"><b>utime</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
utime <em class="emphasis">atime</em>, <em class="emphasis">mtime</em>, <em class="emphasis">files</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1097" />Changes the access
time (<em class="replaceable"><tt>atime</tt></em>) and modification time
(<em class="replaceable"><tt>mtime</tt></em>) on each file in a list of
<em class="replaceable"><tt>files</tt></em>. The first two elements must be the
<em class="replaceable"><tt>numerical</tt></em> access and modification times,
in that order. The function returns the number of files successfully
changed. The inode change time of each file is set to the current
time. Here's an example of a
<tt class="literal">utime</tt> command:
</p><blockquote><pre class="code">#!/usr/bin/perl
$now = time;
utime $now, $now, @ARGV;</pre></blockquote><p>To read the times from existing files, use <tt class="literal">stat</tt>.</p></div>

<a name="INDEX-1098" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="values"><b>values</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
values <em class="emphasis">%hash</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1098" />Returns a list
consisting of all the values of the named hash. The values are
returned in an apparently random order, but it is the same order that
the <tt class="literal">keys</tt> or <tt class="literal">each</tt> function would
produce on the same hash. To sort the hash by its values, see the
example under <a href="ch05_02.htm">keys</a>. Note that using
<tt class="literal">values</tt> on a hash bound to a very large DBM file
will produce a very large list, causing you to have a very large
process, and leaving you in a bind. You might prefer to use the
<tt class="literal">each</tt> function, which will iterate over the hash
entries one by one without reading them all into a single list.
</p></div>

<a name="INDEX-1099" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="vec"><b>vec</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
vec <em class="emphasis">string</em>, <em class="emphasis">offset</em>, <em class="emphasis">bits</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1099" />Treats a
<em class="replaceable"><tt>string</tt></em> as a vector of unsigned integers
and returns the value of the element specified by
<em class="replaceable"><tt>offset</tt></em> and
<em class="replaceable"><tt>bits</tt></em>. The function may also be assigned
to, which causes the element to be modified. The purpose of the
function is to provide compact storage of lists of small integers.
The integers may be very small&#x2014;vectors can hold numbers that
are as small as one bit, resulting in a bitstring.
</p><p>The <em class="replaceable"><tt>offset</tt></em> specifies the number of
elements to skip over to find the one you want.
<em class="replaceable"><tt>bits</tt></em> is the number of bits per element in
the vector, so each element can contain an unsigned integer in the
range
<tt class="literal">0..(2**</tt><em class="emphasis">bits</em><tt class="literal">)-1</tt>.
<em class="replaceable"><tt>bits</tt></em> must be one of <tt class="literal">1</tt>,
<tt class="literal">2</tt>, <tt class="literal">4</tt>, <tt class="literal">8</tt>,
<tt class="literal">16</tt>, or <tt class="literal">32</tt>. As many elements as
possible are packed into each byte, and the ordering is such that
<tt class="literal">vec($vectorstring,0,1)</tt> is guaranteed to go into
the lowest bit of the first byte of the string. To find the position
of the byte in which an element will be placed, you have to multiply
the <em class="replaceable"><tt>offset</tt></em> by the number of elements per
byte. When <em class="replaceable"><tt>bits</tt></em> is <tt class="literal">1</tt>,
there are eight elements per byte. When
<em class="replaceable"><tt>bits</tt></em> is <tt class="literal">2</tt>, there are
four elements per byte. When <em class="replaceable"><tt>bits</tt></em> is
<tt class="literal">4</tt>, there are two elements (called nybbles) per
byte. And so on.
</p><p>Regardless of whether your system is big-endian or little-endian,
<tt class="literal">vec($foo, 0, 8)</tt> always refers to the first byte of
string <tt class="literal">$foo</tt>. See  <a href="ch05_02.htm">select</a> for
examples of bitmaps generated with <tt class="literal">vec</tt>.
</p><p>Vectors created with <tt class="literal">vec</tt> can also be manipulated
with the logical operators <tt class="literal">|</tt>,
<tt class="literal">&amp;</tt>, <tt class="literal">^</tt>, and
<tt class="literal">~</tt>, which will assume a bit vector operation is
desired when the operands are strings. A bit vector
(<em class="replaceable"><tt>bits</tt></em> <tt class="literal">== 1</tt>) can be
translated to or from a string of <tt class="literal">1</tt>s and
<tt class="literal">0</tt>s by supplying a <tt class="literal">b*</tt> template
to <tt class="literal">unpack</tt> or <tt class="literal">pack</tt>. Similarly, a
vector of nybbles (<em class="replaceable"><tt>bits</tt></em> <tt class="literal">==
4</tt>) can be translated with an <tt class="literal">h*</tt>
template.
</p></div>

<a name="INDEX-1100" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="wait"><b>wait</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
wait
</pre></td><td align="right" /></tr></table><a name="INDEX-1100" />Waits
for a child process to terminate and returns the pid of the deceased
process, or <tt class="literal">-1</tt> if there are no child processes.
The status is returned in <tt class="literal">$?</tt>. If you get zombie
child processes, you are probably calling either this function or
<tt class="literal">waitpid</tt>. A common strategy to avoid such zombies
is:
</p><blockquote><pre class="code">$SIG{CHLD} = sub { wait };</pre></blockquote><p>If you expected a child and didn't find it, you
probably had a call to <tt class="literal">system</tt>, a close on a pipe,
or backticks between the <tt class="literal">fork</tt> and the
<tt class="literal">wait</tt>. These constructs also do a
<tt class="literal">wait(2)</tt> and may have harvested your child process.
Use <tt class="literal">waitpid</tt> to avoid this problem.
</p></div>

<a name="INDEX-1101" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="waitpid"><b>waitpid</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
waitpid <em class="emphasis">pid</em>, <em class="emphasis">flags</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1101" />Waits for a
particular child process <em class="replaceable"><tt>pid</tt></em> to terminate
and returns the pid when the process is dead, or
<tt class="literal">-1</tt> if there are no child processes or if the
<em class="replaceable"><tt>flags</tt></em> specify nonblocking and the process
isn't dead yet. The status of the dead process is
returned in <tt class="literal">$?</tt>. To get valid flag values, do the
following:
</p><blockquote><pre class="code">use POSIX "sys_wait_h";</pre></blockquote><p>On systems that implement neither the <tt class="literal">waitpid(2)</tt>
nor the <tt class="literal">wait4(2)</tt> system call,
<em class="replaceable"><tt>flags</tt></em> may be specified only as
<tt class="literal">0</tt>. In other words, you can wait for a specific
<em class="replaceable"><tt>pid</tt></em>, but you can't do it
in nonblocking mode.
</p></div>

<a name="INDEX-1102" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="wantarray"><b>wantarray</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
wantarray
</pre></td><td align="right" /></tr></table><a name="INDEX-1102" />Returns true if
the context of the currently executing subroutine is looking for a
list value. The function returns false if the context is looking for
a scalar. May also return <tt class="literal">undef</tt> if a
subroutine's return value will not be used at all.
</p></div>

<a name="INDEX-1103" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="warn"><b>warn</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
warn <em class="emphasis">msg</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1103" />Produces a message on
STDERR just like <tt class="literal">die</tt>, but doesn't
try to exit or throw an exception. For example:
</p><blockquote><pre class="code">warn "Debug enabled" if $debug;</pre></blockquote><p>If the message supplied is null, the message
<tt class="literal">"Something's wrong"</tt> is used. As
with <tt class="literal">die</tt>, a message not ending with a newline will
have file and line number information automatically appended. The
<tt class="literal">warn</tt> operator is unrelated to the
<em class="emphasis">-w</em> switch.
</p></div>

<a name="INDEX-1104" /><a name="INDEX-1105" /><a name="INDEX-1106" /><a name="INDEX-1107" /><a name="INDEX-1108" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><a name="write"><b>write</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
write <em class="emphasis">filehandle</em>
</pre></td><td align="right" /></tr></table><a name="INDEX-1104" />Writes a formatted record
(possibly multiline) to the specified
<em class="replaceable"><tt>filehandle</tt></em>, using the format associated
with that filehandle (see <a href="ch04_11.htm">Section 4.11, "Unicode"</a>). By default,
the format for a filehandle is the one having the same name as the
filehandle.
</p><p>If <em class="replaceable"><tt>filehandle</tt></em> is unspecified, output goes
to the current default output filehandle, which starts as STDOUT but
may be changed by the <tt class="literal">select</tt> operator. If the
<em class="replaceable"><tt>filehandle</tt></em> is an expression, then the
expression is evaluated to determine the actual
<em class="replaceable"><tt>filehandle</tt></em> at runtime.
</p><p>Note that <tt class="literal">write</tt> is not the opposite of
<tt class="literal">read</tt>. Use <tt class="literal">print</tt> for simple
string output. If you want to bypass standard I/O, see
<a href="ch05_02.htm">syswrite</a>.
</p></div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">5. Function Reference</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6. Debugging</td></tr></table></div>
<hr width="684" align="left" />


<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
      </map>
</body></html>
