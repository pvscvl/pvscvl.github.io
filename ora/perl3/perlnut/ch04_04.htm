<html><head><title>Special Variables (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.4. Special Variables</h2>

<p><a name="INDEX-299" /><a name="INDEX-300" /><a name="INDEX-301" />Some variables have a predefined,
special meaning in Perl. They use punctuation characters after the
usual variable indicator (<tt class="literal">$</tt>, <tt class="literal">@</tt>,
or <tt class="literal">%</tt>), such as <tt class="literal">$_</tt>. The
explicit, long-form names are the variables'
equivalents when you use the English module by including <tt class="literal">use
English;</tt> at the top of your program.
</p>

<a name="perlnut2-CHP-4-SECT-4.1" /><div class="sect2">
<h3 class="sect2">4.4.1. Global Special Variables</h3>

<p><a name="INDEX-302" /><a name="INDEX-303" /><a name="INDEX-304" /><a name="INDEX-305" />The most common special variable is
<tt class="literal">$_</tt>, which contains the default input and
pattern-searching string. For example:
</p>

<blockquote><pre class="code">foreach ('hickory','dickory','doc') {
        print;
}</pre></blockquote>

<p>The first time the loop is executed,
"hickory" is printed. The second
time around, "dickory" is printed,
and the third time, "doc" is
printed. That's because in each iteration of the
loop, the current string is placed in <tt class="literal">$_</tt> and is
used by default by <tt class="literal">print</tt>. Here are the places
where Perl will assume <tt class="literal">$_</tt>, even if you
don't specify it:
</p>

<ul><li>
<p>Various unary functions, including functions such as
<tt class="literal">ord</tt> and <tt class="literal">int</tt>, as well as the all
file tests (<tt class="literal">-f</tt>, <tt class="literal">-d</tt>), except for
<tt class="literal">-t</tt>, which defaults to <tt class="literal">STDIN</tt>.
</p>
</li><li>
<p>Various list functions such as <tt class="literal">print</tt> and
<tt class="literal">unlink</tt>.
</p>
</li><li>
<p>The pattern-matching operations <tt class="literal">m//</tt>,
<tt class="literal">s///</tt>, and <tt class="literal">tr///</tt> when used
without an <tt class="literal">=~</tt> operator.
</p>
</li><li>
<p>The default iterator variable in a <tt class="literal">foreach</tt> loop if
no other variable is supplied.
</p>
</li><li>
<p>The implicit iterator variable in the <tt class="literal">grep</tt> and
<tt class="literal">map</tt> functions.
</p>
</li><li>
<p>The default place to put an input record when a line-input
operation's result is tested by itself as the sole
criterion of a <tt class="literal">while</tt> test (i.e.,
<tt class="literal">&lt;</tt><em class="replaceable"><tt>filehandle</tt></em><tt class="literal">&gt;</tt>).
Note that outside of a <tt class="literal">while</tt> test, this does not
happen.
</p>
</li></ul>
<p>The following is a complete listing of global special variables:</p>

<dl>
<dt><b><tt class="literal">$_</tt></b></dt>
<dt><b><tt class="literal">$ARG</tt></b></dt>
<dd>
The default input and pattern-searching space.</p>
</dd>


<dt><b><tt class="literal">$</tt>.</b></dt>
<dt><b><tt class="literal">$INPUT_LINE_NUMBER</tt></b></dt>
<dt><b><tt class="literal">$NR</tt></b></dt>
<dd>
<a name="INDEX-306" /><a name="INDEX-307" /><a name="INDEX-308" />The current input line number of the
last filehandle that was read. An explicit close on the filehandle
resets the line number.
</p>
</dd>


<dt><b><tt class="literal">$/</tt></b></dt>
<dt><b><tt class="literal">$INPUT_RECORD_SEPARATOR</tt></b></dt>
<dt><b><tt class="literal">$RS</tt></b></dt>
<dd>
<a name="INDEX-309" /><a name="INDEX-310" />The input record separator; newline by
default. If set to the null string, it treats blank lines as
delimiters.
</p>
</dd>


<dt><b><tt class="literal">$</tt>,</b></dt>
<dt><b><tt class="literal">$OUTPUT_FIELD_SEPARATOR</tt></b></dt>
<dt><b><tt class="literal">$OFS</tt></b></dt>
<dd>
<a name="INDEX-311" /><a name="INDEX-312" /><a name="INDEX-313" />The output field
separator for the <tt class="literal">print</tt> operator.
</p>
</dd>


<dt><b><tt class="literal">$\</tt></b></dt>
<dt><b><tt class="literal">$OUTPUT_RECORD_SEPARATOR</tt></b></dt>
<dt><b><tt class="literal">$ORS</tt></b></dt>
<dd>
<a name="INDEX-314" /><a name="INDEX-315" /><a name="INDEX-316" />The output
record separator for the <tt class="literal">print</tt> operator.
</p>
</dd>


<dt><b><tt class="literal">$</tt></b></dt>
<dt><b><tt class="literal">$LIST_SEPARATOR</tt></b></dt>
<dd>
<a name="INDEX-317" /><a name="INDEX-318" />Like <tt class="literal">$</tt>, except that
it applies to list values interpolated into a double-quoted string
(or similar interpreted string). Default is a space.
</p>
</dd>


<dt><b><tt class="literal">$;</tt></b></dt>
<dt><b><tt class="literal">$SUBSCRIPT_SEPARATOR</tt></b></dt>
<dt><b><tt class="literal">$SUBSEP</tt></b></dt>
<dd>
<a name="INDEX-319" /><a name="INDEX-320" /><a name="INDEX-321" />The subscript
separator for multidimensional array emulation. Default is
<tt class="literal">\034</tt>. 
</p>
</dd>


<dt><b><tt class="literal">$^L</tt></b></dt>
<dt><b><tt class="literal">$FORMAT_FORMFEED</tt></b></dt>
<dd>
<a name="INDEX-322" /><a name="INDEX-323" />What a format outputs to perform a
formfeed. Default is <tt class="literal">\f</tt>.
</p>
</dd>


<dt><b><tt class="literal">$:</tt></b></dt>
<dt><b><tt class="literal">$FORMAT_LINE_BREAK_CHARACTERS</tt></b></dt>
<dd>
<a name="INDEX-324" /><a name="INDEX-325" />The current set of characters after
which a string may be broken to fill continuation fields (starting
with <tt class="literal">^</tt>) in a format. Default is
<tt class="literal">\n"</tt>.
</p>
</dd>


<dt><b><tt class="literal">$^A</tt></b></dt>
<dt><b><tt class="literal">$ACCUMULATOR</tt></b></dt>
<dd>
<a name="INDEX-326" /><a name="INDEX-327" />The current value of the
<tt class="literal">write</tt> accumulator for <tt class="literal">format</tt>
lines.
</p>
</dd>


<dt><b><tt class="literal">$#</tt></b></dt>
<dt><b><tt class="literal">$OFMT</tt></b></dt>
<dd>
<a name="INDEX-328" /><a name="INDEX-329" />Contains the
output format for printed numbers (deprecated).
</p>
</dd>


<dt><b><tt class="literal">$?</tt></b></dt>
<dt><b><tt class="literal">$CHILD_ERROR</tt></b></dt>
<dd>
<a name="INDEX-330" /><a name="INDEX-331" />The status returned by the last pipe
close, backtick (<tt class="literal">''</tt>) command, or
<tt class="literal">system</tt> operator.
</p>
</dd>


<dt><b><tt class="literal">$!</tt></b></dt>
<dt><b><tt class="literal">$OS_ERROR</tt></b></dt>
<dt><b><tt class="literal">$ERRNO</tt></b></dt>
<dd>
<a name="INDEX-332" /><a name="INDEX-333" /><a name="INDEX-334" />If used in a
numeric context, yields the current value of the
<tt class="literal">errno</tt> variable, identifying the last system call
error. If used in a string context, yields the corresponding system
error string.
</p>
</dd>


<dt><b><tt class="literal">$@</tt></b></dt>
<dt><b><tt class="literal">$EVAL_ERROR</tt></b></dt>
<dd>
<a name="INDEX-335" /><a name="INDEX-336" />The Perl syntax error message from the
last <tt class="literal">eval</tt> command.
</p>
</dd>


<dt><b><tt class="literal">$$</tt></b></dt>
<dt><b><tt class="literal">$PROCESS_ID</tt></b></dt>
<dt><b><tt class="literal">$PID</tt></b></dt>
<dd>
<a name="INDEX-337" /><a name="INDEX-338" /><a name="INDEX-339" />The pid of the Perl
process running this script.
</p>
</dd>


<dt><b><tt class="literal">$&lt;</tt></b></dt>
<dt><b><tt class="literal">$REAL_USER_ID</tt></b></dt>
<dt><b><tt class="literal">$UID</tt></b></dt>
<dd>
<a name="INDEX-340" /><a name="INDEX-341" /><a name="INDEX-342" />The real user ID
(uid) of this process.
</p>
</dd>


<dt><b><tt class="literal">$&gt;</tt></b></dt>
<dt><b><tt class="literal">$EFFECTIVE_USER_ID</tt></b></dt>
<dt><b><tt class="literal">$EUID</tt></b></dt>
<dd>
<a name="INDEX-343" /><a name="INDEX-344" /><a name="INDEX-345" />The effective
uid of this process.
</p>
</dd>


<dt><b><tt class="literal">$(</tt></b></dt>
<dt><b><tt class="literal">$REAL_GROUP_ID</tt></b></dt>
<dt><b><tt class="literal">$GID</tt></b></dt>
<dd>
<a name="INDEX-346" /><a name="INDEX-347" /><a name="INDEX-348" />The real group ID
(gid) of this process.
</p>
</dd>


<dt><b><tt class="literal">$)</tt></b></dt>
<dt><b><tt class="literal">$EFFECTIVE_GROUP_ID</tt></b></dt>
<dt><b><tt class="literal">$EGID</tt></b></dt>
<dd>
<a name="INDEX-349" /><a name="INDEX-350" /><a name="INDEX-351" />The effective gid of
this process.
</p>
</dd>


<dt><b><tt class="literal">$0</tt></b></dt>
<dt><b><tt class="literal">$PROGRAM_NAME</tt></b></dt>
<dd>
<a name="INDEX-352" /><a name="INDEX-353" />Contains the name of the file
containing the Perl script being executed.
</p>
</dd>


<dt><b><tt class="literal">$[</tt></b></dt>
<dd>
<a name="INDEX-354" />The index of the first
element in an array and of the first character in a substring.
Default is 0.
</p>
</dd>


<dt><b><tt class="literal">$]</tt></b></dt>
<dt><b><tt class="literal">$PERL_VERSION</tt></b></dt>
<dd>
<a name="INDEX-355" /><a name="INDEX-356" />Returns the version plus patch level
divided by 1,000.
</p>
</dd>


<dt><b><tt class="literal">$^D</tt></b></dt>
<dt><b><tt class="literal">$DEBUGGING</tt></b></dt>
<dd>
<a name="INDEX-357" /><a name="INDEX-358" />The current
value of the debugging flags.
</p>
</dd>


<dt><b><tt class="literal">$^E</tt></b></dt>
<dt><b><tt class="literal">$EXTENDED_OS_ERROR</tt></b></dt>
<dd>
<a name="INDEX-359" /><a name="INDEX-360" />Extended error message on some
platforms.
</p>
</dd>


<dt><b><tt class="literal">$^F</tt></b></dt>
<dt><b><tt class="literal">$SYSTEM_FD_MAX</tt></b></dt>
<dd>
<a name="INDEX-361" /><a name="INDEX-362" />The maximum system file descriptor,
ordinarily 2.
</p>
</dd>


<dt><b><tt class="literal">$^H</tt></b></dt>
<dd>
<a name="INDEX-363" />Contains internal compiler hints
enabled by certain pragmatic modules.
</p>
</dd>


<dt><b><tt class="literal">$^I</tt></b></dt>
<dt><b><tt class="literal">$INPLACE_EDIT</tt></b></dt>
<dd>
<a name="INDEX-364" /><a name="INDEX-365" />The current value of the inplace-edit
extension. Use <tt class="literal">undef</tt> to disable inplace editing.
</p>
</dd>


<dt><b><tt class="literal">$^M</tt></b></dt>
<dd>
<a name="INDEX-366" />The contents of <tt class="literal">$M</tt>
can be used as an emergency memory pool in case Perl
<tt class="literal">die</tt> s with an out-of-memory error. Use of
<tt class="literal">$M</tt> requires a special compilation of Perl. See the
INSTALL document for more information.
</p>
</dd>


<dt><b><tt class="literal">$^O</tt></b></dt>
<dt><b><tt class="literal">$OSNAME</tt></b></dt>
<dd>
<a name="INDEX-367" /><a name="INDEX-368" />Contains the
name of the operating system for which the current Perl binary was
compiled.
</p>
</dd>


<dt><b><tt class="literal">$^P</tt></b></dt>
<dt><b><tt class="literal">$PERLDB</tt></b></dt>
<dd>
<a name="INDEX-369" /><a name="INDEX-370" />The internal
flag that the debugger clears so that it doesn't
debug itself.
</p>
</dd>


<dt><b><tt class="literal">$^T</tt></b></dt>
<dt><b><tt class="literal">$BASETIME</tt></b></dt>
<dd>
<a name="INDEX-371" /><a name="INDEX-372" />The time at
which the script began running, in seconds since the epoch.
</p>
</dd>


<dt><b><tt class="literal">$^W</tt></b></dt>
<dt><b><tt class="literal">$WARNING</tt></b></dt>
<dd>
<a name="INDEX-373" /><a name="INDEX-374" />The current
value of the warning switch, either true or false.
</p>
</dd>


<dt><b><tt class="literal">$^X</tt></b></dt>
<dt><b><tt class="literal">$EXECUTABLE_NAME</tt></b></dt>
<dd>
<a name="INDEX-375" /><a name="INDEX-376" />The name that the Perl binary itself
was executed as. As of Perl 5.8, Perl asks the operating system
instead of using C's <tt class="literal">argv[0]</tt>.
</p>
</dd>


<dt><b><tt class="literal">$ARGV</tt></b></dt>
<dd>
<a name="INDEX-377" />Contains the name of the current file
when reading from <tt class="literal">&lt;ARGV&gt;</tt>.
</p>
</dd>

</dl>

</div>
<a name="perlnut2-CHP-4-SECT-4.2" /><div class="sect2">
<h3 class="sect2">4.4.2. Global Special Arrays and Hashes</h3>
<a name="INDEX-378" /><a name="INDEX-379" />
<dl>
<dt><b><tt class="literal">@ARGV</tt></b></dt>
<dd>
<a name="INDEX-380" />The array containing the command-line
arguments intended for the script.
</p>
</dd>


<dt><b><tt class="literal">@INC</tt></b></dt>
<dd>
<a name="INDEX-381" />The array containing the list of places to
look for Perl scripts to be evaluated by the <tt class="literal">do</tt>,
<tt class="literal">require</tt>, or <tt class="literal">use</tt> constructs.
</p>
</dd>


<dt><b><tt class="literal">@F</tt></b></dt>
<dd>
<a name="INDEX-382" />The array into which the input lines are
split when the <em class="emphasis">-a</em> command-line switch is given.
</p>
</dd>


<dt><b><tt class="literal">%INC</tt></b></dt>
<dd>
<a name="INDEX-383" />The hash containing entries for the
filename of each file that has been included via
<tt class="literal">do</tt> or <tt class="literal">require</tt>.
</p>
</dd>


<dt><b><tt class="literal">%ENV</tt></b></dt>
<dd>
<a name="INDEX-384" />The hash containing your current
environment.
</p>
</dd>


<dt><b><tt class="literal">%SIG</tt></b></dt>
<dd>
<a name="INDEX-385" />The hash used to set signal handlers for
various signals.
</p>
</dd>

</dl>

</div>
<a name="perlnut2-CHP-4-SECT-4.3" /><div class="sect2">
<h3 class="sect2">4.4.3. Global Special Filehandles</h3>
<a name="INDEX-386" />
<dl>
<dt><b><tt class="literal">ARGV</tt></b></dt>
<dd>
<a name="INDEX-387" />The special
filehandle that iterates over command-line filenames in
<tt class="literal">@ARGV</tt>. Usually written as the null filehandle in
<tt class="literal">&lt;&gt;</tt>.
</p>
</dd>


<dt><b><tt class="literal">STDERR</tt></b></dt>
<dd>
<a name="INDEX-388" />The
special filehandle for standard error in any package.
</p>
</dd>


<dt><b><tt class="literal">STDIN</tt></b></dt>
<dd>
<a name="INDEX-389" />The special
filehandle for standard input in any package.
</p>
</dd>


<dt><b><tt class="literal">STDOUT</tt></b></dt>
<dd>
<a name="INDEX-390" />The
special filehandle for standard output in any package.
</p>
</dd>


<dt><b><tt class="literal">DATA</tt></b></dt>
<dd>
<a name="INDEX-391" />The special
filehandle that refers to anything following the <tt class="literal">_ _END_
_</tt> token in the file containing the script. Or the special
filehandle for anything following the <tt class="literal">_ _DATA_ _</tt>
token in a required file, as long as you're reading
data in the same package <tt class="literal">_ _DATA_ _</tt> was found in.
</p>
</dd>


<dt><b><tt class="literal">_</tt> (underscore)</b></dt>
<dd>
<a name="INDEX-392" /><a name="INDEX-393" />The special
filehandle used to cache the information from the last
<tt class="literal">stat</tt>, <tt class="literal">lstat</tt>, or file test
operator.
</p>
</dd>

</dl>

</div>
<a name="perlnut2-CHP-4-SECT-4.4" /><div class="sect2">
<h3 class="sect2">4.4.4. Global Special Constants</h3>
<a name="INDEX-394" />
<dl>
<dt><b><tt class="literal">_  _END_  _</tt></b></dt>
<dd>
<a name="INDEX-395" /> <a name="INDEX-396" />Indicates the
logical end of your program. Any following text is ignored, but may
be read via the <tt class="literal">DATA</tt> filehandle.
</p>
</dd>


<dt><b><tt class="literal">_  _FILE_  _</tt></b></dt>
<dd>
<a name="INDEX-397" /> <a name="INDEX-398" />Represents the
filename at the point in your program where it's
used. Not interpolated into strings.
</p>
</dd>


<dt><b><tt class="literal">_  _LINE_  _</tt></b></dt>
<dd>
<a name="INDEX-399" /> <a name="INDEX-400" />Represents the
current line number. Not interpolated into strings.
</p>
</dd>


<dt><b><tt class="literal">_  _PACKAGE_  _</tt></b></dt>
<dd>
<a name="INDEX-401" /> <a name="INDEX-402" />Represents the current package name at
compile time, or undefined if there is no current package. Not
interpolated into strings.
</p>
</dd>

</dl>

</div>
<a name="perlnut2-CHP-4-SECT-4.5" /><div class="sect2">
<h3 class="sect2">4.4.5. Regular Expression Special Variables</h3>

<p><a name="INDEX-403" />For more information on
regular expressions, see <a href="ch04_06.htm">Section 4.6, "Regular Expressions"</a> later in this chapter.
</p>

<dl>
<dt><b><tt class="literal">$</tt><em class="replaceable">digit</em></b></dt>
<dd>
<a name="INDEX-404" />Contains the text matched by the
corresponding set of parentheses in the last pattern matched. For
example, <tt class="literal">$1</tt> matches whatever was contained in the
first set of parentheses in the previous regular expression.
</p>
</dd>



<dt><b><tt class="literal">$&amp;</tt></b></dt>
<dt><b><tt class="literal">$MATCH</tt></b></dt>
<dd>
<a name="INDEX-405" /><a name="INDEX-406" />The string
matched by the last successful pattern match.
</p>
</dd>


<dt><b><tt class="literal">$'</tt></b></dt>
<dt><b><tt class="literal">$PREMATCH</tt></b></dt>
<dd>
<a name="INDEX-407" /><a name="INDEX-408" />The string
preceding whatever was matched by the last successful pattern match.
</p>
</dd>


<dt><b><tt class="literal">$'</tt></b></dt>
<dt><b><tt class="literal">$POSTMATCH</tt></b></dt>
<dd>
<a name="INDEX-409" /><a name="INDEX-410" />The
string following whatever was matched by the last successful pattern
match.
</p>
</dd>


<dt><b><tt class="literal">$+</tt></b></dt>
<dt><b><tt class="literal">$LAST_PAREN_MATCH</tt></b></dt>
<dd>
<a name="INDEX-411" /><a name="INDEX-412" />The last bracket matched by the last
search pattern. This is useful if you don't know
which of a set of alternative patterns was matched. For example:
</p>


<blockquote><pre class="code">/Version: (.*)|Revision: (.*)/ &amp;&amp; ($rev = $+);</pre></blockquote></dd>


<a name="INDEX-413" /><dt><b><tt class="literal">$^N</tt></b></dt>
<dd>
The string matched by the most recently closed group. This is most
useful inside <tt class="literal">(?{</tt> . . . <tt class="literal">})</tt>
blocks for examining matched text. If you have multiple matches
denoted by parentheses, <tt class="literal">$^N</tt> can be used in lieu of
<tt class="literal">$1</tt>, <tt class="literal">$2</tt>, <tt class="literal">$3</tt>,
etc., so you don't have to manually count the number
of sets of parentheses that denote your matches. For example:
</p>


<blockquote><pre class="code">#!/usr/local/bin/perl -w

$words = "person|here";
$words =~ /(\w+)\|(\w+)/;
print $^N;   # Prints 'here'</pre></blockquote></dd>

</dl>

</div>
<a name="perlnut2-CHP-4-SECT-4.6" /><div class="sect2">
<h3 class="sect2">4.4.6. Filehandle Special Variables</h3>

<p><a name="INDEX-414" />Most of these variables apply
only when using formats. See <a href="ch04_11.htm">Section 4.11, "Unicode"</a> later in this chapter.
</p>

<dl>
<dt><b><tt class="literal">$|</tt></b></dt>
<dt><b><tt class="literal">$OUTPUT_AUTOFLUSH</tt></b></dt>
<dd>
<a name="INDEX-415" /><a name="INDEX-416" />If set to nonzero, forces an
<tt class="literal">fflush(3)</tt> after every <tt class="literal">write</tt> or
<tt class="literal">print</tt> on the currently selected output channel.
</p>
</dd>


<dt><b><tt class="literal">$%</tt></b></dt>
<dt><b><tt class="literal">$FORMAT_PAGE_NUMBER</tt></b></dt>
<dd>
<a name="INDEX-417" /><a name="INDEX-418" />The current page number of the
currently selected output channel.
</p>
</dd>


<dt><b><tt class="literal">$=</tt></b></dt>
<dt><b><tt class="literal">$FORMAT_LINES_PER_PAGE</tt></b></dt>
<dd>
<a name="INDEX-419" /><a name="INDEX-420" />The current page length (printable
lines) of the currently selected output channel. Default is 60.
</p>
</dd>


<dt><b><tt class="literal">$-</tt></b></dt>
<dt><b><tt class="literal">$FORMAT_LINES_LEFT</tt></b></dt>
<dd>
<a name="INDEX-421" /><a name="INDEX-422" />The number of lines left on the page of
the currently selected output channel.
</p>
</dd>


<dt><b><tt class="literal">$~</tt></b></dt>
<dt><b><tt class="literal">$FORMAT_NAME</tt></b></dt>
<dd>
<a name="INDEX-423" /><a name="INDEX-424" />The name of the current report format
for the currently selected output channel. Default is the name of the
filehandle.
</p>
</dd>


<dt><b><tt class="literal">$^</tt></b></dt>
<dt><b><tt class="literal">$FORMAT_TOP_NAME</tt></b></dt>
<dd>
<a name="INDEX-425" /><a name="INDEX-426" />The name of the current top-of-page
format for the currently selected output channel. Default is the name
of the filehandle with <tt class="literal">_TOP</tt> appended.
</p>
</dd>

</dl>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4.3. Statements</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.5. Operators</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>