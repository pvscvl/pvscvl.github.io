<html><head><title>Data Types and Variables (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.2. Data Types and Variables</h2>

<p><a name="INDEX-219" />Perl has three basic data types:
<em class="emphasis">scalars</em>, <em class="emphasis">arrays</em>, and
<em class="emphasis">hashes</em>.
</p>

<p>Scalars are essentially simple variables. They are preceded by a
dollar sign (<tt class="literal">$</tt>). A scalar is either a number, a
string, or a reference. (A reference is a scalar that points to
another piece of data. References are discussed later in this
chapter.) If you provide a string in which a number is expected or
vice versa, Perl automatically converts the operand using fairly
intuitive rules.
</p>

<p><a name="INDEX-220" />Arrays are ordered
lists of scalars accessed with a numeric subscript (subscripts start
at 0). They are preceded by an "at"
sign (<tt class="literal">@</tt>).
</p>

<p><a name="INDEX-221" />Hashes are unordered
sets of key/value pairs accessed with the keys as subscripts. They
are preceded by a percent sign (<tt class="literal">%</tt>).
</p>

<a name="perlnut2-CHP-4-SECT-2.1" /><div class="sect2">
<h3 class="sect2">4.2.1. Numbers</h3>

<p><a name="INDEX-222" />Perl stores numbers
internally as either signed integers or double-precision,
floating-point values. Numeric literals are specified by any of the
following floating-point or integer formats:
</p>

<dl>
<dt><b><tt class="literal">12345</tt> </b></dt>
<dd>
Integer</p>
</dd>


<dt><b><tt class="literal">-54321</tt></b></dt>
<dd>
Negative integer</p>
</dd>


<dt><b><tt class="literal">12345.67</tt></b></dt>
<dd>
Floating point</p>
</dd>


<dt><b><tt class="literal">6.02E23</tt></b></dt>
<dd>
Scientific notation</p>
</dd>


<dt><b><tt class="literal">0xffff</tt></b></dt>
<dd>
Hexadecimal</p>
</dd>


<dt><b><tt class="literal">0377</tt></b></dt>
<dd>
Octal</p>
</dd>


<dt><b><tt class="literal">4_294_967_296</tt></b></dt>
<dd>
Underline for legibility</p>
</dd>

</dl>

<p>Since Perl uses the comma as a list separator, you cannot use a comma
for improving the <a name="INDEX-223" /><a name="INDEX-224" /><a name="INDEX-225" /><a name="INDEX-226" />legibility of a large number. To
improve legibility, Perl allows you to use an underscore character
instead. The underscore works only within literal numbers specified
in your program, not in strings functioning as numbers or in data
read from somewhere else. Similarly, the leading
<tt class="literal">0x</tt> for hex and <tt class="literal">0</tt> for octal work
only for literals. The automatic conversion of a string to a number
does not recognize these prefixes&#x2014;you must do an explicit
conversion.
</p>

<p>Be aware that in Perl 5.8, there are many changes in how Perl deals
with integers and floating-point numbers. Regardless of how your
system handles numbers and conversion between characters and numbers,
Perl 5.8 works around system deficiencies to force more accurate
number handling. Furthermore, whereas prior to 5.8 Perl used
floating-point numbers exclusively in math operations, Perl 5.8 now
uses and stores integers in numeric conversions and in arithmetic
operations.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-2.2" /><div class="sect2">
<h3 class="sect2">4.2.2. String Interpolation</h3>

<p><a name="INDEX-227" />Strings are
sequences of characters. String literals are usually delimited by
either single (<tt class="literal">'</tt>) or double (<tt class="literal">"</tt>)
quotes. Double-quoted string literals are subject to backslash and
variable interpolation, and single-quoted strings are not (except for
<tt class="literal">\'</tt> and <tt class="literal">\\</tt>, used to put single
quotes and backslashes into single-quoted strings). You can embed
newlines directly in your strings.
</p>

<p><a href="ch04_02.htm">Table 4-1</a> lists all the backslashed or escape
characters that can be used in double-quoted strings.
</p>

<a name="perlnut2-CHP-4-TABLE-1" /><h4 class="objtitle">Table 4-1. Double-quoted string representations </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Code</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">\n</tt></p>
</td>
<td>
<p>Newline</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\r</tt></p>
</td>
<td>
<p>Carriage return</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\t</tt></p>
</td>
<td>
<p>Horizontal tab</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\f</tt></p>
</td>
<td>
<p>Form feed</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\b</tt></p>
</td>
<td>
<p>Backspace</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\a</tt></p>
</td>
<td>
<p>Alert (bell)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\e</tt></p>
</td>
<td>
<p>ESC character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\033</tt></p>
</td>
<td>
<p>ESC in octal</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\x7f</tt></p>
</td>
<td>
<p>DEL in hexadecimal</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\cC</tt></p>
</td>
<td>
<p>Ctrl-C</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\\</tt></p>
</td>
<td>
<p>Backslash</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\"</tt></p>
</td>
<td>
<p>Double quote</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\u</tt></p>
</td>
<td>
<p>Force next character to uppercase</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\l</tt></p>
</td>
<td>
<p>Force next character to lowercase</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\U</tt></p>
</td>
<td>
<p>Force all following characters to uppercase</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\L</tt></p>
</td>
<td>
<p>Force all following characters to lowercase</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\Q</tt></p>
</td>
<td>
<p>Backslash all following non-alphanumeric characters</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\E</tt></p>
</td>
<td>
<p>End <tt class="literal">\U</tt>, <tt class="literal">\L</tt>, or
<tt class="literal">\Q</tt>
</p>
</td>
</tr>

</table><p>

<p><a name="INDEX-228" /><a name="INDEX-229" /><a name="INDEX-230" /><a href="ch04_02.htm">Table 4-2</a>
lists alternative quoting schemes that can be used in Perl. These are
useful in diminishing the number of commas and quotes you may have to
type, and they allow you not to worry about escaping characters such
as backslashes when there are many instances in your data. The
generic forms allow you to use any non-alphanumeric, non-whitespace
characters as delimiters in place of the slash
(<tt class="literal">/</tt>). If the delimiters are single quotes, no
variable interpolation is done on the pattern. Parentheses, brackets,
braces, and angle brackets can be used as delimiters in their
standard opening and closing pairs.
</p>

<a name="perlnut2-CHP-4-TABLE-2" /><h4 class="objtitle">Table 4-2. Quoting syntax in Perl </h4><table border="1" cellpadding="3">





<tr>
<th>
<p>Customary</p>
</th>
<th>
<p>Generic</p>
</th>
<th>
<p>Meaning</p>
</th>
<th>
<p>Interpolation</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">''</tt></p>
</td>
<td>
<p><tt class="literal">q//</tt></p>
</td>
<td>
<p>Literal</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">""</tt></p>
</td>
<td>
<p><tt class="literal">qq//</tt></p>
</td>
<td>
<p>Literal</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">''</tt></p>
</td>
<td>
<p><tt class="literal">qx//</tt></p>
</td>
<td>
<p>Command</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">( )</tt></p>
</td>
<td>
<p><tt class="literal">qw//</tt></p>
</td>
<td>
<p>Word list</p>
</td>
<td>
<p>No</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">( )</tt></p>
</td>
<td>
<p><tt class="literal">qr//</tt></p>
</td>
<td>
<p>Pattern</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">//</tt></p>
</td>
<td>
<p><tt class="literal">m//</tt></p>
</td>
<td>
<p>Pattern match</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s///</tt></p>
</td>
<td>
<p><tt class="literal">s///</tt></p>
</td>
<td>
<p>Substitution</p>
</td>
<td>
<p>Yes</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">y///</tt></p>
</td>
<td>
<p><tt class="literal">tr///</tt></p>
</td>
<td>
<p>Translation</p>
</td>
<td>
<p>No</p>
</td>
</tr>

</table><p>

</div>
<a name="perlnut2-CHP-4-SECT-2.3" /><div class="sect2">
<h3 class="sect2">4.2.3. Here Documents</h3>

<p><a name="INDEX-231" /><a name="INDEX-232" />A line-oriented form of quoting is based on
the Unix shell "here-document"
syntax. Following a <tt class="literal">&lt;&lt;</tt>, you specify a string
to terminate the quoted material, and all lines following the current
line down to the terminating string are the value of the item. This
is of particular importance if you're trying to
print something like HTML that would be cleaner to print as a chunk
instead of as individual lines. For example:
</p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w

my $Price = 'right';
    
print &lt;&lt;"EOF";
The price is $Price.
EOF</pre></blockquote>

<p>The terminating string does not have to be quoted. For example, the
previous example could have been written as:
</p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w

my $Price = 'right';
    
print &lt;&lt;EOF;
The price is $Price.
EOF</pre></blockquote>

<p>You can assign here documents to a string: </p>

<blockquote><pre class="code">my $assign_this_heredoc =&lt;&lt; "EOS";
This string is assigned to $whatever.
EOS</pre></blockquote>

<p>You can use a here document to execute commands: </p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w

print &lt;&lt;`CMD`;
ls -l
CMD</pre></blockquote>

<p>You can stack here documents: </p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w

print &lt;&lt;"joe", &lt;&lt;"momma"; # You can stack them
I said foo.
joe
I said bar.
momma</pre></blockquote>

<p>One caveat about here documents: you may have noticed in each of
these examples that the quoted text is always left-justified.
That's because any whitespace used for indentation
will be included in the string. For example:
</p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w

print &lt;&lt;"    INDENTED";
    Same old, same old.
    INDENTED</pre></blockquote>

<p>Although you can use a trick of including whitespace in the
terminating tag to keep it indented (as we did here), the string
itself will have the whitespace embedded&#x2014;in this case, it will
be <tt class="literal">Same old, same old.</tt>.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-2.4" /><div class="sect2">
<h3 class="sect2">4.2.4. Lists</h3>

<p><a name="INDEX-233" /><a name="INDEX-234" />A list is an ordered group of scalar
values. A literal list can be composed as a comma-separated list of
values contained in parentheses, for example:
</p>

<blockquote><pre class="code">(1,2,3)                  # Array of three values 1, 2, and 3
("one","two","three")    # Array of three values "one", "two", and "three"</pre></blockquote>

<p>The generic form of list creation uses the quoting operator
<tt class="literal">qw//</tt> to contain a list of values separated by
whitespace:
</p>

<blockquote><pre class="code">qw/snap crackle pop/</pre></blockquote>

<p>With the quoting operators, you're not limited to
<tt class="literal">//</tt> when you use one of the operators. You can use
just about any character you want. The following is exactly the same
as the example above:
</p>

<blockquote><pre class="code">qw!snap crackle pop!</pre></blockquote>

<p>It's important that you remember not to use any
delimiters except whitespace with <tt class="literal">qw//</tt>. If you do,
these delimiters will be handled as list members:
</p>

<blockquote><pre class="code">@foods = qw/fish, beef, lettuce, cat, apple/; # EL WRONG-O!
foreach (@foods) {
    print $_; # Prints fish and then a literal comma, etc.
}</pre></blockquote>

</div>
<a name="perlnut2-CHP-4-SECT-2.5" /><div class="sect2">
<h3 class="sect2">4.2.5. Variables</h3>

<p><a name="INDEX-235" />A
variable always begins with the character that identifies its type:
<tt class="literal">$</tt>, <tt class="literal">@</tt>, or <tt class="literal">%</tt>.
Most of the variable names you create can begin with a letter or
underscore, followed by any combination of letters, digits, or
underscores, up to 255 characters in length. Upper- and lowercase
letters are distinct. Variable names that begin with a digit can
contain only digits, and variable names that begin with a character
other than an alphanumeric or underscore can contain only that
character. The latter forms are usually predefined variables in Perl,
so it is best to name your variables beginning with a letter or
underscore.
</p>

<p><a name="INDEX-236" />Variables have
the <tt class="literal">undef</tt> value before they are first assigned or
when they become "empty." For
scalar variables, <tt class="literal">undef</tt> evaluates to
<tt class="literal">0</tt> when used as a number, and a zero-length, empty
string ("") when used as a string.
</p>

<p><a name="INDEX-237" /><a name="INDEX-238" />Simple variable assignment uses the
assignment operator (<tt class="literal">=</tt>) with the appropriate data.
For example:
</p>

<blockquote><pre class="code">$age = 26;                # Assigns 26 to $age
@date = (8, 24, 70);      # Assigns the three-element list to @date
%fruit = ('apples', 3, 'oranges', 6); 
 # Assigns the list elements to %fruit in key/value pairs</pre></blockquote>

<p><a name="INDEX-239" /><a name="INDEX-240" />Scalar variables are always named
with an initial <tt class="literal">$</tt>, even when referring to a scalar
value that is part of an array or hash.
</p>

<p><a name="INDEX-241" /><a name="INDEX-242" />Every
variable type has its own namespace. You can, without fear of
conflict, use the same name for a scalar variable, an array, or a
hash (or, for that matter, a filehandle, a subroutine name, or a
label). This means that <tt class="literal">$foo</tt> and
<tt class="literal">@foo</tt> are two different variables. It also means
that <tt class="literal">$foo[1]</tt> is an element of
<tt class="literal">@foo</tt>, not a part of <tt class="literal">$foo</tt>.
</p>

<a name="perlnut2-CHP-4-SECT-2.5.1" /><div class="sect3">
<h3 class="sect3">4.2.5.1. Arrays</h3>

<p><a name="INDEX-243" /><a name="INDEX-244" /><a name="INDEX-245" /><a name="INDEX-246" />An
array is a variable that stores an ordered list of scalar values.
Arrays are preceded by an "at" sign
(<tt class="literal">@</tt>).
</p>

<blockquote><pre class="code">@numbers = (1,2,3);        # Set the array @numbers to (1,2,3)</pre></blockquote>

<p>To refer to a single element of an array, use the dollar sign
(<tt class="literal">$</tt>) with the variable name (it's
a scalar), followed by the index of the element in square brackets
(the <em class="emphasis">subscript operator</em>). Array elements are
numbered starting at 0. Negative indexes count backwards from the
last element in the list (i.e., -1 refers to the last element of the
list). For example, in this list:
</p>

<blockquote><pre class="code">@date = (8, 24, 70);</pre></blockquote>

<p><tt class="literal">$date[2]</tt> is the value of the third element, 70.</p>

</div>

<a name="perlnut2-CHP-4-SECT-2.5.2" /><div class="sect3">
<h3 class="sect3">4.2.5.2. Hashes</h3>

<p><a name="INDEX-247" /><a name="INDEX-248" /><a name="INDEX-249" /><a name="INDEX-250" /><a name="INDEX-251" />A hash is a set of key/value
pairs. Hashes are preceded by a percent sign (<tt class="literal">%</tt>).
To refer to a single element of a hash, you use the hash variable
name followed by the "key"
associated with the value in braces. For example, the hash:
</p>

<blockquote><pre class="code">%fruit = ('apples', 3, 'oranges', 6);</pre></blockquote>

<p>has two values (in key/value pairs). If you want to get the value
associated with the key <tt class="literal">apples</tt>, you use
<tt class="literal">$fruit{'apples'}</tt>.
</p>

<p><a name="INDEX-252" /><a name="INDEX-253" />It is often
more readable to use the <tt class="literal">=&gt;</tt> operator in
defining key/value pairs. The <tt class="literal">=&gt;</tt> operator is
similar to a comma, but it's more visually
distinctive and quotes any bare identifiers to the left of it:
</p>

<blockquote><pre class="code">%fruit = (
    apples  =&gt; 3,
    oranges =&gt; 6
);</pre></blockquote>

</div>
</div>
<a name="perlnut2-CHP-4-SECT-2.6" /><div class="sect2">
<h3 class="sect2">4.2.6. Scalar and List Contexts</h3>

<p><a name="INDEX-254" /><a name="INDEX-255" /><a name="INDEX-256" /><a name="INDEX-257" />Every
operation that you invoke in a Perl script is evaluated in a specific
context, and how that operation behaves may depend on the context it
is being called in. There are two major contexts:
<em class="emphasis">scalar</em> and <em class="emphasis">list</em>. All
operators know which context they are in, and some return lists in
contexts wanting a list and scalars in contexts wanting a scalar. For
example, the <tt class="literal">localtime</tt> function returns a
nine-element list in list context:
</p>

<blockquote><pre class="code">($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime( );</pre></blockquote>

<p>But in a scalar context, <tt class="literal">localtime</tt> returns the
number of seconds since January 1, 1970:
</p>

<blockquote><pre class="code">$now = localtime( );</pre></blockquote>

<p>Statements that look confusing are easy to evaluate by identifying
the proper context. For example, assigning what is commonly a list
literal to a scalar variable:
</p>

<blockquote><pre class="code">$a = (2, 4, 6, 8);</pre></blockquote>

<p>gives <tt class="literal">$a</tt> the value 8. The context forces the right
side to evaluate to a scalar, and the action of the comma operator in
the expression (in the scalar context) returns the value farthest to
the right.
</p>

<p>Another type of statement that might be confusing is the evaluation
of an array or hash variable as a scalar. For example:
</p>

<blockquote><pre class="code">$b = @c;</pre></blockquote>

<p>When an array variable is evaluated as a scalar, the number of
elements in the array is returned. This type of evaluation is useful
for finding the number of elements in an array. The special
<tt class="literal">$#</tt><em class="replaceable"><tt>array</tt></em> form of an
array value returns the index of the last member of the list (one
less than the number of elements).
</p>

<p>If necessary, you can force a scalar context in the middle of a list
<a name="INDEX-258" />by
using the <tt class="literal">scalar</tt> function.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-2.7" /><div class="sect2">
<h3 class="sect2">4.2.7. Declarations and Scope</h3>

<p><a name="INDEX-259" /><a name="INDEX-260" /><a name="INDEX-261" />In Perl, only subroutines and
formats require explicit declaration. Variables (and similar
constructs) are automatically created when they are first assigned.
</p>

<p>Variable declaration comes into play when you need to limit the scope
of a variable's use. You can do this in two ways:
</p>

<dl>
<dt><i><em class="emphasis">Dynamic scoping</em> </i></dt>
<dd>
<a name="INDEX-262" />Creates
temporary objects within a scope. Dynamically scoped constructs are
visible globally, but take action only within their defined scopes.
Dynamic scoping applies to variables declared with
<tt class="literal">local</tt>.
</p>
</dd>


<dt><i><em class="emphasis">Lexical scoping</em> </i></dt>
<dd>
<a name="INDEX-263" /><a name="INDEX-264" />Creates private constructs that are
visible only within their scopes. The most frequently seen form of
lexically scoped declaration is the declaration of
<tt class="literal">my</tt> variables.
</p>
</dd>

</dl>

<p><a name="INDEX-265" /><a name="INDEX-266" />Therefore, we can say that a
<tt class="literal">local</tt> variable is <em class="emphasis">dynamically
scoped</em>, whereas a <tt class="literal">my</tt> variable is
<em class="emphasis">lexically scoped</em>. Dynamically scoped variables
are visible to functions called from within the block in which they
are declared. Lexically scoped variables, on the other hand, are
totally hidden from the outside world, including any called
subroutines, unless they are declared within the same scope. See <a href="ch04_07.htm">Section 4.7, "Subroutines"</a> later in this
chapter for further discussion.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4. The Perl Language</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.3. Statements</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>