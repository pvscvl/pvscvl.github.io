<html><head><title>Command-Line Options (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.2. Command-Line Options</h2>

<p><a name="INDEX-154" /><a name="INDEX-155" /><a name="INDEX-156" /><a name="INDEX-157" />Perl expects any command-line options,
also known as <em class="emphasis">switches</em> or
<em class="emphasis">flags</em><a name="INDEX-158" />,
to come first on the command line. The next item is usually the name
of the script, followed by any additional arguments (often filenames)
to be passed into the script. Some of these additional arguments may
be switches, but if so, they must be processed by the script, since
Perl gives up parsing switches as soon as it sees either a non-switch
item or the special <tt class="literal">--</tt> switch that terminates
switch processing.
</p>

<p>A single-character switch with no argument may be combined (bundled)
with the switch that follows it, if any. For example:
</p>

<blockquote><pre class="code">#!/usr/bin/perl -spi.bak</pre></blockquote>

<p>is the same as:</p>

<blockquote><pre class="code">#!/usr/bin/perl -s -p -i.bak</pre></blockquote>

<p>Perl recognizes the <a name="INDEX-159" />switches
listed in <a href="ch03_02.htm">Table 3-1</a>.
</p>

<a name="perlnut2-CHP-3-TABLE-1" /><h4 class="objtitle">Table 3-1. Perl switches </h4><table border="1" cellpadding="3">







<tr>
<th>
<p>Switch</p>
</th>
<th>
<p>Function</p>
</th>
</tr>


<tr>
<td>
<p> <em class="emphasis">--</em> </p>
</td>
<td>
<p>Terminates switch processing, even if the next argument starts with a
minus. It has no other effect.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-0</em>[<em class="emphasis">octnum</em>]</p>
</td>
<td>
<p>Specifies the record separator (<tt class="literal">$/</tt>) as an octal
number. If <em class="emphasis">octnum</em> is not present, the null
character is the separator. Other switches may precede or follow the
octal number.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-a</em></p>
</td>
<td>
<p>Turns on autosplit mode when used with <em class="emphasis">-n</em> or
<em class="emphasis">-p</em>. An implicit <tt class="literal">split</tt> of the
<tt class="literal">@F</tt> array is inserted as the first command inside
the implicit <tt class="literal">while</tt> loop produced by
<em class="emphasis">-n</em> or <em class="emphasis">-p</em>. The default field
delimiter is whitespace; a different field delimiter may be specified
using <em class="emphasis">-F</em>.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-c</em></p>
</td>
<td>
<p>Causes Perl to check the syntax of the script and exit without
executing it. More or less equivalent to having
<tt class="literal">exit(0)</tt> as the first statement in your program.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-d</em></p>
</td>
<td>
<p>Runs the script under the Perl debugger. See <a href="ch06_01.htm">Chapter 6, "Debugging"</a>. 
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-d:foo</em></p>
</td>
<td>
<p>Runs the script under the control of a debugging or tracing module
installed in the Perl library as Devel::<em class="emphasis">foo</em>. For
example, <em class="emphasis">-d:DProf</em> executes the script using the
Devel::DProf profiler. See also the section on DProf in <a href="ch06_01.htm">Chapter 6, "Debugging"</a>. 
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-Dnumber</em></p>
&nbsp;
<p><em class="emphasis">-Dlist</em></p>
</td>
<td>
<p>Sets debugging flags. (This works only if debugging was compiled into
the version of Perl you are running.) You may specify either a number
that is the sum of the bits you want, or a list of letters. To watch
how Perl executes your script, for instance, use
<em class="emphasis">-D14</em> or <em class="emphasis">-Dslt</em>. Another
useful value is <em class="emphasis">-D1024</em>
(<em class="emphasis">-Dx</em>), which lists your compiled syntax tree.
And <em class="emphasis">-D512</em> (<em class="emphasis">-Dr</em>) displays
compiled regular expressions. The numeric value of the flags is
available internally as the special variable <tt class="literal">$^D</tt>.
Here are the assigned bit values:
</p>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p><b class="emphasis-bold">Bit</b></p>
</td>
<td>
<p><b class="emphasis-bold">Letter</b></p>
</td>
<td>
<p><b class="emphasis-bold">Meaning</b></p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>1</p>
</td>
<td>
<p><tt class="literal">p</tt></p>
</td>
<td>
<p>Tokenizing and parsing</p>
</td>
<td>
&nbsp;
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>2</p>
</td>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>Stack snapshots</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>4</p>
</td>
<td>
<p><tt class="literal">l</tt></p>
</td>
<td>
<p>Label stack processing</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>8</p>
</td>
<td>
<p><tt class="literal">t</tt></p>
</td>
<td>
<p>Trace execution</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>16</p>
</td>
<td>
<p><tt class="literal">o</tt></p>
</td>
<td>
<p>Object method lookup</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>32</p>
</td>
<td>
<p><tt class="literal">c</tt></p>
</td>
<td>
<p>String/numeric conversions</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>64</p>
</td>
<td>
<p><tt class="literal">P</tt></p>
</td>
<td>
<p>Print preprocessor command for <em class="emphasis">-P</em></p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>128</p>
</td>
<td>
<p><tt class="literal">m</tt></p>
</td>
<td>
<p>Memory allocation</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>256</p>
</td>
<td>
<p><tt class="literal">f</tt></p>
</td>
<td>
<p>Format processing</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>512</p>
</td>
<td>
<p><tt class="literal">r</tt></p>
</td>
<td>
<p>Regular expression processing</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>1,024</p>
</td>
<td>
<p><tt class="literal">x</tt></p>
</td>
<td>
<p>Syntax tree dump</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>2,048</p>
</td>
<td>
<p><tt class="literal">u</tt></p>
</td>
<td>
<p>Tainting checks</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>4,096</p>
</td>
<td>
<p><tt class="literal">L</tt></p>
</td>
<td>
<p>Memory leaks (not supported anymore)</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>8,192</p>
</td>
<td>
<p><tt class="literal">H</tt></p>
</td>
<td>
<p>Hash dump; usurps <em class="emphasis">values</em></p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>16,384</p>
</td>
<td>
<p><tt class="literal">X</tt></p>
</td>
<td>
<p>Scratchpad allocation</p>
</td>

</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>32,768</p>
</td>
<td>
<p><tt class="literal">D</tt></p>
</td>
<td>
<p>Cleaning up</p>
</td>

</tr>
<tr>
<td>
<p><em class="emphasis">-e commandline</em></p>
</td>
<td>
<p>May be used to enter one or more lines of script. If
<em class="emphasis">-e</em> is used, Perl does not look for the name of a
script in the argument list. Multiple <em class="emphasis">-e</em>
commands may be given to build up a multiline script. (Make sure to
use semicolons where you would in a normal program.)
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-Fpattern</em></p>
</td>
<td>
<p>Specifies the pattern to split on if <em class="emphasis">-a</em> is also
in effect. The pattern may be surrounded by <em class="emphasis">//</em>,
<tt class="literal">''</tt>, or <tt class="literal">""</tt>; otherwise it is put
in single quotes. As of Perl 5.8, the <em class="emphasis">-F</em> option
is recognized on the <tt class="literal">#!</tt> line.
</p>
</td>
</tr>
<tr>
<td>
<p> <em class="emphasis">-h</em></p>
</td>
<td>
<p>Prints a summary of Perl's command-line options.</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-i</em>[<em class="emphasis">extension</em>]</p>
</td>
<td>
<p>Specifies that files processed by the <tt class="literal">&lt;&gt;</tt>
construct are to be edited in-place. Perl does this by renaming the
input file, opening the output file by the original name, and
selecting that output file as the default for
<tt class="literal">print</tt> statements. The extension, if supplied, is
added to the name of the old file to make a backup copy. If no
extension is supplied, no backup is made.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-I</em>[<em class="emphasis">directory]</em></p>
</td>
<td>
<p>Directories specified by <em class="emphasis">-I</em> are prepended to
<tt class="literal">@INC</tt>, which holds the search path for modules. If
<em class="emphasis">-P</em> is also specified, to invoke the C
preprocessor, <em class="emphasis">-I</em> tells the preprocessor where to
search for include files. By default, it searches
<em class="emphasis">/usr/include</em> and
<em class="emphasis">/usr/lib/perl</em>.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-l</em>[<em class="emphasis">octnum</em>]</p>
</td>
<td>
<p>Enables automatic line-end processing. This switch has two effects.
First, when it's used with <em class="emphasis">-n</em>
or <em class="emphasis">-p</em>, it causes the line terminator to be
automatically <tt class="literal">chomp</tt> ed. Second, it sets
<tt class="literal">$\</tt> to the value of <em class="emphasis">octnum</em> so
any print statements will have a line terminator of ASCII value
<em class="emphasis">octnum</em> added back on. If
<em class="emphasis">octnum</em> is omitted, <tt class="literal">$\</tt> is set
to the current value of <tt class="literal">$/</tt>, which is typically a
newline. So, to trim lines to 80 columns, say this:
</p>
&nbsp;
<blockquote><pre class="code">perl -lpe 'substr($_, 80) = ""'</pre></blockquote>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-m</em>[<em class="emphasis">-</em>]<em class="emphasis">module</em>
</p>
&nbsp;
<p><em class="emphasis">-M</em>[<em class="emphasis">-</em>]<em class="emphasis">module</em>
</p>
&nbsp;
<p><em class="emphasis">-M</em>[<em class="emphasis">-</em>]'<em class="emphasis">module
...</em>'
</p>
&nbsp;
<p><em class="emphasis">-</em>[<em class="replaceable"><tt>mM</em>][<em class="emphasis">-</em>]<em class="emphasis">modulearg</em>[<em class="emphasis">,arg</em>]<em class="emphasis">...</tt></em>
</p>
&nbsp;
<p><em class="emphasis">-mmodule</em></p>
</td>
<td>
<p>Executes <tt class="literal">use</tt> <em class="emphasis">module</em> before
executing your script.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-Mmodule</em></p>
</td>
<td>
<p>Executes <tt class="literal">use</tt> <em class="emphasis">module</em> before
executing your script. The command is formed by interpolation, so you
can use quotes to add extra code after the module name&#x2014;for
example, <em class="emphasis">-M'module qw(foo
bar)</em>'. If the first character after the
<em class="emphasis">-M</em> or <em class="emphasis">-m</em> is a minus
(<em class="emphasis">-</em>), then the <tt class="literal">use</tt> is replaced
with <tt class="literal">no</tt>.
</p>
&nbsp;
<p>You can also say <em class="emphasis">-m module=foo,bar</em> or
<em class="emphasis">-Mmodule= foo,bar</em> as a shortcut for
<em class="emphasis">-M'module qw(foo
bar)</em>'. This avoids the need to use quotes
when importing symbols. The actual code generated by
<em class="emphasis">-Mmodule=foo,bar</em> is:
</p>
&nbsp;
<blockquote><pre class="code">use module split(/,/, q{foo,bar})</pre></blockquote>
&nbsp;
<p>The <em class="emphasis">=</em> form removes the distinction between
<em class="emphasis">-m</em> and <em class="emphasis">-M</em>.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-n</em></p>
</td>
<td>
<p>Causes Perl to assume the following loop around your script, which
makes it iterate over filename arguments:
</p>
&nbsp;
<blockquote><pre class="code">LINE:
while (&lt;&gt;) {
   ...      # Your script goes here</pre></blockquote>
&nbsp;
<p>By default, the lines are not printed. (See <em class="emphasis">-p</em>
to have lines printed.) BEGIN and END blocks may be used to capture
control before or after the implicit loop.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-p</em></p>
</td>
<td>
<p>Causes Perl to assume the following loop around your script, which
makes it iterate over filename arguments:
</p>
&nbsp;
<blockquote><pre class="code">LINE:
while (&lt;&gt;) {
    ...     # Your script goes here
} continue {
    print;</pre></blockquote>
&nbsp;
<p>The lines are printed automatically. To suppress printing, use the
<em class="emphasis">-n</em> switch. If both are specified, the
<em class="emphasis">-p</em> switch overrides <em class="emphasis">-n</em>.
BEGIN and END blocks may be used to capture control before or after
the implicit loop.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-P</em></p>
</td>
<td>
<p>Causes your script to run through the C preprocessor before
compilation by Perl. (Since both comments and
<em class="emphasis">cpp</em> directives begin with the
<tt class="literal">#</tt> character, you should avoid starting comments
with any words recognized by the C preprocessor, such as
<tt class="literal">if</tt>, <tt class="literal">else</tt>, or
<tt class="literal">define</tt>.)
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-s</em></p>
</td>
<td>
<p>Enables some rudimentary parsing of switches on the command line
after the script name but before any filename arguments or the
 <em class="emphasis">--</em>  switch terminator. Any switch found
there is removed from <tt class="literal">@ARGV</tt>, and a variable of the
same name as the switch is set in the Perl script. No switch bundling
is allowed, since multicharacter switches are allowed. As of Perl
5.8, <em class="emphasis">-s</em> is recognized on the
<tt class="literal">#!</tt> line.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-S</em></p>
</td>
<td>
<p>Makes Perl use the PATH environment variable to search for the script
(unless the name of the script starts with a slash). Typically, this
is used to emulate <tt class="literal">#!</tt> startup on machines that
don't support <tt class="literal">#!</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-t</em></p>
</td>
<td>
<p>Forces "taint" checks to be turned
on, but warning will be issued instead of fatal errors. Warnings can
be controlled with <tt class="literal">no warnings qw (taint)</tt>.
Designed for use in development only; <em class="emphasis">-T</em> is
preferred for production code. New in 5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-T</em></p>
</td>
<td>
<p>Forces "taint" checks to be turned
on. Ordinarily, these checks are done only when running setuid or
setgid. It's a good idea to turn them on explicitly
for programs run on another user's behalf, such as
CGI programs.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-u</em></p>
</td>
<td>
<p>Causes Perl to dump core after compiling your script. You can take
this core dump and turn it into an executable file by using the
<em class="emphasis">undump</em> program (not supplied). This speeds
startup at the expense of some disk space (which you can minimize by
stripping the executable). If you want to execute a portion of your
script before dumping, use Perl's
<tt class="literal">dump</tt> operator instead. Note: availability of
<em class="emphasis">undump</em> is platform-specific; it may not be
available for a specific port of Perl.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-U</em></p>
</td>
<td>
<p>Allows Perl to do unsafe operations. Currently, the only
"unsafe"operations are the
unlinking of directories while running as superuser and running
setuid programs with fatal taint checks turned into warnings.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-v</em></p>
</td>
<td>
<p>Prints the version and patch level of your Perl executable.</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-V</em></p>
</td>
<td>
<p>Prints a summary of the major Perl configuration values and the
current value of <tt class="literal">@INC</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-V:name</em></p>
</td>
<td>
<p>Prints the value of the named configuration variable to STDOUT.</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-w</em></p>
</td>
<td>
<p>Prints warnings about identifiers that are mentioned only once and
scalar variables that are used before being set. Also warns about
redefined subroutines and references to undefined filehandles or to
filehandles opened as read-only that you are attempting to write on.
Warns you if you use a non-number as though it was a number, if you
use an array as though it was a scalar, if your subroutines recurse
more than 100 levels deep, etc.
</p>
</td>
</tr>
<tr>
<td>
<p><em class="emphasis">-x</em>[<em class="emphasis">directory</em>]</p>
</td>
<td>
<p>Tells Perl to extract a script that is embedded in a message by
looking for the first line that starts with <tt class="literal">#!</tt> and
contains the string "perl". Any
meaningful switches on that line after the word
"perl" are applied. If a directory
name is specified, Perl switches to that directory before running the
script. The script must be terminated with <tt class="literal">_ _END_
_</tt> or <tt class="literal">_ _DATA_ _</tt> if there is trailing
text to be ignored. (The script can process any or all of the
trailing text via the DATA filehandle if desired.)<a name="INDEX-160" />
</p>
</td>
</tr>

</table><p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3. The Perl Executable</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.3. Environment Variables</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>
