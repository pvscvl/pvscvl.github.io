<html><head><title>The Mail Modules (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.2. The Mail Modules</h2>

<p><a name="INDEX-2063" /><a name="INDEX-2064" />The Mail modules operate at a higher
level than the Net modules, interacting with external mail packages
such as <em class="emphasis">mail</em>, <em class="emphasis">mailx</em>,
<em class="emphasis">sendmail</em>, or a POP3 server in the case of
Net::POP3. This section describes some of the MailTools modules,
Mail::Folder, and the other mail-related modules that were mentioned
at the beginning of this chapter.
</p>

<a name="perlnut2-CHP-16-SECT-2.1" /><div class="sect2">
<h3 class="sect2">16.2.1. Send Email with Mail::Mailer</h3>

<p><a name="INDEX-2065" /><a name="INDEX-2066" />The Mail::Mailer
module interacts with external mail programs. When you use
Mail::Mailer or create a new Mail::Mailer object, you can specify
which mail program you want your program to talk to:
</p>

<blockquote><pre class="code">use Mail::Mailer qw(mail);</pre></blockquote>

<p>Another way to specify the mailer is: </p>

<blockquote><pre class="code">use Mail::Mailer;
$type = 'sendmail';
$mailprog = Mail::Mailer-&gt;new($type);</pre></blockquote>

<p>in which <tt class="literal">$type</tt> is the mail program. Once
you've created a new object, use the
<tt class="literal">open</tt> function to send the message headers to the
mail program as a hash of key/value pairs, in which each key
represents a header type, and the value is the value of that header:
</p>

<blockquote><pre class="code"># Mail headers to use in the message
%headers = (
    'To' =&gt; 'you@mail.somename.com',
    'From' =&gt; 'me@mail.somename.com',
    'Subject' =&gt; 'working?'
);</pre></blockquote>

<p>This code represents headers in which the recipient of the mail
message is <em class="emphasis">you@mail.somename.com</em>, the mail was
sent from <em class="emphasis">me@mail.somename.com</em>, and the subject
of the mail message is <em class="emphasis">working?</em>.
</p>

<p>Once <tt class="literal">%headers</tt> has been defined, it is passed to
<tt class="literal">open</tt>:
</p>

<blockquote><pre class="code">$mailprog-&gt;open(\%headers);</pre></blockquote>

<p>You then send the body of the message to the mail program: </p>

<blockquote><pre class="code">print $mailprog "This is the message body.\n";</pre></blockquote>

<p>Close the program when the message is finished: </p>

<blockquote><pre class="code">$mailprog-&gt;close;</pre></blockquote>

<p>A practical example of using Mail::Mailer might be a command
line-driven application that works much like the Unix
<em class="emphasis">mail</em> program, either reading STDIN until
end-of-file or mailing a file specified on the command line.
</p>

<p><a name="INDEX-2067" />Mail::Mailer uses the environment
variable PERL_MAILERS to augment or modify the built-in mailer
selection. PERL_MAILERS is specified in the following format:
</p>

<blockquote><pre class="code">"type1:mailbinary1;mailbinary2;...:type2:mailbinaryX;...:..."</pre></blockquote>

<p>The possible types are listed for the <tt class="literal">new</tt> method
below.
</p>

<p>The following methods are defined in Mail::Mailer.</p>


<a name="INDEX-2068" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mailer</em> = new Mail::Mailer [<em class="replaceable">type</em>, <em class="replaceable">command</em>]
</pre><p><a name="INDEX-2068" />Constructor. Creates a new Mailer
object representing the message to be sent. If the optional arguments
are specified, the value of <em class="replaceable"><tt>command</em>depends on <em class="replaceable">type</tt></em>, which can be one of:
</p><dl>
<dt><b><tt class="literal">mail</tt></b></dt>
<dd>
Uses the Unix <em class="emphasis">mail</em> program.
<em class="replaceable"><tt>command</tt></em> is the path to
<em class="emphasis">mail</em>. The module searches for
<em class="emphasis">mailx</em>, <em class="emphasis">Mail</em>, and
<em class="emphasis">mail</em>, in that order.
</p>
</dd>


<dt><b><tt class="literal">sendmail</tt></b></dt>
<dd>
Uses the <em class="emphasis">sendmail</em> program.
<em class="replaceable"><tt>command</tt></em> is the path to
<em class="emphasis">sendmail</em>.
</p>
</dd>


<dt><b><tt class="literal">test</tt></b></dt>
<dd>
Used for debugging. Calls <em class="emphasis">/bin/echo</em> to display
the data, but doesn't actually send any mail.
<em class="replaceable"><tt>command</tt></em> is ignored, if specified.
</p>
</dd>

</dl><p>If no arguments are specified, the Mailer object searches for
executables in the above order and uses the first one found as the
default mailer.
</p></div>

<a name="INDEX-2069" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>close</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mailer</em>-&gt;close
</pre><p><a name="INDEX-2069" />Closes the mail program.
</p></div>

<a name="INDEX-2070" /><a name="INDEX-2071" /><a name="INDEX-2072" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>open</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mailer</em>-&gt;open(\%hashref)
</pre><p><a name="INDEX-2070" />Sends message headers to the
<em class="emphasis">mail</em> program. The headers are passed via a
reference to a hash, in which each key is the name of a header, and
the value is the contents of the header field. The value can be
either a scalar or a reference to an array of scalars.<a name="INDEX-2071" /><a name="INDEX-2072" />
</p></div>

</div>
<a name="perlnut2-CHP-16-SECT-2.2" /><div class="sect2">
<h3 class="sect2">16.2.2. Better Header Control with Mail::Send</h3>

<p><a name="INDEX-2073" /><a name="INDEX-2074" />Mail::Send is
built on top of Mail::Mailer, which means that you can also choose
the mail program that sends the mail. Mail::Send has implemented the
methods <tt class="literal">to</tt>, <tt class="literal">cc</tt>,
<tt class="literal">bcc</tt>, and <tt class="literal">subject</tt> to replace the
<tt class="literal">%headers</tt> hash used in Mail::Mailer.
</p>

<p><a name="INDEX-2075" />Mail::Send uses the
<tt class="literal">open</tt> method to open the mail program for output;
it is built on Mail::Mailer's <tt class="literal">new</tt>
method, so that:
</p>

<blockquote><pre class="code"># Start mailer and output headers
$fh = $msg-&gt;open('sendmail');</pre></blockquote>

<p>serves the same purpose as: </p>

<blockquote><pre class="code"># Use sendmail for mailing
$mailer = Mail::Mailer-&gt;new('sendmail)';</pre></blockquote>

<p>This code tells Mail::Send to use <em class="emphasis">sendmail</em> as
the mail program.
</p>

<p><a name="INDEX-2076" /><a name="INDEX-2077" />Mail::Send also provides the
<tt class="literal">set</tt> and <tt class="literal">add</tt> functions, which
assign a value to a header tag and append a value to a header tag,
respectively. The <tt class="literal">set</tt> function takes two
arguments&#x2014;a header tag and a value&#x2014;and is used like this:
</p>

<blockquote><pre class="code">$msg-&gt;set($scalar, @array);</pre></blockquote>

<p>Therefore, to address a message to
<em class="emphasis">you@mail.somename.com</em>:
</p>

<blockquote><pre class="code">$msg-&gt;set('To', 'you@mail.somename.com');</pre></blockquote>

<p>The above sets the <tt class="literal">To</tt> header to
<em class="emphasis">you@mail.somename.com</em>; however, the following
sets the <tt class="literal">To</tt> header to
<em class="emphasis">postmaster@mail.somename.com</em> and
<em class="emphasis">you@mail.somename.com</em> because they represent an
array of values:
</p>

<blockquote><pre class="code">$msg-&gt;set('To', ('you@mail.somename.com', 'postmaster@mail.somename.com'));</pre></blockquote>

<p>You might think that you could use the <tt class="literal">set</tt>
function as follows to add multiple values to a header value:
</p>

<blockquote><pre class="code">$msg-&gt;set('To', 'you@mail.somename.com');
$msg-&gt;set('To', 'someone@their.mailaddress.com');</pre></blockquote>

<p>However, <tt class="literal">set</tt> doesn't append
information from one call to another, and the above example would
send the mail only to
<em class="emphasis">someone@their.mailaddress.com</em>. To append a name
to the <tt class="literal">To</tt> header, use the <tt class="literal">add</tt>
method. For example:
</p>

<blockquote><pre class="code">$msg-&gt;add('To', 'you@mail.somename.com');
$msg-&gt;add('To', 'someone@their.mailaddress.com');</pre></blockquote>

<p>The following methods are defined for Mail::Send.</p>


<a name="INDEX-2078" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">msg</em> = new Mail::Send [<em class="replaceable">header</em>=&gt;'<em class="replaceable">value</em>'[, ...]]
</pre><p><a name="INDEX-2078" />Constructor. Creates a new Mail::Send
object that is the mail message you want to send. You can include
values for headers when you create the object, or include them later
by calling the appropriate methods.
</p></div>

<a name="INDEX-2079" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>add</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">msg</em>-&gt;add(<em class="replaceable">header</em>, <em class="replaceable">values</em>)
</pre><p><a name="INDEX-2079" />Adds a header to the message.
<em class="replaceable"><tt>header</tt></em> is the header to be added, and
<em class="replaceable"><tt>values</tt></em> is a list of values to be appended
to that header.
</p></div>

<a name="INDEX-2080" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>bcc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">msg</em>-&gt;bcc(<em class="replaceable">values</em>)
</pre><p><a name="INDEX-2080" />Adds a <tt class="literal">Bcc</tt>
header containing the mail addresses specified in the list of
<em class="replaceable"><tt>values</tt></em> to the message. If there already is
a <tt class="literal">Bcc</tt>, the new values replace any old values.
</p></div>

<a name="INDEX-2081" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>cancel</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
<em class="replaceable">$msg</em>-&gt;cancel
</pre><p><a name="INDEX-2081" />Not implemented yet, but will
cancel the message.
</p></div>

<a name="INDEX-2082" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>cc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
<em class="replaceable">$msg</em>-&gt;cc(<em class="replaceable">values</em>)
</pre><p><a name="INDEX-2082" />Adds a <tt class="literal">Cc</tt>
header containing the mail addresses in the list of
<em class="replaceable"><tt>values</tt></em> to the message. If there already is
a <tt class="literal">Cc</tt>, the new values replace any old values.
</p></div>

<a name="INDEX-2083" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>close</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">fh</em>-&gt;close
</pre><p><a name="INDEX-2083" />Closes the filehandle
<tt class="literal">$</tt><em class="replaceable"><tt>fh</tt></em> (which was returned
by <tt class="literal">open</tt>) and sends the message.
</p></div>

<a name="INDEX-2084" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delete</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">msg</em>-&gt;delete(<em class="replaceable">header</em>)
</pre><p><a name="INDEX-2084" />Deletes the header
<em class="replaceable"><tt>header</tt></em> from the message.
</p></div>

<a name="INDEX-2085" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>open</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">fh</em> = $<em class="replaceable">msg</em>-&gt;open
</pre><p><a name="INDEX-2085" />Opens a filehandle for the message
object. The filehandle is a Mail::Mailer object.
</p></div>

<a name="INDEX-2086" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>set</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">msg</em>-&gt;set(<em class="replaceable">header</em>, <em class="replaceable">values</em>)
</pre><p><a name="INDEX-2086" />Sets the header
<em class="replaceable"><tt>header</tt></em> to the contents of the array
<em class="replaceable"><tt>values</tt></em>.
</p></div>

<a name="INDEX-2087" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>subject</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">msg</em>-&gt;subject('<em class="replaceable">What this message is about</em>')
</pre><p><a name="INDEX-2087" />Sets the value of the
<tt class="literal">Subject</tt> field.
</p></div>

<a name="INDEX-2088" /><a name="INDEX-2089" /><a name="INDEX-2090" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>to</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">msg</em>-&gt;to(<em class="replaceable">values</em>)
</pre><p><a name="INDEX-2088" />Sets the <tt class="literal">To</tt> field to
the list of recipients in
<em class="replaceable"><tt>values</tt></em>.<a name="INDEX-2089" /><a name="INDEX-2090" />
</p></div>

</div>
<a name="perlnut2-CHP-16-SECT-2.3" /><div class="sect2">
<h3 class="sect2">16.2.3. Handle Folders with Mail::Folder</h3>

<p><a name="INDEX-2091" /><a name="INDEX-2092" /><a name="INDEX-2093" /><a name="INDEX-2094" />Once you've begun
downloading and reading your mail from a POP server, you might want
to save or categorize your messages into folders, which allow you to
add, delete, save, and move messages easily. You can do this with
Mail::Folder, which was written by Kevin Johnson as an
object-oriented, folder-independent interface to mail folders.
Mail::Folder supports a number of mailbox formats with the following
interfaces:
</p>

<dl>
<dt><i>Mail::Folder::Emaul</i></dt>
<dd>
A folder interface somewhat similar to MH.</p>
</dd>


<dt><i>Mail::Folder::Maildir</i></dt>
<dd>
An interface to <em class="emphasis">maildir</em> folders.</p>
</dd>


<dt><i>Mail::Folder::Mbox</i></dt>
<dd>
Standard Unix mailbox format.</p>
</dd>


<dt><i>Mail::Folder::NNTP</i></dt>
<dd>
The beginnings of an interface to NNTP. Not all the methods are
implemented yet.
</p>
</dd>

</dl>

<p>If you are interested in writing a folder interface, see the
documentation for the module. The documentation explains the concepts
and issues involved and describes some of the methods you may need to
override.
</p>

<p>The following methods are defined for Mail::Folder.</p>



<a name="INDEX-2095" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em> = new(<em class="replaceable">ftype</em>[, <em class="replaceable">foldername</em>][, <em class="replaceable">options</em>])
</pre><p><a name="INDEX-2095" />Creates a new Mail::Folder object of
the specified type. Arguments are:
</p><dl>
<dt><i><em class="replaceable"><tt>ftype</tt></em></i></dt>
<dd>
The type of folder. Possible values are <tt class="literal">mbox</tt>,
<tt class="literal">maildir</tt>, <tt class="literal">emaul</tt>, or
<tt class="literal">NNTP</tt>.
</p>
</dd>


<dt><i><em class="replaceable"><tt>foldername</tt></em></i></dt>
<dd>
The name of the folder. If present, the <tt class="literal">open</tt>
method is called with <em class="replaceable"><tt>foldername</tt></em> as the
argument.
</p>
</dd>


<dt><i><em class="replaceable"><tt>options</tt></em></i></dt>
<dd>
A hash in which the following options may be the keys:</p>

<dl>

<dt><b><tt class="literal">Content-Length</tt></b></dt>
<dd>
<tt class="literal">Content-length</tt> header is created or updated by
<tt class="literal">append_message</tt> and
<tt class="literal">update_message</tt>.
</p>
</dd>


<dt><b><tt class="literal">Create</tt></b></dt>
<dd>
If set, the folder is created if it doesn't already
exist.
</p>
</dd>


<dt><b><tt class="literal">DefaultFolderType</tt></b></dt>
<dd>
Autodetects folder type if <tt class="literal">create</tt> option is set
and <tt class="literal">AUTODETECT</tt> has been set.
</p>
</dd>


<dt><b><tt class="literal">DotLock</tt></b></dt>
<dd>
Uses <em class="filename">.lock</em>-style folder locking with the proper
folder interface (currently used only with the
<em class="filename">mbox</em> interface).
</p>
</dd>


<dt><b><tt class="literal">Flock</tt></b></dt>
<dd>
Uses <tt class="literal">flock</tt>-style folder locking with the proper
folder interface (currently used only with the
<em class="filename">mbox</em> interface).
</p>
</dd>


<dt><b><tt class="literal">NFSLock</tt></b></dt>
<dd>
Deals with NFS-style file locking with the proper folder interface
and the NFS server in question.
</p>
</dd>


<dt><b><tt class="literal">notMUA</tt></b></dt>
<dd>
If set, makes updates but doesn't save message
labels or the current message indicator. If not set (the default),
saves labels and the current message indicator as appropriate for the
folder interface.
</p>
</dd>


<dt><b><tt class="literal">Timeout</tt></b></dt>
<dd>
Overrides the default timeout value. Specified in seconds.
Particularly useful for folder interfaces that involve network
communications.
</p>
</dd>

</dl>
</dd>

</dl></div>

<a name="INDEX-2096" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>add_label</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;add_label(<em class="replaceable">msg_num</em>, <em class="replaceable">label</em>)
</pre><p><a name="INDEX-2096" />Associates the label
<em class="replaceable"><tt>label</tt></em> with the message
<em class="replaceable"><tt>msg_num</tt></em>. Returns <tt class="literal">1</tt> on
success or <tt class="literal">0</tt> if the label has a length of 0.
Possible values of <em class="replaceable"><tt>label</tt></em> are:
</p><dl>
<dt><b><tt class="literal">deleted</tt></b></dt>
<dd>
Used by <tt class="literal">delete_message</tt> and <tt class="literal">sync</tt>
to process message deletion.
</p>
</dd>


<dt><b><tt class="literal">edited</tt></b></dt>
<dd>
Added by <tt class="literal">update_message</tt> to indicate that the
message has been edited.
</p>
</dd>


<dt><b><tt class="literal">filed</tt>, <tt class="literal">forwarded</tt>, <tt class="literal">printed</tt>, <tt class="literal">replied</tt></b></dt>
<dd>
Not acted on.</p>
</dd>


<dt><b><tt class="literal">seen</tt></b></dt>
<dd>
Message has been viewed by the user. Set by
<tt class="literal">get_message</tt> for any message it has
<tt class="literal">retrieve</tt> d.
</p>
</dd>

</dl></div>

<a name="INDEX-2097" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>append_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;append_message(\$<em class="replaceable">mi_ref</em>)
</pre><p><a name="INDEX-2097" />Adds
message to a folder. Argument is a reference to a Mail::Internet
object.
</p></div>

<a name="INDEX-2098" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>clear_label</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;clear_label(<em class="replaceable">label</em>)
</pre><p><a name="INDEX-2098" />Deletes the association with
<em class="replaceable"><tt>label</tt></em> for all messages in the folder.
Returns the number of messages for which there was an association.
</p></div>

<a name="INDEX-2099" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>close</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;close
</pre><p><a name="INDEX-2099" />Does any necessary housekeeping and
closes the folder.
</p></div>

<a name="INDEX-2100" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>current_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;current_message([<em class="replaceable">msg_num</em>])
</pre><p><a name="INDEX-2100" />With
no argument, returns the message number of the current message in the
folder. With an argument, sets the current message number for the
folder to <em class="replaceable"><tt>msg_num</tt></em>.
</p></div>

<a name="INDEX-2101" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>debug</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;debug([<em class="replaceable">value</em>])
</pre><p><a name="INDEX-2101" />Sets the level of debugging information
for the object to <em class="replaceable"><tt>value</tt></em>. With no argument,
returns the current debugging level.
</p></div>

<a name="INDEX-2102" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>debug_print</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;debug_print(<em class="replaceable">text</em>)
</pre><p><a name="INDEX-2102" />Prints
<em class="replaceable"><tt>text</tt></em>, plus some additional information, to
STDERR.
</p></div>

<a name="INDEX-2103" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delete_label</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;delete_label(<em class="replaceable">msg_num</em>, <em class="replaceable">label</em>)
</pre><p><a name="INDEX-2103" />Deletes the association of
<em class="replaceable"><tt>label</tt></em> with
<em class="replaceable"><tt>msg_num</tt></em>. Returns <tt class="literal">1</tt> on
success and <tt class="literal">0</tt> if there was no association.
</p></div>

<a name="INDEX-2104" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delete_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;delete_message(<em class="replaceable">msgs</em>)
</pre><p><a name="INDEX-2104" />Takes
a list of messages, <em class="replaceable"><tt>msgs</tt></em>, to be marked for
deletion. The messages aren't actually deleted until
<tt class="literal">sync</tt> is called.
</p></div>

<a name="INDEX-2105" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>dup</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;dup(<em class="replaceable">msg_num</em>, \$<em class="replaceable">folder_ref</em>)
</pre><p><a name="INDEX-2105" />Copies the message specified by
<em class="replaceable"><tt>msg_num</tt></em> to the folder referenced by
<tt class="literal">\$</tt><em class="replaceable"><tt>folder_ref</tt></em>. Like
<tt class="literal">refile</tt>, but doesn't delete the
original message. Generates a fatal error if no folder is currently
open or if the folder doesn't contain message
<em class="replaceable"><tt>msg_num</tt></em>.
</p></div>

<a name="INDEX-2106" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>first_labeled_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;first_labeled_message(<em class="replaceable">label</em>)
</pre><p><a name="INDEX-2106" />Returns the message number of
the first message in the folder that has
<em class="replaceable"><tt>label</tt></em> associated with it, or
<tt class="literal">0</tt> if there are none.
</p></div>

<a name="INDEX-2107" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>first_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;first_message
</pre><p><a name="INDEX-2107" />Returns
the message number of the first message in the folder.
</p></div>

<a name="INDEX-2108" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>foldername</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;foldername
</pre><p><a name="INDEX-2108" />Returns the name of the folder
that the object has opened.
</p></div>

<a name="INDEX-2109" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_fields</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;get_fields(<em class="replaceable">msg_num</em>, <em class="replaceable">fields</em>)
</pre><p><a name="INDEX-2109" />Retrieves the fields specified
in the list <em class="replaceable"><tt>fields</tt></em> for message
<em class="replaceable"><tt>msg_num</tt></em>. If called in list context,
returns a list; in scalar context, returns a reference to a list of
the fields. Returns the fields in the same order as they were
specified.
</p></div>

<a name="INDEX-2110" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_header</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;get_header(<em class="replaceable">msg_num</em>)
</pre><p><a name="INDEX-2110" />Extracts a message header;
takes one argument: the message number. Returns a reference to a
Mail::Header object.
</p></div>

<a name="INDEX-2111" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;get_message(<em class="replaceable">msg_num</em>)
</pre><p><a name="INDEX-2111" />Takes a message number as
argument and returns a Mail::Internet object reference to that
message, or <tt class="literal">0</tt> on failure.
</p></div>

<a name="INDEX-2112" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_message_file</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;get_message_file(<em class="replaceable">msg_num</em>)
</pre><p><a name="INDEX-2112" />Like
<tt class="literal">get_message</tt>, but returns a filename instead of a
Mail::Internet object reference.
</p></div>

<a name="INDEX-2113" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_mime_header</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;get_mime_header(<em class="replaceable">msg_num</em>)
</pre><p><a name="INDEX-2113" />Works
much like <tt class="literal">get_header</tt>, but returns a reference to a
MIME::Head object instead. Takes one argument, the message number.
</p></div>

<a name="INDEX-2114" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_mime_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;get_mime_message (<em class="replaceable">msg_num</em>[, <em class="replaceable">parserobject</em>][, <em class="replaceable">options</em>])
</pre><p><a name="INDEX-2114" />Returns a MIME::Entity object
for the specified message. Calls <tt class="literal">get_message_file</tt>
to get a message to parse, creates a MIME::Parser object, and uses
that to create the MIME::Entity object. The arguments are:
</p><dl>
<dt><i><em class="replaceable"><tt>msg_num</tt></em></i></dt>
<dd>
The number of the message.</p>
</dd>


<dt><i><em class="replaceable"><tt>parserobject</tt></em></i></dt>
<dd>
If specified, used instead of internally creating a parser object.</p>
</dd>


<dt><i><em class="replaceable"><tt>options</tt></em></i></dt>
<dd>
Maps onto the equivalent MIME::Parser methods. Specified as key/value
pairs, with possible values of: <tt class="literal">output_dir</tt>,
<tt class="literal">output_prefix</tt>, <tt class="literal">output_to_core</tt>.
See the MIME::Parser documentation for details.
</p>
</dd>

</dl></div>

<a name="INDEX-2115" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_option</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;get_option(<em class="replaceable">option</em>)
</pre><p><a name="INDEX-2115" />Returns the setting for the
specified option, or <tt class="literal">undef</tt> if the option
doesn't exist.
</p></div>

<a name="INDEX-2116" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>inverse_select</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;inverse_select(\$<em class="replaceable">func_ref</em>)
</pre><p><a name="INDEX-2116" />Returns a list, in no specific
order, of message numbers that do not match a set of criteria. The
argument, <tt class="literal">\$</tt><em class="replaceable"><tt>func_ref</tt></em>,
is a reference to a function used to determine the criteria. The
function is passed a reference to a Mail::Internet object containing
only a header.
</p></div>

<a name="INDEX-2117" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>is_readonly</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;is_readonly
</pre><p><a name="INDEX-2117" />Returns <tt class="literal">1</tt> if
the folder has the <tt class="literal">readonly</tt> attribute set;
otherwise, returns <tt class="literal">0</tt>.
</p></div>

<a name="INDEX-2118" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>label_exists</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;label_exists(<em class="replaceable">msg_num</em>, <em class="replaceable">label</em>)
</pre><p><a name="INDEX-2118" />Returns <tt class="literal">1</tt> if
<em class="replaceable"><tt>label</tt></em> is associated with message
<em class="replaceable"><tt>msg_num</tt></em>; otherwise, returns
<tt class="literal">0</tt>. 
</p></div>

<a name="INDEX-2119" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>last_labeled_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;last_labeled_message(<em class="replaceable">label</em>)
</pre><p><a name="INDEX-2119" />Returns the message number of
the last message in the folder with the label
<em class="replaceable"><tt>label</tt></em> associated with it, or
<tt class="literal">0</tt> if there is no such message number.
</p></div>

<a name="INDEX-2120" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>last_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;last_message
</pre><p><a name="INDEX-2120" />Returns the message number of
the last message in the folder.
</p></div>

<a name="INDEX-2121" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>list_all_labels</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;list_all_labels
</pre><p><a name="INDEX-2121" />Returns a list, in no specific
order, of all labels associated with messages in the folder. If
called in scalar context, returns the number of labels associated
with the messages.
</p></div>

<a name="INDEX-2122" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>list_labels</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;list_labels(<em class="replaceable">msg_num</em>)
</pre><p><a name="INDEX-2122" />Returns a list, in no specific
order, of all labels associated with
<em class="replaceable"><tt>msg_num</tt></em>. If called in scalar context,
returns the number of labels associated with the message.
</p></div>

<a name="INDEX-2123" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>message_exists</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;message_exists(<em class="replaceable">msg_num</em>)
</pre><p><a name="INDEX-2123" />Returns <tt class="literal">1</tt> if
a message with the number <em class="replaceable"><tt>msg_num</tt></em> exists
in the folder; otherwise, returns <tt class="literal">0</tt>.
</p></div>

<a name="INDEX-2124" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>message_list</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;message_list
</pre><p><a name="INDEX-2124" />Returns a list of the message
numbers in the folder, in no specific order. The syntax is:
</p><blockquote><pre class="code">print $folder-&gt;message_list."\n"</pre></blockquote></div>

<a name="INDEX-2125" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>next_labeled_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;next_labeled_message(<em class="replaceable">msg_num</em>, <em class="replaceable">label</em>)
</pre><p><a name="INDEX-2125" />Returns the message number of
the next message in the folder relative to
<em class="replaceable"><tt>msg_number</tt></em> that has the label
<em class="replaceable"><tt>label</tt></em> associated with it, or
<tt class="literal">0</tt> if there is no such message.
</p></div>

<a name="INDEX-2126" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>next_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;next_message([<em class="replaceable">msg_num</em>])
</pre><p><a name="INDEX-2126" />Returns the number of the next
message in the folder relative to <em class="replaceable"><tt>msg_num</tt></em>if it is specified; otherwise, relative to the current message.
Returns <tt class="literal">0</tt> if at end of folder.
</p></div>

<a name="INDEX-2127" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>open</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;open(<em class="replaceable">foldername</em>)
</pre><p><a name="INDEX-2127" />If you didn't specify
a folder name in the constructor, you need to call the
<tt class="literal">open</tt> method, which takes the folder name as an
argument and opens the folder. Also sets <tt class="literal">readonly</tt>
if the folder is determined to be read-only.
</p></div>

<a name="INDEX-2128" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>pack</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;pack
</pre><p><a name="INDEX-2128" />For formats that allow message number
sequences to have gaps, renames the files in the folders to eliminate
any such gaps. May result in renumbering some messages.
</p></div>

<a name="INDEX-2129" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>prev_labeled_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;prev_labeled_message(<em class="replaceable">msg_num</em>, <em class="replaceable">label</em>)
</pre><p><a name="INDEX-2129" />Returns the message number of
the previous message in the folder relative to
<em class="replaceable"><tt>msg_num</tt></em> that has the label
<em class="replaceable"><tt>label</tt></em> associated with it, or
<tt class="literal">0</tt> if there is no such message.
</p></div>

<a name="INDEX-2130" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>prev_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;prev_message([<em class="replaceable">msg_num</em>])
</pre><p><a name="INDEX-2130" />Returns the number of the
previous message in the folder relative to
<em class="replaceable"><tt>msg_num</tt></em> if it is specified; otherwise,
relative to the current message. Returns <tt class="literal">0</tt> if at
the beginning of the folder.
</p></div>

<a name="INDEX-2131" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>qty</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;qty
</pre><p><a name="INDEX-2131" />Returns the number of messages
in the folder. The syntax is:
</p><blockquote><pre class="code">print "There are ".$folder-&gt;qty." messages in your 
folder\n";</pre></blockquote></div>

<a name="INDEX-2132" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>refile</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;refile(<em class="replaceable">msg_num</em>, \$<em class="replaceable">fldr_ref</em>)
</pre><p><a name="INDEX-2132" />Moves messages between folders.
Takes a message number and folder reference as arguments.
</p></div>

<a name="INDEX-2133" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>select</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;select(\$<em class="replaceable">func_ref</em>)
</pre><p><a name="INDEX-2133" />Returns a list of messages that meet a
set of criteria. The argument,
<tt class="literal">\$</tt><em class="replaceable"><tt>func_ref</tt></em>, is a
reference to a function used to determine the criteria. The function
is passed a reference to a Mail::Internet object containing only a
header. The list is returned in no specific order.
</p></div>

<a name="INDEX-2134" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>select_label</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;select_label(<em class="replaceable">label</em>)
</pre><p><a name="INDEX-2134" />Returns a list of messages with
the label <em class="replaceable"><tt>label</tt></em>. If called in scalar
context, returns the number of messages that have the label.
</p></div>

<a name="INDEX-2135" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>set_option</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;set_option(<em class="replaceable">option</em>, <em class="replaceable">value</em>)
</pre><p><a name="INDEX-2135" />Sets the specified option to
<em class="replaceable"><tt>value</tt></em>.
</p></div>

<a name="INDEX-2136" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>set_readonly</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;set_readonly
</pre><p><a name="INDEX-2136" />Sets the
<tt class="literal">readonly</tt> attribute for the folder. Once
<tt class="literal">readonly</tt> has been set, <tt class="literal">sync</tt>
won't perform any updates to the actual folder.
</p></div>

<a name="INDEX-2137" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sort</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;sort(\$<em class="replaceable">func_ref</em>)
</pre><p><a name="INDEX-2137" />Returns a sorted list of messages.
<tt class="literal">\$</tt><em class="replaceable"><tt>func_ref</tt></em> is a
reference to a function that is passed two Mail::Header message
references and returns an integer less than, equal to, or greater
than 0 to indicate the sort order.
</p></div>

<a name="INDEX-2138" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>sync</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;sync
</pre><p><a name="INDEX-2138" />Synchronizes the folder
with internal data structures and reads in any new messages since the
last <tt class="literal">open</tt> or <tt class="literal">sync</tt>. Does not
perform any updates if the <tt class="literal">readonly</tt> attribute has
been set.
</p></div>

<a name="INDEX-2139" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>undelete_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;undelete_message(<em class="replaceable">msgs</em>)
</pre><p><a name="INDEX-2139" />Unmarks a list of messages,
<em class="replaceable"><tt>msgs</tt></em>, that have been marked for deletion.
</p></div>

<a name="INDEX-2140" /><a name="INDEX-2141" /><a name="INDEX-2142" /><a name="INDEX-2143" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>update_message</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">folder</em>-&gt;update_message(<em class="replaceable">msg_num</em>, \$<em class="replaceable">mref</em>)
</pre><p><a name="INDEX-2140" />Replaces the message specified
by <em class="replaceable"><tt>msg_num</tt></em> with the contents of the
message given by
<tt class="literal">\$</tt><em class="replaceable"><tt>mref</tt></em>, which is a
reference to a Mail::Internet object.<a name="INDEX-2141" /><a name="INDEX-2142" /><a name="INDEX-2143" />
</p></div>

</div>
<a name="perlnut2-CHP-16-SECT-2.4" /><div class="sect2">
<h3 class="sect2">16.2.4. Handle Messages with Mail::Internet</h3>

<p><a name="INDEX-2144" /><a name="INDEX-2145" />Mail::Internet implements a number of
helpful functions for manipulating a mail message. These include
<tt class="literal">body</tt>, <tt class="literal">print_header</tt>, and
<tt class="literal">head</tt>. Mail::Internet is built on top of
Mail::Header, which parses the header of an email message, and it
inherits the Mail::Header constructor style that requires that a file
descriptor or reference to an array be used. For example:
</p>

<blockquote><pre class="code">@lines = &lt;STDIN&gt;;
$mi_obj = new Mail::Internet([@lines]);</pre></blockquote>

<p>reads a mail message from STDIN (using a reference to an array). The
following example reads a mail message from a filehandle, FILE:
</p>

<blockquote><pre class="code">open(FILE, "/home/nvp/Mail/nvp");
$mi_obj = new Mail::Internet(\*FILE);
close(FILE);</pre></blockquote>

<p>The <tt class="literal">print_header</tt> function outputs the header of a
message to a file descriptor; the default is STDOUT:
</p>

<blockquote><pre class="code">open(FILE, "/home/nvp/Mail/nvp");
$mi_obj = new Mail::Internet(\*FILE);
close(FILE);
$mi_obj-&gt;print_header(\*STDOUT);</pre></blockquote>

<p>The above example might output: </p>

<blockquote><pre class="code">From nvp Mon Jun  9 00:11:10 1997
Received: (from nvp@localhost) by mail.somename.com (8.8/8.8) id
    AAA03248 for nvp; Mon, 9 Jun 1997 00:11:09 -0500 (EST)
Date: Mon, 9 Jun 1997 00:11:09 -0500 (EST)
From: "Nathan V. Patwardhan" &lt;nvp&gt;
Message-Id: &lt;199706090511.AAA03248@mail.somename.com&gt;
To: nvp
Subject: pop test
X-Status:
X-Uid: 1
Status: RO</pre></blockquote>

<p>in which <tt class="literal">print_body</tt> also takes a file descriptor
as an argument, but outputs only the body of the message, whereas the
<tt class="literal">print</tt> function outputs an entire message.
</p>

</div>
<a name="perlnut2-CHP-16-SECT-2.5" /><div class="sect2">
<h3 class="sect2">16.2.5. Mail::Internet Reference</h3>


<a name="INDEX-2146" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em> = new Mail::Internet ([<em class="replaceable">arg</em>], [<em class="replaceable">options</em>])
</pre><p><a name="INDEX-2146" />Creates a new Mail::Internet object.
<em class="replaceable"><tt>arg</tt></em> is optional and may be either a file
descriptor (a reference to a glob) or a reference to an array. If
present, the new object is initialized with headers either from the
array or read from the file descriptor.
<em class="replaceable"><tt>options</tt></em> is a list of options in the form
of key/value pairs. Possible options are:
</p><dl>
<dt><b><tt class="literal">Header</tt></b></dt>
<dd>
Mail::Internet should not attempt to read a mail header from
<em class="replaceable"><tt>arg</tt></em>, if it was specified. Value is a
Mail::Header object.
</p>
</dd>


<dt><b><tt class="literal">Body</tt></b></dt>
<dd>
Mail::Internet should attempt to read the body from
<em class="replaceable"><tt>arg</tt></em>, if it was specified. Value is a
reference to an array that contains the lines of the message body.
</p>
</dd>


<dt><b><tt class="literal">Modify</tt></b></dt>
<dd>
Reformats the headers if true. Mail::Header option.</p>
</dd>


<dt><b><tt class="literal">MailFrom</tt></b></dt>
<dd>
Specifies behavior for headers in the form <tt class="literal">"From</tt>
". Mail::Header option. Possible values are:
</p>

<dl>
<dt><b><tt class="literal">IGNORE</tt></b></dt>
<dd>
Ignores and discards the headers</p>
</dd>


<dt><b><tt class="literal">ERROR</tt></b></dt>
<dd>
Calls <tt class="literal">die</tt></p>
</dd>


<dt><b><tt class="literal">COERCE</tt></b></dt>
<dd>
Renames headers to <tt class="literal">Mail-From</tt></p>
</dd>


<dt><b><tt class="literal">KEEP</tt></b></dt>
<dd>
Keeps headers as they are</p>
</dd>

</dl>
</dd>


<dt><b><tt class="literal">FoldLength</tt></b></dt>
<dd>
Value is default line length for folding headers. Mail::Header option.</p>
</dd>

</dl></div>

<a name="INDEX-2147" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>add_signature</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;add_signature([<em class="replaceable">file</em>])
</pre><p><a name="INDEX-2147" />Appends a signature to the
message. <em class="replaceable"><tt>file</tt></em> is a file that contains the
signature; if not specified, the file
<em class="filename">$ENV{HOME}/.signature</em> is checked for a
signature.
</p></div>

<a name="INDEX-2148" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>body</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;body(  )
</pre><p><a name="INDEX-2148" />Returns the body of the message as a
reference to an array. Each entry in the array represents one line of
the message.
</p></div>

<a name="INDEX-2149" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>escape_from</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;escape_from(  )
</pre><p><a name="INDEX-2149" />Inserts a leading
<tt class="literal">&gt;</tt> on any line that starts with <tt class="literal">"From
"</tt> to avoid the problems that some applications have if a
message contains a line starting with <tt class="literal">"From "</tt>.
</p></div>

<a name="INDEX-2150" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>head</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">headobj</em> = $<em class="replaceable">mail</em>-&gt;head(  )
</pre><p><a name="INDEX-2150" />Returns the Mail::Header object that
holds the headers for the current message.
</p></div>

<a name="INDEX-2151" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>nntppost</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;nntppost([<em class="replaceable">options</em>])
</pre><p><a name="INDEX-2151" />Posts an article via NNTP;
requires Net::NNTP. Options are passed as key/value pairs. Available
options are:
</p><dl>
<dt><b><tt class="literal">Debug</tt></b></dt>
<dd>
Debug value to pass to Net::NNTP</p>
</dd>


<dt><b><tt class="literal">Host</tt></b></dt>
<dd>
Name of NNTP server to connect to</p>
</dd>


<dt><b><tt class="literal">Port</tt></b></dt>
<dd>
Port number to connect to on remote host</p>
</dd>

</dl></div>

<a name="INDEX-2152" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>print_header</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
$<em class="replaceable">mail</em>-&gt;print_header([\*<em class="replaceable">fd</em>])
$<em class="replaceable">mail</em>-&gt;print_body([\*<em class="replaceable">fd</em>])
$<em class="replaceable"><tt>mail</em>-&gt;print([\*<em class="replaceable">fd</tt></em>])
</pre></td><td align="right" /></tr></table><p><p><a name="INDEX-2152" />Prints the header, body, or
whole message to file descriptor
<tt class="literal">\*</tt><em class="emphasis">f</em><em class="replaceable"><tt>d</tt></em>,
which should be a reference to a glob. If the file descriptor is not
given, the output is sent to STDOUT:
</p><blockquote><pre class="code">$mail-&gt;print(\*STDOUT);  # Print message to STDOUT</pre></blockquote></div>

<a name="INDEX-2153" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>remove_sig</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;remove_sig([<em class="replaceable">nlines</em>])
</pre><p><a name="INDEX-2153" />Removes a
user's signature from the body of a message. Looks
for a line equal to <tt class="literal">"-- "</tt> within the last
<em class="replaceable"><tt>nlines</tt></em> lines of the message and removes
that line and all lines after it. <em class="replaceable"><tt>nlines</tt></em>defaults to <tt class="literal">10</tt>.
</p></div>

<a name="INDEX-2154" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>reply</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$reply = $<em class="replaceable">mail</em>-&gt;reply(  )
</pre><p><a name="INDEX-2154" />Creates a new object with
headers initialized for a reply to the current object and with a body
that is an indented copy of the current message.
</p></div>

<a name="INDEX-2155" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>smtpsend</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;smtpsend(  )
</pre><p><a name="INDEX-2155" />Sends the Mail::Internet
message via SMTP to all addresses on the <tt class="literal">To</tt>,
<tt class="literal">Cc</tt>, and <tt class="literal">Bcc</tt> lines. Finds the
SMTP host by trying to connect first to hosts specified in
<tt class="literal">$ENV{SMTPHOSTS}</tt>, then to
<tt class="literal">mailhost</tt>, and then to
<tt class="literal">localhost</tt>.
</p><p>In a future release of Mail::Internet, <tt class="literal">smtpsend</tt>
will be able to take the hostname as a parameter, as
<tt class="literal">nntppost</tt> does.
</p></div>

<a name="INDEX-2156" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>tidy_body</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;tidy_body(  )
</pre><p><a name="INDEX-2156" />Removes all leading and
trailing lines that contain only whitespace from the message body.
</p></div>

<a name="INDEX-2157" /><a name="INDEX-2158" /><a name="INDEX-2159" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>unescape_from</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">mail</em>-&gt;unescape_from(  )
</pre><p><a name="INDEX-2157" />Removes the escaping added by
<tt class="literal">escape_from</tt>.<a name="INDEX-2158" /><a name="INDEX-2159" /> 
</p></div>

</div>
<a name="perlnut2-CHP-16-SECT-2.6" /><div class="sect2">
<h3 class="sect2">16.2.6. Parse Email Addresses with Mail::Address</h3>

<p><a name="INDEX-2160" /><a name="INDEX-2161" /><a name="INDEX-2162" /><a name="INDEX-2163" />Mail::Address parses RFC 822-compliant
mail addresses of the form:
</p>

<blockquote><pre class="code">"Full Name or Phrase" &lt;username@host&gt; (Comment Area)</pre></blockquote>

<p>For example, under RFC 822, an address might be represented as: </p>

<blockquote><pre class="code">"Nathan V. Patwardhan" &lt;nvp@mail.somename.com&gt; (No Comment)</pre></blockquote>

<p>or: </p>

<blockquote><pre class="code">"Nathan V. Patwardhan" &lt;nvp@mail.somename.com&gt;</pre></blockquote>

<p>The Mail::Address constructor parses an email address into three
parts based on the categories shown above:
</p>

<blockquote><pre class="code">$addr = Mail::Address-&gt;new("Full Name or Phrase",
                           "username@host",
                           "(Comment Area)");</pre></blockquote>

<p>Mail::Address also outputs portions of the mail address with the
functions <tt class="literal">phrase</tt>, <tt class="literal">address</tt>,
<tt class="literal">comment</tt>, <tt class="literal">format</tt>,
<tt class="literal">name</tt>, <tt class="literal">host</tt>, and
<tt class="literal">user</tt>. The <tt class="literal">phrase</tt>,
<tt class="literal">address</tt>, and <tt class="literal">comment</tt> functions
represent the first, second, and third entities that were passed to
the Mail::Address constructor, in which the <tt class="literal">phrase</tt>
function<a name="INDEX-2164" />:
</p>

<blockquote><pre class="code">print $addr-&gt;phrase( );</pre></blockquote>

<p>outputs: </p>

<blockquote><pre class="code">Nathan V. Patwardhan</pre></blockquote>

<p>the <tt class="literal">address</tt> function: </p>

<blockquote><pre class="code">print $addr-&gt;address( );</pre></blockquote>

<p>outputs: </p>

<blockquote><pre class="code">nvp@mail.somename.com</pre></blockquote>

<p>and the <tt class="literal">comment</tt> function: </p>

<blockquote><pre class="code">print $addr-&gt;comment( );</pre></blockquote>

<p>outputs: </p>

<blockquote><pre class="code">No Comment</pre></blockquote>

<p><a name="INDEX-2165" /><a name="INDEX-2166" />A real mail address can be
"unmangled," or parsed from its
<em class="emphasis">user@somehost.com</em> format, with the
<tt class="literal">user</tt> and <tt class="literal">host</tt> functions. The
<tt class="literal">user</tt> function removes everything starting with the
<tt class="literal">@</tt> to the end of the address, and
<tt class="literal">host</tt> removes everything up to and including the
<tt class="literal">@</tt>. Using the previous example of
<em class="emphasis">nvp@mail.somename.com</em>, the following line:
</p>

<blockquote><pre class="code">print $addr-&gt;user;</pre></blockquote>

<p>outputs: </p>

<blockquote><pre class="code">nvp</pre></blockquote>

<p>And the following line using the <tt class="literal">host</tt> function: </p>

<blockquote><pre class="code">print $addr-&gt;host;</pre></blockquote>

<p>outputs: </p>

<blockquote><pre class="code">nvp@mail.somename.com</pre></blockquote>

</div>
<a name="perlnut2-CHP-16-SECT-2.7" /><div class="sect2">
<h3 class="sect2">16.2.7. Mail::Address Reference</h3>


<a name="INDEX-2167" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em> = Mail::Address-&gt;new(<em class="replaceable">phrase</em>, <em class="replaceable">address</em>[, <em class="replaceable">comment</em>])
</pre><p><a name="INDEX-2167" />Constructor. Creates new Mail::Address
object representing an address with the specified elements. In a
message, these three elements show up as:
</p><blockquote><pre class="code">phrase &lt;address&gt; (comment)
address (comment)</pre></blockquote></div>

<a name="INDEX-2168" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>parse</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
Mail::Address-&gt;parse(<em class="replaceable">line</em>)
</pre><p><a name="INDEX-2168" />Constructor. Parses the specified line,
usually a <tt class="literal">To</tt>, <tt class="literal">Cc</tt>, or
<tt class="literal">Bcc</tt> line, and returns a list of extracted
Mail::Address objects.
</p></div>

<a name="INDEX-2169" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>address</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;address(  )
</pre><p><a name="INDEX-2169" />Returns the address part of
the object.
</p></div>

<a name="INDEX-2170" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>canon</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;canon(  )
</pre><p><a name="INDEX-2170" />Unimplemented, but should
return the UUCP canon for the message.
</p></div>

<a name="INDEX-2171" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>comment</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;comment(  )
</pre><p><a name="INDEX-2171" />Returns the comment part of
the object.
</p></div>

<a name="INDEX-2172" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>format</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;format(  )
</pre><p><a name="INDEX-2172" />Returns a string representing the
address in a form suitable for the <tt class="literal">To</tt>,
<tt class="literal">Cc</tt>, or <tt class="literal">Bcc</tt> line of a message
</p></div>

<a name="INDEX-2173" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>host</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;host(  )
</pre><p><a name="INDEX-2173" />Returns the host portion of the
address.
</p></div>

<a name="INDEX-2174" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>name</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;name(  )
</pre><p><a name="INDEX-2174" />Takes information contained in
the object and uses various heuristics to try to identify the name of
the person or group.
</p></div>

<a name="INDEX-2175" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>path</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;path(  )
</pre><p><a name="INDEX-2175" />Unimplemented, but should return the
UUCP path for the message.
</p></div>

<a name="INDEX-2176" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>phrase</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;phrase(  )
</pre><p><a name="INDEX-2176" />Returns the phrase part of the
object.
</p></div>

<a name="INDEX-2177" /><a name="INDEX-2178" /><a name="INDEX-2179" /><a name="INDEX-2180" /><a name="INDEX-2181" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>user</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">addr</em>-&gt;user(  )
</pre><p><a name="INDEX-2177" /><a name="INDEX-2178" /><a name="INDEX-2179" /><a name="INDEX-2180" /><a name="INDEX-2181" />Returns the user ID portion of the
address.
</p></div>

</div>
<a name="perlnut2-CHP-16-SECT-2.8" /><div class="sect2">
<h3 class="sect2">16.2.8. Checking Blacklisted Hosts with Mail::RBL</h3>

<p><a name="INDEX-2182" /><a name="INDEX-2183" /><a name="INDEX-2184" /><a name="INDEX-2185" />Mail::RBL eases the task
of checking if a given host is in the real-time blackhole list.
Mail::RBL does this by speaking directly to the RBL server and
searching for a specified host. Ordinarily, you build this
functionality into your MTA (sendmail, qmail, Exim, etc.), but if
your system administrator hasn't built RBL support
into your MTA, you might consider integrating Mail::RBL into your own
mail filter.
</p>

<dl>
<dt><b><tt class="literal">new(</tt><em class="replaceable">suffix</em><tt class="literal">)</tt> </b></dt>
<dd>
Creates a list handle. <em class="replaceable"><tt>suffix</tt></em> is required
because it denotes the host from which you'll check
hostnames.
</p>
</dd>


<dt><b><tt class="literal">check($</tt><em class="replaceable">host</em><tt class="literal">)</tt> </b></dt>
<dd>
Performs the lookup against the RBL.
<tt class="literal">$</tt><em class="replaceable"><tt>host</tt></em> can be a hostname
or IP address, without trailing netmasks (represented by a
<tt class="literal">/</tt> followed by an octet).
</p>

<p>For example:</p>

<blockquote><pre class="code">use Mail::RBL;

my $host = q[some-spammer.domain.here];
my $rbl = Mail::RBL-&gt;new('list.org');

if($rbl-&gt;check($host)) {
    print "$host is in the RBL, and I won't deliver the mail."
} else {
    # Do something to deliver the email
}</pre></blockquote>

</dd>

</dl>
</div>
<a name="perlnut2-CHP-16-SECT-2.9" /><div class="sect2">
<h3 class="sect2">16.2.9. Mail Filtering with Mail::Audit</h3>

<p><a name="INDEX-2186" /><a name="INDEX-2187" /><a name="INDEX-2188" />Mail::Audit is a
mail-filtering system for those who want to write good filter rules
but choose not to use procmail. It was written to provide flexibility
while realizing the strengths of Perl's regular
expression engine. Inspired by Tom Christiansen's
<i class="command">audit_mail</i> and <i class="command">deliverdb</i>
programs, Mail::Audit allows an email message to be logged, examined,
routed to another folder or INBOX, resent, or rejected. You should be
able to write a simple ruleset or rulesets and put references to it
in your <em class="filename">.forward</em> file. For example:
</p>

<blockquote><pre class="code">use Mail::Audit;

my $m_au = Mail::Audit-&gt;new( );

$m_au-&gt;reject("Let me call YOU at home!")
    if $m_au =~ /(spammer\@spammer.com|spammer2\@spammer2.com|spammer3\@spammer3.com)/;

$m_au-&gt;accept("Majordomo") if $mail-&gt;from =~ /Majordomo\@/;

$m_au-&gt;accept( );</pre></blockquote>

<p>Mail::Audit implements the following methods.</p>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
<tt class="literal">new(%</tt><em class="replaceable">options</em>)
</pre><p>Constructor. Reads a mail message from STDIN (or, if the
<tt class="literal">data</tt> option is set, from an array reference) and
creates a Mail::Audit object from it. Options include:
</p><dl>
<dt><b><tt class="literal">log=&gt;</tt><em class="replaceable">logfile</em></b></dt>
<dd>
Writes a debugging log.</p>
</dd>


<dt><b><tt class="literal">loglevel=&gt;</tt><em class="replaceable">n</em></b></dt>
<dd>
Sets verbosity of the log on a scale of 1 to 4.</p>
</dd>


<dt><b><tt class="literal">noexit=&gt;1</tt></b></dt>
<dd>
Do not exit after delivering mail.</p>
</dd>

</dl><p>If you specify a log level without a log file, logging will be
written to <em class="emphasis">/tmp/username-audit.log</em>, where
<em class="replaceable"><tt>username</tt></em> is replaced by your username.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>body</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
body(  )
</pre><p>Returns a reference to an array of lines in the body of the email.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
get(<em class="replaceable">header</em>)
</pre><p>Retrieves the named header from the mail message.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>header</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
header(  )
</pre><p>Returns the header as a single string.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ignore</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
<tt class="literal">ignore(  )</tt>
</pre><p>Ignores an email message completely, dumping it into the bit bucket.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>pipe</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
<tt class="literal">pipe(</tt><em class="replaceable">program</em><tt class="literal">)</tt>
</pre><p>Opens a pipe to an external program and feeds the message to it.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>put</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
put(<em class="replaceable">header</em>, <em class="replaceable">value</em>)
</pre><p>Inserts a new header into the mail message with the given value.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>reject</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
<tt class="literal">reject(</tt><em class="replaceable">message</em><tt class="literal">)</tt>
</pre><p>Rejects an email message, then notifies the sender that the message
is undeliverable with <em class="replaceable"><tt>message</tt></em> as the
reason given.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>resend</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
resend(<em class="replaceable">address</em>)
</pre><p>Bounces the email in its entirety to another address. </p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>tidy</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
tidy(  )
</pre><p>Tidies up the email as per the Mail::Internet manpage.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xaccept</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
<tt class="literal">xaccept(</tt><em class="replaceable">filename</em><tt class="literal">)</tt>
</pre><p>Writes the incoming (and filtered) mail into a mailbox at
<em class="replaceable"><tt>filename</tt></em>. If
<em class="replaceable"><tt>filename</tt></em> is undefined, mail is written to
<em class="emphasis">/var/spool/mail/$USER</em>. If you use Maildir
instead of <em class="emphasis">mbox</em>-formatted mail, it will deliver
the mail in Maildir style.
</p></div>

</div>

<a name="perlnut2-CHP-16-SECT-2.10" /><div class="sect2">
<h3 class="sect2">16.2.10. Alias Manipulation with Unix::AliasFile</h3>

<p>While not a member of the Mail umbrella, Unix::AliasFile is an
important module since it implements a complete interface to the Unix
aliases text file that allows you to query, add, update, and delete
aliases. In addition, it has a cleaner interface than Mail::Alias.
Unix::AliasFile automatically handles file locking, comma and colon
placement, and any other detail that's related to
manipulating your Unix mail alias file. For example:
</p>

<blockquote><pre class="code">use Unix::AliasFile;

my $aliasfile = '/etc/mail/aliases';
my $uaf = Unix::AliasFile-&gt;new($aliasfile);

foreach my $alias $uaf-&gt;aliases( ) {
    chomp($alias);
    
    if($uaf-&gt;alias($alias) ne "$alias\@yourpopserver.your.domain") {
        # Doesn't exist, so add alias of the form:
        # alias: alias@yourpopserver.your.domain
        
        $uaf-&gt;alias($alias, ("$alias\@yourpopserver.your.domain"));
    } else {
        print "I already have $alias that way.\n";
    }
}

$uaf-&gt;commit( );
undef $uaf;</pre></blockquote>

<p>Unix::AliasFile implements the following methods.</p>
<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
new(<em class="replaceable">filename</em>)
</pre><p>Constructor. Creates a new Unix::AliasFile object.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>add_user</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
add_user(<em class="replaceable">alias</em>, @<em class="replaceable">users</em>)
</pre><p>Adds <tt class="literal">@</tt><em class="replaceable">users</em> to
<em class="replaceable"><tt>alias</tt></em>. If a user in
<tt class="literal">@</tt><em class="replaceable"><tt>users</tt></em> already exists
in <em class="replaceable"><tt>alias</tt></em>, duplicates will be ignored. If
<em class="replaceable"><tt>alias</tt></em> is set to <tt class="literal">*</tt>,
<tt class="literal">@</tt><em class="replaceable"><tt>users</tt></em> will be added to
every alias.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>alias</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
alias(<em class="replaceable">alias</em>, @<em class="replaceable">users</em>)
</pre><p>Adds, modifies, or returns information about an alias. When only
<em class="replaceable"><tt>alias</tt></em> is suppled, <tt class="literal">alias(
)</tt> returns a list of all members of an alias, or
<tt class="literal">undef</tt> if <em class="replaceable"><tt>alias</tt></em> does not
exist. If you supply
<tt class="literal">@</tt><em class="replaceable"><tt>users</tt></em>,
<em class="replaceable"><tt>alias</tt></em> will be modified or created if it
doesn't already exist.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>aliases</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
aliases(  )
</pre><p>Returns an alphabetized list of all existing aliases. In scalar
context, this method returns the total number of aliases.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>comment</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
comment(<em class="replaceable">alias</em>, <em class="replaceable">comment</em>)
</pre><p>Inserts a comment line before <em class="replaceable">alias</em>.
<em class="replaceable"><tt>comment</tt></em> must begin with
<tt class="literal">#</tt>, but a newline will be appended to it. Returns
<tt class="literal">1</tt> on success and <tt class="literal">0</tt> on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>commit</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
commit(  )
</pre><p>Writes the alias file.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delempty</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
delempty(  )
</pre><p>Deletes all existing aliases that have no members, returning a count
of the number of aliases deleted.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delete</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
delete(<em class="replaceable">alias</em>)
</pre><p>Deletes <em class="replaceable">alias</em>.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>remove_user</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
remove_user(<em class="replaceable">alias</em>, @<em class="replaceable">users</em>)
</pre><p>Removes the list of users from an existing alias. If a user in
<tt class="literal">@</tt><em class="replaceable"><tt>users</em>isn't a member of <em class="replaceable">alias</tt></em>,
the removal attempt will be silently ignored. <tt class="literal">remove_user(
)</tt> returns <tt class="literal">1</tt> on success and
<tt class="literal">0</tt> on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>rename_user</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
rename_user(<em class="replaceable">oldname</em>, <em class="replaceable">newname</em>)
</pre><p>Changes one username to another in every alias. Returns the number of
aliases affected.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>uncomment</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
uncomment(<em class="replaceable">comment</em>)
</pre><p>Removes the comment from the file that is exactly matched to the
supplied text. Returns <tt class="literal">1</tt> on success and
<tt class="literal">0</tt> on failure.
</p></div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16. Email Connectivity</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">17. Usenet News</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>