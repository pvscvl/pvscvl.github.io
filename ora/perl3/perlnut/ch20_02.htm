<html><head><title>The LWP Modules (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch20_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">20.2. The LWP Modules</h2>

<p>The LWP modules provide the core of functionality for web programming
in Perl. It contains the foundations for networking applications,
protocol implementations, media type definitions, and debugging
ability.
</p>

<p><a name="INDEX-2388" /><a name="INDEX-2389" /><a name="INDEX-2390" /><a name="INDEX-2391" /><a name="INDEX-2392" />The modules LWP::Simple and
LWP::UserAgent define client applications that implement network
connections, send requests, and receive response data from servers.
LWP::RobotUA is another client application used to build automated
web searchers following a specified set of guidelines.
</p>

<p>LWP::UserAgent is the primary module used in applications built with
LWP. With it, you can build your own robust web client. It is also
the base class for the Simple and RobotUA modules. These two modules
provide a specialized set of functions for creating clients.
</p>

<p>Additional LWP modules provide the building blocks required for web
communications, but you often don't need to use them
<a name="INDEX-2393" />directly in your applications.
LWP::Protocol implements the actual socket connections with the
appropriate protocol. The most common protocol is HTTP, but mail
protocols (such as SMTP), FTP for file transfers, and others can be
used across networks.
</p>

<p><a name="INDEX-2394" /><a name="INDEX-2395" />LWP::MediaTypes implements the MIME
definitions for media type identification and mapping to file
extensions. The LWP::Debug module provides functions to help you
debug your LWP applications.
</p>

<p>The following sections describe the RobotUA, Simple, and UserAgent
modules of LWP.
</p>

<a name="perlnut2-CHP-20-SECT-2.1" /><div class="sect2">
<h3 class="sect2">20.2.1. LWP::RobotUA Sections</h3>

<p><a name="INDEX-2396" /><a name="INDEX-2397" />The Robot User Agent (LWP::RobotUA) is a
subclass of LWP::UserAgent and is used to create robot client
applications. A robot application requests resources in an automated
fashion. Robots perform such activities as searching, mirroring, and
surveying. Some robots collect statistics, while others wander the
Web and summarize their findings for a search engine.
</p>

<p>The LWP::RobotUA module defines methods to help program robot
applications and observes the Robot Exclusion Standards, which web
server administrators can define on their web site to keep robots
away from certain (or all) areas of the site.
</p>

<p><a name="INDEX-2398" />The constructor for an LWP::RobotUA
object looks like this:
</p>

<blockquote><pre class="code">$rob = LWP::RobotUA-&gt;new(<em class="replaceable"><tt>agent_name</em>, <em class="replaceable">email</em>, [$<em class="replaceable">rules</tt></em>]);</pre></blockquote>

<p>The first parameter, <em class="replaceable"><tt>agent_name</tt></em>, is the
user agent identifier used for the value of the User-Agent header in
the request. The second parameter is the email address of the person
using the robot, and the optional third parameter is a reference to a
WWW::RobotRules object, which is used to store the robot rules for a
server. If you omit the third parameter, the LWP::RobotUA module
requests the <em class="emphasis">robots.txt</em> file from every server
it contacts and generates its own WWW::RobotRules object.
</p>

<p>Since LWP::RobotUA is a subclass of LWP::UserAgent, the
LWP::UserAgent methods are used to perform the basic client
activities. The following methods are defined by LWP::RobotUA for
robot-related functionality.
</p>

<a name="INDEX-2399" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>as_string</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">rob</em>-&gt;as_string( )
</pre><p><a name="INDEX-2399" />Returns a human-readable string that
describes the robot's status.
</p></div>

<a name="INDEX-2400" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delay</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">rob</em>-&gt;delay ([<em class="replaceable">time</em>])
</pre><p><a name="INDEX-2400" />Sets or returns the specified
<em class="replaceable"><tt>time</tt></em> (in minutes) to wait between
requests. The default value is <tt class="literal">1</tt>.
</p></div>

<a name="INDEX-2401" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>host_wait</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">rob</em>-&gt;host_wait(<em class="replaceable">netloc</em>)
</pre><p><a name="INDEX-2401" />Returns the number of seconds
the robot must wait before it can request another resource from the
server identified by <em class="replaceable"><tt>netloc</tt></em>.
</p></div>

<a name="INDEX-2402" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>no_visits</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">rob</em>-&gt;no_visits(<em class="replaceable">netloc</em>)
</pre><p><a name="INDEX-2402" />Returns the number of visits to
a given server. <em class="replaceable"><tt>netloc</tt></em> is of the form
<em class="replaceable"><tt>user:password@host:port</tt></em>. The user,
password, and port are optional.
</p></div>

<a name="INDEX-2403" /><a name="INDEX-2404" /><a name="INDEX-2405" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>rules</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">rob</em>-&gt;rules([$<em class="replaceable">rules</em>])
</pre><p><a name="INDEX-2403" />Sets or returns the
WWW:RobotRules object
<tt class="literal">$</tt><em class="replaceable"><tt>rules</tt></em>, which is used
when determining if the module is allowed access to a particular
resource.<a name="INDEX-2404" /><a name="INDEX-2405" /> 
</p></div>

<a name="INDEX-2406" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>use_sleep</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">rob</em>-&gt;use_sleep ([<em class="replaceable">boolean</em>])
</pre><p><a name="INDEX-2406" />Determines whether the user
agent should <tt class="literal">sleep( )</tt> if requests arrive too fast.
The default is true. If set to false, an internal SERVICE_UNAVAILABLE
response is generated, with a Retry-After header indicating when it
is permissable to send another request to this server. With no
arguments, returns the current value of this flag.
</p></div>
</div>
<a name="perlnut2-CHP-20-SECT-2.2" /><div class="sect2">
<h3 class="sect2">20.2.2. LWP::Simple</h3>

<p><a name="INDEX-2407" /><a name="INDEX-2408" />LWP::Simple provides an easy-to-use
interface for creating a web client, although it is only capable of
performing basic retrieving functions. An object constructor is not
used for this class; it defines functions for retrieving information
from a specified URL and interpreting the status codes from the
requests.
</p>

<p>This module isn't named Simple for nothing. The
following shows how to use it to get a web page and save it to a
file:
</p>

<blockquote><pre class="code">use LWP::Simple;

$homepage = 'oreilly_com.html';
$status = getstore('http:www.oreilly.com/', $homepage);
print("hooray") if is_success($status);</pre></blockquote>

<p><a name="INDEX-2409" /><a name="INDEX-2410" />The retrieving functions
<tt class="literal">get</tt> and <tt class="literal">head</tt> return the
URL's contents and header contents, respectively.
The other retrieving functions return the HTTP status code of the
request. The status codes are returned as the constants from the
HTTP::Status module, which is also where the
<tt class="literal">is_success</tt> and <tt class="literal">is_failure</tt>
methods are obtained. See <a href="ch20_03.htm">Section 20.3.4, "HTTP::Status"</a> for a listing of the
response codes.
</p>

<p>The user agent identifier produced by LWP::Simple is
<tt class="literal">LWP::Simple</tt><em class="replaceable"><tt>/n.nn</tt></em>, in
which <em class="replaceable"><tt>n.nn</tt></em> is the version number of LWP
being used.
</p>

<p>The following are the functions exported by LWP::Simple.</p>


<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
get (<em class="replaceable">url</em>)
</pre><p>Returns the contents of the specified <em class="replaceable">url</em>.
Upon failure, <tt class="literal">get</tt> returns
<tt class="literal">undef</tt>. Other than returning
<tt class="literal">undef</tt>, there is no way of accessing the HTTP
status code or headers returned by the server.
</p></div>

<a name="INDEX-2411" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getprint</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
getprint (<em class="replaceable">url</em>)
</pre><p><a name="INDEX-2411" />Prints the contents of
<em class="replaceable"><tt>url</tt></em> on standard output and returns the
HTTP status code given by the server.
</p></div>

<a name="INDEX-2412" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getstore</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
getstore (<em class="replaceable">url</em>, <em class="replaceable">file</em>)
</pre><p><a name="INDEX-2412" />Stores the contents of the
specified <em class="replaceable"><tt>url</tt></em> into
<em class="replaceable"><tt>file</tt></em> and returns the HTTP status code
given by the server.
</p></div>

<a name="INDEX-2413" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>head</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
head (<em class="replaceable">url</em>)
</pre><p><a name="INDEX-2413" />Returns header information about the
specified <em class="replaceable"><tt>url</tt></em> in the form of:
<tt class="literal">($content_type,</tt> <tt class="literal">$document_length,
$modified_time, $expires, $server)</tt>. Upon failure,
<tt class="literal">head</tt> returns an empty list.
</p></div>

<a name="INDEX-2414" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>is_error</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
is_error (<em class="replaceable">code</em>)
</pre><p><a name="INDEX-2414" />Given a status
<em class="replaceable"><tt>code</tt></em> from <tt class="literal">getprint</tt>,
<tt class="literal">getstore</tt>, or <tt class="literal">mirror</tt>, returns
true if the request was not successful.
</p></div>

<a name="INDEX-2415" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>is_success</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
is_success (<em class="replaceable">code</em>)
</pre><p><a name="INDEX-2415" />Given a status
<em class="replaceable"><tt>code</tt></em> from <tt class="literal">getprint</tt>,
<tt class="literal">getstore</tt>, or <tt class="literal">mirror</tt>, returns
true if the request was successful.
</p></div>

<a name="INDEX-2416" /><a name="INDEX-2417" /><a name="INDEX-2418" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>mirror</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
mirror (<em class="replaceable">url</em>, <em class="replaceable">file</em>)
</pre><p><a name="INDEX-2416" />Copies the contents of the specified
<em class="replaceable"><tt>url</em> into <em class="replaceable">file</tt></em>,
when the modification time or length of the online version is
different from that of the named file.<a name="INDEX-2417" /><a name="INDEX-2418" /> 
</p></div>
</div>
<a name="perlnut2-CHP-20-SECT-2.3" /><div class="sect2">
<h3 class="sect2">20.2.3. LWP::UserAgent</h3>

<p><a name="INDEX-2419" /><a name="INDEX-2420" /><a name="INDEX-2421" />Requests over the network are performed
with LWP::UserAgent objects. To create an LWP::UserAgent object, use:
</p>

<blockquote><pre class="code">$ua = LWP::UserAgent-&gt;new( );</pre></blockquote>

<p>You give the object a request, which it uses to contact the server,
and the information you requested is returned<a name="INDEX-2422" />. The most often used method
in this module is <tt class="literal">request</tt>, which contacts a server
and returns the result of your query. Other methods in this module
change the way <tt class="literal">request</tt> behaves. You can change the
timeout value, customize the value of the User-Agent header, or use a
proxy server.
</p>

<p>The following methods are supplied by LWP::UserAgent.</p>



<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;new(%<em class="replaceable">options</em>)
</pre><p>Constructs a new LWP::UserAgent object and returns a reference to it.
Key/value arguments may be provided to set up the initial state of
the user agent. <tt class="literal">new</tt> accepts several options that
correspond to the following attribute methods:
</p><a name="ch20-16-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Key</p>
</th>
<th>
<p>Default</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">agent</tt></p>
</td>
<td>
<p><tt class="literal">"libwww-perl/#.##"</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">from</tt></p>
</td>
<td>
<p><tt class="literal">undef</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">timeout</tt></p>
</td>
<td>
<p><tt class="literal">180</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">use_eval</tt></p>
</td>
<td>
<p><tt class="literal">1</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">parse_head</tt></p>
</td>
<td>
<p><tt class="literal">1</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">max_size</tt></p>
</td>
<td>
<p><tt class="literal">undef</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">cookie_jar</tt></p>
</td>
<td>
<p><tt class="literal">undef</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">conn_cache</tt></p>
</td>
<td>
<p><tt class="literal">undef</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">protocols_allowed</tt></p>
</td>
<td>
<p><tt class="literal">undef</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">protocols_forbidden</tt></p>
</td>
<td>
<p><tt class="literal">undef</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">requests_redirectable</tt></p>
</td>
<td>
<p><tt class="literal">["GET", "HEAD"]</tt></p>
</td>
</tr>

</table><p><p>The options are:</p><dl>
<dt><b><tt class="literal">env_proxy</tt></b></dt>
<dd>
If set to true, proxy settings are read from environment variables.</p>
</dd>


<dt><b><tt class="literal">keep_alive</tt></b></dt>
<dd>
A number that will be passed on as the
<tt class="literal">total_capacity</tt> for the connection. A
LWP::ConnCache is set up (see the <tt class="literal">conn_cache</tt>
method), and the HTTP/1.1 protocol module is enabled.
</p>
</dd>

</dl></div>
<a name="INDEX-2423" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>agent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;agent([<em class="replaceable">string</em>])
</pre><p><a name="INDEX-2423" />When invoked with no
arguments, this method returns the current value of the identifier
used in the User-Agent HTTP header. If invoked with an argument, the
User-Agent header will use <em class="replaceable"><tt>string</tt></em> as its
identifier in the future.
</p></div>

<a name="INDEX-2424" /><a name="INDEX-2425" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>_agent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;_agent(  )
</pre><p><a name="INDEX-2424" /> <a name="INDEX-2425" />Returns the default agent
identifier. This is a string of the form
<tt class="literal">"libwww-perl/#.##"</tt>, in which
<tt class="literal">#.##</tt> is substituted with the version number of
this library.
</p></div>

<a name="INDEX-2426" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>clone</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;clone(  )
</pre><p><a name="INDEX-2426" />Returns a copy of the LWP::UserAgent
object.
</p></div>

<a name="INDEX-2427" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>conn_cache</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;conn_cache([$<em class="replaceable">cache_object</em>])
</pre><p><a name="INDEX-2427" />Defines the LWP::ConnCache
object to use. With no arguments, returns the current LWP::ConnCache
object.
</p></div>

<a name="INDEX-2428" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>cookie_jar</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;cookie_jar([$<em class="replaceable">cjar</em>])
</pre><p><a name="INDEX-2428" />Specifies the "cookie
jar" object to use with the UserAgent object, or
returns it if invoked with no argument.
<tt class="literal">$</tt><em class="replaceable"><tt>cjar</tt></em> is a reference to
an HTTP::Cookies object that contains client cookie data. See the
HTTP::Cookies section for more information.
</p></div>

<a name="INDEX-2429" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>credentials</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;credentials(<em class="replaceable">netloc</em>, <em class="replaceable">realm</em>, <em class="replaceable">uname</em>, <em class="replaceable">pass</em>)
</pre><p><a name="INDEX-2429" />Uses the given username and
password for authentication at the given network location and realm.
This method sets the parameters for either the WWW-Authenticate or
Proxy-Authenticate headers in a request. The
<tt class="literal">get_basic_credentials</tt> method is called by
<tt class="literal">request</tt> to retrieve the username and passwords, if
they exist. The arguments are:
</p><dl>
<dt><i><em class="replaceable"><tt>netloc</tt></em></i></dt>
<dd>
The network location (usually a URL string) to which the username and
password apply.
</p>
</dd>


<dt><i><em class="replaceable"><tt>realm</tt></em></i></dt>
<dd>
The name of the server-defined range of URLs that this data applies
to.
</p>
</dd>


<dt><i><em class="replaceable"><tt>uname</tt></em></i></dt>
<dd>
The username for authentication.</p>
</dd>


<dt><i><em class="replaceable"><tt>pass</tt></em></i></dt>
<dd>
The password for authentication. By default, the password will be
transmitted with MIME base-64 encoding.
</p>
</dd>

</dl></div>

<a name="INDEX-2430" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>env_proxy</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;env_proxy(  )
</pre><p><a name="INDEX-2430" />Defines a scheme/proxy URL
mapping by looking at environment variables. For example, to define
the HTTP proxy, one would define the HTTP_PROXY environment variable
with the proxy's URL. To define a domain to avoid
the proxy, one would define the NO_PROXY environment variable with
the domain that doesn't need a proxy.
</p></div>

<a name="INDEX-2431" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>from</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;from([<em class="replaceable">email</em>])
</pre><p><a name="INDEX-2431" />When invoked with no
arguments, this method returns the current value of the email address
used in the From header. If invoked with an argument, the From header
will use that email address in the future. (The From header tells the
web server the email address of the person running the client
software.)
</p></div>

<a name="INDEX-2432" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;get($<em class="replaceable">url</em>, [<em class="replaceable">Header =&gt; Value</em>])
</pre><p><a name="INDEX-2432" />Shortcut for
<tt class="literal">$</tt><em class="replaceable"><tt>ua</tt></em><tt class="literal">-&gt;request(HTTP::Request::Common::GET(
$</tt><em class="replaceable"><tt>url</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>Header</tt></em> <tt class="literal">=&gt;</tt>
<em class="replaceable"><tt>Value</tt></em><tt class="literal">,...</tt>
<tt class="literal">))</tt>.
</p></div>

<a name="INDEX-2433" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_basic_credentials</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;get_basic_credentials(<em class="replaceable">realm</em>, <em class="replaceable">url</em>)
</pre><p><a name="INDEX-2433" />Returns the list containing
the username and password for the given
<em class="replaceable"><tt>realm</em> and <em class="replaceable">url</tt></em>when authentication is required by the server. This function is
usually called internally by <tt class="literal">request</tt>. This method
becomes useful when creating a subclass of LWP::UserAgent with its
own version of <tt class="literal">get_basic_credentials</tt>. From there,
you can rewrite <tt class="literal">get_basic_credentials</tt> to do more
flexible things, such as asking the user for the account information,
or referring to authentication information in a file. All you need to
do is return a list in which the first element is a username and the
second element is a password.
</p></div>

<a name="INDEX-2434" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>head</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;head($<em class="replaceable">url</em>, [<em class="replaceable">Header =&gt; Value</em>])
</pre><p><a name="INDEX-2434" />Shortcut for
<tt class="literal">$</tt><em class="replaceable"><tt>ua</tt></em><tt class="literal">-&gt;request(HTTP::Request::Common::HEAD(
$</tt><em class="replaceable"><tt>url</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>Header</tt></em> <tt class="literal">=&gt;</tt>
<em class="replaceable"><tt>Value</tt></em><tt class="literal">,...))</tt>.
</p></div>

<a name="INDEX-2435" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>is_protocol_supported</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;is_protocol_supported(<em class="replaceable">proto</em>)
</pre><p><a name="INDEX-2435" />Given a scheme, this method
returns a true or false (nonzero or zero) value. A true value means
that LWP knows how to handle a URL with the specified protocol. If it
returns a false value, LWP does not know how to handle the URL.
</p></div>

<a name="INDEX-2436" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>max_size</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;max_size([<em class="replaceable">size</em>])
</pre><p><a name="INDEX-2436" />Sets or returns the maximum
<em class="replaceable"><tt>size</tt></em> (in bytes) for response content. The
default is <tt class="literal">undef</tt>, which means that there is no
limit. If the returned content is partial because the size limit was
exceeded, then an X-Content-Range header will be added to the
response.
</p></div>

<a name="INDEX-2437" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>mirror</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;mirror(<em class="replaceable">url</em>, <em class="replaceable">file</em>)
</pre><p><a name="INDEX-2437" />Given a URL and file path, this method
copies the contents of <em class="replaceable"><tt>url</tt></em> into the file
when the length or modification date headers are different from any
previous retrieval. If the file does not exist, it is created. This
method returns an HTTP::Response object, in which the response code
indicates what happened.
</p></div>

<a name="INDEX-2438" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>no_proxy</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;no_proxy(<em class="replaceable">domains</em>)
</pre><p><a name="INDEX-2438" />Does not use a proxy server
for the specified <em class="replaceable"><tt>domains</tt></em>.
</p></div>

<a name="INDEX-2439" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>parse_head</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;parse_head([<em class="replaceable">boolean</em>])
</pre><p><a name="INDEX-2439" />Sets or returns a true or
false value indicating whether response headers from the
<tt class="literal">&lt;head&gt;</tt> sections of HTML documents are
initialized. The default is true.
</p></div>

<a name="INDEX-2440" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>post</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;post($<em class="replaceable">url</em>, \%<em class="replaceable">formref</em>, [<em class="replaceable">Header =&gt; Value</em>])
</pre><p><a name="INDEX-2440" />Shortcut for
<tt class="literal">$</tt><em class="replaceable"><tt>ua</tt></em><tt class="literal">-&gt;request(HTTP::Request::Common::POST(
$</tt><em class="replaceable"><tt>url</tt></em><tt class="literal">,
\%</tt><em class="replaceable"><tt>formref</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>Header</tt></em> <tt class="literal">=&gt;</tt>
<em class="replaceable"><tt>Value</tt></em><tt class="literal">,... ))</tt>. The form
reference is optional and can be either a hashref or an arrayref.
</p></div>

<a name="INDEX-2441" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>protocols_allowed</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;protocols_allowed([\@<em class="replaceable">protocols</em>])
</pre><p><a name="INDEX-2441" />Assigns the list of protocols
that <tt class="literal">$ua-&gt;request</tt> and
<tt class="literal">$ua-&gt;simple_request</tt> will exclusively allow.
With no arguments, returns a list of the protocols currently allowed.
Assigning to a value of <tt class="literal">undef</tt> deletes the list.
</p></div>

<a name="INDEX-2442" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>protocols_forbidden</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;protocols_forbidden([\@<em class="replaceable">protocols</em>])
</pre><p><a name="INDEX-2442" />Assigns the list of procotols
that <tt class="literal">$ua-&gt;request</tt> and
<tt class="literal">$ua-&gt;simple_request</tt> will not allow. With no
arguments, returns a list of the protocols currently prohibited.
Assigning to a value of <tt class="literal">undef</tt> deletes the list.
</p></div>

<a name="INDEX-2443" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>proxy</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;proxy(<em class="replaceable">prot</em>, <em class="replaceable">proxy_url</em>)
</pre><p><a name="INDEX-2443" />Defines a URL
(<em class="replaceable"><tt>proxy_url</tt></em>) to use with the specified
protocols, <em class="replaceable"><tt>prot</tt></em>. The first parameter can
be a reference to a list of protocol names or a scalar that contains
a single protocol. The second argument defines a proxy URL to use
with the protocol.
</p></div>

<a name="INDEX-2444" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>put</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><table width="515" border="0" cellpadding="5"><tr><td align="left"><pre>
$<em class="replaceable">ua</em>-&gt;put($<em class="replaceable">url</em>, [<em class="replaceable">Header =&gt; Value</em>])
<a name="INDEX-2444" />$<em class="replaceable">ua</em> -- &gt;gt;put($<em class="replaceable">url</em>, <em class="replaceable">Header</em> ==&gt;gt; <em class="replaceable">Value</em>,...)
</pre></td><td align="right" /></tr></table><p><p>Shortcut for
<tt class="literal">$</tt><em class="replaceable"><tt>ua</tt></em><tt class="literal">-&gt;request(HTTP::Request::Common::PUT(
$</tt><em class="replaceable"><tt>url</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>Header</tt></em> <tt class="literal">=&gt;</tt>
<em class="replaceable"><tt>Value</tt></em><tt class="literal">,...))</tt>.
</p></div>

<a name="INDEX-2445" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>redirect_ok</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;redirect_ok($<em class="replaceable">this_request</em>)
</pre><p><a name="INDEX-2445" />This method is called by
<tt class="literal">request</tt> before it tries to follow a redirection to
the request in
<tt class="literal">$</tt><em class="replaceable"><tt>this_request</tt></em>. This
should return a true value if this redirection is permissible.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>request</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;request($<em class="replaceable">request</em>, [<em class="replaceable">file</em> | $<em class="replaceable">sub</em>, <em class="replaceable">size</em>])
</pre><p>Performs a request for the resource specified by
<tt class="literal">$</tt><em class="replaceable"><tt>request</tt></em>, which is an
HTTP::Request object. Returns the information received from the
server as an HTTP::Response object. Normally, doing a
<tt class="literal">$ua-&gt;request($request)</tt> is enough. You can also
specify a subroutine to process the data as it comes in or provide a
filename in which to store the entity body of the response. The
arguments are:
</p><dl>
<dt><b><tt class="literal">$</tt><em class="replaceable">request</em></b></dt>
<dd>
An HTTP::Request object. The object must contain the method and URL
of the site to be queried. This object must exist before
<tt class="literal">request</tt> is called.
</p>
</dd>


<dt><i><em class="replaceable"><tt>file</tt></em></i></dt>
<dd>
Name of the file in which to store the response's
entity body. When this option is used on <tt class="literal">request</tt>,
the entity body of the returned response object will be empty.
</p>
</dd>


<dt><b><tt class="literal">$</tt><em class="replaceable">sub</em></b></dt>
<dd>
A reference to a subroutine that will process the data of the
response. If you use the optional third argument,
<em class="replaceable"><tt>size</tt></em>, the subroutine will be called any
time that number of bytes is received as response data. The
subroutine should expect each chunk of the entity body data as a
scalar in the first argument, an HTTP::Response object as the second
argument, and an LWP::Protocol object as the third argument.
</p>
</dd>


<dt><i><em class="replaceable"><tt>size</tt></em></i></dt>

<dd>
Optional argument specifying the number of bytes of the entity body
received before the <em class="emphasis">sub</em> callback is called to
process response data.
</p>
</dd>

</dl></div>

<a name="INDEX-2446" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>requests_redirectable</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;requests_redirectable([\@<em class="replaceable">requests</em>])
</pre><p><a name="INDEX-2446" />Assigns the
list of request names that <tt class="literal">$ua-&gt;redirect_ok</tt>
will allow to be redirected. With no arguments, returns the current
list of request names. By default, GET and HEAD requests are allowed;
to include POST requests, enter:
</p><blockquote><pre class="code">push @{ $ua-&gt;requests_redirectable }, 'POST';</pre></blockquote></div>

<a name="INDEX-2447" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>timeout</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;timeout([<em class="replaceable">secs</em>])
</pre><p><a name="INDEX-2447" />When invoked with no arguments,
<tt class="literal">timeout</tt> returns the timeout value of a request. By
default, this value is three minutes. Therefore, if the client
software doesn't hear back from the server within
three minutes, it will stop the transaction and indicate that a
timeout occurred in the HTTP response code. If invoked with an
argument, the timeout value is redefined to be that value.
</p></div>

<a name="INDEX-2448" /><a name="INDEX-2449" /><a name="INDEX-2450" /><a name="INDEX-2451" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>use_alarm</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ua</em>-&gt;use_alarm([<em class="replaceable">boolean</em>])
</pre><p><a name="INDEX-2448" />Retrieves or defines the
ability to use <tt class="literal">alarm</tt> for timeouts. By default,
timeouts with <tt class="literal">alarm</tt> are enabled. If you plan on
using <tt class="literal">alarm</tt> for your own purposes, or it
isn't supported on your system, it is recommended
that you disable <tt class="literal">alarm</tt> by calling this method with
a value of <tt class="literal">0</tt>.<a name="INDEX-2449" /><a name="INDEX-2450" /><a name="INDEX-2451" /> 
</p></div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch20_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">20. The LWP Library</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">20.3. The HTTP Modules</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>