<html><head><title>The HTML Modules (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch20_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">20.4. The HTML Modules</h2>

<p><a name="INDEX-2574" /><a name="INDEX-2575" />HTML modules provide an interface to
parse HTML documents. After you parse the document, you can print or
display it according to the markup tags or extract specific
information such as hyperlinks.
</p>

<p><a name="INDEX-2576" /><a name="INDEX-2577" />The HTML::parser module provides
methods for, literally, parsing HTML. It can handle HTML text from a
string or file and can separate out the syntactic structures and
data. You shouldn't use HTML::Parser directly,
however, since its interface hasn't been designed to
make your life easy when you parse HTML. It's merely
a base class from which you can build your own parser to deal with
HTML in any way you want. And if you don't want to
roll your own HTML parser or parser class, then
there's always HTML::TokeParser and
HTML::TreeBuilder, both of which are covered in this chapter.
</p>

<p>HTML::TreeBuilder is a class that parses HTML into a syntax tree. In
a syntax tree, each element of the HTML, such as container elements
with beginning and end tags, is stored relative to other elements.
This preserves the nested structure and behavior of HTML and its
hierarchy.
</p>

<p>A syntax tree of the TreeBuilder class is formed of connected nodes
that represent each element of the HTML document. These nodes are
saved as objects from the HTML::Element class. An HTML::Element
object stores all the information from an HTML tag: the start tag,
end tag, attributes, plain text, and pointers to any nested elements.
</p>

<p>The remaining classes of the HTML modules use the syntax trees and
its nodes of element objects to output useful information from the
HTML documents. The format classes, such as HTML::FormatText and
HTML::FormatPS, allow you to produce text and PostScript from HTML.
The HTML::LinkExtor class extracts all of the links from a document.
Additional modules provide means for replacing HTML character
entities and implementing HTML tags as subroutines.
</p>

<a name="perlnut2-CHP-20-SECT-4.1" /><div class="sect2">
<h3 class="sect2">20.4.1. HTML::Parser</h3>

<p><a name="INDEX-2578" /><a name="INDEX-2579" />This module implements the base class
for the other HTML modules. A parser object is created with the
<tt class="literal">new</tt> constructor:
</p>
<blockquote><pre class="code">$p = HTML::Parser-&gt;new( );</pre></blockquote>

<p>The constructor takes no arguments.</p>

<p>The parser object takes methods that read in HTML from a string or a
file. The string-reading method can take data in several smaller
chunks if the HTML is too big. Each chunk of HTML will be appended to
the object, and the <tt class="literal">eof</tt> method indicates the end
of the document. These basic methods are described below.
</p>


<a name="INDEX-2580" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>eof</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">p</em>-&gt;eof(  )
</pre><p><a name="INDEX-2580" />Indicates the end of a document and
flushes any buffered text. Returns the parser object.
</p></div>

<a name="INDEX-2581" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>parse</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">p</em>-&gt;parse(<em class="replaceable">string</em>)
</pre><p><a name="INDEX-2581" />Reads HTML into the parser object from
a given <em class="replaceable"><tt>string</tt></em>. Performance problems occur
if the string is too large, so the HTML can be broken up into smaller
pieces, which will be appended to the data already contained in the
object. The parse can be terminated with a call to the
<tt class="literal">eof</tt> method.
</p></div>

<a name="INDEX-2582" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>parse_file</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">p</em>-&gt;parse_file(<em class="replaceable">file</em>)
</pre><p><a name="INDEX-2582" />Reads HTML into the parser
object from the given <em class="replaceable"><tt>file</tt></em>, which can be a
filename or an open filehandle.
</p></div>

<p>When the <tt class="literal">parse</tt> or <tt class="literal">parse_file</tt>
method is called, it parses the incoming HTML with a few internal
methods. In HTML::Parser, these methods are defined, but empty.
Additional HTML parsing classes (included in the HTML modules or ones
you write yourself) override these methods for their own purposes.
For example:
</p>

<blockquote><pre class="code">package HTML::MyParser;
require HTML::Parser;
@ISA=qw(HTML::MyParser);

sub start {
     <em class="replaceable"><tt>your subroutine defined here</tt></em>
     }</pre></blockquote>

<p>The following list shows the internal methods contained in
HTML::Parser.
</p>


<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>comment</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
comment(<em class="replaceable">comment</em>)
</pre><p>Invoked on comments from HTML (text between <tt class="literal">&lt;!-</tt>
and <tt class="literal">-&gt;</tt>). The text of the comment (without the
tags) is given to the method as the string
<em class="replaceable"><tt>comment</tt></em>.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>end</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
end(<em class="replaceable">tag</em>, <em class="replaceable">origtext</em>)
</pre><p>Invoked on end tags (those with the <tt class="literal">&lt;/tag&gt;</tt>
form). The first argument, <em class="replaceable"><tt>tag</tt></em>, is the tag
name in lowercase, and the second argument,
<em class="replaceable"><tt>origtext</tt></em>, is the original HTML text of the
tag.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>start</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
start(<em class="replaceable">tag</em>, $<em class="replaceable">attr</em>, <em class="replaceable">attrseq</em>, <em class="replaceable">origtext</em>)
</pre><p>Invoked on start tags. The first argument,
<em class="replaceable"><tt>tag</tt></em>, is the name of the tag in lowercase.
The second argument is a reference to a hash,
<em class="replaceable"><tt>attr</tt></em>. This hash contains all the
attributes and their values in key/value pairs. The keys are the
names of the attributes in lowercase. The third argument,
<em class="replaceable"><tt>attrseq</tt></em>, is a reference to an array that
contains the names of all the attributes in the order they appeared
in the tag. The fourth argument, <em class="replaceable"><tt>origtext</tt></em>,
is a string that contains the original text of the tag.
</p></div>

<a name="INDEX-2583" /><a name="INDEX-2584" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>text</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
text(<em class="replaceable">text</em>)
</pre><p>Invoked on plain text in the document. The text is passed unmodified
and may contain newlines. Character entities in the text are not
expanded<a name="INDEX-2583" /><a name="INDEX-2584" />. 
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>xml_mode</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
xml_mode(<em class="replaceable">bool</em>)
</pre><p>Enabling this attribute changes the parser to allow some XML
constructs such as empty element tags and XML processing
instructions. It also disables forcing tag and attribute names to
lowercase when they are reported by the <tt class="literal">tagname</tt>
and <tt class="literal">attr</tt> arguments, and suppresses special
treatment of elements parsed as CDATA for HTML.
</p></div>

</div>
<a name="perlnut2-CHP-20-SECT-4.2" /><div class="sect2">
<h3 class="sect2">20.4.2. HTML::TokeParser</h3>

<p>As we said, you should use a subclassed HTML parser if you want a
better interface to HTML parsing features than what HTML::Parser
gives you. HTML::TokeParser by Gisle Aas is one such example. While
HTML::TokeParser is actually a subclass of HTML::PullParser, it can
help you do many useful things, such as link extraction and HTML
checking.
</p>

<p>In short, HTML::TokeParser breaks an HTML document into tokens,
attributes, and content, in which the HTML <tt class="literal">&lt;a
href="http://url"&gt;link&lt;/a&gt;</tt> would break down as:
</p>

<blockquote><pre class="code">token: a
    attrib: href
content: http://url
content: link
token /a</pre></blockquote>

<p>For example, you can use HTML::TokeParser to extract links from a
string that contains HTML:
</p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w

require HTML::TokeParser;

# Our string that turns out to be HTML!
my $html = '&lt;p&gt;Some text. &lt;a href="http://blah"My name is Nate!&lt;/a&gt;&lt;/p&gt;';
my $parser = HTML::TokeParser-&gt;new(\$html);

get_tag( ) tells TokeParser to match a tag by name
while (my $token = $parser-&gt;get_tag("a")) {
    my $url = $token-&gt;[1]{href} || "-";
    my $text = $parser-&gt;get_trimmed_text("/a");
    print "URL is: $url.\nURL text is: $text.\n";
}</pre></blockquote>

<a name="perlnut2-CHP-20-SECT-4.2.1" /><div class="sect3">
<h3 class="sect3">20.4.2.1. HTML::TokeParser methods</h3>


<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
new(  )
</pre><p>Constructor. Takes a filename, filehandle, or reference to a scalar
as arguments. Each argument represents the content that will be
parsed. If a scalar is present, <tt class="literal">new</tt> looks for a
filename <tt class="literal">$scalar</tt>. If a reference to a scalar is
present, <tt class="literal">new</tt> looks for HTML in
<tt class="literal">\$scalar</tt>. <tt class="literal">new</tt> will read
filehandles until end-of-file. Returns <tt class="literal">undef</tt> on
failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_tag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
get_tag(  )
</pre><p>Returns the next start or end tag in a document. If there are no
remaining start or end tags, <tt class="literal">get_tag</tt> returns
<tt class="literal">undef</tt>. <tt class="literal">get_tag</tt> is useful
because it skips unwanted tokens and matches only the tag that you
want&#x2014;if it exists. When a tag is found, it is returned as an
array reference, like so: <tt class="literal">[$tag, $attr, $attrseq,
$text]</tt>. If an end tag is found, is is returned&#x2014;e.g.,
<tt class="literal">"/$tag"</tt>.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_text</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
get_text(  )
</pre><p>Returns all text found at the current position. If the next token is
not text, <tt class="literal">get_text</tt> returns a zero-length string.
You can pass an <tt class="literal">"$end_tag"</tt> option to
<tt class="literal">get_text</tt> to return all of the text before
<tt class="literal">"end_tag"</tt>.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_token</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
get_token(  )
</pre><p>Returns the next token found in the HTML document, or
<tt class="literal">undef</tt> if no next token exists. Each token is
returned as an array reference. The array
reference's first and last items refer to start and
end tags concurrently. The rest of the items in the array include
text, comments, declarations, and process instructions.
<tt class="literal">get_token</tt> uses the following labels for the
tokens:
</p><dl>
<dt><b><tt class="literal">S</tt></b></dt>
<dd>
Start tag</p>
</dd>


<dt><b><tt class="literal">E</tt></b></dt>
<dd>
End tag</p>
</dd>


<dt><b><tt class="literal">T</tt></b></dt>
<dd>
Text</p>
</dd>


<dt><b><tt class="literal">C</tt></b></dt>
<dd>
Comment</p>
</dd>


<dt><b><tt class="literal">D</tt></b></dt>
<dd>
Declaration</p>
</dd>


<dt><b><tt class="literal">PI</tt></b></dt>
<dd>
Process instructions</p>
</dd>

</dl><p>Consider the following code:</p><blockquote><pre class="code">#!/usr/local/bin/perl -w

require HTML::TokeParser;

my $html = '&lt;a href="http://blah"&gt;My name is 
Nate!&lt;/a&gt;&lt;/p&gt;';
my $p = HTML::TokeParser-&gt;new(\$html);

while (my $token = $p-&gt;get_token) {
    my $i = 0;
    foreach my $tk (@{$token}) {
        print "token[$i]: $tk\n";
                    $i++;
    }
}</pre></blockquote><p>The items in each token (in the HTML) are displayed as follows:</p><blockquote><pre class="code">token[0]: S
token[1]: a
token[2]: HASH(0x8146d3c)
token[3]: ARRAY(0x814a380)
token[4]: &lt;a href="http://blah"&gt;
token[0]: T
token[1]: My name is Nate!
token[2]:
token[0]: E
token[1]: a
token[2]: &lt;/a&gt;
token[0]: E
token[1]: p
token[2]: &lt;/p&gt;</pre></blockquote></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>get_trimmed_text</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
get_trimmed_text(  )
</pre><p>Works the same as <tt class="literal">get_text</tt>, but reduces all
instances of multiple spaces to a single space and removes leading
and trailing whitespace.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>unget_token</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
unget_token(  )
</pre><p>Useful for pushing tokens back to the parser so they can be reused
the next time you call <tt class="literal">get_token</tt>.
</p></div>
</div>
</div>

<a name="perlnut2-CHP-20-SECT-4.3" /><div class="sect2">
<h3 class="sect2">20.4.3. HTML::Element</h3>

<p><a name="INDEX-2585" /><a name="INDEX-2586" />The HTML::Element module provides
methods for dealing with nodes in an HTML syntax tree. You can get or
set the contents of each node, traverse the tree, and delete a node.
</p>

<p>HTML::Element objects are used to represent elements of HTML. These
elements include start and end tags, attributes, contained plain
text, and other nested elements.
</p>

<p>The constructor for this class requires the name of the tag for its
first argument. You may optionally specify initial attributes and
values as hash elements in the constructor. For
example<a name="INDEX-2587" />:
</p>

<blockquote><pre class="code">$h = HTML::Element-&gt;new('a', 'href' =&gt; 'http:www.oreilly.com');</pre></blockquote>

<p>The new element is created for the anchor tag,
<tt class="literal">&lt;a&gt;</tt>, which links to the URL through its
<tt class="literal">href</tt> attribute.
</p>

<p>The following methods are provided for objects of the HTML::Element
class.
</p>


<a name="INDEX-2588" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>as_HTML</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;as_HTML(  )
</pre><p><a name="INDEX-2588" />Returns the HTML string that
represents the element and its children.
</p></div>

<a name="INDEX-2589" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>attr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;attr(<em class="replaceable">name</em> [,<em class="replaceable">value</em>])
</pre><p><a name="INDEX-2589" />Sets or retrieves the value of
attribute <em class="replaceable"><tt>name</tt></em> in the current element.
</p></div>

<a name="INDEX-2590" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>content</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;content(  )
</pre><p><a name="INDEX-2590" />Returns the content contained in this
element as a reference to an array that contains plain-text segments
and references to nested element objects.
</p></div>

<a name="INDEX-2591" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delete</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;delete(  )
</pre><p><a name="INDEX-2591" />Deletes the current element and all of
its child elements.
</p></div>

<a name="INDEX-2592" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delete_content</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;delete_content(  )
</pre><p><a name="INDEX-2592" />Removes the content from the
current element.
</p></div>

<a name="INDEX-2593" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>dump</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;dump(  )
</pre><p><a name="INDEX-2593" />Prints the tag name of the element and
all its children to STDOUT. Useful for debugging. The structure of
the document is shown by indentation.
</p></div>

<a name="INDEX-2594" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>endtag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;endtag(  )
</pre><p><a name="INDEX-2594" />Returns the original text of
the end tag, including the <tt class="literal">&lt;/</tt> and
<tt class="literal">&gt;</tt>.
</p></div>

<a name="INDEX-2595" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>extract_links</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;extract_links([<em class="replaceable">types</em>])
</pre><p><a name="INDEX-2595" />Retrieves the links contained
within an element and all of its child elements. This method returns
a reference to an array in which each element is a reference to an
array with two values: the value of the link and a reference to the
element in which it was found. You may specify the tags from which
you want to extract links by providing their names in a list of
<em class="replaceable"><tt>types</tt></em>.
</p></div>

<a name="INDEX-2596" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>implicit</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;implicit([<em class="replaceable">boolean</em>])
</pre><p><a name="INDEX-2596" />Indicates whether the element
was contained in the original document (false) or whether it was
assumed to be implicit (true) by the parser. Implicit tags are
elements that the parser included to conform to proper HTML
structure, such as an ending paragraph tag
(<tt class="literal">&lt;/p&gt;</tt>). You may also set this attribute by
providing a <em class="replaceable"><tt>boolean</tt></em> argument.
</p></div>

<a name="INDEX-2597" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>insert_element</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;insert_element($<em class="replaceable">element</em>, <em class="replaceable">implicit</em>)
</pre><p><a name="INDEX-2597" />Inserts the object
<tt class="literal">$</tt><em class="replaceable"><tt>element</tt></em> at the current
position relative to the root object
<tt class="literal">$</tt><em class="replaceable"><tt>h</tt></em> and updates the
position (indicated by <tt class="literal">pos</tt>) to the inserted
element. Returns the new
<tt class="literal">$</tt><em class="replaceable"><tt>element</tt></em>. The
<em class="replaceable"><tt>implicit</tt></em> argument is a Boolean indicating
whether the element is an implicit tag (true) or the original HTML
(false).
</p></div>

<a name="INDEX-2598" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>is_empty</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;is_empty(  )
</pre><p><a name="INDEX-2598" />Returns true if the current
object has no content.
</p></div>

<a name="INDEX-2599" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>is_inside</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;is_inside(<em class="replaceable">tag1</em> [,<em class="replaceable">tag2</em>, ...])
</pre><p><a name="INDEX-2599" />Returns true if the tag for
this element is contained inside one of the tags listed as arguments.
</p></div>

<a name="INDEX-2600" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>parent</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;parent([$<em class="replaceable">new</em>])
</pre><p><a name="INDEX-2600" />Without an argument, returns
the parent object for this element. If given a reference to another
element object, this element is set as the new parent object and is
returned.
</p></div>

<a name="INDEX-2601" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>pos</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;pos([$<em class="replaceable">element</em>])
</pre><p><a name="INDEX-2601" />Sets or retrieves the current
position in the syntax tree of the current object. The returned value
is a reference to the element object that holds the current position.
The "position" object is an element
contained within the tree that has the current object
(<tt class="literal">$</tt><em class="replaceable"><tt>h</tt></em>) at its root.
</p></div>

<a name="INDEX-2602" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>push_content</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;push_content(<em class="replaceable">content</em>)
</pre><p><a name="INDEX-2602" />Inserts the specified content
into the current element. <em class="replaceable"><tt>content</tt></em> can be
either a scalar containing plain text or a reference to another
element. Multiple arguments can be supplied.
</p></div>

<a name="INDEX-2603" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>starttag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;starttag(  )
</pre><p><a name="INDEX-2603" />Returns the original text of
the start tag for the element. This includes the
<tt class="literal">&lt;</tt> and <tt class="literal">&gt;</tt> and all
attributes.
</p></div>

<a name="INDEX-2604" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>tag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;tag([<em class="replaceable">name</em>])
</pre><p><a name="INDEX-2604" />Sets or retrieves the tag
<em class="replaceable"><tt>name</tt></em> for the element. Tag names are always
converted to lowercase.
</p></div>

<a name="INDEX-2605" /><a name="INDEX-2606" /><a name="INDEX-2607" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>traverse</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">h</em>-&gt;traverse(<em class="replaceable">sub</em>, [<em class="replaceable">ignoretext</em>])
</pre><p><a name="INDEX-2605" />Traverses the current element
and all of its children, invoking the callback routine
<em class="replaceable"><tt>sub</tt></em> for each element. The callback routine
is called with a reference to the current element (the node), a
startflag, and the depth as arguments. The start flag is
<tt class="literal">1</tt> when entering a node and <tt class="literal">0</tt>
when leaving (returning to a parent element). If the
<em class="replaceable"><tt>ignoretext</tt></em> parameter is true (the
default), then the callback routine will not be invoked for text
content. If the callback routine returns false, the method will not
traverse any child elements of that node.<a name="INDEX-2606" /><a name="INDEX-2607" />
</p></div>

</div>
<a name="perlnut2-CHP-20-SECT-4.4" /><div class="sect2">
<h3 class="sect2">20.4.4. HTML::TreeBuilder</h3>

<p><a name="INDEX-2608" /><a name="INDEX-2609" />The HTML::TreeBuilder class provides a
parser that creates an HTML syntax tree. Each node of the tree is an
HTML::Element object. This class inherits both HTML::Parser and
HTML::Elements, so methods from both of those classes can be used on
its objects.
</p>

<p>The methods provided by HTML::TreeBuilder control how the parsing is
performed. Values for these methods are set by providing a Boolean
value for their arguments.
</p>

<a name="INDEX-2610" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ignore_text</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">p</em>-&gt;ignore_text(<em class="replaceable">boolean</em>)
</pre><p><a name="INDEX-2610" />If set to true, text content of
elements will not be included in elements of the parse tree. The
default is false.
</p></div>

<a name="INDEX-2611" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ignore_unknown</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">p</em>-&gt;ignore_unknown(<em class="replaceable">boolean</em>)
</pre><p><a name="INDEX-2611" />If set
to true, unknown tags in the HTML will be represented as elements in
the parse tree.
</p></div>

<a name="INDEX-2612" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>implicit_tags</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">p</em>-&gt;implicit_tags(<em class="replaceable">boolean</em>)
</pre><p><a name="INDEX-2612" />If set
to true, the parser will try to deduce implicit tags such as missing
elements or end tags that are required to conform to proper HTML
structure. If false, the parse tree will reflect the HTML as is.
</p></div>

<a name="INDEX-2613" /><a name="INDEX-2614" /><a name="INDEX-2615" /><div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>warn</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">p</em>-&gt;warn(<em class="replaceable">boolean</em>)
</pre><p><a name="INDEX-2613" />If set to true, the parser will make
calls to <tt class="literal">warn</tt> with messages describing syntax
errors when they occur. Error messages are off by default.<a name="INDEX-2614" /><a name="INDEX-2615" />
</p></div>

</div>
<a name="perlnut2-CHP-20-SECT-4.5" /><div class="sect2">
<h3 class="sect2">20.4.5. HTML::FormatPS</h3>

<p><a name="INDEX-2616" /><a name="INDEX-2617" /><a name="INDEX-2618" />The HTML::FormatPS module converts an
HTML parse tree into PostScript. The formatter object is created with
the <tt class="literal">new</tt> constructor, which can take parameters
that assign PostScript attributes. For example:
</p>

<blockquote><pre class="code">$formatter = HTML::FormatPS-&gt;new('papersize' =&gt; 'Letter');</pre></blockquote>

<p>You can now give parsed HTML to the formatter and produce PostScript
output for printing. HTML::FormatPS does not handle table or form
elements at this time.
</p>

<p><a name="INDEX-2619" />The method for this class is
<tt class="literal">format</tt>. <tt class="literal">format</tt> takes a
reference to an HTML TreeBuilder object, representing a parsed HTML
document. It returns a scalar containing the document formatted in
PostScript. The following example shows how to use this module to
print a file in PostScript:
</p>

<blockquote><pre class="code">use HTML::FormatPS;

$html = HTML::TreeBuilder-&gt;parse_file(somefile);
$formatter = HTML::FormatPS-&gt;new( );
print $formatter-&gt;format($html);</pre></blockquote>

<p>The following list describes the attributes that can be set in the
constructor:
</p>

<dl>
<dt><i><em class="replaceable"><tt>PaperSize</tt></em></i></dt>
<dd>
Possible values are <tt class="literal">3</tt>, <tt class="literal">A4</tt>,
<tt class="literal">A5</tt>, <tt class="literal">B4</tt>, <tt class="literal">B5</tt>,
<tt class="literal">Letter</tt>, <tt class="literal">Legal</tt>,
<tt class="literal">Executive</tt>, <tt class="literal">Tabloid</tt>,
<tt class="literal">Statement</tt>, <tt class="literal">Folio</tt>,
<tt class="literal">10x14</tt>, and <tt class="literal">Quarto</tt>. The default
is <tt class="literal">A4</tt>.
</p>
</dd>


<dt><i><em class="replaceable"><tt>PaperWidth</tt></em></i></dt>
<dd>
Width of the paper in points.</p>
</dd>


<dt><i><em class="replaceable"><tt>PaperHeight</tt></em></i></dt>
<dd>
Height of the paper in points.</p>
</dd>


<dt><i><em class="replaceable"><tt>LeftMargin</tt></em></i></dt>
<dd>
Left margin in points.</p>
</dd>


<dt><i><em class="replaceable"><tt>RightMargin</tt></em></i></dt>
<dd>
Right margin in points.</p>
</dd>


<dt><i><em class="replaceable"><tt>HorizontalMargin</tt></em></i></dt>
<dd>
Left and right margin. Default is 4 cm.</p>
</dd>


<dt><i><em class="replaceable"><tt>TopMargin</tt></em></i></dt>
<dd>
Top margin in points.</p>
</dd>


<dt><i><em class="replaceable"><tt>BottomMargin</tt></em></i></dt>
<dd>
Bottom margin in points.</p>
</dd>


<dt><i><em class="replaceable"><tt>VerticalMargin</tt></em></i></dt>
<dd>
Top and bottom margin. Default is 2 cm.</p>
</dd>


<dt><i><em class="replaceable"><tt>PageNo</tt></em></i></dt>
<dd>
Boolean value to display page numbers. Default is
<tt class="literal">0</tt> (off).
</p>
</dd>


<dt><i><em class="replaceable"><tt>FontFamily</tt></em></i></dt>
<dd>
Font family to use on the page. Possible values are
<tt class="literal">Courier</tt>, <tt class="literal">Helvetica</tt>, and
<tt class="literal">Times</tt>. Default is <tt class="literal">Times</tt>.
</p>
</dd>


<dt><i><em class="replaceable"><tt>FontScale</tt></em></i></dt>
<dd>
Scale factor for the font.</p>
</dd>


<dt><i><em class="replaceable"><tt>Leading</tt></em></i></dt>
<dd>
Space between lines, as a factor of the font size. Default is
<tt class="literal">0.1</tt>. <a name="INDEX-2620" /><a name="INDEX-2621" /><a name="INDEX-2622" /> 
</p>
</dd>

</dl>

</div>
<a name="perlnut2-CHP-20-SECT-4.6" /><div class="sect2">
<h3 class="sect2">20.4.6. HTML::FormatText</h3>

<p><a name="INDEX-2623" /><a name="INDEX-2624" />The HTML::FormatText module takes a
parsed HTML file and outputs a plain-text version of it. None of the
character attributes will be usable, i.e., bold or italic fonts, font
sizes, etc.
</p>

<p><a name="INDEX-2625" />This module is similar to FormatPS in
that the constructor takes attributes for formatting, and the
<tt class="literal">format</tt> method produces the output. A formatter
object can be constructed like this:
</p>

<blockquote><pre class="code">$formatter = HTML::FormatText-&gt;new(leftmargin =&gt; 10, rightmargin =&gt; 80);</pre></blockquote>

<p>The constructor can take two parameters:
<tt class="literal">leftmargin</tt> and <tt class="literal">rightmargin</tt>. The
value for the margins is given in column numbers. The aliases
<tt class="literal">lm</tt> and <tt class="literal">rm</tt> can also be used.
</p>

<p>The <tt class="literal">format</tt> method takes an HTML::TreeBuilder
object and returns a scalar containing the formatted text. You can
print it with:
</p>

<blockquote><pre class="code">print $formatter-&gt;format($html);</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch20_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">20.3. The HTTP Modules</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">20.5. The URI Module</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>