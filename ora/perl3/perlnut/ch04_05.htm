<html><head><title>Operators (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.5. Operators</h2>

<p><a name="INDEX-427" /><a name="INDEX-428" /><a href="ch04_05.htm">Table 4-3</a> lists all
the Perl operators from highest to lowest precedence and indicates
their associativity.
</p>

<a name="perlnut2-CHP-4-TABLE-3" /><h4 class="objtitle">Table 4-3. Perl associativity and operators, listed by precedence </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Associativity</p>
</th>
<th>
<p>Operators</p>
</th>
</tr>


<tr>
<td>
<p>Left</p>
</td>
<td>
<p>Terms and list operators (leftward)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">-&gt;</tt> (method call, dereference)</p>
</td>
</tr>
<tr>
<td>
<p>Nonassociative</p>
</td>
<td>
<p><tt class="literal">++ --</tt> (autoincrement, autodecrement)</p>
</td>
</tr>
<tr>
<td>
<p>Right</p>
</td>
<td>
<p><tt class="literal">**</tt> (exponentiation)</p>
</td>
</tr>
<tr>
<td>
<p>Right</p>
</td>
<td>
<p><tt class="literal">! ~ \</tt> and unary <tt class="literal">+</tt> and
<tt class="literal">-</tt> (logical not, bit-not, reference, unary plus,
unary minus)
</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">=~ !~</tt> (matches, doesn't match)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">* / % x</tt> (multiply, divide, modulus, string
replicate)
</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">+ -</tt> . (addition, subtraction, string concatenation)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">&lt;&lt; &gt;&gt;</tt> (left bit-shift, right bit-shift)</p>
</td>
</tr>
<tr>
<td>
<p>Nonassociative</p>
</td>
<td>
<p>Named unary operators and file-test operators</p>
</td>
</tr>
<tr>
<td>
<p>Nonassociative</p>
</td>
<td>
<p><tt class="literal">&lt; &gt; &lt;= &gt;= lt gt le ge</tt> (less than,
greater than, less than or equal to, greater than or equal to, and
their string equivalents)
</p>
</td>
</tr>
<tr>
<td>
<p>Nonassociative</p>
</td>
<td>
<p><tt class="literal">== != &lt;=&gt; eq ne cmp</tt> (equal to, not equal to,
signed comparison, and their string equivalents)
</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">&amp;</tt> (bit-and)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">| ^</tt> (bit-or, bit-xor)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">&amp;&amp;</tt> (logical AND)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">||</tt> (logical OR)</p>
</td>
</tr>
<tr>
<td>
<p>Nonassociative</p>
</td>
<td>
<p><tt class="literal">.. ...</tt> (range)</p>
</td>
</tr>
<tr>
<td>
<p>Right</p>
</td>
<td>
<p><tt class="literal">?</tt>: (ternary conditional)</p>
</td>
</tr>
<tr>
<td>
<p>Right</p>
</td>
<td>
<p><tt class="literal">= += -= *=</tt> and so on (assignment operators)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">, =&gt;</tt> (comma, arrow comma)</p>
</td>
</tr>
<tr>
<td>
<p>Nonassociative</p>
</td>
<td>
<p>List operators (rightward)</p>
</td>
</tr>
<tr>
<td>
<p>Right</p>
</td>
<td>
<p><tt class="literal">not</tt> (logical not)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">and</tt> (logical and)</p>
</td>
</tr>
<tr>
<td>
<p>Left</p>
</td>
<td>
<p><tt class="literal">or xor</tt> (logical or, xor)</p>
</td>
</tr>

</table><p>

<p><a name="INDEX-429" /><a name="INDEX-430" />You can clarify your expressions by using
parentheses to group any part of an expression. Anything in
parentheses will be evaluated as a single unit within a larger
expression.
</p>

<p>With very few exceptions, Perl operators act upon scalar values only,
not upon list values.
</p>

<p>Terms that take highest precedence in Perl include variables, quote
and quotelike operators, any expression in parentheses, and any
function with arguments in parentheses.
</p>

<p><a name="INDEX-431" />A list
operator is a function that can take a list of values as its
argument. List operators take highest precedence when considering
what's to the left of them. They have considerably
lower precedence when looking to their right, which is the expected
result.
</p>

<p>Also parsed as high-precedence terms are the <tt class="literal">do{}</tt>
and <tt class="literal">eval{}</tt> constructs, as well as subroutine and
method calls, the anonymous array and hash composers
(<tt class="literal">[]</tt> and <tt class="literal">{}</tt>), and the anonymous
subroutine composer <tt class="literal">sub{}</tt>.
</p>

<p>A unary operator is a function that takes a single scalar value as
its argument. Unary operators have a lower precedence than list
operators because they expect and take only one value.
</p>

<a name="perlnut2-CHP-4-SECT-5.1" /><div class="sect2">
<h3 class="sect2">4.5.1. The Arrow Operator</h3>

<p><a name="INDEX-432" /><a name="INDEX-433" /><a name="INDEX-434" /><a name="INDEX-435" />The arrow operator is a dereference
operator. It can be used for references to arrays, hashes, code
references, or for calling methods on objects. See the discussion of
references in <a href="ch07_01.htm">Chapter 7, "Packages, Modules, and Objects"</a>.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-5.2" /><div class="sect2">
<h3 class="sect2">4.5.2. Unary Operators</h3>

<p><a name="INDEX-436" /><a name="INDEX-437" /><a name="INDEX-438" />Unary <tt class="literal">!</tt> performs
logical negation, that is, "not."
The <tt class="literal">not</tt> operator is a lower-precedence version of
<tt class="literal">!</tt>.
</p>

<p><a name="INDEX-439" /><a name="INDEX-440" />Unary <tt class="literal">-</tt> performs
arithmetic negation if the operand is numeric. If the operand is an
identifier, then a string consisting of a minus sign concatenated
with the identifier is returned. Otherwise, if the string starts with
a plus or minus, a string starting with the opposite sign is
returned.
</p>

<p><a name="INDEX-441" /><a name="INDEX-442" />Unary <tt class="literal">~</tt> performs
bitwise negation, that is, one's complement. For
example, on a 32-bit machine, <tt class="literal">~0xFF</tt> is
<tt class="literal">0xFFFFFF00</tt>. If the argument to
<tt class="literal">~</tt> is a string instead of a number, a string of
identical length is returned, but with all the bits of the string
complemented.
</p>

<p><a name="INDEX-443" /><a name="INDEX-444" />Unary
<tt class="literal">+</tt> has no semantic effect whatsoever, even on
strings. It is syntactically useful for separating a function name
from a parenthesized expression that would otherwise be interpreted
as the complete list of function arguments.
</p>

<p><a name="INDEX-445" /><a name="INDEX-446" />Unary <tt class="literal">\</tt> creates a
reference to whatever follows it (see <a href="ch04_08.htm">Section 4.8, "References and Complex Data Structures"</a> later in this chapter).
Do not confuse this behavior with the behavior of the backslash
within a string. The <tt class="literal">\</tt> operator may also be used
on a parenthesized list value in a list context, in which case it
returns references to each element of the list.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-5.3" /><div class="sect2">
<h3 class="sect2">4.5.3. Arithmetic Operators</h3>

<p><a name="INDEX-447" /><a name="INDEX-448" /><a name="INDEX-449" /><a name="INDEX-450" />Binary <tt class="literal">**</tt> is
the exponentiation operator. Note that it binds even more tightly
than unary minus, so <tt class="literal">-2**4</tt> is
<tt class="literal">-(2**4)</tt>, not <tt class="literal">(-2)**4</tt>. Also note
that <tt class="literal">**</tt> has right associativity, so:
</p>

<blockquote><pre class="code">$e = 2 ** 3 ** 4;</pre></blockquote>

<p>evaluates to 2 to the 81st power, not 8 to the 4th power.</p>

<p><a name="INDEX-451" /><a name="INDEX-452" /><a name="INDEX-453" /><a name="INDEX-454" /><a name="INDEX-455" /><a name="INDEX-456" />The <tt class="literal">*</tt> (multiply) and
<tt class="literal">/</tt> (divide) operators work exactly as you might
expect, multiplying or dividing their two operands. Division is done
in floating-point mode, unless integer mode in enabled (via
<tt class="literal">use integer</tt>).
</p>

<p><a name="INDEX-457" /><a name="INDEX-458" /><a name="INDEX-459" />The <tt class="literal">%</tt> (modulus)
operator converts its operands to integers before finding the
remainder according to integer division. For the same operation in
floating-point mode, you may prefer to use the <tt class="literal">fmod(
)</tt> function from the POSIX module (see <a href="ch08_01.htm">Chapter 8, "Standard Modules"</a>). 
</p>

</div>
<a name="perlnut2-CHP-4-SECT-5.4" /><div class="sect2">
<h3 class="sect2">4.5.4. Comparison Operators</h3>

<p>Comparison operators can be categorized into relational and equality
operators.
</p>

<a name="perlnut2-CHP-4-SECT-5.4.1" /><div class="sect3">
<h3 class="sect3">4.5.4.1. Relational operators</h3>

<p><a name="INDEX-460" /><a name="INDEX-461" /><a name="INDEX-462" /><a name="INDEX-463" /><a name="INDEX-464" /><a name="INDEX-465" /><a name="INDEX-466" /><a name="INDEX-467" /><a name="INDEX-468" /><a name="INDEX-469" /><a name="INDEX-470" /><a name="INDEX-471" /><a name="INDEX-472" /><a name="INDEX-473" /><a name="INDEX-474" /><a name="INDEX-475" /><a name="INDEX-476" /><a name="INDEX-477" /><a name="INDEX-478" />Perl has two classes of relational
operators. One class operates on numeric values, and the other
operates on string values. String comparisons are based on the ASCII
collating sequence. Relational operators are nonassociative, so
<tt class="literal">$a &lt; $b &lt; $c</tt> is a syntax error.
</p>

<a name="ch04-2-fm2xml" /><table border="1" cellpadding="3">




<tr>
<th>
<p>Numeric</p>
</th>
<th>
<p>String</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">&gt;</tt></p>
</td>
<td>
<p><tt class="literal">gt</tt></p>
</td>
<td>
<p>Greater than</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">&gt;=</tt></p>
</td>
<td>
<p><tt class="literal">ge</tt></p>
</td>
<td>
<p>Greater than or equal to</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">&lt;</tt></p>
</td>
<td>
<p><tt class="literal">lt</tt></p>
</td>
<td>
<p>Less than</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">&lt;=</tt></p>
</td>
<td>
<p><tt class="literal">le</tt></p>
</td>
<td>
<p>Less than or equal to</p>
</td>
</tr>

</table><p>

</div>

<a name="perlnut2-CHP-4-SECT-5.4.2" /><div class="sect3">
<h3 class="sect3">4.5.4.2. Equality operators</h3>

<p><a name="INDEX-479" /><a name="INDEX-480" /><a name="INDEX-481" /><a name="INDEX-482" /><a name="INDEX-483" /><a name="INDEX-484" /><a name="INDEX-485" /><a name="INDEX-486" /><a name="INDEX-487" /><a name="INDEX-488" />The equal and not-equal operators
return <tt class="literal">1</tt> for true and
"" for false (just as the
relational operators do). The <tt class="literal">&lt;=&gt;</tt> and
<em class="emphasis">cmp</em> operators return <tt class="literal">-1</tt> if
the left operand is less than the right operand, <tt class="literal">0</tt>
if they are equal, and <tt class="literal">+1</tt> if the left operand is
greater than the right.
</p>

<a name="ch04-3-fm2xml" /><table border="1" cellpadding="3">




<tr>
<th>
<p>Numeric</p>
</th>
<th>
<p>String</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">==</tt></p>
</td>
<td>
<p><tt class="literal">eq</tt></p>
</td>
<td>
<p>Equal to</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">!=</tt></p>
</td>
<td>
<p><tt class="literal">ne</tt></p>
</td>
<td>
<p>Not equal to</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">&lt;=&gt;</tt></p>
</td>
<td>
<p><tt class="literal">cmp</tt></p>
</td>
<td>
<p>Comparison, with signed result</p>
</td>
</tr>

</table><p>

</div>
</div>
<a name="perlnut2-CHP-4-SECT-5.5" /><div class="sect2">
<h3 class="sect2">4.5.5. Autoincrement and Autodecrement</h3>

<p><a name="INDEX-489" /><a name="INDEX-490" /><a name="INDEX-491" /><a name="INDEX-492" /><a name="INDEX-493" /><a name="INDEX-494" />If placed before a
variable, the <tt class="literal">++</tt> and <tt class="literal">--</tt>
operators increment or decrement the variable before returning the
value. If placed after, they increment or decrement the variable
after returning the value.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-5.6" /><div class="sect2">
<h3 class="sect2">4.5.6. Assignment Operators</h3>

<p><a name="INDEX-495" />Perl
recognizes the following operators for assigning a value to a
variable:
</p>

<blockquote><pre class="code">=    **=    +=    *=    &amp;=    &lt;&lt;=    &amp;&amp;=
-=    /=    |=    &gt;&gt;=   ||=    .=     %=
^=    x=</pre></blockquote>

<p>Each operator requires a variable on the left side and an expression
on the right side. For the simple <a name="INDEX-496" /><a name="INDEX-497" /><a name="INDEX-498" />
<a name="INDEX-499" /><a name="INDEX-500" /><a name="INDEX-501" /><a name="INDEX-502" /><a name="INDEX-503" /><a name="INDEX-504" /><a name="INDEX-505" /><a name="INDEX-506" /><a name="INDEX-507" /><a name="INDEX-508" /><a name="INDEX-509" /><a name="INDEX-510" /><a name="INDEX-511" /> <a name="INDEX-512" /><a name="INDEX-513" /><a name="INDEX-514" /><a name="INDEX-515" /><a name="INDEX-516" /><a name="INDEX-517" /><a name="INDEX-518" /><a name="INDEX-519" /><a name="INDEX-520" /><a name="INDEX-521" /><a name="INDEX-522" /><a name="INDEX-523" /><a name="INDEX-524" /><a name="INDEX-525" />assignment
operator, <tt class="literal">=</tt>, the value of the expression is stored
in the designated variable. For the other operators, Perl evaluates
the expression:
</p>

<blockquote><pre class="code">$var <em class="replaceable"><tt>OP</tt></em>= $value</pre></blockquote>

<p>as if it was written: </p>

<blockquote><pre class="code">$var = $var <em class="replaceable"><tt>OP</tt></em> $value</pre></blockquote>

<p>except that <tt class="literal">$var</tt> is evaluated only once. For
example:
</p>

<blockquote><pre class="code">$a += 2;    # Same as $a = $a + 2</pre></blockquote>

</div>
<a name="perlnut2-CHP-4-SECT-5.7" /><div class="sect2">
<h3 class="sect2">4.5.7. Pattern Match Operators</h3>

<p><a name="INDEX-526" /><a name="INDEX-527" /> <a name="INDEX-528" />Binary <tt class="literal">=~</tt>
binds a scalar expression to a pattern match, substitution, or
translation. These operations search or modify the string
<tt class="literal">$_</tt> by default.
</p>

<p><a name="INDEX-529" /> Binary
<tt class="literal">!~</tt> is just like <tt class="literal">=~</tt> except the
return value is negated in the logical sense. The following
expressions are functionally equivalent:
</p>

<blockquote><pre class="code">$string !~ /<em class="replaceable"><tt>pattern</tt></em>/
not $string =~ /<em class="replaceable"><tt>pattern</tt></em>/</pre></blockquote>

<p>see <a href="ch04_06.htm">Section 4.6, "Regular Expressions"</a> later
in this chapter.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-5.8" /><div class="sect2">
<h3 class="sect2">4.5.8. File Test Operators</h3>

<p><a name="INDEX-530" /><a name="INDEX-531" /><a name="INDEX-532" /><a name="INDEX-533" /><a name="INDEX-534" /><a name="INDEX-535" /><a name="INDEX-536" /><a name="INDEX-537" /><a name="INDEX-538" /><a name="INDEX-539" /><a name="INDEX-540" /><a name="INDEX-541" /><a name="INDEX-542" /><a name="INDEX-543" /><a name="INDEX-544" /><a name="INDEX-545" /><a name="INDEX-546" /><a name="INDEX-547" /><a name="INDEX-548" /><a name="INDEX-549" /><a name="INDEX-550" /><a name="INDEX-551" /><a name="INDEX-552" /><a name="INDEX-553" /><a name="INDEX-554" /><a name="INDEX-555" /><a name="INDEX-556" /><a name="INDEX-557" />A file test
operator is a unary operator that tests a filename or a filehandle.
</p>

<a name="ch04-4-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Operator</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">-r</tt></p>
</td>
<td>
<p>File is readable by effective uid/gid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-w</tt></p>
</td>
<td>
<p>File is writable by effective uid/gid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-x</tt></p>
</td>
<td>
<p>File is executable by effective uid/gid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-o</tt></p>
</td>
<td>
<p>File is owned by effective uid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-R</tt></p>
</td>
<td>
<p>File is readable by real uid/gid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-W</tt></p>
</td>
<td>
<p>File is writable by real uid/gid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-X</tt></p>
</td>
<td>
<p>File is executable by real uid/gid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-O</tt></p>
</td>
<td>
<p>File is owned by real uid</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-e</tt></p>
</td>
<td>
<p>File exists</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-z</tt></p>
</td>
<td>
<p>File has zero size</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-s</tt></p>
</td>
<td>
<p>File has nonzero size (returns size)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-f</tt></p>
</td>
<td>
<p>File is a plain file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-d</tt></p>
</td>
<td>
<p>File is a directory</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-l</tt></p>
</td>
<td>
<p>File is a symbolic link</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-p</tt></p>
</td>
<td>
<p>File is a named pipe (FIFO)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-S</tt></p>
</td>
<td>
<p>File is a socket</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-b</tt></p>
</td>
<td>
<p>File is a block special file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-c</tt></p>
</td>
<td>
<p>File is a character special file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-t</tt></p>
</td>
<td>
<p>Filehandle is opened to a tty</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-u</tt></p>
</td>
<td>
<p>File has setuid bit set</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-g</tt></p>
</td>
<td>
<p>File has setgid bit set</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-k</tt></p>
</td>
<td>
<p>File has sticky bit set</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-T</tt></p>
</td>
<td>
<p>File is a text file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-B</tt></p>
</td>
<td>
<p>File is a binary file (opposite of <tt class="literal">-T</tt>)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-M</tt></p>
</td>
<td>
<p>Age of file (at startup) in days since modification</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-A</tt></p>
</td>
<td>
<p>Age of file (at startup) in days since last access</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-C</tt></p>
</td>
<td>
<p>Age of file (at startup) in days since inode change</p>
</td>
</tr>

</table><p>

</div>
<a name="perlnut2-CHP-4-SECT-5.9" /><div class="sect2">
<h3 class="sect2">4.5.9. Logical Operators</h3>

<p><a name="INDEX-558" /><a name="INDEX-559" /><a name="INDEX-560" /><a name="INDEX-561" /><a name="INDEX-562" /><a name="INDEX-563" /><a name="INDEX-564" /><a name="INDEX-565" />Perl provides the
<tt class="literal">&amp;&amp;</tt> (logical AND) and <tt class="literal">||</tt>
(logical OR) operators. They evaluate from left to right testing the
truth of the statement.
</p>

<a name="ch04-5-fm2xml" /><table border="1" cellpadding="3">




<tr>
<th>
<p>Example</p>
</th>
<th>
<p>Name</p>
</th>
<th>
<p>Result</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">$a &amp;&amp; $b</tt></p>
</td>
<td>
<p>And</p>
</td>
<td>
<p><tt class="literal">$a</tt> if <tt class="literal">$a</tt> is false,
<tt class="literal">$b</tt> otherwise
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">$a || $b</tt></p>
</td>
<td>
<p>Or</p>
</td>
<td>
<p><tt class="literal">$a</tt> if <tt class="literal">$a</tt> is true,
<tt class="literal">$b</tt> otherwise
</p>
</td>
</tr>

</table><p>

<p>For example, an oft-appearing idiom in Perl programs is: </p>

<blockquote><pre class="code">open(FILE, "somefile") || die "Cannot open somefile: $!\n";</pre></blockquote>

<p>In this case, Perl first evaluates the <tt class="literal">open</tt>
function. If the value is true (because <tt class="literal">somefile</tt>
was successfully opened), the execution of the <tt class="literal">die</tt>
function is unnecessary and is skipped.
</p>

<p>Perl also provides lower-precedence <tt class="literal">and</tt> and
<tt class="literal">or</tt> operators that are more readable.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-5.10" /><div class="sect2">
<h3 class="sect2">4.5.10. Bitwise Operators</h3>

<p><a name="INDEX-566" /><a name="INDEX-567" /><a name="INDEX-568" /><a name="INDEX-569" /><a name="INDEX-570" /><a name="INDEX-571" /><a name="INDEX-572" /><a name="INDEX-573" /><a name="INDEX-574" /><a name="INDEX-575" />Perl has bitwise AND, OR, and XOR
(exclusive OR) operators: <tt class="literal">&amp;</tt>,
<tt class="literal">|</tt>, and <tt class="literal">^</tt>. These operators work
differently on numeric values than they do on strings. If either
operand is a number, then both operands are converted to integers,
and the bitwise operation is performed between the two integers. If
both operands are strings, these operators do bitwise operations
between corresponding bits from the two strings.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-5.11" /><div class="sect2">
<h3 class="sect2">4.5.11. Miscellaneous Operators</h3>

<p>The following operators don't fit into any of the
previous categories.
</p>

<a name="perlnut2-CHP-4-SECT-5.11.1" /><div class="sect3">
<h3 class="sect3">4.5.11.1. Range operator</h3>

<p><a name="INDEX-576" /><a name="INDEX-577" /><a name="INDEX-578" />The <tt class="literal">..</tt> range
operator is really two different operators depending on the context.
In a list context, it returns a list of values counting (by ones)
from the left value to the right value.
</p>

<p>In a scalar context, <tt class="literal">..</tt> returns a Boolean value.
It is false as long as its left operand is false. Once the left
operand is true, the range operator stays true until the right
operand is true, after which the range operator becomes false again.
The right operand is not evaluated while the operator is in the false
state, and the left operand is not evaluated while the operator is in
the true state.
</p>

<p><a name="INDEX-579" /><a name="INDEX-580" /><a name="INDEX-581" />The alternate version of this
operator, <tt class="literal">...</tt>, does not test the right operand
immediately when the operator becomes true; it waits until the next
evaluation.
</p>

</div>

<a name="perlnut2-CHP-4-SECT-5.11.2" /><div class="sect3">
<h3 class="sect3">4.5.11.2. Conditional operator</h3>

<p><a name="INDEX-582" /><a name="INDEX-583" /><a name="INDEX-584" />Ternary <tt class="literal">?</tt>: is the
conditional operator. It works like an if-then-else statement but can
safely be embedded within other operations and functions:
</p>

<blockquote><pre class="code"><em class="replaceable"><tt>test_expr</em> ? <em class="replaceable">if_true_expr</em> : <em class="replaceable">if_false_expr</tt></em></pre></blockquote>

<p>If the <em class="replaceable"><tt>test_expr</tt></em> is true, only the
<em class="replaceable"><tt>if_true_expr</tt></em> is evaluated. Otherwise, only
the <em class="replaceable"><tt>if_false_expr</tt></em> is evaluated. Either
way, the value of the evaluated expression becomes the value of the
entire expression.
</p>

</div>

<a name="perlnut2-CHP-4-SECT-5.11.3" /><div class="sect3">
<h3 class="sect3">4.5.11.3. Comma operator</h3>

<p><a name="INDEX-585" /><a name="INDEX-586" />In a list
context, <tt class="literal">,</tt> is the list argument separator and
inserts both its arguments into the list. In scalar context,
<tt class="literal">,</tt> evaluates its left argument, throws that value
away, then evaluates its right argument and returns that value.
</p>

<p><a name="INDEX-587" /><a name="INDEX-588" />The
<tt class="literal">=&gt;</tt> operator is mostly just a synonym for the
comma operator. It's useful for documenting
arguments that come in pairs. It also forces any identifier to the
left of it to be interpreted as a string.
</p>

</div>

<a name="perlnut2-CHP-4-SECT-5.11.4" /><div class="sect3">
<h3 class="sect3">4.5.11.4. String operator</h3>

<p><a name="INDEX-589" /><a name="INDEX-590" /><a name="INDEX-591" /><a name="INDEX-592" />The concatenation operator
<tt class="literal">.</tt> is used to add strings together:
</p>

<blockquote><pre class="code">print 'abc' . 'def';        # Prints abcdef
print $a . $b;              # Concatenates the string values of $a and $b</pre></blockquote>

<p><a name="INDEX-593" /><a name="INDEX-594" />Binary <tt class="literal">x</tt> is the
string repetition operator. In scalar context, it returns a
concatenated string consisting of the left operand repeated the
number of times specified by the right operand:
</p>

<blockquote><pre class="code">print '-' x 80;                           # Prints row of dashes
print "\t" x ($tab/8), ' ' x ($tab%8);    # Tabs over</pre></blockquote>

<p>In list context, if the left operand is a list in parentheses, the
<tt class="literal">x</tt> works as a list replicator rather than a string
replicator. This is useful for initializing all the elements of an
array of indeterminate length to the same value:
</p>

<blockquote><pre class="code">@ones = (1) x 80;           # A list of 80 1s
@ones = (5) x @ones;        # Set all elements to 5</pre></blockquote>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4.4. Special Variables</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.6. Regular Expressions</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>