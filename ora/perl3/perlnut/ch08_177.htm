<html><head><title>POSIX (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_176.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_178.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.177. POSIX</h2>

<p><a name="INDEX-1539" />Provides access
to standard POSIX 1003.1 identifiers: functions, classes, and
constants. Can be <tt class="literal">use</tt> d to import one or multiple
symbols:
</p>

<blockquote><pre class="code">use POSIX;                        # Import all symbols
use POSIX qw(setsid);             # Import one symbol
use POSIX qw(:errno_h :fcntl_h);  # Import sets of symbols</pre></blockquote>

<p>Functions listed as C-specific are not implemented.</p>

<a name="ch08-517-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Function</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">_exit</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">_exit(2)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">abort</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">abort(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">abs</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">abs</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">access</tt></p>
</td>
<td>
<p>Determines accessibility of a file; returns <tt class="literal">undef</tt>
on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">acos</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">acos(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">alarm</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">alarm</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">asctime</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">asctime(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">asin</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">asin(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">assert</tt></p>
</td>
<td>
<p>Similar to C macro <tt class="literal">assert(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">atan</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">atan(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">atan2</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">atan2</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">atexit</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">END {}</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">atof</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">atoi</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">atol</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">bsearch</tt></p>
</td>
<td>
<p>Not supplied</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">calloc</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ceil</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">ceil(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">chdir</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">chdir</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">chmod</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">chmod</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">chown</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">chown</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">clearerr</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::clearerr</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">clock</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">clock(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">close</tt></p>
</td>
<td>
<p>Closes a file; returns <tt class="literal">undef</tt> on failure</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">closedir</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">closedir</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">cos</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">cos</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">cosh</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">cosh(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">creat</tt></p>
</td>
<td>
<p>Creates a new file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ctermid</tt></p>
</td>
<td>
<p>Generates pathname for the controlling terminal</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ctime</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">ctime(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">cuserid</tt></p>
</td>
<td>
<p>Gets user's login name</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">difftime</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">difftime(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">div</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">dup</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">dup(2)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">dup2</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">dup2(2)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">errno</tt></p>
</td>
<td>
<p>Returns the value of <tt class="literal">errno</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">execl</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">exec</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">execle</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">exec</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">execlp</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">exec</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">execv</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">exec</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">execve</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">exec</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">execvp</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">exec</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">exit</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">exit</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">exp</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">exp</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fabs</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">abs</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fclose</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::close</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fcntl</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">fcntl</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fdopen</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::new_from_fd</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">feof</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::eof</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ferror</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::error</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fflush</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::flush</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fgetc</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::getc</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fgetpos</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::getpos</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fgets</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::gets</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fileno</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::fileno</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">floor</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">floor(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fmod</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">fmod(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fopen</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::open</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fork</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">fork</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fpathconf</tt></p>
</td>
<td>
<p>Returns value of a configurable limit on a file or directory, or
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fprintf</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">printf</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fputc</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">print</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fputs</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">print</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fread</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">read</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">free</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">freopen</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">open</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">frexp</tt></p>
</td>
<td>
<p>Returns mantissa and exponent of a floating-point number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fscanf</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">&lt;&gt;</tt> and regular expressions</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fseek</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::seek</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fsetpos</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::setpos</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fstat</tt></p>
</td>
<td>
<p>Gets file status</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ftell</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::tell</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">fwrite</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">print</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getc</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">etc</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getchar</tt></p>
</td>
<td>
<p>Returns one character from STDIN</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getcwd</tt></p>
</td>
<td>
<p>Returns name of current working directory</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getegid</tt></p>
</td>
<td>
<p>Returns effective group ID (gid)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getenv</tt></p>
</td>
<td>
<p>Returns value of the specified environment variable</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">geteuid</tt></p>
</td>
<td>
<p>Returns the effective user ID (uid)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getgid</tt></p>
</td>
<td>
<p>Returns the user's real group ID (gid)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getgrgid</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">getgrgid</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getgrnam</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">getgrnam</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getgroups</tt></p>
</td>
<td>
<p>Returns IDs of the user's supplementary groups</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getlogin</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">getlogin</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getpgrp</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">getpgrp</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getpid</tt></p>
</td>
<td>
<p>Returns ID of the process (pid)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getppid</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">getppid</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getpwnam</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">getpwnam</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getpwuid</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">getpwuid</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">gets</tt></p>
</td>
<td>
<p>Returns one line from STDIN</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">getuid</tt></p>
</td>
<td>
<p>Returns user's ID (uid)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">gmtime</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">gmtime</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isalnum</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isalpha</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isatty</tt></p>
</td>
<td>
<p>Returns Boolean indicating whether the specified filehandle is
connected to a TTY
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">iscntrl</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isdigit</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isgraph</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">islower</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isprint</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ispunct</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isspace</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isupper</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">isxdigit</tt></p>
</td>
<td>
<p>Identical to C function, but can apply to one character or a whole
string
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">kill</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">kill</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">labs</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">abs</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ldexp</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">ldexp(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ldiv</tt></p>
</td>
<td>
<p>C-specific; use division operator (<tt class="literal">/</tt>) and
Perl's <tt class="literal">int</tt> function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">link</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">link</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">localeconv</tt></p>
</td>
<td>
<p>Gets numeric formatting information; returns reference to a hash
containing the current locale formatting values
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">localtime</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">localtime</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">log</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">log</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">log10</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">log10(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">longjmp</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">die</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">lseek</tt></p>
</td>
<td>
<p>Moves the read/write file pointer; returns <tt class="literal">undef</tt>
on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">malloc</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mblen</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">mblen(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mbstowcs</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">mbstowcs(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mbtowc</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">mbtowc(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">memchr</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">index</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">memcmp</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">eq</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">memcpy</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">=</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">memmove</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">=</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">memset</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">x</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mkdir</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">mkdir</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mkfifo</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">mkfifo(2)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">mktime</tt></p>
</td>
<td>
<p>Converts date/time information to a calendar time; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">modf</tt></p>
</td>
<td>
<p>Returns integral and fractional parts of a floating-point number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">nice</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">nice(3)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">offsetof</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">open</tt></p>
</td>
<td>
<p>Opens file for reading or writing; returns <tt class="literal">undef</tt>
on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">opendir</tt></p>
</td>
<td>
<p>Opens directory for reading; returns <tt class="literal">undef</tt> on
failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">pathconf</tt></p>
</td>
<td>
<p>Retrieves value of a configurable limit on a file or directory;
returns <tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">pause</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">pause(3)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">perror</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">perror(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">pipe</tt></p>
</td>
<td>
<p>Creates an interprocess channel</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">pow</tt></p>
</td>
<td>
<p>Computes <tt class="literal">$x</tt> raised to the power
<tt class="literal">$exponent</tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">printf</tt></p>
</td>
<td>
<p>Prints specified arguments to STDOUT</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">putc</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">print</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">putchar</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">print</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">puts</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">print</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">qsort</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">sort</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">raise</tt></p>
</td>
<td>
<p>Sends specified signal to current process</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">rand</tt></p>
</td>
<td>
<p>Nonportable; use Perl's <tt class="literal">rand</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">read</tt></p>
</td>
<td>
<p>Reads from a file; returns <tt class="literal">undef</tt> on failure</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">readdir</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">readdir</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">realloc</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">remove</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">unlink</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">rename</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">rename</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">rewind</tt></p>
</td>
<td>
<p>Seeks to beginning of file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">rewinddir</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">rewinddir</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">rmdir</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">rmdir</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">scanf</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">&lt;&gt;</tt> and regular expressions</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">setgid</tt></p>
</td>
<td>
<p>Sets real group ID for this process</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">setjmp</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">eval {}</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">setlocale</tt></p>
</td>
<td>
<p>Modifies and queries program's locale</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">setpgid</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">setpgid(2)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">setsid</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">setsid(8)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">setuid</tt></p>
</td>
<td>
<p>Sets real user ID for this process</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sigaction</tt></p>
</td>
<td>
<p>Detailed signal management; returns <tt class="literal">undef</tt> on
failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">siglongjmp</tt></p>
</td>
<td>
<p>C-specific; use Perl's <tt class="literal">die</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sigpending</tt></p>
</td>
<td>
<p>Examines blocked, pending signals; returns <tt class="literal">undef</tt>
on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sigprocmask</tt></p>
</td>
<td>
<p>Changes and/or examines this process's signal mask;
returns <tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sigsetjmp</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">eval {}</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sigsuspend</tt></p>
</td>
<td>
<p>Installs signal mask and suspends process until signal arrives;
returns <tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sin</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">sin</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sinh</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">sinh(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sleep</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">sleep</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sprintf</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">sprintf</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sqrt</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">sqrt</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">srand</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">srand</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sscanf</tt></p>
</td>
<td>
<p>C-specific; use regular expressions</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">stat</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">stat</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strcat</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">.=</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strchr</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">index</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strcmp</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">eq</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strcoll</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">strcoll(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strcpy</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">=</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strcspn</tt></p>
</td>
<td>
<p>C-specific; use regular expressions</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strerror</tt></p>
</td>
<td>
<p>Returns error string for the specified <tt class="literal">errno</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strftime</tt></p>
</td>
<td>
<p>Converts date and time to string and returns the string</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strlen</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">length</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strncat</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">.=</tt> and/or <tt class="literal">substr</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strncmp</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">eq</tt> and/or <tt class="literal">substr</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strncpy</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">=</tt> and/or <tt class="literal">substr</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">stroul</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strpbrk</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strrchr</tt></p>
</td>
<td>
<p>C-specific; use <tt class="literal">rindex</tt> and/or
<tt class="literal">substr</tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strspn</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strstr</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">index</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strtod</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strtok</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strtol</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strtoul</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">strxfrm</tt></p>
</td>
<td>
<p>String transformation; returns the transformed string</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">sysconf</tt></p>
</td>
<td>
<p>Retrieves values of system configurable variables; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">system</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">system</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tan</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">tan(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tanh</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">tanh(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tcdrain</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">tcdrain(3)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tcflow</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">tcflow(3)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tcflush</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">tcflush(3)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tcgetpgrp</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">tcgetpgrp(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tcsendbreak</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">tcsendbreak(3)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tcsetpgrp</tt></p>
</td>
<td>
<p>Similar to C function <tt class="literal">tcsetpgrp(3)</tt>; returns
<tt class="literal">undef</tt> on failure
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">time</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">time</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">times</tt></p>
</td>
<td>
<p>Returns, in clock ticks, elapsed realtime since a point in the past,
user and system times for this process, and user and system times for
child processes
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tmpfile</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::new_tmpfile</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tmpnam</tt></p>
</td>
<td>
<p>Returns a name for a temporary file</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tolower</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">lc</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">toupper</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">uc</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ttyname</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">ttyname(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tzname</tt></p>
</td>
<td>
<p>Retrieves time conversion information from the
<tt class="literal">tzname</tt> variable
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">tzset</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">tzset(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">umask</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">umask</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">uname</tt></p>
</td>
<td>
<p>Gets name of current operating system</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ungetc</tt></p>
</td>
<td>
<p>Uses method <tt class="literal">FileHandle::ungetc</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">unlink</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">unlink</tt>
function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">utime</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">utime</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">vfprintf</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">vprintf</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">vsprintf</tt></p>
</td>
<td>
<p>C-specific</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">wait</tt></p>
</td>
<td>
<p>Identical to Perl's <tt class="literal">wait</tt> function</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">waitpid</tt></p>
</td>
<td>
<p>Waits for child process to change state; identical to
Perl's <tt class="literal">waitpid</tt> function
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">wcstombs</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">wcstombs(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">wctomb</tt></p>
</td>
<td>
<p>Identical to C function <tt class="literal">wctomb(3)</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">write</tt></p>
</td>
<td>
<p>Writes to file; returns <tt class="literal">undef</tt> on failure</p>
</td>
</tr>

</table><p>

<p>The following sections show the classes that are defined and their
methods.
</p>

<a name="perlnut2-CHP-8-SECT-177.1" /><div class="sect2">
<h3 class="sect2">8.177.1. POSIX::SigAction</h3>



<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">sigaction</em> = POSIX::SigAction-&gt;new(<em class="replaceable">sigsub</em>, <em class="replaceable">sigset</em>, <em class="replaceable">flags</em>)
</pre><p>Constructor. Creates a new POSIX::SigAction object. Takes the
following arguments:
</p><dl>
<dt><i><em class="replaceable"><tt>sigsub</tt></em></i></dt>
<dd>
The fully qualified name of a signal-handler subroutine</p>
</dd>


<dt><i><em class="replaceable"><tt>sigset</tt></em></i></dt>
<dd>
A POSIX::SigSet object</p>
</dd>


<dt><i><em class="replaceable"><tt>flags</tt></em></i></dt>
<dd>
The <tt class="literal">sa_flags</tt></p>
</dd>

</dl></div>
</div>
<a name="perlnut2-CHP-8-SECT-177.2" /><div class="sect2">
<h3 class="sect2">8.177.2. POSIX::SigSet</h3>



<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">sigset</em> = POSIX::SigSet-&gt;new[(  )]
</pre><p>Constructor. Creates new SigSet object. Optional arguments are used
to initialize the set.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>addset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">sigset</em>-&gt;addset(<em class="replaceable">sig</em>)
</pre><p>Adds signal <em class="replaceable">sig</em> to SigSet object; returns
<tt class="literal">undef</tt> on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>delset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">sigset</em>-&gt;delset(<em class="replaceable">sig</em>)
</pre><p>Removes signal <em class="replaceable">sig</em> from SigSet object;
returns <tt class="literal">undef</tt> on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>emptyset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">sigset</em>-&gt;emptyset(  )
</pre><p>Initializes SigSet object to empty; returns <tt class="literal">undef</tt>
on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>fillset</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">sigset</em>-&gt;fillset(  )
</pre><p>Initializes SigSet object to include all signals; returns
<tt class="literal">undef</tt> on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>ismember</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">sigset</em>-&gt;ismember(<em class="replaceable">sig</em>)
</pre><p>Tests SigSet object for a specific signal
<em class="replaceable"><tt>sig</tt></em>.
</p></div>

</div>
<a name="perlnut2-CHP-8-SECT-177.3" /><div class="sect2">
<h3 class="sect2">8.177.3. POSIX::Termios</h3>



<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>new</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em> = POSIX::Termios-&gt;new
</pre><p>Constructor. Creates new Termios object.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getattr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;getattr([<em class="replaceable">fd</em>])
</pre><p>Gets terminal control attributes for a given
<em class="replaceable"><tt>fd</tt></em> (default is <tt class="literal">0</tt> for
STDIN); returns <tt class="literal">undef</tt> on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getcc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">c_cc</em>[<em class="replaceable">ind</em>] = $<em class="replaceable">termios</em>-&gt;getcc(<em class="replaceable">ind</em>)
</pre><p>Retrieves value from the <em class="replaceable">c_cc</em> field of a
Termios object. Takes index <em class="replaceable"><tt>ind</tt></em> since
<tt class="literal">@</tt><em class="replaceable"><tt>c_cc</tt></em> is an array.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getcflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">c_cflag</em> = $<em class="replaceable">termios</em>-&gt;getcflag
</pre><p>Retrieves <em class="replaceable">c_cflag</em> field of a Termios
object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getiflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">c_iflag</em> = $<em class="replaceable">termios</em>-&gt;getiflag
</pre><p>Retrieves <em class="replaceable">c_iflag</em> field of a Termios
object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getispeed</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ispeed</em> = $<em class="replaceable">termios</em>-&gt;getispeed
</pre><p>Retrieves input baud rate.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getlflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
getlflag $c_lflag = $termios-&gt;getlflag
</pre><p>Retrieves <em class="replaceable">c_lflag</em> field of a Termios
object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getoflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">c_oflag</em> = $<em class="replaceable">termios</em>-&gt;getoflag
</pre><p>Retrieves <em class="replaceable">c_oflag</em> field of a Termios
object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>getospeed</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">ospeed</em> = $<em class="replaceable">termios</em>-&gt;getospeed
</pre><p>Retrieves output baud rate.</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setattr</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setattr(<em class="replaceable">fd</em>, <em class="replaceable">option</em>)
</pre><p>Sets terminal control attributes for a given
<em class="replaceable"><tt>fd</tt></em>; returns <tt class="literal">undef</tt> on
failure. <em class="replaceable"><tt>option</tt></em> tells when to set the
attributes and is one of <tt class="literal">TCSADRAIN</tt>,
<tt class="literal">TCSAFLUSH</tt>, or <tt class="literal">TCSANOW</tt>.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setcc</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setcc(<em class="replaceable">ind</em>, <em class="replaceable">value</em>)
</pre><p>Sets <em class="replaceable">value</em> in the
<em class="replaceable"><tt>c_cc</tt></em> field, indexed by
<em class="replaceable"><tt>ind</tt></em>, of a Termios object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setcflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setcflag(<em class="replaceable">flag</em>)
</pre><p>Sets <em class="replaceable">flag</em> in the
<em class="replaceable"><tt>c_cflag</tt></em> field of a Termios object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setiflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setiflag(<em class="replaceable">flag</em>)
</pre><p>Sets <em class="replaceable">flag</em> in the
<em class="replaceable"><tt>c_iflag</tt></em> field of a Termios object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setispeed</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setispeed(<em class="replaceable">value</em>)
</pre><p>Sets input baud rate to <em class="replaceable">value</em>; returns
<tt class="literal">undef</tt> on failure.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setlflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setlflag(<em class="replaceable">flag</em>)
</pre><p>Sets <em class="replaceable">flag</em> in the
<em class="replaceable"><tt>c_lflag</tt></em> field of a Termios object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setoflag</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setoflag(<em class="replaceable">flag</em>)
</pre><p>Sets <em class="replaceable">flag</em> in the
<em class="replaceable"><tt>c_oflag</tt></em> field of a Termios object.
</p></div>

<div class="refentry"><table width="515" border="0" cellpadding="5"><tr><td align="left"><font size="+1"><b>setospeed</b></font></td><td align="right"><i></i></td></tr></table><hr width="515" size="3" noshade="true" align="left" color="black" /><pre>
$<em class="replaceable">termios</em>-&gt;setospeed(<em class="replaceable">value</em>)
</pre><p>Sets the output baud rate to <em class="replaceable">value</em>;
returns <tt class="literal">undef</tt> on failure.
</p></div>

</div>
<a name="perlnut2-CHP-8-SECT-177.4" /><div class="sect2">
<h3 class="sect2">8.177.4. Constants</h3>

<p>The following constants are associated with the Termios class:</p>

<dl>
<dt><i>Baud rate values</i></dt>
<dd>
<blockquote><pre class="code">B0  B75  B134 B200 B600  B1800 B4800 B19200
B50 B110 B150 B300 B1200 B2400 B9600 B38400</pre></blockquote>
</dd><dt><i><em class="replaceable"><tt>c_cc index</em> <em class="emphasis">values</tt></em></i></dt>
<dd>
<blockquote><pre class="code">VEOF VERASE VKILL VSUSP  VSTOP VTIME 
VEOL VINTR  VQUIT VSTART VMIN  NCCS</pre></blockquote>
</dd><dt><i><em class="replaceable"><tt>c_cflag</em> <em class="emphasis">field values</tt></em></i></dt>
<dd>
<blockquote><pre class="code">CLOCAL CSIZE CS6 CS8    HUPCL  PARODD
CREAD  CS5   CS7 CSTOPS PARENB</pre></blockquote>
</dd><dt><i><em class="replaceable"><tt>c_iflag</em> <em class="emphasis">field values</tt></em></i></dt>
<dd>
<blockquote><pre class="code">BRKINT IGNBRK IGNPAR INPCK  IXOFF PARMRK
ICRNL  IGNCR  INLCR  ISTRIP IXON</pre></blockquote>
</dd><dt><i><em class="replaceable"><tt>c_lflag</em> <em class="emphasis">field values</tt></em></i></dt>
<dd>
<blockquote><pre class="code">ECHO  ECHONL ISIG  
ECHOE ICANON NOFLSH
ECHOK IEXTEN TOSTOP</pre></blockquote>
</dd><dt><i><em class="replaceable"><tt>c_oflag</em> <em class="emphasis">field values</tt></em></i></dt>
<dd>
<blockquote><pre class="code">OPOST</pre></blockquote>
</dd><dt><i>Terminal interface values</i></dt>
<dd>
<blockquote><pre class="code">TCSADRAIN TCIOFLUSH TCIFLUSH 
TCSANOW   TCOFLUSH  TCSAFLUSH 
TCOON     TCION     TCIOFF</pre></blockquote>

</dd>

</dl>
<p>The following are other constants defined in the POSIX module:</p>

<dl>
<dt><i>Pathname constants</i></dt>
<dd>
<blockquote><pre class="code">_PC_CHOWN_RESTRICTED  _PC_LINK_MAX  _PC_MAX_CANON
_PC_MAX_INPUT         _PC_NAME_MAX  _PC_NO_TRUNC
_PC_PATH_MAX          _PC_PIPE_BUF  _PC_VDISABLE</pre></blockquote>
</dd><dt><i>POSIX constants</i></dt>
<dd>
<blockquote><pre class="code">_POSIX_ARG_MAX      _POSIX_CHILD_MAX  _POSIX_CHOWN_RESTRICTED 
_POSIX_JOB_CONTROL  _POSIX_LINK_MAX   _POSIX_MAX_CANON
_POSIX_MAX_INPUT    _POSIX_NAME_MAX   _POSIX_NGROUPS_MAX
_POSIX_NO_TRUNC     _POSIX_OPEN_MAX   _POSIX_PATH_MAX
_POSIX_PIPE_BUF     _POSIX_SAVED_IDS  _POSIX_SSIZE_MAX
_POSIX_STREAM_MAX   _POSIX_TZNAME_MAX _POSIX_VDISABLE  
_POSIX_VERSION</pre></blockquote>
</dd><dt><i>System configuration</i></dt>
<dd>
<blockquote><pre class="code">_SC_ARG_MAX      _SC_CHILD_MAX  _SC_CLK_TCK    _SC_JOB_CONTROL
_SC_NGROUPS_MAX  _SC_OPEN_MAX   _SC_SAVED_IDS  _SC_STREAM_MAX
_SC_TZNAME_MAX   _SC_VERSION</pre></blockquote>
</dd><dt><i>Error constants</i></dt>
<dd>
<blockquote><pre class="code">E2BIG   EACCES  EAGAIN    EBADF   EBUSY         ECHILD  EDEADLK
EDOM    EEXIST  EFAUL     EFBIG   EINTR         EINVAL  
EIO     EISDIR  EMFILE    EMLINK  ENAMETOOLONG  ENFILE  
ENODE   ENOENT  ENOEXEC   ENOLCK  ENOMEM        ENOSPC  
ENOSYS  ENOTDIR ENOTEMPTY ENOTTY  ENXIO         EPERM  
EPIPE   ERANGE  EROFS     ESPIPE  ESRCH         EXDEV</pre></blockquote>
</dd><dt><i>File control constants</i></dt>
<dd>
<blockquote><pre class="code">FD_CLOEXEC  F_DUPFD    F_GETFD   F_GETFL  F_GETLK   F_OK
F_RDLCK     F_SETFD    F_SETFL   F_SETLK  F_SETLKW  F_UNLCK
F_WRLCK     O_ACCMODE  O_APPEND  O_CREAT  O_EXCL    O_NOCTTY
O_NONBLOCK  O_RDONLY   O_RDWR    O_TRUNC  O_WRONLY</pre></blockquote>
</dd><dt><i>Floating-point constants</i></dt>
<dd>
<blockquote><pre class="code">DBL_DIG         DBL_EPSILON     DBL_MANT_DIG  DBL_MAX
DBL_MAX_10_EXP  DBL_MAX_EXP     DBL_MIN       DBL_MIN_10_EXP
DBL_MIN_EXP     FLT_DIG         FLT_EPSILON   FLT_MANT_DIG
FLT_MAX         FLT_MAX_10_EXP  FLT_MAX_EXP   FLT_MIN
FLT_MIN_10_EXP  FLT_MIN_EXP     FLT_RADIX     FLT_ROUNDS
LDBL_DIG        LDBL_EPSILON    LDBL_MANT_DIG LDBL_MAX
LDBL_MAX_10_EXP LDBL_MAX_EXP    LDBL_MIN      LDBL_MIN_10_EXP
LDBL_MIN_EXP</pre></blockquote>
</dd><dt><i>Limit constants</i></dt>
<dd>
<blockquote><pre class="code">ARG_MAX    CHAR_BIT  CHAR_MAX    CHAR_MIN    CHILD_MAX
INT_MAX    INT_MIN   LINK_MAX    LONG_MAX    LONG_MIN
MAX_CANON  MAX_INPUT MB_LEN_MAX  NAME_MAX    NGROUPS_MAX
OPEN_MAX   PATH_MAX  PIPE_BUF    SCHAR_MAX   SCHAR_MIN
SHRT_MAX   SHRT_MIN  SSIZE_MAX   STREAM_MAX  TZNAME_MAX
UCHAR_MAX  UINT_MAX  ULONG_MAX   USHRT_MAX</pre></blockquote>
</dd><dt><i>Locale constants</i></dt>
<dd>
<blockquote><pre class="code">LC_ALL  LC_COLLATE  LC_CTYPE  LC_MONETARY  LC_NUMERIC  LC_TIME</pre></blockquote>
</dd><dt><i>Math constants</i></dt>
<dd>
<blockquote><pre class="code">HUGE_VAL</pre></blockquote>
</dd><dt><i>Signal constants</i></dt>
<dd>
<blockquote><pre class="code">SA_NOCLDSTOP SIGABRT    SIGALRM    SIGCHLD  SIGCONT  SIGFPE
SIGHUP       SIGILL     SIGINT     SIGKILL  SIGPIPE  SIGQUIT
SIGSEGV      SIGSTOP    SIGTERM    SIGTSTP  SIGTTIN  SIGTTOU
SIGUSR1      SIGUSR2    SIG_BLOCK  SIG_DFL  SIG_ERR  SIG_IGN
SIG_SETMASK  SIG_UNBLOCK</pre></blockquote>
</dd><dt><i>Stat constants</i></dt>
<dd>
<blockquote><pre class="code">S_IRGRP  S_IROTH  S_IRUSR  S_IRWXG  S_IRWXO  S_IRWXU  S_ISGID
S_ISUID  S_IWGRP  S_IWOTH  S_IWUSR  S_IXGRP  S_IXOTH  S_IXUSR</pre></blockquote>
</dd><dt><i>Stat macros</i></dt>
<dd>
<blockquote><pre class="code">S_ISBLK  S_ISCHR  S_ISDIR  S_ISFIFO  S_ISREG</pre></blockquote>
</dd><dt><i>Stdlib constants</i></dt>
<dd>
<blockquote><pre class="code">EXIT_FAILURE  EXIT_SUCCESS  MB_CUR_MAX  RAND_MAX</pre></blockquote>
</dd><dt><i>Stdio constants</i></dt>
<dd>
<blockquote><pre class="code">BUFSIZ  EOF  FILENAME_MAX  L_ctermid  L_cuserid  L_tmpname  TMP_MAX</pre></blockquote>
</dd><dt><i>Time constants</i></dt>
<dd>
<blockquote><pre class="code">CLK_TCK  CLOCKS_PER_SEC</pre></blockquote>
</dd><dt><i>Unistd constants</i></dt>
<dd>
<blockquote><pre class="code">R_OK   SEEK_CUR  SEEK_END       SEEK_SET  STDIN_FILENO
STDOUT_FILENO    STRERR_FILENO  W_OK      X_OK</pre></blockquote>
</dd><dt><i>Wait constants</i></dt>
<dd>
<blockquote><pre class="code">WNOHANG  WUNTRACED</pre></blockquote>
</dd><dt><i>Wait macros</i></dt>
<dd>
<blockquote><pre class="code">WIFEXITED  WEXITSTATUS  WIFSIGNALED  WTERMSIG   WIFSTOPPED   WSTOPSIG</pre></blockquote>

</dd>

</dl>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_176.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_178.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.176. Pod::Text</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.178. re</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>