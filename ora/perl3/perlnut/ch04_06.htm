<html><head><title>Regular Expressions (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.6. Regular Expressions</h2>
<a name="INDEX-595" />
<p><a name="INDEX-596" />Regular expressions are used several
ways in Perl. They're used in conditionals to
determine whether a string matches a particular pattern.
They're also used to find patterns in strings and
replace the match with something else.
</p>

<p><a name="INDEX-597" /><a name="INDEX-598" />The
ordinary pattern match operator looks like
<tt class="literal">/</tt><em class="replaceable"><tt>pattern</tt></em><tt class="literal">/</tt>.
It matches against the <tt class="literal">$_</tt> variable by default. If
the pattern is found in the string, the operator returns true
(<tt class="literal">1</tt>); if there is no match, a false value
("") is returned.
</p>

<p><a name="INDEX-599" /><a name="INDEX-600" />The substitution operator looks like
<tt class="literal">s/</tt><em class="replaceable"><tt>pattern</em><tt class="literal">/</tt><em class="replaceable">replace</tt></em><tt class="literal">/</tt>.
This operator searches <tt class="literal">$_</tt> by default. If it finds
the specified <em class="replaceable"><tt>pattern</tt></em>, it is replaced with
the string in <em class="replaceable"><tt>replace</tt></em>. If
<em class="replaceable"><tt>pattern</tt></em> is not matched, nothing happens.
</p>

<p>You may specify a variable other than <tt class="literal">$_</tt> with the
<tt class="literal">=~</tt> binding operator (or the negated
<tt class="literal">!~</tt> binding operator, which returns true if the
pattern is not matched). For example:
</p>

<blockquote><pre class="code">$text =~ /sampo/;</pre></blockquote>

<a name="perlnut2-CHP-4-SECT-6.1" /><div class="sect2">
<h3 class="sect2">4.6.1. Pattern-Matching Operators</h3>

<p><a name="INDEX-601" /><a name="INDEX-602" />The following list defines
Perl's pattern-matching operators. Some of the
operators have alternative
"quoting" schemes and have a set of
modifiers that can be placed directly after the operators to affect
the match operation in some way.
</p>

<dl>
<dt><b><tt class="literal">m/</tt><em class="replaceable">pattern</em><tt class="literal">/gimosxe</tt></b></dt>
<dd>
Searches a string for a pattern match. Modifiers
are<a name="INDEX-603" /><a name="INDEX-604" /><a name="INDEX-605" /><a name="INDEX-606" /><a name="INDEX-607" /><a name="INDEX-608" />:
</p>

<a name="ch04-6-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Modifier</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">g</tt></p>
</td>
<td>
<p>Match globally, i.e., find all occurrences.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">i</tt></p>
</td>
<td>
<p>Do case-insensitive pattern matching.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">m</tt></p>
</td>
<td>
<p>Treat string as multiple lines.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">o</tt></p>
</td>
<td>
<p>Compile pattern only once.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>Treat string as single line.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">x</tt></p>
</td>
<td>
<p>Use extended regular expressions.</p>
</td>
</tr>

</table><p>


<p>If <tt class="literal">/</tt> is the delimiter, then the initial
<tt class="literal">m</tt> is optional. With <tt class="literal">m</tt>, you can
use any pair of non-alphanumeric, non-whitespace characters as
delimiters.
</p>
</dd>


<dt><b><tt class="literal">?</tt><em class="replaceable">pattern</em><tt class="literal">?</tt></b></dt>
<dd>
<a name="INDEX-609" /><a name="INDEX-610" />This operator is just like the
<tt class="literal">m/</tt><em class="replaceable"><tt>pattern</tt></em><tt class="literal">/</tt>
search, except it matches only once.
</p>
</dd>


<dt><b><tt class="literal">qr/</tt><em class="replaceable">pattern</em><tt class="literal">/imosx</tt></b></dt>
<dd>
<a name="INDEX-611" />Creates a precompiled regular
expression from <em class="replaceable"><tt>pattern</tt></em>, which can be
passed around in variables and interpolated into other regular
expressions. The modifiers are the same as those for
<tt class="literal">m//</tt> above.
</p>
</dd>


<dt><b><tt class="literal">s/</tt><em class="replaceable">pattern</em><tt class="literal">/</tt><em class="replaceable">replacement</em><tt class="literal">/egimosx</tt></b></dt>
<dd>
<a name="INDEX-612" /><a name="INDEX-613" />Searches a string for
<em class="replaceable"><tt>pattern</tt></em> and replaces any match with the
<em class="replaceable"><tt>replacement</tt></em> text. Returns the number of
substitutions made, which can be more than one with the
<tt class="literal">/g</tt> modifier. Otherwise, it returns false
(<tt class="literal">0</tt>). If no string is specified via the
<tt class="literal">=~</tt> or <tt class="literal">!~</tt> operator, the
<tt class="literal">$_</tt> variable is searched and modified. Modifiers
are:
</p>

<a name="ch04-7-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Modifier</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">e</tt></p>
</td>
<td>
<p>Evaluate the right side as an expression.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">g</tt></p>
</td>
<td>
<p>Replace globally, i.e., all occurrences.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">cg</tt></p>
</td>
<td>
<p>Continue search after <tt class="literal">g</tt> failed. No longer
supported for <tt class="literal">s///</tt> as of Perl 5.8.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">i</tt></p>
</td>
<td>
<p>Do case-insensitive pattern matching.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">m</tt></p>
</td>
<td>
<p>Treat string as multiple lines.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">o</tt></p>
</td>
<td>
<p>Compile pattern only once.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>Treat string as single line.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">x</tt></p>
</td>
<td>
<p>Use extended regular expressions.</p>
</td>
</tr>

</table><p>

<p>Any non-alphanumeric, non-whitespace delimiter may replace the
slashes. If single quotes are used, no interpretation is done on the
replacement string (the <tt class="literal">/e</tt> modifier overrides
this, however).
</p>
</dd>


<dt><b><tt class="literal">tr/</tt><em class="replaceable">pattern1</em><tt class="literal">/</tt><em class="replaceable">pattern2</em><tt class="literal">/cds</tt></b></dt>
<dt><b><tt class="literal">y/</tt><em class="replaceable">pattern1</em><tt class="literal">/</tt><em class="replaceable">pattern2</em><tt class="literal">/cds</tt></b></dt>
<dd>
<a name="INDEX-614" /><a name="INDEX-615" />This operator scans a string character
by character and replaces all occurrences of the characters found in
<em class="replaceable"><tt>pattern1</tt></em> with the corresponding character
in <em class="replaceable"><tt>pattern2</tt></em>. It returns the number of
characters replaced or deleted. If no string is specified via the
<tt class="literal">=~</tt> or <tt class="literal">!~</tt> operator, the
<tt class="literal">$_</tt> string is translated. Modifiers are:
</p>


<a name="ch04-8-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Modifier</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">c</tt></p>
</td>
<td>
<p>Complement <em class="replaceable"><tt>pattern1</tt></em>.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">d</tt></p>
</td>
<td>
<p>Delete found but unreplaced characters.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>Squash duplicate replaced characters.</p>
</td>
</tr>

</table><p>
</dd>

</dl>
</div>
<a name="perlnut2-CHP-4-SECT-6.2" /><div class="sect2">
<h3 class="sect2">4.6.2. Regular Expression Syntax</h3>

<p><a name="INDEX-616" /><a name="INDEX-617" /><a name="INDEX-618" />The simplest kind of
regular expression is a literal string. More complicated patterns
involve the use of <em class="emphasis">metacharacters</em> to describe
all the different choices and variations that you want to build into
a pattern. Metacharacters don't match themselves,
but describe something else. The metacharacters are:
</p>

<a name="ch04-9-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Metacharacter</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">\</tt></p>
</td>
<td>
<p>Escapes the character(s) immediately following it</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">.</tt></p>
</td>
<td>
<p>Matches any single character except a newline (unless
<tt class="literal">/s</tt> is used)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">^</tt></p>
</td>
<td>
<p>Matches at the beginning of the string (or line, if
<tt class="literal">/m</tt> is used)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">$</tt></p>
</td>
<td>
<p>Matches at the end of the string (or line, if <tt class="literal">/m</tt>
is used)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">*</tt></p>
</td>
<td>
<p>Matches the preceding element 0 or more times</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">+</tt></p>
</td>
<td>
<p>Matches the preceding element 1 or more times</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">?</tt></p>
</td>
<td>
<p>Matches the preceding element 0 or 1 times</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">{...}</tt></p>
</td>
<td>
<p>Specifies a range of occurrences for the element preceding it</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">[...]</tt></p>
</td>
<td>
<p>Matches any one of the class of characters contained within the
brackets
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">(...)</tt></p>
</td>
<td>
<p>Groups regular expressions</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">|</tt></p>
</td>
<td>
<p>Matches either the expression preceding or following it</p>
</td>
</tr>

</table><p>

<p><a name="INDEX-619" /><a name="INDEX-620" />The <tt class="literal">.</tt> (single
dot) is a wildcard character. When used in a regular expression, it
can match any single character. The exception is the newline
character (<tt class="literal">\n</tt>), except when you use the
<tt class="literal">/s</tt> modifier on the pattern match operator. This
modifier treats the string to be matched against as a single
"long" string with embedded
newlines.
</p>

<p><a name="INDEX-621" /><a name="INDEX-622" /><a name="INDEX-623" /><a name="INDEX-624" /><a name="INDEX-625" />The
<tt class="literal">^</tt> and <tt class="literal">$</tt> metacharacters are used
as anchors in a regular expression. The <tt class="literal">^</tt> matches
the beginning of a line. This character should appear only at the
beginning of an expression to match the beginning of the line. The
exception to this is when the <tt class="literal">/m</tt> (multiline)
modifier is used, in which case it will match at the beginning of the
string and after every newline (except the last, if there is one).
Otherwise, <tt class="literal">^</tt> will match itself, unescaped,
anywhere in a pattern, except if it is the first character in a
bracketed character class, in which case it negates the class.
</p>

<p>Similarly, <tt class="literal">$</tt> will match the end of a line (just
before a newline character) only if it is at the end of a pattern,
unless <tt class="literal">/m</tt> is used, in which case it matches just
before every newline and at the end of a string. You need to escape
<tt class="literal">$</tt> to match a literal dollar sign in all cases,
because if <tt class="literal">$</tt> isn't at the end of
a pattern (or placed right before a <tt class="literal">)</tt> or
<tt class="literal">]</tt>), Perl will attempt to do variable
interpretation. The same holds true for the <tt class="literal">@</tt>
sign, which Perl will interpret as an array variable start unless it
is backslashed.
</p>

<p><a name="INDEX-626" /><a name="INDEX-627" /><a name="INDEX-628" /><a name="INDEX-629" /><a name="INDEX-630" /><a name="INDEX-631" />The <tt class="literal">*</tt>,
<tt class="literal">+</tt>, and <tt class="literal">?</tt> metacharacters are
called <em class="emphasis">quantifiers</em>. They specify the number of
times to match something. They act on the element immediately
preceding them, which could be a single character (including the
<tt class="literal">.</tt>), a grouped expression in parentheses, or a
character class. The <tt class="literal">{...}</tt> construct is a
generalized modifier. You can put two numbers separated by a comma
within the braces to specify minimum and maximum numbers that the
preceding element can match.
</p>

<p><a name="INDEX-632" /><a name="INDEX-633" />Parentheses are used
to group characters or expressions. They also have the side effect of
remembering what they matched so you can recall and reuse patterns
with a special group of variables.
</p>

<p><a name="INDEX-634" /><a name="INDEX-635" />The
<tt class="literal">|</tt> is the alternation operator in regular
expressions. It matches either what's on its left
side or right side. It does not affect only single characters. For
example:
</p>

<blockquote><pre class="code">/you|me|him|her/</pre></blockquote>

<p>looks for any of the four words. You should use parentheses to
provide boundaries for alternation:
</p>

<blockquote><pre class="code">/And(y|rew)/</pre></blockquote>

<p>This will match either "Andy" or
"Andrew".
</p>

</div>
<a name="perlnut2-CHP-4-SECT-6.3" /><div class="sect2">
<h3 class="sect2">4.6.3. Escaped Sequences</h3>

<p><a name="INDEX-636" /><a name="INDEX-637" /><a name="INDEX-638" /><a name="INDEX-639" /><a name="INDEX-640" /><a name="INDEX-641" /><a name="INDEX-642" /><a name="INDEX-643" /><a name="INDEX-644" /><a name="INDEX-645" /><a name="INDEX-646" /><a name="INDEX-647" />The
following table lists the backslashed representations of characters
that you can use in regular expressions: <a name="INDEX-648" /><a name="INDEX-649" />
</p>

<a name="ch04-10-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Code</p>
</th>
<th>
<p>Matches</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">\a</tt></p>
</td>
<td>
<p>Alarm (beep)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\n</tt></p>
</td>
<td>
<p>Newline</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\r</tt></p>
</td>
<td>
<p>Carriage return</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\t</tt></p>
</td>
<td>
<p>Tab</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\f</tt></p>
</td>
<td>
<p>Formfeed</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\e</tt></p>
</td>
<td>
<p>Escape</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\038</tt></p>
</td>
<td>
<p>Any octal ASCII value</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\x7f</tt></p>
</td>
<td>
<p>Any hexadecimal ASCII value</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\x{263a}</tt></p>
</td>
<td>
<p>A wide hexadecimal value</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\c</tt><em class="replaceable"><tt>x</tt></em></p>
</td>
<td>
<p>Control-<em class="replaceable"><tt>x</tt></em></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\N{</tt><em class="replaceable"><tt>name</tt></em><tt class="literal">}</tt>
</p>
</td>
<td>
<p>A named character</p>
</td>
</tr>

</table><p>

</div>
<a name="perlnut2-CHP-4-SECT-6.4" /><div class="sect2">
<h3 class="sect2">4.6.4. Character Classes</h3>

<p><a name="INDEX-650" /><a name="INDEX-651" /><a name="INDEX-652" /><a name="INDEX-653" /><a name="INDEX-654" /><a name="INDEX-655" /><a name="INDEX-656" />The <tt class="literal">[...]</tt> construct
is used to list a set of characters (a <em class="emphasis">character
class</em>) of which <em class="emphasis">one</em> will match.
Brackets are often used when capitalization is uncertain in a match:
</p>

<blockquote><pre class="code">/[tT]here/</pre></blockquote>

<p><a name="INDEX-657" /><a name="INDEX-658" /><a name="INDEX-659" />A dash (<tt class="literal">-</tt>) may be
used to indicate a range of characters in a character class:
</p>

<blockquote><pre class="code">/[a-zA-Z]/;  # Match any single letter
/[0-9]/;     # Match any single digit</pre></blockquote>

<p>To put a literal dash in the list you must use a backslash before it
(<tt class="literal">\-</tt>).
</p>

<p><a name="INDEX-660" /><a name="INDEX-661" />By placing a <tt class="literal">^</tt> as
the first element in the brackets, you create a negated character
class, i.e., it matches any character not in the list. For example:
</p>

<blockquote><pre class="code">/[^A-Z]/;    # Matches any character other than an uppercase letter</pre></blockquote>

<p>Some common character classes have their own predefined escape
sequences for your programming
convenience<a name="INDEX-662" /><a name="INDEX-663" /><a name="INDEX-664" /><a name="INDEX-665" /><a name="INDEX-666" /><a name="INDEX-667" /><a name="INDEX-668" /><a name="INDEX-669" /><a name="INDEX-670" /><a name="INDEX-671" />:
</p>

<a name="ch04-11-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Code</p>
</th>
<th>
<p>Matches</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">\d</tt></p>
</td>
<td>
<p>A digit, same as <tt class="literal">[0-9]</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\D</tt></p>
</td>
<td>
<p>A nondigit, same as <tt class="literal">[^0-9]</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\w</tt></p>
</td>
<td>
<p>A word character (alphanumeric), same as
<tt class="literal">[a-zA-Z_0-9]</tt> 
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\W</tt></p>
</td>
<td>
<p>A non-word character, <tt class="literal">[^a-zA-Z_0-9]</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\s</tt></p>
</td>
<td>
<p>A whitespace character, same as <tt class="literal">[ \t\n\r\f]</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\S</tt></p>
</td>
<td>
<p>A non-whitespace character, <tt class="literal">[^ \t\n\r\f]</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\C</tt></p>
</td>
<td>
<p>Match a character (byte)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\pP</tt></p>
</td>
<td>
<p>Match P-named (Unicode) property</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\PP</tt></p>
</td>
<td>
<p>Match non-P</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\X</tt></p>
</td>
<td>
<p>Match extended unicode sequence</p>
</td>
</tr>

</table><p>

<p>While Perl implements <tt class="literal">lc()</tt> and <tt class="literal">uc(
)</tt>, which you can use for testing the proper case of words
or characters, you can do the same with escape
sequences<a name="INDEX-672" /><a name="INDEX-673" /><a name="INDEX-674" /><a name="INDEX-675" /><a name="INDEX-676" /><a name="INDEX-677" />:
</p>

<a name="ch04-12-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Code</p>
</th>
<th>
<p>Matches</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">\l</tt></p>
</td>
<td>
<p>Lowercase until next character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\u</tt></p>
</td>
<td>
<p>Uppercase until next character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\L</tt></p>
</td>
<td>
<p>Lowercase until <tt class="literal">\E</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\U</tt></p>
</td>
<td>
<p>Uppercase until <tt class="literal">\E</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\Q</tt></p>
</td>
<td>
<p>Disable pattern metacharacters until <tt class="literal">\E</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\E</tt></p>
</td>
<td>
<p>End case modification</p>
</td>
</tr>

</table><p>

<p>These elements match any single element in (or not in) their class. A
<tt class="literal">\w</tt> matches only one character of a word. Using a
modifier, you can match a whole word, for example, with
<tt class="literal">\w+</tt>. The abbreviated classes may also be used
within brackets as elements of other character classes.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-6.5" /><div class="sect2">
<h3 class="sect2">4.6.5. Anchors</h3>

<p><a name="INDEX-678" /><a name="INDEX-679" /><a name="INDEX-680" /><a name="INDEX-681" />Anchors
don't match any characters; they match places within
a string. The two most common anchors are <tt class="literal">^</tt> and
<tt class="literal">$</tt>, which match the beginning and end of a line,
respectively. The following table lists the anchoring patterns used
to match certain boundaries in regular expressions:
</p>

<a name="ch04-13-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Assertion</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">^</tt></p>
</td>
<td>
<p>Matches at the beginning of the string (or line, if
<tt class="literal">/m</tt> is used)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">$</tt></p>
</td>
<td>
<p>Matches at the end of the string (or line, if <tt class="literal">/m</tt>
is used)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\b</tt></p>
</td>
<td>
<p>Matches at word boundary (between <tt class="literal">\w</tt> and
<tt class="literal">\W</tt>)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\B</tt></p>
</td>
<td>
<p>Matches except at word boundary</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\A</tt></p>
</td>
<td>
<p>Matches at the beginning of the string</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\Z</tt></p>
</td>
<td>
<p>Matches at the end of the string or before a newline</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\z</tt></p>
</td>
<td>
<p>Matches only at the end of the string</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\G</tt></p>
</td>
<td>
<p>Matches where previous <tt class="literal">m//g</tt> left off</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">\c</tt></p>
</td>
<td>
<p>Suppresses resetting of search position when used with \g. Without
\c, search pattern is reset to the beginning of the string.
</p>
</td>
</tr>

</table><p>

<p>The <tt class="literal">$</tt> and <tt class="literal">\Z</tt> assertions can
match not only at the end of the string, but also one character
earlier than that, if the last character of the string is a newline.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-6.6" /><div class="sect2">
<h3 class="sect2">4.6.6. Quantifiers</h3>

<p><a name="INDEX-682" /><a name="INDEX-683" /><a name="INDEX-684" /><a name="INDEX-685" />Quantifiers
are used to specify the number of instances of the previous element
that can match. For instance, you could say "match
any number of a's, including none"
(<tt class="literal">a*</tt>), or "match between 5 and 10
instances of the word 'owie'
(<tt class="literal">(owie){5,10}</tt>)". 
</p>

<p><a name="INDEX-686" />Quantifiers,
by nature, are greedy. That is, the way the Perl regular expression
"engine" works is that it will look
for the biggest match possible (the farthest to the right) unless you
tell it not to. Say you are searching a string that reads:
</p>

<blockquote><pre class="code">a whatever foo, b whatever foo</pre></blockquote>

<p>and you want to find <tt class="literal">a</tt> and <tt class="literal">foo</tt>
with something in between. You might use:
</p>

<blockquote><pre class="code">/a.*foo/</pre></blockquote>

<p>A <tt class="literal">.</tt> followed by a <tt class="literal">*</tt> looks for
any character, any number of times, until <tt class="literal">foo</tt> is
found. But since Perl will look as far to the right as possible to
find <tt class="literal">foo</tt>, the first instance of
<tt class="literal">foo</tt> is swallowed up by the greedy
<tt class="literal">.*</tt> expression.
</p>

<p><a name="INDEX-687" /><a name="INDEX-688" /><a name="INDEX-689" />Therefore,
a<a name="INDEX-690" />ll the quantifiers have a notation
that allows for minimal matching, so they are nongreedy. This
notation uses a question mark immediately following the quantifier to
force Perl to look for the earliest available match (farthest to the
left). The following table lists the regular expression quantifiers
and their nongreedy forms:
</p>

<a name="ch04-14-fm2xml" /><table border="1" cellpadding="3">




<tr>
<th>
<p>Maximal</p>
</th>
<th>
<p>Minimal</p>
</th>
<th>
<p>Allowed range</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">{n</tt>,<tt class="literal">m}</tt></p>
</td>
<td>
<p><tt class="literal">{n</tt>,<tt class="literal">m}?</tt></p>
</td>
<td>
<p>Must occur at least <tt class="literal">n</tt> times but no more than
<tt class="literal">m</tt> times
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">{n,}</tt></p>
</td>
<td>
<p><tt class="literal">{n,}?</tt></p>
</td>
<td>
<p>Must occur at least <tt class="literal">n</tt> times</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">{n}</tt></p>
</td>
<td>
<p><tt class="literal">{n}?</tt></p>
</td>
<td>
<p>Must match exactly <tt class="literal">n</tt> times</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">*</tt></p>
</td>
<td>
<p><tt class="literal">*?</tt></p>
</td>
<td>
<p>0 or more times (same as <tt class="literal">{0,}</tt>)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">+</tt></p>
</td>
<td>
<p><tt class="literal">+?</tt></p>
</td>
<td>
<p>1 or more times (same as <tt class="literal">{1,}</tt>)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">?</tt></p>
</td>
<td>
<p><tt class="literal">??</tt></p>
</td>
<td>
<p>0 or 1 time (same as <tt class="literal">{0,1}</tt>)</p>
</td>
</tr>

</table><p>

</div>
<a name="perlnut2-CHP-4-SECT-6.7" /><div class="sect2">
<h3 class="sect2">4.6.7. Pattern Match Variables</h3>

<p><a name="INDEX-691" /><a name="INDEX-692" />Parentheses not only group elements
in a regular expression, they also remember the patterns they match.
Every match from a parenthesized element is saved to a special,
read-only variable indicated by a number. You can recall and reuse a
match by using these variables.
</p>

<p><a name="INDEX-693" /><a name="INDEX-694" /><a name="INDEX-695" />Within a pattern, each
parenthesized element saves its match to a numbered variable, in
order starting with <tt class="literal">1</tt>. You can recall these
matches within the expression by using <tt class="literal">\1</tt>,
<tt class="literal">\2</tt>, and so on.
</p>

<p>Outside of the matching pattern, the matched variables are recalled
with the usual dollar sign, i.e., <tt class="literal">$1</tt>,
<tt class="literal">$2</tt>, etc. The dollar sign notation should be used
in the replacement expression of a substitution and anywhere else you
might want to use the variables in your program. For example, to
implement "i before e, except after
c":
</p>

<blockquote><pre class="code">s/([^c])ei/$1ie/g;</pre></blockquote>

<p>The backreferencing variables are:</p>

<dl>
<dt><b><tt class="literal">$+</tt></b></dt>
<dd>
Returns the last parenthesized pattern match</p>
</dd>


<dt><b><tt class="literal">$&amp;</tt></b></dt>
<dd>
Returns the entire matched string</p>
</dd>


<dt><b><tt class="literal">$'</tt></b></dt>
<dd>
Returns everything before the matched string</p>
</dd>


<dt><b><tt class="literal">$'</tt></b></dt>
<dd>
Returns everything after the matched string</p>
</dd>

</dl>

<p>Backreferencing with these variables will slow down your program
noticeably for all regular expressions.
</p>

</div>
<a name="perlnut2-CHP-4-SECT-6.8" /><div class="sect2">
<h3 class="sect2">4.6.8. Extended Regular Expressions</h3>

<p><a name="INDEX-696" /><a name="INDEX-697" /><a name="INDEX-698" /><a name="INDEX-699" />Perl defines an
extended syntax for regular expressions. The syntax is a pair of
parentheses with a question mark as the first thing within the
parentheses. The character after the question mark gives the function
of the extension. The extensions are:
</p>

<dl>
<dt><b><tt class="literal">(?#</tt><em class="replaceable">text</em><tt class="literal">)</tt></b></dt>
<dd>
A comment. The text is ignored.</p>
</dd>


<dt><b><tt class="literal">(?:...)</tt></b></dt>
<dt><b><tt class="literal">(?imsx-imsx:...)</tt></b></dt>
<dd>
This groups things like <tt class="literal">(...)</tt> but
doesn't make backreferences.
</p>
</dd>


<dt><b><tt class="literal">(?=...)</tt></b></dt>
<dd>
A zero-width positive lookahead assertion. For example,
<tt class="literal">/\w+(?=\t)/</tt> matches a word followed by a tab,
without including the tab in <tt class="literal">$&amp;</tt>.
</p>
</dd>


<dt><b><tt class="literal">(?!...)</tt></b></dt>
<dd>
A zero-width negative lookahead assertion. For example,
<tt class="literal">/foo(?!bar)/</tt> matches any occurrence of
<tt class="literal">foo</tt> that isn't followed by
<tt class="literal">bar</tt>.
</p>
</dd>


<dt><b><tt class="literal">(?&lt;...)</tt></b></dt>
<dd>
A zero-width positive lookbehind assertion. For example,
<tt class="literal">/(?&lt;bad)boy/</tt> matches the word
<tt class="literal">boy</tt> that follows <tt class="literal">bad</tt>, without
including <tt class="literal">bad</tt> in <tt class="literal">$&amp;</tt>. This
works only for fixed-width lookbehind.
</p>
</dd>


<dt><b><tt class="literal">(?{</tt><em class="replaceable">code</em><tt class="literal">})</tt></b></dt>
<dd>
An experimental regular expression feature to evaluate any embedded
Perl code. This evaluation always succeeds, and
<em class="replaceable"><tt>code</tt></em> is not interpolated.
</p>
</dd>


<dt><b><tt class="literal">(?&lt;!=...)</tt></b></dt>
<dd>
A zero-width negative lookbehind assertion. For example,
<tt class="literal">/(?&lt;!=bad)boy/</tt> matches any occurrence of
<tt class="literal">boy</tt> that doesn't follow
<tt class="literal">bad</tt>. This works only for fixed-width lookbehind.
</p>
</dd>


<dt><b><tt class="literal">(?&gt;...)</tt></b></dt>
<dd>
Matches the substring that the standalone pattern would match if
anchored at the given position.
</p>
</dd>


<dt><b><tt class="literal">(?(</tt><em class="replaceable">condition</em><tt class="literal">)</tt><em class="replaceable">yes-pattern</em>|<em class="replaceable">no-pattern</em><tt class="literal">)</tt></b></dt>
<dt><b><tt class="literal">(?(</tt><em class="replaceable">condition</em>)<em class="replaceable">yes-pattern</em><tt class="literal">)</tt></b></dt>
<dd>
Matches a pattern determined by a condition.
<em class="replaceable"><tt>condition</tt></em> should be either an integer,
which is true if the pair of parentheses corresponding to the integer
has matched, or a lookahead, lookbehind, or evaluate, zero-width
assertion. <em class="replaceable"><tt>no-pattern</tt></em> will be used to
match if the condition was not meant, but it is also optional.
</p>
</dd>


<dt><b><tt class="literal">(?imsx-imsx)</tt></b></dt>
<dd>
One or more embedded pattern-match modifiers. Modifiers are switched
off if they follow a <tt class="literal">-</tt> (dash). The modifiers are
defined as follows<a name="INDEX-700" /><a name="INDEX-701" /><a name="INDEX-702" /><a name="INDEX-703" />:
</p>


<a name="ch04-15-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Modifier</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">i</tt></p>
</td>
<td>
<p>Do case-insensitive pattern matching.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">m</tt></p>
</td>
<td>
<p>Treat string as multiple lines.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s</tt></p>
</td>
<td>
<p>Treat string as single line.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">x</tt></p>
</td>
<td>
<p>Use extended regular expressions.</p>
</td>
</tr>

</table><p>
</dd>

</dl>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4.5. Operators</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.7. Subroutines</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>