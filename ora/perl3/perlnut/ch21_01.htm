<html><head><title>Perl/Tk (Perl in a Nutshell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Stephen Spainhour" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596002416L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl in a Nutshell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Java and XSLT" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part9.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch21_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 21. Perl/Tk</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#perlnut2-CHP-21-SECT-1">Widgets</a><br />
<a href="ch21_02.htm">Geometry Managers</a><br />
<a href="ch21_03.htm">Common Widget Configuration Options</a><br />
<a href="ch21_04.htm">The Button Widget</a><br />
<a href="ch21_05.htm">The Checkbutton Widget</a><br />
<a href="ch21_06.htm">The Radiobutton Widget</a><br />
<a href="ch21_07.htm">The Label Widget</a><br />
<a href="ch21_08.htm">The Entry Widget</a><br />
<a href="ch21_09.htm">The Scrollbar Widget</a><br />
<a href="ch21_10.htm">The Listbox Widget</a><br />
<a href="ch21_11.htm">The Text Widget</a><br />
<a href="ch21_12.htm">The Canvas Widget</a><br />
<a href="ch21_13.htm">The Scale Widget</a><br />
<a href="ch21_14.htm">The Menubutton Widget</a><br />
<a href="ch21_15.htm">The Menu Widget</a><br />
<a href="ch21_16.htm">The Optionmenu Widget</a><br />
<a href="ch21_17.htm">The Frame Widget</a><br />
<a href="ch21_18.htm">The Toplevel Widget</a><br /></p></div>

<p>Perl/Tk is an extension for writing Perl programs with a graphical
user interface (GUI) on both Unix and Windows 95/NT. Tk was
originally developed as an extension to the Tcl language, for use
with the X Window System on Unix. With its port to Perl, Tk gives
Perl programmers the same control over the graphical desktop that Tcl
programmers have taken for granted<a name="INDEX-2668" /></a><a name="INDEX-2669" /></a>.
</p>

<p>The Tk extension makes it easy to draw a window, put widgets into it
(such as buttons, checkboxes, entry fields, menus, etc.), and have
them perform certain actions based on user input. A simple
"Hello World" program would look
like this:
</p>


<blockquote><pre class="code">#!/usr/bin/perl -w
use Tk;
my $mw = MainWindow-&gt;new;
$mw-&gt;Button(-text =&gt; "Hello World!", -command =&gt;sub{exit})-&gt;pack;
MainLoop;</pre></blockquote>

<p>When you run it, it would look like <a href="ch21_01.htm">Figure 21-1</a>.</p>

<a name="perlnut2-CHP-21-FIG-1" /></a><div class="figure"><img src="figs/pns2_2101.gif" alt="Figure 21-1" width="146" height="55" /></div><h4 class="objtitle">Figure 21-1. A simple Perl/Tk program</h4>

<p>Clicking on the Hello World button exits the program, and your window
disappears.
</p>

<p>Let's walk through these few lines of code. After
calling the Perl interpreter, the program calls the Tk module. It
then proceeds to build a generic, standard window
(<tt class="literal">MainWindow</tt>) to act as a parent for any other
widgets you create. Line 4 of the program creates a button and
displays it using the <tt class="literal">pack</tt> geometry manager. It
also gives the button something to do when pushed (in this case, exit
the program).
</p>

<p><a name="INDEX-2670" /></a>The last line tells the program to
"go do it."
<tt class="literal">MainLoop</tt> starts the event handler for the
graphical interface, and the program draws windows until it reaches
the <tt class="literal">MainLoop</tt> statement. Everything up to that
point is preparation; until you reach the <tt class="literal">MainLoop</tt>
statement, the program simply prepares its windows and defines what
to do when certain events happen (such as a mouse click on the Hello
World! button). Nothing is drawn until the
<tt class="literal">MainLoop</tt> statement is reached.
</p>
<div class="sect1"><a name="perlnut2-CHP-21-SECT-1" /></a>
<h2 class="sect1">21.1. Widgets</h2>

<p><a name="INDEX-2671" /></a><a name="INDEX-2672" /></a><a name="INDEX-2673" /></a>Widgets
in Perl/Tk are created with <em class="emphasis">widget creation
commands</em>, which include <tt class="literal">Button</tt>,
<tt class="literal">Canvas</tt>, <tt class="literal">CheckButton</tt>,
<tt class="literal">Entry</tt>, <tt class="literal">Frame</tt>,
<tt class="literal">Label</tt>, <tt class="literal">Listbox</tt>,
<tt class="literal">Menu</tt>, <tt class="literal">Menubutton</tt>,
<tt class="literal">Message</tt>, <tt class="literal">Radiobutton</tt>,
<tt class="literal">Scale</tt>, <tt class="literal">Scrollbar</tt>,
<tt class="literal">Text</tt>, and <tt class="literal">Toplevel</tt>, among many,
many others.
</p>

<p>Positioning widgets is done with <em class="emphasis">geometry
managers</em>. In the "Hello
World" example shown earlier, the
<tt class="literal">pack</tt> command is the geometry manager. Geometry
managers determine where in the window (or frame) the widget will
sit. We'll talk more about the Perl/Tk geometry
managers later in this chapter.
</p>

<a name="perlnut2-CHP-21-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">21.1.1. Widget Methods</h3>

<p><a name="INDEX-2674" /></a><a name="INDEX-2675" /></a><a name="INDEX-2676" /></a><a name="INDEX-2677" /></a>Widgets can be configured, queried, or
manipulated via various <em class="emphasis">widget methods</em>. For
example, all widgets support the <tt class="literal">configure</tt> widget
method for changing widget properties after the widget is created. In
addition, most widgets have specialized methods associated with them
for manipulating the widget as needed throughout the program. For
example, widgets that scroll support the <tt class="literal">xview</tt> and
<tt class="literal">yview</tt> methods for determining the viewable portion
of the content when the scrollbar is moved. The Entry and Text
widgets have methods for inserting and deleting values. The Canvas
widget has a whole series of methods for drawing shapes and inserting
text into the canvas. And so on.
</p>

<p>Widget methods are listed in the discussion of each widget later in
this chapter. However, since all widgets support the
<tt class="literal">configure</tt> and <tt class="literal">cget</tt> methods, we
will cover them now.
</p>

<a name="perlnut2-CHP-21-SECT-1.1.1" /></a><div class="sect3">
<h3 class="sect3">21.1.1.1. The configure method</h3>

<p><a name="INDEX-2678" /></a>The <tt class="literal">configure</tt>
method can be used to set and retrieve widget configuration values.
For example, to change the width of a button:
</p>

<blockquote><pre class="code">$button-&gt;configure(-width =&gt; 100);</pre></blockquote>

<p>To get the value for a current widget, just supply it without a
value:
</p>

<blockquote><pre class="code">$button-&gt;configure(-width);</pre></blockquote>

<p>The result is an array of scalars; the important values are the last
two, which represent the default value and its current value,
respectively.
</p>

<p>You can also call <tt class="literal">configure</tt> without any options at
all, which will give you a listing of all options and their values.
</p>

</div>

<a name="perlnut2-CHP-21-SECT-1.1.2" /></a><div class="sect3">
<h3 class="sect3">21.1.1.2. The cget method</h3>

<p><a name="INDEX-2679" /></a>For simply retrieving the value of an
option, <tt class="literal">configure</tt> returns more information than
you generally want. The <tt class="literal">cget</tt> method returns just
the current value.
</p>

</div>
</div>
<a name="perlnut2-CHP-21-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">21.1.2. Scrollbars</h3>

<p><a name="INDEX-2680" /></a><a name="INDEX-2681" /></a><a name="INDEX-2682" /></a><a name="INDEX-2683" /></a>Many
widgets have scrollbars associated with them. Scrollbars can be added
to a widget in two ways: with an independent Scrollbar widget or with
the <tt class="literal">Scrolled</tt> method when creating a widget. For
simple scrollbars, the <tt class="literal">Scrolled</tt> method is much
easier and therefore preferable.
</p>

<a name="perlnut2-CHP-21-SECT-1.2.1" /></a><div class="sect3">
<h3 class="sect3">21.1.2.1. Using the Scrolled method</h3>

<p><a name="INDEX-2684" /></a>Use the <tt class="literal">Scrolled</tt>
method to create both the widget and the scrollbar in a single
command. For example:
</p>

<blockquote><pre class="code">$mainwindow-&gt;Scrolled('Entry', -scrollbars =&gt; 'os'
        -textvariable =&gt; \$address)-&gt;pack;</pre></blockquote>

<p>This creates an Entry widget with an
"optional" scrollbar on the bottom.
The first argument to <tt class="literal">Scrolled</tt> is the type of
widget (in this case, an Entry widget). Then use the
<tt class="literal">-scrollbars</tt> option to list the location of the
scrollbar ("s" for the south, or
bottom, edge of the widget). Here, we specify an
"optional" scrollbar with
"o", meaning that the scrollbar
will appear only if needed.
</p>

<p>Any additional options to the <tt class="literal">Scrolled</tt> method are
taken as options to the widget itself. In this case,
we're setting the <tt class="literal">-textvariable</tt>
option to the Entry widget.
</p>

</div>

<a name="perlnut2-CHP-21-SECT-1.2.2" /></a><div class="sect3">
<h3 class="sect3">21.1.2.2. The Scrollbar widget</h3>

<p><a name="INDEX-2685" /></a><a name="INDEX-2686" /></a><a name="INDEX-2687" /></a>For more flexibility with a scrollbar,
you can use the Scrollbar widget. To do so, you need to create the
target widget to scroll. Set the <tt class="literal">-xscrollcommand</tt>
or <tt class="literal">-yscrollcommand</tt> option as appropriate,
configure the scrollbar to talk to the widget, and position the
scrollbar and target widget next to one another. For example:
</p>

<blockquote><pre class="code">$scrollbar = $mainwindow-&gt;Scrollbar(-orient =&gt; 'vertical');
$listbox = $mainwindow-&gt;Entry(-yscrollcommand =&gt; ['set' =&gt; $scrollbar]);
$scrollbar-&gt;configure(-command =&gt; ['yview' =&gt; $listbox]);
$scrollbar-&gt;pack(-side =&gt; 'right', -fill =&gt; 'y');
$listbox-&gt;pack(-side =&gt; 'left', -fill =&gt; 'both');</pre></blockquote>

<p>First, we create the scrollbar with vertical orientation (which is
actually the default). Next, we create the Listbox widget with the
<tt class="literal">-yscrollcommand</tt> option to define a callback when
the widget is scrolled vertically. The scrollbar is then configured
with a callback that says to inform the Listbox widget when it is
clicked vertically. Finally, the Scrollbar and Listbox widgets are
packed side-by-side. See further discussion of the Scrollbar widget
later in this chapter for more information.
</p>

</div>
</div>
<a name="perlnut2-CHP-21-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">21.1.3. Callbacks</h3>

<p><a name="INDEX-2688" /></a><a name="INDEX-2689" /></a><a name="INDEX-2690" /></a><a name="INDEX-2691" /></a>Many
widgets allow you to define a <em class="emphasis">callback</em>, which is
a command to execute when the widget is selected. For example, when
you press an exit button, the callback might be to a routine that
cleans up and quits the program. When you click on a radio button,
you might want to change the window to reflect the new preferences.
</p>

<p><a name="INDEX-2692" /></a>Widgets that support callbacks have a
<tt class="literal">-command</tt> option to provide the callback function.
In the "Hello World" example shown
previously, the callback is to <tt class="literal">sub {exit}</tt>. In that
example, the callback is called as an anonymous subroutine. You could
also use a reference to a subroutine (e.g.,
<tt class="literal">\&amp;routine</tt>). If you want to provide arguments
to a subroutine, you can call it as an anonymous list (e.g.,
<tt class="literal">[ \&amp;routine, $arg, $arg, ... ]</tt>).
</p>

</div>
<a name="perlnut2-CHP-21-SECT-1.4" /></a><div class="sect2">
<h3 class="sect2">21.1.4. Colors and Fonts</h3>

<p><a name="INDEX-2693" /></a><a name="INDEX-2694" /></a><a name="INDEX-2695" /></a><a name="INDEX-2696" /></a><a name="INDEX-2697" /></a>Tk was originally created for the X
Window System and is still primarily used in that environment. For
this reason, it has inherited the font and color scheme used for the
X Window System.
</p>

<p>Colors that can be used with Tk widgets are identified either by an
RGB value or by a name that has been associated with an RGB value. In
general, it is easier to use a color name than an explicit RGB value.
For a listing of the color names that are supported, see the
<em class="emphasis">rgb.txt</em> file in your X distribution or use the
<em class="emphasis">showrgb</em> command. (Most common color names are
supported, so you can say things such as
"red,"
"pink,"
"green," and even
"chartreuse" with confidence.)
</p>

<p>Fonts are another matter. Under the X Window System, fonts are named
things such as
<em class="emphasis">-adobe-helvetica-medium-o-normal -- 12-120-75-75-p-67-iso8859-1</em>.
Wildcards can make the fonts easier to use, but
they're still a mouthful. For a listing of fonts
available for a particular X server, use the
<em class="emphasis">xlsfonts</em> command. There are a few font
"aliases" that have been defined
for your convenience (such as <tt class="literal">fixed</tt>,
<tt class="literal">6x10</tt>, <tt class="literal">9x15</tt>, etc.), and you
might prefer to just stick to those.<a name="INDEX-2698" /></a><a name="INDEX-2699" /></a><a name="INDEX-2700" /></a> 
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="part9.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch21_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">IX. Perl/Tk</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">21.2. Geometry Managers</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
      </map>

</body></html>