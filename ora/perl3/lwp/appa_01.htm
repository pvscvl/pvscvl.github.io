<html><head><title>LWP Modules (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appb_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Appendix A. LWP Modules</h1>
<p>While the text of this book has covered the LWP modules that you need
to know about to get things done, there are many additional modules
in LWP. Most of them are behind the scenes or have limited use that
we couldn't spare the space to discuss. But if you
want to further your knowledge of LWP's internals,
here's a roadmap to get you started.
</p>

<p>These are the LWP modules, listed alphabetically, from the CPAN
distributions most current at time of writing, libwww-perl v5.64, URI
v1.18, HTML-Parser v3.26, HTML-Tree v3.11, and HTML-Format v1.23.
Especially noteworthy modules have an
"*" in front of their names.
</p>

<a name="appa-2-fm2xml" /><table border="1" cellpadding="3">



<tr>
<th>
<p>Module</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<p> File::Listing</p>
</td>
<td>
<p>Module for parsing directory listings. Used by Net::FTP.</p>
</td>
</tr>
<tr>
<td>
<p> HTML::Form</p>
</td>
<td>
<p>Class for objects representing HTML forms.</p>
</td>
</tr>
<tr>
<td>
<p> HTML::FormatPS</p>
</td>
<td>
<p>Class for objects that can render HTML::TreeBuilder tree contents as
PostScript.
</p>
</td>
</tr>
<tr>
<td>
<p> HTML::Formatter</p>
</td>
<td>
<p>Internal base class for HTML::FormatPS and HTML::FormatText.</p>
</td>
</tr>
<tr>
<td>
<p>*HTML::FormatText</p>
</td>
<td>
<p>Class for objects that can render HTML::TreeBuilder tree contents as
plain text.
</p>
</td>
</tr>
<tr>
<td>
<p>*HTML::Entities</p>
</td>
<td>
<p>Useful module providing functions that &amp;-encode/decode strings
(such as <tt class="literal">C.</tt> <tt class="literal">&amp;</tt>
<tt class="literal">E.</tt> <tt class="literal">Bront&#xEB;</tt> to and
from <tt class="literal">C.</tt> <tt class="literal">&amp;amp;</tt>
<tt class="literal">E.</tt> <tt class="literal">Bront&amp;euml;</tt>).
</p>
</td>
</tr>
<tr>
<td>
<p> HTML::Filter</p>
</td>
<td>
<p>Deprecated class for HTML parsers that reproduce their input by
default.
</p>
</td>
</tr>
<tr>
<td>
<p> HTML::HeadParser</p>
</td>
<td>
<p>Parse &lt;HEAD&gt; section of an HTML document.</p>
</td>
</tr>
<tr>
<td>
<p> HTML::LinkExtor</p>
</td>
<td>
<p>Class for HTML parsers that parse out links.</p>
</td>
</tr>
<tr>
<td>
<p> HTML::PullParser</p>
</td>
<td>
<p>Semi-internal base class used by HTML::TokeParser.</p>
</td>
</tr>
<tr>
<td>
<p>*HTML::TokeParser</p>
</td>
<td>
<p>Friendly token-at-a-time HTML pull-parser class.</p>
</td>
</tr>
<tr>
<td>
<p> HTML::Parser</p>
</td>
<td>
<p>Base class for HTML parsers; used by the friendlier HTML::TokeParser
and HTML::TreeBuilder.
</p>
</td>
</tr>
<tr>
<td>
<p> HTML::AsSubs</p>
</td>
<td>
<p>Semi-deprecated module providing functions that each construct an
HTML::Element object.
</p>
</td>
</tr>
<tr>
<td>
<p>*HTML::Element</p>
</td>
<td>
<p>Class for objects that each represent an HTML element.</p>
</td>
</tr>
<tr>
<td>
<p> HTML::Parse</p>
</td>
<td>
<p>Deprecated module that provides functions accessing HTML::TreeBuilder.</p>
</td>
</tr>
<tr>
<td>
<p> HTML::Tree</p>
</td>
<td>
<p>Module that exists just so you can run <tt class="literal">perldoc</tt>
<tt class="literal">HTML-Tree</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p>*HTML::TreeBuilder</p>
</td>
<td>
<p>Class for objects representing an HTML tree into which you can parse
source.
</p>
</td>
</tr>
<tr>
<td>
<p>*HTTP::Cookies</p>
</td>
<td>
<p>Class for objects representing databases of cookies.</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Daemon</p>
</td>
<td>
<p>Base class for writing HTTP server daemons.</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Date</p>
</td>
<td>
<p>Module for date conversion routines. Used by various LWP protocol
modules.
</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Headers</p>
</td>
<td>
<p>Class for objects representing the group of headers in an
HTTP::Response or HTTP::Request object.
</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Headers::Auth</p>
</td>
<td>
<p>Experimental/internal for improving HTTP::Headers's
authentication support.
</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Headers::ETag</p>
</td>
<td>
<p>Experimental/internal module adding HTTP ETag support to
HTTP::Headers.
</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Headers::Util</p>
</td>
<td>
<p>Module providing string functions used internally by various other
LWP modules.
</p>
</td>
</tr>
<tr>
<td>
<p>*HTTP::Message</p>
</td>
<td>
<p>Base class for methods common to HTTP::Response and HTTP::Request.</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Negotiate</p>
</td>
<td>
<p>Module implementing an algorithm for content negotiation. Not widely
used.
</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Request</p>
</td>
<td>
<p>Class for objects representing a request that carried out with an
LWP::UserAgent object.
</p>
</td>
</tr>
<tr>
<td>
<p> HTTP::Request::Common</p>
</td>
<td>
<p>Module providing functions used for constructing common kinds of
HTTP::Request objects.
</p>
</td>
</tr>
<tr>
<td>
<p>*HTTP::Response</p>
</td>
<td>
<p>Class for objects representing the result of an HTTP::Request that
was carried out.
</p>
</td>
</tr>
<tr>
<td>
<p>*HTTP::Status</p>
</td>
<td>
<p>Module providing functions and constants involving HTTP status codes.</p>
</td>
</tr>
<tr>
<td>
<p>*LWP</p>
</td>
<td>
<p>Module that exists merely so you can say "use
LWP" and have all the common LWP modules (notably
LWP::UserAgent, HTTP::Request, and HTTP::Response). Saying
<tt class="literal">"use LWP5.64"</tt> also asserts that the current LWP
distribution had better be Version 5.64 or later. The module also
contains generous documentation.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Authen::Basic</p>
</td>
<td>
<p>Module used internally by LWP::UserAgent for doing common
("Basic") HTTP authentication
responses.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Authen::Digest</p>
</td>
<td>
<p>Module used internally by LWP::UserAgent for doing less-common HTTP
Digest authentication responses.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::ConnCache</p>
</td>
<td>
<p>Class used internally by some LWP::Protocol::protocol modules to
reuse socket connections.
</p>
</td>
</tr>
<tr>
<td>
<p>*LWP::Debug</p>
</td>
<td>
<p>Module for routines useful in tracing how LWP performs requests.</p>
</td>
</tr>
<tr>
<td>
<p> LWP::MediaTypes</p>
</td>
<td>
<p>Module used mostly internally for guessing the MIME type of a file or
URL.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::MemberMixin</p>
</td>
<td>
<p>Base class used internally for accessing object attributes.</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol</p>
</td>
<td>
<p>Mostly internal base class for accessing and managing LWP protocols.</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::data</p>
</td>
<td>
<p>Internal class that handles the new <tt class="literal">data:</tt> URL
scheme (RFC 2397).
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::file</p>
</td>
<td>
<p>Internal class that handles the <tt class="literal">file:</tt> URL scheme.</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::ftp</p>
</td>
<td>
<p>Internal class that handles the <tt class="literal">ftp:</tt> URL scheme.</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::GHTTP</p>
</td>
<td>
<p>Internal class for handling <tt class="literal">http:</tt> URL scheme using
the HTTP::GHTTP library.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::gopher</p>
</td>
<td>
<p>Internal class that handles the <tt class="literal">gopher:</tt> URL scheme.</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::http</p>
</td>
<td>
<p>Internal class that normally handles the <tt class="literal">http:</tt> URL
scheme.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::http10</p>
</td>
<td>
<p>Internal class that handles the <tt class="literal">http:</tt> URL scheme
via just HTTP v1.0 (without the 1.1 extensions and features).
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::https</p>
</td>
<td>
<p>Internal class that normally handles the <tt class="literal">https:</tt>
URL scheme, assuming you have an SSL library installed.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::https10</p>
</td>
<td>
<p>Internal class that handles the <tt class="literal">https:</tt> URL scheme,
if you don't want HTTP v1.1 extensions.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::mailto</p>
</td>
<td>
<p>Internal class that handles the <tt class="literal">mailto:</tt> URL
scheme; yes, it sends mail!
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::nntp</p>
</td>
<td>
<p>Internal class that handles the <tt class="literal">nntp:</tt> and
<tt class="literal">news:</tt> URL schemes.
</p>
</td>
</tr>
<tr>
<td>
<p> LWP::Protocol::nogo</p>
</td>
<td>
<p>Internal class used in handling requests to unsupported protocols.</p>
</td>
</tr>
<tr>
<td>
<p>*LWP::RobotUA</p>
</td>
<td>
<p>Class based on LWP::UserAgent, for objects representing virtual
browsers that obey robots.txt files and don't abuse
remote servers.
</p>
</td>
</tr>
<tr>
<td>
<p>*LWP::Simple</p>
</td>
<td>
<p>Module providing the <tt class="literal">get</tt>, <tt class="literal">head</tt>,
<tt class="literal">getprint</tt>, <tt class="literal">getstore</tt>, and
<tt class="literal">mirror</tt> shortcut functions.
</p>
</td>
</tr>
<tr>
<td>
<p>*LWP::UserAgent</p>
</td>
<td>
<p>Class for objects representing "virtual
browsers."
</p>
</td>
</tr>
<tr>
<td>
<p> Net::HTTP</p>
</td>
<td>
<p>Internal class used for HTTP socket connections.</p>
</td>
</tr>
<tr>
<td>
<p> Net::HTTP::Methods</p>
</td>
<td>
<p>Internal class used for HTTP socket connections.</p>
</td>
</tr>
<tr>
<td>
<p> Net::HTTP::NB</p>
</td>
<td>
<p>Internal class used for HTTP socket connections with nonblocking
sockets.
</p>
</td>
</tr>
<tr>
<td>
<p> Net::HTTPS</p>
</td>
<td>
<p>Internal class used for HTTP Secure socket connections.</p>
</td>
</tr>
<tr>
<td>
<p>*URI</p>
</td>
<td>
<p>Main class for objects representing URIs/URLs, relative or absolute.</p>
</td>
</tr>
<tr>
<td>
<p> URI::_foreign</p>
</td>
<td>
<p>Internal class for objects representing URLs for schemes for which we
don't have a specific class.
</p>
</td>
</tr>
<tr>
<td>
<p> URI::_generic</p>
</td>
<td>
<p>Internal base class for just about all URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::_login</p>
</td>
<td>
<p>Internal base class for connection URLs such as
<tt class="literal">telnet:</tt>, <tt class="literal">rlogin:</tt>, and
<tt class="literal">ssh:</tt>.
</p>
</td>
</tr>
<tr>
<td>
<p> URI::_query</p>
</td>
<td>
<p>Internal base class providing methods for URL types that can have
query strings (such as <tt class="literal">foo://...?bar</tt>).
</p>
</td>
</tr>
<tr>
<td>
<p> URI::_segment</p>
</td>
<td>
<p>Internal class for representing some return values from
<tt class="literal">$url-&gt;path_segments( )</tt> calls.
</p>
</td>
</tr>
<tr>
<td>
<p> URI::_server</p>
</td>
<td>
<p>Internal base class for URL types where the first bit represents a
server name (most of them except <tt class="literal">mailto:</tt>).
</p>
</td>
</tr>
<tr>
<td>
<p> URI::_userpass</p>
</td>
<td>
<p>Internal class providing methods for URL types with an optional
<tt class="literal">user[:pass]</tt> part (such as
<tt class="literal">ftp://itsme:foo@secret.int/</tt>).
</p>
</td>
</tr>
<tr>
<td>
<p> URI::data</p>
</td>
<td>
<p>Class for objects representing the new <tt class="literal">data:</tt> URLs
(RFC 2397).
</p>
</td>
</tr>
<tr>
<td>
<p>*URI::Escape</p>
</td>
<td>
<p>Module for functions that URL-encode and URL-decode strings (such as
<tt class="literal">pot</tt> <tt class="literal">pie</tt> to and from
<tt class="literal">pot%20pie</tt>). 
</p>
</td>
</tr>
<tr>
<td>
<p> URI::file</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">file:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::file::Base</p>
</td>
<td>
<p>Internal base class for <tt class="literal">file:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::file::FAT</p>
</td>
<td>
<p>Internal base class for <tt class="literal">file:</tt> URLs under legacy
MSDOS (with 8.3 filenames).
</p>
</td>
</tr>
<tr>
<td>
<p> URI::file::Mac</p>
</td>
<td>
<p>Internal base class for <tt class="literal">file:</tt> URLs under legacy
(before v10) MacOS.
</p>
</td>
</tr>
<tr>
<td>
<p> URI::file::OS2</p>
</td>
<td>
<p>Internal base class for <tt class="literal">file:</tt> URLs under OS/2.</p>
</td>
</tr>
<tr>
<td>
<p> URI::file::QNX</p>
</td>
<td>
<p>Internal base class for <tt class="literal">file:</tt> URLs under QNX.</p>
</td>
</tr>
<tr>
<td>
<p> URI::file::Unix</p>
</td>
<td>
<p>Internal base class for <tt class="literal">file:</tt> URLs under Unix.</p>
</td>
</tr>
<tr>
<td>
<p> URI::file::Win32</p>
</td>
<td>
<p>Internal base class for <tt class="literal">file:</tt> URLs under MS
Windows.
</p>
</td>
</tr>
<tr>
<td>
<p> URI::ftp</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">ftp:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::gopher</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">gopher:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::Heuristic</p>
</td>
<td>
<p>Module for functions that expand abbreviated URLs such as <em class="emphasis">ora.com</em>.
</p>
</td>
</tr>
<tr>
<td>
<p> URI::http</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">http:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::https</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">https:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::ldap</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">ldap:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::mailto</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">mailto:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::news</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">news:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::nntp</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">nntp:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::pop</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">pop:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::rlogin</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">rlogin:</tt> login URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::rsync</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">rsync:</tt> URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::snews</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">snews:</tt> (Secure
News) URLs.
</p>
</td>
</tr>
<tr>
<td>
<p> URI::ssh</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">ssh:</tt> login URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::telnet</p>
</td>
<td>
<p>Class for objects representing <tt class="literal">telnet:</tt> login URLs.</p>
</td>
</tr>
<tr>
<td>
<p> URI::URL</p>
</td>
<td>
<p>Deprecated class that is like URI; use URI instead.</p>
</td>
</tr>
<tr>
<td>
<p> URI::WithBase</p>
</td>
<td>
<p>Like the class URI, but objects of this class can
"remember" their base URLs.
</p>
</td>
</tr>
<tr>
<td>
<p> WWW::RobotsRules</p>
</td>
<td>
<p>Class for objects representing restrictions parsed from various
<em class="filename">robots.txt</em> files.
</p>
</td>
</tr>
<tr>
<td>
<p> WWW::RobotRules::AnyDBM_File</p>
</td>
<td>
<p>Subclass of WWW::RobotRules that uses a DBM file to cache its
contents.
</p>
</td>
</tr>

</table><p>




<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appb_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12.4. Ideas for Further Expansion</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">B. HTTP Status Codes</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
      </map>

</body></html>