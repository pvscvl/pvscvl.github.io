<html><head><title>Example: Extracting Linksfrom a Bookmark File (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.5. Example: Extracting Linksfrom a Bookmark File</h2>

<p>Suppose we want to delegate <a name="INDEX-391" />
<a name="INDEX-392" />
<a name="INDEX-393" />to a Perl program the task of
checking URLs in my Netscape bookmark file. I'm told
that this isn't the same format as is used in newer
Netscapes. But, antiquarian that I am, I still use Netscape 4.76, and
this is what the file looks like:
</p>

<blockquote><pre class="code">&lt;!DOCTYPE NETSCAPE-Bookmark-file-1&gt;
&lt;!-- This is an automatically generated file.
It will be read and overwritten.
Do Not Edit! --&gt;
&lt;TITLE&gt;Bookmarks for Sean M. Burke&lt;/TITLE&gt;
&lt;H1&gt;Bookmarks for Sean M. Burke&lt;/H1&gt;

&lt;DL&gt;&lt;p&gt;
  &lt;DT&gt;&lt;H3 ADD_DATE="911669103"&gt;Personal Toolbar Folder&lt;/H3&gt;
  &lt;DL&gt;&lt;p&gt;
    &lt;DT&gt;&lt;A HREF="http://libros.unm.edu/" ADD_DATE="908672224" ...
    &lt;DT&gt;&lt;A HREF="http://www.melvyl.ucop.edu/" ADD_DATE="900184542" ...
    &lt;DT&gt;&lt;A HREF="http://www.guardian.co.uk/" ADD_DATE="935897798" ...
    &lt;DT&gt;&lt;A HREF="http://www.booktv.org/schedule/" ADD_DATE="935897798" ...
    &lt;DT&gt;&lt;A HREF="http://www.suck.com/" ADD_DATE="942604862" ...
    ...and so on...</pre></blockquote>

<p>There are three important things we should note here:</p>

<ul><li>
<p>Each bookmark item is on a line of its own. This means we can use the
handy Perl idioms for line-at-a-time processing such as
<tt class="literal">while(&lt;IN&gt;)</tt> <tt class="literal">{...}</tt> or
<tt class="literal">@lines</tt> <tt class="literal">=</tt>
<tt class="literal">&lt;IN&gt;</tt>.
</p>
</li><li>
<p>Every URL is absolute. There are no relative URLs such as
<tt class="literal">HREF="../stuff.html"</tt>. That means we
don't have to bother with making URLs absolute (not
yet, at least).
</p>
</li><li>
<p>The only thing we want from this file is the URL in the
<tt class="literal">HREF="...</tt><em class="replaceable"><tt>url</tt></em><tt class="literal">..."</tt>
part of the line&#x2014;and if there is no <tt class="literal">HREF</tt> on
the line, we can ignore this line. This practically begs us to use a
Perl regexp!
</p>
</li></ul>
<p>So we scan the file one line at a time, find URLs in lines that have
a
<tt class="literal">HREF="...</tt><em class="replaceable"><tt>url</tt></em><tt class="literal">..."</tt>
in them, then check those URLs. <a href="ch06_05.htm">Example 6-4</a> shows
such a program.
</p>

<a name="perllwp-CHP-6-EX-4" /><div class="example">
<h4 class="objtitle">Example 6-4. bookmark-checker </h4>
<blockquote><pre class="code">#!/usr/bin/perl -w
# bookmark-checker - check URLs in Netscape bookmark file

use strict;
use LWP;
my $browser;
my $bmk_file = $ARGV[0]
  || 'c:/Program Files/Netscape/users/sburke/bookmark.htm';
open(BMK, "&lt;$bmk_file") or die "Can't read-open $bmk_file: $!";

while (&lt;BMK&gt;) {
  check_url($1) if m/ HREF="([^"\s]+)" /;
}

print "# Done after ", time - $^T, "s\n";
exit;

my %seen;  # for tracking which URLs we've already checked

sub check_url {
  # Try to fetch the page and report failure if it can't be found
  # This routine even specially reports if the URL has changed
  # to be on a different host.

  my $url = URI-&gt;new( $_[0] )-&gt;canonical;

  # Skip mailto: links, and in fact anything not http:...
  return unless $url-&gt;scheme( ) eq 'http';

  # Kill anything like '#staff' in 'http://luddites.int/them.txt#staff'
  $url-&gt;fragment(undef);

  # Kill anything like the currently quite useless but
  # occasionally occurring 'jschmo@' in
  #  'http://jschmo@luddites.int/them.txt'
  # (It's useless because it doesn't actually show up
  # in the request to the server in any way.)
  $url-&gt;userinfo(undef);
 
  return if $seen{$url};  # silently skip duplicates
  $seen{$url} = 1;  

  init_browser( ) unless $browser;
  my $response = $browser-&gt;head($url);
  my $found = URI-&gt;new( $response-&gt;request-&gt;url )-&gt;canonical;
  $seen{$found} = 1; # so we don't check it later.

  # If the server complains that it doesn't understand "HEAD",
  #  (405 is "Method Not Allowed"), then retry it with "GET":
  $response = $browser-&gt;get($found) if $response-&gt;code == 405;

  if($found ne $url) {
    if($response-&gt;is_success) {
      # Report the move, only if it's a very different URL.
      # That is, different schemes, or different hosts.
      if(
        $found-&gt;scheme ne $url-&gt;scheme
       or
        lc( $found-&gt;can('host') ? $found-&gt;host : '' )
         ne
        lc(   $url-&gt;can('host') ?   $url-&gt;host : '' )
      ) {
        print "MOVED: $url\n    -&gt; $found\n",
      }

    } else {
      print "MOVED: $url\n    -&gt; $found\n",
        "       but that new URL is bad: ",
        $response-&gt;status_line( ), "\n"
    }
  } elsif($response-&gt;is_success) {
    print "## okay: $url\n";
  } else {
    print "$url is bad! ", $response-&gt;status_line, "\n";
  }
  return;
}

sub init_browser {
  $browser = LWP::UserAgent-&gt;new;

  # Speak only HTTP - no mailto or FTP or anything.
  $browser-&gt;protocols_allowed( [ 'http' ] );

  # And any other initialization we might need to do.

  return $browser;
}</pre></blockquote>
</div>

<p>And for this rigidly formatted input file, our line-at-a-time
regexp-based approach works just fine; our simple loop:
</p>

<blockquote><pre class="code">while (&lt;BMK&gt;) { check_url($1) if m/ HREF="([^"\s]+)" / }</pre></blockquote>

<p>really does catch every URL in my Netscape bookmark file.</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6.4. When Regular Expressions Aren't Enough</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6.6. Example: Extracting Linksfrom Arbitrary HTML</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>