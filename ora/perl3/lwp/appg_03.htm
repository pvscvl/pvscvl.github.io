<html><head><title>Modules with Object-Oriented Interfaces (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appg_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appg_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">G.3. Modules with Object-Oriented Interfaces</h2>

<p>So suppose that one day you want to write a program that will
automate the process of <tt class="literal">ftp</tt> ing a bunch of files
from one server down to your local machine, and then off to another
server.
</p>

<p>A quick browse through search.cpan.org turns up the module Net::FTP,
which you can download and install using normal installation
instructions (unless your sysadmin has already installed it, as many
have).
</p>

<p>Like Text::Wrap or any other module with a familiarly functional
interface, you start off using Net::FTP in your program by saying:
</p>

<blockquote><pre class="code">use Net::FTP;</pre></blockquote>

<p>However, that's where the similarity ends. The first
hint of difference is that the documentation for Net::FTP refers to
it as a <em class="emphasis">class</em>. A class is a kind of module, but
one that has an object-oriented interface.
</p>

<p>Whereas modules like Text::Wrap provide bits of useful code as
<em class="emphasis">functions</em>, to be called like
<tt class="literal">function(</tt><em class="replaceable"><tt>parameters</tt></em><tt class="literal">)</tt>
or like
<tt class="literal">PackageName::function(</tt><em class="replaceable"><tt>parameters</tt></em><tt class="literal">)</tt>,
Net::FTP and other modules with object-oriented interfaces provide
<em class="emphasis">methods</em>. Methods are sort of like functions in
that they have a name and parameters; but methods look different, and
are different, because you have to call them with a syntax that has a
class name or an object as a special argument. I'll
explain the syntax for method calls, and then later explain what they
all mean.
</p>

<p>Some methods are meant to be called as <em class="emphasis">class
methods</em>, with the class name (same as the module name) as
a special argument. Class methods look like this:
</p>

<blockquote><pre class="code">ClassName-&gt;methodname(parameter1, parameter2, ...)
ClassName-&gt;methodname( )   # if no parameters
ClassName-&gt;methodname     # same as above</pre></blockquote>

<p>which you will sometimes see written:</p>

<blockquote><pre class="code">methodname ClassName (parameter1, parameter2, ...)
methodname ClassName      # if no parameters</pre></blockquote>

<p>Basically, all class methods are for making new objects, and methods
that make objects are called <em class="emphasis">constructors</em> (and
the process of making them is called
"constructing" or
"instantiating"). Constructor
methods typically have the name
"new," or something including
"new"
(<tt class="literal">new_from_file</tt>, etc.); but they can conceivably be
named anything&#x2014;DBI's constructor method is
named "connect," for example.
</p>

<p>The object that a constructor method returns is typically captured in
a scalar variable:
</p>

<blockquote><pre class="code">$object = ClassName-&gt;new(param1, param2...);</pre></blockquote>

<p>Once you have an object (more later on exactly what that is), you can
use the other kind of method call syntax, the syntax for
<em class="emphasis">object method</em> calls. Calling object methods is
just like class methods, except that instead of the
<tt class="literal">ClassName</tt> as the special argument, you use an
expression that yields an <tt class="literal">object</tt>. Usually this is
just a scalar variable that you earlier captured the output of the
constructor in. Object method calls look like this:
</p>

<blockquote><pre class="code">$object-&gt;methodname(parameter1, parameter2, ...);
$object-&gt;methodname( )   # if no parameters
$object-&gt;methodname     # same as above</pre></blockquote>

<p>which is occasionally written as:</p>

<blockquote><pre class="code">methodname $object (parameter1, parameter2, ...)
methodname $object      # if no parameters</pre></blockquote>

<p>Examples of method calls are:</p>

<blockquote><pre class="code">my $session1 = Net::FTP-&gt;new("ftp.myhost.com");
  # Calls a class method "new", from class Net::FTP,
  #  with the single parameter "ftp.myhost.com",
  #  and saves the return value (which is, as usual,
  #  an object), in $session1.
  # Could also be written:
  #  new Net::FTP('ftp.myhost.com')
$session1-&gt;login("sburke","aoeuaoeu")
  || die "failed to login!\n";
   # calling the object method "login"
print "Dir:\n", $session1-&gt;dir( ), "\n";
$session1-&gt;quit;
  # same as $session1-&gt;quit( )
print "Done\n";
exit;</pre></blockquote>

<p>Incidentally, I suggest always using the syntaxes with parentheses
and <tt class="literal">-&gt;</tt> in them,<a href="#FOOTNOTE-8">[8]</a> and avoiding the
syntaxes that start out <tt class="literal">methodname</tt>
<tt class="literal">$object</tt> or <tt class="literal">methodname</tt>
<tt class="literal">ModuleName</tt>. When everything's
going right, they all mean the same thing as the
<tt class="literal">-&gt;</tt> variants, but the syntax with
<tt class="literal">-&gt;</tt> is more visually distinct from function
calls, as well as being immune to some kinds of rare but puzzling
ambiguities that can arise when you're trying to
call methods that have the same name as subroutines
you've defined.
</p><blockquote class="footnote"> <a name="FOOTNOTE-8" /><p> [8]The
character-pair <tt class="literal">-&gt;</tt> is supposed to look like an
arrow, not "negative
greater-than"!</p> </blockquote>

<p>But, syntactic alternatives aside, all this talk of constructing
objects and object methods begs the question&#x2014;what
<em class="emphasis">is</em> an object? There are several angles to this
question that the rest of this article will answer in turn: what can
you do with objects? what's in an object?
what's an object value? and why do some modules use
objects at all?
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appg_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appg_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">G.2. Modules and Their Functional Interfaces</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">G.4. What Can You Do with Objects?</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>