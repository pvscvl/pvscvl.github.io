<html><head><title>Programming with LWP Classes (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.2. Programming with LWP Classes</h2>

<p>The first step in writing a program that uses the LWP classes is to
create and initialize the browser object, which can be used
throughout the rest of the program. You need a browser object to
perform HTTP requests, and although you could use several browser
objects per program, I've never run into a reason to
use more than one.
</p>

<p>The browser object can use a proxy (a server that fetches web pages
for you, such as a firewall, or a web cache such as Squid).
It's
<a name="INDEX-105" />good form to check the environment for
proxy settings by calling <tt class="literal">env_proxy()</tt>:
</p>

<blockquote><pre class="code">use LWP::UserAgent;
my $browser = LWP::UserAgent-&gt;new( );
$browser-&gt;env_proxy( ); # if we're behind a firewall</pre></blockquote>

<p>That's all the initialization that most user agents
will ever need. Once you've done that, you usually
won't do anything with it for the rest of the
program, aside from calling its <tt class="literal">get( )</tt>,
<tt class="literal">head( )</tt>, or <tt class="literal">post( )</tt> methods, to
get what's at a URL, or to perform HTTP HEAD or POST
requests on it. For example:
</p>

<blockquote><pre class="code">$url = 'http://www.guardian.co.uk/';
my $response = $browser-&gt;get($url);</pre></blockquote>

<p>Then you call methods on the response to check the status, extract
the content, and so on. For example, this code checks to make sure we
successfully fetched an HTML document that isn't
worryingly short, then prints a message depending on whether the
words "Madonna" or
"Arkansas" appear in the content:
</p>

<blockquote><pre class="code">die "Hmm, error \"", $response-&gt;status_line( ),
  "\" when getting $url"  unless $response-&gt;is_success( );
my $content_type = $response-&gt;content_type( );
die "Hm, unexpected content type $content_type from $url"
   unless $content_type eq 'text/html';
my $content = $response-&gt;content( );
die "Odd, the content from $url is awfully short!"
   if length($content) &lt; 3000;
if($content =~ m/Madonna|Arkansas/i) {
   print "&lt;!-- The news today is IMPORTANT --&gt;\n",
         $content;
} else {
   print "$url has no news of ANY CONCEIVABLE IMPORTANCE!\n";
}</pre></blockquote>

<p>As you see, the response object <a name="INDEX-106" />contains all the data from the web
server's response (or an error message about how
that server wasn't reachable!), and we use method
calls to get at the data. There are accessors for the different parts
of the response (e.g., the status line) and convenience functions to
tell us whether the response was successful (<tt class="literal">is_success(
)</tt>).
</p>

<p>And that's a working and complete LWP program!</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3. The LWP Class Model</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.3. Inside the do_GET and do_POST Functions</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>