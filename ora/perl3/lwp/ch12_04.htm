<html><head><title>Ideas for Further Expansion (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appa_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">12.4. Ideas for Further Expansion</h2>

<p>In its current form, this bot is a passable implementation framework
for a Type Three Requester spider that checks links on typical HTML
web sites. In actual use, you would want to fine tune its heuristics.
For example, if you want to check the validity of lots of URLs to
sites that don't implement HEAD,
you'd want to improve on the logic that currently
just considers those URLs a lost cause; or you might want to add code
that will skip any attempt at HEADing a URL on a host that has
previously responded to any HEAD request with a
"Method Not Supported" error, or
has otherwise proven uncooperative.
</p>

<p>If you wanted the spider to check large numbers of URLs, or spider a
large site, it might be prudent to have some of its state saved to
disk (specifically <tt class="literal">@schedule</tt>,
<tt class="literal">%seen_url_before</tt>, <tt class="literal">%points_to</tt>,
and <tt class="literal">%notable_url_error</tt>); that way you could stop
the spider, start it later, and have it resume where it left off, to
avoid wastefully duplicating what it did the last time. It would also
be wise to have the spider enforce some basic constraints on
documents and requests, such as aborting any HTML transfer that
exceeds 200K or that seems to not actually be HTML, or by having the
spider put a maximum limit on the number of times it will hit any
given host (see the <tt class="literal">no_visits( )</tt> method mentioned
in the LWP::RobotUA documentation, and specifically consider
<tt class="literal">$bot-&gt;no_visits($url-&gt;host_port)</tt>).
</p>

<p>Moreover, the spider's basic behavior could be
altered easily by changing just a few of the routines. For example,
to turn it into a robot that merely checks URLs that you give it on
the command line, you need only redefine one routine like this:
</p>

<blockquote><pre class="code">sub near_url { 0; }   # no URLs are "near", i.e., spiderable</pre></blockquote>

<p>Conversely, to turn it into a pure Type Four Requester spider that
recursively looks for links to which any web pages it finds link, all
it takes is this:
</p>

<blockquote><pre class="code">sub near_url { 1; }   # all URLs are "near", i.e., spiderable</pre></blockquote>

<p>But as pointed out earlier in this chapter, that is a risky endeavor.
It requires careful monitoring and log analysis, constant adjustments
to its response-processing heuristics, intelligent caching, and other
matters regrettably beyond what can be sufficiently covered in this
book.
</p>


 


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appa_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12.3. Example: A Link-Checking Spider</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">A. LWP Modules</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>