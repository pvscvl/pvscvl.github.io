<html><head><title>Basic HTML::TokeParser Use (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.2. Basic HTML::TokeParser Use</h2>

<p>The HTML::TokeParser <a name="INDEX-409" />
<a name="INDEX-410" />module is a class for accessing HTML as
tokens. An HTML::TokeParser object gives you one token at a time,
much as a filehandle gives you one line at a time from a file. The
HTML can be tokenized from a file or string. The tokenizer decodes
entities in attributes, but not entities in text.
</p>

<p>Create a token stream object using one of these two constructors:</p>

<blockquote><pre class="code">my $stream = HTML::TokeParser-&gt;new($filename)
  || die "Couldn't read HTML file $filename: $!";</pre></blockquote>

<p>or:</p>

<blockquote><pre class="code">my $stream = HTML::TokeParser-&gt;new( \$string_of_html );</pre></blockquote>

<p>Once you have that stream object, you get the next token by calling:</p>

<blockquote><pre class="code">my $token = $stream-&gt;get_token( );</pre></blockquote>

<p>The <tt class="literal">$token</tt> variable then holds an array reference,
or <tt class="literal">undef</tt> if there's nothing left
in the stream's file or string. This code processes
every token in a document:
</p>

<blockquote><pre class="code">my $stream = HTML::TokeParser-&gt;new($filename)
  || die "Couldn't read HTML file $filename: $!";

while(my $token = $stream-&gt;get_token) {
  # ... consider $token ...
}</pre></blockquote>

<p>The <tt class="literal">$token</tt> can have one of six kinds of values,
distinguished first by the value of
<tt class="literal">$token-&gt;[0]</tt>, as shown
<a name="INDEX-411" />in
<a href="ch07_02.htm">Table 7-1</a>.
</p>

<a name="perllwp-CHP-7-TABLE-1" /><h4 class="objtitle">Table 7-1. Token types </h4><table border="1" cellpadding="3">



<tr>
<th>
<p>Token</p>
</th>
<th>
<p>Values</p>
</th>
</tr>


<tr>
<td>
<p>Start-tag</p>
</td>
<td>
<blockquote><pre class="code">["S",  $tag, $attribute_hashref, $attribute_order_arrayref, $source]</pre></blockquote>
</td>
</tr>
<tr>
<td>
<p>End-tag</p>
</td>
<td>
<blockquote><pre class="code">["E",  $tag, $source]</pre></blockquote>
</td>
</tr>
<tr>
<td>
<p>Text</p>
</td>
<td>
<blockquote><pre class="code">["T",  $text, $should_not_decode]</pre></blockquote>
</td>
</tr>
<tr>
<td>
<p>Comment</p>
</td>
<td>
<blockquote><pre class="code">["C",  $source]</pre></blockquote>
</td>
</tr>
<tr>
<td>
<p>Declaration</p>
</td>
<td>
<blockquote><pre class="code">["D",  $source]</pre></blockquote>
</td>
</tr>
<tr>
<td>
<p>Processing instruction</p>
</td>
<td>
<blockquote><pre class="code">["PI", $content, $source]</pre></blockquote>
</td>
</tr>

</table><p>

<a name="perllwp-CHP-7-SECT-2.1" /><div class="sect2">
<h3 class="sect2">7.2.1. Start-Tag Tokens</h3>

<p>If <tt class="literal">$token-&gt;[0]</tt> is <tt class="literal">"S"</tt>, the
token <a name="INDEX-412" />
<a name="INDEX-413" />represents a start-tag:
</p>

<blockquote><pre class="code">["S",  $tag, $attribute_hash, $attribute_order_arrayref, $source]</pre></blockquote>

<p>The components of this token are:</p>

<dl>
<dt><tt class="literal">$tag</tt></dt>
<dd>
The tag name, in lowercase.
</dd>


<dt><tt class="literal">$attribute_hashref</tt></dt>
<dd>
A reference to a hash encoding the attributes of this tag. The
(lowercase) attribute names are the keys of the hash.

</dd>


<dt><tt class="literal">$attribute_order_arrayref</tt></dt>
<dd>
A reference to an array of (lowercase) attribute names, in case you
need to access elements in order.

</dd>


<dt><tt class="literal">$source</tt></dt>
<dd>
The original HTML for this token.
</dd>

</dl>

<p>The first three values are the most interesting ones, for most
purposes.
</p>

<p>For example, parsing this HTML:</p>

<blockquote><pre class="code">&lt;IMG SRC="kirk.jpg" alt="Shatner in r&amp;ocirc;le of Kirk" WIDTH=352 height=522&gt;</pre></blockquote>

<p>gives this token:</p>

<blockquote><pre class="code">[
  'S',
  'img',
  { 'alt' =&gt; 'Shatner in r&#xF4;le of Kirk',
     'height' =&gt; '522', 'src' =&gt; 'kirk.jpg', 'width' =&gt; '352'
  },
  [ 'src', 'alt', 'width', 'height' ],
  '&lt;IMG SRC="kirk.jpg" alt="Shatner in r&amp;ocirc;le of Kirk" WIDTH=352 height=522&gt;'
]</pre></blockquote>

<p>Notice that the tag and attribute names have been lowercased, and the
<tt class="literal">&amp;ocirc;</tt> entity decoded within the
<tt class="literal">alt</tt> attribute.
</p>

</div>
<a name="perllwp-CHP-7-SECT-2.2" /><div class="sect2">
<h3 class="sect2">7.2.2. End-Tag Tokens</h3>

<p>When <tt class="literal">$token-&gt;[0]</tt> is <tt class="literal">"E"</tt>, the
token <a name="INDEX-414" />
<a name="INDEX-415" />represents an end-tag:
</p>

<blockquote><pre class="code">[ "E", $tag, $source ]</pre></blockquote>

<p>The components of this tag are:</p>

<dl>
<dt><tt class="literal">$tag</tt></dt>
<dd>
The lowercase name of the tag being closed.
</dd>


<dt><tt class="literal">$source</tt></dt>
<dd>
The original HTML for this token.
</dd>

</dl>

<p>Parsing this HTML:</p>

<blockquote><pre class="code">&lt;/A&gt;</pre></blockquote>

<p>gives this token:</p>

<blockquote><pre class="code">[ 'E', 'a', '&lt;/A&gt;' ]</pre></blockquote>

</div>
<a name="perllwp-CHP-7-SECT-2.3" /><div class="sect2">
<h3 class="sect2">7.2.3. Text Tokens</h3>

<p>When <tt class="literal">$token-&gt;[0]</tt> is <tt class="literal">"T"</tt>, the
token <a name="INDEX-416" />
<a name="INDEX-417" />represents text:
</p>

<blockquote><pre class="code">["T", $text, $should_not_decode]</pre></blockquote>

<p>The elements of this array are:</p>

<dl>
<dt><tt class="literal">$text</tt></dt>
<dd>
The text, which may have entities.
</dd>


<dt><tt class="literal">$should_not_decode</tt></dt>
<dd>
A Boolean value true indicating that you should not decode the
entities in <tt class="literal">$text</tt>.

</dd>

</dl>

<p>Tokenizing this HTML:</p>

<blockquote><pre class="code">&amp;amp; the</pre></blockquote>

<p>gives this token:</p>

<blockquote><pre class="code">[ 'T',
  ' &amp;amp; the',
  ''
]</pre></blockquote>

<p>The empty string is a false value, indicating that
<a name="INDEX-418" />
<a name="INDEX-419" />there's nothing stopping
us from decoding <tt class="literal">$text</tt> with
<a name="INDEX-420" /><tt class="literal">decode_entities( )</tt> from
HTML::Entities:
</p>

<blockquote><pre class="code">decode_entities($token-&gt;[1]) if $token-&gt;[2];</pre></blockquote>

<p>Text inside <tt class="literal">&lt;script&gt;</tt>,
<tt class="literal">&lt;style&gt;</tt>, <tt class="literal">&lt;xmp&gt;</tt>,
<tt class="literal">&lt;listing&gt;</tt>, and
<tt class="literal">&lt;plaintext&gt;</tt> tags is not supposed to be
entity-decoded. It is for such text that
<tt class="literal">$should_not_decode</tt> is true.
</p>

</div>
<a name="perllwp-CHP-7-SECT-2.4" /><div class="sect2">
<h3 class="sect2">7.2.4. Comment Tokens</h3>

<p>When <tt class="literal">$token-&gt;[0]</tt> is <tt class="literal">"C"</tt>, you
have a <a name="INDEX-421" />
<a name="INDEX-422" />comment token:
</p>

<blockquote><pre class="code">["C", $source]</pre></blockquote>

<p>The <tt class="literal">$source</tt> component of the token holds the
original HTML of the comment. Most programs that process HTML simply
ignore comments.
</p>

<p>Parsing this HTML</p>

<blockquote><pre class="code">&lt;!-- Shatner's best known r&amp;ocirc;le --&gt;</pre></blockquote>

<p>gives us this <tt class="literal">$token</tt> value:</p>

<blockquote><pre class="code">[ 'C', #0: we're a comment
  '&lt;!-- Shatner's best known r&amp;ocirc;le --&gt;'  #1: source
]</pre></blockquote>

</div>
<a name="perllwp-CHP-7-SECT-2.5" /><div class="sect2">
<h3 class="sect2">7.2.5. Markup Declaration Tokens</h3>

<p>When <tt class="literal">$token-&gt;[0]</tt> is <tt class="literal">"D"</tt>, you
have a <a name="INDEX-423" />
<a name="INDEX-424" />declaration token:
</p>

<blockquote><pre class="code">["D", $source]</pre></blockquote>

<p>The <tt class="literal">$source</tt> element of the array is the HTML of
the declaration. Declarations rarely occur in HTML, and when they do,
they are rarely of any interest. Almost all programs that process
HTML ignore declarations.
</p>

<p>This HTML:</p>

<blockquote><pre class="code">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;</pre></blockquote>

<p>gives this token:</p>

<blockquote><pre class="code">[ 'D',
  '&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;'
]</pre></blockquote>

</div>
<a name="perllwp-CHP-7-SECT-2.6" /><div class="sect2">
<h3 class="sect2">7.2.6. Processing Instruction Tokens</h3>

<p>When <tt class="literal">$token-&gt;[0]</tt> is <tt class="literal">"PI"</tt>,
the token represents a <a name="INDEX-425" />
<a name="INDEX-426" />processing instruction:
</p>

<blockquote><pre class="code">[ "PI", $instruction, $source ]</pre></blockquote>

<p>The components are:</p>

<dl>
<dt><tt class="literal">$instruction</tt></dt>
<dd>
The processing instruction stripped of initial
<tt class="literal">&lt;?</tt> and trailing <tt class="literal">&gt;</tt>.

</dd>


<dt><tt class="literal">$source</tt></dt>
<dd>
The original HTML for the processing instruction.
</dd>

</dl>

<p>A processing instruction is an SGML <a name="INDEX-427" />construct
rarely used in HTML. Most programs extracting information from HTML
ignore processing instructions. If you do handle processing
instructions, be warned that in SGML (and thus HTML) a processing
instruction ends with a greater-than (<tt class="literal">&gt;</tt>), but
in XML (and thus XHTML), a processing instruction ends with a
question mark and a greater-than sign (<tt class="literal">?&gt;</tt>).
</p>

<p>Tokenizing:</p>

<blockquote><pre class="code">&lt;?subliminal message&gt;</pre></blockquote>

<p>gives:</p>

<blockquote><pre class="code">[ 'PI', 'subliminal message', '&lt;?subliminal message&gt;' ]</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7. HTML Processing with Tokens</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.3. Individual Tokens</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>