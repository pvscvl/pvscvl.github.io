<html><head><title>The LWP Class Model (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 3. The LWP Class Model</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#perllwp-CHP-3-SECT-1">The Basic Classes</a><br />
<a href="ch03_02.htm">Programming with LWP Classes</a><br />
<a href="ch03_03.htm">Inside the do_GET and do_POST Functions</a><br />
<a href="ch03_04.htm">User Agents</a><br />
<a href="ch03_05.htm">HTTP::Response Objects</a><br />
<a href="ch03_06.htm">LWP Classes: Behind the Scenes</a><br /></p></div><p>For full access to every part of an HTTP transaction&#x2014;request
headers and body, response status line, headers and body&#x2014;you
have to go beyond LWP::Simple, to the object-oriented modules that
form the heart of the LWP suite. This chapter introduces the classes
that LWP uses to represent browser objects (which you use for making
requests) and response objects (which are the result of making a
request). You'll learn the basic mechanics of
customizing requests and inspecting responses, which
we'll use in later chapters for cookies, language
selection, spidering, and more.
</p><div class="sect1"><a name="perllwp-CHP-3-SECT-1" /></a>
<h2 class="sect1">3.1. The Basic Classes</h2>

<p>In LWP's object model, <a name="INDEX-99" /></a>
<a name="INDEX-100" /></a>you perform GET, HEAD, and POST requests
via a browser object (a.k.a. a user agent object) of
<a name="INDEX-101" /></a>
<a name="INDEX-102" /></a>class
LWP::UserAgent, and the result is an HTTP response of the aptly
<a name="INDEX-103" /></a>
<a name="INDEX-104" /></a>named
class HTTP::Response. These are the two main classes, with other
incidental classes providing features such as cookie management and
user agents that act as spiders. Still more classes deal with
non-HTTP aspects of the Web, such as HTML. In this chapter,
we'll deal with the classes needed to perform web
requests.
</p>

<p>The classes can be loaded individually:</p>

<blockquote><pre class="code">use LWP::UserAgent;
use HTTP::Response;</pre></blockquote>

<p>But it's easiest to simply use the LWP convenience
class, which loads LWP::UserAgent and HTTP::Response for you:
</p>

<blockquote><pre class="code">use LWP;               # same as previous two lines</pre></blockquote>

<p>If you're familiar with object-oriented programming
in Perl, the LWP classes will hold few real surprises for you. All
you need is to learn the names of the basic classes and accessors. If
you're not familiar with object-oriented programming
in any language, you have some catching up to do. <a href="appg_01.htm">Appendix G, "User's View of Object-Oriented Modules"</a> will give you a bit of conceptual background
on the object-oriented approach to things. To learn more (including
information on how to write your own classes), check out
<em class="emphasis"><a href="../prog/index.htm">Programming Perl</a></em> (O'Reilly).
</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.7. Example: Babelfish</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.2. Programming with LWP Classes</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
      </map>

</body></html>
