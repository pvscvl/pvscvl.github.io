<html><head><title>Inside the do_GET and do_POST Functions (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">3.3. Inside the do_GET and do_POST Functions</h2>

<p>You now know enough <a name="INDEX-107" /> <a name="INDEX-108" />
<a name="INDEX-109" />
<a name="INDEX-110" />to follow the <tt class="literal">do_GET( )</tt>
and <tt class="literal">do_POST( )</tt> functions introduced in <a href="ch02_01.htm">Chapter 2, "Web Basics"</a>. Let's look at
<tt class="literal">do_GET( )</tt> first.
</p>

<p>Start by loading the module, then declare the
<tt class="literal">$browser</tt> variable that will hold the user agent.
It's declared outside the scope of the
<tt class="literal">do_GET( )</tt> subroutine, so it's
essentially a static variable, retaining its value between calls to
the subroutine. For example, if you turn on support for HTTP cookies,
this browser could persist between calls to <tt class="literal">do_GET(
)</tt>, and cookies set by the server in one call would be sent
back in a subsequent call.
</p>

<blockquote><pre class="code">use LWP;
my $browser;
sub do_GET {</pre></blockquote>

<p>Next, create the user agent if it doesn't already
exist:
</p>

<blockquote><pre class="code">$browser = LWP::UserAgent-&gt;new( ) unless $browser;</pre></blockquote>

<p>Enable proxying, if you're behind
<a name="INDEX-111" />a firewall:
</p>

<blockquote><pre class="code">$browser-&gt;env_proxy();</pre></blockquote>

<p>Then perform a GET request based on the subroutine's
parameters:
</p>

<blockquote><pre class="code">my $response = $browser-&gt;request(@_);</pre></blockquote>

<p>In list context, you return information provided by the response
object: the content, status line, a Boolean indicating whether the
status meant success, and the response object itself:
</p>

<blockquote><pre class="code">return($response-&gt;content, $response-&gt;status_line, $response-&gt;is_success, $response)
  if wantarray;</pre></blockquote>

<p>If there was a problem and you called in scalar context, we return
<tt class="literal">undef</tt>:
</p>

<blockquote><pre class="code">return unless $response-&gt;is_success;</pre></blockquote>

<p>Otherwise we return the content:</p>

<blockquote><pre class="code">  return $response-&gt;content;
}</pre></blockquote>

<p>The <tt class="literal">do_POST( )</tt> subroutine is just like
<tt class="literal">do_GET( )</tt>, only it uses the <tt class="literal">post(
)</tt> method instead of <tt class="literal">get( )</tt>.
</p>

<p>The rest of this chapter is a detailed reference to the two classes
we've covered so far: LWP::UserAgent and
HTTP::Response.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">3.2. Programming with LWP Classes</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">3.4. User Agents</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>