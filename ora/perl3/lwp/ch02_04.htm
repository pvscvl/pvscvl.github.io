<html><head><title>Fetching Documents Without LWP::Simple (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.4. Fetching Documents Without LWP::Simple</h2>

<p>LWP::Simple is convenient but not all <a name="INDEX-84" />powerful. In particular, we
can't make POST requests or set request headers or
query response headers. To do these things, we need to go beyond
LWP::Simple.
</p>

<p>The general all-purpose way to do HTTP GET queries is by using the
<tt class="literal">do_GET( )</tt> subroutine shown in <a href="ch02_04.htm">Example 2-5</a>. 
</p>

<a name="perllwp-CHP-2-EX-5" /><div class="example">
<h4 class="objtitle">Example 2-5. The do_GET subroutine </h4>
<blockquote><pre class="code">use LWP;
my $browser;
sub do_GET {
  # Parameters: the URL,
  #  and then, optionally, any header lines: (key,value, key,value)
  $browser = LWP::UserAgent-&gt;new( ) unless $browser;
  my $resp = $browser-&gt;get(@_);
  return ($resp-&gt;content, $resp-&gt;status_line, $resp-&gt;is_success, $resp)
    if wantarray;
  return unless $resp-&gt;is_success;
  return $resp-&gt;content;
}</pre></blockquote>
</div>

<p>A full explanation of the internals of <tt class="literal">do_GET( )</tt>
is <a name="INDEX-85" />
<a name="INDEX-86" />given in <a href="ch03_01.htm">Chapter 3, "The LWP Class Model"</a>. Until
then, we'll be using it without fully understanding
how it works.
</p>

<p>You can call the <tt class="literal">do_GET( )</tt> function in either
scalar or list context:
</p>

<blockquote><pre class="code"><em class="replaceable"><tt>doc</em> = do_GET(<em class="replaceable">URL </em>[<em class="replaceable">header, value, ...</tt></em>]);
(<em class="replaceable"><tt>doc</em>, <em class="replaceable">status</em>, <em class="replaceable">successful</em>, <em class="replaceable">response</em>) = do_GET(<em class="replaceable">URL </em>[<em class="replaceable">header, value, ...</tt></em>]);</pre></blockquote>

<p>In scalar context, it returns the document or
<tt class="literal">undef</tt> if there is an error. In list context, it
returns the document (if any), the status line from the HTTP
response, a Boolean value indicating whether the status code
indicates a successful response, and an object we can interrogate to
find out more about the response.
</p>

<p>Recall that assigning to <tt class="literal">undef</tt> discards that
value. For example, this is how you fetch a document into a string
and learn whether it is successful:
</p>

<blockquote><pre class="code">($doc, undef, $successful, undef) = do_GET('http://www.suck.com/');</pre></blockquote>

<p>The optional header and value arguments to <tt class="literal">do_GET(
)</tt> let you add headers to the request. For example, to
attempt to fetch the German language version of the European Union
home page:
</p>

<blockquote><pre class="code">$body = do_GET("http://europa.eu.int/",
  "Accept-language" =&gt; "de",
);</pre></blockquote>

<p>The <tt class="literal">do_GET( )</tt> function that we'll
use in this chapter provides the same basic convenience as
LWP::Simple's <tt class="literal">get( )</tt> but without
the limitations.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.3. LWP::Simple</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.5. Example: AltaVista</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>