<html><head><title>Troubleshooting (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.3. Troubleshooting</h2>

<p>Both when developing and <a name="INDEX-381" />maintaining
data extraction programs, things can go wrong. Suddenly, instead of
an article summary, you see a huge mass of HTML, or you
don't get any output at all. Several things might
cause this. For example, the web site's HTML
changed, or your program wasn't flexible enough to
deal with all the naturally occurring variations in the HTML.
</p>

<p>There are two basic types <a name="INDEX-382" /> <a name="INDEX-383" />of problems:
false positives and false negatives. A false positive is when your
regular expression identifies something it thinks is the information
you're after, but it isn't really.
For example, if the O'Reilly Network used the
<tt class="literal">itemtemplate</tt> and summary format for things that
aren't articles, the summary extraction program in
<a href="ch06_02.htm">Example 6-3</a> would report headlines that
aren't really headlines.
</p>

<p>There are two ways to deal with false positives. You can tighten your
regular expression to prevent the uninteresting piece of HTML from
matching. For example, matching text with
<tt class="literal">/[^&lt;]*/</tt> instead of <tt class="literal">/.*?/</tt>
ensures the text has no HTML. The other way to prevent a false
positive is to inspect the results of the match to ensure
they're relevant to your search. For example, in
<a href="ch06_02.htm">Example 6-3</a>, we checked that the URL, title, and
summary were found when we decomposed the chunk.
</p>

<p>A false negative is where your program fails to find information for
which it is looking. There are also two ways to fix this. The first
is to relax your regular expression. For example, replace a single
space with <tt class="literal">/\s*/</tt> to allow for any amount of
whitespace. The second way is to make another pass through the
document with a separate regular expression or processing technique,
to catch the data you missed the first time around. For example,
extract into an array all the things that look like news headlines,
then remove the first element from the array if you know
it's always going to be an advertisement instead of
an actual headline.
</p>

<p>Often the hardest part of
<a name="INDEX-384" /> <a name="INDEX-385" />debugging
a regular expression is locating which part isn't
matching or is matching too much. There are some simple steps you can
take to identify where your regular expression is going wrong.
</p>

<p>First, print the text you're matching against. Print
it immediately before the match, so you are totally certain what the
regular expression is being applied to. You'd be
surprised at the number of subtle ways the page your program fetches
can differ from the page for which you designed the regular
expression.
</p>

<p>Second, put capturing parentheses around every chunk of the regular
expression to see what's matching. This lets you
find runaway matches, i.e., places where a quantifier matches too
much. For example, the <tt class="literal">/.*/</tt> intended to skip just
the formatting HTML might instead skip the formatting HTML, three
entries, and another piece of formatting HTML. In such situations,
it's typically because either the thing being
quantified was too general (e.g., instead of the dot, we should have
had <tt class="literal">/[^&lt;]/</tt> to avoid matching HTML), or because
the literal text after the quantifier wasn't enough
to identify the stop point. For example,
<tt class="literal">/&lt;font/</tt> instead of <tt class="literal">/&lt;font
size=-1/</tt> might make a minimal quantifier stop too soon (at
the first <tt class="literal">font</tt> tag, instead of the correct
<tt class="literal">font</tt> tag) or a greedy quantifier match too much
(at the last <tt class="literal">font</tt> tag, instead of the last
<tt class="literal">size=-1 font</tt> tag).
</p>

<p>If the regular expression you've created
isn't matching at all, repeatedly take the last
chunk off the regular expression until it does match. The last bit
you removed was causing the match to fail, so inspect it to see why.
</p>

<p>For example, let's find out why this
isn't matching:
</p>

<blockquote><pre class="code">$text = qq(&lt;a href="file.html"&gt;&lt;b&gt;Dog&lt;/b&gt;&lt;/a&gt;Woof\nWoof&lt;/p&gt;);
($file, $title, $summary) = 
    $text =~ m{&lt;a href="(.*?)"&gt;&lt;b&gt;(.*?)&lt;/b&gt;&lt;/a&gt;\s*(.*?)&lt;/p&gt;};</pre></blockquote>

<p>Taking the last piece off yields this regular expression:</p>

<blockquote><pre class="code">&lt;a href="(.*?)"&gt;&lt;b&gt;(.*?)&lt;/b&gt;&lt;/a&gt;\s*(.*?)</pre></blockquote>

<p>This matches. This tells us that <tt class="literal">/&lt;/p&gt;/</tt>
wasn't being found after <tt class="literal">/(.*?)/</tt>
matched. We're not going to see much if we print
<tt class="literal">$3</tt> at this point, as we're
matching minimally, and without something forcing the quantifier to
match more than 0, it'll be happy to match nothing.
</p>

<p>The way around this is to remove the minimal matching&#x2014;how much
could it match?
</p>

<blockquote><pre class="code">&lt;a href="(.*?)"&gt;&lt;b&gt;(.*?)&lt;/b&gt;&lt;/a&gt;\s*(.*)</pre></blockquote>

<p>Printing <tt class="literal">$3</tt> now show us that
<tt class="literal">/.*/</tt> is matching only <tt class="literal">Woof</tt>,
instead of <tt class="literal">Woof\nWoof</tt>. The newline should be the
giveaway&#x2014;we need to add the <tt class="literal">/s</tt> modifier to
the original regular expression (be sure to change the
<tt class="literal">/.*/</tt> back to <tt class="literal">/.*?/</tt>!) to ensure
that summaries with embedded newlines are correctly located.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6.2. Regular Expression Techniques</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">6.4. When Regular Expressions Aren't Enough</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>