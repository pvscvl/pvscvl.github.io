<html><head><title>Creating New Elements (Perl &amp; LWP)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Sean Burke" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001789L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl &amp; LWP" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; LWP" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch11_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">10.5. Creating New Elements</h2>

<p>So far we haven't directly created any <a name="INDEX-602" /> <a name="INDEX-603" />new
HTML::Element objects. All the elements that have appeared thus far
were created by HTML::TreeBuilder as part of its delegated task of
building whole trees. But suppose that we actually do need to add
something to a tree that never existed elsewhere in that or any other
tree. In the above section, we actually snuck in creating a new node
in this statement:
</p>

<blockquote><pre class="code">$template_title-&gt;push_content( 'No title' );</pre></blockquote>

<p>But that's hardly an amazing feat, because that node
isn't a real object. You can actually create a new
object by calling
<tt class="literal">HTML::Element-&gt;new('</tt><em class="replaceable"><tt>tagname</tt></em><tt class="literal">')</tt>.
So this would add an <tt class="literal">hr</tt> element to a given
paragraph object:
</p>

<blockquote><pre class="code">my $hr = HTML::Element-&gt;new('hr');
$paragraph-&gt;push_content($hr);</pre></blockquote>

<p>And you could create a new <tt class="literal">img</tt> node with given
attributes:
</p>

<blockquote><pre class="code">my $img = HTML::Element-&gt;new('img');
$img-&gt;attr('src', 'hooboy.png');
$img-&gt;attr('alt', 'Lookit that!');
$paragraph-&gt;push_content($img);</pre></blockquote>

<p>Incidentally, the setting of attributes can be done in the
constructor call:
</p>

<blockquote><pre class="code">my $img = HTML::Element-&gt;new('img',   # plus any key,value pairs...
  'src' =&gt; 'hooboy.png',
  'alt' =&gt; 'Lookit that!',
);
$paragraph-&gt;push_content($img);</pre></blockquote>

<p>This is simple enough, but it becomes rather annoying when you want
to construct several linked nodes. For example, suppose you wanted to
construct objects equivalent to what you'd get if
you parsed this:
</p>

<blockquote><pre class="code">&lt;li&gt;See &lt;b&gt;&lt;a href="page.html"&gt;here.&lt;/a&gt;&lt;/b&gt;!&lt;/li&gt;</pre></blockquote>

<p>Even this little treelet is fairly tedious to produce using normal
constructor calls:
</p>

<blockquote><pre class="code">use HTML::Element;
 
my $li = HTML::Element-&gt;new('li');
my $b  = HTML::Element-&gt;new('b');
my $a  = HTML::Element-&gt;new('a', 'href' =&gt; 'page.html');
$a-&gt;push_content('here.');
$b-&gt;push_content($a);
$li-&gt;push_content("See ", $b, "!");

# Have a look:
print $li-&gt;as_HTML, "\n";
$li-&gt;dump;</pre></blockquote>

<p>That indeed shows us that we succeeded in constructing what we wanted:</p>

<blockquote><pre class="code">&lt;li&gt;See &lt;b&gt;&lt;a href="page.html"&gt;here.&lt;/a&gt;&lt;/b&gt;!

&lt;li&gt; @0
  "See "
  &lt;b&gt; @0.1
    &lt;a href="page.html"&gt; @0.1.0
      "here."
  "!"</pre></blockquote>

<a name="perllwp-CHP-10-SECT-5.1" /><div class="sect2">
<h3 class="sect2">10.5.1. Literals</h3>

<p>If you try manually constructing <a name="INDEX-604" />
<a name="INDEX-605" />and
linking every element in a larger structure such as a table, the code
will be maddening. One solution is not to create the elements at all,
but to create a single element, called a <tt class="literal">~literal</tt>
pseudoelement, that contains the raw source you want to appear when
that part of the tree is dumped. These sorts of objects are very much
like the <tt class="literal">~comment</tt> pseudoelements we saw in the
last section; their real content is in their <tt class="literal">text</tt>
attribute:
</p>

<blockquote><pre class="code">my $li = HTML::Element-&gt;new( '~literal',
  'text', '&lt;li&gt;See &lt;b&gt;&lt;a href="page.html"&gt;here.&lt;/a&gt;&lt;/b&gt;!&lt;/li&gt;'
);</pre></blockquote>

<p>This constructs something that will appear as that chunk of text when
<tt class="literal">as_HTML( )</tt> is called on it, but
it's nothing like a normal HTML element&#x2014;you
can't put other elements or text under it, and you
can't see it with <tt class="literal">look_down</tt> or
<tt class="literal">find_by_tag_name( )</tt> (unless
you're looking for a <tt class="literal">~literal</tt>
element, which you're probably not).
</p>

</div>
<a name="perllwp-CHP-10-SECT-5.2" /><div class="sect2">
<h3 class="sect2">10.5.2. New Nodes from Lists</h3>

<p>Literals are fine for cases
<a name="INDEX-606" />
<a name="INDEX-607" />where you just want to drop
arbitrarily large amounts of undigested HTML source into a tree right
before you call <tt class="literal">as_HTML( )</tt>. But when you want to
really make new, full-fledged elements, you can do that with a
friendlier syntax with the <tt class="literal">new_from_lol( )</tt>
<a name="INDEX-608" />
<a name="INDEX-609" />constructor.
</p>

<p>With <tt class="literal">new_from_lol( )</tt>, you can specify an element
with a list reference whose first item should be the tag name, which
then specifies attributes with an optional hash reference, and then
contains any other nodes, either as bits of text, preexisting element
objects, or more list references. This is best shown by example:
</p>

<blockquote><pre class="code">my $li = HTML::Element-&gt;new_from_lol(
  [ 'li',
          "See ",
          [ 'b',
                 [ 'a',
                        {'href' =&gt; 'page.html'},
                        "here."
                 ]
          ],
          "!"
  ]
);    # or indent it however you prefer -- probably more concisely</pre></blockquote>

<p>And this produces exactly the same tree as when we called
<tt class="literal">HTML::Element-&gt;new</tt> three times then linked up
the resulting elements.
</p>

<p>The benefits of the <tt class="literal">new_from_lol( )</tt> approach are
you can easily specify children at construction time, and
it's very hard to produce mis-nested trees, because
if the number of <tt class="literal">[</tt>'s above
doesn't match the number of
<tt class="literal">]</tt>'s, it won't
parse as valid Perl. Moreover, it can actually be a relatively
concise format. The above code, with some whitespace removed,
basically fits happily on one line:
</p>

<blockquote><pre class="code">my $li = HTML::Element-&gt;new_from_lol(
  ['li',  "See ",  ['b', ['a', {'href' =&gt; 'page.html'}, "here." ] ], "!" ]
);</pre></blockquote>

<p>So, for example, consider returning to the template-insertion problem
in the previous section, and suppose that besides dumping the
article's content into a template, we should also
preface the content with something like this:
</p>

<blockquote><pre class="code">&lt;p&gt;The original version of the following story is to found at:
&lt;br&gt;&lt;a href="$orig_url"&gt;$orig_url&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</pre></blockquote>

<p>This can be done by replacing:</p>

<blockquote><pre class="code">put_into_template( $good_td-&gt;content_list );</pre></blockquote>

<p>with this:</p>

<blockquote><pre class="code"># Assuming $orig_url has been set somewhere...

put_into_template(
  HTML::Element-&gt;new_from_lol(
    ['p', "The original version of the following story is to found at:",
      ['a', {'href', $orig_url}, $orig_url],
    ]
  ),
  HTML::Element-&gt;new_from_lol(['hr']),
  $good_td-&gt;content_list,
);</pre></blockquote>

<p>If you find <tt class="literal">new_from_lol( )</tt> notation to be an
unnecessary elaboration, you can still manually construct each
element with <tt class="literal">HTML::Element-&gt;new</tt> and link them
up before passing them to <tt class="literal">put_into_template( )</tt>. Or
you could just as well create a <tt class="literal">~literal</tt>
pseudoelement containing the raw source:
</p>

<blockquote><pre class="code">put_into_template(
  HTML::Element-&gt;new('~literal', 'text' =&gt; qq{
      &lt;p&gt;The original version of the following story is to found at:
      &lt;br&gt;&lt;a href="$orig_url"&gt;$orig_url&lt;/a&gt;&lt;/p&gt;
      &lt;hr&gt;
  }),
  $good_td-&gt;content_list,
);</pre></blockquote>

<p>While the <tt class="literal">new_from_lol( )</tt> syntax is an expressive
shorthand for the general form of element construction, you may well
prefer the directness of creating a single
<tt class="literal">~literal</tt> or the simplicity of normal
<tt class="literal">-&gt;new</tt> calls. As the Perl saying goes, there is
<a name="INDEX-610" />
<a name="INDEX-611" />more
than one way to do it.
</p>


 
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch11_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">10.4. Attaching in Another Tree</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">11. Cookies, Authentication,and Advanced Requests</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

</body></html>