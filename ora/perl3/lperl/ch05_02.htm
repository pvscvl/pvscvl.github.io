<html><head><title>Hash Element Access (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">5.2. Hash Element Access</h2>

<p><a name="INDEX-381" /> <a name="INDEX-382" />To access an element of a hash, use
syntax that looks like this:
</p>

<blockquote><pre class="code">$hash{$some_key}</pre></blockquote>

<p>This is similar to what we used for array access, but here we use
<a name="INDEX-383" />curly braces instead of square brackets
around the subscript (key).<a href="#FOOTNOTE-126">[126]</a> And that key expression is now a string, rather than a
number:
</p><blockquote class="footnote"> <a name="FOOTNOTE-126" /><p>[126]Here's a peek into
the mind of Larry Wall: Larry says that we use curly braces instead
of square brackets because we're doing something fancier than
ordinary array access, so we should use fancier punctuation. </p>
</blockquote>

<blockquote><pre class="code">$family_name{"fred"} = "flintstone";
$family_name{"barney"} = "rubble";</pre></blockquote>

<p><a href="ch05_02.htm">Figure 5-2</a> shows how the resulting hash keys are
assigned.
</p>

<a name="lperl3-CHP-5-FIG-2" /><div class="figure"><img height="92" alt="Figure 5-2" src="figs/lrnp_0502.gif" width="216" /></div><h4 class="objtitle">Figure 5-2. Assigned hash keys</h4>

<p>This lets us use code like this:</p>

<blockquote><pre class="code">foreach $person (qw&lt; barney fred &gt;) {
  print "I've heard of $person $family_name{$person}.\n";
}</pre></blockquote>

<p>The name of the <a name="INDEX-384" />
<a name="INDEX-385" />hash is like any other Perl identifier
(letters, digits, and underscores, but can't start with a
digit). And it's from a separate namespace; that is,
there's no connection between the hash element
<tt class="literal">$family_name{"fred"}</tt> and a subroutine
<tt class="literal">&amp;family_name</tt>, for example. Of course,
there's no reason to confuse everyone by giving everything the
same name. But Perl won't mind if you also have a scalar called
<tt class="literal">$family_name</tt> and array elements like
<tt class="literal">$family_name[5]</tt>. We humans will have to do as Perl
does; that is, we'll have to look to see what punctuation
appears before and after the identifier to see what it means. When
there is a <a name="INDEX-386" />dollar sign in front of the name and
<a name="INDEX-387" />curly braces afterwards, it's a
hash element that's being accessed.
</p>

<p>When choosing the name of a hash, it's often nice to think of
the word "of" between the name of the hash and the key.
As in, "the <tt class="literal">family_name</tt> of
<tt class="literal">fred</tt> is
<tt class="literal">flintstone</tt><a name="INDEX-388" />". So the hash is named
<tt class="literal">family_name</tt>. Then it becomes clear what the
relationship is between the keys and their values.
</p>

<p>Of course, the hash key may be any expression, not just the literal
strings and simple scalar variables that we're showing here:
</p>

<blockquote><pre class="code">$foo = "bar";
print $family_name{ $foo . "ney" };  # prints "rubble"</pre></blockquote>

<p>When you store something into an existing hash element, that
overwrites the previous value:
</p>

<blockquote><pre class="code">$family_name{"fred"} = "astaire";  # gives new value to existing element
$bedrock = $family_name{"fred"};   # gets "astaire"; old value is lost</pre></blockquote>

<p>That's analogous to what happens with arrays and scalars; if
you store something new into <tt class="literal">$pebbles[17]</tt> or
<tt class="literal">$dino</tt>, the old value is replaced. If you store
something new into <tt class="literal">$family_name{"fred"}</tt>, the old
value is replaced as well.
</p>

<p>Hash elements will spring into existence by assignment:</p>

<blockquote><pre class="code">$family_name{"wilma"} = "flintstone";             # adds a new key (and value)
$family_name{"betty"} .= $family_name{"barney"};  # creates the element if needed</pre></blockquote>

<p>That's also just like what happens with arrays and scalars; if
you didn't have <tt class="literal">$pebbles[17]</tt> or
<tt class="literal">$dino</tt> before, you will have it after you assign to
it. If you didn't have <tt class="literal">$family_name{"betty"}</tt>
before, you do now.
</p>

<p>And accessing outside the hash gives <tt class="literal">undef</tt>:</p>

<blockquote><pre class="code">$granite = $family_name{"larry"};  # No larry here: undef</pre></blockquote>

<p>Once again, this is just like what happens with arrays and scalars;
if there's nothing yet stored in
<tt class="literal">$pebbles[17]</tt> or <tt class="literal">$dino</tt>,
accessing them will yield <tt class="literal">undef</tt>. If there's
nothing yet stored in <tt class="literal">$family_name{"larry"}</tt>,
accessing it will yield <tt class="literal">undef</tt>.
</p>

<a name="lperl3-CHP-5-SECT-2.1" /><div class="sect2">
<h3 class="sect2">5.2.1. The Hash as a Whole</h3>

<p>To refer to the entire hash, use the <a name="INDEX-389" />percent sign
("<tt class="literal">%</tt>") as a prefix. So, the hash
we've been using for the last few pages is actually called
<tt class="literal">%family_name</tt>.
</p>

<p>For convenience, a hash may be converted into a list, and back again.
Assigning to a hash (in this case, the one from <a href="ch05_01.htm">Figure 5-1</a>) is a list-context assignment, where the list
is made of key-value pairs:<a href="#FOOTNOTE-127">[127]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-127" /><p>[127]Although any list
expression may be used, it must have an even number of elements,
because the hash is made of key-value <em class="emphasis">pairs</em>. An
odd element will likely do something unreliable, although it's
a warnable offense.</p> </blockquote>

<blockquote><pre class="code">%some_hash = ("foo", 35, "bar", 12.4, 2.5, "hello",
      "wilma", 1.72e30, "betty", "bye\n");</pre></blockquote>

<p>The value of the hash (in a list context) is a simple list of
key-value pairs:
</p>

<blockquote><pre class="code">@any_array = %some_hash;</pre></blockquote>

<p>We call this
<em class="firstterm">unwinding</em><a name="INDEX-390" />
<a name="INDEX-391" />
the hash; turning it back into a list of key-value pairs. Of course,
the pairs won't necessarily be in the same order as the
original list:
</p>

<blockquote><pre class="code">print "@any_array\n";
  # might give something like this:
  #  betty bye (and a newline) wilma 1.72e+30 foo 35 2.5 hello bar 12.4</pre></blockquote>

<p>The order is jumbled because Perl keeps the key-value pairs in an
order that's convenient for Perl, so that it can look up any
item quickly. So you'd normally use a hash either when you
don't care what order the items are in, or when you have an
easy way to put them into the order you want.
</p>

<p>Of course, even though the order of the key-value pairs is jumbled,
each key "sticks" with its corresponding value in the
resulting list. So, even though we don't know where the key
<tt class="literal">foo</tt> will appear in the list, we know that its
value, <tt class="literal">35</tt>, will be right after it.
</p>

</div>
<a name="lperl3-CHP-5-SECT-2.2" /><div class="sect2">
<h3 class="sect2">5.2.2. Hash Assignment</h3>

<p><a name="INDEX-392" />
<a name="INDEX-393" />It's
rare to do so, but a hash may be copied using the obvious syntax:
</p>

<blockquote><pre class="code">%new_hash = %old_hash;</pre></blockquote>

<p>This is actually more work for Perl than meets the eye. Unlike what
happens in languages like Pascal or C, where such an operation would
be a simple matter of copying a block of memory, Perl's data
structures are more complex. So, that line of code tells Perl to
unwind the <tt class="literal">%old_hash</tt> into a list of key-value
pairs, then assign those to <tt class="literal">%new_hash</tt>, building it
up one key-value pair at a time.
</p>

<p>It's more common to transform the hash in some way, though. For
example, we could make an inverse hash:
</p>

<blockquote><pre class="code">%inverse_hash = reverse %any_hash;</pre></blockquote>

<p>This takes <tt class="literal">%any_hash</tt> and unwinds it into a list of
key-value pairs, making a list like
<tt class="literal">(</tt><em class="emphasis">key</em>,
<em class="emphasis">value</em>, <em class="emphasis">key</em>,
<em class="emphasis">value</em>, <em class="emphasis">key</em>,
<em class="emphasis">value</em>, ...<tt class="literal">)</tt>. Then
<tt class="literal">reverse</tt> turns that list end-for-end, making a list
like <tt class="literal">(</tt><em class="emphasis">value</em>,
<em class="emphasis">key</em>, <em class="emphasis">value</em>,
<em class="emphasis">key</em>, <em class="emphasis">value</em>,
<em class="emphasis">key</em>, ...<tt class="literal">)</tt>. Now the keys are
where the values used to be, and the values are where the keys used
to be. When that's stored into
<tt class="literal">%inverse_hash</tt>, we'll be able to look up a
string that was a value in
<tt class="literal">%any_hash</tt> -- it's now a key of
<tt class="literal">%inverse_hash</tt>. And the value we'll find is
one that was one of the keys from <tt class="literal">%any_hash</tt>. So,
we have a way to look up a "value" (now a key), and find
a "key" (now a value).
</p>

<p>Of course, you might guess (or determine from scientific principles,
if you're clever) that this will work properly only if the
values in the original hash were unique -- otherwise we'd
have duplicate keys in the new hash, and keys are always unique.
Here's the rule that Perl uses: the last one in wins. That is,
the later items in the list overwrite any earlier ones. Of course, we
don't know what order the key-value pairs will have in this
list, so there's no telling which ones would win. You'd
use this technique only if you know there are no duplicates among the
original values.<a href="#FOOTNOTE-128">[128]</a> But that's the case for the IP address and host
name examples given earlier:
</p><blockquote class="footnote"> <a name="FOOTNOTE-128" /><p>[128]Or if you don't care that
there are duplicates. For example, we could invert the
<tt class="literal">%family_name</tt> hash (in which the keys are
people's given names and values are their family names) to make
it easy to determine whether there is or is not anyone with a given
family name in the group. Thus, in the inverted hash, if
there's no key of <tt class="literal">slate</tt>, we'd know
that there's no one with that name in the original hash.</p>
</blockquote>

<blockquote><pre class="code">%ip_address = reverse %host_name;</pre></blockquote>

<p>Now we can look up a host name or IP address with equal ease, to find
the corresponding IP address or host name.
</p>

</div>
<a name="lperl3-CHP-5-SECT-2.3" /><div class="sect2">
<h3 class="sect2">5.2.3. The Big Arrow</h3>

<p><a name="INDEX-394" />
<a name="INDEX-395" />
<a name="INDEX-396" />When assigning a list
to a hash, sometimes it's not obvious which elements are keys
and which are values. For example, in this assignment (which we saw
earlier), we humans have to count through the list, saying,
"key, value, key, value...", in order to determine
whether <tt class="literal">2.5</tt> is a key or a value:
</p>

<blockquote><pre class="code">%some_hash = ("foo", 35, "bar", 12.4, 2.5, "hello",
      "wilma", 1.72e30, "betty", "bye\n");</pre></blockquote>

<p>Wouldn't it be nice if Perl gave us a way to pair up keys and
values in that kind of a list, so that it would be easy to see which
ones were which? Larry thought so, too, which is why he invented the
big arrow, (<tt class="literal">=&gt;</tt>).<a href="#FOOTNOTE-129">[129]</a> To Perl, it's
just a different way to "spell" a comma. That is, in the
Perl grammar, any time that you need a <a name="INDEX-399" /> <a name="INDEX-400" />comma ( <tt class="literal">,</tt> ), you can
use the big arrow instead; it's all the same to Perl.<a href="#FOOTNOTE-130">[130]</a> So here's another way to set up the hash of last
names:
</p><blockquote class="footnote"> <a name="FOOTNOTE-129" /><p>[129]Yes,
there's also a <em class="emphasis">little</em>
<a name="INDEX-397" /> <a name="INDEX-398" />arrow, (<tt class="literal">-&gt;</tt>).
It's used with references, which are an advanced topic; see the
<em class="emphasis">perlreftut</em>and
<em class="emphasis">perlref</em>manpage when
you're ready for that.</p> </blockquote><blockquote class="footnote">
<a name="FOOTNOTE-130" /><p>[130]Well, there's one technical difference: any bareword (a
sequence of nothing but letters, digits, and underscores not starting
with a digit) to the left of the big arrow is implicitly quoted. So
you can leave off the quote marks on a bareword to the left of the
big arrow. You may also omit the quote marks if there's nothing
but a bareword as a key inside the curly braces of a hash.</p>
</blockquote>

<blockquote><pre class="code">my %last_name = (  # a hash may be a lexical variable
  "fred" =&gt; "flintstone",
  "dino" =&gt; undef,
  "barney" =&gt; "rubble",
  "betty" =&gt; "rubble",
);</pre></blockquote>

<p>Here, it's easy (or perhaps at least easier) to see whose name
pairs with which value, even if we end up putting many pairs on one
line. And notice that there's an extra comma at the end of the
list. As we saw earlier, this is harmless, but convenient; if we need
to add additional people to this hash, we'll simply make sure
that each line has a key-value pair and a trailing comma. Perl will
see that there is a comma between each item and the next, and one
extra (harmless) comma at the end of the list.<a name="INDEX-401" /> <a name="INDEX-402" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5. Hashes</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.3. Hash Functions</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>