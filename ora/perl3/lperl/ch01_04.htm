<html><head><title>How Do I Make a Perl Program? (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch01_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">1.4. How Do I Make a Perl Program?</h2>

<p><a name="INDEX-61" />It's
about time you asked (even if you didn't). Perl programs are
text files; you can create and edit them with your favorite text
editor. (You don't need any special development environment,
although there are some commercial ones available from various
vendors. We've never used any of these enough to recommend
them.)
</p>

<p>You should generally use a programmers'
<a name="INDEX-62" />
<a name="INDEX-63" />text editor, rather than an ordinary
editor. What's the difference? Well, a programmers' text
editor will let you do things that programmers need, like to indent
or unindent a block of code, or to find the matching closing curly
brace for a given opening curly brace. On Unix systems, the two most
popular programmers' editors are
<i class="command">emacs</i><a name="INDEX-64" /> and
<i class="command">vi</i><a name="INDEX-65" /> (and their variants and clones). Both of
these have been ported to several non-Unix systems, and many systems
today offer a graphical editor (which uses a pointing device like a
mouse). In fact, there are even versions of <i class="command">vi</i> and
<i class="command">emacs</i> that offer a graphical interface. Ask your
local expert about text editors on your system.
</p>

<p>For the simple programs you'll be writing for the exercises in
this book, none of which will need to be more than about twenty or
thirty lines of code, any text editor will be fine.
</p>

<p>A few beginners try to use a <a name="INDEX-66" />word processor
instead of a text editor. We recommend against this -- it's
inconvenient at best and impossible at worst. But we won't try
to stop you. Be sure to tell the word processor to save your file as
"text only"; the word processor's own format will
almost certainly be unusable.
</p>

<p>In some cases, you may need to compose the program on one machine,
then transfer it to another to be run. If you do this, be sure that
the transfer uses "<a name="INDEX-67" />text" or
"<a name="INDEX-68" />ASCII" mode, and not
"<a name="INDEX-69" />binary" mode. This step is needed
because of the different text formats on different machines. Without
that, you may get inconsistent results -- some versions of Perl
actually abort when they detect a mismatch in the line endings.
</p>

<a name="lperl3-CHP-1-SECT-4.1" /><div class="sect2">
<h3 class="sect2">1.4.1. A Simple Program</h3>

<p>According to the oldest rule in the book, any book about a computer
language that has Unix-like roots has to start with showing the
<a name="INDEX-70" />"Hello, world" program. So,
here it is in Perl:
</p>

<blockquote><pre class="code">#!/usr/bin/perl
print "Hello, world!\n";</pre></blockquote>

<p>Let's imagine that you've typed that into your text
editor. (Don't worry yet about what the parts mean and how it
works. We'll see about those in a moment.) You can generally
save that program under any name you wish. Perl doesn't require
any special kind of <a name="INDEX-71" />filename or extension, and it's
better to use no <a name="INDEX-72" />extension at all.<a href="#FOOTNOTE-31">[31]</a> But some non-Unix systems may require an
extension like <em class="emphasis">.plx</em><a name="INDEX-73" /> (meaning PerL eXecutable); see your
system's release notes for more information.
</p><blockquote class="footnote"> <a name="FOOTNOTE-31" /><p>[31]Why
is it better to have no extension? Imagine that you've written
a program to calculate bowling scores and you've told all of
your friends that it's called <i class="command">bowling.plx</i>.
One day you decide to rewrite it in C. Do you still call it by the
same name, implying that it's still written in Perl? Or do you
tell everyone that it has a new name? (And don't call it
<i class="command">bowling.c</i>, please!) The answer is that it's
none of their business what language it's written in, if
they're merely <em class="emphasis">using</em> it. So it should have
simply been called <i class="command">bowling</i> in the first
place.</p> </blockquote>

<p>You will also need to do something so that your system knows that
it's an executable program (that is, a command). What
you'll do depends upon your system; maybe you won't have
to do anything more than to save the program in a certain place.
(Your current directory will generally be fine.) On Unix systems, you
mark a program as being executable by using the
<i class="command">chmod</i><a name="INDEX-74" /> command, perhaps like this:
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>chmod a+x my_program</b></tt></pre></blockquote>

<p>The dollar sign (and space) at the start of the line represents the
shell prompt, which will probably look different on your system. If
you're used to using <i class="command">chmod</i> with a number
like <tt class="literal">755</tt> instead of a symbolic parameter like
<tt class="literal">a+x</tt>, that's fine too, of course. Either way,
it tells the system that this file is now a program.
</p>

<p>Now you're ready to run it:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>./my_program</b></tt></pre></blockquote>

<p>The <tt class="userinput"></tt><a name="INDEX-75" /> <a name="INDEX-76" /> <a name="INDEX-77" />dot and slash at the start of this command
mean to find the program in the current working directory.
That's not needed in all cases, but you should use it at the
start of each command invocation until you fully understand what
it's doing.<a href="#FOOTNOTE-32">[32]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-32" /><p>[32]In short, it's preventing
your shell from running another program (or shell builtin) of the
same name. A common mistake among beginners is to name their first
program <tt class="literal">test</tt>. Many systems already have a program
(or shell builtin) with that name; that's what the beginners
run instead of their program.</p> </blockquote>

<p>If everything worked, it's a miracle. More often, you'll
find that your program has a bug. Edit and try again -- but you
don't need to use <i class="command">chmod</i> each time, since
that should "stick" to the file. (Of course, if the bug
is that you didn't use <i class="command">chmod</i> correctly,
you'll probably get a "permission denied" message
from your shell.)
</p>

</div>
<a name="lperl3-CHP-1-SECT-4.2" /><div class="sect2">
<h3 class="sect2">1.4.2. What's Inside That Program?</h3>

<p>Like other "free-form" languages, Perl generally lets you
use insignificant
<a name="INDEX-78" />whitespace (like
spaces, tabs, and newlines) at will to make your program easier to
read. Most Perl programs use a fairly standard format, though, much
like most of what we show here. We strongly encourage you to properly
indent your programs, since that makes your program easier to read; a
good text editor will do most of the work for you. Good
<a name="INDEX-79" />comments also make
a program easier to read. In Perl, comments run from a
<a name="INDEX-80" />
<a name="INDEX-81" />pound sign (<tt class="literal">#</tt>) to
the end of the line. (There are no "<a name="INDEX-82" />block comments" in
Perl.<a href="#FOOTNOTE-33">[33]</a>) We don't use many comments in the programs in this
book, because the surrounding text explains their workings, but you
should use comments as needed in your own programs.
</p><blockquote class="footnote"> <a name="FOOTNOTE-33" /><p>[33]But there are a number of ways to fake them.
See the FAQ (accessible with <em class="emphasis">perldoc</em><em class="emphasis">perlfaq</em> on most installations).</p>
</blockquote>

<p>So another way (a very strange way, it must be said) to write that
same "Hello, world" program might be like this:
</p>

<blockquote><pre class="code">#!/usr/bin/perl
    print    # This is a comment
"Hello, world!\n"
  ;    # Don't write your Perl code like this!</pre></blockquote>

<p>That first line is actually a very special comment. On Unix
systems,<a href="#FOOTNOTE-34">[34]</a> if the very first two
characters on the first line of a text file are
"<tt class="literal">#!</tt><a name="INDEX-83" />", then what follows is the name of
the program that actually executes the rest of the file. In this
case, the program is stored in the file
<em class="filename">/usr/bin/perl</em>.
</p><blockquote class="footnote"> <a name="FOOTNOTE-34" /><p>[34]Most modern ones, anyway. The
"sh-bang" mechanism was introduced somewhere in the
mid-1980s, and that's pretty ancient, even on the extensively
long Unix timeline.</p> </blockquote>

<p>This <tt class="literal">#!</tt> line is actually the least portable part
of a Perl program, because you'll need to find out what goes
there for each machine. Fortunately, it's almost always either
<em class="filename">/usr/bin/perl</em><a name="INDEX-84" />
or
<em class="filename">/usr/local/bin/perl</em><a name="INDEX-85" />.
If you find that it's not, you can cast a magic spell on your
system administrator to fix things. Just say "You know, I read
in a book that both <em class="filename">/usr/bin/perl</em> and
<em class="filename">/usr/local/bin/perl</em> should be symbolic links to
the true Perl binary," and under the influence of your spell
the admin will make everything work. All of the example programs
you're likely to find on the Net and elsewhere will begin with
one of those two forms.
</p>

<p>On non-Unix systems, it's traditional (and even useful) to make
the first line say
<tt class="literal">#!perl</tt><a name="INDEX-86" />.
If nothing else, it tells your maintenance programmer as soon as he
or she gets ready to fix it that it's a Perl program.
</p>

<p>If that <tt class="literal">#!</tt> line is wrong, you'll generally
get an error from your shell. This may be something unexpected, like
"file not found." It's not your program
that's not found, though; it's
<em class="filename">/usr/bin/perl</em> that wasn't where it should
have been. We'd make the message clearer, but it's not
coming from Perl; it's the shell that's complaining. (By
the way, you should be careful to spell it <em class="filename">usr</em>
and not <em class="filename">user</em> -- the folks who invented Unix
were lazy typists, so they omitted a lot of letters.)
</p>

<p>Another problem you could have is if your system doesn't
support the <tt class="literal">#!</tt> line at all. In that case, your
shell (or whatever your system uses) will probably try to run your
program all by itself, with results that may disappoint or astonish
you. If you can't figure out what some strange error message is
telling you, search for it in the
<em class="emphasis">perldiag</em><a name="INDEX-87" /> manpage.
</p>

<p>The <a name="INDEX-88" />"main" program consists of
all of the ordinary Perl statements (not including anything in
subroutines, which we'll see later). There's no
"main" routine, as there is in languages like C or Java.
In fact, many programs don't even have routines (in the form of
subroutines).
</p>

<p>There's also no required variable declaration section, as there
is in some other languages. If you've always had to declare
your
<a name="INDEX-89" />variables,
you may be startled or unsettled by this at first. But it allows us
to write "quick-and-dirty" Perl programs. If your program
is only two lines long, you don't want to have to use one of
those lines just to declare your variables. If you really want to
declare your variables, that's a good thing; we'll see
how to do that in <a href="ch04_01.htm">Chapter 4, "Subroutines"</a>.
</p>

<p>Most statements are an expression followed by a
<a name="INDEX-90" /> <a name="INDEX-91" />semicolon.
Here's the one we've seen a few times so far:
</p>

<blockquote><pre class="code">print "Hello, world!\n";</pre></blockquote>

<p>As you may have guessed by now, this line prints the message
<tt class="literal">Hello,</tt> <tt class="literal">world!</tt> At the end of
that message is the shortcut
<tt class="literal">\n</tt><a name="INDEX-92" />, which is probably familiar to you if
you've used another language like C, C++, or Java; it means a
newline character. When that's printed after the message, the
print position drops down to the start of the next line, allowing the
following shell prompt to appear on a line of its own, rather than
being attached to the message. Every line of output should end with a
newline character. We'll see more about the newline shortcut
and other so-called <a name="INDEX-93" />backslash escapes in the next chapter.
</p>

</div>
<a name="lperl3-CHP-1-SECT-4.3" /><div class="sect2">
<h3 class="sect2">1.4.3. But How Do I Compile Perl?</h3>

<p>You may be surprised to learn that all you have to do to
<a name="INDEX-94" />
<a name="INDEX-95" />compile
Perl is to run it. When you run your program, Perl's internal
compiler first runs through your entire source, turning it into
internal
<em class="firstterm">bytecodes</em><a name="INDEX-96" />
(an internal data structure representing the program); then
Perl's bytecode engine actually runs them.<a href="#FOOTNOTE-35">[35]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-35" /><p>[35]As
usual, there's more to the story than what we say here. But
this should be close enough for all but the technically advanced
folks, and they already know about this.</p> </blockquote>

<p>So, if there's a syntax error on line 200, you'll get
that error message before you start running line two.<a href="#FOOTNOTE-36">[36]</a> If you have a loop that runs 5000
times, it's compiled just once; the actual loop can then run at
top speed. And there's no runtime penalty for using as many
comments and as much whitespace as you need to make your program easy
to understand. You can even use calculations involving only
constants, and the result is a constant computed once as the program
is beginning -- not each time through a loop.
</p><blockquote class="footnote">
<a name="FOOTNOTE-36" /><p>[36]Unless line two happens to be a compile-time operation, like a
<tt class="literal">BEGIN</tt> block or a <tt class="literal">use</tt>
invocation.</p> </blockquote>

<p>To be sure, this compilation does take time -- it's
inefficient to have a voluminous Perl program that does one small
quick task (out of many potential tasks, say) and then exits, because
the <a name="INDEX-97" />runtime for the
program will be dwarfed by the compile time. But the compiler is very
fast; normally the compilation will be a tiny percentage of the
runtime.
</p>

<p>An exception might be if you were writing a program to be run over
the <a name="INDEX-98" />
<a name="INDEX-99" />
<a name="INDEX-100" />Web,
where it may be called hundreds or thousands of times every minute.
(This is a very high usage rate. If it were called a few hundreds or
thousands of times per <em class="emphasis">day</em>, like most programs
on the Web, we probably wouldn't worry too much about it.) Many
of these programs have very short runtimes, so the issue of
recompilation may become significant. If this is an issue for you,
you'll want to find a way to keep your program resident in
memory between invocations (whether it's written in Perl or
not); see the documentation for your web server and ask your local
expert for help with this.<a href="#FOOTNOTE-37">[37]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-37" /><p>[37]Point your local expert to
<a href="../../../../../../perl.apache.org/">http://perl.apache.org</a>for one
possible solution.</p> </blockquote>

<p>What if you could save the compiled bytecodes to avoid the overhead
of compilation? Or, even better, what if you could turn the bytecodes
into another language, like C, and then compile that? Well, both of
these things are possible (although beyond the scope of this book),
although they won't make most programs any easier to use,
maintain, debug, or install, and they may (for somewhat technical
reasons) make your program even slower.<a href="#FOOTNOTE-38">[38]</a> We
don't know anyone who has ever needed to compile a Perl program
(except for experimental purposes), and we doubt you ever will ever
meet one, either.<a name="INDEX-101" /> 
</p><blockquote class="footnote"> <a name="FOOTNOTE-38" /><p>[38]On many
(perhaps most) systems where you might want to compile a Perl
program, the perl binary (the program that executes your Perl
programs) is always in use by some process, so it's always
resident in memory. A "compiled Perl" program will take
time to load into memory. If it's a small program, it would
probably compile at least as fast as it takes to load a compiled
executable. If it's a large one, compilation is probably an
insignificant part of its runtime anyway.</p> </blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch01_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1.3. How Can I Get Perl?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">1.5. A Whirlwind Tour of Perl</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>
