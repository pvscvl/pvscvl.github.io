<html><head><title>Strings (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">2.3. Strings</h2>

<p><a name="INDEX-143" />
<a name="INDEX-144" />Strings are sequences of
<a name="INDEX-145" />characters (like
<tt class="literal">hello</tt>). Strings may contain any combination of any
characters.<a href="#FOOTNOTE-48">[48]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-48" /><p>[48]Unlike C or C++, there's nothing
special about the <a name="INDEX-146" />NUL character in Perl, because Perl
uses length counting, not a null byte, to determine the end of the
string.</p> </blockquote>

<p>The shortest possible string has no characters. The longest string
fills all of your available memory (although you wouldn't be
able to do much with that). This is in accordance with the principle
of "no built-in limits" that Perl follows at every
opportunity. Typical strings are printable sequences of letters and
digits and punctuation in the <span class="acronym">ASCII</span> 32 to
<span class="acronym">ASCII</span> 126 range. However, the ability to have any
character in a string means you can create, scan, and manipulate raw
binary data as strings -- something with which many other
utilities would have great difficulty. For example, you could update
a graphical image or compiled program by reading it into a Perl
string, making the change, and writing the result back out.
</p>

<p>Like numbers, strings have a literal representation, which is the way
you represent the string in a Perl program.
<a name="INDEX-147" />
<a name="INDEX-148" />Literal strings come in two different
flavors: <em class="emphasis">single-quoted string literals</em> and
<em class="emphasis">double-quoted string literals</em>.
</p>

<a name="lperl3-CHP-2-SECT-3.1" /><div class="sect2">
<h3 class="sect2">2.3.1. Single-Quoted String Literals</h3>

<p>A <em class="emphasis">single-quoted string literal</em>
<a name="INDEX-149" />is a sequence of characters enclosed in
<a name="INDEX-150" /> <a name="INDEX-151" />single
quotes. The single quotes are not part of the string
itself -- they're just there to let Perl identify the
beginning and the ending of the string. Any character other than a
single quote or a backslash between the quote marks (including
newline characters, if the string continues onto successive lines)
stands for itself inside a string. To get a <a name="INDEX-152" /> <a name="INDEX-153" />backslash, put two backslashes in a
row, and to get a single quote, put a backslash followed by a single
quote. In other words:
</p>

<blockquote><pre class="code">'fred'    # those four characters: f, r, e, and d
'barney'  # those six characters
''        # the null string (no characters)
'Don\'t let an apostrophe end this string prematurely!'
'the last character of this string is a backslash: \\'
'hello\n' # hello followed by backslash followed by n
'hello
there'    # hello, newline, there (11 characters total)
'\'\\'    # single quote followed by backslash</pre></blockquote>

<p>Note that the <tt class="literal">\n</tt><a name="INDEX-154" /> within a single-quoted string is not
interpreted as a newline, but as the two characters backslash and
<tt class="literal">n</tt>. Only when the backslash is followed by another
backslash or a single quote does it have special meaning.
</p>

</div>
<a name="lperl3-CHP-2-SECT-3.2" /><div class="sect2">
<h3 class="sect2">2.3.2. Double-Quoted String Literals</h3>

<p>A <em class="emphasis">double-quoted string literal</em>
<a name="INDEX-155" />is similar to the strings you may have
seen in other languages. Once again, it's a sequence of
characters, although this time enclosed in <a name="INDEX-156" /> <a name="INDEX-157" />double
quotes. But now the backslash takes on its full power to specify
certain control characters, or even any character at all through
octal and hex representations. Here are some double-quoted strings:
</p>

<blockquote><pre class="code">"barney"        # just the same as 'barney'
"hello world\n" # hello world, and a newline
"The last character of this string is a quote mark: \""
"coke\tsprite"  # coke, a tab, and sprite</pre></blockquote>

<p>Note that the double-quoted literal string
<tt class="literal">"barney"</tt> means the same six-character string to
Perl as does the single-quoted literal string
<tt class="literal">'barney'</tt>. It's like what we saw with numeric
literals, where we saw that <tt class="literal">0377</tt> was another way
to write <tt class="literal">255.0</tt>. Perl lets you write the literal in
the way that makes more sense to you. Of course, if you wish to use a
backslash escape (like <tt class="literal">\n</tt> to mean a newline
character), you'll need to use the double quotes.
</p>

<p>The backslash can precede many different characters to mean different
things (generally called a <em class="emphasis">backslash
escape</em><a name="INDEX-158" />). The
nearly complete<a href="#FOOTNOTE-49">[49]</a> list of double-quoted
<a name="INDEX-159" />string escapes is given in <a href="ch02_03.htm">Table 2-1</a>. 
</p><blockquote class="footnote"> <a name="FOOTNOTE-49" /><p>[49]Recent versions of Perl have
introduced "Unicode" escapes, which we aren't going
to be talking about here.</p> </blockquote>

<a name="lperl3-CHP-2-TABLE-1" /><h4 class="objtitle">Table 2-1. Double-quoted string backslash escapes </h4><table border="1">



<tr>
<th>
<p>Construct</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">\n</pre></blockquote>
</td>
<td>
<p>Newline</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\r</pre></blockquote>
</td>
<td>
<p>Return</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\t</pre></blockquote>
</td>
<td>
<p>Tab</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\f</pre></blockquote>
</td>
<td>
<p>Formfeed</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\b</pre></blockquote>
</td>
<td>
<p>Backspace</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\a</pre></blockquote>
</td>
<td>
<p>Bell</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\e</pre></blockquote>
</td>
<td>
<p>Escape (<span class="acronym">ASCII</span> escape character)</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\007</pre></blockquote>
</td>
<td>
<p>Any octal <span class="acronym">ASCII</span> value (here,
<tt class="literal">007</tt> = bell)
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\x7f</pre></blockquote>
</td>
<td>
<p>Any hex <span class="acronym">ASCII</span> value (here, <tt class="literal">7f</tt> =
delete)
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\cC</pre></blockquote>
</td>
<td>
<p>A "control" character (here, Ctrl-C)</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\\</pre></blockquote>
</td>
<td>
<p>Backslash</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\"</pre></blockquote>
</td>
<td>
<p>Double quote</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\l</pre></blockquote>
</td>
<td>
<p>Lowercase next letter</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\L</pre></blockquote>
</td>
<td>
<p>Lowercase all following letters until <tt class="literal">\E</tt></p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\u</pre></blockquote>
</td>
<td>
<p>Uppercase next letter</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\U</pre></blockquote>
</td>
<td>
<p>Uppercase all following letters until <tt class="literal">\E</tt></p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\Q</pre></blockquote>
</td>
<td>
<p>Quote non-word characters by adding a backslash until
<tt class="literal">\E</tt>
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">\E</pre></blockquote>
</td>
<td>
<p>Terminate <tt class="literal">\L</tt>, <tt class="literal">\U</tt>, or
<tt class="literal">\Q</tt>
</p>
</td>
</tr>

</table><p>

<p>Another feature of double-quoted strings is that they are
<em class="emphasis">variable interpolated,</em><a name="INDEX-160" /><a name="INDEX-161" /><a name="INDEX-162" /> meaning that some variable names
within the string are replaced with their current values when the
strings are used. We haven't formally been introduced to what a
variable looks like yet, so we'll get back to this later in
this chapter.
</p>

</div>
<a name="lperl3-CHP-2-SECT-3.3" /><div class="sect2">
<h3 class="sect2">2.3.3. String Operators</h3>

<p><a name="INDEX-163" />String values can be concatenated with the
<tt class="literal">.</tt><a name="INDEX-164" /> operator. (Yes, that's a single
period.) This does not alter either string, any more than
<tt class="literal">2+3</tt> alters either <tt class="literal">2</tt> or
<tt class="literal">3</tt>. The resulting (longer) string is then available
for further computation or to be stored into a variable. For example:
</p>

<blockquote><pre class="code">"hello" . "world"       # same as "helloworld"
"hello" . ' ' . "world" # same as 'hello world'
'hello world' . "\n"    # same as "hello world\n"</pre></blockquote>

<p>Note that the concatenation must be explicitly requested with the
<tt class="literal">.</tt> operator, unlike in some other languages where
you merely have to stick the two values next to each other.
</p>

<p>A special string operator is the <em class="emphasis">string
repetition</em><a name="INDEX-165" /> <a name="INDEX-166" /> operator, consisting of
the single lowercase letter <tt class="literal">x</tt>. This operator takes
its left operand (a string) and makes as many concatenated copies of
that string as indicated by its right operand (a number). For
example:
</p>

<blockquote><pre class="code">"fred" x 3       # is "fredfredfred"
"barney" x (4+1) # is "barney" x 5, or "barneybarneybarneybarneybarney"
5 x 4            # is really "5" x 4, which is "5555"</pre></blockquote>

<p>That last example is worth spelling out slowly. The string repetition
operator wants a string for a left operand, so the number
<tt class="literal">5</tt> is converted to the string
<tt class="literal">"5"</tt> (using rules described in detail later),
giving a one-character string. This new string is then copied four
times, yielding the four-character string <tt class="literal">5555</tt>.
Note that if we had reversed the order of the operands, as <tt class="literal">4
x 5</tt>, we would have made five copies of the string
<tt class="literal">4</tt>, yielding <tt class="literal">44444</tt>. This shows
that string repetition is not commutative.
</p>

<p>The copy count (the right operand) is first truncated to an integer
value (4.8 becomes 4) before being used. A copy count of less than
one results in an empty (zero-length) string.
</p>

</div>
<a name="lperl3-CHP-2-SECT-3.4" /><div class="sect2">
<h3 class="sect2">2.3.4. Automatic Conversion Between Numbers and Strings</h3>

<p>For the most part, Perl automatically converts between
<a name="INDEX-167" />numbers to
<a name="INDEX-168" />strings as needed.
How does it know whether a number or a string is needed? It all
depends upon the operator being used on the scalar value. If an
operator expects a number (like <tt class="literal">+</tt> does), Perl will
see the value as a number. If an operator expects a string (like
<tt class="literal">.</tt> does), Perl will see the value as a string. So
you don't need to worry about the difference between numbers
and strings; just use the proper operators, and Perl will make it all
work.
</p>

<p>When a string value is used where an operator needs a number (say,
for multiplication), Perl automatically converts the string to its
equivalent numeric value, as if it had been entered as a decimal
floating-point value.<a href="#FOOTNOTE-50">[50]</a> So
<tt class="literal">"12" * "3"</tt> gives the value <tt class="literal">36</tt>.
Trailing nonnumber stuff and leading whitespace are discarded, so
<tt class="literal">"12fred34" * " 3"</tt> will also give
<tt class="literal">36</tt> without any complaints.<a href="#FOOTNOTE-51">[51]</a> At the extreme end of this, something that isn't a
number at all converts to zero. This would happen if you used the
string <tt class="literal">"fred"</tt> as a number.
</p><blockquote class="footnote"> <a name="FOOTNOTE-50" /><p>[50]The trick of using a leading
zero to mean a nondecimal value works for literals, but never for
automatic conversion. Use <tt class="literal">hex( )</tt>or <tt class="literal">oct(
)</tt>to convert those kinds of strings.</p> </blockquote><blockquote class="footnote"> <a name="FOOTNOTE-51" /><p>[51]Unless
you request warnings, which we'll discuss in a moment.</p>
</blockquote>

<p>Likewise, if a numeric value is given when a string value is needed
(say, for string concatenation), the numeric value is expanded into
whatever string would have been printed for that number. For example,
if you want to concatenate the string <tt class="literal">Z</tt> followed
by the result of 5 multiplied by 7,<a href="#FOOTNOTE-52">[52]</a> you can
say this simply as:
</p><blockquote class="footnote"> <a name="FOOTNOTE-52" /><p>[52]We'll see
about precedence and parentheses shortly.</p> </blockquote>

<blockquote><pre class="code">"Z" . 5 * 7 # same as "Z" . 35, or "Z35"</pre></blockquote>

<p>In other words, you don't really have to worry about whether
you have a number or a string (most of the time). Perl performs all
the conversions for you.<a href="#FOOTNOTE-53">[53]</a> And if
you're worried about efficiency, don't be. Perl generally
remembers the result of a conversion so that it's done only
once.<a name="INDEX-169" />
</p><blockquote class="footnote"> <a name="FOOTNOTE-53" /><p>[53]It's usually not an
issue, but these conversions can cause small round-off errors. That
is, if you start with a number, convert it to a string, then convert
that string back to a number, the result may not be the same number
as you started with. It's not just Perl that does this;
it's a consequence of the conversion process, so it happens to
any powerful programming language.</p> </blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.2. Numbers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.4. Perl's Built-in Warnings</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>