<html><head><title>Memory Parentheses (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch08_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">8.4. Memory Parentheses</h2>

<p><a name="INDEX-556" /> <a name="INDEX-557" />You remember that parentheses
("<tt class="literal">( )</tt>") may be used for grouping
together parts of a pattern. They also have a second function: they
tell the regular expression engine to remember what was in the
substring matched by the pattern in the parentheses. That is to say,
it doesn't remember what was in the pattern itself; it
remembers what was in the corresponding part of the string. Whenever
you use parentheses for grouping, they automatically work as memory
parentheses as well.
</p>

<p>So, if you use <tt class="literal">/./</tt>, you'll match any single
character (except newline); if you use <tt class="literal">/(.)/</tt>,
you'll still match any single character, but now it will be
kept in a <a name="INDEX-558" />regular expression memory. For each
pair of parentheses in the pattern, you'll have one regular
expression memory.
</p>

<a name="lperl3-CHP-8-SECT-4.1" /><div class="sect2">
<h3 class="sect2">8.4.1. Backreferences</h3>

<p>A
<em class="firstterm">backreference</em><a name="INDEX-559" />
refers back to a memory that was saved earlier in the current
pattern's processing. Backreferences are made with a
<a name="INDEX-560" />
<a name="INDEX-561" />backslash, which is easy to
remember. For example, <tt class="literal">\1</tt> contains the first
regular expression memory (that is, the part of the string matched by
the first pair of parentheses).
</p>

<p>Backreferences are used to go back and match the exact same<a href="#FOOTNOTE-182">[182]</a> string that was matched earlier in the pattern. So,
<tt class="literal">/(.)\1/</tt> means to match any one character, remember
it as memory one, then match memory one again. In other words, match
any character, followed by the <em class="emphasis">same</em> character.
So, this pattern will match strings with doubled-letters, as in
<tt class="literal">bamm-bamm</tt> and <tt class="literal">betty</tt>. Of course,
the dot will match characters other than letters, so if a string has
two spaces in a row, two tabs in a row, or two asterisks in a row, it
will match.
</p><blockquote class="footnote">
<a name="FOOTNOTE-182" /><p>[182]Well, if the pattern is case-insensitive, as we'll learn
in the next chapter, the capitalization doesn't have to match.
Other than that, though, the string must be the same.</p>
</blockquote>

<p>That's not the same as the pattern <tt class="literal">/../</tt>,
which will match any character followed by any character -- those
two could be the same, or they could be different.
<tt class="literal">/(.)\1/</tt> means to match any character followed by
the <em class="emphasis">same</em> character.
</p>

<p>A typical usage of these memories might be if you have some
HTML-like<a href="#FOOTNOTE-183">[183]</a> text to process. For
example, maybe you want to match a tag like these two, which may use
either single quotes or double quotes:
</p><blockquote class="footnote"> <a name="FOOTNOTE-183" /><p>[183]These examples are intentionally
<span class="option">not</span> HTML, because there are too many tricky things
that crop up in real HTML, or any similar markup language like XML or
SGML. If you need to work with HTML, don't use simple patterns
like these. Get a robust module from CPAN, so that you can start with
code that's already written and debugged. If you don't,
we promise that you'll be sorry. Don't say we
didn't warn you.</p> </blockquote>

<blockquote><pre class="code">&lt;image source='fred.png'&gt;
&lt;image source="fred's-birthday.png"&gt;</pre></blockquote>

<p>The tag may have either single quotes or double quotes, since the
quoted data may include the other kind of mark (as with the
apostrophe in the second example tag). So the pattern might look like
this: <tt class="literal">/&lt;image source=(['"]).*\1&gt;/</tt>. That says
that the opening quote mark may be of either type, but there must be
a matching mark at the end of the quote.<a href="#FOOTNOTE-184">[184]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-184" /><p>[184]If you
realize that there may be problems with using this pattern on a
markup language like HTML, that's okay. There are lots of
problems with that! This is just an example to illustrate a use of a
backreference. You shouldn't use simple patterns to parse
anything as complex as HTML anyway.</p> </blockquote>

<p>If you have more sets of parentheses, you can have more
backreferences. As you might guess, <tt class="literal">\17</tt> is the
contents of the seventeenth regular expression memory, if you have at
least that many sets of parentheses.<a href="#FOOTNOTE-185">[185]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-185" /><p>[185]If you
don't have that many sets of parentheses before that point in
the pattern, backreferences <tt class="literal">\10</tt> and beyond will be
treated as octal character escapes. To keep an octal character escape
like <tt class="literal">\12</tt> from accidentally meaning a
backreference, just use a leading zero: <tt class="literal">\012</tt> is
always a character, never a backreference.</p> </blockquote>

<p>In numbering backreferences, you can just count the left (opening)
parentheses. The pattern<tt class="literal">/((fred|wilma) (flintstone))
\1/</tt><a name="INDEX-562" /> says to match strings like
<tt class="literal">fred</tt> <tt class="literal">flintstone fred
flintstone</tt>, since the first opening parenthesis and its
corresponding closing parenthesis hold a pattern that matches
<tt class="literal">fred flintstone</tt>.<a href="#FOOTNOTE-186">[186]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-186" /><p>[186]This pattern
would also match <tt class="literal">wilma flintstone wilma
flintstone</tt>.</p> </blockquote>

<p>If we wrote <tt class="literal">/((fred|wilma) (flintstone)) \2/</tt>
instead, we would match strings like <tt class="literal">fred flintstone
fred</tt>; memory two is the choice of <tt class="literal">fred</tt>
or <tt class="literal">wilma</tt>. (Notice that it wouldn't match
<tt class="literal">fred flintsone wilma</tt>, since the backreference can
match only the same name that was matched earlier: either
<tt class="literal">fred</tt> or <tt class="literal">wilma</tt>. But it could
match <tt class="literal">wilma flintstone wilma</tt>, since that one uses
the same name.) And the pattern <tt class="literal">/((fred|wilma) (flintstone))
\3/</tt> would match strings like <tt class="literal">fred flintstone
flintstone</tt>. It's uncommon to have a literal string
like <tt class="literal">flintstone</tt> in memory parentheses, though; we
did that one just to have a third example.
</p>

</div>
<a name="lperl3-CHP-8-SECT-4.2" /><div class="sect2">
<h3 class="sect2">8.4.2. Memory Variables</h3>

<p><a name="INDEX-563" />When we get
to the next chapter and back into the world of Perl, we'll see
that the contents of these regular expression memories are available
to us in special variables like <tt class="literal">$1</tt> after the
pattern match is done. We mention this here just so you'll know
that the memories aren't merely used for backreferences; if you
see what seem to be unnecessary parentheses in a pattern, they may
actually be setting up those memories.<a name="INDEX-564" /> <a name="INDEX-565" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch08_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">8.3. Anchors</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">8.5. Precedence</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>