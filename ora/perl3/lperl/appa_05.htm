<html><head><title>Answers to Chapter 6 Exercises (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="appa_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">A.5. Answers to Chapter 6 Exercises</h2>

<ol><li>
<p>Here's one way to do it:</p>

<blockquote><pre class="code">print reverse &lt;&gt;;</pre></blockquote>




<p>Well, that's pretty simple! But it works because
<tt class="literal">print</tt> is looking for a list of strings to print,
which it gets by calling <tt class="literal">reverse</tt> in a list
context. And <tt class="literal">reverse</tt> is looking for a list of
strings to reverse, which it gets by using the diamond operator in
list context. So, the diamond returns a list of all of the lines from
all of the files of the user's choice. That list of lines is
just what <i class="command">cat</i> would print out. Now
<tt class="literal">reverse</tt> reverses the list of lines, and
<tt class="literal">print</tt> prints them out.
</p>
</li>

<li>
<p>Here's one way to do it:</p>

<blockquote><pre class="code">print "Enter some lines, then press Ctrl-D:\n";  # or Ctrl-Z
chomp(my @lines = &lt;STDIN&gt;);

print "1234567890" x 7, "12345\n";  # ruler line to column 75

foreach (@lines) {
  printf "%20s\n", $_;
}</pre></blockquote>



<p>Here, we start by reading in and chomping all of the lines of text.
Then we print the ruler line. Since that's a debugging aid,
we'd generally comment-out that line when the program is done.
We could have typed <tt class="literal">"1234567890"</tt> again and again,
or even used copy-and-paste to make a ruler line as long as we
needed, but we chose to do it this way because it's kind of
cool.
</p>

<p>Now, the <tt class="literal">foreach</tt> loop iterates over the list of
lines, printing each one with the <tt class="literal">%20s</tt> conversion.
If you chose to do so, you could have created a format to print the
list all at once, without the loop:
</p>

<blockquote><pre class="code">my $format = "%20s\n" x @lines;
printf $format, @lines;</pre></blockquote>




<p>It's a common mistake to get 19-character columns. That happens
when you say to yourself,<a href="#FOOTNOTE-385">[385]</a> "Hey, why do we
<tt class="literal">chomp</tt> the input if we're only going to add
the newlines back on later?" So you leave out the
<tt class="literal">chomp</tt> and use a format of
<tt class="literal">"%20s"</tt> (without a newline).<a href="#FOOTNOTE-386">[386]</a> And now,
mysteriously, the output is off by one space. So, what went wrong?
</p><blockquote class="footnote"> <a name="FOOTNOTE-385" /><p>[385]Or to Larry, if he's
standing nearby.</p> </blockquote><blockquote class="footnote"> <a name="FOOTNOTE-386" /><p>[386]Unless
Larry told you not to do that.</p> </blockquote>

<p>The problem happens when Perl tries to count the spaces needed to
make the right number of columns. If the user enters
<tt class="userinput"><b>hello</b></tt> and a newline, Perl sees
<em class="emphasis">six</em> characters, not five, since newline is a
character. So it prints fourteen spaces and a six-character string,
sure that it gives the twenty characters you asked for in
<tt class="literal">"%20s"</tt>. Oops.
</p>

<p>Of course, Perl isn't looking at the contents of the string to
determine the width; it merely checks the raw number of characters. A
newline (or another special character, such as a tab or a null
character) will throw things off.<a href="#FOOTNOTE-387">[387]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-387" /><p>[387]As Larry should
have explained to you by now.</p> </blockquote>
</li>

<li>
<p>Here's one way to do it:</p>

<blockquote><pre class="code">print "What column width would you like? ";
chomp(my $width = &lt;STDIN&gt;);

print "Enter some lines, then press Ctrl-D:\n";  # or Ctrl-Z
chomp(my @lines = &lt;STDIN&gt;);

print "1234567890" x (($width+9)/10), "\n";      # ruler line as needed

foreach (@lines) {
  printf "%${width}s\n", $_;
}</pre></blockquote>




<p>This is much like the previous one, but we ask for a column width
first. We ask for that first because we can't ask for more
input <em class="emphasis">after</em> the end-of-file indicator, at least
on some systems. Of course, in the real world, you'll generally
have a better end-of-input indicator when getting input from the
user, as we'll see in later chapters.
</p>

<p>Another change from the previous exercise's answer is the ruler
line. We used some math to cook up a ruler line that's at least
as long as we need, as suggested as an "extra credit"
part of the exercise. Proving that our math is correct is an
additional challenge. (Hint: Consider possible widths of
<tt class="literal">50</tt> and <tt class="literal">51</tt>, and remember that
the right side operand to <tt class="literal">x</tt> is truncated, not
rounded.)
</p>

<p>To generate the format this time, we used the expression
<tt class="literal">"%${width}s\n"</tt>, which interpolates
<tt class="literal">$width</tt>. The curly braces are required to
"insulate" the name from the following
<tt class="literal">s</tt>; without the curly braces, we'd be
interpolating <tt class="literal">$widths</tt>, the wrong variable. If you
forgot how to use curly braces to do this, though, you could have
written an expression like <tt class="literal">'%' . $width . "s\n"</tt> to
get the same format string.
</p>

<p>The value of <tt class="literal">$width</tt> brings up another case where
<tt class="literal">chomp</tt> is vital. If the width isn't
chomped, the resulting format string would resemble
<tt class="literal">"%30\ns\n"</tt>. That's not useful.
</p>

<p>People who have seen <tt class="literal">printf</tt> before may have
thought of another solution. Because <tt class="literal">printf</tt>
comes to us from C, which doesn't have string interpolation, we
can use the same trick that C programmers use. If an asterisk
("<tt class="literal">*</tt>") appears in place of a numeric
field width in a conversion, a value from the list of parameters will
be used:
</p>

<blockquote><pre class="code">printf "%*s\n", $width, $_;</pre></blockquote>
</li></ol>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appa_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">A.4. Answers to Chapter 5 Exercises</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">A.6. Answers to Chapter 7 Exercises</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>