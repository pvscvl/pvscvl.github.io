<html><head><title>Output to Standard Output (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch06_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">6.4. Output to Standard Output</h2>

<p><a name="INDEX-451" />
<a name="INDEX-452" />
<a name="INDEX-453" />The
<tt class="literal">print</tt><a name="INDEX-454" />
operator takes a list of values and sends each item (as a string, of
course) to standard output in turn, one after another. It
doesn't add any extra characters before, after, or in between
the items;<a href="#FOOTNOTE-152">[152]</a> if you want spaces between items and a newline at the
end, you have to say so:
</p><blockquote class="footnote"> <a name="FOOTNOTE-152" /><p>[152]Well, it doesn't add anything extra
<em class="emphasis">by default</em>, but this default (like so many
others in Perl) may be changed. Changing these defaults will likely
confuse your maintenance programmer, though, so avoid doing so except
in small, quick-and-dirty programs, or (rarely) in a small section of
a normal program. See the <em class="emphasis">perlvar</em>manpage to learn about changing the defaults.</p>
</blockquote>

<blockquote><pre class="code">$name = "Larry Wall";
print "Hello there, $name, did you know that 3+4 is ", 3+4, "?\n";</pre></blockquote>

<p>Of course, that means that there's a difference between
printing an
<a name="INDEX-455" />array and interpolating an array:
</p>

<blockquote><pre class="code">print @array;     # print a list of items
print "@array";   # print a string (containing an interpolated array)</pre></blockquote>

<p>That first <tt class="literal">print</tt> statement will print a list of
items, one after another, with no spaces in between. The second one
will print exactly one item, which is the string you get by
interpolating <tt class="literal">@array</tt> into the empty
string -- that is, it prints the contents of
<tt class="literal">@array</tt>, separated by spaces.<a href="#FOOTNOTE-153">[153]</a> So, if <tt class="literal">@array</tt> holds
<tt class="literal">qw/</tt> <tt class="literal">fred barney</tt>
<tt class="literal">betty</tt> <tt class="literal">/</tt>,<a href="#FOOTNOTE-154">[154]</a> the first one prints
<tt class="literal">fredbarneybetty</tt>, while the second prints
<tt class="literal">fred</tt> <tt class="literal">barney betty</tt> separated by
spaces.
</p><blockquote class="footnote"> <a name="FOOTNOTE-153" /><p>[153]Yes,
the spaces are another default; see the
<em class="emphasis">perlvar</em>manpage again.</p>
</blockquote><blockquote class="footnote"> <a name="FOOTNOTE-154" /><p>[154]You
know that we mean a three-element list here, right? This is just Perl
notation.</p> </blockquote>

<p>But before you decide to always use the second form, imagine that
<tt class="literal">@array</tt> is a list of unchomped lines of input. That
is, imagine that each of its strings has a trailing newline
character. Now, the first <tt class="literal">print</tt> statement prints
<tt class="literal">fred</tt>, <tt class="literal">barney</tt>, and
<tt class="literal">betty</tt> on three separate lines. But the second one
prints this:
</p>

<blockquote><pre class="code">fred
 barney
 betty</pre></blockquote>

<p>Do you see where the spaces come from? Perl is interpolating an
array, so it puts spaces between the elements. So, we get the first
element of the array (<tt class="literal">fred</tt> and a newline
character), then a space, then the next element of the array
(<tt class="literal">barney</tt> and a newline character), then a space,
then the last element of the array (<tt class="literal">betty</tt> and a
newline character). The result is that the lines seem to have become
indented, except for the first one. Every week or two, a message
appears on the newsgroup <em class="emphasis">comp.lang.perl.misc</em>
with a subject line something like:
</p>

<blockquote class="simplelist">

<p>Perl indents everything after the first line </p>

</blockquote>

<p>Without even reading the message, we can immediately see that the
program used <a name="INDEX-456" />double quotes around an array containing
unchomped strings. "Did you perhaps put an array of unchomped
strings inside double quotes?" we ask, and the answer is always
yes.
</p>

<p>Generally, if your strings contain <a name="INDEX-457" />
<a name="INDEX-458" />newlines, you simply want to print them,
after all:
</p>

<blockquote><pre class="code">print @array;</pre></blockquote>

<p>But if they don't contain newlines, you'll generally want
to add one at the end:
</p>

<blockquote><pre class="code">print "@array\n";</pre></blockquote>

<p>So, if you're using the quote marks, you'll be
(generally) adding the <tt class="literal">\n</tt> at the end of the string
anyway; this should help you to remember which is which.
</p>

<p>It's normal for your program's output to be
<em class="firstterm">buffered</em><a name="INDEX-459" />
<a name="INDEX-460" />.
That is, instead of sending out every little bit of output at once,
it'll be saved until there's enough to bother with.
That's because if (for example) the output were going to be
saved on disk, it would be (relatively) slow and inefficient to spin
the disk every time that one or two characters need to be added to
the file. Generally, then, the output will go into a buffer that is
<em class="firstterm">flushed</em><a name="INDEX-461" />
<a name="INDEX-462" /> (that is, actually written to disk, or
wherever) only when the buffer gets full, or when the output is
otherwise finished (such as at the end of runtime). Usually,
that's what you want.
</p>

<p>But if you (or a program) may be waiting impatiently for the output,
you may wish to take that performance hit and flush the output buffer
each time you <tt class="literal">print</tt>. See the Perl manpages for
more information on controlling buffering in that case.
</p>

<p>Since <tt class="literal">print</tt> is looking for a list of strings to
print, its arguments are evaluated in list context. Since the diamond
operator (as a special kind of line-input operator) will return a
list of lines in a list context, these can work well together:
</p>

<blockquote><pre class="code">print &lt;&gt;;          # source code for 'cat'

print sort &lt;&gt;;  # source code for 'sort'</pre></blockquote>

<p>Well, to be fair, the standard Unix commands <i class="command">cat</i>
and <i class="command">sort</i> do have some additional functionality
that these replacements lack. But you can't beat them for the
price! You can now re-implement all of your standard Unix utilities
in Perl, and painlessly port them to any machine that has Perl,
whether that machine is running Unix or not. And you can be sure that
the programs on every different type of machine will nevertheless
have the same behavior.<a href="#FOOTNOTE-155">[155]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-155" /><p>[155]In fact, there was even an
endeavor started, called the PPT (Perl Power Tools) project, whose
goal is to implement all of the classic Unix utilities in Perl. They
actually completed nearly all the utilities (and most of the games!),
but got bogged down when they got to reimplementing the shell. The
PPT project has been helpful because it has made these standard
utilities available on many non-Unix machines. </p> </blockquote>

<p>What might not be obvious is that
<tt class="literal">print</tt><a name="INDEX-463" />
<a name="INDEX-464" />
has optional parentheses, which can sometimes cause confusion.
Remember the rule that parentheses in Perl may always be omitted,
except when doing so would change the meaning of a statement. So,
here are two ways to print the same thing:
</p>

<blockquote><pre class="code">print("Hello, world!\n");
print "Hello, world!\n";</pre></blockquote>

<p>So far, so good. But another rule in Perl is that if the invocation
of <tt class="literal">print</tt> <em class="emphasis">looks</em> like a
function call, then it <em class="emphasis">is</em> a function call.
It's a simple rule, but what does it mean for something to look
like a function call?
</p>

<p>In a function call, there's a function name
immediately<a href="#FOOTNOTE-156">[156]</a> followed by parentheses around the
function's arguments, like this:
</p><blockquote class="footnote"> <a name="FOOTNOTE-156" /><p>[156]We say "immediately" here
because Perl won't permit a newline character between the
function name and the opening parenthesis in this kind of function
call. If there is a newline there, Perl sees your code as making a
list operator, rather than a function call. This is the kind of
piddling technical detail that we mention only for completeness. If
you're terminally curious, see the full story in the
manpages.</p> </blockquote>

<blockquote><pre class="code">print (2+3);</pre></blockquote>

<p>That looks like a <a name="INDEX-465" />function call, so it is a function call. It
prints <tt class="literal">5</tt>, but then it returns a value like any
other function. The return value of <tt class="literal">print</tt> is a
true or false value, indicating the success of the print. It nearly
always succeeds, unless you get some I/O error, so the
<tt class="literal">$result</tt> in the following statement will normally
be <tt class="literal">1</tt>:
</p>

<blockquote><pre class="code">$result = print("hello world!\n");</pre></blockquote>

<p>But what if you used the result in some other way? Let's
suppose you decide to multiply the return value times four:
</p>

<blockquote><pre class="code">print (2+3)*4;  # Oops!</pre></blockquote>

<p>When Perl sees this line of code, it prints <tt class="literal">5</tt>,
just as you asked. Then it takes the return value from
<tt class="literal">print</tt>, which is <tt class="literal">1</tt>, and
multiplies that times <tt class="literal">4</tt>. It then throws away the
product, wondering why you didn't tell it to do something else
with it. And at this point, someone looking over your shoulder says,
"Hey, Perl can't do math! That should have printed
<tt class="literal">20</tt>, rather than <tt class="literal">5</tt>!"
</p>

<p>This is the problem with allowing the parentheses to be optional;
sometimes we humans forget where the parentheses really belong. When
there are no parentheses, <tt class="literal">print</tt> is a list
operator, printing all of the items in the following list;
that's generally what you'd expect. But when the first
thing after <tt class="literal">print</tt> is a left parenthesis,
<tt class="literal">print</tt> is a function call, and it will print only
what's found inside the parentheses. Since that line had
parentheses, it's the same to Perl as if you'd said this:
</p>

<blockquote><pre class="code">( print(2+3) ) * 4;  # Oops!</pre></blockquote>

<p>Fortunately, Perl itself can almost always help you with this, if you
ask for warnings -- so use <tt class="literal">-w</tt>, at least during
program development and debugging.
</p>

<p>Actually, this rule -- "If it looks like a function call, it
is a function call" -- applies to all list
functions<a href="#FOOTNOTE-157">[157]</a> in Perl, not
just to <tt class="literal">print</tt>. It's just that you're
most likely to notice it with <tt class="literal">print</tt>. If
<tt class="literal">print</tt> (or another function name) is followed by
an open parenthesis, make sure that the corresponding close
parenthesis comes after <em class="emphasis">all</em> of the arguments to
that function.<a name="INDEX-466" /> 
</p><blockquote class="footnote"> <a name="FOOTNOTE-157" /><p>[157]Functions that take zero or one arguments
don't suffer from this problem.</p> </blockquote>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch06_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">6.3. The Invocation Arguments</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">6.5. Formatted Output with printf</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>