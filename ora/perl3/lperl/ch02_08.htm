<html><head><title>Getting User Input (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch02_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">2.8. Getting User Input</h2>

<p>At this point, you're probably wondering how to get a value
from the keyboard into a Perl program. Here's the simplest way:
use the line-input operator,
<tt class="literal">&lt;STDIN&gt;</tt><a name="INDEX-238" />
<a name="INDEX-239" />
<a name="INDEX-240" />.<a href="#FOOTNOTE-61">[61]</a> Each time you use <tt class="literal">&lt;STDIN&gt;</tt> in a
place where a scalar value is expected, Perl reads the next complete
text line from <em class="emphasis">standard
input</em><a name="INDEX-241" /> (up to the first newline), and uses that
string as the value of <tt class="literal">&lt;STDIN&gt;</tt>. Standard
input can mean many things, but unless you do something uncommon, it
means the keyboard of the user who invoked your program (probably
you). If there's nothing waiting to be read (typically the
case, unless you type ahead a complete line), the Perl program will
stop and wait for you to enter some characters followed by a newline
(return).<a href="#FOOTNOTE-62">[62]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-61" /><p>[61]This is actually a
line-input operator working on the filehandle
<tt class="literal">STDIN</tt>, but we can't tell you about that
until we get to filehandles (in <a href="ch11_01.htm">Chapter 11, "Filehandles and File Tests"</a>).</p>
</blockquote><blockquote class="footnote"> <a name="FOOTNOTE-62" /><p>[62]To be honest, it's normally your
system that waits for the input; Perl waits for your system. Although
the details depend upon your system and its configuration, you can
generally correct your mistyping with a backspace key before you
press return -- your system handles that, not Perl itself. If you
need more control over the input, get the
<tt class="literal">Term::ReadLine</tt> module from CPAN.</p>
</blockquote>

<p>The string value of <tt class="literal">&lt;STDIN&gt;</tt> typically has a
newline character on the end of it.<a href="#FOOTNOTE-63">[63]</a> So you <em class="emphasis">could</em> do something like this:
</p><blockquote class="footnote"> <a name="FOOTNOTE-63" /><p>[63]The exception is
if the standard input stream somehow runs out in the middle of a
line. But that's not a proper text file, of course!</p>
</blockquote>

<blockquote><pre class="code">$line = &lt;STDIN&gt;;
if ($line eq "\n") {
  print "That was just a blank line!\n";
} else {
  print "That line of input was: $line";
}</pre></blockquote>

<p>But in practice, you don't often want to keep the newline, so
you need the <tt class="literal">chomp</tt> operator.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.7. The if Control Structure</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.9. The chomp Operator</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>