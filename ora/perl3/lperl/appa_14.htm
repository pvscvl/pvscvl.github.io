<html><head><title>Answers to Chapter 15 Exercises (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_13.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="appa_15.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">A.14. Answers to Chapter 15 Exercises</h2>

<ol><li>
<p>Here's one way to do it:</p>

<blockquote><pre class="code">my @numbers;
push @numbers, split while &lt;&gt;;
foreach (sort { $a &lt;=&gt; $b } @numbers) {
  printf "%20g\n", $_;
}</pre></blockquote>



<p>That second line of code is too confusing, isn't it? Well, we
did that on purpose. Although we recommend that you write clear code,
some people like writing code that's as hard to understand as
possible,<a href="#FOOTNOTE-398">[398]</a> so we want you to be prepared for the worst. Someday,
you'll need to maintain confusing code like this.
</p><blockquote class="footnote"> <a name="FOOTNOTE-398" /><p>[398]Well, we don't recommend it for
<em class="emphasis">normal</em> coding purposes, but it can be a fun game
to write confusing code, and it can be educational to take someone
else's obfuscated code examples and spend a weekend or two
figuring out just what they do. If you want to see some fun snippets
of such code and maybe get a little help with decoding them, ask
around at the next Perl Mongers' meeting. Or search for JAPHs
on the Web, or see how well you can decipher the example obfuscated
code block near the end of this chapter's answers. </p>
</blockquote>

<p>Since that line uses the <tt class="literal">while</tt> modifier,
it's the same as if it were written in a loop like this:
</p>

<blockquote><pre class="code">while (&lt;&gt;) {
  push @numbers, split;
}</pre></blockquote>




<p>That's better, but maybe it's still a little unclear.
(Nevertheless, we don't have a quibble about writing it this
way. This one is on the correct side of the "too hard to
understand at a glance" line.) The <tt class="literal">while</tt>
loop is reading the input a line at a time (from the user's
choice of input sources, as shown by the diamond operator), and
<tt class="literal">split</tt> is, by default, splitting that on whitespace
to make a list of words -- or, in this case, a list of numbers.
The input is just a stream of numbers separated by whitespace, after
all. Either way that you write it, then, that
<tt class="literal">while</tt> loop will put all of the numbers from the
input into <tt class="literal">@numbers</tt>.
</p>

<p>The <tt class="literal">foreach</tt> loop takes the sorted list and prints
each one on its own line, using the <tt class="literal">%20g</tt> numeric
format to put them in a right-justified column. You could have used
<tt class="literal">%20s</tt> instead. What difference would that make?
Well, that's a string format, so it would have left the strings
untouched in the output. Did you notice that our sample data included
both <tt class="literal">1.50</tt> and <tt class="literal">1.5</tt>, and both
<tt class="literal">04</tt> and <tt class="literal">4</tt>? If you printed those
as strings, the extra zero characters will still be in the output;
but <tt class="literal">%20g</tt> is a numeric format, so equal numbers
will appear identically in the output. Either format could
potentially be correct, depending upon what you're trying to
do.
</p>
</li>

<li>
<p>Here's one way to do it:</p>


<blockquote><pre class="code"># don't forget to incorporate the hash %last_name,
# either from the exercise text or the downloaded file

my @keys = sort {
  "\L$last_name{$a}" cmp "\L$last_name{$b}"  # by last name
   or
  "\L$a" cmp "\L$b"                          # by first name
} keys %last_name;

foreach (@keys) {
  print "$last_name{$_}, $_\n";              # Rubble,Bamm-Bamm
}</pre></blockquote>





<p>There's not much to say about this one; we put the keys in
order as needed, then print them out. We chose to print them in
last-name-comma-first-name order just for fun; the exercise
description left that up to you.
</p>
</li>

<li>
<p>Here's one way to do it:</p>

<blockquote><pre class="code">print "Please enter a string: ";
chomp(my $string = &lt;STDIN&gt;);
print "Please enter a substring: ";
chomp(my $sub = &lt;STDIN&gt;);

my @places;

for (my $pos = -1; ; ) {                  # tricky use of three-part for loop
  $pos = index($string, $sub, $pos + 1);  # find next position
  last if $pos == -1;
  push @places, $pos;
}

print "Locations of '$sub' in '$string' were: @places\n";</pre></blockquote>



<p>This one starts out simply enough, asking the user for the strings
and declaring an array to hold the list of substring positions. But
once again, as we see in the <tt class="literal">for</tt> loop, the code
seems to have been "optimized for cleverness", which
should be done only for fun, never in production code. But this
actually shows a valid technique which could be useful in some cases,
so let's see how it works.
</p>

<p>The <tt class="literal">my</tt> variable <tt class="literal">$pos</tt> is
declared private to the scope of the <tt class="literal">for</tt> loop, and
it starts with a value of <tt class="literal">-1</tt>. So as not to keep
you in suspense about this variable, we'll tell you right now
that it's going to hold a position of the substring in the
larger string. The test and increment sections of the
<tt class="literal">for</tt> loop are empty, so this is an infinite loop.
(Of course, we'll eventually break out of it, in this case with
<tt class="literal">last</tt>).
</p>

<p>The first statement of the loop body looks for the first occurrence
of the substring at or after position <tt class="literal">$pos + 1</tt>.
That means that on the first iteration, when <tt class="literal">$pos</tt>
is still <tt class="literal">-1</tt>, the search will start at position
<tt class="literal">0</tt>, the start of the string. The location of the
substring is stored back into <tt class="literal">$pos</tt>. Now, if that
was <tt class="literal">-1</tt>, we're done with the
<tt class="literal">for</tt> loop, so <tt class="literal">last</tt> breaks out of
the loop in that case. If it wasn't <tt class="literal">-1</tt>, then
we save the position into <tt class="literal">@places</tt> and go around
the loop again. This time, <tt class="literal">$pos + 1</tt> means that
we'll start looking for the substring just after the previous
place where we found it. And so we get the answers we wanted and the
world is once again a happy place.
</p>

<p>If you didn't want that tricky use of the
<tt class="literal">for</tt> loop, you could accomplish the same result as
shown here:
</p>

<blockquote><pre class="code">{
  my $pos = -1;
  while (1) {
    ... # Same loop body as the for loop used above
  }
}</pre></blockquote>




<p>The naked block on the outside restricts the scope of
<tt class="literal">$pos</tt>. You don't have to do that, but
it's often a good idea to declare each variable in the smallest
possible scope. This means we have fewer variables
"alive" at any given point in the program, making it less
likely that we'll accidentally reuse the name
<tt class="literal">$pos</tt> for some new purpose. For the same reason, if
you don't declare a variable in a small scope, you should
generally give it a longer name that's thereby less likely to
be reused by accident. Maybe something like
<tt class="literal">$substring_position</tt> would be appropriate in this
case.
</p>

<p>On the other hand, if you were <em class="emphasis">trying</em> to
obfuscate your code (shame on you!), you could create a monster like
this (shame on us!):
</p>

<blockquote><pre class="code">for (my $pos = -1; -1 != 
  ($pos = index 
    +$string,
    +$sub,
    +$pos
    +1
  );
push @places, ((((+$pos))))) {
    'for ($pos != 1; # ;$pos++) {
      print "position $pos\n";#;';#' } pop @places;
}</pre></blockquote>



<p>That even trickier code works in place of the original tricky
<tt class="literal">for</tt> loop. By now, you should know enough to be
able to decipher that one on your own, or to obfuscate code in order
to amaze your friends and confound your enemies. Be sure to use these
powers only for good, never for evil.
</p>

<p>Oh, and what did you get when you searched for <tt class="literal">t</tt>
in <tt class="literal">This is a test.</tt>? It's at positions
<tt class="literal">10</tt> and <tt class="literal">13</tt>. It's not at
position <tt class="literal">0</tt>; since the capitalization doesn't
match, the substring doesn't match.
</p>
</li></ol>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_13.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appa_15.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">A.13. Answers to Chapter 14 Exercises</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">A.15. Answers to Chapter 16 Exercises</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>