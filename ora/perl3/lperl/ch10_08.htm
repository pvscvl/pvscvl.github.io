<html><head><title>Loop Controls (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch10_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">10.8. Loop Controls</h2>

<p><a name="INDEX-685" /> <a name="INDEX-686" />As you've surely noticed by now,
Perl is one of the so-called "structured"
<a name="INDEX-687" />programming
languages. In particular, there's just one entrance to any
block of code, which is at the top of that block. But there are times
when you may need more control or versatility than what we've
shown so far. For example, you may need to make a loop like a
<tt class="literal">while</tt> loop, but one that always runs at least
once. Or maybe you need to occasionally exit a block of code early.
Perl has three loop-control operators you can use in loop blocks to
make the loop do all sorts of tricks.
</p>

<a name="lperl3-CHP-10-SECT-8.1" /><div class="sect2">
<h3 class="sect2">10.8.1. The last Operator</h3>

<p>The <tt class="literal">last</tt><a name="INDEX-688" />
<a name="INDEX-689" />
<a name="INDEX-690" />
<a name="INDEX-691" />
<a name="INDEX-692" /> operator immediately ends
execution of the loop. (If you've used the "break"
operator in C or a similar language, it's like that.)
It's the "emergency exit" for loop blocks. When you
hit <tt class="literal">last</tt>, the loop is done. For example:
</p>

<blockquote><pre class="code"># Print all input lines mentioning fred, until the __END__ marker
while (&lt;STDIN&gt;) {
  if (/__END__/) {
    # No more input on or after this marker line
    last;
  } elsif (/fred/) {
    print;
  }
}
## last comes here ##</pre></blockquote>

<p>Once an input line has the <tt class="literal">__END__</tt><a name="INDEX-693" />
marker, that loop is done. Of course, that comment line at the end is
merely a comment -- it's not required in any way. We just
threw that in to make it clearer what's happening.
</p>

<p>There are five kinds of <a name="INDEX-694" />loop blocks in Perl. These are the blocks
of <tt class="literal">for</tt>, <tt class="literal">foreach</tt>,
<tt class="literal">while</tt>, <tt class="literal">until</tt>, or the naked
block.<a href="#FOOTNOTE-229">[229]</a> The curly braces of an
<tt class="literal">if</tt> block or subroutine<a href="#FOOTNOTE-230">[230]</a>
don't qualify. As you may have noticed in the example above,
the <tt class="literal">last</tt> operator applied to the entire loop
block.
</p><blockquote class="footnote"> <a name="FOOTNOTE-229" /><p>[229]Yes, you can use <tt class="literal">last</tt> to
jump out of a naked block. Be sure to check your local laws before
doing so.</p> </blockquote><blockquote class="footnote"> <a name="FOOTNOTE-230" /><p>[230]It's
probably not a good idea, but you could use these loop control
operators from inside a subroutine to control a loop that is
<em class="emphasis">outside</em> the subroutine. That is, if a subroutine
is called in a loop block, and the subroutine executes
<tt class="literal">last</tt> when there's no loop block running
inside the subroutine, the flow of control will jump to just after
the loop block <em class="emphasis">in the main code</em>. This ability to
use loop control from within a subroutine may go away in a future
version of Perl, and no one is likely to miss it.</p> </blockquote>

<p>The <tt class="literal">last</tt> operator will apply to the innermost
currently running loop block. To jump out of outer blocks, stay
tuned; that's coming up in a little bit.
</p>

</div>
<a name="lperl3-CHP-10-SECT-8.2" /><div class="sect2">
<h3 class="sect2">10.8.2. The next Operator</h3>

<p><a name="INDEX-695" />Sometimes you're not ready for the
loop to finish, but you're done with the current iteration.
That's what the <tt class="literal">next</tt><a name="INDEX-696" /> operator is good for. It jumps to the
<em class="emphasis">inside</em> of the bottom of the current loop
block.<a href="#FOOTNOTE-231">[231]</a> After
<tt class="literal">next</tt>, control continues with the next iteration of
the loop (much like the "continue" operator in C or a
similar language):
</p><blockquote class="footnote"> <a name="FOOTNOTE-231" /><p>[231]This is another of our many lies. In truth,
<tt class="literal">next</tt> jumps to the start of the (usually omitted)
<tt class="literal">continue</tt><a name="INDEX-697" /> block for the loop. See
the<a name="INDEX-698" /> <em class="emphasis">perlsyn</em>
manpage for the full details.</p> </blockquote>

<blockquote><pre class="code"># Analyze words in the input file or files
while (&lt;&gt;) {
  foreach (split) {  # break $_ into words, assign each to $_ in turn
    $total++;
    next if /\W/;    # strange words skip the remainder of the loop
    $valid++;
    $count{$_}++;    # count each separate word
    ## next comes here ##
  }
}

print "total things = $total, valid words = $valid\n";
foreach $word (sort keys %count) {
  print "$word was seen $count{$word} times.\n";
}</pre></blockquote>

<p>This one is a little more complex than most of our examples up to
this point, so let's take it step by step. The
<tt class="literal">while</tt> loop is reading lines of input from the
diamond operator, one after another, into <tt class="literal">$_</tt>;
we've seen that before. Each time through that loop, another
line of input will be in <tt class="literal">$_</tt>.
</p>

<p>Inside that loop, the <tt class="literal">foreach</tt> loop is iterating
over the return value <tt class="literal">split</tt>. Do you remember the
default for <tt class="literal">split</tt> with no arguments?<a href="#FOOTNOTE-232">[232]</a> That
splits <tt class="literal">$_</tt> on whitespace, in effect breaking
<tt class="literal">$_</tt> into a list of words. Since the
<tt class="literal">foreach</tt> loop doesn't mention some other
control variable, the control variable will be <tt class="literal">$_</tt>.
So, we'll see one word after another in <tt class="literal">$_</tt>.
</p><blockquote class="footnote">
<a name="FOOTNOTE-232" /><p>[232]If you don't remember it, don't worry too much.
Don't waste any brain cells remembering things that you can
look up with <i class="command">perldoc</i>.</p> </blockquote>

<p>But didn't we just say that <tt class="literal">$_</tt> holds one
line of input after another? Well, in the outer loop, that's
what it is. But inside the <tt class="literal">foreach</tt> loop, it holds
one word after another. It's no problem for Perl to reuse
<tt class="literal">$_</tt> for a new purpose; this happens all the time.
</p>

<p>Now, inside the <tt class="literal">foreach</tt> loop, we're seeing
one word at a time in <tt class="literal">$_</tt>.
<tt class="literal">$total</tt> is incremented, so it must be the total
number of words. But the next line (which is the point of this
example) checks to see whether the word has any nonword
characters -- anything but letters, digits, and underscores. So,
if the word is <tt class="literal">Tom's</tt>, or if it is
<tt class="literal">full-sized</tt>, or if it has an adjoining comma, quote
mark, or any other strange character, it will match that pattern and
we'll skip the rest of the loop, going on to the next word.
</p>

<p>But let's say that it's an ordinary word, like
<tt class="literal">fred</tt>. In that case, we count
<tt class="literal">$valid</tt> up by one, and also
<tt class="literal">$count{$_}</tt>, keeping a count for each different
word. So, when we finish the two loops, we've counted every
word in every line of input from every file the user wanted us to
use.
</p>

<p>We're not going to explain the last few lines. By now, we hope
you've got stuff like that down already.
</p>

<p>Like <tt class="literal">last</tt>, <tt class="literal">next</tt> may be used in
any of the five kinds of <a name="INDEX-699" />loop blocks: <tt class="literal">for</tt>,
<tt class="literal">foreach</tt>, <tt class="literal">while</tt>,
<tt class="literal">until</tt>, or the naked block. Also, if loop blocks
are nested, <tt class="literal">next</tt> works with the innermost one.
We'll see how to change that at the end of this section.
</p>

</div>
<a name="lperl3-CHP-10-SECT-8.3" /><div class="sect2">
<h3 class="sect2">10.8.3. The redo Operator</h3>

<p>The third member of the loop control triad is
<tt class="literal">redo</tt><a name="INDEX-700" />. It says to go back to the top of the
current loop block, without testing any conditional expression or
advancing to the next iteration. (If you've used C or a similar
language, you've never seen this one before. Those languages
don't have this kind of operator.) Here's an example:
</p>

<blockquote><pre class="code"># Typing test
my @words = qw{ fred barney pebbles dino wilma betty };
my $errors = 0;

foreach (@words) {
  ## redo comes here ##
  print "Type the word '$_': ";
  chomp(my $try = &lt;STDIN&gt;);
  if ($try ne $_) {
    print "Sorry - That's not right.\n\n";
    $errors++;
    redo;  # jump back up to the top of the loop
  }
}
print "You've completed the test, with $errors errors.\n";</pre></blockquote>

<p>Like the other two operators, <tt class="literal">redo</tt> will work with
any of the five kinds of loop blocks, and it will work with the
innermost loop block when they're nested.
</p>

<p>The big difference between <tt class="literal">next</tt> and
<tt class="literal">redo</tt> is that <tt class="literal">next</tt> will advance
to the next iteration, but <tt class="literal">redo</tt> will redo the
current iteration. Here's an example program that you can play
with to get a feel for how these three operators work:<a href="#FOOTNOTE-233">[233]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-233" /><p>[233]If you've downloaded the example files from the
O'Reilly website (as described in the Preface), you'll
find this program called <em class="filename">lnr-example.</em></p>
</blockquote>

<blockquote><pre class="code">foreach (1..10) {
  print "Iteration number $_.\n\n";
  print "Please choose: last, next, redo, or none of the above? ";
  chomp(my $choice = &lt;STDIN&gt;);
  print "\n";
  last if $choice =~ /last/i;
  next if $choice =~ /next/i;
  redo if $choice =~ /redo/i;
  print "That wasn't any of the choices... onward!\n\n";
}
print "That's all, folks!\n";</pre></blockquote>

<p>If you just press return without typing anything (try it two or three
times), the loop counts along from one number to the next. If you
choose <tt class="literal">last</tt> when you get to number four, the loop
is done, and you won't go on to number five. If you choose
<tt class="literal">next</tt> when you're on four, you're on to
number five without printing the "onward" message. And if
you choose <tt class="literal">redo</tt> when you're on four,
you're back to doing number four all over again.<a name="INDEX-701" />
</p>

</div>
<a name="lperl3-CHP-10-SECT-8.4" /><div class="sect2">
<h3 class="sect2">10.8.4. Labeled Blocks</h3>

<p>When you need to work with a <a name="INDEX-702" />
<a name="INDEX-703" />loop block
that's not the innermost one, use a label. Labels in Perl are
like other identifiers -- made of letters, digits, and
underscores, but they can't start with a digit -- however,
since they have no prefix character, labels could be confused with
the names of builtin function names, or even with your own
subroutines' names. So, it would be a poor choice to make a
label called <tt class="literal">print</tt> or <tt class="literal">if</tt>.
Because of that, Larry recommends that they be all uppercase. That
not only ensures that the label won't conflict with another
identifier but it also makes it easy to spot the label in the code.
In any case, labels are rare, only showing up in a small percentage
of Perl programs.
</p>

<p>To label a loop block, just put the label and a colon in front of the
loop. Then, inside the loop, you may use the label after
<tt class="literal">last</tt>, <tt class="literal">next</tt>, or
<tt class="literal">redo</tt> as needed:
</p>

<blockquote><pre class="code">LINE: while (&lt;&gt;) {
  foreach (split) {
    last LINE if /_ _END_  _/;  # bail out of the LINE loop
    ...;
  }
}</pre></blockquote>

<p>For readability, it's generally nice to put the label at the
left margin, even if the current code is at a higher indentation.
Notice that the label names the entire block; it's not marking
a target point in the code.<a href="#FOOTNOTE-234">[234]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-234" /><p>[234]This isn't
<tt class="literal">goto</tt>, after all.</p> </blockquote>

<p>In that previous snippet of sample code, the special <tt class="literal">__END__</tt> token marks the end of all input. Once that token shows
up, the program will ignore any remaining lines (even from other
files).
</p>

<p>It often makes sense to choose a noun as the name of the
loop.<a href="#FOOTNOTE-235">[235]</a> That
is, the outer loop is processing a line at a time, so we called it
<tt class="literal">LINE</tt>. If we had to name the inner loop, we would
have called it <tt class="literal">WORD</tt>, since it processes a word at
a time. That makes it convenient to say things like "(move on
to the) <tt class="literal">next</tt> <tt class="literal">WORD</tt>" or
"<tt class="literal">redo</tt> (the current)
<tt class="literal">LINE</tt>".<a name="INDEX-704" /> <a name="INDEX-705" /> 
</p><blockquote class="footnote"> <a name="FOOTNOTE-235" /><p>[235]That is, it makes more sense to do that than
not to do that. Perl doesn't care if you call your loop labels
things like <tt class="literal">XYZZY</tt> or <tt class="literal">PLUGH</tt>.
However, unless you were friendly with the Colossal Cave in the
70's, you might not get the reference.</p> </blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_07.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_09.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.7. The for Control Structure</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.9. Logical Operators</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>