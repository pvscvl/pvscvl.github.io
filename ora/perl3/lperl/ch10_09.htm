<html><head><title>Logical Operators (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch10_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">10.9. Logical Operators</h2>

<p><a name="INDEX-706" /> <a name="INDEX-707" />As you might expect, Perl has all of the
necessary logical operators needed to work with Boolean (true/false)
values. For example, it's often useful to combine logical tests
by using the logical <a name="INDEX-708" /> <a name="INDEX-709" />AND operator
(<tt class="literal">&amp;&amp;</tt>) and the logical
<a name="INDEX-710" />
<a name="INDEX-711" />OR operator (<tt class="literal">||</tt>):
</p>

<blockquote><pre class="code">if ($dessert{'cake'} &amp;&amp; $dessert{'ice cream'}) {
  # Both are true
  print "Hooray! Cake and ice cream!\n";
} elsif ($dessert{'cake'} || $dessert{'ice cream'}) {
  # At least one is true
  print "That's still good...\n";
} else {
  # Neither is true - do nothing (we're sad)
}</pre></blockquote>

<p>There may be a shortcut. If the left side of a logical AND operation
is false, the whole thing is false, since logical AND needs both
sides to be true in order to return true. In that case, there's
no reason to check the right side, so it will not even be evaluated.
Consider what happens in this example if <tt class="literal">$hour</tt> is
<tt class="literal">3</tt>:
</p>

<blockquote><pre class="code">if ( (9 &lt;= $hour) &amp;&amp; ($hour &lt; 17) ) {
  print "Aren't you supposed to be at work...?\n";
}</pre></blockquote>

<p>Similarly, if the left side of a logical OR operation is
<em class="emphasis">true</em>, the right side will not be evaluated.
Consider what happens here if <tt class="literal">$name</tt> is
<tt class="literal">fred</tt>:
</p>

<blockquote><pre class="code">if ( ($name eq 'fred') || ($name eq 'barney') ) {
  print "You're my kind of guy!\n";
}</pre></blockquote>

<p>Because of this behavior, these operators are called
<a name="INDEX-712" />"short-circuit" logical
operators. They take a short circuit to the result whenever they can.
In fact, it's fairly common to rely upon this short-circuit
behavior. Suppose you need to calculate an average:
</p>

<blockquote><pre class="code">if ( ($n != 0) &amp;&amp; ($total/$n &lt; 5) ) {
  print "The average is below five.\n";
}</pre></blockquote>

<p>In that example, the right side will be evaluated only if the left
side is true, so we can't accidentally divide by zero and crash
the program.
</p>

<a name="lperl3-CHP-10-SECT-9.1" /><div class="sect2">
<h3 class="sect2">10.9.1. The Value of a Short-Circuit Operator</h3>

<p>Unlike what happens in C (and similar languages), the
<a name="INDEX-713" />value of a short-circuit
logical operator is the last part evaluated, not just a Boolean
value. This provides the same result, in that the last part evaluated
is always true when the whole thing should be true, and it's
always false when the whole thing should be false.
</p>

<p>But it's a much more useful return value. Among other things,
the logical OR operator is quite handy for selecting a default value:
</p>

<blockquote><pre class="code">my $last_name = $last_name{$someone} || '(No last name)';</pre></blockquote>

<p>If <tt class="literal">$someone</tt> is not listed in the hash, the left
side will be <tt class="literal">undef</tt>, which is false. So, the
logical OR will have to look to the right side for the value, making
the right side the default.<a href="#FOOTNOTE-236">[236]</a> We'll see other uses for this
behavior later.
</p><blockquote class="footnote"> <a name="FOOTNOTE-236" /><p>[236]But do note that in this
idiom the default value won't merely replace
<tt class="literal">undef</tt>; it would replace any false value equally
well. That's fine for most names, but don't forget that
zero and the empty string are useful values that are nevertheless
false. This idiom should be used only when you're willing to
replace <em class="emphasis">any</em> false value with the expression on
the right.</p> </blockquote>

</div>
<a name="lperl3-CHP-10-SECT-9.2" /><div class="sect2">
<h3 class="sect2">10.9.2. The Ternary Operator, ?:</h3>

<p>When Larry was deciding which operators to make available in Perl, he
didn't want former <a name="INDEX-714" />
<a name="INDEX-715" />C programmers to be left wishing
for something that C had and Perl didn't, so he brought over
all of C's operators to Perl.<a href="#FOOTNOTE-237">[237]</a>
That meant bringing over C's most confusing operator: the
<a name="INDEX-716" />
<a name="INDEX-717" />ternary <tt class="literal">?:</tt> operator.
While it may be confusing, it can also be quite useful.
</p><blockquote class="footnote"> <a name="FOOTNOTE-237" /><p>[237]Well, to be sure,
he did leave out the ones that have no use in Perl, such as the
operator that turns a number into the memory address of a variable.
And he added several operators (like the string concatenation
operator), which make C folks jealous of Perl.</p> </blockquote>

<p>The ternary operator is like an <a name="INDEX-718" />if-then-else test,
all rolled into an expression. It is called a "ternary"
operator because it takes three operands. It looks like this:
</p>

<blockquote><pre class="code">expression ? if_true_expr : if_false_expr</pre></blockquote>

<p>First, the expression is evaluated to see whether it's true or
false. If it's true, the second expression is used; otherwise,
the third expression is used. Every time, one of the two expressions
on the right is evaluated, and one is ignored. That is, if the first
expression is true, then the second expression is evaluated, and the
third is ignored. If the first expression is false, then the second
is ignored, and the third is evaluated as the value of the whole
thing.
</p>

<p>In this example, the result of the subroutine
<tt class="literal">&amp;is_weekend</tt> determines which string expression
will be assigned to the variable:
</p>

<blockquote><pre class="code">my $location = &amp;is_weekend($day) ? "home" : "work";</pre></blockquote>

<p>And here, we calculate and print out an average -- or just a
placeholder line of hyphens, if there's no average available:
</p>

<blockquote><pre class="code">my $average = $n ? ($total/$n) : "-----";
print "Average: $average\n";</pre></blockquote>

<p>You could always rewrite any use of the <tt class="literal">?:</tt>
operator as an <tt class="literal">if</tt> structure, often much less
conveniently and less concisely:
</p>

<blockquote><pre class="code">my $average;
if ($n) {
  $average = $total / $n;
} else {
  $average = "-----";
}
print "Average: $average\n";</pre></blockquote>

<p>Here's a trick you might see, used to code up a nice multiway
branch:
</p>

<blockquote><pre class="code">my $size =
  ($width &lt; 10) ? "small"  :
  ($width &lt; 20) ? "medium" :
  ($width &lt; 50) ? "large"  :
                  "extra-large"; # default</pre></blockquote>

<p>That is really just three nested <tt class="literal">?:</tt> operators, and
it works quite well, once you get the hang of it.
</p>

<p>Of course, you're not obliged to use this operator. Beginners
may wish to avoid it. But you'll see it in others' code,
sooner or later, and we hope that one day you'll find a good
reason to use it in your own programs.
</p>

</div>
<a name="lperl3-CHP-10-SECT-9.3" /><div class="sect2">
<h3 class="sect2">10.9.3. Control Structures Using Partial-Evaluation Operators</h3>

<p><a name="INDEX-719" /> <a name="INDEX-720" />These three operators that we've
just seen -- <tt class="literal">&amp;&amp;</tt>, <tt class="literal">||</tt>,
and <tt class="literal">?:</tt> -- all share a peculiar property:
depending upon whether the value on the left side is true or false,
they may or may not evaluate an expression. Sometimes the expression
is evaluated, and sometimes it isn't. For that reason, these
are sometimes called <em class="firstterm">partial-evaluation</em>
operators, since they may not evaluate all of the expressions around
them. And partial-evaluation operators are automatically control
structures.<a href="#FOOTNOTE-238">[238]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-238" /><p>[238]Some of you were wondering why these
logical operators are being covered in this chapter, weren't
you?</p> </blockquote>

<p>It's not as if Larry felt a burning need to add more control
structures to Perl. But once he had decided to put these
partial-evaluation operators into Perl, they automatically became
control structures as well. After all, anything that can activate and
deactivate a chunk of code is a control structure.
</p>

<p>Fortunately, you'll notice this only when the controlled
expression has side effects, like altering a variable's value
or causing some output. For example, suppose you ran across this line
of code:
</p>

<blockquote><pre class="code">($a &lt; $b) &amp;&amp; ($a = $b);</pre></blockquote>

<p>Right away, you should notice that the result of the logical AND
isn't being assigned anywhere.<a href="#FOOTNOTE-239">[239]</a> Why not?
</p><blockquote class="footnote"> <a name="FOOTNOTE-239" /><p>[239]But don't
forget to consider that it might be a return value, as the last
expression in a subroutine.</p> </blockquote>

<p>If <tt class="literal">$a</tt> is really less than <tt class="literal">$b</tt>,
the left side is true, so the right side will be evaluated, thereby
doing the assignment. But if <tt class="literal">$a</tt> is not less than
<tt class="literal">$b</tt>, the left side will be false, and thus the
right side would be skipped. So that line of code would do
essentially the same thing as this one, which is easier to
understand:
</p>

<blockquote><pre class="code">if ($a &lt; $b) { $a = $b; }</pre></blockquote>

<p>Or maybe you'll be maintaining a
<a name="INDEX-721" />program, and you'll see a line like
this one:
</p>

<blockquote><pre class="code">($a &gt; 10) || print "why is it not greater?\n";</pre></blockquote>

<p>If <tt class="literal">$a</tt> is really greater than ten, the left side is
true, and the logical OR is done. But if it's not, the left
side is false, and this will go on to print the message. Once again,
this could (and probably should) be written in the traditional way,
probably with <tt class="literal">if</tt> or <tt class="literal">unless</tt>.
</p>

<p>If you have a particularly twisted brain, you might even learn to
read these lines as if they were written in English. For example:
check that <tt class="literal">$a</tt> is less than <tt class="literal">$b</tt>,
<em class="emphasis">and if it is</em>, then do the assignment. Check that
<tt class="literal">$a</tt> is more than ten, <em class="emphasis">or if it's
not</em>, then print the message.
</p>

<p>It's generally former C programmers or old-time Perl
programmers who most often use these ways of writing control
structures. Why do they do it? Some have the mistaken idea that these
are more efficient. Some think these tricks make their code cooler.
Some are merely copying what they saw someone else do.
</p>

<p>In the same way, the ternary operator may be used for control. In
this case, we want to assign <tt class="literal">$c</tt> to the smaller of
two variables:
</p>

<blockquote><pre class="code">($a &lt; $b) ? ($a = $c) : ($b = $c);</pre></blockquote>

<p>If <tt class="literal">$a</tt> is smaller, it gets <tt class="literal">$c</tt>.
Otherwise, <tt class="literal">$b</tt> does.
</p>

<p>There is another way to write the logical
<a name="INDEX-722" />
<a name="INDEX-723" />AND and logical
<a name="INDEX-724" />OR
operators. You may wish to write them out as words:
<tt class="literal">and</tt> and <tt class="literal">or</tt>.<a href="#FOOTNOTE-240">[240]</a> These
word-operators have the same behaviors as the ones written with
punctuation, but the words are much lower on the precedence chart.
Since the words don't "stick" so tightly to the
nearby parts of the expression, they may need fewer parentheses:
</p><blockquote class="footnote">
<a name="FOOTNOTE-240" /><p>[240]There are also the low-precedence<a name="INDEX-725" /> <a name="INDEX-726" /> <tt class="literal">not</tt> (like the
logical-negation operator, "<tt class="literal">!</tt>") and
the rare <tt class="literal">xor</tt>.</p> </blockquote>

<blockquote><pre class="code">$a &lt; $b and $a = $b;  # but better written as the corresponding if</pre></blockquote>

<p>Then again, you may need <em class="emphasis">more</em> parentheses.
<a name="INDEX-727" />Precedence is a bugaboo. Be sure
to use parentheses to say what you mean, unless you're sure of
the precedence. Nevertheless, since the word forms are very low
precedence, you can generally understand that they cut the expression
into big pieces, doing everything on the left first, and then (if
needed) everything on the right.
</p>

<p>Despite the fact that using logical operators as control structures
can be confusing, sometimes they're the accepted way to write
code. We'll see a common use of the <tt class="literal">or</tt>
operator starting in the next chapter.
</p>

<p>So, using these operators as control structures is part of idiomatic
Perl -- Perl as she is spoken. Used properly, they can make your
code more powerful; otherwise they can make your code unmaintainable.
Don't overuse<a name="INDEX-728" /> <a name="INDEX-729" /> them.<a href="#FOOTNOTE-241">[241]</a><a name="INDEX-730" /> <a name="INDEX-731" /> 
</p><blockquote class="footnote">
<a name="FOOTNOTE-241" /><p>[241]Using these weird forms more than once per month counts as
overuse.</p> </blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_08.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch10_10.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">10.8. Loop Controls</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">10.10. Exercise</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>