<html><head><title>Output with print  (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="ch02_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">2.6. Output with print </h2>

<p>It's generally a good idea to have your program produce some
output; otherwise, someone may think it didn't do anything. The
<tt class="literal">print( )</tt><a name="INDEX-197" /> operator makes this possible. It takes
a scalar argument and puts it out without any embellishment onto
standard output. Unless you've done something odd, this will be
your terminal display. For example:
</p>

<blockquote><pre class="code">print "hello world\n"; # say hello world, followed by a newline

print "The answer is ";
print 6 * 7;
print ".\n";</pre></blockquote>

<p>You can actually give <tt class="literal">print</tt> a series of values,
separated by commas.
</p>

<blockquote><pre class="code">print "The answer is ", 6 * 7, ".\n";</pre></blockquote>

<p>This is actually a <em class="emphasis">list</em>, but we haven't
talked about lists yet, so we'll put that off for later.
</p>

<a name="lperl3-CHP-2-SECT-6.1" /><div class="sect2">
<h3 class="sect2">2.6.1. Interpolation of Scalar Variables into Strings</h3>

<p>When a string literal is double-quoted, it is subject to
<em class="emphasis">variable interpolation<a href="#FOOTNOTE-55">[55]</a></em><a name="INDEX-198" /> <a name="INDEX-199" /> <a name="INDEX-200" /> (besides being checked for backslash
escapes). This means that any scalar variable<a href="#FOOTNOTE-56">[56]</a> name in the string is replaced with its
current value. For example:
</p><blockquote class="footnote"> <a name="FOOTNOTE-55" /><p>[55]This has nothing to
do with mathematical or statistical interpolation.</p>
</blockquote><blockquote class="footnote"> <a name="FOOTNOTE-56" /><p>[56]And
some other variable types, but we won't see those until
later.</p> </blockquote>

<blockquote><pre class="code">$meal = "brontosaurus steak";
$barney = "fred ate a $meal";    # $barney is now "fred ate a brontosaurus steak"
$barney = 'fred ate a ' . $meal; # another way to write that</pre></blockquote>

<p>As you see on the last line above, you can get the same results
without the double quotes. But the double-quoted string is often the
more convenient way to write it.
</p>

<p>If the scalar variable has never been given a value,<a href="#FOOTNOTE-57">[57]</a> the empty
string is used instead:
</p><blockquote class="footnote">
<a name="FOOTNOTE-57" /><p>[57]This is actually the special undefined value,
<tt class="literal">undef</tt>, which we'll see a little later in
this chapter. If warnings are turned on, Perl will complain about
interpolating the undefined value.</p> </blockquote>

<blockquote><pre class="code">$barney = "fred ate a $meat"; # $barney is now "fred ate a "</pre></blockquote>

<p>Don't bother with interpolating if you have just the one lone
variable:
</p>

<blockquote><pre class="code">print "$fred"; # unneeded quote marks
print $fred;   # better style</pre></blockquote>

<p>There's nothing really <em class="emphasis">wrong</em> with putting
quote marks around a lone variable, but the other programmers will
laugh at you behind your back.<a href="#FOOTNOTE-58">[58]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-58" /><p>[58]Well, it may force a
value to be interpreted as a string, rather than a number. In a few
rare cases that may be needed, but nearly always it's just a
waste of typing.</p> </blockquote>

<p><em class="emphasis">Variable interpolation</em> is also known as
<em class="emphasis">double-quote
interpolation</em><a name="INDEX-201" />,
because it happens when double-quote marks (but not single quotes)
are used. It happens for some other strings in Perl, which
we'll mention as we get to them.
</p>

<p>To put a <a name="INDEX-202" />
<a name="INDEX-203" /> <a name="INDEX-204" />real dollar sign into
a double-quoted string, precede the dollar sign with a backslash,
which turns off the dollar sign's special significance:
</p>

<blockquote><pre class="code">$fred = 'hello';
print "The name is \$fred.\n";    # prints a dollar sign
print 'The name is $fred' . "\n"; # so does this</pre></blockquote>

<p>The variable name will be the longest possible variable name that
makes sense at that part of the string. This can be a problem if you
want to follow the replaced value immediately with some constant text
that begins with a letter, digit, or underscore.<a href="#FOOTNOTE-59">[59]</a> As Perl scans
for variable names, it would consider those characters to be
additional name characters, which is not what you want. Perl provides
a delimiter for the variable name in a manner similar to the shell.
Simply enclose the
<em class="emphasis">name</em><a name="INDEX-205" />
<a name="INDEX-206" /> of the variable in a pair of
<a name="INDEX-207" /> <a name="INDEX-208" />curly braces. Or,
you can end that part of the string and start another part of the
string with a concatenation operator:
</p><blockquote class="footnote">
<a name="FOOTNOTE-59" /><p>[59]There are some other characters that may be a problem as well.
If you need a left square bracket or a left curly brace just after a
scalar variable's name, precede it with a backslash. You may
also do that if the variable's name is followed by an
apostrophe or a pair of colons, or you could use the curly-brace
method described in the main text</p> </blockquote>

<blockquote><pre class="code">$what = "brontosaurus steak";
$n = 3;
print "fred ate $n $whats.\n";          # not the steaks, but the value of $whats
print "fred ate $n ${what}s.\n";        # now uses $what
print "fred ate $n $what" . "s.\n";     # another way to do it
print 'fred ate ' . $n . ' ' . $what . "s.\n"; # an especially difficult way</pre></blockquote>

</div>
<a name="lperl3-CHP-2-SECT-6.2" /><div class="sect2">
<h3 class="sect2">2.6.2. Operator Precedence and Associativity</h3>

<p><a name="INDEX-209" />
<a name="INDEX-210" /> <a name="INDEX-211" />
<a name="INDEX-212" /> <a name="INDEX-213" />Operator
precedence determines which operations in a complex group of
operations happen first. For example, in the expression
<tt class="literal">2+3*4</tt>, do we perform the addition first or the
multiplication first? If we did the addition first, we'd get
<tt class="literal">5*4</tt>, or <tt class="literal">20</tt>. But if we did the
multiplication first (as we were taught in math class), we'd
get <tt class="literal">2+12</tt>, or <tt class="literal">14</tt>. Fortunately,
Perl chooses the common mathematical definition, performing the
multiplication first. Because of this, we say multiplication has a
<em class="emphasis">higher precedence</em> than addition.
</p>

<p>You can override the default precedence order by using
<a name="INDEX-214" /> <a name="INDEX-215" />parentheses.
Anything in parentheses is completely computed before the operator
outside of the parentheses is applied (just like you learned in math
class). So if I really want the addition before the multiplication, I
can say <tt class="literal">(2+3)*4</tt>, yielding <tt class="literal">20</tt>.
Also, if I wanted to demonstrate that multiplication is performed
before addition, I could add a decorative but unnecessary set of
parentheses, as in <tt class="literal">2+(3*4)</tt>.
</p>

<p>While precedence is simple for addition and multiplication, we start
running into problems when faced with, say, string concatenation
compared with exponentiation. The proper way to resolve this is to
consult the official, accept-no-substitutes Perl operator precedence
chart, shown in <a href="ch02_03.htm">Table 2-1</a>.<a href="#FOOTNOTE-60">[60]</a> (Note that some of the operators have not yet been
described, and in fact, may not even appear anywhere in this book,
but don't let that scare you from reading about them in the
<em class="emphasis">perlop</em> manpage.)
</p><blockquote class="footnote"> <a name="FOOTNOTE-60" /><p>[60]C
programmers: Rejoice! The operators that are available in both Perl
and C have the same precedence and associativity in both.</p>
</blockquote>

<a name="lperl3-CHP-2-TABLE-2" /><h4 class="objtitle">Table 2-2. Associativity and precedence of operators (highest to lowest) </h4><table border="1">



<tr>
<th>
<p>Associativity</p>
</th>
<th>
<p>Operators</p>
</th>
</tr>


<tr>
<td>
<p><a name="INDEX-216" />left
</p>
</td>
<td>
<p>parentheses and arguments to list operators</p>
</td>
</tr>
<tr>
<td>
<p><a name="INDEX-217" />left
</p>
</td>
<td>
<p><tt class="literal">-&gt;</tt></p>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p><tt class="literal">++</tt> <tt class="literal">--</tt> (autoincrement and
autodecrement)
</p>
</td>
</tr>
<tr>
<td>
<p>right</p>
</td>
<td>
<p><tt class="literal">**</tt></p>
</td>
</tr>
<tr>
<td>
<p>right</p>
</td>
<td>
<p><tt class="literal">\</tt> <tt class="literal">!</tt> <tt class="literal">~</tt>
<tt class="literal">+</tt> <tt class="literal">-</tt> (unary operators)
</p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">=~</tt> <tt class="literal">!~</tt></p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">*</tt> <tt class="literal">/</tt> <tt class="literal">%</tt>
<tt class="literal">x</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">+</tt> <tt class="literal">-</tt> <tt class="literal">.</tt>
(binary operators)
</p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">&lt;&lt;</tt> <tt class="literal">&gt;&gt;</tt></p>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>named unary operators (<tt class="literal">-X</tt> filetests,
<tt class="literal">rand</tt>)
</p>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p><tt class="literal">&lt;</tt> <tt class="literal">&lt;=</tt>
<tt class="literal">&gt;</tt> <tt class="literal">&gt;=</tt>
<tt class="literal">lt</tt> <tt class="literal">le</tt> <tt class="literal">gt</tt>
<tt class="literal">ge</tt> (the "unequal" ones)
</p>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p><tt class="literal">==</tt> <tt class="literal">!=</tt>
<tt class="literal">&lt;=&gt;</tt> <tt class="literal">eq</tt>
<tt class="literal">ne</tt> <tt class="literal">cmp</tt> (the "equal"
ones)
</p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">&amp;</tt></p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">|</tt> <tt class="literal">^</tt></p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">&amp;&amp;</tt></p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">||</tt></p>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p><tt class="literal">..</tt> <tt class="literal">...</tt></p>
</td>
</tr>
<tr>
<td>
<p>right</p>
</td>
<td>
<p><tt class="literal">?:</tt> (ternary)</p>
</td>
</tr>
<tr>
<td>
<p>right</p>
</td>
<td>
<p><tt class="literal">=</tt> <tt class="literal">+=</tt> <tt class="literal">-=</tt>
<tt class="literal">.=</tt> (and similar assignment operators)
</p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">,</tt> <tt class="literal">=&gt;</tt></p>
</td>
</tr>
<tr>
<td>
&nbsp;
</td>
<td>
<p>list operators (rightward)</p>
</td>
</tr>
<tr>
<td>
<p>right</p>
</td>
<td>
<p><tt class="literal">not</tt></p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">and</tt></p>
</td>
</tr>
<tr>
<td>
<p>left</p>
</td>
<td>
<p><tt class="literal">or</tt> <tt class="literal">xor</tt></p>
</td>
</tr>

</table><p>

<p>In the chart, any given operator has higher precedence than all of
the operators listed below it, and lower precedence than all of the
operators listed above it. Operators at the same precedence level
resolve according to rules of <em class="emphasis">associativity</em>
instead.
</p>

<p>Just like precedence, associativity resolves the order of operations
when two operators of the same precedence compete for three operands:
</p>

<blockquote><pre class="code">4 ** 3 ** 2 # 4 ** (3 ** 2), or 4 ** 9 (right associative)
72 / 12 / 3 # (72 / 12) / 3, or 6/3, or 2 (left associative)
36 / 6 * 3  # (36/6)*3, or 18</pre></blockquote>

<p>In the first case, the <tt class="literal">**</tt> operator has right
associativity, so the parentheses are implied on the right.
Comparatively, the <tt class="literal">*</tt> and <tt class="literal">/</tt>
operators have left associativity, yielding a set of implied
parentheses on the left.
</p>

<p>So should you just memorize the precedence chart? No! Nobody actually
does that. Instead, just use parentheses when you don't
remember the order of operations, or when you're too busy to
look in the chart. After all, if you can't remember it without
the parentheses, your <a name="INDEX-218" />maintenance programmer is going to have
the same trouble. So be nice to your maintenance
programmer.<a name="INDEX-219" /> <a name="INDEX-220" /> <a name="INDEX-221" /> <a name="INDEX-222" /> 
</p>

</div>
<a name="lperl3-CHP-2-SECT-6.3" /><div class="sect2">
<h3 class="sect2">2.6.3. Comparison Operators</h3>

<p>For comparing <a name="INDEX-223" />
<a name="INDEX-224" />numbers, Perl has the logical
<a name="INDEX-225" />
<a name="INDEX-226" />comparison
operators that remind you of algebra: <tt class="literal">&lt; &lt;= == &gt;=
&gt; !=</tt>. Each of these returns a <em class="emphasis">true</em>
or <em class="emphasis">false</em> value. We'll find out more about
those return values in the next section. Some of these may be
different than you'd use in other languages. For example,
<tt class="literal">==</tt> is used for equality, not a single
<tt class="literal">=</tt> sign, because that's used for another
purpose in Perl. And <tt class="literal">!=</tt> is used for inequality
testing, because <tt class="literal">&lt;&gt;</tt> is used for another
purpose in Perl. And you'll need <tt class="literal">&gt;=</tt> and
not <tt class="literal">=&gt;</tt> for "greater than or equal
to", because the latter is used for another purpose in Perl. In
fact, nearly every sequence of punctuation is used for something in
Perl.
</p>

<p>For comparing strings, Perl has an equivalent set of
<a name="INDEX-227" />
<a name="INDEX-228" />string comparison operators which look like
funny little words: <tt class="literal">lt</tt> <tt class="literal">le</tt>
<tt class="literal">eq</tt> <tt class="literal">ge</tt> <tt class="literal">gt</tt>
<tt class="literal">ne</tt>. These compare two strings character by
character to see whether they're the same, or whether one comes
first in standard string sorting order. (In ASCII, the capital
letters come before the lowercase letters, so beware.)
</p>

<p>The comparison operators (for both numbers and strings) are given in
<a href="ch02_06.htm">Table 2-3</a>.
</p>

<a name="lperl3-CHP-2-TABLE-3" /><h4 class="objtitle">Table 2-3. Numeric and string comparison operators </h4><table border="1">




<tr>
<th>
<p>Comparison</p>
</th>
<th>
<p>Numeric</p>
</th>
<th>
<p>String</p>
</th>
</tr>


<tr>
<td>
<p>Equal</p>
</td>
<td>
<p><tt class="literal">==</tt></p>
</td>
<td>
<p><tt class="literal">eq</tt></p>
</td>
</tr>
<tr>
<td>
<p>Not equal</p>
</td>
<td>
<p><tt class="literal">!=</tt></p>
</td>
<td>
<p><tt class="literal">ne</tt></p>
</td>
</tr>
<tr>
<td>
<p>Less than</p>
</td>
<td>
<p><tt class="literal">&lt;</tt></p>
</td>
<td>
<p><tt class="literal">lt</tt></p>
</td>
</tr>
<tr>
<td>
<p>Greater than</p>
</td>
<td>
<p><tt class="literal">&gt;</tt></p>
</td>
<td>
<p><tt class="literal">gt</tt></p>
</td>
</tr>
<tr>
<td>
<p>Less than or equal to</p>
</td>
<td>
<p><tt class="literal">&lt;=</tt></p>
</td>
<td>
<p><tt class="literal">le</tt></p>
</td>
</tr>
<tr>
<td>
<p>Greater than or equal to</p>
</td>
<td>
<p><tt class="literal">&gt;=</tt></p>
</td>
<td>
<p><tt class="literal">ge</tt></p>
</td>
</tr>

</table><p>

<p>Here are some example expressions using these comparison operators:</p>

<blockquote><pre class="code">35 != 30 + 5         # false
35 == 35.0           # true
'35' eq '35.0'       # false (comparing as strings)
'fred' lt 'barney'   # false
'fred' lt 'free'     # true
'fred' eq "fred"     # true
'fred' eq 'Fred'     # false
' ' gt ''            # true</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_05.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_07.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">2.5. Scalar Variables</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.7. The if Control Structure</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>