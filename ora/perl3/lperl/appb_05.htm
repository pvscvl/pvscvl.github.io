<html><head><title>Some Important Modules (Learning Perl, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Randal L. Schwartz and Tom Phoenix" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0596001320L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning Perl, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning Perl, 3rd Edition" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appb_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"></a></td><td align="right" valign="top" width="228"><a href="appb_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">B.5. Some Important Modules</h2>

<p>We describe some of the most important features<a href="#FOOTNOTE-403">[403]</a> of the most important modules<a href="#FOOTNOTE-404">[404]</a> in this section. These modules that we discuss
here should generally be found on every machine that has Perl, except
where mentioned. You can always get the latest ones from CPAN.
</p><blockquote class="footnote">
<a name="FOOTNOTE-403" /><p>[403]We're including here merely the most important features
of each module; see the module's own documentation to learn
more.</p> </blockquote><blockquote class="footnote">
<a name="FOOTNOTE-404" /><p>[404]To be sure, there are other important modules whose use is too
complex for most readers of this book, typically because using the
module requires understanding Perl's references or objects.
</p> </blockquote>

<a name="lperl3-APP-B-SECT-5.1" /><div class="sect2">
<h3 class="sect2">B.5.1. The CGI and CGI_Lite Modules</h3>

<p>Many people use Perl to write programs that a web server will run,
generally called <em class="emphasis">CGI program</em>s. The
<tt class="literal">CGI</tt><a name="INDEX-1159" /> module comes with Perl, while the
<tt class="literal">CGI_Lite</tt><a name="INDEX-1160" /> module is available separately from
CPAN. See <a href="appb_16.htm">Section B.16, "The Common Gateway Interface (CGI)"</a> later in this
appendix.
</p>

</div>
<a name="lperl3-APP-B-SECT-5.2" /><div class="sect2">
<h3 class="sect2">B.5.2. The Cwd Module</h3>

<p>Sometimes you need to know what the current working directory's
name is. (Well, you could often use
"<tt class="literal">.</tt>", but maybe you need to save the
name so that you can change back to this directory later.) The
<tt class="literal">Cwd</tt><a name="INDEX-1161" /> module, which comes with Perl, provides
the <tt class="literal">cwd</tt><a name="INDEX-1162" /> function, which you can use to
determine the <a name="INDEX-1163" /> <a name="INDEX-1164" />current working directory.
</p>

<blockquote><pre class="code">use Cwd;

my $directory = cwd;</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.3" /><div class="sect2">
<h3 class="sect2">B.5.3. The Fatal Module</h3>

<p>If you get tired of writing "<tt class="literal">or die</tt>"
after every invocation of <tt class="literal">open</tt> or
<tt class="literal">chdir</tt>, then maybe the
<tt class="literal">Fatal</tt><a name="INDEX-1165" /> module is for you. Just tell it which
functions to work with, and those will be automatically checked for
failure, as if you'd written "<tt class="literal">or
die</tt>" and a suitable message after each one. This
won't affect such calls in someone else's package (that
is, code contained within a module you're using, for example),
so don't use this to fix up poorly written code. It's
just a timesaver, mostly for simple programs in which you don't
need direct control over the error message itself. For example:
</p>

<blockquote><pre class="code">use Fatal qw/ open chdir /;

chdir '/home/merlyn';  # "or die" is now supplied automatically</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.4" /><div class="sect2">
<h3 class="sect2">B.5.4. The File::Basename Module</h3>

<p>We covered this
<a name="INDEX-1166" />
<a name="INDEX-1167" />module in <a href="ch13_01.htm">Chapter 13, "Manipulating Files and Directories"</a>. It's primary uses are to portably pull
the basename or directory name from a full filename:
</p>

<blockquote><pre class="code">use File::Basename;

for (@ARGV) {
  my $basename = basename $_;
  my $dirname = dirname $_;
  print "That's file $basename in directory $dirname.\n";
}</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.5" /><div class="sect2">
<h3 class="sect2">B.5.5. The File::Copy Module</h3>

<p>When you need to copy or move files, the
<tt class="literal">File::Copy</tt><a name="INDEX-1168" />
<a name="INDEX-1169" /> module is for you. (It's
often tempting to simply call a system program to do these things,
but that's not portable.) This module provides the functions
<tt class="literal">move</tt> and <tt class="literal">copy</tt>, which may be
used much as the corresponding system programs would be used:
</p>

<blockquote><pre class="code">use File::Copy;

copy("source", "destination")
  or die "Can't copy 'source' to 'destination': $!";</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.6" /><div class="sect2">
<h3 class="sect2">B.5.6. The File::Spec Module</h3>

<p>When you need to manipulate a
<a name="INDEX-1170" />filename (more formally called
a
"<a name="INDEX-1171" />file
specification"), it's generally more portable and
reliable to use the
<tt class="literal">File::Spec</tt><a name="INDEX-1172" /> module than to do the work yourself from
Perl. For example, you can use the <tt class="literal">catfile</tt>
function to put together a directory name and a filename to produce a
long filename (as we saw in <a href="ch13_01.htm">Chapter 13, "Manipulating Files and Directories"</a>), but you
don't have to know whether the system your program is running
on uses a forward slash or some other character to separate those. Or
you could use the <tt class="literal">curdir</tt> function to get the name
of the current directory ("<tt class="literal">.</tt>", on Unix
systems).
</p>

<p>The <tt class="literal">File::Spec</tt> module is object-oriented, but you
don't need to understand objects to use it. Just call each
function ("method", really) by using
<tt class="literal">File::Spec</tt> and a small arrow before the
function's name, like this:
</p>

<blockquote><pre class="code">use File::Spec;

my $current_directory = File::Spec-&gt;curdir;
opendir DOT, $current_directory
  or die "Can't open current directory '$current_directory': $!";</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.7" /><div class="sect2">
<h3 class="sect2">B.5.7. The Image::Size Module</h3>

<p>When you have an <a name="INDEX-1173" />
<a name="INDEX-1174" />image file, you'll often want
to know what its height and width are. (This is handy for making
programs that write HTML, if you wish for an IMG tag to indicate the
image's dimensions.) The
<tt class="literal">Image::Size</tt><a name="INDEX-1175" /> module, which is available from CPAN,
understands the common GIF, JFIF (JPEG), and PNG image types, and
some others. For example:
</p>

<blockquote><pre class="code">use Image::Size;

# Get the size of fred.png
my($fred_height, $fred_width) = imgsize("fred.png");
die "Couldn't get the size of the image"
  unless defined $fred_height;</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.8" /><div class="sect2">
<h3 class="sect2">B.5.8. The Net::SMTP Module</h3>

<p>If you want your program to be able to send
<a name="INDEX-1176" />email through an
<a name="INDEX-1177" />SMTP server (which is the way most of
us send email these days, whether you knew that or not), you may use
the <tt class="literal">Net::SMTP</tt><a name="INDEX-1178" /> module to do the work.<a href="#FOOTNOTE-405">[405]</a> This module, which is
available from CPAN, is object-oriented, but you may simply follow
the syntax to use it. You will need to change the name of your SMTP
host and the other items to make this work on your system. Your
system administrator or local expert can tell you what to use. For
example:
</p><blockquote class="footnote">
<a name="FOOTNOTE-405" /><p>[405]Yes, this means that you are now able to use Perl to send spam.
Please don't. </p> </blockquote>

<blockquote><pre class="code">use Net::SMTP;

my $from = 'YOUR_ADDRESS_GOES_HERE';         # maybe fred@bedrock.edu
my $site = 'YOUR_SITE_NAME_GOES_HERE';       # maybe bedrock.edu
my $smtp_host = 'YOUR_SMTP_HOST_GOES_HERE';  # maybe mail or mailhost
my $to = 'president@whitehouse.gov';

my $smtp = Net::SMTP-&gt;new($smtp_host, Hello =&gt; $site);

$smtp-&gt;mail($from);
$smtp-&gt;to($to);
$smtp-&gt;data( );

$smtp-&gt;datasend("To: $to\n");
$smtp-&gt;datasend("Subject: A message from my Perl program.\n");
$smtp-&gt;datasend("\n");
$smtp-&gt;datasend("This is just to let you know,\n");
$smtp-&gt;datasend("I don't care what those other people say about you,\n");
$smtp-&gt;datasend("I still think you're doing a great job.\n");
$smtp-&gt;datasend("\n");
$smtp-&gt;datasend("Have you considered enacting a law naming Perl \n");
$smtp-&gt;datasend("the national programming language?\n");

$smtp-&gt;dataend( );                             # Not datasend!
$smtp-&gt;quit;</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.9" /><div class="sect2">
<h3 class="sect2">B.5.9. The POSIX Module</h3>

<p>If you need access to the POSIX (IEEE Std 1003.1) functions, the
<tt class="literal">POSIX</tt><a name="INDEX-1179" /> module is for you. It provides many
functions that C programmers may be used to, such as trigonometric
functions (<tt class="literal">asin</tt>, <tt class="literal">cosh</tt>), general
mathematical functions (<tt class="literal">floor</tt>,
<tt class="literal">frexp</tt>), character-identification functions
(<tt class="literal">isupper</tt>, <tt class="literal">isalpha</tt>), low-level
IO functions (<tt class="literal">creat</tt>, <tt class="literal">open</tt>), and
some others (<tt class="literal">asctime</tt>, <tt class="literal">clock</tt>).
You'll probably want to call each of these with its
"full" name; that is, with <tt class="literal">POSIX</tt> and a
pair of colons as a prefix to the function's name:
</p>

<blockquote><pre class="code">use POSIX;

print "Please enter a number: ";
chomp(my $str = &lt;STDIN&gt;);

$! = 0;  # Clear out the error indicator
my($num, $leftover) = POSIX::strtod($str);

if ($str eq '') {
  print "That string was empty!\n";
} elsif ($leftover) {
  my $remainder = substr $str, -$leftover;
  print "The string '$remainder' was left after the number $num.\n";
} elsif ($!) {
  print "The conversion function complained: $!\n";
} else {
  print "The seemingly-valid number was $num.\n";
}</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.10" /><div class="sect2">
<h3 class="sect2">B.5.10. The Sys::Hostname Module</h3>

<p>The
<tt class="literal">Sys::Hostname</tt><a name="INDEX-1180" /> module provides the
<tt class="literal">hostname</tt><a name="INDEX-1181" /> function, which will be the network
name of your machine, if that can be determined. (If it can't
be determined, perhaps because your machine is not on the Internet or
not properly configured, the function will die automatically;
there's no point in using <tt class="literal">or die</tt> here.) For
example:
</p>

<blockquote><pre class="code">use Sys::Hostname;
my $host = hostname;
print "This machine is known as '$host'.\n";</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.11" /><div class="sect2">
<h3 class="sect2">B.5.11. The Text::Wrap Module</h3>

<p>The <tt class="literal">Text::Wrap</tt><a name="INDEX-1182" />
<a name="INDEX-1183" /> module supplies the
<tt class="literal">wrap</tt><a name="INDEX-1184" /> function, which lets you implement
simple <a name="INDEX-1185" />word-wrapping. The first
two parameters specify the indentation of the first line and the
others, respectively; the remaining parameters make up the
paragraph's text:
</p>

<blockquote><pre class="code">use Text::Wrap;

my $message = "This is some sample text which may be longer " .
  "than the width of your output device, so it needs to " .
  "be wrapped to fit properly as a paragraph. ";
$message x= 5;

print wrap("\t", "", "$message\n");</pre></blockquote>

</div>
<a name="lperl3-APP-B-SECT-5.12" /><div class="sect2">
<h3 class="sect2">B.5.12. The Time::Local Module</h3>

<p><a name="INDEX-1186" />If you have a time (for example, from the
<tt class="literal">time</tt> function) that needs to be converted to a
list of year, month, day, hour, minute, and second values, you can do
that with Perl's built-in <tt class="literal">localtime</tt> function
in a list context.<a href="#FOOTNOTE-406">[406]</a> (In
a scalar context, that gives a nicely formatted string representing
the time, which is more often what you'd want.) But if you need
to go in the other direction, you may use the
<tt class="literal">timelocal</tt><a name="INDEX-1187" /> function from the
<tt class="literal">Time::Local</tt> module instead. It's important
to note that the value of <tt class="literal">$mon</tt> and
<tt class="literal">$year</tt> for January 2004 are not
<tt class="literal">1</tt> and <tt class="literal">2004</tt> as you might expect,
so be sure to read the documentation before you use this module. For
example:
</p><blockquote class="footnote"> <a name="FOOTNOTE-406" /><p>[406]The actual return value of
<tt class="literal">localtime</tt> in a list context is a little different
than you might expect; see the documentation.</p> </blockquote>

<a name="INDEX-1188" /><blockquote><pre class="code">use Time::Local;

my $time = timelocal($sec, $min, $hr, $day, $mon, $year);</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appb_04.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="appb_06.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">B.4. Extending Perl's Functionality</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">B.6. Pragmas</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>