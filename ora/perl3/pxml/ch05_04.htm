<html><head><title>Drivers for Non-XML Sources (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">5.4. Drivers for Non-XML Sources</h2>

<p>The<a name="INDEX-401" /> <a name="INDEX-402" /> filter example used a file containing
an XML document as an input source. This example shows just one of
many ways to use SAX. Another popular use is to read data from a
driver, which is a program that generates a stream of data from a
non-XML source, such as a database. A SAX driver converts the data
stream into a sequence of SAX events that we can process the way we
did previously. What makes this so cool is that we can use the same
code regardless of where the data came from. The SAX event stream
abstracts the data and markup so we don't have to
worry about it. Changing the program to work with files or other
drivers would be trivial.
</p>

<p>To see a driver in action, we will write a program that uses Ilya
<a name="INDEX-403" />Sterin's module
<tt class="literal">XML::SAXDriver::Excel</tt><a name="INDEX-404" /> to convert <a name="INDEX-405" />Microsoft Excel
spreadsheets into XML documents. This example shows how a data stream
can be processed in a pipeline fashion to ultimately arrive in the
form we want it. A <tt class="literal">Spreadsheet::ParseExcel</tt> object
reads the file and generates a generic data stream, which an
<tt class="literal">XML::SAXDriver::Excel</tt> object translates into a SAX
event stream. This stream is then output as XML by our program.
</p>

<p>Here's a test Excel spreadsheet, represented as a
table:
</p>

<a name="ch05-5-fm2xml" /><table border="1">




<tr>
<td>
&nbsp;
</td>
<td>
<p>A</p>
</td>
<td>
<p>B</p>
</td>
</tr>
<tr>
<td>
<p>1</p>
</td>
<td>
<p>baseballs</p>
</td>
<td>
<p>55</p>
</td>
</tr>
<tr>
<td>
<p>2</p>
</td>
<td>
<p>tennisballs</p>
</td>
<td>
<p>33</p>
</td>
</tr>
<tr>
<td>
<p>3</p>
</td>
<td>
<p>pingpong balls</p>
</td>
<td>
<p>12</p>
</td>
</tr>
<tr>
<td>
<p>4</p>
</td>
<td>
<p>footballs</p>
</td>
<td>
<p>77</p>
</td>
</tr>

</table><p>

<p>The SAX driver will create new elements for us, giving us the names
in the form of arguments to handler method calls. We will just print
them out as they come and see how the driver structures the document.
<a href="ch05_04.htm">Example 5-6</a> is a simple program that does this.
</p>

<a name="perlxml-CHP-5-EX-6" /><div class="example">
<h4 class="objtitle">Example 5-6. Excel parsing program </h4>
<blockquote><pre class="code">use XML::SAXDriver::Excel;

# get the file name to process
die( "Must specify an input file" ) unless( @ARGV );
my $file = shift @ARGV;
print "Parsing $file...\n";

# initialize the parser
my $handler = new Excel_SAX_Handler;
my %props = ( Source =&gt; { SystemId =&gt; $file },
              Handler =&gt; $handler );
my $driver = XML::SAXDriver::Excel-&gt;new( %props );

# start parsing
$driver-&gt;parse( %props );

# The handler package we define to print out the XML
# as we receive SAX events.
package Excel_SAX_Handler;

# initialize the package
sub new {
    my $type = shift;
    my $self = {@_};
    return bless( $self, $type );
}

# create the outermost element
sub start_document {
    print "&lt;doc&gt;\n";
}

# end the document element
sub end_document {
    print "&lt;/doc&gt;\n";
}

# handle any character data

sub characters {
    my( $self, $properties ) = @_;
    my $data = $properties-&gt;{'Data'};
    print $data if defined($data);
}

# start a new element, outputting the start tag
sub start_element {
    my( $self, $properties ) = @_;
    my $name = $properties-&gt;{'Name'};
    print "&lt;$name&gt;";
}

# end the new element
sub end_element {
    my( $self, $properties ) = @_;
    my $name = $properties-&gt;{'Name'};
    print "&lt;/$name&gt;";
}</pre></blockquote>
</div>

<p>As you can see, the handler methods look very similar to those used
in the previous SAX example. All that has changed is what we do with
the arguments. Now let's see what the output looks
like when we run it on the test file:
</p>

<blockquote><pre class="code">&lt;doc&gt;

&lt;records&gt;
        &lt;record&gt;
                &lt;column1&gt;baseballs&lt;/column1&gt;
                &lt;column2&gt;55&lt;/column2&gt;
        &lt;/record&gt;
        &lt;record&gt;
                &lt;column1&gt;tennisballs&lt;/column1&gt;
                &lt;column2&gt;33&lt;/column2&gt;
        &lt;/record&gt;
        &lt;record&gt;
                &lt;column1&gt;pingpong balls&lt;/column1&gt;
                &lt;column2&gt;12&lt;/column2&gt;
        &lt;/record&gt;
        &lt;record&gt;
                &lt;column1&gt;footballs&lt;/column1&gt;
                &lt;column2&gt;77&lt;/column2&gt;
        &lt;/record&gt;
        &lt;record&gt;
Use of uninitialized value in print at conv line 39.
                &lt;column1&gt;&lt;/column1&gt;
Use of uninitialized value in print at conv line 39.
                &lt;column2&gt;&lt;/column2&gt;
        &lt;/record&gt;
&lt;/records&gt;&lt;/doc&gt;</pre></blockquote>

<p>The driver did most of the work in creating elements and formatting
the data. All we did was output the packages it gave us in the form
of method calls. It wrapped the whole document in
<tt class="literal">&lt;records&gt;</tt>, making our use of
<tt class="literal">&lt;doc&gt;</tt> superfluous. (In the next revision of
the code, we'll make the <tt class="literal">start_document(
)</tt> and <tt class="literal">end_document( )</tt> methods output
nothing.) Each row of the spreadsheet is encapsulated in a
<tt class="literal">&lt;record&gt;</tt> element. Finally, the two columns
are differentiated with <tt class="literal">&lt;column1&gt;</tt> and
<tt class="literal">&lt;column2&gt;</tt> labels. All in all, not a bad job.
</p>

<p>You can see that with a minimal amount of effort on our part, we have
harnessed the power of SAX to do some complex work converting from
one format to another. The driver actually automates the conversion,
but it gives us enough flexibility in interpreting the events so that
we can reject bad data (the empty row, for example) or rename
elements. We can even perform complex processing, such as adding up
values or sorting<a name="INDEX-406" /> <a name="INDEX-407" /> rows.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_03.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch05_05.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">5.3. External Entity Resolution</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">5.5. A Handler Base Class</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="index.htm"></map>

</body></html>