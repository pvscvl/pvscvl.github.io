<html><head><title>XML::Parser's Tree Mode (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch06_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">6.3. XML::Parser's Tree Mode</h2>

<p>We used <tt class="literal">XML::Parser</tt><a name="INDEX-499" />
<a name="INDEX-500" />
in <a href="ch04_01.htm">Chapter 4, "Event Streams"</a> as an event generator to drive stream
processing programs, but did you know that this same module can also
generate tree data structures? We've modified our
preference-reader program to use <tt class="literal">XML::Parser</tt> for
parsing and building a tree, as shown in <a href="ch06_03.htm">Example 6-4</a>. 
</p>

<a name="perlxml-CHP-6-EX-4" /><div class="example">
<h4 class="objtitle">Example 6-4. Using XML::Parser to build a tree </h4>
<blockquote><pre class="code"># initialize parser and read the file
use XML::Parser;
$parser = new XML::Parser( Style =&gt; 'Tree' );
my $tree = $parser-&gt;parsefile( shift @ARGV );

# dump the structure
use Data::Dumper;
print Dumper( $tree );</pre></blockquote>
</div>

<p>When run on the file in <a href="ch06_03.htm">Example 6-4</a>, it gives this
output:
</p>

<blockquote><pre class="code">$tree = [ 
          'preferences', [ 
            {}, 0, '\n', 
            'font', [ 
              { 'role' =&gt; 'console' }, 0, '\n',
              'size', [ {}, 0, '9' ], 0, '\n', 
              'fname', [ {}, 0, 'Courier' ], 0, '\n'
            ], 0, '\n',
            'font', [ 
              { 'role' =&gt; 'default' }, 0, '\n',
              'fname', [ {}, 0, 'Times New Roman' ], 0, '\n',
              'size', [ {}, 0, '14' ], 0, '\n'
            ], 0, '\n', 
            'font', [ 
               { 'role' =&gt; 'titles' }, 0, '\n',
               'size', [ {}, 0, '10' ], 0, '\n',
               'fname', [ {}, 0, 'Helvetica' ], 0, '\n',
            ], 0, '\n',
          ]
        ];</pre></blockquote>

<p>This structure is more complicated than the one we got from
<tt class="literal">XML::Simple</tt>; it tries to preserve everything,
including node type, order of nodes, and mixed text. Each node is
represented by one or two items in a list. Elements require two
items: the element name followed by a list of its contents. Text
nodes are encoded as the number 0 followed by their values in a
string. All attributes for an element are stored in a hash as the
first item in the element's content list. Even the
whitespace between elements has been saved, represented as
<tt class="literal">0</tt>, <tt class="literal">\n</tt>. Because lists are used
to contain element content, the order of nodes is preserved. This
order is important for some XML documents, such as books or
animations in which elements follow a sequence.
</p>

<p><tt class="literal">XML::Parser</tt> cannot output XML from this data
structure like <tt class="literal">XML::Simple</tt> can. For a complete,
bidirectional solution, you should try something object oriented.
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch06_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">6.2. XML::Simple</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">6.4. XML::SimpleObject</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="index.htm"></map>

</body></html>