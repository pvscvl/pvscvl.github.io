<html><head><title>An XML Recap (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>




<h1 class="chapter">Chapter 2. An XML Recap</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch02_01.htm">A Brief History of XML</a><br />
<a href="ch02_02.htm">Markup, Elements, and Structure</a><br />
<a href="ch02_03.htm">Namespaces</a><br />
<a href="ch02_04.htm">Spacing</a><br />
<a href="ch02_05.htm">Entities</a><br />
<a href="ch02_06.htm">Unicode, Character Sets, and Encodings</a><br />
<a href="ch02_07.htm">The XML Declaration</a><br />
<a href="ch02_08.htm">Processing Instructions and Other Markup</a><br />
<a href="ch02_09.htm">Free-Form XML and Well-Formed Documents</a><br />
<a href="ch02_10.htm">Declaring Elements and Attributes</a><br />
<a href="ch02_11.htm">Schemas</a><br />
<a href="ch02_12.htm">Transformations</a><br /></p></div>


<p><a name="INDEX-43" />XML<a name="INDEX-44" /> is a revolutionary (and evolutionary)
markup language. It combines the generalized markup power of
<a name="INDEX-45" /> <a name="INDEX-46" />SGML with the simplicity
of free-form markup and well-formedness rules. Its unambiguous
structure and predictable syntax make it a very easy and attractive
format to process with computer programs.
</p>

<p>You are free, with XML, to design your own <a name="INDEX-47" />markup language that best fits your
data. You can select element names that make sense to you, rather
than use tags that are overloaded and presentation-heavy. If you
like, you can formalize the language by using element and attribute
declarations in the <a name="INDEX-48" /> <a name="INDEX-49" />DTD.
</p>

<p>XML has syntactic shortcuts such as entities, comments, processing
instructions, and CDATA sections. It allows you to group elements and
attributes by namespace to further organize the vocabulary of your
documents. Using the <tt class="literal">xml:space</tt> attribute can
regulate whitespace, sometimes a tricky issue in markup in which
human readability is as important as correct formatting.
</p>

<p>Some very useful technologies are available to help you maintain and
mutate your documents. Schemas, like DTDs, can measure the validity
of XML as compared to a canonical model. Schemas go even further by
enforcing patterns in character data and improving content model
syntax. XSLT is a rich language for transforming documents into
different forms. It could be an easier way to work with XML than
having to write a program, but isn't always.
</p>

<p>This chapter gives a quick recap of XML, where it came from, how
it's structured, and how to work with it. If you
choose to skip this chapter (because you already know XML or because
you're impatient to start writing code),
that's fine; just remember that
it's here if you need it.
</p>


<div class="sect1"><a name="perlxml-CHP-2-SECT-1" />
<h2 class="sect1">2.1. A Brief History of XML</h2>

<p>Early text processing was closely tied to the machines that displayed
it. Sophisticated formatting was tied to a particular device -- or
rather, a class of devices called printers.
</p>

<p>Take <a name="INDEX-50" />troff, for example. Troff was a very
popular text formatting language included in most Unix distributions.
It was revolutionary because it allowed high-quality formatting
without a typesetting machine.
</p>

<p>Troff mixes formatting instructions with data. The instructions are
symbols composed of characters, with a special syntax so a troff
interpreter can tell the two apart. For example, the symbol
<tt class="literal">\fI</tt> changes the current font style to italic.
Without the backslash character, it would be treated as data. This
mixture of instructions and data is called
<em class="emphasis">markup</em>.
</p>

<p>Troff can be even more detailed than that. The instruction
<tt class="literal">.vs</tt> <tt class="literal">18p</tt> tells the formatter to
insert 18 points of vertical space at whatever point in the document
where the instruction appears. Beyond aesthetics, we
can't tell just by looking at it what purpose this
spacing serves; it gives a very specific instruction to the processor
that can't be interpreted in any other way. This
instruction is fine if you only want to prepare a document for
printing in a specific style. If you want to make changes, though, it
can be quite painful.
</p>

<p>Suppose you've marked up a book in troff so that
every newly defined term is in boldface. Your document has thousands
of bold font instructions in it. You're happy and
ready to send it to the printer when suddenly, you get a call from
the design department. They tell you that the design has changed and
they now want the new terms to be formatted as italic. Now you have a
problem. You have to turn every bold instruction for a new term into
an italic instruction.
</p>

<p>Your first thought is to open the document in your editor and do a
search-and-replace maneuver. But, to your horror, you realize that
new terms aren't the only places where you used bold
font instructions. You also used them for emphasis and for proper
nouns, meaning that a global replace would also mangle these
instances, which you definitely don't want. You can
change the right instructions only by going through them one at a
time, which could take hours, if not days.
</p>

<p>No matter how smart you make a formatting language like troff, it
still has the same problem: it's inherently
presentational. A
<em class="emphasis">presentational</em><a name="INDEX-51" /> markup language describes
content in terms of how to format it. Troff specifies details about
fonts and spacing, but it never tells you what something is. Using
troff makes the document less useful in some ways.
It's hard to search through troff and come back with
the last paragraph of the third section of a book, for example. The
presentational markup gets in the way of any task other than its
specific purpose: to format the document for printing.
</p>

<p>We can characterize troff, then, as a <em class="emphasis">destination
format</em><a name="INDEX-52" />. It's not good for
anything but a specific end purpose. What other kind of format could
there be? Is there an "origin"
format -- that is, something that doesn't dictate
any particular formatting but still packages the data in a useful
way? People began to ask this key question in the late 1960s when
they devised the concept of <em class="emphasis">generic
coding</em><a name="INDEX-53" />: marking up content in a
presentation-agnostic way, using descriptive tags rather than
formatting instructions.
</p>

<p>The <a name="INDEX-54" /> <a name="INDEX-55" />Graphic
Communications Association (GCA) started a project to explore this
new area called GenCode, which develops ways to encode documents in
generic tags and assemble documents from multiple pieces -- a
precursor to hypertext. IBM's
<a name="INDEX-56" /> <a name="INDEX-57" />Generalized Markup Language
(GML), developed by Charles <a name="INDEX-58" />Goldfarb, Edward
<a name="INDEX-59" />Mosher, and
Raymond <a name="INDEX-60" />Lorie, built on this concept.<a href="#FOOTNOTE-3">[3]</a> As a
result of this work, IBM could edit, view on a terminal, print, and
search through the same source material using different programs. You
can imagine that this benefit would be important for a company that
churned out millions of pages of documentation per year.
</p><blockquote class="footnote">
<a name="FOOTNOTE-3" /><p>[3]Cute fact: the initials of these researchers also spell out
"GML."</p> </blockquote>

<p>Goldfarb went on to lead a standards team at the
<a name="INDEX-61" /> <a name="INDEX-62" />American National
Standards Institute (ANSI) to make the power of GML available to the
world. Building on the GML and GenCode projects, the committee
produced the Standard Generalized Markup Language (SGML). Quickly
adopted by the U.S. Department of Defense and the Internal Revenue
Service, SGML proved to be a big success. It became an international
standard when ratified by the ISO in 1986. Since then, many
publishing and processing packages and tools have been developed.
</p>

<p>Generic coding was a breakthrough for digital content. Finally,
content could be described for what it was, instead of how to display
it. Something like this looks more like a database than a
word-processing file:
</p>

<blockquote><pre class="code">&lt;personnel-record&gt;
  &lt;name&gt;
    &lt;first&gt;Rita&lt;/first&gt;
    &lt;last&gt;Book&lt;/last&gt;
  &lt;/name&gt;
  &lt;birthday&gt;
    &lt;year&gt;1969&lt;/year&gt;
    &lt;month&gt;4&lt;/month&gt;
    &lt;day&gt;23&lt;/day&gt;
  &lt;/birthday&gt;
&lt;/personnel-record&gt;</pre></blockquote>

<p>Notice the lack of presentational information. You can format the
name any way you want: first name then last name, or last name first,
with a comma. You could format the date in American style (4/23/1969)
or European (23/4/1969) simply by specifying whether the
<tt class="literal">&lt;month&gt;</tt> or <tt class="literal">&lt;day&gt;</tt>
element should present its contents first. The document
doesn't dictate its use, which makes it useful as a
source document for multiple destinations.
</p>

<p>In spite of its revolutionary capabilities, SGML never really caught
on with small companies the way it did with the big ones. Software is
expensive and bulky. It takes a team of developers to set up and
configure a production environment around SGML. SGML feels
bureaucratic, confusing, and resource-heavy. Thus, SGML in its
original form was not ready to take the world by storm.
</p>

<p>"Oh really," you say.
"Then what about HTML? Isn't it
true that <a name="INDEX-63" />HTML is an application of
SGML?" HTML, that celebrity of the Internet, the
harbinger of hypertext and workhorse of the <a name="INDEX-64" />World
Wide Web, is indeed an application of SGML. By application, we mean
that it is a markup language derived with the rules of SGML. SGML
isn't a markup language, but a toolkit for designing
your own descriptive markup language. Besides HTML, languages for
encoding technical documentation, IRS forms, and battleship manuals
are in use.
</p>

<p>HTML is indeed successful, but it has limitations.
It's a very small language, and not very
descriptive. It is closer to troff in function than to
<a name="INDEX-65" />DocBook and other
SGML applications. It has tags like <tt class="literal">&lt;i&gt;</tt> and
<tt class="literal">&lt;b&gt;</tt> that change the font style without
saying why. Because HTML is so limited and at least partly
presentational, it doesn't represent an overwhelming
success for SGML, at least not in spirit. Instead of bringing the
power of generic coding to the people, it brought another one-trick
pony, in which you could display your content in a particular venue
and couldn't do much else with it.
</p>

<p>Thus, the standards folk decided to try again and see if they
couldn't arrive at a compromise between the
descriptive power of SGML and the simplicity of HTML. They came up
with the Extensible Markup Language (XML). The
"X" stands for
"extensible," pointing out the
first obvious difference from HTML, which is that some people think
that "X" is a cooler-sounding
letter than "E" when used in an
acronym. The second and more relevant difference is that your
documents don't have to be stuck in the anemic tag
set of HTML. You can extend the tag namespace to be as descriptive as
you want -- as descriptive, even, as SGML. Voil&agrave;! The
bridge is built.
</p>

<p>By all accounts, XML is a smashing success. It has lived up to the
hype and keeps on growing: XML-RPC, XHTML, SVG, and DocBook XML are
some of its products. It comes with several accessories, including
XSL for formatting, XSLT for transforming, XPath for searching, and
XLink for linking. Much of the standards work is under the auspices
of the <a name="INDEX-66" /> <a name="INDEX-67" />World Wide Web Consortium (W3C), an
organization whose members include Microsoft, Sun, IBM, and many
academic and public institutions.
</p>

<p>The W3C's mandate is to research and foster new
technology for the Internet. That's a rather broad
statement, but if you visit their site at <a href="../../../../../../www.w3.org/">http://www.w3.org/</a> you'll
see that they cover a lot of bases. The W3C doesn't
create, police, or license standards. Rather, they make
recommendations that developers are encouraged, but not required, to
follow.<a href="#FOOTNOTE-4">[4]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-4" /><p>[4]When a trusted body like the W3C makes a
recommendation, it often has the effect of a law; many developers
begin to follow the recommendation upon its release, and developers
who hope to write software that is compatible with everyone
else's (which is the whole point behind standards
like XML) had better follow the recommendation as well.</p>
</blockquote>

<p>However, the system remains open enough to allow healthy dissent,
such as the recent and interesting case of XML Schema, a W3C standard
that has generated controversy and competition.
We'll examine this particular story further in <a href="ch03_01.htm">Chapter 3, "XML Basics: Reading and Writing"</a>. It's strong enough to be
taken seriously, but loose enough not to scare people away. The
recommendations are always available to the public.
</p>

<p>Every developer should have working knowledge of XML, since
it's the universal packing material for data, and so
many programs are all about crunching data. The rest of this chapter
gives a quick introduction<a name="INDEX-68" /> to XML<a name="INDEX-69" /> for developers.
</p>

</div>
























<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_06.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">1.6. XML Gotchas</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">2.2. Markup, Elements, and Structure</td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="index.htm"></map>

</body></html>