<html><head><title>XML Programming Tools  (Perl and XML)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Erik T. Ray and Jason McIntosh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="059600205XL" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Perl and XML" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl &amp; XML" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr></table></div>



<h2 class="sect1">9.3. XML Programming Tools </h2>

<p>Now<a name="INDEX-742" /> <a name="INDEX-743" /> <a name="INDEX-744" /> we'll cover
software that performs a somewhat inverse role compared to the ground
we just covered. Instead of giving you Perl-lazy ways to work with
XML documents, it uses XML standards to make things easier for a task
that doesn't explicitly involve XML. Recently, some
key folk in the community from the
<em class="emphasis">perl-xml</em><a name="INDEX-745" /> mailing list have been seeking a
mini-platform of universal data handling in Perl with SAX at its
core. Some very interesting (and useful) examples have been born from
this research, including Ilya <a name="INDEX-746" />Sterin's
<tt class="literal">XML::SAXDriver::Excel</tt> and
<tt class="literal">XML::SAXDriver::CSV</tt>, and Matt
<a name="INDEX-747" />Sergeant's
<tt class="literal">XML::Generator::DBI</tt>. All three modules share the
ability to take a data format -- Microsoft Excel files,
Comma-Separated Value files, and SQL databases,
respectively -- and wrap a SAX API around it (the same sort
covered in <a href="ch05_01.htm">Chapter 5, "SAX"</a>, so that any programmer can
merrily pretend that the format is as well behaved and manageable as
all the other XML documents they've seen (even if
the underlying module is quietly performing acrobatics akin to
medicating cats).
</p>

<p>We'll look more closely at one of these tools, as
its subject matter has some interesting implications involving recent
developments, before we move on to this chapter's
final section.
</p>

<a name="perlxml-CHP-9-SECT-3.1" /><div class="sect2">
<h3 class="sect2">9.3.1. XML::Generator::DBI </h3>

<p><tt class="literal">XML::Generator::DBI</tt><a name="INDEX-748" /> is a fine example of a <em class="emphasis">glue
module</em>, a simple piece of software whose only job is to
take two existing (but not entirely unrelated) pieces of software and
let them talk to one another. In this case, when you construct an
object of this class, you hand it your additional objects: a
DBI-flavored database handle and a SAX-speaking handler object.
</p>

<p><tt class="literal">XML::Generator::DBI</tt> does not know or care how or
where the objects came from, but only trusts that they respond to the
standard method calls of their respective families (either DBI, SAX,
or SAX2). Then you can call an <tt class="literal">execute</tt> method on
the <tt class="literal">XML::Generator::DBI</tt> object with an ordinary
SQL statement, much as you would with a DBI-created database handle.
</p>

<p>The following example shows this module in action. The SAX handler in
question is an instance of Michael Koehne's
<tt class="literal">XML::Handler::YAWriter</tt><a name="INDEX-749" /> module, a pleasantly configurable module
that turns SAX events into textual output. Using this program, we can
turn, say, a SQL table of CDs into well-formed XML and then have it
printed to standard output:
</p>

<blockquote><pre class="code">#!/usr/bin/perl

use warnings;
use strict;

use XML::Generator::DBI;
use XML::Handler::YAWriter;

use DBI;

my $ya = XML::Handler::YAWriter-&gt;new(AsFile =&gt; "-");
my $dbh = DBI-&gt;connect("dbi:mysql:dbname=test", "jmac", "");
my $generator = XML::Generator::DBI-&gt;new(
                               Handler =&gt; $ya,
                               dbh =&gt; $dbh
                               );
my $sql = "select * from cds";

$generator-&gt;execute($sql);</pre></blockquote>

<p>The result is this:</p>

<blockquote><pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;database&gt;
 &lt;select query="select * from cds"&gt;
  &lt;row&gt;
   &lt;id&gt;1&lt;/id&gt;
   &lt;artist&gt;Donald and the Knuths&lt;/artist&gt;
   &lt;title&gt;Greatest Hits Vol. 3.14159&lt;/title&gt;
   &lt;genre&gt;Rock&lt;/genre&gt;
  &lt;/row&gt;
  &lt;row&gt;
   &lt;id&gt;2&lt;/id&gt;
   &lt;artist&gt;The Hypnocrats&lt;/artist&gt;
   &lt;title&gt;Cybernetic Grandmother Attack&lt;/title&gt;
   &lt;genre&gt;Electronic&lt;/genre&gt;
  &lt;/row&gt;
  &lt;row&gt;
   &lt;id&gt;3&lt;/id&gt;
   &lt;artist&gt;The Sam Handwich Quartet&lt;/artist&gt;
   &lt;title&gt;Handwich a la Yogurt&lt;/title&gt;
   &lt;genre&gt;Jazz&lt;/genre&gt;
  &lt;/row&gt;
 &lt;/select&gt;
&lt;/database&gt;</pre></blockquote>

<p>This example isn't very interesting, but it looks
good in print. The point is that we didn't have to
use YAWriter. We could have used any SAX handler Perl package on our
system, including ones we wrote ourselves, and tossed them into the
mix when baking a new <tt class="literal">XML::Generator::DBI</tt> object.
Given the same database table as the example above used, when the
<tt class="literal">$genenerator</tt> object's
<tt class="literal">execute</tt> method is called, it would act as if it
had just parsed the previous XML document (modulo the whitespace that
YAWriter inserted to make things more human-readable). It would act
this way even though the actual source isn't an XML
document at all, but a database table.
</p>

</div>
<a name="perlxml-CHP-9-SECT-3.2" /><div class="sect2">
<h3 class="sect2">9.3.2. Further Ruminations on DBI and SAX </h3>

<p>While we're on the subject, let's
digress down the path of <a name="INDEX-750" /> <a name="INDEX-751" />DBI and <a name="INDEX-752" />SAX, which may have more in common than
mutual utility in data management.
</p>

<p>The main reason why the Perl DBI earned its position as the
preeminent Perl database interface involves its architecture. When
installing DBI, one must obtain two separate pieces: DBI.pm contains
all the code behind the DBI API and its documentation, but it alone
won't let you drive a database with Perl; you also
need at least one DBD module that is suitable to the type of database
you plan to use. <a name="INDEX-753" />CPAN has many of these modules to choose
from, <tt class="literal">DBD::MySQL</tt><a name="INDEX-754" />,
<tt class="literal">DBD::Oracle</tt><a name="INDEX-755" />, and
<tt class="literal">DBD::Pg</tt><a name="INDEX-756" /> for Postgres. While the programmer
interacts only with the DBI module, feeding it SQL queries and
receiving results from it, the appropriate DBD module communicates
directly with the actual database. The DBD module turns the abstract
DBI methods into highly specific and platform-dependent database
commands. It does this far underneath the level at which the DBI user
works, so that any Perl program using DBI will work on any database
for which somebody has made available a DBD driver.<a href="#FOOTNOTE-32">[32]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-32" /><p>[32]Assuming, of course, that the programmer took care not to have
the program rely on any queries unique to a given database.
<tt class="literal">$sth-&gt;query('select last_insert_id( ) from
foo')</tt> might work well when hacking on a MySQL database, but
cause your friends using Postgres great pain. Consult
O'Reilly's <em class="emphasis">Programming
the Perl DBI</em> by Alligator Descartes and Tim Bunce for more
information.</p> </blockquote>

<p>A similar movement is on the ascent in the Perl and XML world, which
started in 2001 with the SAX drivers mentioned at the start of this
section and ended up with the <tt class="literal">XML::SAX</tt> module, a
SAX2 implementation that works like DBI. Tell it you want a SAX
parser, optionally specifying the SAX features your
program's gotta have, and it roots around on your
system to find the best tool for the job, which it instantiates and
hands back to you. Then you plug in the SAX handler package of your
choice (much as with <tt class="literal">XML::Generator::DBI</tt>) and go
to town.
</p>

<p>Instead of a variety of DBD drivers that let you use a standard
interface to pull data from a variety of databases, PerlSAX handlers
let you use a standard interface to pull data from any imaginable
data source. As with DBI, it requires only one intrepid hacker to
wade through the data format in question, and suddenly other Perl
programmers with a clue about SAX hacking can find themselves using a
standard API to handle this once-alien<a name="INDEX-757" /> <a name="INDEX-758" /> <a name="INDEX-759" /> format.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img alt="Previous" border="0" src="../gifs/txtpreva.gif" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img alt="Home" border="0" src="../gifs/txthome.gif" /></a></td><td align="right" valign="top" width="228"><a href="ch09_04.htm"><img alt="Next" border="0" src="../gifs/txtnexta.gif" /></a></td></tr><tr><td align="left" valign="top" width="228">9.2. XML::RSS </td><td align="center" valign="top" width="228"><a href="index/index.htm"><img alt="Book Index" border="0" src="../gifs/index.gif" /></a></td><td align="right" valign="top" width="228">9.4. SOAP::Lite </td></tr></table></div>
<hr width="684" align="left" />

<img alt="Library Navigation Links" border="0" src="../gifs/navbar.gif" usemap="#library-map" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="index.htm"></map>

</body></html>