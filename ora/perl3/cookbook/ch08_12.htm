<HTML
><HEAD
>
<TITLE>Recipe 8.11. Processing Binary Files (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:38:46Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"><LINK
REL="prev"
HREF="ch08_11.htm"
TITLE="8.10. Removing the Last Line of a File"><LINK
REL="next"
HREF="ch08_13.htm"
TITLE="8.12. Using Random-Access I/O"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_11.htm"
TITLE="8.10. Removing the Last Line of a File"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.10. Removing the Last Line of a File"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_13.htm"
TITLE="8.12. Using Random-Access I/O"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.12. Using Random-Access I/O"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-19069"
>8.11. Processing Binary Files</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1050"
>Problem<A
CLASS="indexterm"
NAME="ch08-idx-1000004672-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004672-1"
></A
></A
></H3
><P
CLASS="para"
>Your system distinguishes between text and binary files. How do you?</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1056"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>binmode</CODE
><A
CLASS="indexterm"
NAME="ch08-idx-1000004678-0"
></A
> function on the filehandle:</P
><PRE
CLASS="programlisting"
>binmode(HANDLE);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1000005428"
>Discussion</A
></H3
><P
CLASS="para"
>Not everyone agrees what constitutes a line in a text file, because one person's textual character set is another's binary gibberish. Even when everyone is using ASCII instead of EBCDIC, Rad50, or Unicode, discrepancies arise.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch08-idx-1000004679-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004679-1"
></A
>As mentioned in the Introduction, there is no such thing as a newline character. It is purely virtual, a figment of the operating system, standard libraries, device drivers, and Perl.</P
><P
CLASS="para"
>Under Unix or Plan9, a <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> represents the physical sequence <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
> (the Perl double-quote escape for Ctrl-J), a linefeed. However, on a terminal that's not in raw mode, an Enter key generates an incoming <CODE
CLASS="literal"
>&quot;\cM&quot;</CODE
> (a carriage return) which turns into <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
>, whereas an outgoing <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
> turns into <CODE
CLASS="literal"
>&quot;\cM\cJ&quot;</CODE
>. This strangeness doesn't happen with normal files, just terminal devices, and it is handled strictly by the device driver.</P
><P
CLASS="para"
>On a Mac, a <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> is usually represented by <CODE
CLASS="literal"
>&quot;\cM&quot;</CODE
>; just to make life interesting (and because the standard requires that <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;\r&quot;</CODE
> be different), a <CODE
CLASS="literal"
>&quot;\r&quot;</CODE
> represents a <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
>. This is exactly the opposite of the way that Unix, Plan9, VMS, CP/M, or nearly anyone else does it. So, Mac programmers writing files for other systems or talking over a network have to be careful. If you send out <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
>, you'll deliver a <CODE
CLASS="literal"
>&quot;\cM&quot;</CODE
>, and no <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
> will be seen. Most network services prefer to receive and send <CODE
CLASS="literal"
>&quot;\cM\cJ&quot;</CODE
> as a line terminator, but most accept merely a <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
>.</P
><P
CLASS="para"
>Under VMS, DOS, or their derivatives, a <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> represents <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
>, similar to Unix and Plan9. From the perspective of a tty, Unix and DOS behave identically: a user who hits Enter generates a <CODE
CLASS="literal"
>&quot;\cM&quot;</CODE
>, but this arrives at the program as a <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
>, which is <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
>. A <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> (that's a <CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
>, remember) sent to a terminal shows up as a <CODE
CLASS="literal"
>&quot;\cM\cJ&quot;</CODE
>.</P
><P
CLASS="para"
>These strange conversions happen to Windows files as well. A DOS text file actually physically contains two characters at the end of every line, <CODE
CLASS="literal"
>&quot;\cM\cJ&quot;</CODE
>. The last block in the file has a <CODE
CLASS="literal"
>&quot;\cZ&quot;</CODE
> to indicate where the text stops. When you write a line like <CODE
CLASS="literal"
>&quot;bad</CODE
> <CODE
CLASS="literal"
>news\n&quot;</CODE
> on those systems, the file contains <CODE
CLASS="literal"
>&quot;bad</CODE
> <CODE
CLASS="literal"
>news\cM\cJ&quot;</CODE
>, just as if it were a terminal.</P
><P
CLASS="para"
>When you read a line on such systems, it's even stranger. The file itself contains <CODE
CLASS="literal"
>&quot;bad</CODE
> <CODE
CLASS="literal"
>news\cM\cJ&quot;</CODE
>, a 10-byte string. When you read it in, your program gets nothing but <CODE
CLASS="literal"
>&quot;bad</CODE
> <CODE
CLASS="literal"
>news\n&quot;</CODE
>, where that <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> is the virtual newline character, that is, a linefeed (<CODE
CLASS="literal"
>&quot;\cJ&quot;</CODE
>). That means to get rid of it, a single <CODE
CLASS="literal"
>chop</CODE
> or <CODE
CLASS="literal"
>chomp</CODE
> will do. But your poor program has been tricked into thinking it's only read nine bytes from the file. If you were to read 10 such lines, you would appear to have read  just 90 bytes into the file, but in fact would be at position 100. That's why the <CODE
CLASS="literal"
>tell</CODE
> function must always be used to determine your location. You can't infer your position just by counting what you've read.</P
><P
CLASS="para"
>This legacy of the old CP/M filesystem, whose equivalent of a Unix inode stored only block counts and not file sizes, has frustrated programmers for decades, and no end is in sight. Because DOS is compatible with CP/M file formats, Windows with DOS, and NT with Windows, the sins of the fathers have truly been visited unto the children of the fourth generation.</P
><P
CLASS="para"
>You can circumvent the single <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> terminator by telling Perl (and the operating system) that you're working with binary data. The <CODE
CLASS="literal"
>binmode</CODE
> function indicates that data read or written through the given filehandle should not be mangled the way a text file would likely be on those systems.</P
><PRE
CLASS="programlisting"
>$gifname = &quot;picture.gif&quot;;
open(GIF, $gifname)         or die &quot;can't open $gifname: $!&quot;;

binmode(GIF);               # now DOS won't mangle binary input from GIF
binmode(STDOUT);            # now DOS won't mangle binary output to STDOUT

while (read(GIF, $buff, 8 * 2**10)) {
    print STDOUT $buff;
}</PRE
><P
CLASS="para"
>Calling <CODE
CLASS="literal"
>binmode</CODE
> on systems that don't make this distinction (including Unix, the Mac, and Plan 9) is harmless. Inappropriately doing so (such as on a text file) on systems that do (including MVS, VMS, and DOS,  regardless of its GUI )  can mangle your files.</P
><P
CLASS="para"
>If you're <EM
CLASS="emphasis"
>not</EM
> using <CODE
CLASS="literal"
>binmode</CODE
>, the data you read using stdio (&lt;&gt;) will automatically have the native system's line terminator changed to <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
>, even if you change <CODE
CLASS="literal"
>$/</CODE
>. Similarly, any <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> you <CODE
CLASS="literal"
>print</CODE
> to the filehandle will be turned into the native line terminator. See this chapter's Introduction for more details.</P
><P
CLASS="para"
>If you want to get what was on the disk, byte for byte, you should set <CODE
CLASS="literal"
>binmode</CODE
> if you're on one of the odd systems listed above. Then, of course, you also have to set <CODE
CLASS="literal"
>$/</CODE
> to the real record separator if you want to use &lt;&gt; on it. <A
CLASS="indexterm"
NAME="ch08-idx-1000004674-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004674-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004674-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1110"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>open</CODE
> and <CODE
CLASS="literal"
>binmode</CODE
> functions in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; your system's <I
CLASS="filename"
>open </I
>(2) and <I
CLASS="filename"
>fopen </I
>(3) manpages</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_11.htm"
TITLE="8.10. Removing the Last Line of a File"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.10. Removing the Last Line of a File"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_13.htm"
TITLE="8.12. Using Random-Access I/O"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.12. Using Random-Access I/O"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>8.10. Removing the Last Line of a File</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>8.12. Using Random-Access I/O</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
