<HTML
><HEAD
>
<TITLE>Recipe 6.4.  Commenting Regular Expressions (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_04.htm"
TITLE="6.3. Matching Words"><LINK
REL="next"
HREF="ch06_06.htm"
TITLE="6.5. Finding the Nth Occurrence of a Match"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.3. Matching Words"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.3. Matching Words"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.5. Finding the Nth Occurrence of a Match"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.5. Finding the Nth Occurrence of a Match"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-chap06_commenting_0"
>6.4.  Commenting Regular Expressions</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000007535"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007539-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007539-1"
></A
></A
></H3
><P
CLASS="para"
>You want to make your complex regular expressions understandable and maintainable.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-451"
>Solution</A
></H3
><P
CLASS="para"
>You have four techniques at your disposal: comments outside the pattern, comments inside the pattern with the <CODE
CLASS="literal"
>/x</CODE
> modifier, comments inside the replacement part of <CODE
CLASS="literal"
>s///</CODE
>, and alternate delimiters.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-457"
>Discussion</A
></H3
><P
CLASS="para"
>The piece of sample code in <A
CLASS="xref"
HREF="ch06_05.htm"
TITLE="resname"
>Example 6.1</A
> uses all four techniques. The initial comment describes the overall intent of the regular expression. For relatively simple patterns, this may be all that is needed. More complex patterns, as in the example, will require more documentation.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-16765"
>Example 6.1: resname</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -p
# resname - change all &quot;foo.bar.com&quot; style names in the input stream
# into &quot;foo.bar.com [204.148.40.9]&quot; (or whatever) instead

use Socket;                 # load inet_addr
s{                          #
    (                       # capture the hostname in $1
        (?:                 # these parens for grouping only
            (?! [-_]  )     # lookahead for neither underscore nor dash
            [\w-] +         # hostname component
            \.              # and the domain dot
        ) +                 # now repeat that whole thing a bunch of times
        [A-Za-z]            # next must be a letter
        [\w-] +             # now trailing domain part
    )                       # end of $1 capture
}{                          # replace with this:
    &quot;$1 &quot; .                 # the original bit, plus a space
           ( ($addr = gethostbyname($1))   # if we get an addr
            ? &quot;[&quot; . inet_ntoa($addr) . &quot;]&quot; #        format it
            : &quot;[???]&quot;                      # else mark dubious
           )
}gex;               # /g for global
                    # /e for execute
                    # /x for nice formatting</PRE
></DIV
><P
CLASS="para"
>For aesthetics, the example uses alternate delimiters. When you split your match or substitution over multiple lines, it helps readability to have matching braces. Another common reason to use alternate delimiters is when your pattern or replacement contains slashes, as in <CODE
CLASS="literal"
>s/\/\//\/..\//g</CODE
>, alternate delimiters makes such patterns easier to read, as in <CODE
CLASS="literal"
>s!//!/../!g</CODE
> or <CODE
CLASS="literal"
>s{//}{/../}g</CODE
>.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>/x</CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000007540-0"
></A
> modifier makes Perl ignore most whitespace in the pattern (it still counts in a bracketed character class) and treat <CODE
CLASS="literal"
>#</CODE
> characters and their following text as comments. Although useful, this can prove troublesome if you want literal whitespace or <CODE
CLASS="literal"
>#</CODE
> characters in your pattern. If you do want these characters, you'll have to quote them with a backslash, as in the escaped pound signs here:</P
><PRE
CLASS="programlisting"
>s/                  # replace
  \#                #   a pound sign
  (\w+)             #   the variable name
  \#                #   another pound sign
/${$1}/xg;          # with the value of the global variable</PRE
><P
CLASS="para"
>Remember that comments should explain the text, not just restate the code. Using <CODE
CLASS="literal"
>&quot;$i++</CODE
> <CODE
CLASS="literal"
>#</CODE
> <CODE
CLASS="literal"
>add</CODE
> <CODE
CLASS="literal"
>one</CODE
> <CODE
CLASS="literal"
>to</CODE
> <CODE
CLASS="literal"
>i&quot;</CODE
> is apt to lose marks in your programming course or get you talked about by your coworkers.</P
><P
CLASS="para"
>The final technique is <CODE
CLASS="literal"
>/e</CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000010979-0"
></A
>, which evaluates the replacement portion as a full Perl expression, not just as a (double-quote interpolated) string. The result of running this code is used as the replacement string. Because it is evaluated as code, you can put comments in it. This slows your code down somewhat, but not as much as you'd think (until you write a benchmark on your own, a good idea that will allow you to develop a feel for the efficiency of different constructs). That's because the right-hand side of the substitute is syntax-checked and compiled at compile-time along with the rest of your program. This may be overkill in the case of a simple string replacement, but it is marvelous for more complex cases.</P
><P
CLASS="para"
>Doubling up the <CODE
CLASS="literal"
>/e</CODE
> to make <CODE
CLASS="literal"
>/ee</CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000010988-0"
></A
> (or even more, like <CODE
CLASS="literal"
>/eee</CODE
>!) is like the <CODE
CLASS="literal"
>eval</CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000010993-0"
></A
> <CODE
CLASS="literal"
>&quot;STRING&quot;</CODE
> construct. This allows you to use lexical variables instead of globals in the previous replacement example.</P
><PRE
CLASS="programlisting"
>s/                  # replace
\#                  #   a pound sign
(\w+)               #   the variable name
\#                  #   another pound sign
/'$' . $1/xeeg;     # with the value of *any* variable</PRE
><P
CLASS="para"
>After a <CODE
CLASS="literal"
>/ee</CODE
> substitution, you can test the <CODE
CLASS="literal"
>$@</CODE
> variable. It contains any error messages resulting from running your code, because this is real run-time code generation &nbsp;-  unlike <CODE
CLASS="literal"
>/e</CODE
>. <A
CLASS="indexterm"
NAME="ch06-idx-1000007552-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007552-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000007554"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>/x</CODE
> modifier in <I
CLASS="filename"
>perlre </I
>(1) and the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Pattern Matching"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the "Comments Within a Regular Expression" section of Chapter 7 of <CITE
CLASS="citetitle"
>Mastering Regular Expressions</CITE
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.3. Matching Words"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.3. Matching Words"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_06.htm"
TITLE="6.5. Finding the Nth Occurrence of a Match"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.5. Finding the Nth Occurrence of a Match"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>6.3. Matching Words</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>6.5. Finding the Nth Occurrence of a Match</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
