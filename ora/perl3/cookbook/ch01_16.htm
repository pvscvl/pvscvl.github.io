<HTML
><HEAD
>
<TITLE>Recipe 1.15. Parsing Comma-Separated Data (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:20Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_15.htm"
TITLE="1.14. Trimming Blanks from the Ends of a String"><LINK
REL="next"
HREF="ch01_17.htm"
TITLE="1.16. Soundex Matching"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_15.htm"
TITLE="1.14. Trimming Blanks from the Ends of a String"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.14. Trimming Blanks from the Ends of a String"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_17.htm"
TITLE="1.16. Soundex Matching"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.16. Soundex Matching"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-chap01_parsing_0"
>1.15. Parsing Comma-Separated Data</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1657"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010335-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010335-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010335-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010335-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010335-4"
></A
></A
></H3
><P
CLASS="para"
>You have a data file containing comma-separated values that you need to read in, but these data fields may have quoted commas or escaped quotes in them. Most spreadsheets and database programs use comma-separated values as a common interchange format.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1663"
>Solution</A
></H3
><P
CLASS="para"
>Use the procedure in <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
>.</P
><PRE
CLASS="programlisting"
>sub parse_csv {
    my $text = shift;      # record containing comma-separated values
    my @new  = ();
    push(@new, $+) while $text =~ m{
        # the first part groups the phrase inside the quotes.
        # see explanation of this pattern in MRE
        &quot;([^\&quot;\\]*(?:\\.[^\&quot;\\]*)*)&quot;,?
           |  ([^,]+),?
           | ,
       }gx;
       push(@new, undef) if substr($text, -1,1) eq ',';
       return @new;      # list of values that were comma-separated
}  </PRE
><P
CLASS="para"
>Or use the standard Text::ParseWords module.</P
><PRE
CLASS="programlisting"
>use <A
CLASS="indexterm"
NAME="ch01-idx-1000011467-0"
></A
>Text::ParseWords;

sub parse_csv {
    return quoteword(&quot;,&quot;,0, $_[0]);
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1669"
>Discussion</A
></H3
><P
CLASS="para"
>Comma-separated input is a deceptive and complex format. It sounds simple, but involves a fairly complex escaping system because the fields themselves can contain commas. This makes the pattern matching solution complex and rules out a simple <CODE
CLASS="literal"
>split</CODE
> <CODE
CLASS="literal"
>/,/</CODE
>.</P
><P
CLASS="para"
>Fortunately, Text::ParseWords hides the complexity from you. Pass its <CODE
CLASS="literal"
>quotewords</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010342-0"
></A
> function two arguments and the CSV string. The first argument is the separator (a comma, in this case) and the second is a true or false value controlling whether the strings are returned with quotes around them.</P
><P
CLASS="para"
>If you want to represent quotation marks inside a field delimited by quotation marks, escape them with backslashes &quot;<CODE
CLASS="literal"
>like</CODE
> <CODE
CLASS="literal"
>\&quot;this\&quot;</CODE
>&quot;. Quotation marks and backslashes are the only characters that have meaning backslashed. Any other use of a backslash will be left in the output string.</P
><P
CLASS="para"
>Here's how you'd use the <CODE
CLASS="literal"
>parse_csv</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010343-0"
></A
> subroutines. The <CODE
CLASS="literal"
>q&lt;&gt;</CODE
> is just a fancy quote so we didn't have to backslash everything.</P
><PRE
CLASS="programlisting"
>$line = q&lt;XYZZY,&quot;&quot;,&quot;O'Reilly, Inc&quot;,&quot;Wall, Larry&quot;,&quot;a \&quot;glug\&quot; bit,&quot;,5,
    &quot;Error, Core Dumped&quot;&gt;;
@fields = parse_csv($line);
for ($i = 0; $i &lt; @fields; $i++) {
    print &quot;$i : $fields[$i]\n&quot;;
}
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>0 : XYZZY</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1 :</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>2 : O'Reilly, Inc</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>3 : Wall, Larry</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>4 : a \&quot;glug\&quot; bit,</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>5 : 5</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>6 : Error, Core Dumped</I
></CODE
></B
></CODE
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1705"
>See Also</A
></H3
><P
CLASS="para"
>The explanation of regular expression syntax in <EM
CLASS="emphasis"
>perlre </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the documentation for the standard Text::ParseWords module (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>); the section "An Introductory Example: Parsing CSV Text" in Chapter 7 of <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
> <A
CLASS="indexterm"
NAME="ch01-idx-1000010338-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010338-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010338-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010338-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010338-4"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_15.htm"
TITLE="1.14. Trimming Blanks from the Ends of a String"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.14. Trimming Blanks from the Ends of a String"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_17.htm"
TITLE="1.16. Soundex Matching"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.16. Soundex Matching"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>1.14. Trimming Blanks from the Ends of a String</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>1.16. Soundex Matching</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
