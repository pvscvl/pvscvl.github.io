<HTML
><HEAD
>
<TITLE>Recipe 4.18. Program: words (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:15Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_18.htm"
TITLE="4.17. Randomizing an Array"><LINK
REL="next"
HREF="ch04_20.htm"
TITLE="4.19. Program: permute"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_18.htm"
TITLE="4.17. Randomizing an Array"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.17. Randomizing an Array"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_20.htm"
TITLE="4.19. Program: permute"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.19. Program: permute"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-41630"
>4.18. Program: words</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1715"
>Description <A
CLASS="indexterm"
NAME="ch04-idx-1000006788-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006788-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006788-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006788-3"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006788-4"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006788-5"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006788-6"
></A
></A
></H3
><P
CLASS="para"
>Have you ever wondered how programs like <EM
CLASS="emphasis"
>ls</EM
> generate columns of sorted output that you read down the columns instead of across the rows? For example:</P
><PRE
CLASS="programlisting"
>awk      cp       ed       login    mount    rmdir    sum
basename csh      egrep    ls       mt       sed      sync
cat      date     fgrep    mail     mv       sh       tar
chgrp    dd       grep     mkdir    ps       sort     touch
chmod    df       kill     mknod    pwd      stty     vi
chown    echo     ln       more     rm       su</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch04_19.htm"
TITLE="words"
>Example 4.2</A
> does this.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch04-10807"
>Example 4.2: words</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# words - gather lines, present in columns

use strict;

my ($item, $cols, $rows, $maxlen);
my ($xpixel, $ypixel, $mask, @data);

<CODE
CLASS="literal"
>getwinsize();</CODE
>

# first gather up every line of input,
# remembering the longest line length seen
$maxlen = 1;        
while (&lt;&gt;) {
    my $mylen;
    s/\s+$//;
    $maxlen = $mylen if (($mylen = length) &gt; $maxlen);
    push(@data, $_);
}

$maxlen += 1;               # to make extra space

# determine boundaries of screen
$cols = int($cols / $maxlen) || 1;
$rows = int(($#data+$cols) / $cols);

# pre-create mask for faster computation
$mask = sprintf(&quot;%%-%ds &quot;, $maxlen-1);

# subroutine to check whether at last item on line
sub EOL { ($item+1) % $cols == 0 }  

# now process each item, picking out proper piece for this position
for ($item = 0; $item &lt; $rows * $cols; $item++) {
    my $target =  ($item % $cols) * $rows + int($item/$cols);
    my $piece = sprintf($mask, $target &lt; @data ? $data[$target] : &quot;&quot;);
    $piece =~ s/\s+$// if EOL();  # don't blank-pad to EOL
    print $piece;
    print &quot;\n&quot; if EOL();
}

# finish up if needed
print &quot;\n&quot; if EOL();

# not portable -- linux only
sub getwinsize {
    my $winsize = &quot;\0&quot; x 8;
    my $TIOCGWINSZ = 0x40087468;
    if (ioctl(STDOUT, $TIOCGWINSZ, $winsize)) {
        ($rows, $cols, $xpixel, $ypixel) = unpack('S4', $winsize);
    } else {
        $cols = 80;
    }
}</PRE
></DIV
><P
CLASS="para"
>The most obvious way to print out a sorted list in columns is to print each element of the list, one at a time, padded out to a particular width. When you're about to hit the end of the line, generate a newline. But that only works if you're planning on reading each row left to right. If you instead expect to read it down each column, this approach won't do.</P
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>words</EM
> program is a filter that generates output going down the columns. It reads all input, keeping track of the length of the longest line seen. Once everything has been read in, it divides the screen width by the length of the longest input record seen, yielding the expected number of columns.</P
><P
CLASS="para"
>Then the program goes into a loop that executes once per input record, but the output order isn't in the obvious order. Imagine you had a list of nine items:</P
><PRE
CLASS="programlisting"
>Wrong       Right
-----       -----
1 2 3       1 4 7
4 5 6       2 5 8
7 8 9       3 6 9</PRE
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>words</EM
> program does the necessary calculations to print out elements <CODE
CLASS="literal"
>(1,4,7)</CODE
> on one line, <CODE
CLASS="literal"
>(2,5,8)</CODE
> on the next, and <CODE
CLASS="literal"
>(3,6,9)</CODE
> on the last.</P
><P
CLASS="para"
>To figure out the current window size, this program does an <CODE
CLASS="literal"
>ioctl</CODE
> call. This works fine&nbsp;- on the system it was written for. On any other system, it won't work. If that's good enough for you, then good for you. <A
CLASS="xref"
HREF="ch12_15.htm"
TITLE="Using h2ph to Translate C #include Files"
>Recipe 12.14</A
> shows how to find this on your system using the <EM
CLASS="emphasis"
>ioctl.ph</EM
> file, or with a C program. <A
CLASS="xref"
HREF="ch15_05.htm"
TITLE="Determining Terminal or Window Size"
>Recipe 15.4</A
> shows a more portable solution, but that requires installing a CPAN module.<A
CLASS="indexterm"
NAME="ch04-idx-1000006790-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006790-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006790-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006790-3"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006790-4"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006790-5"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006790-6"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-1000007207"
>See Also</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch15_05.htm"
TITLE="Determining Terminal or Window Size"
>Recipe 15.4</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_18.htm"
TITLE="4.17. Randomizing an Array"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.17. Randomizing an Array"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_20.htm"
TITLE="4.19. Program: permute"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.19. Program: permute"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>4.17. Randomizing an Array</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>4.19. Program: permute</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
