<HTML
><HEAD
>
<TITLE>Recipe 19.12. Writing a Multiscreen CGI Script (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:44Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"><LINK
REL="prev"
HREF="ch19_12.htm"
TITLE="19.11. Creating Sticky Widgets"><LINK
REL="next"
HREF="ch19_14.htm"
TITLE="19.13. Saving a Form to a File or Mail Pipe"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch19_12.htm"
TITLE="19.11. Creating Sticky Widgets"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.11. Creating Sticky Widgets"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch19_14.htm"
TITLE="19.13. Saving a Form to a File or Mail Pipe"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.13. Saving a Form to a File or Mail Pipe"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-36190"
>19.12. Writing a Multiscreen CGI Script</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-1328"
>Problem<A
CLASS="indexterm"
NAME="ch19-idx-1000005503-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-1000005503-1"
></A
></A
></H3
><P
CLASS="para"
>You want to write a single CGI script that can return several different pages to the browser. For instance, you want a single CGI script for administering a database of products. The script will be called to display the form to add a product, to process the add-product form, to display a list of products to delete, to process the delete-product form, to display a list of product to edit, to display a form of the product's attributes for the user to change, and to process the edit-product form. You can use these multiscreen CGI scripts to form an elementary <A
CLASS="indexterm"
NAME="ch19-idx-1000007382-0"
></A
>shopping-cart-type application.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-1334"
>Solution</A
></H3
><P
CLASS="para"
>Use a hidden field to encode the current screen.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-1340"
>Discussion</A
></H3
><P
CLASS="para"
>It is easy to generate sticky hidden fields with the CGI module. The <CODE
CLASS="literal"
>hidden</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-1000005509-0"
></A
> function returns HTML for a hidden widget and will use the widget's current value if you only give <CODE
CLASS="literal"
>hidden</CODE
> the widget name:</P
><PRE
CLASS="programlisting"
>use CGI qw(:standard);
print hidden(&quot;bacon&quot;);</PRE
><P
CLASS="para"
>To determine which page ("display product list", "display all items in shopping cart", "confirm order") to display, use another hidden field. We'll call this one <CODE
CLASS="literal"
>.State</CODE
> so it won't conflict with any field we might have called <CODE
CLASS="literal"
>State</CODE
> (for instance, in credit card billing information). To let the user move from page to page, use submit buttons that set <CODE
CLASS="literal"
>.State</CODE
> to the name of the page to go to. For instance, to make a button to take the user to the "Checkout" page, use:</P
><PRE
CLASS="programlisting"
>    print submit(-NAME =&gt; &quot;.State&quot;, -VALUE =&gt; &quot;Checkout&quot;);</PRE
><P
CLASS="para"
>We wrap this in a function to make it easier to type:</P
><PRE
CLASS="programlisting"
>sub to_page { return submit( -NAME =&gt; &quot;.State&quot;, -VALUE =&gt; shift ) }</PRE
><P
CLASS="para"
>To decide what code to display, check the <CODE
CLASS="literal"
>.State</CODE
> parameter:</P
><PRE
CLASS="programlisting"
>$page = param(&quot;.State&quot;) || &quot;Default&quot;;</PRE
><P
CLASS="para"
>Put the code to generate each page in separate subroutines. You could decide which subroutine to call with a long <CODE
CLASS="literal"
>if</CODE
> ... <CODE
CLASS="literal"
>elsif</CODE
> ... <CODE
CLASS="literal"
>elsif</CODE
>:</P
><PRE
CLASS="programlisting"
>if ($page eq &quot;Default&quot;) {
    front_page();
} elsif ($page eq &quot;Checkout&quot;) {
    checkout();
} else {
    no_such_page();         # when we get a .State that doesn't exist
}</PRE
><P
CLASS="para"
>This is tedious and clumsy. Instead use a hash that maps a page name to a subroutine. This is another strategy for implementing a C-style <CODE
CLASS="literal"
>switch</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-1000005595-0"
></A
> statement in Perl.</P
><PRE
CLASS="programlisting"
>%States = (
    'Default'     =&gt; \&amp;front_page,
    'Shirt'       =&gt; \&amp;shirt,
    'Sweater'     =&gt; \&amp;sweater,
    'Checkout'    =&gt; \&amp;checkout,
    'Card'        =&gt; \&amp;credit_card,
    'Order'       =&gt; \&amp;order,
    'Cancel'      =&gt; \&amp;front_page,
);

if ($States{$page}) {
    $States{$page}-&gt;();   # call the correct subroutine 
} else {
    no_such_page();
}</PRE
><P
CLASS="para"
>Each page will have some persistent widgets. For instance, the page that lets the user order t-shirts will want the number of t-shirts to persist even when the user continues and orders shoes as well. We do this by calling the page-generating subroutines with a parameter that lets them know whether they're the active page. If they're not the active page, they should only send back hidden fields for any persistent data:</P
><PRE
CLASS="programlisting"
>while (($state, $sub) = each %States) {
    $sub-&gt;( $page eq $state );
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>eq</CODE
> comparison returns true if the page is the current page, and false if it isn't. The page-generating subroutine then looks like this:</P
><PRE
CLASS="programlisting"
>sub t_shirt {
    my $active = shift;

    unless ($active) {
        print hidden(&quot;size&quot;), hidden(&quot;color&quot;);
        return;
    }

    print p(&quot;You want to buy a t-shirt?&quot;);
    print p(&quot;Size: &quot;, popup_menu('size', [ qw(XL L M S XS) ]));
    print p(&quot;Color:&quot;, popup_menu('color', [ qw(Black White) ]));

    print p( to_page(&quot;Shoes&quot;), to_page(&quot;Checkout&quot;) );
}</PRE
><P
CLASS="para"
>Because the subroutines all generate HTML, we have to print the HTTP header and start the HTML document and form before we call the subroutines. This lets us print a standard header and footer for all the pages, if we want. Here, we assume we have subroutines <CODE
CLASS="literal"
>standard_header</CODE
> and <CODE
CLASS="literal"
>standard_footer</CODE
> for printing the headers and footers:</P
><PRE
CLASS="programlisting"
>print header(&quot;Program Title&quot;), start_html();
print standard_header(), begin_form();
while (($state, $sub) = each %States) {
    $sub-&gt;( $page eq $state );
}
print standard_footer(), end_form(), end_html();</PRE
><P
CLASS="para"
>Don't make the mistake of encoding prices in the forms. Calculate prices based on the values of the hidden widgets, and sanity-check the information where you can. For example, compare against known products, to make sure they're not trying to order a burgundy XXXXXXL t-shirt.</P
><P
CLASS="para"
>Using hidden data is more robust than using cookies, because you can't rely on the browser supporting or accepting cookies. A full explanation is in <A
CLASS="xref"
HREF="ch19_11.htm"
TITLE="Managing Cookies"
>Recipe 19.10</A
>.</P
><P
CLASS="para"
>We show a simple shopping cart application as the program <EM
CLASS="emphasis"
>chemiserie</EM
> at the end of this chapter.<A
CLASS="indexterm"
NAME="ch19-idx-1000005505-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-1000005505-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-1468"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard CGI module.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch19_12.htm"
TITLE="19.11. Creating Sticky Widgets"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.11. Creating Sticky Widgets"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch19_14.htm"
TITLE="19.13. Saving a Form to a File or Mail Pipe"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.13. Saving a Form to a File or Mail Pipe"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>19.11. Creating Sticky Widgets</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>19.13. Saving a Form to a File or Mail Pipe</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
