<HTML
><HEAD
>
<TITLE>Recipe 12.4. Making Variables Private to a Module (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:41:31Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_04.htm"
TITLE="12.3. Delaying use Until Run Time"><LINK
REL="next"
HREF="ch12_06.htm"
TITLE="12.5. Determining the Caller's Package"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_04.htm"
TITLE="12.3. Delaying use Until Run Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.3. Delaying use Until Run Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.5. Determining the Caller's Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.5. Determining the Caller's Package"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-36333"
>12.4. Making Variables Private to a Module</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-596"
>Problem<A
CLASS="indexterm"
NAME="ch12-idx-1000005204-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005204-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005204-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005204-3"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005204-4"
></A
></A
></H3
><P
CLASS="para"
>You want to make a variable or function private to a package.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-602"
>Solution</A
></H3
><P
CLASS="para"
>You can't. But you can make them private to the file that the module sits in, which usually suffices.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-608"
>Discussion</A
></H3
><P
CLASS="para"
>Remember that a package is just a way of grouping variables and functions together, conferring no privacy. Anything in a package is by definition global and accessible from anywhere. Packages only group; they don't hide.</P
><P
CLASS="para"
>For privacy, only lexical variables will do. A module is implemented in a <EM
CLASS="emphasis"
>Module.pm</EM
>, with all its globals in the package named Module. Because that whole file is by definition a scope and lexicals are private to a scope, creating file-scoped lexicals is effectively the same thing as a module-private variable.</P
><P
CLASS="para"
>If you alternate packages within a scope, though, you may be surprised that the scope's lexicals are visible no matter where you are. That's because a package statement only sets a different prefix for a global identifier.</P
><PRE
CLASS="programlisting"
>package Alpha;
my $aa = 10;
   $x = &quot;azure&quot;;

package Beta;
my $bb = 20;
   $x = &quot;blue&quot;;

package main;
print &quot;$aa, $bb, $x, $Alpha::x, $Beta::x\n&quot;;
<B
CLASS="emphasis.bold"
>10, 20, , azure, blue</B
></PRE
><P
CLASS="para"
>Was that the output you expected? The two lexicals, <CODE
CLASS="literal"
>$aa</CODE
> and <CODE
CLASS="literal"
>$bb</CODE
>, are still in scope because we haven't left the current block, file, or <CODE
CLASS="literal"
>eval</CODE
>. You might think of globals and lexicals as existing in separate dimensions, forever unrelated to each other. Package statements have nothing to do with lexicals. By setting the current prefix, the first global variable <CODE
CLASS="literal"
>$x</CODE
> is really <CODE
CLASS="literal"
>$Alpha::x</CODE
>, whereas the second <CODE
CLASS="literal"
>$x</CODE
> is now <CODE
CLASS="literal"
>$Beta::x</CODE
> because of the intervening package statement changing the default prefix. Package identifiers, if fully qualified, can be accessed from anywhere, as we've done in the <CODE
CLASS="literal"
>print</CODE
> statement.</P
><P
CLASS="para"
>So, packages can't have privacy &nbsp;-  but modules can because they're in a file, which is always its own scope. Here's a simple module, placed in the file <EM
CLASS="emphasis"
>Flipper.pm</EM
>, that exports two functions, <CODE
CLASS="literal"
>flip_words</CODE
> and <CODE
CLASS="literal"
>flip_boundary</CODE
>. The module provides code to reverse words in a line, and to change the definition of a word boundary.</P
><PRE
CLASS="programlisting"
># Flipper.pm
package Flipper;
use strict;

require Exporter;
use vars qw(@ISA @EXPORT $VERSION);
@ISA     = qw(Exporter);
@EXPORT  = qw(flip_words flip_boundary);
$VERSION = 1.0;

my $Separatrix = ' ';  # default to blank; must precede functions

sub flip_boundary {
    my $prev_sep = $Separatrix;
    if (@_) { $Separatrix = $_[0] }
    return $prev_sep;
}
sub flip_words {
    my $line  = $_[0];
    my @words = split($Separatrix, $line);
    return join($Separatrix, reverse @words);
}
1;</PRE
><P
CLASS="para"
>This module sets three package variables needed by the Exporter and also initializes a lexical variable at file level called <CODE
CLASS="literal"
>$Separatrix</CODE
>. Again, this variable is private to the file, not to the package. All code beneath its declaration in the same scope (or nested within that scope, as are the functions' blocks) can see <CODE
CLASS="literal"
>$Separatrix</CODE
> perfectly. Even though they aren't exported, global variables could be accessed using the fully qualified name, as in <CODE
CLASS="literal"
>$Flipper::VERSION</CODE
>.</P
><P
CLASS="para"
>A scope's lexicals cannot be examined or tinkered with from outside that scope, which in this case is the entire file below their point of declaration. You cannot fully qualify lexicals or export them either; only globals can be exported. If someone outside the module needs to look at or change the file's lexicals, they must ask the module itself. That's where the <CODE
CLASS="literal"
>flip_boundary</CODE
> function comes into play, allowing indirect access to the module's private parts.</P
><P
CLASS="para"
>This module would work the same even if its <CODE
CLASS="literal"
>$Separatrix</CODE
> variable were a package global rather than a file lexical. Someone from the outside could theoretically play with it without the module realizing this. On the other hand, if they really want to that badly, perhaps you should let them do so. Peppering your module with file-scoped lexicals is not necessary. You already have your own namespace (Flipper, in this case) where you can store all the identifiers you want. That's what it's there for, after all. Good Perl programming style nearly always avoids fully qualified identifiers.</P
><P
CLASS="para"
>Speaking of style, the case of identifiers used in the Flipper module was not random. Following the Perl style guide, identifiers in all capitals are reserved for those with special meaning to Perl itself. Functions and local variables are all lowercase. The module's persistent variables (either file lexicals or package globals) are capitalized. Identifiers with multiple words have each of these separated by an underscore to make it easier to read. Please don't use mixed capitals without underscores &nbsp;-  you wouldn't like reading this book without spaces, either.<A
CLASS="indexterm"
NAME="ch12-idx-1000005206-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005206-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005206-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005206-3"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005206-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-706"
>See Also</A
></H3
><P
CLASS="para"
>The discussion on file-scoped lexicals in <I
CLASS="filename"
>perlmod </I
>(1); the <A
CLASS="olink"
HREF="../prog/ch02_06.htm"
>"Scoped Declarations"</A
> section in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the section on <A
CLASS="olink"
HREF="../prog/ch08_04.htm"
>"Programming with Style"</A
> in <A
CLASS="olink"
HREF="../prog/ch08_01.htm"
>Chapter 8</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <I
CLASS="filename"
>perlstyle</I
> (1); <A
CLASS="xref"
HREF="ch10_03.htm"
TITLE="Making Variables Private to a Function"
>Recipe 10.2</A
>; <A
CLASS="xref"
HREF="ch10_04.htm"
TITLE="Creating Persistent Private Variables"
>Recipe 10.3</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_04.htm"
TITLE="12.3. Delaying use Until Run Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.3. Delaying use Until Run Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.5. Determining the Caller's Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.5. Determining the Caller's Package"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>12.3. Delaying use Until Run Time</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>12.5. Determining the Caller's Package</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
