<HTML
><HEAD
>
<TITLE>Recipe 10.14. Redefining a Function (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_14.htm"
TITLE="10.13. Saving Global Values"><LINK
REL="next"
HREF="ch10_16.htm"
TITLE="10.15. Trapping Undefined Function Calls with AUTOLOAD"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_14.htm"
TITLE="10.13. Saving Global Values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.13. Saving Global Values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_16.htm"
TITLE="10.15. Trapping Undefined Function Calls with AUTOLOAD"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.15. Trapping Undefined Function Calls with AUTOLOAD"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-24176"
>10.14. Redefining a Function</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1000005610"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000004739-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004739-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004739-2"
></A
>You want to temporarily or permanently redefine a function, but functions can't be assigned to.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1062"
>Solution</A
></H3
><P
CLASS="para"
>To redefine a function, assign a new code reference to the typeglob of the name of the function. Use a <CODE
CLASS="literal"
>local</CODE
> if you want it to be temporary.</P
><PRE
CLASS="programlisting"
>undef &amp;grow;                # silence -w complaints of redefinition
*grow = \&amp;expand;           
grow();                     # calls expand()

{
    local *grow = \&amp;shrink;         # only until this block exists
        grow();                 # calls shrink()
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1084"
>Discussion</A
></H3
><P
CLASS="para"
>Unlike a variable but like a handle, a function cannot be directly assigned to. It's just a name. You can manipulate it almost as though it were a variable, because you can directly manipulate the run-time symbol table using typeglobs like <CODE
CLASS="literal"
>*foo</CODE
> to produce interesting <A
CLASS="indexterm"
NAME="ch10-idx-1000006373-0"
></A
>aliasing effects.</P
><P
CLASS="para"
>Assigning a reference to a typeglob changes what is accessed the next time a symbol of that type is needed. This is what the Exporter does when you <A
CLASS="indexterm"
NAME="ch10-idx-1000006380-0"
></A
>import a function or variable from one package into another. Since this is direct manipulation of the package symbol table, it only works on package variables (globals), not lexicals.</P
><PRE
CLASS="programlisting"
>*one::var = \%two::Table;   # make %one::var alias for %two::Table
*one::big = \&amp;two::small;   # make &amp;one::big alias for &amp;two::small</PRE
><P
CLASS="para"
>A typeglob is something you can use <CODE
CLASS="literal"
>local</CODE
> on, but not <CODE
CLASS="literal"
>my</CODE
>. Because of the <CODE
CLASS="literal"
>local</CODE
>, this aliasing effect is then limited to the duration of the current block.</P
><PRE
CLASS="programlisting"
>local *fred = \&amp;barney;     # temporarily alias &amp;fred to &amp;barney</PRE
><P
CLASS="para"
>If the value assigned to a typeglob is not a reference but itself another typeglob, then <EM
CLASS="emphasis"
>all</EM
> types by that name are aliased. The types aliased in a full typeglob assignment are scalar, array, hash, function, filehandle, directory handle, and format. That means that assigning <CODE
CLASS="literal"
>*Top</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>*Bottom</CODE
> would make the current package variable <CODE
CLASS="literal"
>$Top</CODE
> an alias for <CODE
CLASS="literal"
>$Bottom</CODE
>, <CODE
CLASS="literal"
>@Top</CODE
> for <CODE
CLASS="literal"
>@Bottom</CODE
>, <CODE
CLASS="literal"
>%Top</CODE
> for <CODE
CLASS="literal"
>%Bottom</CODE
>, and <CODE
CLASS="literal"
>&amp;Top</CODE
> for <CODE
CLASS="literal"
>&amp;Bottom</CODE
>. It would even alias the corresponding file and directory handles and formats! You probably don't want to do this.</P
><P
CLASS="para"
>Use assignments to typeglobs together with closures to clone a bunch of similar functions cheaply and easily. Imagine you wanted a function for HTML generation to help with colors. For example:</P
><PRE
CLASS="programlisting"
>$string =  red(&quot;careful here&quot;);
print $string;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>&lt;FONT COLOR='red'&gt;careful here&lt;/FONT&gt;</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>You could write the <CODE
CLASS="literal"
>red </CODE
> function this way:</P
><PRE
CLASS="programlisting"
>sub red { &quot;&lt;FONT COLOR='red'&gt;@_&lt;/FONT&gt;&quot; }</PRE
><P
CLASS="para"
>If you need more colors, you could do something like this:</P
><PRE
CLASS="programlisting"
>sub color_font {
    my $color = shift;
    return &quot;&lt;FONT COLOR='$color'&gt;@_&lt;/FONT&gt;&quot;;
}
sub red    { color_font(&quot;red&quot;, @_)     }
sub green  { color_font(&quot;green&quot;, @_)   }
sub blue   { color_font(&quot;blue&quot;, @_)    }
sub purple { color_font(&quot;purple&quot;, @_)  }
# etc</PRE
><P
CLASS="para"
>The similar nature of these functions suggests that there may be a way to factor out the common bit. To do this, use an assignment to an indirect typeglob. If you're running with the highly recommended <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
> pragma, you must first disable <CODE
CLASS="literal"
>strict 'refs'</CODE
> for that block.</P
><PRE
CLASS="programlisting"
>@colors = qw(red blue green yellow orange purple violet);
for my $name (@colors) {
    no strict 'refs';
    *$name = sub { &quot;&lt;FONT COLOR='$name'&gt;@_&lt;/FONT&gt;&quot; };
} </PRE
><P
CLASS="para"
>These functions all seem independent, but the real code was in fact only compiled once. This technique saves on both compile time and memory use. To create a proper closure, any variables in the anonymous subroutine <EM
CLASS="emphasis"
>must</EM
> be lexicals. That's the reason for the <CODE
CLASS="literal"
>my</CODE
> on the loop iteration variable.</P
><P
CLASS="para"
>This is one of the few places where giving a prototype to a closure is sensible. If you wanted to impose scalar context on the arguments of these functions (probably not a wise idea), you could have written it this way instead:</P
><PRE
CLASS="programlisting"
>*$name = sub ($) { &quot;&lt;FONT COLOR='$name'&gt;$_[0]&lt;/FONT&gt;&quot; };</PRE
><P
CLASS="para"
>However, since prototype checking happens at compile time, the preceding assignment happens too late to be useful. So, put the whole loop of assignments within a BEGIN block, forcing it to occur during compilation.<A
CLASS="indexterm"
NAME="ch10-idx-1000004741-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004741-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004741-2"
></A
>  <A
CLASS="indexterm"
NAME="ch10-idx-1000006406-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1000005636"
>See Also</A
></H3
><P
CLASS="para"
>The sections on <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>"Symbol Tables"</A
> in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlmod </I
>(1); the section on <A
CLASS="olink"
HREF="../prog/ch04_03.htm"
>"Closures"</A
> in <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and the discussion of closures in <I
CLASS="filename"
>perlref  </I
>(1); <A
CLASS="xref"
HREF="ch10_12.htm"
TITLE="Prototyping Functions"
>Recipe 10.11</A
>; <A
CLASS="xref"
HREF="ch11_05.htm"
TITLE="Taking References to Functions"
>Recipe 11.4</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_14.htm"
TITLE="10.13. Saving Global Values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.13. Saving Global Values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_16.htm"
TITLE="10.15. Trapping Undefined Function Calls with AUTOLOAD"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.15. Trapping Undefined Function Calls with AUTOLOAD"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>10.13. Saving Global Values</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>10.15. Trapping Undefined Function Calls with AUTOLOAD</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
