<HTML
><HEAD
>
<TITLE>Recipe 7.5. Creating Temporary Files (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:08Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"><LINK
REL="prev"
HREF="ch07_05.htm"
TITLE="7.4. Making Perl Report Filenames in Errors"><LINK
REL="next"
HREF="ch07_07.htm"
TITLE="7.6. Storing Files Inside Your Program Text"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_05.htm"
TITLE="7.4. Making Perl Report Filenames in Errors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.4. Making Perl Report Filenames in Errors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_07.htm"
TITLE="7.6. Storing Files Inside Your Program Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.6. Storing Files Inside Your Program Text"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-60155"
>7.5. Creating Temporary Files</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-550"
>Problem<A
CLASS="indexterm"
NAME="ch07-idx-1000009606-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009606-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009606-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009606-3"
></A
></A
></H3
><P
CLASS="para"
>You need to create a temporary file and have it automatically deleted when your program exits. For instance, you want to write a temporary configuration file to feed a program you launch. In this case, you want to know the temporary file's name to tell the utility program. In other cases, you may just want a temporary file to write to and read from, and don't need to know its filename.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-556"
>Solution</A
></H3
><P
CLASS="para"
>If you don't need to know the file's name, use the <CODE
CLASS="literal"
>new_tmpfile</CODE
><A
CLASS="indexterm"
NAME="ch07-idx-1000009607-0"
></A
> class method from the IO::File module to get a filehandle opened for reading and writing:</P
><PRE
CLASS="programlisting"
>use IO::File;

$fh = IO::File-&gt;new_tmpfile
        or die &quot;Unable to make new temporary file: $!&quot;;</PRE
><P
CLASS="para"
>If you need to know the file's name, use the <CODE
CLASS="literal"
>tmpnam</CODE
><A
CLASS="indexterm"
NAME="ch07-idx-1000009608-0"
></A
> function from the POSIX module to get a filename that you then open yourself:</P
><PRE
CLASS="programlisting"
>use IO::File;
use POSIX qw(tmpnam);

# try new temporary filenames until we get one that didn't already exist
do { $name = tmpnam() }
    until $fh = IO::File-&gt;new($name, O_RDWR|O_CREAT|O_EXCL);

# install atexit-style handler so that when we exit or die,
# we automatically delete this temporary file
END { unlink($name) or die &quot;Couldn't unlink $name : $!&quot; }

# now go on to use the file ...</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-596"
>Discussion</A
></H3
><P
CLASS="para"
>If you only need scratch space, the IO::File module's <CODE
CLASS="literal"
>new_tmpfile</CODE
> class method returns a filehandle connected to a temporary file that's been opened read-write by using the following code:</P
><PRE
CLASS="programlisting"
>for (;;) {
    $name = tmpnam();
    sysopen(TMP, $tmpnam, O_RDWR | O_CREAT | O_EXCL) &amp;&amp; last;
}
unlink $tmpnam;</PRE
><P
CLASS="para"
>This file will be automatically deleted when your program finally exits or the file is closed. You cannot find its name to tell another process, because it doesn't have a name. In fact, on systems that support such semantics, the filename was already deleted before the method returned. A child process could inherit the open file descriptor, however.[<A
CLASS="footnote"
HREF="#ch07-pgfId-1000001139"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-1000001139"
>[2]</A
> But you'd better set <CODE
CLASS="literal"
>$^F</CODE
> to at least <CODE
CLASS="literal"
>fileno($fh)</CODE
> before you <CODE
CLASS="literal"
>exec</CODE
> anything.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>This shows <CODE
CLASS="literal"
>new_tmpfile</CODE
> in action. We create a temporary file, write to it, rewind, and print what we wrote:</P
><PRE
CLASS="programlisting"
>use IO::File;

$fh = IO::File-&gt;new_tmpfile             or die &quot;IO::File-&gt;new_tmpfile: $!&quot;;
$fh-&gt;autoflush(1);
print $fh &quot;$i\n&quot; while $i++ &lt; 10;
seek($fh, 0, 0)                         or die &quot;seek: $!&quot;;
print &quot;Tmp file has: &quot;, &lt;$fh&gt;;</PRE
><P
CLASS="para"
>The second solution gets a temporary file whose name you can give to another process. We use the <CODE
CLASS="literal"
>POSIX::tmpnam</CODE
> function, open the file ourselves, and delete it when we're done. We don't test whether a file of that name exists before opening it because that would introduce a race condition &nbsp;-  someone might create the file between our checking whether it exists and our creating the file.[<A
CLASS="footnote"
HREF="#ch07-pgfId-1000006777"
>3</A
>] Instead, we wrap <CODE
CLASS="literal"
>tmpnam</CODE
> in a loop to make sure we get a new file and don't accidentally clobber someone else's. Two processes shouldn't get the same filename from <CODE
CLASS="literal"
>new_tmpfile</CODE
>, in theory.<A
CLASS="indexterm"
NAME="ch07-idx-1000009610-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009610-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009610-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009610-3"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009610-4"
></A
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-1000006777"
>[3]</A
> Race conditions are explained in <A
CLASS="xref"
HREF="ch19_05.htm"
TITLE="Writing a Safe CGI Program"
>Recipe 19.4</A
>.</P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-1000009508"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard IO::File and POSIX modules (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>); <A
CLASS="xref"
HREF="ch07_20.htm"
TITLE="Opening and Closing File Descriptors by Number"
>Recipe 7.19</A
>; your system's <I
CLASS="filename"
>tmpnam</I
> (3) manpage</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_05.htm"
TITLE="7.4. Making Perl Report Filenames in Errors"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.4. Making Perl Report Filenames in Errors"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_07.htm"
TITLE="7.6. Storing Files Inside Your Program Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.6. Storing Files Inside Your Program Text"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>7.4. Making Perl Report Filenames in Errors</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>7.6. Storing Files Inside Your Program Text</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
