<HTML
><HEAD
>
<TITLE>Recipe 7.13. Reading from Many Filehandles Without Blocking (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:14Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"><LINK
REL="prev"
HREF="ch07_13.htm"
TITLE="7.12. Flushing Output"><LINK
REL="next"
HREF="ch07_15.htm"
TITLE="7.14. Doing Non-Blocking I/O"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_13.htm"
TITLE="7.12. Flushing Output"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.12. Flushing Output"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_15.htm"
TITLE="7.14. Doing Non-Blocking I/O"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.14. Doing Non-Blocking I/O"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-18871"
>7.13. Reading from Many Filehandles Without Blocking</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-1304"
>Problem<A
CLASS="indexterm"
NAME="ch07-idx-1000009716-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009716-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009716-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009716-3"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009716-4"
></A
></A
></H3
><P
CLASS="para"
>You want to learn whether input is available to be read, rather than blocking for input as &lt; &gt; does. This is useful when reading from pipes, sockets, devices, and other programs.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-1310"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>select</CODE
> with a timeout value of 0 seconds, if you're comfortable with manipulating bit-vectors representing file descriptor sets:</P
><PRE
CLASS="programlisting"
>$rin = '';
# repeat next line for all filehandles to poll
vec($rin, fileno(FH1), 1) = 1;
vec($rin, fileno(FH2), 1) = 1;
vec($rin, fileno(FH3), 1) = 1;

$nfound = select($rout=$rin, undef, undef, 0);
if ($nfound) {
  # input waiting on one or more of those 3 filehandles
  if (vec($rout,fileno(FH1),1)) { 
      # do something with FH1
  }
  if (vec($rout,fileno(FH2),1)) {
      # do something with FH2
  }
  if (vec($rout,fileno(FH3),1)) {
      # do something with FH3
  }
}</PRE
><P
CLASS="para"
>The IO::Select module provides an abstraction to hide the bit-vector operations:</P
><PRE
CLASS="programlisting"
>use IO::Select;

$select = IO::Select-&gt;new();
# repeat next line for all filehandles to poll
$select-&gt;add(*FILEHANDLE);
if (@ready = $select-&gt;can_read(0)) {
    # input waiting on the filehandles in @ready
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-1370"
>Discussion</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>select</CODE
> function is really two functions in one. If you call it with one argument, you change the current default output filehandle (see <A
CLASS="xref"
HREF="ch07_13.htm"
TITLE="Flushing Output"
>Recipe 7.12</A
>). If you call it with four arguments, it tells you which filehandles have input waiting or are ready to receive output. This recipe only deals with four-argument <CODE
CLASS="literal"
>select</CODE
>.</P
><P
CLASS="para"
>The first three arguments to <CODE
CLASS="literal"
>select</CODE
> are strings containing bit-vectors. Each bit-vector represents a set of file descriptors to inspect for pending input, pending output, and pending expedited data (like out-of-band or urgent data on a socket), respectively. The final argument is the timeout &nbsp;-  how long <CODE
CLASS="literal"
>select</CODE
> should spend waiting for status to change. A timeout value of 0 indicates a poll. Timeout can also be a floating-point number of seconds, or <CODE
CLASS="literal"
>undef</CODE
> to wait (block) until status changes:</P
><PRE
CLASS="programlisting"
>$rin = '';
vec($rin, fileno(FILEHANDLE), 1) = 1;
$nfound = select($rin, undef, undef, 0);    # just check
if ($nfound) {
    $line = &lt;FILEHANDLE&gt;;
    print &quot;I read $line&quot;;
}</PRE
><P
CLASS="para"
>This code isn't perfect, though. If someone connects and sends a character but never sends a newline, your program will block in the <CODE
CLASS="literal"
>&lt;FILE&gt;</CODE
>. We get around this by reading characters one at a time and processing completed lines when we read a <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
>. This removes the need for the blocking <CODE
CLASS="literal"
>&lt;FILE&gt;</CODE
> call. Another solution (if you're not testing files) is detailed in <A
CLASS="xref"
HREF="ch07_16.htm"
TITLE="Determining the Number of Bytes to Read"
>Recipe 7.15</A
>.</P
><P
CLASS="para"
>The IO::Select module hides the bit-vectors from you. <CODE
CLASS="literal"
>IO::Select-&gt;new()</CODE
> returns a new object on which you call the <CODE
CLASS="literal"
>add</CODE
> method to add one or more filehandles to the set. When you've added all the filehandles you are interested in, call <CODE
CLASS="literal"
>can_read</CODE
>, <CODE
CLASS="literal"
>can_write</CODE
>, or <CODE
CLASS="literal"
>has_exception</CODE
>. These functions return a list of filehandles you can safely read from, write to, or that have unread exceptional data (TCP out-of-band data, for example).</P
><P
CLASS="para"
>Don't mix calls to four-argument <CODE
CLASS="literal"
>select</CODE
> with calls to any of the buffered I/O functions listed in this chapter's Introduction (<CODE
CLASS="literal"
>read</CODE
>, &lt;&gt;, <CODE
CLASS="literal"
>seek</CODE
>, <CODE
CLASS="literal"
>tell</CODE
>, etc.). Instead, you must use <CODE
CLASS="literal"
>sysread </CODE
>&nbsp;-  and <CODE
CLASS="literal"
>sysseek</CODE
> if you want to reposition the filehandle within the file.</P
><P
CLASS="para"
>If you want to read whatever is available on a socket or pipe and return immediately, see Recipe 7.14. If you're trying to do non-blocking reads on a terminal, see Recipes <A
CLASS="xref"
HREF="ch15_07.htm"
TITLE="Reading from the Keyboard"
>Recipe 15.6</A
> and <A
CLASS="xref"
HREF="ch15_09.htm"
TITLE="Using POSIX termios"
>Recipe 15.8</A
>. <A
CLASS="indexterm"
NAME="ch07-idx-1000009718-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009718-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009718-2"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009718-3"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009718-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-1400"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>select</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the documentation for the standard module IO::Select; <A
CLASS="xref"
HREF="ch07_15.htm"
TITLE="Doing Non-Blocking I/O"
>Recipe 7.14</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_13.htm"
TITLE="7.12. Flushing Output"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.12. Flushing Output"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_15.htm"
TITLE="7.14. Doing Non-Blocking I/O"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.14. Doing Non-Blocking I/O"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>7.12. Flushing Output</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>7.14. Doing Non-Blocking I/O</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
