<HTML
><HEAD
>
<TITLE>Recipe 9.6. Globbing, or Getting a List of Filenames Matching a Pattern (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:13Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"><LINK
REL="prev"
HREF="ch09_06.htm"
TITLE="9.5. Processing All Files in a Directory"><LINK
REL="next"
HREF="ch09_08.htm"
TITLE="9.7. Processing All Files in a Directory Recursively"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_06.htm"
TITLE="9.5. Processing All Files in a Directory"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.5. Processing All Files in a Directory"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_08.htm"
TITLE="9.7. Processing All Files in a Directory Recursively"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.7. Processing All Files in a Directory Recursively"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-27581"
>9.6. Globbing, or Getting a List of Filenames Matching a Pattern</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-634"
>Problem<A
CLASS="indexterm"
NAME="ch09-idx-1000004390-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004390-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004390-2"
></A
></A
></H3
><P
CLASS="para"
>You want to get a list of filenames similar to MS-DOS's <CODE
CLASS="literal"
>*.*</CODE
> and Unix's <CODE
CLASS="literal"
>*.h</CODE
> (this is called <EM
CLASS="emphasis"
>globbing</EM
>).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-640"
>Solution</A
></H3
><P
CLASS="para"
>Perl provides globbing with the semantics of the Unix C shell through the <CODE
CLASS="literal"
>glob</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004391-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004391-1"
></A
> keyword and &lt; &gt;:</P
><PRE
CLASS="programlisting"
>@list = &lt;*.c&gt;;
@list = glob(&quot;*.c&quot;);</PRE
><P
CLASS="para"
>You can also use <CODE
CLASS="literal"
>readdir</CODE
> to extract the filenames manually:</P
><PRE
CLASS="programlisting"
>opendir(DIR, $path);
@files = grep { /\.c$/ } readdir(DIR);
closedir(DIR);</PRE
><P
CLASS="para"
>The CPAN module File::KGlob does globbing without length limits:</P
><PRE
CLASS="programlisting"
>use File::KGlob;

@files = glob(&quot;*.c&quot;);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-666"
>Discussion</A
></H3
><P
CLASS="para"
>Perl's built-in <CODE
CLASS="literal"
>glob</CODE
> and &lt;WILDCARD&gt; notation (not to be confused with &lt;FILEHANDLE&gt;) currently use an external program to get the list of filenames on most platforms. This program is <EM
CLASS="emphasis"
>csh</EM
> on Unix,[<A
CLASS="footnote"
HREF="#ch09-pgfId-1000000674"
>2</A
>] and a program called <EM
CLASS="emphasis"
>dosglob.exe</EM
> on Windows. On VMS and the Macintosh, file globs are done internally without an external program. Globs are supposed to give C shell semantics on non-Unix systems to encourage portability. The use of the shell on Unix also makes this inappropriate for setuid scripts.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch09-pgfId-1000000674"
>[2]</A
> Usually. If <EM
CLASS="emphasis"
>tcsh</EM
> is installed, Perl uses that because it's safer. If neither is installed, <EM
CLASS="emphasis"
>/bin/sh</EM
> is used.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>To get around this, you can either roll your own selection mechanism using the built-in <CODE
CLASS="literal"
>opendir</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004403-0"
></A
> or CPAN's <A
CLASS="indexterm"
NAME="ch09-idx-1000004402-0"
></A
>File::KGlob, neither of which uses external programs. File::KGlob provides Unix shell-like globbing semantics, whereas <CODE
CLASS="literal"
>opendir</CODE
> lets you select files with Perl's regular expressions.</P
><P
CLASS="para"
>At its simplest, an <CODE
CLASS="literal"
>opendir</CODE
> solution uses <CODE
CLASS="literal"
>grep</CODE
> to filter the list returned by <CODE
CLASS="literal"
>readdir</CODE
>:</P
><PRE
CLASS="programlisting"
>@files = grep { /\.[ch]$/i } readdir(DH);</PRE
><P
CLASS="para"
>You could also do this with the DirHandle module:</P
><PRE
CLASS="programlisting"
>use DirHandle;

$dh = DirHandle-&gt;new($path)   or die &quot;Can't open $path : $!\n&quot;;
@files = grep { /\.[ch]$/i } $dh-&gt;read();</PRE
><P
CLASS="para"
>As always, the filenames returned don't include the directory. When you use the filename, you'll need to prepend the directory name:</P
><PRE
CLASS="programlisting"
>opendir(DH, $dir)        or die &quot;Couldn't open $dir for reading: $!&quot;;

@files = ();
while( defined ($file = readdir(DH)) ) {
    next unless /\.[ch]$/i;

    my $filename = &quot;$dir/$file&quot;;
    push(@files, $filename) if -T $file;
}</PRE
><P
CLASS="para"
>The following example combines directory reading and filtering with the Schwartzian Transform from <A
CLASS="xref"
HREF="ch04_01.htm"
TITLE="Arrays"
>Chapter 4, <CITE
CLASS="chapter"
>Arrays</CITE
></A
>, for efficiency. It sets <CODE
CLASS="literal"
>@dirs</CODE
> to a sorted list of the subdirectories in a directory whose names are all numeric:</P
><PRE
CLASS="programlisting"
>@dirs = map  { $_-&gt;[1] }                # extract pathnames
        sort { $a-&gt;[0] &lt;=&gt; $b-&gt;[0] }    # sort names numeric
        grep { -d $_-&gt;[1] }             # path is a dir
        map  { [ $_, &quot;$path/$_&quot; ] }     # form (name, path)
        grep { /^\d+$/ }                # just numerics
        readdir(DIR);                   # all files</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch04_16.htm"
TITLE="Sorting a List by Computable Field"
>Recipe 4.15</A
> explains how to read these strange-looking constructs. As always, formatting and documenting your code can make it much easier to read and <CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004398-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004398-1"
></A
>understand.<A
CLASS="indexterm"
NAME="ch09-idx-1000004393-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004393-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-724"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>opendir</CODE
>, <CODE
CLASS="literal"
>readdir</CODE
>, <CODE
CLASS="literal"
>closedir</CODE
>, <CODE
CLASS="literal"
>grep</CODE
>, <CODE
CLASS="literal"
>map</CODE
>, and <CODE
CLASS="literal"
>sort</CODE
> functions in <I
CLASS="filename"
>perlfunc</I
> (1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; documentation for the standard DirHandle module (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>); the "I/O Operators" section of <I
CLASS="filename"
>perlop </I
>(1), and the <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"Filename Globbing Operator"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; we talk more about globbing in <A
CLASS="xref"
HREF="ch06_10.htm"
TITLE="Matching Shell Globs as Regular Expressions"
>Recipe 6.9</A
>; <A
CLASS="xref"
HREF="ch09_08.htm"
TITLE="Processing All Files in a Directory Recursively"
>Recipe 9.7</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_06.htm"
TITLE="9.5. Processing All Files in a Directory"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.5. Processing All Files in a Directory"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_08.htm"
TITLE="9.7. Processing All Files in a Directory Recursively"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.7. Processing All Files in a Directory Recursively"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>9.5. Processing All Files in a Directory</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>9.7. Processing All Files in a Directory Recursively</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
