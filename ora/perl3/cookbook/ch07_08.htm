<HTML
><HEAD
>
<TITLE>Recipe 7.7. Writing a Filter (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:12Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"><LINK
REL="prev"
HREF="ch07_07.htm"
TITLE="7.6. Storing Files Inside Your Program Text"><LINK
REL="next"
HREF="ch07_09.htm"
TITLE="7.8. Modifying a File in Place with Temporary File"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_07.htm"
TITLE="7.6. Storing Files Inside Your Program Text"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.6. Storing Files Inside Your Program Text"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. File Access"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_09.htm"
TITLE="7.8. Modifying a File in Place with Temporary File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.8. Modifying a File in Place with Temporary File"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-39704"
>7.7. Writing a Filter</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-726"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-1000009627-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009627-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009627-2"
></A
>You want to write a program that takes a list of filenames on the command line and reads from STDIN if no filenames were given. You'd like the user to be able to give the file <CODE
CLASS="literal"
>&quot;-&quot;</CODE
> to indicate STDIN or <CODE
CLASS="literal"
>&quot;someprogram</CODE
> <CODE
CLASS="literal"
>|&quot;</CODE
> to indicate the output of another program. You might want your program to modify the files in place or to produce output based on its input.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-732"
>Solution</A
></H3
><P
CLASS="para"
>Read lines with &lt;&gt;: <A
CLASS="indexterm"
NAME="ch07-idx-1000009648-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009648-1"
></A
></P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    # do something with the line
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-744"
><CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch07-idx-1000012042-0"
></A
>iscussion</A
></H3
><P
CLASS="para"
>When you say:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    # ...
 }</PRE
><P
CLASS="para"
>Perl translates this into:[<A
CLASS="footnote"
HREF="#ch07-pgfId-1000001149"
>4</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-1000001149"
>[4]</A
> Except that the code written here won't work because ARGV has internal magic.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>unshift(@ARGV, '-') unless @ARGV;
while ($ARGV = shift @ARGV) {
    unless (open(ARGV, $ARGV)) {
        warn &quot;Can't open $ARGV: $!\n&quot;;
        next;
    }
    while (defined($_ = &lt;ARGV&gt;)) {
        # ...
    }
}</PRE
><P
CLASS="para"
>You can access <CODE
CLASS="literal"
>ARGV</CODE
> and <CODE
CLASS="literal"
>$ARGV</CODE
> inside the loop to read more from the filehandle or to find the filename currently being processed. Let's look at how this works.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-pgfId-1000007512"
>Behavior</A
></H4
><P
CLASS="para"
>If the user supplies no arguments, Perl sets <CODE
CLASS="literal"
>@ARGV</CODE
> to a single string, <CODE
CLASS="literal"
>&quot;-&quot;</CODE
>. This is shorthand for STDIN when opened for reading and STDOUT when opened for writing. It's also what lets the user of your program specify <CODE
CLASS="literal"
>&quot;-&quot;</CODE
> as a filename on the command line to read from STDIN.</P
><P
CLASS="para"
>Next, the file processing loop removes one argument at a time from <CODE
CLASS="literal"
>@ARGV</CODE
> and copies the filename into the global variable <CODE
CLASS="literal"
>$ARGV</CODE
>. If the file cannot be opened, Perl goes on to the next one. Otherwise, it processes a line at a time. When the file runs out, the loop goes back and opens the next one, repeating the process until <CODE
CLASS="literal"
>@ARGV</CODE
> is exhausted.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>open</CODE
> statement didn't say <CODE
CLASS="literal"
>open(ARGV,</CODE
> <CODE
CLASS="literal"
>&quot;&lt;</CODE
> <CODE
CLASS="literal"
>$ARGV&quot;)</CODE
>. There's no extra greater- than symbol supplied. This allows for interesting effects, like passing the string <CODE
CLASS="literal"
>&quot;gzip</CODE
> <CODE
CLASS="literal"
>-dc</CODE
> <CODE
CLASS="literal"
>file.gz</CODE
> <CODE
CLASS="literal"
>|&quot;</CODE
> as an argument, to make your program read the output of the command <CODE
CLASS="literal"
>&quot;gzip</CODE
> <CODE
CLASS="literal"
>-dc</CODE
> <CODE
CLASS="literal"
>file.gz&quot;</CODE
>. See Recipe 16.6 for more about this use of magic open.</P
><P
CLASS="para"
>You can change <CODE
CLASS="literal"
>@ARGV</CODE
> before or inside the loop. Let's say you don't want the default behavior of reading from STDIN if there aren't any arguments &nbsp;-  you want it to default to all the C or C++ source and header files. Insert this line before you start processing <CODE
CLASS="literal"
>&lt;ARGV&gt;</CODE
>:</P
><PRE
CLASS="programlisting"
>@ARGV = glob(&quot;*.[Cch]&quot;) unless @ARGV;</PRE
><P
CLASS="para"
>Process options before the loop, either with one of the Getopt libraries described in <A
CLASS="xref"
HREF="ch15_01.htm"
TITLE="User Interfaces"
>Chapter 15, <CITE
CLASS="chapter"
>User Interfaces</CITE
></A
>, or manually:</P
><PRE
CLASS="programlisting"
># arg demo 1: Process optional -c flag 
if (@ARGV &amp;&amp; $ARGV[0] eq '-c') { 
    $chop_first++;
    shift;
}

# arg demo 2: Process optional -NUMBER flag    
if (@ARGV &amp;&amp; $ARGV[0] =~ /^-(\d+)$/) { 
    $columns = $1; 
    shift;
}

# arg demo 3: Process clustering -a, -i, -n, or -u flags     
while (@ARGV &amp;&amp; $ARGV[0] =~ /^-(.+)/ &amp;&amp; (shift, ($_ = $1), 1)) { 
    next if /^$/; 
    s/a// &amp;&amp; (++$append,      redo);
    s/i// &amp;&amp; (++$ignore_ints, redo); 
    s/n// &amp;&amp; (++$nostdout,    redo); 
    s/u// &amp;&amp; (++$unbuffer,    redo); 
    die &quot;usage: $0 [-ainu] [filenames] ...\n&quot;;    
}</PRE
><P
CLASS="para"
>Other than its implicit looping over command-line arguments, <CODE
CLASS="literal"
>&lt;&gt;</CODE
> is not special. The special variables controlling I/O still apply; see <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="File Contents"
>Chapter 8</A
> for more on them. You can set <CODE
CLASS="literal"
>$/</CODE
> to set the line terminator, and <CODE
CLASS="literal"
>$.</CODE
> contains the current line (record) number. If you undefine <CODE
CLASS="literal"
>$/</CODE
>, you don't get the concatenated contents of all files at once; you get one complete file each time:</P
><PRE
CLASS="programlisting"
>undef $/;		     
while (&lt;&gt;) { 	
    # $_ now has the complete contents of 	
    # the file whose name is in $ARGV     
}</PRE
><P
CLASS="para"
>If you localize <CODE
CLASS="literal"
>$/</CODE
>, the old value is automatically restored when the enclosing block exits:</P
><PRE
CLASS="programlisting"
>{     # create block for local 	
    local $/;         # record separator now undef 	
    while (&lt;&gt;) { 	    
        # do something; called functions still have 	    
        # undeffed version of $/ 	
    }     
}                     # $/ restored here</PRE
><P
CLASS="para"
>Because processing <CODE
CLASS="literal"
>&lt;ARGV&gt;</CODE
> never explicitly closes filehandles, the record number in <CODE
CLASS="literal"
>$.</CODE
> is not reset. If you don't like that, you can explicitly close the file yourself to reset <CODE
CLASS="literal"
>$.</CODE
>:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) { 	
    print &quot;$ARGV:$.:$_&quot;; 	
    close ARGV if eof;     
}</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>The</CODE
> <CODE
CLASS="literal"
>eof</CODE
> <CODE
CLASS="literal"
>function</CODE
> defaults to checking the end of file status of the last file read. Since the last handle read was ARGV, <CODE
CLASS="literal"
>eof</CODE
> reports whether we're at the end of the current file. If so, we close it and reset the <CODE
CLASS="literal"
>$.</CODE
> variable. On the other hand, the special notation <CODE
CLASS="literal"
>eof()</CODE
> with parentheses but no argument checks if we've reached the end of all files in the <CODE
CLASS="literal"
>&lt;ARGV&gt;</CODE
> processing.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch07-pgfId-1000008252"
>Command-line options</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-1000009633-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009633-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009633-2"
></A
>Perl has command-line options, <B
CLASS="emphasis.bold"
>-n</B
>,<B
CLASS="emphasis.bold"
> -p</B
>,<B
CLASS="emphasis.bold"
> </B
>and <B
CLASS="emphasis.bold"
>-i</B
>, to make writing filters and one-liners easier.</P
><P
CLASS="para"
>The <B
CLASS="emphasis.bold"
>-n</B
> option adds the <CODE
CLASS="literal"
>while</CODE
> <CODE
CLASS="literal"
>(&lt;&gt;)</CODE
> loop around your program text. It's normally used for filters like <EM
CLASS="emphasis"
>grep</EM
> or programs that summarize the data they read. The program is shown in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="findlogin1"
>Example 7.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch07-34632"
>Example 7.1: findlogin1</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl   
# <A
CLASS="indexterm"
NAME="ch07-idx-1000009827-0"
></A
>findlogin1 - print all lines containing the string &quot;login&quot;   
while (&lt;&gt;) {# loop over files on command line 	
    print if /login/;     
}</PRE
></DIV
><P
CLASS="para"
>The program in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="findlogin1"
>Example 7.1</A
> could be written as shown in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="findlogin2"
>Example 7.2</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch07-36310"
>Example 7.2: findlogin2</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -n     
# findlogin2 - print all lines containing the string &quot;login&quot;     
print if /login/;</PRE
></DIV
><P
CLASS="para"
>You can combine the <B
CLASS="emphasis.bold"
>-n</B
> and <B
CLASS="emphasis.bold"
>-e</B
> options to run Perl code from the command line:</P
><PRE
CLASS="programlisting"
>% perl -ne 'print if /login/'</PRE
><P
CLASS="para"
>The <B
CLASS="emphasis.bold"
>-p</B
> option is like <B
CLASS="emphasis.bold"
>-n</B
> but it adds a <CODE
CLASS="literal"
>print</CODE
> at the end of the loop. It's normally used for programs that translate their input. This program is shown in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="lowercase1"
>Example 7.3</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch07-34498"
>Example 7.3: lowercase1</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl    
# <A
CLASS="indexterm"
NAME="ch07-idx-1000009830-0"
></A
>lowercase - turn all lines into lowercase

use locale;
while (&lt;&gt;) {                 # loop over lines on command line
    s/([^\W0-9_])/\l$1/g;    # change all letters to lowercase
print;
}</PRE
></DIV
><P
CLASS="para"
>The program in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="lowercase1"
>Example 7.3</A
> could be written as shown in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="lowercase2"
>Example 7.4</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch07-32154"
>Example 7.4: lowercase2</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -p     
# lowercase - turn all lines into lowercase     
use locale;     
s/([^\W0-9_])/\l$1/g;# change all letters to lowercase</PRE
></DIV
><P
CLASS="para"
>Or written from the command line as:</P
><PRE
CLASS="programlisting"
>% perl -Mlocale -pe 's/([^\W0-9_])/\l$1/g'</PRE
><P
CLASS="para"
>While using<B
CLASS="emphasis.bold"
> -n</B
> or <B
CLASS="emphasis.bold"
>-p</B
> for implicit input looping, the special label <A
CLASS="indexterm"
NAME="ch07-idx-1000012067-0"
></A
><CODE
CLASS="literal"
>LINE:</CODE
> is silently created for the whole input loop. That means that from an inner loop, you can go on the following input record by using <CODE
CLASS="literal"
>next</CODE
> <CODE
CLASS="literal"
>LINE</CODE
> (this is like <EM
CLASS="emphasis"
>awk  </EM
>'s <CODE
CLASS="literal"
>next</CODE
>). Go on to the file by closing ARGV (this is like <EM
CLASS="emphasis"
>awk</EM
>  's <CODE
CLASS="literal"
>nextfile</CODE
>). This is shown in <A
CLASS="xref"
HREF="ch07_08.htm"
TITLE="countchunks"
>Example 7.5</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch07-34027"
>Example 7.5: countchunks</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -n    
# <A
CLASS="indexterm"
NAME="ch07-idx-1000009833-0"
></A
>countchunks - count how many words are used.    
# skip comments, and bail on file if __END__   
# or __DATA__ seen.    
for (split /\W+/) { 
    next LINE if /^#/; 
    close ARGV if /__(DATA|END)__/; 
    $chunks++;     
}     
END { print &quot;Found $chunks chunks\n&quot; }</PRE
></DIV
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>tcsh</EM
> keeps a <EM
CLASS="emphasis"
>.history</EM
> file in a format such that every other line contains a commented out timestamp in Epoch seconds:</P
><PRE
CLASS="programlisting"
>#+0894382237     
less /etc/motd     
#+0894382239     
vi ~/.exrc     
#+0894382242     
date     
#+0894382242     
who     
#+0894382288     
telnet home</PRE
><P
CLASS="para"
>A simple one-liner can render that legible:</P
><PRE
CLASS="programlisting"
>% perl -pe 's/^#\+(\d+)\n/localtime($1) . &quot; &quot;/e' 
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Tue May  5 09:30:37 1998     less /etc/motd </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Tue May  5 09:30:39 1998     vi ~/.exrc </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Tue May  5 09:30:42 1998     date</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Tue May  5 09:30:42 1998     who </I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Tue May  5 09:31:28 1998     telnet home</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The <B
CLASS="emphasis.bold"
>-i</B
> option changes each file on the command line. It is described in <A
CLASS="xref"
HREF="ch07_10.htm"
TITLE="Modifying a File in Place with -i Switch"
>Recipe 7.9</A
>, and is normally used in conjunction with <B
CLASS="emphasis.bold"
>-p</B
>.</P
><P
CLASS="para"
>You have to say <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>locale</CODE
> to handle current character <A
CLASS="indexterm"
NAME="ch07-idx-1000009653-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009653-1"
></A
>set.<A
CLASS="indexterm"
NAME="ch07-idx-1000009629-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009629-1"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-1000009629-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-1000008971"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>perlrun </I
>(1), and the <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>"Switches"</A
> section of <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch07_10.htm"
TITLE="Modifying a File in Place with -i Switch"
>Recipe 7.9</A
>; Recipe 16.6</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_07.htm"
TITLE="7.6. Storing Files Inside Your Program Text"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.6. Storing Files Inside Your Program Text"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch07_09.htm"
TITLE="7.8. Modifying a File in Place with Temporary File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.8. Modifying a File in Place with Temporary File"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>7.6. Storing Files Inside Your Program Text</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>7.8. Modifying a File in Place with Temporary File</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
