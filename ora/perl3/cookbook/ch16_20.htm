<HTML
><HEAD
>
<TITLE>Recipe 16.19. Avoiding Zombie Processes (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:12Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_19.htm"
TITLE="16.18. Catching Ctrl-C"><LINK
REL="next"
HREF="ch16_21.htm"
TITLE="16.20. Blocking Signals"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_19.htm"
TITLE="16.18. Catching Ctrl-C"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.18. Catching Ctrl-C"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_21.htm"
TITLE="16.20. Blocking Signals"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.20. Blocking Signals"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-15019"
>16.19. Avoiding Zombie Processes</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005696"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006421-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006421-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006421-2"
></A
></A
></H3
><P
CLASS="para"
>Your program forks children, but the dead children accumulate, fill up your process table, and aggravate your system administrator.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005699"
>Solution</A
></H3
><P
CLASS="para"
>If you don't need to record the children that have terminated, use:</P
><PRE
CLASS="programlisting"
>$SIG{CHLD} = 'IGNORE';</PRE
><P
CLASS="para"
>To keep better track of deceased children, install a <A
CLASS="indexterm"
NAME="ch16-idx-1000006430-0"
></A
>SIGCHLD handler to call <CODE
CLASS="literal"
>waitpid</CODE
>:</P
><PRE
CLASS="programlisting"
>use POSIX &quot;:sys_wait_h&quot;;

$SIG{CHLD} = \&amp;REAPER;
sub REAPER {
    my $stiff;
    while (($stiff = waitpid(-1, &amp;WNOHANG)) &gt; 0) {
        # do something with $stiff if you want
    }
    $SIG{CHLD} = \&amp;REAPER;                  # install *after* calling waitpid
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005714"
>Discussion</A
></H3
><P
CLASS="para"
>When a process exits, the system keeps it in the process table so the parent can check its status&nbsp;- whether it terminated normally or abnormally. Fetching a child's status (thereby freeing it to drop from the system altogether) is rather grimly called <I
CLASS="firstterm"
>reaping</I
> dead children. (This entire recipe is full of ways to harvest your dead children. If this makes you queasy, we understand.) It involves a call to <CODE
CLASS="literal"
>wait</CODE
> or <CODE
CLASS="literal"
>waitpid </CODE
>. Some Perl functions (piped <CODE
CLASS="literal"
>open</CODE
>s, <CODE
CLASS="literal"
>system </CODE
>, and backticks) will automatically reap the children they make, but you must explicitly wait when you use <CODE
CLASS="literal"
>fork</CODE
> to manually start another process.</P
><P
CLASS="para"
>To avoid accumulating dead children, simply tell the system that you're not interested in them by setting <CODE
CLASS="literal"
>$SIG{CHLD}</CODE
> to <CODE
CLASS="literal"
>&quot;IGNORE&quot;</CODE
>. If you want to know which children die and when, you'll need to use <CODE
CLASS="literal"
>waitpid</CODE
>.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>waitpid</CODE
><A
CLASS="indexterm"
NAME="ch16-idx-1000006431-0"
></A
> function reaps a single process. Its first argument is the process to wait for&nbsp;- use <CODE
CLASS="literal"
>-1</CODE
> to mean any process&nbsp;- and its second argument is a set of flags. We use the WNOHANG flag to make <CODE
CLASS="literal"
>waitpid</CODE
> immediately return <CODE
CLASS="literal"
>0</CODE
> if there are no dead children. A flag value of <CODE
CLASS="literal"
>0</CODE
> is supported everywhere, indicating a blocking wait. Call <CODE
CLASS="literal"
>waitpid</CODE
> from a SIGCHLD handler, as we do in the Solution, to reap the children as soon as they die.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000006432-0"
></A
>The <CODE
CLASS="literal"
>wait</CODE
> function also reaps children, but it does not have a non-blocking option. If you inadvertently call it when there are running child processes but none have exited, your program will pause until there is a dead child.</P
><P
CLASS="para"
>Because the kernel keeps track of undelivered signals using a bit vector, one bit per signal, if two children die before your process is scheduled, you will get only a single SIGCHLD. You must always loop when you reap in a SIGCHLD handler, and so you can't use <CODE
CLASS="literal"
>wait</CODE
>.</P
><P
CLASS="para"
>Both <CODE
CLASS="literal"
>wait</CODE
> and <CODE
CLASS="literal"
>waitpid</CODE
> return the process ID that they just reaped and set <CODE
CLASS="literal"
>$?</CODE
> to the wait status of the defunct process. This status is actually two 8-bit values in one 16-bit number. The high byte is the exit value of the process. The low 7 bits represent the number of the signal that killed the process, with the 8th bit indicating whether a core dump occurred. Here's one way to isolate those values:</P
><PRE
CLASS="programlisting"
>$exit_value  = $? &gt;&gt; 8;
$signal_num  = $? &amp; 127;
$dumped_core = $? &amp; 128;</PRE
><P
CLASS="para"
>The standard POSIX module has macros to interrogate status values: WIFEXITED, WEXITSTATUS, WIFSIGNALLED, and WTERMSIG. Oddly enough, POSIX doesn't have a macro to test whether the process core dumped.</P
><P
CLASS="para"
>Beware of two things when using SIGCHLD. First, the system doesn't just send a SIGCHLD when a child exits; it also sends one when the child stops. A process can stop for many reasons&nbsp;- waiting to be foregrounded so it can do terminal I/O, being sent a SIGSTOP (it will wait for the SIGCONT before continuing), or being suspended from its terminal. You need to check the status with the <CODE
CLASS="literal"
>WIFEXITED</CODE
>[<A
CLASS="footnote"
HREF="#ch16-pgfId-1000005731"
>1</A
>] function from the POSIX module to make sure you're dealing with a process that really died, and isn't just suspended.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch16-pgfId-1000005731"
>[1]</A
> Not <CODE
CLASS="literal"
>SPOUSEXITED</CODE
>, even on a PC.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>use POSIX qw(:signal_h :errno_h :sys_wait_h);

$SIG{CHLD} = \&amp;REAPER;
sub REAPER {
    my $pid;

    $pid = waitpid(-1, &amp;WNOHANG);

    if ($pid == -1) {
        # no child waiting.  Ignore it.
    } elsif (WIFEXITED($?)) {
        print &quot;Process $pid exited.\n&quot;;
    } else {
        print &quot;False alarm on $pid.\n&quot;;
    }
    $SIG{CHLD} = \&amp;REAPER;          # in case of unreliable signals
}</PRE
><P
CLASS="para"
>The second trap with SIGCHLD is related to Perl, not the operating system. Because <CODE
CLASS="literal"
>system </CODE
>, <CODE
CLASS="literal"
>open</CODE
>, and backticks all fork subprocesses and the operating system sends your process a SIGCHLD whenever any of its subprocesses exit, you could get called for something you weren't expecting. The built-in operations all wait for the child themselves, so sometimes the SIGCHLD will arrive before the <CODE
CLASS="literal"
>close</CODE
> on the filehandle blocks to reap it. If the signal handler gets to it first, the zombie won't be there for the normal close. This makes <CODE
CLASS="literal"
>close</CODE
> return false and set <CODE
CLASS="literal"
>$!</CODE
> to <CODE
CLASS="literal"
>&quot;No</CODE
> <CODE
CLASS="literal"
>child</CODE
> <CODE
CLASS="literal"
>processes&quot;</CODE
>. Then, if the <CODE
CLASS="literal"
>close</CODE
> gets to the dead child first, <CODE
CLASS="literal"
>waitpid</CODE
> will return <CODE
CLASS="literal"
>0</CODE
>.</P
><P
CLASS="para"
>Most systems support a non-blocking <CODE
CLASS="literal"
>waitpid </CODE
>. Use Perl's standard Config.pm module to find out:</P
><PRE
CLASS="programlisting"
>use Config;
$has_nonblocking = $Config{d_waitpid} eq &quot;define&quot; ||
                   $Config{d_wait4}   eq &quot;define&quot;;</PRE
><P
CLASS="para"
>System V defines SIGCLD, which has the same signal number as SIGCHLD but subtly different semantics. Use SIGCHLD to avoid confusion.<A
CLASS="indexterm"
NAME="ch16-idx-1000006423-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006423-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006423-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006423-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000008386"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch06_02.htm"
>"Signals"</A
> sections in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlipc </I
>(1); the <A
CLASS="olink"
HREF="../prog/ch03_189.htm"
><CODE
CLASS="literal"
>wait</CODE
></A
> and <A
CLASS="olink"
HREF="../prog/ch03_190.htm"
><CODE
CLASS="literal"
>waitpid</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); the documentation for the standard POSIX module, in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; your system's <I
CLASS="filename"
>sigaction </I
>(2), <I
CLASS="filename"
>signal</I
> (3), and <I
CLASS="filename"
>kill</I
> (2) manpages (if you have them); <A
CLASS="xref"
HREF="ch16_18.htm"
TITLE="Writing a Signal Handler"
>Recipe 16.17</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_19.htm"
TITLE="16.18. Catching Ctrl-C"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.18. Catching Ctrl-C"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_21.htm"
TITLE="16.20. Blocking Signals"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.20. Blocking Signals"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>16.18. Catching Ctrl-C</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>16.20. Blocking Signals</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
