<HTML
><HEAD
>
<TITLE>Recipe 12.5. Determining the Caller's Package (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:41:33Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_05.htm"
TITLE="12.4. Making Variables Private to a Module"><LINK
REL="next"
HREF="ch12_07.htm"
TITLE="12.6. Automating Module Clean-Up"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.4. Making Variables Private to a Module"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.4. Making Variables Private to a Module"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_07.htm"
TITLE="12.6. Automating Module Clean-Up"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.6. Automating Module Clean-Up"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-chap12_determining_0"
>12.5. Determining the Caller's Package</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-716"
>Problem<A
CLASS="indexterm"
NAME="ch12-idx-1000005210-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005210-1"
></A
></A
></H3
><P
CLASS="para"
>You need to find out the current or calling package.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-722"
>Solution</A
></H3
><P
CLASS="para"
>To find the current package:</P
><PRE
CLASS="programlisting"
>$this_pack = __PACKAGE__;</PRE
><P
CLASS="para"
>To find the <A
CLASS="indexterm"
NAME="ch12-idx-1000005227-0"
></A
>caller's package:</P
><PRE
CLASS="programlisting"
>$that_pack = caller();</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-734"
>Discussion</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>__PACKAGE__</CODE
> symbol returns the package that the code is currently being compiled into. This doesn't interpolate into double-quoted strings:</P
><PRE
CLASS="programlisting"
>print &quot;I am in package __PACKAGE__\n&quot;;              # WRONG!
<B
CLASS="emphasis.bold"
>I am in package __PACKAGE__</B
></PRE
><P
CLASS="para"
>Needing to figure out the caller's package arose more often in older code that received as input a string of code to be <CODE
CLASS="literal"
>eval</CODE
>uated, or a filehandle, format, or directory handle name. Consider a call to a hypothetical <CODE
CLASS="literal"
>runit</CODE
> function:</P
><PRE
CLASS="programlisting"
>package Alpha;
runit('$line = &lt;TEMP&gt;');

package Beta;
sub runit {
    my $codestr = shift;
    eval $codestr;
    die if $@;
}</PRE
><P
CLASS="para"
>Because <CODE
CLASS="literal"
>runit</CODE
> was compiled in a different package than was currently executing, when the <CODE
CLASS="literal"
>eval</CODE
> runs, it will act as though it were passed <CODE
CLASS="literal"
>$Beta::line</CODE
> and <CODE
CLASS="literal"
>Beta::TEMP</CODE
>. The old workaround was to include your caller's package first:</P
><PRE
CLASS="programlisting"
>package Beta;
sub runit {
    my $codestr = shift;
    my $hispack = caller;
    eval &quot;package $hispack; $codestr&quot;;
    die if $@;
}</PRE
><P
CLASS="para"
>That approach only works when <CODE
CLASS="literal"
>$line</CODE
> is a global variable. If it's lexical, that won't help at all. Instead, arrange for <CODE
CLASS="literal"
>runit</CODE
> to accept a reference to a subroutine:</P
><PRE
CLASS="programlisting"
>package Alpha;
runit( sub { $line = &lt;TEMP&gt; } );

package Beta;
sub runit {
    my $coderef = shift;
    &amp;$coderef();
}</PRE
><P
CLASS="para"
>This not only works with lexicals, it has the added benefit of checking the code's syntax at compile time, which is a major win.</P
><P
CLASS="para"
>If all that's being passed in is a filehandle, it's more portable to use the <CODE
CLASS="literal"
>Symbol::qualify</CODE
><A
CLASS="indexterm"
NAME="ch12-idx-1000005220-0"
></A
> function. This function takes a name and package to qualify the name into. If the name needs qualification, it fixes it; otherwise, it's left alone. But that's considerably less efficient than a <CODE
CLASS="literal"
>*</CODE
> prototype.</P
><P
CLASS="para"
>Here's an example that reads and returns <EM
CLASS="emphasis"
>n</EM
> lines from a filehandle. The function qualifies the handle before working with it.</P
><PRE
CLASS="programlisting"
>open (FH, &quot;&lt; /etc/termcap&quot;)
    or die &quot;can't open /etc/termcap: $!&quot;;
($a, $b, $c) = nreadline(3, 'FH');

use Symbol ();
use Carp;
sub nreadline {
    my ($count, $handle) = @_;
    my(@retlist,$line);

    croak &quot;count must be &gt; 0&quot; unless $count &gt; 0;
    $handle = Symbol::qualify($handle, (<CODE
CLASS="literal"
>caller()</CODE
>)[0]);
    croak &quot;need open filehandle&quot; unless defined fileno($handle);

    push(@retlist, $line) while defined($line = &lt;$handle&gt;) &amp;&amp; $count--;
    return @retlist;
}</PRE
><P
CLASS="para"
>If everyone who called your <CODE
CLASS="literal"
>nreadline</CODE
> function <A
CLASS="indexterm"
NAME="ch12-idx-1000006218-0"
></A
>passed in the filehandle as a typeglob <CODE
CLASS="literal"
>*FH</CODE
>, as a glob reference <CODE
CLASS="literal"
>\*FH</CODE
>, or using FileHandle or IO::Handle objects, you wouldn't need to do this. It's only the possibility of a bare <CODE
CLASS="literal"
>&quot;FH&quot;</CODE
> that requires qualification.<A
CLASS="indexterm"
NAME="ch12-idx-1000005212-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-1000005916"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard Symbol module, also found in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the descriptions of the special symbols <CODE
CLASS="literal"
>__FILE__ </CODE
>, <CODE
CLASS="literal"
>__LINE__</CODE
> , and <CODE
CLASS="literal"
>__PACKAGE__</CODE
> in <I
CLASS="filename"
>perldata</I
> (1); <A
CLASS="xref"
HREF="ch12_13.htm"
TITLE="Reporting Errors and Warnings Like Built-Ins"
>Recipe 12.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.4. Making Variables Private to a Module"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.4. Making Variables Private to a Module"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_07.htm"
TITLE="12.6. Automating Module Clean-Up"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.6. Automating Module Clean-Up"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>12.4. Making Variables Private to a Module</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>12.6. Automating Module Clean-Up</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
