<HTML
><HEAD
>
<TITLE>Recipe 5.8. Inverting a Hash (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:44Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"><LINK
REL="prev"
HREF="ch05_08.htm"
TITLE="5.7. Hashes with Multiple Values Per Key"><LINK
REL="next"
HREF="ch05_10.htm"
TITLE="5.9. Sorting a Hash"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_08.htm"
TITLE="5.7. Hashes with Multiple Values Per Key"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.7. Hashes with Multiple Values Per Key"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_10.htm"
TITLE="5.9. Sorting a Hash"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.9. Sorting a Hash"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-38091"
>5.8. Inverting a Hash</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-786"
>Problem <A
CLASS="indexterm"
NAME="ch05-idx-1000006481-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006481-1"
></A
></A
></H3
><P
CLASS="para"
>Hashes map keys to values. You have a hash and a value for which you want to find the corresponding key.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-792"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>reverse</CODE
> to create an inverted hash whose values are the original hash's keys and vice versa.</P
><PRE
CLASS="programlisting"
># %LOOKUP maps keys to values
%REVERSE = reverse %LOOKUP;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-802"
>Discussion</A
></H3
><P
CLASS="para"
>This technique uses the list equivalence of hashes mentioned in the introduction. In list context, <CODE
CLASS="literal"
>reverse</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000006487-0"
></A
> treats <CODE
CLASS="literal"
>%LOOKUP</CODE
> as a list and reverses the order of its elements. The significant property of a hash treated as a list is that the list elements come in pairs: the first element is the key; the second, the value. When you <CODE
CLASS="literal"
>reverse</CODE
> such a list, the first element is the value, and the second is a key. Treating <EM
CLASS="emphasis"
>this</EM
> list as a hash results in a hash whose values are the keys of the original hash and vice versa.</P
><P
CLASS="para"
>Here's an example:</P
><PRE
CLASS="programlisting"
>%surname = ( &quot;Mickey&quot; =&gt; &quot;Mantle&quot;, &quot;Babe&quot; =&gt; &quot;Ruth&quot; );
%first_name = reverse %surname;
print $first_name{&quot;Mantle&quot;}, &quot;\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Mickey</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>When we treat <CODE
CLASS="literal"
>%surname</CODE
> as a list, it becomes:</P
><PRE
CLASS="programlisting"
>(&quot;Mickey&quot;, &quot;Mantle&quot;, &quot;Babe&quot;, &quot;Ruth&quot;)</PRE
><P
CLASS="para"
>(or maybe <CODE
CLASS="literal"
>(&quot;Babe&quot;,</CODE
> <CODE
CLASS="literal"
>&quot;Ruth&quot;,</CODE
> <CODE
CLASS="literal"
>&quot;Mickey&quot;,</CODE
> <CODE
CLASS="literal"
>&quot;Mantle&quot;)</CODE
> because we can't predict the order). Reversing this list gives us:</P
><PRE
CLASS="programlisting"
>(&quot;Ruth&quot;, &quot;Babe&quot;, &quot;Mantle&quot;, &quot;Mickey&quot;)</PRE
><P
CLASS="para"
>When we treat this list as a hash, it becomes:</P
><PRE
CLASS="programlisting"
>(&quot;Ruth&quot; =&gt; &quot;Babe&quot;, &quot;Mantle&quot; =&gt; &quot;Mickey&quot;)</PRE
><P
CLASS="para"
>Now instead of turning first names into surnames, it turns surnames into first names.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch05_09.htm"
TITLE="foodfind"
>Example 5.2</A
> is a program called <CODE
CLASS="literal"
>foodfind</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000006488-0"
></A
>. If you give it a food name, it'll tell you the color of that food. If you give it a color, it'll tell you a food of that color.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch05-18605"
>Example 5.2: foodfind</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# foodfind - find match for food or color

$given = shift @ARGV or die &quot;usage: foodfind food_or_color\n&quot;;

%color = ( 
           &quot;Apple&quot;  =&gt; &quot;red&quot;,
           &quot;Banana&quot; =&gt; &quot;yellow&quot;,
           &quot;Lemon&quot;  =&gt; &quot;yellow&quot;,
           &quot;Carrot&quot; =&gt; &quot;orange&quot;
         );

    %food = reverse %color;

    if (exists $color{$given}) {
    print &quot;$given is a food with color $color{$given}.\n&quot;;
    }
    if (exists $food{$given}) {
    print &quot;$food{$given} is a food with color $given.\n&quot;;
    }</PRE
></DIV
><P
CLASS="para"
>If two keys in the original hash have the same value (as <CODE
CLASS="literal"
>&quot;Lemon&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;Banana&quot;</CODE
> do in the color example), then the inverted hash will only have one (which is dependent on the hashing order, and you shouldn't try to predict it). This is because hashes have, by Perl definition, unique keys.</P
><P
CLASS="para"
>If you want to invert a hash with non-unique values, you must use the techniques shown in <A
CLASS="xref"
HREF="ch05_08.htm"
TITLE="Hashes with Multiple Values Per Key"
>Recipe 5.7</A
>. That is, build up a hash whose values are a list of keys in the original hash:</P
><PRE
CLASS="programlisting"
># %food_color as per the introduction
while (($food,$color) = each(%food_color)) {
    push(@{$foods_with_color{$color}}, $food);
}

print &quot;@{$foods_with_color{yellow}} were yellow foods.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Banana Lemon were yellow foods.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>This also lets us change the <CODE
CLASS="literal"
>foodfind</CODE
> program to handle colors represented by more than one food. For instance, <CODE
CLASS="literal"
>foodfind</CODE
> <CODE
CLASS="literal"
>yellow</CODE
> reports bananas and lemons.</P
><P
CLASS="para"
>If any values in the original hash were references instead of just strings and numbers, the inverted hash poses a problem because references don't work well as hash keys unless you use the Tie::RefHash module described in <A
CLASS="xref"
HREF="ch05_13.htm"
TITLE="Hashing References"
>Recipe 5.12</A
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-894"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>reverse</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Creating Magic Variables with tie"
>Recipe 13.15</A
> <A
CLASS="indexterm"
NAME="ch05-idx-1000006483-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006483-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_08.htm"
TITLE="5.7. Hashes with Multiple Values Per Key"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.7. Hashes with Multiple Values Per Key"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_10.htm"
TITLE="5.9. Sorting a Hash"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.9. Sorting a Hash"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>5.7. Hashes with Multiple Values Per Key</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>5.9. Sorting a Hash</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
