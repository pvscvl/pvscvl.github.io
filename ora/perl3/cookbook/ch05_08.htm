<HTML
><HEAD
>
<TITLE>Recipe 5.7. Hashes with Multiple Values Per Key (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:39Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"><LINK
REL="prev"
HREF="ch05_07.htm"
TITLE="5.6. Retrieving from a Hash in Insertion Order"><LINK
REL="next"
HREF="ch05_09.htm"
TITLE="5.8. Inverting a Hash"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_07.htm"
TITLE="5.6. Retrieving from a Hash in Insertion Order"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.6. Retrieving from a Hash in Insertion Order"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_09.htm"
TITLE="5.8. Inverting a Hash"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.8. Inverting a Hash"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-12773"
>5.7. Hashes with Multiple Values Per Key</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-684"
>Problem <A
CLASS="indexterm"
NAME="ch05-idx-1000006470-0"
></A
></A
></H3
><P
CLASS="para"
>You want to store more than one value for each key.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-690"
>Solution</A
></H3
><P
CLASS="para"
>Store an array reference in <CODE
CLASS="literal"
>$hash{$key}</CODE
>, and put the values into that array.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-696"
>Discussion</A
></H3
><P
CLASS="para"
>You can only store scalar values in a hash. References, however, are scalars. This solves the problem of storing multiple values for one key by making <CODE
CLASS="literal"
>$hash{$key}</CODE
> a reference to an array containing values for <CODE
CLASS="literal"
>$key</CODE
>. The normal hash operations &nbsp;-  insertion, deletion, iteration, and testing for existence &nbsp;-  can now be written in terms of array operations like <CODE
CLASS="literal"
>push</CODE
>, <CODE
CLASS="literal"
>splice</CODE
>, and <CODE
CLASS="literal"
>foreach</CODE
>.</P
><P
CLASS="para"
>This code shows simple insertion into the hash. It processes the output of <I
CLASS="filename"
>who </I
>(1) on Unix machines and outputs a terse listing of users and the ttys they're logged in on:</P
><PRE
CLASS="programlisting"
>%ttys = ();

open(WHO, &quot;who|&quot;)                   or die &quot;can't open who: $!&quot;;
while (&lt;WHO&gt;) {
    ($user, $tty) = split;
    push( @{$ttys{$user}}, $tty );
}

foreach $user (sort keys %ttys) {
    print &quot;$user: @{$ttys{$user}}\n&quot;;
}</PRE
><P
CLASS="para"
>The heart of the code is the <CODE
CLASS="literal"
>push</CODE
> line, the multihash version of <CODE
CLASS="literal"
>$ttys{$user}</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>$tty</CODE
>. We interpolate all the tty names in the <CODE
CLASS="literal"
>print</CODE
> line with <CODE
CLASS="literal"
>@{$ttys{$user}}</CODE
>. We'd loop over the anonymous array if, for instance, we wanted to print the owner of each tty:</P
><PRE
CLASS="programlisting"
>foreach $user (sort keys %ttys) {
    print &quot;$user: &quot;, scalar( @{$ttys{$user}} ), &quot; ttys.\n&quot;;
    foreach $tty (sort @{$ttys{$user}}) {
        @stat = stat(&quot;/dev/$tty&quot;);
        $user = @stat ? ( getpwuid($stat[4]) )[0] : &quot;(not available)&quot;;
        print &quot;\t$tty (owned by $user)\n&quot;;
    }
}</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000006480-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006480-1"
></A
>The <CODE
CLASS="literal"
>exists</CODE
> function can have two meanings: "Is there at least one value for this key?" and "Does this value exist for this key?" Implementing the second approach requires searching the array for the value. The <CODE
CLASS="literal"
>delete</CODE
> function and the first sense of <CODE
CLASS="literal"
>exists</CODE
> are interrelated: If we can guarantee that no anonymous array is ever empty, we can use the built-in <CODE
CLASS="literal"
>exists</CODE
>. We ensure that no anonymous array is ever empty by checking for such a situation after deleting an element:</P
><PRE
CLASS="programlisting"
>sub multihash_delete {
    my ($hash, $key, $value) = @_;
    my $i;

    return unless ref( $hash-&gt;{$key} );
    for ($i = 0; $i &lt; @{ $hash-&gt;{$key} }; $i++) {
        if ($hash-&gt;{$key}-&gt;[$i] eq $value) {
            splice( @{$hash-&gt;{$key}}, $i, 1);
            last;
        }
    }

    delete $hash-&gt;{$key} unless @{$hash-&gt;{$key}};
}</PRE
><P
CLASS="para"
>The alternative approach to multivalued hashes is given in <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="Classes, Objects, and Ties"
>Chapter 13, <CITE
CLASS="chapter"
>Classes, Objects, and Ties</CITE
></A
>, implemented as tied normal hashes.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-776"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>splice</CODE
>, <CODE
CLASS="literal"
>delete</CODE
>, <CODE
CLASS="literal"
>push</CODE
>, <CODE
CLASS="literal"
>foreach</CODE
>, and <CODE
CLASS="literal"
>exists</CODE
> functions in <EM
CLASS="emphasis"
>perlf</EM
><I
CLASS="filename"
>unc</I
> (1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch11_02.htm"
TITLE="Taking References to Arrays"
>Recipe 11.1</A
>; we cover ties in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Creating Magic Variables with tie"
>Recipe 13.15</A
> <A
CLASS="indexterm"
NAME="ch05-idx-1000006472-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_07.htm"
TITLE="5.6. Retrieving from a Hash in Insertion Order"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.6. Retrieving from a Hash in Insertion Order"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_09.htm"
TITLE="5.8. Inverting a Hash"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.8. Inverting a Hash"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>5.6. Retrieving from a Hash in Insertion Order</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>5.8. Inverting a Hash</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
