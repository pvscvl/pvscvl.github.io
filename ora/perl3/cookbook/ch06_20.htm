<HTML
><HEAD
>
<TITLE>Recipe 6.19. Matching a Valid Mail Address (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:04Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_19.htm"
TITLE="6.18. Matching Multiple-Byte Characters"><LINK
REL="next"
HREF="ch06_21.htm"
TITLE="6.20. Matching Abbreviations"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_19.htm"
TITLE="6.18. Matching Multiple-Byte Characters"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.18. Matching Multiple-Byte Characters"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_21.htm"
TITLE="6.20. Matching Abbreviations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.20. Matching Abbreviations"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-chap06_matching_6"
>6.19. Matching a Valid Mail Address</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2365"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007717-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007717-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007717-2"
></A
></A
></H3
><P
CLASS="para"
>You want to find a pattern that will verify the validity of a supplied mail address.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2371"
>Solution</A
></H3
><P
CLASS="para"
>There isn't one. You cannot do real-time validation of mail addresses. You must pick from a number of compromises.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2377"
>Discussion</A
></H3
><P
CLASS="para"
>The common patterns that people try to use for this are all quite incorrect. As an example, the address <CODE
CLASS="literal"
>fred&amp;barney@stonehenge.com</CODE
> is valid and deliverable (as of this writing), but most patterns that allegedly match valid mail addresses fail miserably.</P
><P
CLASS="para"
>RFC-822 documents have a formal specification for what constitutes a syntactically valid mail address. However, complete processing requires recursive parsing of nested comments, something that one single regular expression cannot do. If you first strip off legal comments:</P
><PRE
CLASS="programlisting"
>1 while $addr =~ s/\([^()]*\)//g;</PRE
><P
CLASS="para"
>You could then in theory use the 6598-byte pattern given on the last page of <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
> to test for RFC-conformance, but that's still not good enough, for three reasons.</P
><P
CLASS="para"
>First, not all RFC-valid address are deliverable. For example, <CODE
CLASS="literal"
>foo@foo.foo.foo.foo</CODE
> is valid in form, but in practice is not deliverable. Some people try to do DNS lookups for MX records, even trying to connect to the host handling that address's mail to check if it's valid at that site. This is a poor approach because most sites can't do a direct connect to any other site, and even if they could, mail receiving sites increasingly either ignore the SMTP VRFY command or fib about its answer.</P
><P
CLASS="para"
>Second, some RFC-invalid addresses, in practice, are perfectly deliverable. For example, a lone <CODE
CLASS="literal"
>postmaster</CODE
> is almost certainly deliverable but doesn't pass RFC-822 muster. It doesn't have an <CODE
CLASS="literal"
>@</CODE
> in it.</P
><P
CLASS="para"
>Thirdly and most important, just because the address happens to be both valid and deliverable doesn't mean that it's the right one. <CODE
CLASS="literal"
>president@whitehouse.gov</CODE
>, for example, is valid by the RFC and deliverable. But it's very unlikely that would really be the mail address of the person submitting information to your CGI script.</P
><P
CLASS="para"
>The script at <A
CLASS="systemitem.url"
HREF="../../../../../../www.perl.com/CPAN/authors/Tom_Christiansen/scripts/ckaddr.gz"
>http://www.perl.com/CPAN/authors/Tom_Christiansen/scripts/ckaddr.gz</A
> makes a valiant (albeit provably imperfect) attempt at doing this incorrectly. It jumps through many hoops, including the RFC-822 regular expression from <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
>, DNS MX record look-up, and stop lists for naughty words and famous people. But this is still a very weak approach.</P
><P
CLASS="para"
>Our best advice for verifying a person's mail address is to have them enter their address twice, just as you would when changing a password. This usually weeds out typos. If both versions match, send mail to that address with a personal message such as:</P
><PRE
CLASS="programlisting"
>Dear someuser@host.com,

Please confirm the mail address you gave us Wed May  6 09:38:41
MDT 1998 by replying to this message.  Include the string
&quot;Rumpelstiltskin&quot; in that reply, but spelled in reverse; that is,
start with &quot;Nik...&quot;.  Once this is done, your confirmed address will
be entered into our records.</PRE
><P
CLASS="para"
>If you get the message back and they've followed your directions, you can be reasonably assured that it's real.</P
><P
CLASS="para"
>A related strategy that's less open to forgery is to give them a PIN (personal identification number). Record the address and PIN (preferably a random one) for later processing. In the mail you send, ask them to include the PIN in their reply. If it bounces, or the message is included via a vacation script, it'll be there anyway. So ask them to mail back the PIN slightly altered, such as with the characters reversed, one added or subtracted to each digit, etc.<A
CLASS="indexterm"
NAME="ch06-idx-1000007719-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007719-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007719-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007719-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-2415"
>See Also</A
></H3
><P
CLASS="para"
>The "Matching an Email Address" section of Chapter 7 of <CITE
CLASS="citetitle"
>Mastering Regular Expressions</CITE
>; <A
CLASS="xref"
HREF="ch18_10.htm"
TITLE="Program: expn and vrfy"
>Recipe 18.9</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_19.htm"
TITLE="6.18. Matching Multiple-Byte Characters"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.18. Matching Multiple-Byte Characters"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_21.htm"
TITLE="6.20. Matching Abbreviations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.20. Matching Abbreviations"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>6.18. Matching Multiple-Byte Characters</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>6.20. Matching Abbreviations</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
