<HTML
><HEAD
>
<TITLE>Recipe 10.12. Handling Exceptions (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:00Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_12.htm"
TITLE="10.11. Prototyping Functions"><LINK
REL="next"
HREF="ch10_14.htm"
TITLE="10.13. Saving Global Values"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_12.htm"
TITLE="10.11. Prototyping Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.11. Prototyping Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_14.htm"
TITLE="10.13. Saving Global Values"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.13. Saving Global Values"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-34783"
>10.12. Handling Exceptions</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-944"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000004720-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004720-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004720-2"
></A
>How do you safely call a function that might raise an exception? How do you create a function that raises an exception?</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-950"
>Solution</A
></H3
><P
CLASS="para"
>Sometimes you encounter a problem so exceptional that merely returning an error isn't strong enough, because the caller could ignore the error. Use <CODE
CLASS="literal"
>die</CODE
><A
CLASS="indexterm"
NAME="ch10-idx-1000004721-0"
></A
> <CODE
CLASS="literal"
>STRING</CODE
> from your function to trigger an exception:</P
><PRE
CLASS="programlisting"
>die &quot;some message&quot;;         # raise exception</PRE
><P
CLASS="para"
>The caller can wrap the function call in an <CODE
CLASS="literal"
>eval</CODE
> to intercept that exception, and then consult the special variable <CODE
CLASS="literal"
>$@</CODE
> to see what happened:</P
><PRE
CLASS="programlisting"
>eval { func() };
if ($@) {
    warn &quot;func raised an exception: $@&quot;;
} </PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-968"
>Discussion</A
></H3
><P
CLASS="para"
>Raising exceptions is not a facility to be used lightly. Most functions should return an error using a bare <CODE
CLASS="literal"
>return</CODE
> statement. Wrapping every call in a trap is tedious and unsightly, removing the appeal of using exceptions in the first place.</P
><P
CLASS="para"
>But on rare occasion, failure in a function should cause the entire program to abort. Rather than calling the irrecoverable <CODE
CLASS="literal"
>exit</CODE
> function, you should call <CODE
CLASS="literal"
>die</CODE
> instead, which at least gives the programmer the chance to cope. If no exception handler has been installed via <CODE
CLASS="literal"
>eval</CODE
>, then the program aborts at that point.</P
><P
CLASS="para"
>To detect such a failure program, wrap the call to the function with a block <CODE
CLASS="literal"
>eval</CODE
>. The <CODE
CLASS="literal"
>$@</CODE
> variable will be set to the offending exception if one occurred; otherwise, it will be false.</P
><PRE
CLASS="programlisting"
>eval { $val = func() };
warn &quot;func blew up: $@&quot; if $@;</PRE
><P
CLASS="para"
>Any <CODE
CLASS="literal"
>eval</CODE
> catches all exceptions, not just specific ones. Usually you should propagate unexpected exceptions to an enclosing hander. For example, suppose your function raised an exception containing the string <CODE
CLASS="literal"
>&quot;Full</CODE
> <CODE
CLASS="literal"
>moon!&quot;</CODE
>. You could safely trap that exception while letting the others through by inspecting the <CODE
CLASS="literal"
>$@</CODE
> variable. Calling <CODE
CLASS="literal"
>die</CODE
> without an argument uses the contents of <CODE
CLASS="literal"
>$@</CODE
> and the current context to construct a new exception string.</P
><PRE
CLASS="programlisting"
>eval { $val = func() };
if ($@ &amp;&amp; $@ !~ /Full moon!/) {
    die;    # re-raise unknown errors
}</PRE
><P
CLASS="para"
>If the function is part of a module, consider using the Carp module and call <CODE
CLASS="literal"
>croak</CODE
> or <CODE
CLASS="literal"
>confess</CODE
> instead of <CODE
CLASS="literal"
>die</CODE
>. The only difference between <CODE
CLASS="literal"
>die</CODE
> and <CODE
CLASS="literal"
>croak</CODE
> is that with <CODE
CLASS="literal"
>croak</CODE
>, the error appears to be from the caller's perspective, not the module's. The <CODE
CLASS="literal"
>confess</CODE
> function, on the other hand, creates a full stack backtrace of who called whom and with what arguments.</P
><P
CLASS="para"
>Another intriguing possibility is for the function to detect that its return value is being completely ignored; that is, it is being called in a void context. In that case, returning an error indication would be useless, so raise an exception instead.</P
><P
CLASS="para"
>Of course, just because it's not voided doesn't mean the return value is being dealt with appropriately. But if it is voided, it's certainly not being checked.</P
><PRE
CLASS="programlisting"
>if (defined wantarray()) {
        return;
} else {
    die &quot;pay attention to my error!&quot;;
}<A
CLASS="indexterm"
NAME="ch10-idx-1000004723-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004723-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004723-2"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1008"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch02_09.htm"
><CODE
CLASS="literal"
>$@</CODE
></A
> variable in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and <I
CLASS="filename"
>perlvar </I
>(1); the <A
CLASS="olink"
HREF="../prog/ch03_027.htm"
><CODE
CLASS="literal"
>die</CODE
></A
> and  <A
CLASS="olink"
HREF="../prog/ch03_032.htm"
><CODE
CLASS="literal"
>eval</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and <I
CLASS="filename"
>perlfunc </I
>(1); <A
CLASS="xref"
HREF="ch10_16.htm"
TITLE="Trapping Undefined Function Calls with AUTOLOAD"
>Recipe 10.15</A
>; <A
CLASS="xref"
HREF="ch12_03.htm"
TITLE="Trapping Errors in require or use"
>Recipe 12.2</A
>; <A
CLASS="xref"
HREF="ch16_22.htm"
TITLE="Timing Out an Operation"
>Recipe 16.21</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_12.htm"
TITLE="10.11. Prototyping Functions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.11. Prototyping Functions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_14.htm"
TITLE="10.13. Saving Global Values"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.13. Saving Global Values"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>10.11. Prototyping Functions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>10.13. Saving Global Values</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
