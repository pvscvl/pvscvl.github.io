<HTML
><HEAD
>
<TITLE>Recipe 20.9. Creating HTML Templates (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:46:00Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"><LINK
REL="prev"
HREF="ch20_09.htm"
TITLE="20.8. Finding Fresh Links"><LINK
REL="next"
HREF="ch20_11.htm"
TITLE="20.10. Mirroring Web Pages"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_09.htm"
TITLE="20.8. Finding Fresh Links"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.8. Finding Fresh Links"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_11.htm"
TITLE="20.10. Mirroring Web Pages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.10. Mirroring Web Pages"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-82283"
>20.9. Creating HTML Templates</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-965"
>Problem<A
CLASS="indexterm"
NAME="ch20-idx-1000002660-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002660-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002660-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002660-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002660-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002660-5"
></A
></A
></H3
><P
CLASS="para"
>You want to store a parameterized template in an external file, read it in from your CGI script, and substitute your own variables for escapes embedded in the text. This way you can separate your program from the static parts of the document.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-971"
>Solution</A
></H3
><P
CLASS="para"
>To expand only variable references, use this <CODE
CLASS="literal"
>template</CODE
> function:</P
><PRE
CLASS="programlisting"
>sub template {
    my ($filename, $fillings) = @_;
    my $text;
    local $/;                   # slurp mode (undef)
    local *F;                   # create local filehandle
    open(F, &quot;&lt; $filename\0&quot;)    || return;
    $text = &lt;F&gt;;                # read whole file
    close(F);                   # ignore retval
    # replace quoted words with value in %$fillings hash
    $text =~ s{ %% ( .*? ) %% }
              { exists( $fillings-&gt;{$1} )
                      ? $fillings-&gt;{$1}
                      : &quot;&quot;
              }gsex;
    return $text;
}</PRE
><P
CLASS="para"
>On a data file like this:</P
><PRE
CLASS="programlisting"
>&lt;!-- simple.template for internal template() function --&gt;
&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Report for %%username%%&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H1&gt;Report for %%username%%&lt;/H1&gt;
%%username%% logged in %%count%% times, for a total of %%total%% minutes.</PRE
><P
CLASS="para"
>Or use the CPAN module Text::Template to expand full expressions if you can guarantee the data file is secure from tampering. A data file for Text::Template looks like this:</P
><PRE
CLASS="programlisting"
>&lt;!-- fancy.template for Text::Template --&gt;
&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Report for {$user}&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;&lt;H1&gt;Report for {$user}&lt;/H1&gt;
{ lcfirst($user) } logged in {$count} times, for a total of 
{ int($total / 60) } minutes.</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-1031"
>Discussion</A
></H3
><P
CLASS="para"
>Parameterized output for your CGI scripts is a good idea for many reasons. Separating your program from its data lets you give other people (art directors, for instance) the ability to change the HTML but not the program. Even better, two programs can share the same template, so style changes in the template will be immediately reflected in both.</P
><P
CLASS="para"
>For example, suppose you have stored the first template from the Solution in a file. Then your CGI program contains the definition of the <CODE
CLASS="literal"
>template</CODE
> subroutine above and makes appropriate settings for variables <CODE
CLASS="literal"
>$username</CODE
>, <CODE
CLASS="literal"
>$count</CODE
>, and <CODE
CLASS="literal"
>$total</CODE
>. You can fill in the template by simply using:</P
><PRE
CLASS="programlisting"
>%fields = (
            username =&gt; $whats_his_name,
            count    =&gt; $login_count,
            total    =&gt; $minute_used,
);

print template(&quot;/home/httpd/templates/simple.template&quot;, \%fields);</PRE
><P
CLASS="para"
>The template file contains keywords surrounded with double percent symbols (<CODE
CLASS="literal"
>%%KEYWORD%%</CODE
>). These keywords are looked up in the <CODE
CLASS="literal"
>%$fillings</CODE
> hash whose reference was passed as the second argument to <CODE
CLASS="literal"
>template</CODE
>. <A
CLASS="xref"
HREF="ch20_10.htm"
TITLE="userrep1"
>Example 20.7</A
> is a more elaborate example using an <A
CLASS="indexterm"
NAME="ch20-idx-1000002720-0"
></A
>SQL database.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch20-18112"
>Example 20.7: userrep1</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# userrep1 - report duration of user logins using SQL database

use DBI;
use CGI qw(:standard);

# template() defined as in the Solution section above

$user = param(&quot;username&quot;)                   or die &quot;No username&quot;;

$dbh = DBI-&gt;connect(&quot;dbi:mysql:connections:mysql.domain.com&quot;,
    &quot;connections&quot;, &quot;seekritpassword&quot;)       or die &quot;Couldn't connect\n&quot;;
$sth = $dbh-&gt;prepare(&lt;&lt;&quot;END_OF_SELECT&quot;)     or die &quot;Couldn't prepare SQL&quot;;
    SELECT COUNT(duration),SUM(duration) 
    FROM logins WHERE username='$user'
END_OF_SELECT

# this time the duration is assumed to be in seconds
if (@row = $sth-&gt;fetchrow_array()) {
    ($count, $seconds) = @row;
} else {
    ($count, $seconds) = (0,0);
} 

$sth-&gt;finish();
$dbh-&gt;disconnect;

print header();
print template(&quot;report.tpl&quot;, {   
    'username' =&gt; $user,
    'count'    =&gt; $count,
    'total'    =&gt; $seconds 
});</PRE
></DIV
><P
CLASS="para"
>If you want a fancier, more flexible solution, look at the second template in the Solution section, which relies upon the CPAN module Text::Template. Contents of braces found within the template file are evaluated as Perl code. Ordinarily, these substitutions will just be simple variables:</P
><PRE
CLASS="programlisting"
>You owe: {$total}</PRE
><P
CLASS="para"
>but they can also include full expressions:</P
><PRE
CLASS="programlisting"
>The average was {$count ?  ($total/$count) : 0}.</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch20_10.htm"
TITLE="userrep2"
>Example 20.8</A
> is an example of how you could use that template.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch20-31884"
>Example 20.8: userrep2</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# userrep2 - report duration of user logins using SQL database

use Text::Template;
use DBI;
use CGI qw(:standard);

$tmpl = &quot;/home/httpd/templates/fancy.template&quot;;
$template = Text::Template-&gt;new(-type =&gt; &quot;file&quot;, -source =&gt; $tmpl);
$user = param(&quot;username&quot;)                   or die &quot;No username&quot;;

$dbh = <A
CLASS="indexterm"
NAME="ch20-idx-1000004616-0"
></A
>DBI-&gt;connect(&quot;dbi:mysql:connections:mysql.domain.com&quot;,
    &quot;connections&quot;, &quot;secret passwd&quot;)         or die &quot;Couldn't db connect\n&quot;;
$sth = $dbh-&gt;prepare(&lt;&lt;&quot;END_OF_SELECT&quot;)     or die &quot;Couldn't prepare SQL&quot;;
    SELECT COUNT(duration),SUM(duration) 
    FROM logins WHERE username='$user'
END_OF_SELECT

$sth-&gt;execute()                             or die &quot;Couldn't execute SQL&quot;;

if (@row = $sth-&gt;fetchrow_array()) {
    ($count, $total) = @row;
} else {
    $count = $total = 0;
}

$sth-&gt;finish();
$dbh-&gt;disconnect;

print header();
print $template-&gt;fill_in();</PRE
></DIV
><P
CLASS="para"
>The more powerful approach raises security concerns. Anyone who can write to the template file can insert code that your program will run. See <A
CLASS="xref"
HREF="ch08_18.htm"
TITLE="Testing a File for Trustworthiness"
>Recipe 8.17</A
> for ways to lessen this danger.<A
CLASS="indexterm"
NAME="ch20-idx-1000002662-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002662-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002662-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002662-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002662-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002662-5"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-1195"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the CPAN module Text::Template; <A
CLASS="xref"
HREF="ch08_17.htm"
TITLE="Reading Configuration Files"
>Recipe 8.16</A
>; <A
CLASS="xref"
HREF="ch14_11.htm"
TITLE="Executing an SQL Command Using DBI and DBD"
>Recipe 14.10</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_09.htm"
TITLE="20.8. Finding Fresh Links"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.8. Finding Fresh Links"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_11.htm"
TITLE="20.10. Mirroring Web Pages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.10. Mirroring Web Pages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>20.8. Finding Fresh Links</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>20.10. Mirroring Web Pages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
