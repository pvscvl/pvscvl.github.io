<HTML
><HEAD
>
<TITLE>Recipe 13.3. Managing Instance Data (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:17Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_03.htm"
TITLE="13.2. Destroying an Object"><LINK
REL="next"
HREF="ch13_05.htm"
TITLE="13.4. Managing Class Data"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.2. Destroying an Object"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.2. Destroying an Object"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_05.htm"
TITLE="13.4. Managing Class Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.4. Managing Class Data"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-14105"
>13.3. Managing Instance Data</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-465"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004495-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004495-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004495-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004495-3"
></A
></A
></H3
><P
CLASS="para"
>Each data attribute of an object, sometimes called data members or properties, needs its own method for access. How do you write these functions to manipulate the object's instance data?</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-471"
>Solution</A
></H3
><P
CLASS="para"
>Either write pairs of get and set methods that affect the appropriate key in the object hash, like this:</P
><PRE
CLASS="programlisting"
>sub get_name {
    my $self = shift;
    return $self-&gt;{NAME};
} 

sub set_name {
    my $self      = shift;
    $self-&gt;{NAME} = shift;
} </PRE
><P
CLASS="para"
>Or, make single methods that do both jobs depending on whether they're passed an argument:</P
><PRE
CLASS="programlisting"
>sub name {
    my $self = shift;
    if (@_) { $self-&gt;{NAME} = shift } 
    return $self-&gt;{NAME};
} </PRE
><P
CLASS="para"
>Sometimes, it's useful to return the previous value when setting a new value:</P
><PRE
CLASS="programlisting"
>sub age {
    my $self = shift;
    my $prev = $self-&gt;{AGE};
    if (@_) { $self-&gt;{AGE} = shift } 
    return $prev;
} 
# sample call of get and set: happy birthday!
$obj-&gt;age( 1 + $obj-&gt;age );</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-521"
>Discussion</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000004509-0"
></A
>Methods are how you implement the public interface to the object. A proper class doesn't encourage anyone to poke around inside its innards. Each data attribute should have a method to update it, retrieve it, or both. If a user writes code like this:</P
><PRE
CLASS="programlisting"
>$him = Person-&gt;<CODE
CLASS="literal"
>new()</CODE
>;
$him-&gt;{NAME} = &quot;Sylvester&quot;;
$him-&gt;{AGE}  = 23;</PRE
><P
CLASS="para"
>then they have violated the interface, so deserve whatever they get.</P
><P
CLASS="para"
>For nominally private data elements, you may omit methods that access them.</P
><P
CLASS="para"
>By mandating a strictly functional interface, you are free to alter your internal representation later without fear of breaking code. The functional interface allows you to run arbitrary range checks and take care of any data reformatting or conversion.</P
><P
CLASS="para"
>Here's a fancy version of the <CODE
CLASS="literal"
>name</CODE
> method that demonstrates this:</P
><PRE
CLASS="programlisting"
>use Carp;
sub name {
    my $self = shift;
    return $self-&gt;{NAME} unless @_;
    local $_ = shift;
    croak &quot;too many arguments&quot; if @_;
    if ($^W) {
        /[^\s\w'-]/         &amp;&amp; carp &quot;funny characters in name&quot;;
        /\d/                &amp;&amp; carp &quot;numbers in name&quot;;
        /\S+(\s+\S+)+/      || carp &quot;prefer multiword name&quot;;
        /\S/                || carp &quot;name is blank&quot;;
    } 
    s/(\w+)/\u\L$1/g;       # enforce capitalization
    $self-&gt;{NAME} = $_;
} </PRE
><P
CLASS="para"
>If users, even other classes through inheritance, had been accessing the <CODE
CLASS="literal"
>&quot;NAME&quot;</CODE
> field directly, you couldn't add this kind of code later. By insisting on only indirect, functional access to all data attributes, you keep your options open.</P
><P
CLASS="para"
>If you're used to C++ objects, then you're accustomed to being able to get at an object's data members as simple variables from within a method. The Alias module from CPAN provides for this, as well as a good bit more, such as the possibility of private methods that the object can call but folks outside the class cannot.</P
><P
CLASS="para"
>Here's an example of creating a Person using the <A
CLASS="indexterm"
NAME="ch13-idx-1000006816-0"
></A
>Alias module. When you update these magical instance variables, you automatically update value fields in the hash. Convenient, eh?<A
CLASS="indexterm"
NAME="ch13-idx-1000004985-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004985-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004985-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004985-3"
></A
></P
><PRE
CLASS="programlisting"
>package Person;

# this is the same as before...
sub new {
     my $that  = shift;
     my $class = ref($that) || $that;
     my $self = {
           NAME  =&gt; undef,
           AGE   =&gt; undef,
           PEERS =&gt; [],
    };
    bless($self, $class);
    return $self;
}

use Alias qw(attr);
use vars qw($NAME $AGE @PEERS);

sub name {
    my $self = attr shift;
    if (@_) { $NAME = shift; }
    return    $NAME;
};

sub age {
    my $self = attr shift;
    if (@_) { $AGE = shift; }
    return    $AGE;
}

sub peers {
    my $self = attr shift;
    if (@_) { @PEERS = @_; }
    return    @PEERS;
}

sub exclaim {
    my $self = attr shift;
    return sprintf &quot;Hi, I'm %s, age %d, working with %s&quot;,
            $NAME, $AGE, join(&quot;, &quot;, @PEERS);
}

sub happy_birthday {
    my $self = attr shift;
    return ++$AGE;
}</PRE
><P
CLASS="para"
>You need <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>vars</CODE
> because Alias plays with package globals by the same names as the fields. To use globals while <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
> is in effect, you have to predeclare them. These variables are localized to the block enclosing the <CODE
CLASS="literal"
>attr(  )</CODE
> call, just as though <CODE
CLASS="literal"
>local</CODE
> were used on them. That means that they're still considered global package variables with temporary values.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-573"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>perltoot </I
>(1), <I
CLASS="filename"
>perlobj </I
>(1), and <I
CLASS="filename"
>perlbot </I
>(1); <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the documentation for the Alias module from CPAN; <A
CLASS="xref"
HREF="ch13_12.htm"
TITLE="Generating Attribute Methods Using AUTOLOAD"
>Recipe 13.11</A
>; <A
CLASS="xref"
HREF="ch13_13.htm"
TITLE="Solving the Data Inheritance Problem"
>Recipe 13.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.2. Destroying an Object"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.2. Destroying an Object"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_05.htm"
TITLE="13.4. Managing Class Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.4. Managing Class Data"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>13.2. Destroying an Object</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>13.4. Managing Class Data</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
