<HTML
><HEAD
>
<TITLE>Recipe 11.1. Taking References to Arrays (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:30Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_01.htm"
TITLE="11.0. Introduction"><LINK
REL="next"
HREF="ch11_03.htm"
TITLE="11.2. Making Hashes of Arrays"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_03.htm"
TITLE="11.2. Making Hashes of Arrays"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.2. Making Hashes of Arrays"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-71785"
>11.1. Taking References to Arrays</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-190"
>Problem<A
CLASS="indexterm"
NAME="ch11-idx-1000004792-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004792-1"
></A
></A
></H3
><P
CLASS="para"
>You need to manipulate an array by reference.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-196"
>Solution</A
></H3
><P
CLASS="para"
>To get a reference to an array:</P
><PRE
CLASS="programlisting"
>$aref               = \@array;
$anon_array         = [1, 3, 5, 7, 9];
$anon_copy          = [ @array ];
@$implicit_creation = (2, 4, 6, 8, 10);</PRE
><P
CLASS="para"
>To deference an array reference, precede it with an at sign (<CODE
CLASS="literal"
>@</CODE
>):</P
><PRE
CLASS="programlisting"
>push(@$anon_array, 11);</PRE
><P
CLASS="para"
>Or use a pointer arrow plus a bracketed subscript for a particular element:</P
><PRE
CLASS="programlisting"
>$two = $implicit_creation-&gt;[0];</PRE
><P
CLASS="para"
>To get the last index number by reference, or the number of items in that referenced array:</P
><PRE
CLASS="programlisting"
>$last_idx  = $#$aref;
$num_items = @$aref;</PRE
><P
CLASS="para"
>Or defensively embracing and forcing context:</P
><PRE
CLASS="programlisting"
>$last_idx  = $#{ $aref };
$num_items = scalar @{ $aref };</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-224"
>Discussion</A
></H3
><P
CLASS="para"
>Here are array references in action:</P
><PRE
CLASS="programlisting"
># check whether $someref contains a simple array reference
if (ref($someref) ne 'ARRAY') {
    die &quot;Expected an array reference, not $someref\n&quot;;
}

print &quot;@{$array_ref}\n&quot;;        # print original data

@order = sort @{ $array_ref };  # sort it

push @{ $array_ref }, $item;    # append new element to orig array  </PRE
><P
CLASS="para"
>If you can't decide whether to use a reference to a named array or to create a new one, here's a simplistic guideline that will prove right more often than not. Only take a reference to an existing array either to return the reference out of scope, thereby creating an anonymous array, or to pass the array by reference to a function. For virtually all other cases, use <CODE
CLASS="literal"
>[@array]</CODE
> to create a new array reference with a copy of the old values.</P
><P
CLASS="para"
>Automatic reference counting and the backslash operator make a powerful combination:</P
><PRE
CLASS="programlisting"
>sub array_ref {
    my @array;
    return \@array;
}

$aref1 = array_ref();
$aref2 = array_ref();</PRE
><P
CLASS="para"
>Each time <CODE
CLASS="literal"
>array_ref</CODE
> is called, the function allocates a new piece of memory for <CODE
CLASS="literal"
>@array</CODE
>. If we hadn't returned a reference to <CODE
CLASS="literal"
>@array</CODE
>, its memory would have been freed when its block, the subroutine, ended. However, because a reference to <CODE
CLASS="literal"
>@array</CODE
> is still accessible, Perl doesn't free that storage, and we end up with a reference to a piece of memory that can no longer be accessed through the symbol table. Such a piece of memory is called <I
CLASS="firstterm"
>anonymous</I
> because no name is associated with it.</P
><P
CLASS="para"
>To access a particular element of the array referenced by <CODE
CLASS="literal"
>$aref</CODE
>, you could write <CODE
CLASS="literal"
>$$aref[4]</CODE
>, but writing <CODE
CLASS="literal"
>$aref-&gt;[4]</CODE
> is the same thing, and it is clearer.</P
><PRE
CLASS="programlisting"
>print $array_ref-&gt;[$N];         # access item in position N (best)
print $$array_ref[$N];          # same, but confusing
print ${$array_ref}[$N];        # same, but still confusing, and ugly to boot</PRE
><P
CLASS="para"
>If you have an array reference, you can only access a slice of the referenced array in this way:</P
><PRE
CLASS="programlisting"
>@$pie[3..5];                    # array slice, but a little confusing to read
@{$pie}[3..5];                  # array slice, easier (?) to read</PRE
><P
CLASS="para"
>Array slices, even when accessed through array references, are assignable. In the next line, the array dereference happens first, and then the slice:</P
><PRE
CLASS="programlisting"
>@{$pie}[3..5] = (&quot;blackberry&quot;, &quot;blueberry&quot;, &quot;pumpkin&quot;);</PRE
><P
CLASS="para"
>An array slice is exactly the same as a list of individual array elements. Because you can't take a reference to a list, you can't take a reference to an array slice:</P
><PRE
CLASS="programlisting"
>$sliceref = \@{$pie}[3..5];     # WRONG!</PRE
><P
CLASS="para"
>To iterate through the entire array, use either a <CODE
CLASS="literal"
>foreach</CODE
> loop or a <CODE
CLASS="literal"
>for</CODE
> loop:</P
><PRE
CLASS="programlisting"
>foreach $item ( @{$array_ref} ) {   
    # $item has data
}

for ($idx = 0; $idx &lt;= $#{ $array_ref }; $idx++) {  
    # $array_ref-&gt;[$idx] has data
}<A
CLASS="indexterm"
NAME="ch11-idx-1000004794-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004794-1"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1000004675"
>See Also</A
></H3
><P
CLASS="para"
><A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <I
CLASS="filename"
>perlref </I
>(1) and <I
CLASS="filename"
>perllol </I
>(1); <A
CLASS="xref"
HREF="ch02_15.htm"
TITLE="Multiplying Matrices"
>Recipe 2.14</A
>; <A
CLASS="xref"
HREF="ch04_06.htm"
TITLE="Iterating Over an Array by Reference"
>Recipe 4.5</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_01.htm"
TITLE="11.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_03.htm"
TITLE="11.2. Making Hashes of Arrays"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.2. Making Hashes of Arrays"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>11.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>11.2. Making Hashes of Arrays</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
