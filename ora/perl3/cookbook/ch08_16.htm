<HTML
><HEAD
>
<TITLE>Recipe 8.15. Reading Fixed-Length Records (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:38:51Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"><LINK
REL="prev"
HREF="ch08_15.htm"
TITLE="8.14. Reading a String from a Binary File"><LINK
REL="next"
HREF="ch08_17.htm"
TITLE="8.16. Reading Configuration Files"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_15.htm"
TITLE="8.14. Reading a String from a Binary File"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.14. Reading a String from a Binary File"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_17.htm"
TITLE="8.16. Reading Configuration Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.16. Reading Configuration Files"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-chap08_reading_4"
>8.15. Reading Fixed-Length Records</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1358"
>Problem<A
CLASS="indexterm"
NAME="ch08-idx-1000004699-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004699-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004699-2"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004699-3"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004699-4"
></A
></A
></H3
><P
CLASS="para"
>You want to read a file whose records have a fixed length.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1364"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>read</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
>:</P
><PRE
CLASS="programlisting"
># $RECORDSIZE is the length of a record, in bytes.
# $TEMPLATE is the unpack template for the record
# FILE is the file to read from
# @FIELDS is an array, one element per field

until ( eof(FILE) ) {
    read(FILE, $record, $RECORDSIZE) == $RECORDSIZE
        or die &quot;short read\n&quot;;
    @FIELDS = unpack($TEMPLATE, $record);
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1390"
>Discussion</A
></H3
><P
CLASS="para"
>Because the file in question is not a text file, you can't use <CODE
CLASS="literal"
>&lt;FH&gt;</CODE
> or IO:: modules' <CODE
CLASS="literal"
>getline</CODE
> method to read in records. Instead, you must simply <CODE
CLASS="literal"
>read</CODE
> a particular number of bytes into a buffer. This buffer then contains one record's data, which you decode using <CODE
CLASS="literal"
>unpack</CODE
> with the right format.</P
><P
CLASS="para"
>For binary data, the catch is often determining the right format. If you're reading data written by a C program, this can mean peeking at C include files or manpages describing the structure layout, and this requires knowledge of C. It also requires that you become unnaturally chummy with your C compiler, because otherwise it's hard to predict field padding and alignment (such as the <CODE
CLASS="literal"
>x2</CODE
> in the format used in <A
CLASS="xref"
HREF="ch08_19.htm"
TITLE="Program: tailwtmp"
>Recipe 8.18</A
>). If you're lucky enough to be on a Berkeley Unix system or a system supporting <EM
CLASS="emphasis"
>gcc</EM
>, then you may be able to use the <EM
CLASS="emphasis"
>c2ph</EM
> tool distributed with Perl to cajole your C compiler into helping you with this.</P
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>tailwtmp</EM
> program at the end of this chapter uses the format described in <EM
CLASS="emphasis"
>utmp </EM
>(5) under Linux and works on its <EM
CLASS="emphasis"
>/var/log/wtmp</EM
> and <EM
CLASS="emphasis"
>/var/run/utmp</EM
> files. Once you commit to working in a binary format, machine dependencies creep in fast. It probably won't work unaltered on your system, but the procedure is still illustrative. Here is the relevant layout from the C include file on Linux:</P
><PRE
CLASS="programlisting"
>#define UT_LINESIZE           12
#define UT_NAMESIZE           8
#define UT_HOSTSIZE           16

struct utmp {                       /* here are the pack template codes */
    short ut_type;                  /* s for short, must be padded      */
    pid_t ut_pid;                   /* i for integer                    */
    char ut_line[UT_LINESIZE];      /* A12 for 12-char string           */
    char ut_id[2];                  /* A2, but need x2 for alignment    */
    time_t ut_time;                 /* l for long                       */
    char ut_user[UT_NAMESIZE];      /* A8 for 8-char string             */
    char ut_host[UT_HOSTSIZE];      /* A16 for 16-char string           */
    long ut_addr;                   /* l for long                       */
};</PRE
><P
CLASS="para"
>Once you figure out the binary layout, feed that (in this case, <CODE
CLASS="literal"
>&quot;s</CODE
> <CODE
CLASS="literal"
>x2</CODE
> <CODE
CLASS="literal"
>i</CODE
> <CODE
CLASS="literal"
>A12</CODE
> <CODE
CLASS="literal"
>A2</CODE
> <CODE
CLASS="literal"
>x2</CODE
> <CODE
CLASS="literal"
>l</CODE
> <CODE
CLASS="literal"
>A8</CODE
> <CODE
CLASS="literal"
>A16</CODE
> <CODE
CLASS="literal"
>l&quot;</CODE
>) to <CODE
CLASS="literal"
>pack</CODE
> with an empty field list to determine the record's size. Remember to check the return value of <CODE
CLASS="literal"
>read</CODE
> when you read in your record to make sure you got back the number of bytes you asked for.</P
><P
CLASS="para"
>If your records are text strings, use the <CODE
CLASS="literal"
>&quot;a&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;A&quot;</CODE
> unpack templates.</P
><P
CLASS="para"
>Fixed-length records are useful in that the <EM
CLASS="emphasis"
>n</EM
> th record begins at byte offset <CODE
CLASS="literal"
>SIZE</CODE
> <CODE
CLASS="literal"
>*</CODE
> <CODE
CLASS="literal"
>(</CODE
><EM
CLASS="emphasis"
>n</EM
><CODE
CLASS="literal"
>-1)</CODE
> in the file, where <CODE
CLASS="literal"
>SIZE</CODE
> is the size of a single record. See the indexing code in <A
CLASS="xref"
HREF="ch08_09.htm"
TITLE="Reading a Particular Line in a File"
>Recipe 8.8</A
> for an example of this.<A
CLASS="indexterm"
NAME="ch08-idx-1000004702-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004702-1"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004702-2"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004702-3"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004702-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1000004569"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>unpack</CODE
>, <CODE
CLASS="literal"
>pack</CODE
>, and <CODE
CLASS="literal"
>read</CODE
> functions in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch01_02.htm"
TITLE="Accessing Substrings"
>Recipe 1.1</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_15.htm"
TITLE="8.14. Reading a String from a Binary File"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.14. Reading a String from a Binary File"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_17.htm"
TITLE="8.16. Reading Configuration Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.16. Reading Configuration Files"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>8.14. Reading a String from a Binary File</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>8.16. Reading Configuration Files</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
