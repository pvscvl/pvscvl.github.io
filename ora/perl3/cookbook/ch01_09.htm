<HTML
><HEAD
>
<TITLE>Recipe 1.8. Expanding Variables in User Input (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:03Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_08.htm"
TITLE="1.7. Expanding and Compressing Tabs"><LINK
REL="next"
HREF="ch01_10.htm"
TITLE="1.9. Controlling Case"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_08.htm"
TITLE="1.7. Expanding and Compressing Tabs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.7. Expanding and Compressing Tabs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_10.htm"
TITLE="1.9. Controlling Case"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.9. Controlling Case"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-chap01_expanding_1"
>1.8. Expanding Variables in User Input</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-813"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010249-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010249-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010249-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010249-3"
></A
></A
></H3
><P
CLASS="para"
>You've read in a string with an embedded variable reference, such as:</P
><PRE
CLASS="programlisting"
>You owe $debt to me.</PRE
><P
CLASS="para"
>Now you want to replace <CODE
CLASS="literal"
>$debt</CODE
> in the string with its value.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-823"
>Solution</A
></H3
><P
CLASS="para"
>Use a substitution with <A
CLASS="indexterm"
NAME="ch01-idx-1000011573-0"
></A
>symbolic references if the variables are all globals:</P
><PRE
CLASS="programlisting"
>$text =~ s/\$(\w+)/${$1}/g;</PRE
><P
CLASS="para"
>But use a double <CODE
CLASS="literal"
>/ee</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010696-0"
></A
> if they might be lexical (<CODE
CLASS="literal"
>my</CODE
>) variables:</P
><PRE
CLASS="programlisting"
>$text =~ s/(\$\w+)/$1/gee;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-835"
>Discussion</A
></H3
><P
CLASS="para"
>The first technique is basically "find what looks like a variable name, and then use symbolic dereferencing to interpolate its contents." If <CODE
CLASS="literal"
>$1</CODE
> contains the string <CODE
CLASS="literal"
>somevar</CODE
>, then <CODE
CLASS="literal"
>${$1}</CODE
> will be whatever <CODE
CLASS="literal"
>$somevar</CODE
> contains. This won't work if the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
> <CODE
CLASS="literal"
>'refs'</CODE
> pragma is in effect because that bans symbolic dereferencing.</P
><P
CLASS="para"
>Here's an example:</P
><PRE
CLASS="programlisting"
>use vars qw($rows $cols);
no strict 'refs';                   # for ${$1}/g below
my $text;

($rows, $cols) = (24, 80);
$text = q(I am $rows high and $cols long);  # like single quotes!
$text =~ s/\$(\w+)/${$1}/g;
print $text;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>I am 24 high and 80 long</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>You may have seen the <CODE
CLASS="literal"
>/e</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010255-0"
></A
> substitution modifier used to evaluate the replacement as code rather than as a string. It's designed for situations such as doubling every whole number in a string:</P
><PRE
CLASS="programlisting"
>$text = &quot;I am 17 years old&quot;;
$text =~ s/(\d+)/2 * $1/eg; </PRE
><P
CLASS="para"
>When Perl is compiling your program and sees a <CODE
CLASS="literal"
>/e</CODE
> on a substitute, it compiles the code in the replacement block along with the rest of your program, long before the substitution actually happens. When a substitution is made, <CODE
CLASS="literal"
>$1</CODE
> is replaced with the string that matched. The code to evaluate would then be something like:</P
><PRE
CLASS="programlisting"
>2 * 17</PRE
><P
CLASS="para"
>If we tried saying:</P
><PRE
CLASS="programlisting"
>$text = 'I am $AGE years old';      # note single quotes
$text =~ s/(\$\w+)/$1/eg;           # WRONG</PRE
><P
CLASS="para"
>assuming <CODE
CLASS="literal"
>$text</CODE
> held a mention of the variable <CODE
CLASS="literal"
>$AGE</CODE
>, Perl would dutifully replace <CODE
CLASS="literal"
>$1</CODE
> with <CODE
CLASS="literal"
>$AGE</CODE
> and then evaluate code that looked like:</P
><PRE
CLASS="programlisting"
>'$AGE'</PRE
><P
CLASS="para"
>which just yields us our original string back again. We need to evaluate the result <EM
CLASS="emphasis"
>again</EM
> to get the value of the variable. To do that, just add another <CODE
CLASS="literal"
>/e</CODE
>:</P
><PRE
CLASS="programlisting"
>$text =~ s/(\$\w+)/$1/eeg;          # finds my() variables</PRE
><P
CLASS="para"
>Yes, you can have as many <CODE
CLASS="literal"
>/e</CODE
> modifiers as you'd like. Only the first one is compiled and syntax-checked with the rest of your program. This makes it work like the <CODE
CLASS="literal"
>eval</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000011509-0"
></A
> <CODE
CLASS="literal"
>{BLOCK}</CODE
> construct, except that it doesn't trap exceptions. Think of it more as a <CODE
CLASS="literal"
>do</CODE
> <CODE
CLASS="literal"
>{BLOCK}</CODE
> instead.</P
><P
CLASS="para"
>Subsequent <CODE
CLASS="literal"
>/e</CODE
> modifiers are quite different. They're more like the <CODE
CLASS="literal"
>eval</CODE
> &quot;<CODE
CLASS="literal"
>STRING</CODE
>&quot; construct. They don't get compiled until run-time. A small advantage of this scheme is that it doesn't make you put a <CODE
CLASS="literal"
>no</CODE
> <CODE
CLASS="literal"
>strict</CODE
> <CODE
CLASS="literal"
>'refs'</CODE
> pragma in the block. A tremendous advantage is that unlike the symbolic dereferencing, this mechanism can actually find lexical variables created with <CODE
CLASS="literal"
>my</CODE
>, something symbolic references can never do.</P
><P
CLASS="para"
>The following example uses the <CODE
CLASS="literal"
>/x</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010256-0"
></A
> modifier to enable whitespace and comments in the pattern part of the substitute and <CODE
CLASS="literal"
>/e</CODE
> to evaluate the right-hand side as code. The <CODE
CLASS="literal"
>/e</CODE
> modifier gives you more control over what happens in case of error or other extenuating circumstances, as we have here:</P
><PRE
CLASS="programlisting"
># expand variables in $text, but put an error message in
# if the variable isn't defined
$text =~ s{
     \$                         # find a literal dollar sign
    (\w+)                       # find a &quot;word&quot; and store it in $1
}{
    no strict 'refs';           # for $$1 below
    if (defined $$1) {
        $$1;                    # expand global variables only
    } else {
        &quot;[NO VARIABLE: \$$1]&quot;;  # error msg
    }
}egx;</PRE
><P
CLASS="para"
>Note that the syntax of <CODE
CLASS="literal"
>$$1</CODE
> has changed for Perl 5.004: it used to mean <CODE
CLASS="literal"
>${$}1</CODE
> but now means <CODE
CLASS="literal"
>${$1}</CODE
>. For backwards compatibility, in strings it still takes the old meaning (but generates a warning with <B
CLASS="emphasis.bold"
>-w</B
>). People will write <CODE
CLASS="literal"
>${$1}</CODE
> within a string to keep from dereferencing the PID variable. If <CODE
CLASS="literal"
>$$</CODE
> were 23448, then <CODE
CLASS="literal"
>$$1</CODE
> in a string would turn into <CODE
CLASS="literal"
>234481</CODE
>, not the contents of the variable whose name was stored in <CODE
CLASS="literal"
>$1</CODE
>. <A
CLASS="indexterm"
NAME="ch01-idx-1000011574-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-919"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>s///</CODE
> operator in <EM
CLASS="emphasis"
>perlre </EM
>(1) and <EM
CLASS="emphasis"
>perlop </EM
>(1) and the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Pattern Matching"</A
> and <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Regular Expressions"</A
> sections of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>eval</CODE
> function in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the similar use of substitutions in <A
CLASS="xref"
HREF="ch20_10.htm"
TITLE="Creating HTML Templates"
>Recipe 20.9</A
>. <A
CLASS="indexterm"
NAME="ch01-idx-1000010251-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010251-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010251-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010251-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_08.htm"
TITLE="1.7. Expanding and Compressing Tabs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.7. Expanding and Compressing Tabs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_10.htm"
TITLE="1.9. Controlling Case"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.9. Controlling Case"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>1.7. Expanding and Compressing Tabs</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>1.9. Controlling Case</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
