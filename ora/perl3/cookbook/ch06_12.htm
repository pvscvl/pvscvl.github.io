<HTML
><HEAD
>
<TITLE>Recipe 6.11. Testing for a Valid Pattern (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:28Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_11.htm"
TITLE="6.10. Speeding Up Interpolated Matches"><LINK
REL="next"
HREF="ch06_13.htm"
TITLE="6.12. Honoring Locale Settings in Regular Expressions"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_11.htm"
TITLE="6.10. Speeding Up Interpolated Matches"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.10. Speeding Up Interpolated Matches"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_13.htm"
TITLE="6.12. Honoring Locale Settings in Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.12. Honoring Locale Settings in Regular Expressions"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-chap06_testing_0"
>6.11. Testing for a Valid Pattern</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1363"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007632-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007632-1"
></A
></A
></H3
><P
CLASS="para"
>You want to let users enter their own patterns, but an invalid one would abort your program the first time you tried to use it.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1369"
>Solution</A
></H3
><P
CLASS="para"
>Test the pattern in an <CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="literal"
>{}</CODE
> construct first, matching against some dummy string. If <CODE
CLASS="literal"
>$@</CODE
> is not set, no exception occurred, so you know the pattern successfully compiled as a valid regular expression. Here is a loop that continues prompting until the user supplies a valid pattern:</P
><PRE
CLASS="programlisting"
>do {
    print &quot;Pattern? &quot;;
    chomp($pat = &lt;&gt;);
    eval { &quot;&quot; =~ /$pat/ };
    warn &quot;INVALID PATTERN $@&quot; if $@;
} while $@;
</PRE
><P
CLASS="para"
>Here's a standalone subroutine that verifies whether a pattern is valid.</P
><PRE
CLASS="programlisting"
>sub is_valid_pattern {
    my $pat = shift;
    return eval { &quot;&quot; =~ /$pat/; 1 } || 0;
}</PRE
><P
CLASS="para"
>That one relies upon the block returning <CODE
CLASS="literal"
>1</CODE
> if it completes, which in the case of an exception, never happens.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1401"
>Discussion</A
></H3
><P
CLASS="para"
>There's no end to patterns that won't compile. The user could mistakenly enter <CODE
CLASS="literal"
>&quot;&lt;I\s*[^&gt;&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;*** GET RICH ***&quot;</CODE
>, or <CODE
CLASS="literal"
>&quot;+5-i&quot;</CODE
>. If you blindly use the proffered pattern in your program, it will cause an exception, normally a fatal event.</P
><P
CLASS="para"
>The tiny program in <A
CLASS="xref"
HREF="ch06_12.htm"
TITLE="paragrep"
>Example 6.9</A
> demonstrates this.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-14487"
>Example 6.9: paragrep</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch06-idx-1000007805-0"
></A
>paragrep - trivial paragraph grepper
die &quot;usage: $0 pat [files]\n&quot; unless @ARGV;
$/ = '';
$pat = shift;
eval { &quot;&quot; =~ /$pat/; 1 }      or die &quot;$0: Bad pattern $pat: $@\n&quot;;
while (&lt;&gt;) {
    print &quot;$ARGV $.: $_&quot; if /$pat/o;
}</PRE
></DIV
><P
CLASS="para"
>That <CODE
CLASS="literal"
>/o</CODE
> is a promise to Perl that the interpolated variable's contents are constant over the program's entire run. It's an efficiency hack. Even if <CODE
CLASS="literal"
>$pat</CODE
> changes, Perl won't notice.</P
><P
CLASS="para"
>You could encapsulate this in a function call that returns 1 if the block completes and 0 if not as shown in the Solution section. Although <CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="literal"
>&quot;/$pat/&quot;</CODE
> would also work to trap the exception, it has two other problems. First of all, there couldn't be any slashes (or whatever your chosen pattern delimiter is) in the string the user entered. More importantly, it would open a drastic security hole that you almost certainly want to avoid. Strings like this could really ruin your day:</P
><PRE
CLASS="programlisting"
>$pat = &quot;You lose @{[ system('rm -rf *')]} big here&quot;;</PRE
><P
CLASS="para"
>If you don't wish to provide the user with a real pattern, you can always metaquote the string first:</P
><PRE
CLASS="programlisting"
>$safe_pat = quotemeta($pat);
something() if /$safe_pat/;</PRE
><P
CLASS="para"
>Or, even easier, use:</P
><PRE
CLASS="programlisting"
>something() if /\Q$pat/;</PRE
><P
CLASS="para"
>But if you're going to do that, why are you using pattern matching at all? In that case, a simple use of <CODE
CLASS="literal"
>index</CODE
> would be enough.</P
><P
CLASS="para"
>By letting the user supply a real pattern, you give them the power into do interesting and useful things. This is a good thing. You just have to be slightly careful, that's all. Suppose they wanted to enter a case-insensitive pattern, but you didn't provide the program with an option like <EM
CLASS="emphasis"
>grep </EM
>'s <B
CLASS="emphasis.bold"
>-i</B
> option. By permitting full patterns, the user can enter an embedded <CODE
CLASS="literal"
>/i</CODE
> modifier as <CODE
CLASS="literal"
>(?i)</CODE
>, as in <CODE
CLASS="literal"
>/(?i)stuff/</CODE
>.</P
><P
CLASS="para"
>What happens if the interpolated pattern expands to nothing? If <CODE
CLASS="literal"
>$pat</CODE
> is the empty string, what does <CODE
CLASS="literal"
>/$pat/</CODE
> match &nbsp;-  that is, what does a blank <CODE
CLASS="literal"
>//</CODE
> match? It doesn't match the start of all possible strings. Surprisingly enough, matching the null pattern exhibits the dubiously useful semantics of reusing the previous successfully matched pattern. In practice, this is hard to make good use of in Perl.</P
><P
CLASS="para"
>Even if you use <CODE
CLASS="literal"
>eval</CODE
> to check the pattern for validity, beware: matching certain patterns takes time that is exponentially proportional to the length of the string being matched. There is no good way to detect one of these, and if the user sticks you with one, your program will appear to hang as it and the entropic heat death of the universe have a long race to see who finishes first. Setting a timer to jump out of a long-running command offers some hope for a way out of this but (as of the 5.004 release) still carries with it the possibility of a core dump if you interrupt Perl at an inopportune moment.<A
CLASS="indexterm"
NAME="ch06-idx-1000007634-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007634-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1451"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>eval</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch10_13.htm"
TITLE="Handling Exceptions"
>Recipe 10.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_11.htm"
TITLE="6.10. Speeding Up Interpolated Matches"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.10. Speeding Up Interpolated Matches"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_13.htm"
TITLE="6.12. Honoring Locale Settings in Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.12. Honoring Locale Settings in Regular Expressions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>6.10. Speeding Up Interpolated Matches</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>6.12. Honoring Locale Settings in Regular Expressions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
