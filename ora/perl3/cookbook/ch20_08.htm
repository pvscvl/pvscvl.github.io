<HTML
><HEAD
>
<TITLE>Recipe 20.7. Finding Stale Links (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:59Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"><LINK
REL="prev"
HREF="ch20_07.htm"
TITLE="20.6. Extracting or Removing HTML Tags"><LINK
REL="next"
HREF="ch20_09.htm"
TITLE="20.8. Finding Fresh Links"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_07.htm"
TITLE="20.6. Extracting or Removing HTML Tags"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.6. Extracting or Removing HTML Tags"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_09.htm"
TITLE="20.8. Finding Fresh Links"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.8. Finding Fresh Links"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-14595"
>20.7. Finding Stale Links</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-1000002646"
>Problem<A
CLASS="indexterm"
NAME="ch20-idx-1000002650-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002650-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002650-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002650-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002650-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002650-5"
></A
></A
></H3
><P
CLASS="para"
>You want to check whether a document contains invalid links.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-777"
>Solution</A
></H3
><P
CLASS="para"
>Use the technique outlined in <A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="Extracting URLs"
>Recipe 20.3</A
> to extract each link, and then use the LWP::Simple module's <CODE
CLASS="literal"
>head</CODE
> function to make sure that link exists.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-783"
>Discussion</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch20_08.htm"
TITLE="churl"
>Example 20.5</A
> is an applied example of the link-extraction technique. Instead of just printing the name of the link, we call the LWP::Simple module's <CODE
CLASS="literal"
>head</CODE
> function on it. The HEAD method fetches the remote document's metainformation to determine status information without downloading the whole document. If it fails, then the link is bad so we print an appropriate message.</P
><P
CLASS="para"
>Because this program uses the <CODE
CLASS="literal"
>get</CODE
> function from LWP::Simple, it is expecting a URL, not a filename. If you want to supply either, use the <A
CLASS="indexterm"
NAME="ch20-idx-1000003872-0"
></A
>URI::Heuristic module described in <A
CLASS="xref"
HREF="ch20_02.htm"
TITLE="Fetching a URL from a Perl Script"
>Recipe 20.1</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch20-77587"
>Example 20.5: churl</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# churl - check urls

use HTML::LinkExtor;
use LWP::Simple qw(get head);

$base_url = shift
    or die &quot;usage: $0 &lt;start_url&gt;\n&quot;;
$parser = HTML::LinkExtor-&gt;new(undef, $base_url);
$parser-&gt;parse(get($base_url));
@links = $parser-&gt;links;
print &quot;$base_url: \n&quot;;
foreach $linkarray (@links) {
    my @element  = @$linkarray;
    my $elt_type = shift @element;
    while (@element) {
        my ($attr_name , $attr_value) = splice(@element, 0, 2);
        if ($attr_value-&gt;scheme =~ /\b(ftp|https?|file)\b/) {
            print &quot;  $attr_value: &quot;, head($attr_value) ? &quot;OK&quot; : &quot;BAD&quot;, &quot;\n&quot;;
        }
    }
}</PRE
></DIV
><P
CLASS="para"
>Here's an example of a program run:</P
><PRE
CLASS="programlisting"
>% churl http://www.wizards.com
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>http://www.wizards.com:</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>  FrontPage/FP_Color.gif:  OK</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>  FrontPage/FP_BW.gif:  BAD</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>  #FP_Map:  OK</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>  Games_Library/Welcome.html:  OK</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>This program has the same limitation as the HTML::LinkExtor program in <A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="Extracting URLs"
>Recipe 20.3</A
>.<A
CLASS="indexterm"
NAME="ch20-idx-1000003913-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000003913-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-851"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the CPAN modules HTML::LinkExtor, LWP::Simple, LWP::UserAgent, and HTTP::Response; <A
CLASS="xref"
HREF="ch20_09.htm"
TITLE="Finding Fresh Links"
>Recipe 20.8</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_07.htm"
TITLE="20.6. Extracting or Removing HTML Tags"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.6. Extracting or Removing HTML Tags"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_09.htm"
TITLE="20.8. Finding Fresh Links"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.8. Finding Fresh Links"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>20.6. Extracting or Removing HTML Tags</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>20.8. Finding Fresh Links</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
