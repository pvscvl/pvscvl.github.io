<HTML
><HEAD
>
<TITLE>Recipe 17.12. Pre-Forking Servers (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:41Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_12.htm"
TITLE="17.11. Forking Servers"><LINK
REL="next"
HREF="ch17_14.htm"
TITLE="17.13. Non-Forking Servers"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_12.htm"
TITLE="17.11. Forking Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.11. Forking Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_14.htm"
TITLE="17.13. Non-Forking Servers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.13. Non-Forking Servers"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-19439"
>17.12. Pre-Forking Servers</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1308"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-1000004828-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004828-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004828-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004828-3"
></A
>You want to write a server that concurrently processes several clients (as in "Forking Servers"), but connections are coming in so fast that forking slows the server too much.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1314"
>Solution</A
></H3
><P
CLASS="para"
>Have a master server maintain a pool of pre-forked children, as shown in <A
CLASS="xref"
HREF="ch17_13.htm"
TITLE="preforker"
>Example 17.5</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch17-30092"
>Example 17.5: preforker</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch17-idx-1000004832-0"
></A
>preforker - server who forks first
use IO::Socket;
use Symbol;
use POSIX;

# establish SERVER socket, bind and listen.
$server = IO::Socket::INET-&gt;new(LocalPort =&gt; 6969,
                                Type      =&gt; SOCK_STREAM,
                                Proto     =&gt; 'tcp',
                                Reuse     =&gt; 1,
                                Listen    =&gt; 10 )
  or die &quot;making socket: $@\n&quot;;

# global variables
$PREFORK                = 5;        # number of children to maintain
$MAX_CLIENTS_PER_CHILD  = 5;        # number of clients each child should process
%children               = ();       # keys are current child process IDs
$children               = 0;        # current number of children

sub REAPER {                        # takes care of dead children
    $SIG{CHLD} = \&amp;REAPER;
    my $pid = wait;
    $children --;
    delete $children{$pid};
}

sub HUNTSMAN {                      # signal handler for SIGINT
    local($SIG{CHLD}) = 'IGNORE';   # we're going to kill our children
    kill 'INT' =&gt; keys %children;
    exit;                           # clean up with dignity
}
    
# Fork off our children.
for (1 .. $PREFORK) {
    make_new_child();
}

# Install signal handlers.
$SIG{CHLD} = \&amp;REAPER;
$SIG{INT}  = \&amp;HUNTSMAN;

# And maintain the population.
while (1) {
    sleep;                          # wait for a signal (i.e., child's death)
    for ($i = $children; $i &lt; $PREFORK; $i++) {
        make_new_child();           # top up the child pool
    }
}

sub make_new_child {
    my $pid;
    my $sigset;
    
    # block signal for fork
    $sigset = POSIX::SigSet-&gt;new(SIGINT);
    sigprocmask(SIG_BLOCK, $sigset)
        or die &quot;Can't block SIGINT for fork: $!\n&quot;;
    
    die &quot;fork: $!&quot; unless defined ($pid = fork);
    
    if ($pid) {
        # Parent records the child's birth and returns.
        sigprocmask(SIG_UNBLOCK, $sigset)
            or die &quot;Can't unblock SIGINT for fork: $!\n&quot;;
        $children{$pid} = 1;
        $children++;
        return;
    } else {
        # Child can *not* return from this subroutine.
        $SIG{INT} = 'DEFAULT';      # make SIGINT kill us as it did before
    
        # unblock signals
        sigprocmask(SIG_UNBLOCK, $sigset)
            or die &quot;Can't unblock SIGINT for fork: $!\n&quot;;
    
        # handle connections until we've reached $MAX_CLIENTS_PER_CHILD
        for ($i=0; $i &lt; $MAX_CLIENTS_PER_CHILD; $i++) {
            $client = $server-&gt;accept()     or last;
            # do something with the connection
        }
    
        # tidy up gracefully and finish
    
        # this exit is VERY important, otherwise the child will become
        # a producer of more and more children, forking yourself into
        # process death.
        exit;
    }
}</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1502"
>Discussion</A
></H3
><P
CLASS="para"
>Whew. Although this is a lot of code, the logic is simple: the parent process never deals with clients but instead forks <CODE
CLASS="literal"
>$PREFORK</CODE
> children to do that. The parent keeps track of how many children it has and forks more to replace dead children. Children exit after having handled <CODE
CLASS="literal"
>$MAX_CLIENTS_PER_CHILD</CODE
> clients.</P
><P
CLASS="para"
>The code is a reasonably direct implementation of the logic above. The only trick comes with signal handlers: we want the parent to catch SIGINT and kill its children, so we install our signal handler <CODE
CLASS="literal"
>&amp;HUNTSMAN</CODE
> to do this. But we then have to be careful that the child doesn't have the same handler after we fork. We use POSIX signals to block the signal for the duration of the fork (see <A
CLASS="xref"
HREF="ch16_21.htm"
TITLE="Blocking Signals"
>Recipe 16.20</A
>).</P
><P
CLASS="para"
>When you use this code in your programs, be sure that <CODE
CLASS="literal"
>make_new_child</CODE
> never returns. If it does, the child will return, become a parent, and spawn off its own children. Your system will fill up with processes, your system administrator will storm down the hallway to find you, and you may end up tied to four horses wondering why you hadn't paid more attention to this paragraph.</P
><P
CLASS="para"
>On some operating systems, notably Solaris, you cannot have multiple children doing an <CODE
CLASS="literal"
>accept</CODE
> on the same socket. You have to use file locking to ensure that only one child can call <CODE
CLASS="literal"
>accept</CODE
> at any particular moment.<A
CLASS="indexterm"
NAME="ch17-idx-1000004834-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004834-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004834-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004834-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-1514"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_135.htm"
>&#13;
<CODE
CLASS="literal"
>select</CODE
></A
> function in 
<A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>&#13;Chapter 3</A
> or <I
CLASS="filename"
>perlfunc </I
>(1); your system's <I
CLASS="filename"
>fcntl </I
>(2) manpage (if you have one); the documentation for the standard Fcntl, Socket, IO::Select, IO::Socket, and Tie::RefHash modules; <A
CLASS="xref"
HREF="ch17_12.htm"
TITLE="Forking Servers"
>Recipe 17.11</A
>; <A
CLASS="xref"
HREF="ch17_13.htm"
TITLE="Pre-Forking Servers"
>Recipe 17.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_12.htm"
TITLE="17.11. Forking Servers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.11. Forking Servers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_14.htm"
TITLE="17.13. Non-Forking Servers"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.13. Non-Forking Servers"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>17.11. Forking Servers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>17.13. Non-Forking Servers</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
