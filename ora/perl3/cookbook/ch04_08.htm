<HTML
><HEAD
>
<TITLE>Recipe 4.7. Finding Elements in One Array but Not Another (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:34Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_07.htm"
TITLE="4.6. Extracting Unique Elements from a List"><LINK
REL="next"
HREF="ch04_09.htm"
TITLE="4.8. Computing Union, Intersection, or Difference of Unique Lists"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_07.htm"
TITLE="4.6. Extracting Unique Elements from a List"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.6. Extracting Unique Elements from a List"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_09.htm"
TITLE="4.8. Computing Union, Intersection, or Difference of Unique Lists"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.8. Computing Union, Intersection, or Difference of Unique Lists"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-29725"
>4.7. Finding Elements in One Array but Not Another</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-721"
>Problem <A
CLASS="indexterm"
NAME="ch04-idx-1000006659-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006659-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006659-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006659-3"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006659-4"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006659-5"
></A
></A
></H3
><P
CLASS="para"
>You want to find elements that are in one array but not another.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-727"
>Solution</A
></H3
><P
CLASS="para"
>You want to find elements in <CODE
CLASS="literal"
>@A</CODE
> that aren't in <CODE
CLASS="literal"
>@B</CODE
>. Build a hash of the keys of <CODE
CLASS="literal"
>@B</CODE
> to use as a lookup table. Then check each element in <CODE
CLASS="literal"
>@A</CODE
> to see if it is in <CODE
CLASS="literal"
>@B</CODE
>.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-pgfId-1000006463"
>Straightforward implementation</A
></H4
><PRE
CLASS="programlisting"
># assume @A and @B are already loaded
%seen = ();                  # lookup table to test membership of B
@aonly = ();                 # answer

# build lookup table
foreach $item (@B) { $seen{$item} = 1 }

# find only elements in @A and not in @B
foreach $item (@A) {
    unless ($seen{$item}) {
        # it's not in %seen, so add to @aonly
        push(@aonly, $item);
    }
}</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch04-pgfId-1000006484"
>More idiomatic version</A
></H4
><PRE
CLASS="programlisting"
>my %seen; # lookup table
my @aonly;# answer

# build lookup table
@seen{@B} = ();

foreach $item (@A) {
    push(@aonly, $item) unless exists $seen{$item};
}</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-733"
>Discussion</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-1000006682-0"
></A
>As with nearly any problem in Perl that asks whether a scalar is in one list or another, this one uses a hash. First, process <CODE
CLASS="literal"
>@B</CODE
> so that the <CODE
CLASS="literal"
>%seen</CODE
> hash records each element from <CODE
CLASS="literal"
>@B</CODE
> by setting its value to 1. Then process <CODE
CLASS="literal"
>@A</CODE
> one element at a time, checking whether that particular element had been in <CODE
CLASS="literal"
>@B</CODE
> by consulting the <CODE
CLASS="literal"
>%seen</CODE
> hash.</P
><P
CLASS="para"
>The given code retains duplicate elements in <CODE
CLASS="literal"
>@A  </CODE
>. This can be easily fixed by adding the elements of <CODE
CLASS="literal"
>@A</CODE
> to <CODE
CLASS="literal"
>%seen</CODE
> as they are processed:</P
><PRE
CLASS="programlisting"
>foreach $item (@A) {
    push(@aonly, $item) unless $seen{$item};
    $seen{$item} = 1;                       # mark as seen
}</PRE
><P
CLASS="para"
>The two solutions differ mainly in how they build the hash. The first iterates through <CODE
CLASS="literal"
>@B</CODE
>. The second uses a <EM
CLASS="emphasis"
>hash slice</EM
> to initialize the hash. A <A
CLASS="indexterm"
NAME="ch04-idx-1000006665-0"
></A
>hash slice is easiest illustrated by example:</P
><PRE
CLASS="programlisting"
>$hash{&quot;key1&quot;} = 1;
$hash{&quot;key2&quot;} = 2;</PRE
><P
CLASS="para"
>is equivalent to:</P
><PRE
CLASS="programlisting"
>@hash{&quot;key1&quot;, &quot;key2&quot;} = (1,2);</PRE
><P
CLASS="para"
>The list in the curly braces holds the keys; the list on the right holds the values. We initialize <CODE
CLASS="literal"
>%seen</CODE
> in the first solution by looping over each element in <CODE
CLASS="literal"
>@B</CODE
> and setting the appropriate value of <CODE
CLASS="literal"
>%seen</CODE
> to 1. In the second, we simply say:</P
><PRE
CLASS="programlisting"
>@seen{@B} = ();</PRE
><P
CLASS="para"
>This uses items in <CODE
CLASS="literal"
>@B</CODE
> as keys for <CODE
CLASS="literal"
>%seen</CODE
>, setting each corresponding value to <CODE
CLASS="literal"
>undef</CODE
>, because there are fewer values on the right than places to put them. This works out here because we check for existence of the key, not logical truth or <CODE
CLASS="literal"
>defined</CODE
>ness of the value. If we needed true values, a slice could still shorten our code:</P
><PRE
CLASS="programlisting"
>@seen{@B} = (1) x @B;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-767"
>See Also</A
></H3
><P
CLASS="para"
>Hash slices are explained in <I
CLASS="filename"
>perldata </I
>(1) and the <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"Variables"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Hashes"
>Chapter 5</A
>; we use hashes in a similar fashion in <A
CLASS="xref"
HREF="ch04_07.htm"
TITLE="Extracting Unique Elements from a List"
>Recipe 4.6</A
> and <A
CLASS="xref"
HREF="ch04_09.htm"
TITLE="Computing Union, Intersection, or Difference of Unique Lists"
>Recipe 4.8</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_07.htm"
TITLE="4.6. Extracting Unique Elements from a List"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.6. Extracting Unique Elements from a List"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_09.htm"
TITLE="4.8. Computing Union, Intersection, or Difference of Unique Lists"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.8. Computing Union, Intersection, or Difference of Unique Lists"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>4.6. Extracting Unique Elements from a List</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>4.8. Computing Union, Intersection, or Difference of Unique Lists</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
