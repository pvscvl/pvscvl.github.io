<HTML
><HEAD
>
<TITLE>Recipe 17.4. Setting Up a UDP Client (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:30Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_04.htm"
TITLE="17.3. Communicating over TCP"><LINK
REL="next"
HREF="ch17_06.htm"
TITLE="17.5. Setting Up a UDP Server"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.3. Communicating over TCP"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.3. Communicating over TCP"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.5. Setting Up a UDP Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.5. Setting Up a UDP Server"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-37500"
>17.4. Setting Up a UDP Client</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-562"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004718-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004718-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004718-2"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004718-3"
></A
></A
></H3
><P
CLASS="para"
>You want to exchange messages with another process using UDP (datagrams).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-568"
>Solution</A
></H3
><P
CLASS="para"
>To set up a UDP socket handle, use either the low-level Socket module on your own filehandle:</P
><PRE
CLASS="programlisting"
>use Socket;
socket(SOCKET, PF_INET, SOCK_DGRAM, getprotobyname(&quot;udp&quot;)) 
    or die &quot;socket: $!&quot;;</PRE
><P
CLASS="para"
>or else IO::Socket, which returns an anonymous one:</P
><PRE
CLASS="programlisting"
>use IO::Socket;
$handle = IO::Socket::INET-&gt;new(Proto =&gt; 'udp') 
    or die &quot;socket: $@&quot;;     # yes, it uses $@ here</PRE
><P
CLASS="para"
>Then to send a message to a machine named <CODE
CLASS="literal"
>$HOSTNAME</CODE
> on port number <CODE
CLASS="literal"
>$PORTNO</CODE
>, use:</P
><PRE
CLASS="programlisting"
>$ipaddr   = inet_aton($HOSTNAME);
$portaddr = sockaddr_in($PORTNO, $ipaddr);
send(SOCKET, $MSG, 0, $portaddr) == length($MSG)
        or die &quot;cannot send to $HOSTNAME($PORTNO): $!&quot;;</PRE
><P
CLASS="para"
>To receive a message of length no greater than $<CODE
CLASS="literal"
>MAXLEN</CODE
>, use:</P
><PRE
CLASS="programlisting"
>$portaddr = recv(SOCKET, $MSG, $MAXLEN, 0)      or die &quot;recv: $!&quot;;
($portno, $ipaddr) = sockaddr_in($portaddr);
$host = gethostbyaddr($ipaddr, AF_INET);
print &quot;$host($portno) said $MSG\n&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-608"
>Discussion</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-1000004726-0"
></A
>Datagram sockets are unlike stream sockets. Streams provide sessions, giving the illusion of a stable connection. You might think of them as working like a telephone call&nbsp;-  expensive to set up, but once established, reliable and easy to use. Datagrams, though, are more like the postal system&nbsp;- it's cheaper and easier to send a letter to your friend on the other side of the world than to call them on the phone. Datagrams are easier on the system than streams. You send a small amount of information one message at a time. But your messages' delivery isn't guaranteed, and they might arrive in the wrong order. Like a small post box, the receiver's queue might fill up and cause further messages to be dropped.</P
><P
CLASS="para"
>Why then, if datagrams are unreliable, do we have them? Because some applications are most sensibly implemented in terms of datagrams. For instance, in streaming audio, it's more important that the stream as a whole be preserved than that every packet get through, especially if packets are being dropped because there's not enough bandwidth for them all. Another use for datagrams is broadcasting, which corresponds to mass mailing of advertisements in the postal model, and is equally popular in most circles. One use for broadcast packets is to send out a message to your local subnet saying "Hey, is there anybody around here who wants to be my server?"</P
><P
CLASS="para"
>Because datagrams don't provide the illusion of a lasting connection, you get a little more freedom in how you use them. You don't have to <CODE
CLASS="literal"
>connect</CODE
> your socket to the remote end that you're sending data. Instead, address each datagram individually when you <CODE
CLASS="literal"
>send</CODE
>. Assuming <CODE
CLASS="literal"
>$remote_addr</CODE
> is the result of a call to <CODE
CLASS="literal"
>sockaddr_in</CODE
>, do this:</P
><PRE
CLASS="programlisting"
>send(MYSOCKET, $msg_buffer, $flags, $remote_addr)
    or die &quot;Can't send: $!\n&quot;;</PRE
><P
CLASS="para"
>The only flag argument used much is MSG_OOB, which lets you send and receive out-of-band data in advanced applications.</P
><P
CLASS="para"
>The remote address should be a port and internet address combination returned by the Socket module's <CODE
CLASS="literal"
>sockaddr_in</CODE
><A
CLASS="indexterm"
NAME="ch17-idx-1000004732-0"
></A
> function. If you want, call <CODE
CLASS="literal"
>connect</CODE
> on that address instead. Then you can omit the last argument to your <CODE
CLASS="literal"
>send</CODE
>s, after which they'll all go to that recipient. Unlike streams, you are free to reconnect to another machine with the same datagram socket.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch17_05.htm"
TITLE="clockdrift"
>Example 17.1</A
> is a small example of a UDP program. It contacts the UDP time port of the machine whose name is given on the command line, or of the local machine by default. This doesn't work on all machines, but those with a server will send you back a 4-byte integer packed in network byte order that represents the time that machine thinks it is. The time returned, however, is in the number of seconds since 1900. You have to subtract the number of seconds between 1900 and 1970 to feed that time to the <CODE
CLASS="literal"
>localtime</CODE
> or <CODE
CLASS="literal"
>gmtime</CODE
> conversion functions.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch17-37821"
>Example 17.1: clockdrift</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch17-idx-1000004736-0"
></A
>clockdrift - compare another system's clock with this one
use strict;
use Socket;

my ($host, $him, $src, $port, $ipaddr, $ptime, $delta);
my $SECS_of_70_YEARS      = 2_208_988_800;

socket(MsgBox, PF_INET, SOCK_DGRAM, getprotobyname(&quot;udp&quot;))
    or die &quot;socket: $!&quot;;
$him = sockaddr_in(scalar(getservbyname(&quot;time&quot;, &quot;udp&quot;)), 
    inet_aton(shift || '127.1'));
defined(send(MsgBox, 0, 0, $him))
    or die &quot;send: $!&quot;;
defined($src = recv(MsgBox, $ptime, 4, 0))
    or die &quot;recv: $!&quot;;
($port, $ipaddr) = sockaddr_in($src);
$host = gethostbyaddr($ipaddr, AF_INET);
my $delta = (unpack(&quot;N&quot;, $ptime) - $SECS_of_70_YEARS) - time();
print &quot;Clock on $host is $delta seconds ahead of this one.\n&quot;;</PRE
></DIV
><P
CLASS="para"
>If the machine you're trying to contact isn't alive or if its response is lost, you'll only know because your program will get stuck in the <CODE
CLASS="literal"
>recv</CODE
> waiting for an answer that will never come.<A
CLASS="indexterm"
NAME="ch17-idx-1000004728-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004728-1"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004728-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-668"
>See Also</A
></H3
><P
CLASS="para"
>The 
<A
CLASS="olink"
HREF="../prog/ch03_139.htm"
>&#13;<CODE
CLASS="literal"
>send</CODE
></A
>, 

<A
CLASS="olink"
HREF="../prog/ch03_119.htm"
>&#13;<CODE
CLASS="literal"
>recv</CODE
></A
>, 

<A
CLASS="olink"
HREF="../prog/ch03_047.htm"
>&#13;<CODE
CLASS="literal"
>gethostbyaddr</CODE
></A
>, 

and 
<A
CLASS="olink"
HREF="../prog/ch03_182.htm"
>&#13;<CODE
CLASS="literal"
>unpack</CODE
> </A
>

functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); the documentation for the standard Socket and IO::Socket modules; the 
section on 
<A
CLASS="olink"
HREF="../prog/ch06_02.htm"
>&#13;"UDP: message passing"</A
> in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlipc </I
>(1); <CITE
CLASS="citetitle"
>Unix Network Programming</CITE
>; <A
CLASS="xref"
HREF="ch17_06.htm"
TITLE="Setting Up a UDP Server"
>Recipe 17.5</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.3. Communicating over TCP"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.3. Communicating over TCP"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.5. Setting Up a UDP Server"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.5. Setting Up a UDP Server"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>17.3. Communicating over TCP</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>17.5. Setting Up a UDP Server</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
