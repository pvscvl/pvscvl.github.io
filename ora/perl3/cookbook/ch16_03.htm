<HTML
><HEAD
>
<TITLE>Recipe 16.2. Running Another Program (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:39Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_02.htm"
TITLE="16.1. Gathering Output from a Program"><LINK
REL="next"
HREF="ch16_04.htm"
TITLE="16.3. Replacing the Current Program with a Different One"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_02.htm"
TITLE="16.1. Gathering Output from a Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1. Gathering Output from a Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_04.htm"
TITLE="16.3. Replacing the Current Program with a Different One"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3. Replacing the Current Program with a Different One"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-29784"
>16.2. Running Another Program</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-860"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006245-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006245-1"
></A
></A
></H3
><P
CLASS="para"
>You want to run another program from your own, pause until the other program is done, and then continue. The other program should have same STDIN and STDOUT as you have.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-866"
>Solution</A
></H3
><P
CLASS="para"
>Call <CODE
CLASS="literal"
>system</CODE
><A
CLASS="indexterm"
NAME="ch16-idx-1000006251-0"
></A
> with a string to have the shell interpret the string as a command line:</P
><PRE
CLASS="programlisting"
>$status = system(&quot;vi $myfile&quot;);</PRE
><P
CLASS="para"
>If you don't want the shell involved, pass <CODE
CLASS="literal"
>system</CODE
> a list:</P
><PRE
CLASS="programlisting"
>$status = system(&quot;vi&quot;, $myfile);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-878"
>Discussion</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>system</CODE
> function is the simplest and most generic way to run another program in Perl. It doesn't gather the program's STDOUT like backticks or <CODE
CLASS="literal"
>open</CODE
>. Instead, its return value is (essentially) that program's exit status. While the new program is running, your main program is suspended, so the new program can read from your STDIN and write to your STDOUT so users can interact with it.</P
><P
CLASS="para"
>Like <CODE
CLASS="literal"
>open</CODE
>, <CODE
CLASS="literal"
>exec</CODE
>, and backticks, <CODE
CLASS="literal"
>system</CODE
> uses the shell to start the program whenever it's called with one argument. This is convenient when you want to do redirection or other tricks:</P
><PRE
CLASS="programlisting"
>system(&quot;cmd1 args | cmd2 | cmd3 &gt;outfile&quot;);
system(&quot;cmd args &lt;infile &gt;outfile 2&gt;errfile&quot;);</PRE
><P
CLASS="para"
>To avoid the shell, call <CODE
CLASS="literal"
>system</CODE
> with a list of arguments:</P
><PRE
CLASS="programlisting"
>$status = system($program, $arg1, $arg);
die &quot;$program exited funny: $?&quot; unless $status == 0;</PRE
><P
CLASS="para"
>The returned status value is not just the exit value: it includes the signal number (if any) that the process died from. This is the same value that <CODE
CLASS="literal"
>wait</CODE
> sets <CODE
CLASS="literal"
>$?</CODE
> to. See <A
CLASS="xref"
HREF="ch16_20.htm"
TITLE="Avoiding Zombie Processes"
>Recipe 16.19</A
> to learn how to decode this value.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>system</CODE
> function (but not backticks) ignores SIGINT and SIGQUIT while child processes are running. That way those signals will kill only the child process. If you want your main program to die as well, check the return value of <CODE
CLASS="literal"
>system</CODE
>, or the value of the <CODE
CLASS="literal"
>$?</CODE
> variable.</P
><PRE
CLASS="programlisting"
>if (($signo = system(@arglist)) &amp;= 127) { 
    die &quot;program killed by signal $signo\n&quot;;
}</PRE
><P
CLASS="para"
>To get the effect of a <CODE
CLASS="literal"
>system</CODE
> that ignores SIGINT, install your own signal handler and then manually <CODE
CLASS="literal"
>fork</CODE
> and <CODE
CLASS="literal"
>exec</CODE
>:</P
><PRE
CLASS="programlisting"
>if ($pid = fork) {
    # parent catches INT and berates user
    local $SIG{INT} = sub { print &quot;Tsk tsk, no process interruptus\n&quot; };
    waitpid($pid, 0);
} else {
    die &quot;cannot fork: $!&quot; unless defined $pid;
    # child ignores INT and does its thing
    $SIG{INT} = &quot;IGNORE&quot;;
    exec(&quot;summarize&quot;, &quot;/etc/logfiles&quot;)             or die &quot;Can't exec: $!\n";
}
</PRE
><P
CLASS="para"
>A few programs examine their own program name. Shells look to see whether they were called with a leading minus to indicate interactivity. The <EM
CLASS="emphasis"
>expn</EM
> program at the end of Chapter 18 behaves differently if called as <EM
CLASS="emphasis"
>vrfy</EM
>, which can happen if you've installed the file under two different links as suggested. This is why you shouldn't trust that <CODE
CLASS="literal"
>$0</CODE
> is really the pathname to the invoked program&nbsp;- you could have been lied to in a number of ways.</P
><P
CLASS="para"
>If you want to fib to the program you're executing about its own name, specify the real path as the "indirect object" in front of the list passed to <CODE
CLASS="literal"
>system</CODE
>. (This also works with <CODE
CLASS="literal"
>exec</CODE
>.) The indirect object has no comma following it, just like using <CODE
CLASS="literal"
>printf</CODE
> with a filehandle or making object methods without the pointer arrow.</P
><PRE
CLASS="programlisting"
>$shell = '/bin/tcsh';
system $shell '-csh';           # pretend it's a login shell</PRE
><P
CLASS="para"
>Or, more directly:</P
><PRE
CLASS="programlisting"
>system {'/bin/tcsh'} '-csh';    # pretend it's a login shell</PRE
><P
CLASS="para"
>In the next example, the program's real pathname is supplied in the indirect object slot as <CODE
CLASS="literal"
>{'/home/tchrist/scripts/expn'}</CODE
>. The fictitious name <CODE
CLASS="literal"
>'vrfy</CODE
>' is given as the first real function argument, which the program will see stored in <CODE
CLASS="literal"
>$0</CODE
>.</P
><PRE
CLASS="programlisting"
># call expn as vrfy
system {'/home/tchrist/scripts/expn'} 'vrfy', @ADDRESSES;</PRE
><P
CLASS="para"
>Using an indirect object with <CODE
CLASS="literal"
>system</CODE
> is also more secure. This usage forces interpretation of the arguments as a multivalued list, even if the list had just one argument. That way you're safe from the shell expanding wildcards or splitting up words with whitespace in them.</P
><PRE
CLASS="programlisting"
>@args = ( &quot;echo surprise&quot; );

system @args;               # subject to shell escapes if @args == 1
system { $args[0] } @args;  # safe even with one-arg list</PRE
><P
CLASS="para"
>The first version, the one without the indirect object, ran the <EM
CLASS="emphasis"
>echo</EM
> program, passing it <CODE
CLASS="literal"
>&quot;surprise&quot;</CODE
> an argument. The second version didn't&nbsp;- it tried to run a program literally called <CODE
CLASS="literal"
>&quot;echo</CODE
> <CODE
CLASS="literal"
>surprise&quot;</CODE
>, didn't find it, and set <CODE
CLASS="literal"
>$?</CODE
> to a non-zero value indicating failure.<A
CLASS="indexterm"
NAME="ch16-idx-1000006253-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006253-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006253-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000005848"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../prog/ch06_03.htm"
>"Cooperating with Strangers"</A
> in <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>, or <I
CLASS="filename"
>perlsec </I
>(1); the <A
CLASS="olink"
HREF="../prog/ch03_190.htm"
><CODE
CLASS="literal"
>waitpid</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_040.htm"
><CODE
CLASS="literal"
>fork</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_033.htm"
><CODE
CLASS="literal"
>exec</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_167.htm"
><CODE
CLASS="literal"
>system</CODE
></A
>, and <A
CLASS="olink"
HREF="../prog/ch03_102.htm"
><CODE
CLASS="literal"
>open</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <I
CLASS="filename"
>perlfunc </I
>(1); <A
CLASS="xref"
HREF="ch16_02.htm"
TITLE="Gathering Output from a Program"
>Recipe 16.1</A
>; <A
CLASS="xref"
HREF="ch16_05.htm"
TITLE="Reading or Writing to Another Program"
>Recipe 16.4</A
>; <A
CLASS="xref"
HREF="ch16_20.htm"
TITLE="Avoiding Zombie Processes"
>Recipe 16.19</A
>; <A
CLASS="xref"
HREF="ch19_07.htm"
TITLE="Executing Commands Without Shell Escapes"
>Recipe 19.6</A
>; <CITE
CLASS="citetitle"
>Advanced Programming in the UNIX Environment</CITE
>, by Richard W. Stevens; Addison-Wesley (1992)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_02.htm"
TITLE="16.1. Gathering Output from a Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1. Gathering Output from a Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_04.htm"
TITLE="16.3. Replacing the Current Program with a Different One"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3. Replacing the Current Program with a Different One"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>16.1. Gathering Output from a Program</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>16.3. Replacing the Current Program with a Different One</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
