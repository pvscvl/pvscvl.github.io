<HTML
><HEAD
>
<TITLE>Recipe 10.4. Determining Current Function Name (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:38Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_04.htm"
TITLE="10.3. Creating Persistent Private Variables"><LINK
REL="next"
HREF="ch10_06.htm"
TITLE="10.5. Passing Arrays and Hashes by Reference"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.3. Creating Persistent Private Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.3. Creating Persistent Private Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_06.htm"
TITLE="10.5. Passing Arrays and Hashes by Reference"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.5. Passing Arrays and Hashes by Reference"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-31648"
>10.4. Determining Current Function Name</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-326"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000004665-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004665-1"
></A
>You want to determine the name of the currently running function. This is useful for creating error messages that don't need to be changed if you copy and paste the subroutine code.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-332"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>caller</CODE
><A
CLASS="indexterm"
NAME="ch10-idx-1000004666-0"
></A
> function:</P
><PRE
CLASS="programlisting"
>$this_function = (caller(0))[3];</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-340"
>Discussion</A
></H3
><P
CLASS="para"
>Code can always find the current line number in the special symbol <CODE
CLASS="literal"
>__LINE__ </CODE
><A
CLASS="indexterm"
NAME="ch10-idx-1000004672-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004672-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004672-2"
></A
>, the current file in <CODE
CLASS="literal"
>__FILE__</CODE
> , and the current package in <CODE
CLASS="literal"
>__PACKAGE__ </CODE
>. But there's no such symbol for the current subroutine name, let alone the name of the one that called this subroutine.</P
><P
CLASS="para"
>The built-in function <CODE
CLASS="literal"
>caller</CODE
> handles all of these. In scalar context it returns the calling function's package name. But in list context, it returns a wealth of information. You can also pass it a number indicating how many frames (nested subroutine calls) back you'd like information about: 0 is your own function, 1 is your caller, and so on.</P
><P
CLASS="para"
>Here's the full syntax, where <CODE
CLASS="literal"
>$i</CODE
> is how far back you're interested in:</P
><PRE
CLASS="programlisting"
>($package, $filename, $line, $subr, $has_args, $wantarray )= caller($i);
#   0         1         2       3       4          5</PRE
><P
CLASS="para"
>Here's what each of those return values means:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>$package </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The package that the code was compiled in.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$filename </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the file the code was compiled in, reporting <CODE
CLASS="literal"
>-e</CODE
> if launched from the command-line switch of the same name, or <CODE
CLASS="literal"
>-</CODE
> if the script was read from STDIN.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$line </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The line number that frame was called from.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$subr </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of that frame's function, including its package. Closures return names like <CODE
CLASS="literal"
>main::__ANON__ </CODE
>, which are not callable. In <CODE
CLASS="literal"
>eval</CODE
> it returns <CODE
CLASS="literal"
>&quot;(eval)&quot;</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$has_args </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Whether the function was called with arguments.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$wantarray</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The value the <CODE
CLASS="literal"
>wantarray</CODE
> function would return for that stack frame; either true, false but defined, or else undefined (respectively). This tells you whether the function was called in list, scalar, or void context.</P
></DD
></DL
><P
CLASS="para"
>Rather than using <CODE
CLASS="literal"
>caller</CODE
><A
CLASS="indexterm"
NAME="ch10-idx-1000004673-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004673-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004673-2"
></A
> directly as in the solution, you might want to write functions instead:</P
><PRE
CLASS="programlisting"
>$me  = whoami();
$him = whowasi();

sub whoami  { (caller(1))[3] }
sub whowasi { (caller(2))[3] }</PRE
><P
CLASS="para"
>These use arguments 1 and 2 for parent and grandparent functions because the call to <CODE
CLASS="literal"
>whoami</CODE
> or <CODE
CLASS="literal"
>whowasi</CODE
> would be number 0.<A
CLASS="indexterm"
NAME="ch10-idx-1000004668-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004668-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-1000004848"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch03_191.htm"
><CODE
CLASS="literal"
>wantarray</CODE
></A
> and <A
CLASS="olink"
HREF="../prog/ch03_010.htm"
><CODE
CLASS="literal"
>caller</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlfunc </I
>(1); <A
CLASS="xref"
HREF="ch10_07.htm"
TITLE="Detecting Return Context"
>Recipe 10.6</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_04.htm"
TITLE="10.3. Creating Persistent Private Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.3. Creating Persistent Private Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_06.htm"
TITLE="10.5. Passing Arrays and Hashes by Reference"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.5. Passing Arrays and Hashes by Reference"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>10.3. Creating Persistent Private Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>10.5. Passing Arrays and Hashes by Reference</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
