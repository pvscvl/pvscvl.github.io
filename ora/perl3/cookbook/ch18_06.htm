<HTML
><HEAD
>
<TITLE>Recipe 18.5. Reading Mail with POP3 (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:04Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Internet Services"><LINK
REL="prev"
HREF="ch18_05.htm"
TITLE="18.4. Reading and Posting Usenet News Messages"><LINK
REL="next"
HREF="ch18_07.htm"
TITLE="18.6. Simulating Telnet from a Program"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_05.htm"
TITLE="18.4. Reading and Posting Usenet News Messages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.4. Reading and Posting Usenet News Messages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Internet Services"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.6. Simulating Telnet from a Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.6. Simulating Telnet from a Program"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-chap18_reading_1"
>18.5. Reading Mail with POP3</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-709"
>Problem</A
></H3
><P
CLASS="para"
>You want to fetch mail from a <A
CLASS="indexterm"
NAME="ch18-idx-1000004305-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004305-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004305-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004305-3"
></A
>POP3 server. This lets you write a program to summarize your unread mail, move it from a remote server to a local mailbox, or toggle between Internet and local mail systems.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-715"
>Solution</A
></H3
><P
CLASS="para"
>Use the CPAN module Net::POP3:</P
><PRE
CLASS="programlisting"
>$pop = Net::POP3-&gt;new($mail_server)
    or die &quot;Can't open connection to $mail_server : $!\n&quot;;
defined ($pop-&gt;login($username, $password))
    or die &quot;Can't authenticate: $!\n&quot;;
$messages = $pop-&gt;list
    or die &quot;Can't get list of undeleted messages: $!\n&quot;;
foreach $msgid (keys %$messages) {
    $message = $pop-&gt;get($msgid);
    unless (defined $message) {
        warn &quot;Couldn't fetch $msgid from server: $!\n&quot;;
        next;
    }
    # $message is a reference to an array of lines
    $pop-&gt;delete($msgid);
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-751"
>Discussion</A
></H3
><P
CLASS="para"
>Traditionally, mail has been a three-party system: the <EM
CLASS="emphasis"
>MTA</EM
> (Mail Transport Agent, a system program like <EM
CLASS="emphasis"
>sendmail</EM
>) delivers mail to the <EM
CLASS="emphasis"
>spool</EM
>, where it is read by the <EM
CLASS="emphasis"
>MUA</EM
> (Mail User Agent, a program like <EM
CLASS="emphasis"
>mail</EM
>). This dates from the days of big servers holding mail and users reading it through dumb terminals. As PCs and networks entered the picture, the need arose for MUAs like Pine to run on different machines than the one housing the spool. The Post Office Protocol (POP) implements efficient message listing, reading, and deleting over a TCP/IP session.</P
><P
CLASS="para"
>The CPAN module Net::POP3 is a POP client. That is, it lets your Perl program act as an MUA. The first step in using Net::POP3 is to create a new Net::POP3 object. Pass <CODE
CLASS="literal"
>new</CODE
> the name of the POP3 server:</P
><PRE
CLASS="programlisting"
>$pop = Net::POP3-&gt;new( &quot;pop.myisp.com&quot; )
    or die &quot;Can't connect to pop.myisp.com: $!\n&quot;;</PRE
><P
CLASS="para"
>All Net::POP3 functions return <CODE
CLASS="literal"
>undef</CODE
> or the empty list <CODE
CLASS="literal"
>()</CODE
> if an error occurs, depending on the context they were called in. If an error occurs, <CODE
CLASS="literal"
>$!</CODE
> may contain a meaningful error message (but also may not).</P
><P
CLASS="para"
>You may optionally pass further arguments to <CODE
CLASS="literal"
>new</CODE
> in a hash-like fashion, indicating a timeout value (in seconds) for network operations:</P
><PRE
CLASS="programlisting"
>$pop = Net::POP3-&gt;new( &quot;pop.myisp.com&quot;,
                       Timeout =&gt; 30 )
    or die &quot;Can't connect to pop.myisp.com : $!\n&quot;;</PRE
><P
CLASS="para"
>Authenticate yourself to the POP3 server with the <CODE
CLASS="literal"
>login</CODE
> method. It takes two arguments, username and password, but both are optional. If the username is omitted, the current username is used. If the password is omitted, Net::POP3 tries to use Net::Netrc to find a password:</P
><PRE
CLASS="programlisting"
>defined ($pop-&gt;login(&quot;gnat&quot;, &quot;S33kr1T Pa55w0rD&quot;))
    or die &quot;Hey, my username and password didn't work!\n&quot;;

defined ($pop-&gt;login( &quot;midget&quot; ))           # use Net::Netrc to find password
    or die &quot;Authentication failed.\n&quot;;

defined ($pop-&gt;<CODE
CLASS="literal"
>login())</CODE
>                     # current username and Net::Netrc
    or die &quot;Authentication failed.  Miserably.\n&quot;;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>login</CODE
> method sends the password in plain text across the network. This is undesirable, so if you have the MD5 module from CPAN, you can use the <CODE
CLASS="literal"
>apop</CODE
> method. It works exactly like <CODE
CLASS="literal"
>login</CODE
>, except that it encrypts the password:</P
><PRE
CLASS="programlisting"
>$pop-&gt;apop( $username, $password )
    or die &quot;Couldn't authenticate: $!\n&quot;;</PRE
><P
CLASS="para"
>Once authenticated, you may then access the spool with <CODE
CLASS="literal"
>list</CODE
>, <CODE
CLASS="literal"
>get</CODE
>, and <CODE
CLASS="literal"
>delete</CODE
>. The <CODE
CLASS="literal"
>list</CODE
> method gives you a list of undeleted messages in the spool. It returns a hash, where each key is a message number and each value is the size of the corresponding message in bytes:</P
><PRE
CLASS="programlisting"
>%undeleted = $pop-&gt;<CODE
CLASS="literal"
>list();</CODE
>
foreach $msgnum (keys %undeleted) {
    print &quot;Message $msgnum is $undeleted{$msgnum} bytes long.\n&quot;;
}</PRE
><P
CLASS="para"
>To retrieve a message, call <CODE
CLASS="literal"
>get</CODE
> with the message number. It returns a reference an array of lines in the message:</P
><PRE
CLASS="programlisting"
>print &quot;Retrieving $msgnum : &quot;;
$message = $pop-&gt;get($msgnum);
if ($message) {
    # succeeded
    print &quot;\n&quot;;
    print @$message;                # print the message
} else {
        # failed
    print &quot;failed ($!)\n&quot;;
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>delete</CODE
> method marks a message as deleted. When you call <CODE
CLASS="literal"
>quit</CODE
> to terminate your POP3 session, the messages marked as deleted are removed from the mailbox. The <CODE
CLASS="literal"
>reset</CODE
> method undoes any <CODE
CLASS="literal"
>delete</CODE
> calls made during the session. If the session is terminated by the Net::POP3 object being destroyed because it went out of scope, the <CODE
CLASS="literal"
>reset</CODE
> will be called automatically.</P
><P
CLASS="para"
>You have probably noticed there's no way to <EM
CLASS="emphasis"
>send</EM
> mail. POP3 only supports reading and deleting existing messages. To send new ones, you still have to use programs like <EM
CLASS="emphasis"
>mail</EM
> or <EM
CLASS="emphasis"
>sendmail</EM
>, or do <CODE
CLASS="literal"
>SMTP</CODE
>. In other words, you still need to use <A
CLASS="xref"
HREF="ch18_04.htm"
TITLE="Sending Mail"
>Recipe 18.3</A
>.</P
><P
CLASS="para"
>The task attempted by POP3 &nbsp;-  connecting mail clients and mail servers &nbsp;-  is also attempted by the IMAP protocol. IMAP has more features and is more typically seen on very large sites.<A
CLASS="indexterm"
NAME="ch18-idx-1000004311-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004311-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004311-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004311-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-835"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the Net::POP3 module from CPAN; RFC 1734, <CITE
CLASS="citetitle"
>POP3 AUTHentication command</CITE
>; RFC 1957, <CITE
CLASS="citetitle"
>Some Observations on Implementations of the Post Office Protocol</CITE
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_05.htm"
TITLE="18.4. Reading and Posting Usenet News Messages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.4. Reading and Posting Usenet News Messages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_07.htm"
TITLE="18.6. Simulating Telnet from a Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.6. Simulating Telnet from a Program"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>18.4. Reading and Posting Usenet News Messages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>18.6. Simulating Telnet from a Program</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
