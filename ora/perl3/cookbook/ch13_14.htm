<HTML
><HEAD
>
<TITLE>Recipe 13.13. Coping with Circular Data Structures (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:30Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_13.htm"
TITLE="13.12. Solving the Data Inheritance Problem"><LINK
REL="next"
HREF="ch13_15.htm"
TITLE="13.14. Overloading Operators"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_13.htm"
TITLE="13.12. Solving the Data Inheritance Problem"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.12. Solving the Data Inheritance Problem"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_15.htm"
TITLE="13.14. Overloading Operators"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.14. Overloading Operators"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-25755"
>13.13. Coping with Circular Data Structures</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1607"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004613-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004613-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004613-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004613-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004613-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004613-5"
></A
></A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000004644-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004644-1"
></A
>You have an inherently self-referential data structure so Perl's reference-based garbage collection system won't notice when it's no longer being used. You want to prevent your program from leaking memory.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1613"
>Solution</A
></H3
><P
CLASS="para"
>Create a non-circular container object that holds a pointer to the self-referential data structure. Define a <CODE
CLASS="literal"
>DESTROY</CODE
> method for the containing object's class that manually breaks the self-referential circularities.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1619"
>Discussion</A
></H3
><P
CLASS="para"
>Many interesting data structures include references back to themselves. This can occur in code as simple as this:</P
><PRE
CLASS="programlisting"
>$node-&gt;{NEXT} = $node;</PRE
><P
CLASS="para"
>As soon as you do that, you've created a circularity that will hide the data structure from Perl's referenced-based garbage collection system. Destructors will eventually be called when your program exits, but you sometimes don't want to wait that long.</P
><P
CLASS="para"
>A circular linked list is similarly self-referential. Each node contains a front pointer, a back pointer, and the node's value. If you implement it with references in Perl, you get a circular set of references and the data structure won't naturally be garbage collected when there are no external references to its nodes.</P
><P
CLASS="para"
>Making each node an instance of class Ring doesn't solve the problem. What you want is for Perl to clean up this structure as it would any other structure  &nbsp;-   which it will do if you implement your object as a structure that contains a reference to the real circle. That reference will be stored in the <CODE
CLASS="literal"
>&quot;DUMMY&quot;</CODE
> field:</P
><PRE
CLASS="programlisting"
>package Ring;

# return an empty ring structure
sub new {
    my $class = shift;
    my $node  = { };
    $node-&gt;{NEXT} = $node-&gt;{PREV} = $node;
    my $self  = { DUMMY =&gt; $node, COUNT =&gt; 0 };
    bless $self, $class;
    return $self;
}</PRE
><P
CLASS="para"
>It's the nodes contained in the ring that are circular, not the returned ring object itself. That means code like the following won't cause a memory leak:</P
><PRE
CLASS="programlisting"
>use Ring;

$COUNT = 1000;
for (1 .. 20) { 
    my $r = Ring-&gt;<CODE
CLASS="literal"
>new()</CODE
>;
    for ($i = 0; $i &lt; $COUNT; $i++) { $r-&gt;insert($i) } 
}</PRE
><P
CLASS="para"
>Even though we create twenty rings of a thousand nodes each, each ring is thrown away before a new one is created. The user of the class need do no more to free the ring's memory than they would to free a string's memory. That is, this all happens automatically, just as it's supposed to.</P
><P
CLASS="para"
>However, the implementer of the class does have to have a destructor for the ring, one that will manually delete the nodes:</P
><PRE
CLASS="programlisting"
># when a Ring is destroyed, destroy the ring structure it contains 
sub DESTROY {
    my $ring = shift;
    my $node;
    for ( $node  =  $ring-&gt;{DUMMY}-&gt;{NEXT};
          $node !=  $ring-&gt;{DUMMY}; 
          $node  =  $node-&gt;{NEXT} )
    {
             $ring-&gt;delete_node($node);
    } 
    $node-&gt;{PREV} = $node-&gt;{NEXT} = undef;
} 

# delete a node from the ring structure
sub delete_node {
    my ($ring, $node) = @_;
    $node-&gt;{PREV}-&gt;{NEXT} = $node-&gt;{NEXT};
    $node-&gt;{NEXT}-&gt;{PREV} = $node-&gt;{PREV};
    --$ring-&gt;{COUNT};
} </PRE
><P
CLASS="para"
>Here are a few other methods you might like in your ring class. Notice how the real work lies within the circularity hidden inside the object:</P
><PRE
CLASS="programlisting"
># $node = $ring-&gt;search( $value ) : find $value in the ring
# structure in $node
sub search {
    my ($ring, $value) = @_;
    my $node = $ring-&gt;{DUMMY}-&gt;{NEXT};
    while ($node != $ring-&gt;{DUMMY} &amp;&amp; $node-&gt;{VALUE} != $value) {
          $node = $node-&gt;{NEXT};
    }
    return $node;
} 

# $ring-&gt;insert( $value ) : insert $value into the ring structure
sub insert_value {
    my ($ring, $value) = @_;
    my $node = { VALUE =&gt; $value };
    $node-&gt;{NEXT} = $ring-&gt;{DUMMY}-&gt;{NEXT};
    $ring-&gt;{DUMMY}-&gt;{NEXT}-&gt;{PREV} = $node;
    $ring-&gt;{DUMMY}-&gt;{NEXT} = $node;
    $node-&gt;{PREV} = $ring-&gt;{DUMMY};
    ++$ring-&gt;{COUNT};
} 

# $ring-&gt;delete_value( $value ) : delete a node from the ring
# structure by value
sub delete_value {
    my ($ring, $value) = @_;
    my $node = $ring-&gt;search($value);
    return if $node == $ring-&gt;{DUMMY};
    $ring-&gt;delete_node($node);
}<A
CLASS="indexterm"
NAME="ch13-idx-1000004642-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004642-1"
></A
>

1;<A
CLASS="indexterm"
NAME="ch13-idx-1000004634-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004634-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004634-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004634-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004634-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004634-5"
></A
></PRE
><P
CLASS="para"
>Here's one for your <EM
CLASS="emphasis"
>fortune</EM
> file: Perl's garbage collector abhors a naked circularity.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1783"
>See Also</A
></H3
><P
CLASS="para"
>The algorithms in this recipe derive in part from pages 206-207 of the wonderful textbook, <CITE
CLASS="citetitle"
>Introduction to Algorithms</CITE
>, by Cormen, Leiserson, and Rivest (MIT Press/McGraw-Hill, 1990); see also the section <A
CLASS="olink"
HREF="../prog/ch05_03.htm"
>"A Note on Garbage Collection"</A
> in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <I
CLASS="filename"
>perlobj </I
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_13.htm"
TITLE="13.12. Solving the Data Inheritance Problem"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.12. Solving the Data Inheritance Problem"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_15.htm"
TITLE="13.14. Overloading Operators"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.14. Overloading Operators"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>13.12. Solving the Data Inheritance Problem</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>13.14. Overloading Operators</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
