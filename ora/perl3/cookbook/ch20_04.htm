<HTML
><HEAD
>
<TITLE>Recipe 20.3. Extracting URLs (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:56Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"><LINK
REL="prev"
HREF="ch20_03.htm"
TITLE="20.2. Automating Form Submission"><LINK
REL="next"
HREF="ch20_05.htm"
TITLE="20.4. Converting ASCII to HTML"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_03.htm"
TITLE="20.2. Automating Form Submission"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.2. Automating Form Submission"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch20_01.htm"
TITLE="20. Web Automation"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.4. Converting ASCII to HTML"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.4. Converting ASCII to HTML"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch20-25551"
>20.3. Extracting URLs<A
CLASS="indexterm"
NAME="ch20-idx-1000002602-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002602-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002602-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002602-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002602-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002602-5"
></A
></A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-289"
>Problem</A
></H3
><P
CLASS="para"
>You want to extract all URLs from an HTML file.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-295"
>Solution</A
></H3
><P
CLASS="para"
>Use the HTML::LinkExtor module from CPAN:</P
><PRE
CLASS="programlisting"
>use HTML::LinkExtor;

$parser = HTML::LinkExtor-&gt;new(undef, $base_url);
$parser-&gt;parse_file($filename);
@links = $parser-&gt;links;
foreach $linkarray (@links) {
    my @element = @$linkarray;
    my $elt_type = shift @element;                  # element type

    # possibly test whether this is an element we're interested in
    while (@element) {
        # extract the next attribute and its value
        my ($attr_name, $attr_value) = splice(@element, 0, 2);
        # ... do something with them ...
    }
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-333"
>Discussion</A
></H3
><P
CLASS="para"
>You can use HTML::LinkExtor in two different ways: either to call <CODE
CLASS="literal"
>links</CODE
> to get a list of all links in the document once it is completely parsed, or to pass a code reference in the first argument to <CODE
CLASS="literal"
>new</CODE
>. The referenced function will be called on each link as the document is parsed.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>links</CODE
> method clears the link list, so you can call it only once per parsed document. It returns a reference to an array of elements. Each element is itself an array reference with an HTML::Element object at the front followed by a list of attribute name and attribute value pairs. For instance, the HTML:</P
><PRE
CLASS="programlisting"
>&lt;A HREF=&quot;http://www.perl.com/&quot;&gt;Home page&lt;/A&gt;
&lt;IMG SRC=&quot;images/big.gif&quot; LOWSRC=&quot;images/big-lowres.gif&quot;&gt;</PRE
><P
CLASS="para"
>would return a data structure like this:</P
><PRE
CLASS="programlisting"
>[
  [ a,   href   =&gt; &quot;http://www.perl.com/&quot; ],
  [ img, src    =&gt;&quot;images/big.gif&quot;,
         lowsrc =&gt; &quot;images/big-lowres.gif&quot; ]
]</PRE
><P
CLASS="para"
>Here's an example of how you would use the <CODE
CLASS="literal"
>$elt_type</CODE
> and the <CODE
CLASS="literal"
>$attr_name</CODE
> to print out and anchor an image:</P
><PRE
CLASS="programlisting"
>if ($elt_type eq 'a' &amp;&amp; $attr_name eq 'href') {
    print &quot;ANCHOR: $attr_value\n&quot; 
        if $attr_value-&gt;scheme =~ /http|ftp/;
}
if ($elt_type eq 'img' &amp;&amp; $attr_name eq 'src') {
    print &quot;IMAGE:  $attr_value\n&quot;;
}</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch20_04.htm"
TITLE="xurl"
>Example 20.2</A
> is a complete program that takes as its arguments a URL, like file:///tmp/testing.html or http://www.ora.com/, and produces on standard output an alphabetically sorted list of unique URLs.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch20-42565"
>Example 20.2: xurl</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# xurl - extract unique, sorted list of links from URL
use HTML::LinkExtor;
use LWP::Simple;

$base_url = shift;
$parser = HTML::LinkExtor-&gt;new(undef, $base_url);
$parser-&gt;parse(get($base_url))-&gt;eof;
@links = $parser-&gt;links;
foreach $linkarray (@links) {
    my @element  = @$linkarray;
    my $elt_type = shift @element;
    while (@element) {
        my ($attr_name , $attr_value) = splice(@element, 0, 2);
        $seen{$attr_value}++;
    }
}
for (sort keys %seen) { print $_, &quot;\n&quot; }</PRE
></DIV
><P
CLASS="para"
>This program does have a limitation: if the <CODE
CLASS="literal"
>get</CODE
> of <CODE
CLASS="literal"
>$base_url</CODE
> involves a redirection, your links will all be resolved with the original URL instead of the URL at the end of the redirection. To fix this, fetch the document with LWP::UserAgent and examine the response code to find out if a redirection occurred. Once you know the post-redirection URL (if any), construct the HTML::LinkExtor object.</P
><P
CLASS="para"
>Here's an example of the run:</P
><PRE
CLASS="programlisting"
>% xurl http://www.perl.com/CPAN
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>ftp://ftp@ftp.perl.com/CPAN/CPAN.html</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>http://language.perl.com/misc/CPAN.cgi</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>http://language.perl.com/misc/cpan_module</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>http://language.perl.com/misc/getcpan</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>http://www.perl.com/index.html</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>http://www.perl.com/gifs/lcb.xbm</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Often in mail or Usenet messages, you'll see URLs written as:</P
><PRE
CLASS="programlisting"
>&lt;URL:http://www.perl.com&gt;</PRE
><P
CLASS="para"
>This is supposed to make it easy to pick URLs from messages:</P
><PRE
CLASS="programlisting"
>@URLs = ($message =~ /&lt;URL:(.*?)&gt;/g);<A
CLASS="indexterm"
NAME="ch20-idx-1000002604-0"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002604-1"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002604-2"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002604-3"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002604-4"
></A
><A
CLASS="indexterm"
NAME="ch20-idx-1000002604-5"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch20-pgfId-437"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the CPAN modules LWP::Simple, HTML::LinkExtor, and HTML::Entities; <A
CLASS="xref"
HREF="ch20_02.htm"
TITLE="Fetching a URL from a Perl Script"
>Recipe 20.1</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_03.htm"
TITLE="20.2. Automating Form Submission"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 20.2. Automating Form Submission"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch20_05.htm"
TITLE="20.4. Converting ASCII to HTML"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 20.4. Converting ASCII to HTML"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>20.2. Automating Form Submission</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>20.4. Converting ASCII to HTML</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
