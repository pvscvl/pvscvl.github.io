<HTML
><HEAD
>
<TITLE>Recipe 4.4. Doing Something with Every Element in a List (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:13Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_04.htm"
TITLE="4.3. Changing Array Size"><LINK
REL="next"
HREF="ch04_06.htm"
TITLE="4.5. Iterating Over an Array by Reference"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.3. Changing Array Size"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.3. Changing Array Size"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_06.htm"
TITLE="4.5. Iterating Over an Array by Reference"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.5. Iterating Over an Array by Reference"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-18004"
>4.4. Doing Something with Every Element in a List</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-397"
>Problem <A
CLASS="indexterm"
NAME="ch04-idx-1000006630-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006630-1"
></A
></A
></H3
><P
CLASS="para"
>You want to repeat a procedure for every element in a list.</P
><P
CLASS="para"
>Often you use an array to collect information you're interested in; for instance, login names of users who have exceeded their disk quota. When you finish collecting the information, you want to process it by doing something with every element in the array. In the disk quota example, you might send each user a stern mail message.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-405"
>Solution</A
></H3
><P
CLASS="para"
>Use a <CODE
CLASS="literal"
>foreach</CODE
> loop:</P
><PRE
CLASS="programlisting"
>foreach $item (LIST) {
    # do something with $item
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-417"
>Discussion</A
></H3
><P
CLASS="para"
>Let's say we've used <CODE
CLASS="literal"
>@bad_users</CODE
> to compile a list of users over their allotted disk quota. To call some <CODE
CLASS="literal"
>complain()</CODE
> subroutine for each one we'd use:</P
><PRE
CLASS="programlisting"
>foreach $user (@bad_users) {
        complain($user);
}</PRE
><P
CLASS="para"
>Rarely is this recipe so simply applied. Instead, we often use functions to generate the list:</P
><PRE
CLASS="programlisting"
>foreach $var (sort keys %ENV) {
    print &quot;$var=$ENV{$var}\n&quot;;
}</PRE
><P
CLASS="para"
>Here we're using <CODE
CLASS="literal"
>sort</CODE
> and <CODE
CLASS="literal"
>keys</CODE
> to build a sorted list of environment variable names. In situations where the list will be used more than once, you'll obviously keep it around by saving in an array. But for one-shot processing, it's often tidier to process the list directly.</P
><P
CLASS="para"
>Not only can we add complexity to this formula by building up the list in the <CODE
CLASS="literal"
>foreach</CODE
>, we can also add complexity by doing more work inside the code block. A common application of <CODE
CLASS="literal"
>foreach</CODE
> is to gather information on every element of a list, and then decide (based on that information) whether to do something. For instance, returning to the disk quota example:</P
><PRE
CLASS="programlisting"
>foreach $user (@all_users) {
    $disk_space = get_usage($user);     # find out how much disk space in use
    if ($disk_space &gt; $MAX_QUOTA) {     # if it's more than we want ...
        complain($user);                # ... then object vociferously
    }
}</PRE
><P
CLASS="para"
>More complicated program flow is possible. The code can call <CODE
CLASS="literal"
>last</CODE
> to jump out of the loop, <CODE
CLASS="literal"
>next</CODE
> to move on to the next element, or <CODE
CLASS="literal"
>redo</CODE
> to jump back to the first statement inside the block. Use these to say "no point continuing with this one, I know it's not what I'm looking for" (<CODE
CLASS="literal"
>next</CODE
>), "I've found what I'm looking for, there's no point in my checking the rest" (<CODE
CLASS="literal"
>last</CODE
>), or "I've changed some things, I'd better do my tests and calculations again" (<CODE
CLASS="literal"
>redo</CODE
>).</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-1000006637-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006637-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006637-2"
></A
>The variable set to each value in the list is called a <EM
CLASS="emphasis"
>loop variable</EM
> or <EM
CLASS="emphasis"
>iterator variable</EM
>. If no iterator variable is supplied, the global variable <CODE
CLASS="literal"
>$_</CODE
> is used. <CODE
CLASS="literal"
>$_</CODE
> is the default variable for many of Perl's string, list, and file functions. In brief code blocks, omitting <CODE
CLASS="literal"
>$_</CODE
> improves readability. (In long ones, though, too much implicit use hampers readability.) For example:</P
><PRE
CLASS="programlisting"
>foreach (`who`) {
    if (/tchrist/) {
        print;
    }
}</PRE
><P
CLASS="para"
>or combining with a <CODE
CLASS="literal"
>while</CODE
> loop:</P
><PRE
CLASS="programlisting"
>while (&lt;FH&gt;) {              # $_ is set to the line just read
    chomp;                  # $_ has a trailing \n removed, if it had one
    foreach (split) {       # $_ is split on whitespace, into @_
                            # then $_ is set to each chunk in turn
        $_ = reverse;       # the characters in $_ are reversed
        print;              # $_ is printed
    }
}</PRE
><P
CLASS="para"
>Perhaps all these uses of <CODE
CLASS="literal"
>$_</CODE
> are starting to make you nervous. In particular, the <CODE
CLASS="literal"
>foreach</CODE
> and the <CODE
CLASS="literal"
>while</CODE
> both give values to <CODE
CLASS="literal"
>$_</CODE
>. You might fear that at the end of the <CODE
CLASS="literal"
>foreach</CODE
>, the full line as read into <CODE
CLASS="literal"
>$_</CODE
> with <CODE
CLASS="literal"
>&lt;FH&gt;</CODE
> would be forever gone.</P
><P
CLASS="para"
>Fortunately, your fears would be unfounded, at least in this case. Perl won't permanently clobber <A
CLASS="indexterm"
NAME="ch04-idx-1000007741-0"
></A
><CODE
CLASS="literal"
>$_</CODE
>'s old value, because the <CODE
CLASS="literal"
>foreach</CODE
>'s iterator variable (<CODE
CLASS="literal"
>$_</CODE
> in this case) is automatically preserved during the loop. It saves away any old value on entry and restores it upon exit.</P
><P
CLASS="para"
>There is cause for some concern though. If the <CODE
CLASS="literal"
>while</CODE
> had been the inner loop and the <CODE
CLASS="literal"
>foreach</CODE
> the outer one, then your fears would have been realized. Unlike a <CODE
CLASS="literal"
>foreach</CODE
> loop, the <CODE
CLASS="literal"
>while</CODE
> <CODE
CLASS="literal"
>&lt;FH&gt;</CODE
> construct clobbers the value of the global <CODE
CLASS="literal"
>$_</CODE
> without first localizing it! So any routine&nbsp;- or block for that matter&nbsp;- that uses such a construct with <CODE
CLASS="literal"
>$_</CODE
> should always declare <CODE
CLASS="literal"
>local</CODE
> <CODE
CLASS="literal"
>$_</CODE
> at its front.</P
><P
CLASS="para"
>If a lexical variable (one declared with <CODE
CLASS="literal"
>my</CODE
>) is in scope, the temporary variable will be lexically scoped, private to that loop. Otherwise, it will be a dynamically scoped global variable. To avoid strange magic at a distance, as of release 5.004 you can write this more obviously and more clearly as:</P
><PRE
CLASS="programlisting"
>foreach my $item (@array) {
    print &quot;i = $item\n&quot;;
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>foreach</CODE
> looping construct has another feature: each time through the loop, the iterator variable becomes not a copy of but rather an<A
CLASS="indexterm"
NAME="ch04-idx-1000006638-0"
></A
> <EM
CLASS="emphasis"
>alias</EM
> for the current element. This means that when you change that iterator variable, you really change each element in the list:</P
><PRE
CLASS="programlisting"
>@array = (1,2,3);
foreach $item (@array) {
    $item--;
}
print &quot;@array\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>0 1 2</I
></CODE
></B
></CODE
>

# multiply everything in @a and @b by seven
@a = ( .5, 3 ); @b =( 0, 1 );
foreach $item (@a, @b) {
    $item *= 7;
}
print &quot;@a @b\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>3.5 21 0 7</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>This aliasing means that using a <CODE
CLASS="literal"
>foreach</CODE
> loop to modify list values is both more readable and faster than the equivalent code using a three-part <CODE
CLASS="literal"
>for</CODE
> loop and explicit indexing would be. This behavior is a feature, not a bug, that was introduced by design. If you didn't know about it, you might accidentally change something. Now you know about it.</P
><P
CLASS="para"
>For example, if we used <CODE
CLASS="literal"
>s///</CODE
> on elements of the list returned by the <CODE
CLASS="literal"
>values</CODE
> function, we would only be changing copies, not the real hash itself. The hash slice (<CODE
CLASS="literal"
>@hash{keys</CODE
> <CODE
CLASS="literal"
>%hash}</CODE
> is a hash slice, explained in <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Hashes"
>Chapter 5, <CITE
CLASS="chapter"
>Hashes</CITE
></A
>), however, gives us something we <EM
CLASS="emphasis"
>can</EM
> usefully change:</P
><PRE
CLASS="programlisting"
># trim whitespace in the scalar, the array, and all the values
# in the hash
foreach ($scalar, @array, @hash{keys %hash}) {
    s/^\s+//;
    s/\s+$//;
}</PRE
><P
CLASS="para"
>For reasons hearkening back to the equivalent construct in the Unix Bourne shell, the <CODE
CLASS="literal"
>for</CODE
> and <CODE
CLASS="literal"
>foreach</CODE
> keywords are interchangeable:</P
><PRE
CLASS="programlisting"
>for $item (@array) {  # same as foreach $item (@array)
    # do something
}

for (@array)      {   # same as foreach $_ (@array)
    # do something
}</PRE
><P
CLASS="para"
>This style often indicates that its author writes or maintains shell scripts, perhaps for Unix systems administration. As such, their life is probably hard enough, so don't speak too harshly of them. Remember, TMTOWTDI. This is just one of those ways.</P
><P
CLASS="para"
>If you aren't fluent in Bourne shell, you might find it clearer to express "for each <CODE
CLASS="literal"
>$thing</CODE
> in this <CODE
CLASS="literal"
>@list</CODE
>," by saying <CODE
CLASS="literal"
>foreach</CODE
> to make your code less like the shell and more like English. (But don't try to make your English look like your code!)</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-567"
>See Also</A
></H3
><P
CLASS="para"
>The "For Loops," "Foreach Loops," and "Loop Control" sections of <I
CLASS="filename"
>perlsyn </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the "Temporary Values via local(  )" section of <I
CLASS="filename"
>perlsub</I
> (1); the <A
CLASS="olink"
HREF="../prog/ch02_06.htm"
>"Scoped Declarations"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; we talk about <CODE
CLASS="literal"
>local()</CODE
> in <A
CLASS="xref"
HREF="ch10_14.htm"
TITLE="Saving Global Values"
>Recipe 10.13</A
>; we talk about <CODE
CLASS="literal"
>my()</CODE
> in <A
CLASS="xref"
HREF="ch10_03.htm"
TITLE="Making Variables Private to a Function"
>Recipe 10.2</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.3. Changing Array Size"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.3. Changing Array Size"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_06.htm"
TITLE="4.5. Iterating Over an Array by Reference"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.5. Iterating Over an Array by Reference"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>4.3. Changing Array Size</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>4.5. Iterating Over an Array by Reference</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
