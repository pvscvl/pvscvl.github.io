<HTML
><HEAD
>
<TITLE>Recipe 15.13. Controlling Another Program with Expect (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:26Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"><LINK
REL="prev"
HREF="ch15_13.htm"
TITLE="15.12. Managing the Screen"><LINK
REL="next"
HREF="ch15_15.htm"
TITLE="15.14. Creating Menus with Tk"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch15_13.htm"
TITLE="15.12. Managing the Screen"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.12. Managing the Screen"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. User Interfaces"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch15_15.htm"
TITLE="15.14. Creating Menus with Tk"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.14. Creating Menus with Tk"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-28528"
>15.13. Controlling Another Program with Expect</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1281"
>Problem<A
CLASS="indexterm"
NAME="ch15-idx-1000005146-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005146-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005146-2"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005146-3"
></A
></A
></H3
><P
CLASS="para"
>You want to automate interaction with a full-screen program that expects to have a terminal behind STDIN and STDOUT.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1287"
>Solution</A
></H3
><P
CLASS="para"
>Use the Expect module from CPAN:</P
><PRE
CLASS="programlisting"
>use Expect;

$command = Expect-&gt;spawn(&quot;program to run&quot;)
    or die &quot;Couldn't start program: $!\n&quot;;

# prevent the program's output from being shown on our STDOUT
$command-&gt;log_stdout(0);

# wait 10 seconds for &quot;Password:&quot; to appear
unless ($command-&gt;expect(10, &quot;Password&quot;)) {
    # timed out
}

# wait 20 seconds for something that matches /[lL]ogin: ?/
unless ($command-&gt;expect(20, -re =&gt; '[lL]ogin: ?')) {
    # timed out
}

# wait forever for &quot;invalid&quot; to appear
unless ($command-&gt;expect(undef, &quot;invalid&quot;)) {
    # error occurred; the program probably went away
}

# send &quot;Hello, world&quot; and a carriage return to the program
print $command &quot;Hello, world\r&quot;;

# if the program will terminate by itself, finish up with
$command-&gt;soft_close();
    
# if the program must be explicitly killed, finish up with
$command-&gt;hard_close();</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1355"
>Discussion</A
></H3
><P
CLASS="para"
>This module requires two other modules from CPAN: <A
CLASS="indexterm"
NAME="ch15-idx-1000005152-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005152-1"
></A
>IO::Pty and IO::Stty. It sets up a pseudo-terminal to interact with programs that insist on using talking to the terminal device driver. People often use this for talking to <EM
CLASS="emphasis"
>passwd</EM
> to change passwords. <EM
CLASS="emphasis"
>telnet</EM
> (Net::Telnet, described in <A
CLASS="xref"
HREF="ch18_07.htm"
TITLE="Simulating Telnet from a Program"
>Recipe 18.6</A
>, is probably more suitable and portable) and <EM
CLASS="emphasis"
>ftp</EM
> are also programs that expect a real tty.</P
><P
CLASS="para"
>Start the program you want to run with <CODE
CLASS="literal"
>Expect-&gt;spawn</CODE
>, passing a program name and arguments either in a single string or as a list. Expect starts the program and returns an object representing that program, or <CODE
CLASS="literal"
>undef</CODE
> if the program couldn't be started.</P
><P
CLASS="para"
>To wait for the program to emit a particular string, use the <CODE
CLASS="literal"
>expect</CODE
> method. Its first argument is the number of seconds to wait for the string, or <CODE
CLASS="literal"
>undef</CODE
> to wait forever. To wait for a string, give that string as the second argument to <CODE
CLASS="literal"
>expect</CODE
>. To wait for a regular expression, give <CODE
CLASS="literal"
>&quot;-re&quot;</CODE
> as the second argument and a string containing the pattern as the third argument. You can give further strings or patterns to wait for:</P
><PRE
CLASS="programlisting"
>$which = $command-&gt;expect(30, &quot;invalid&quot;, &quot;succes&quot;, &quot;error&quot;, &quot;boom&quot;);
if ($which) {
    # found one of those strings
}</PRE
><P
CLASS="para"
>In scalar context, <CODE
CLASS="literal"
>expect</CODE
> returns the number of arguments it matched. In the example above, <CODE
CLASS="literal"
>expect</CODE
> would return 1 if the program emitted <CODE
CLASS="literal"
>&quot;invalid&quot;</CODE
>, 2 if it emitted <CODE
CLASS="literal"
>&quot;succes&quot;</CODE
>, and so on. If none of the patterns or strings matches, <CODE
CLASS="literal"
>expect</CODE
> returns false.</P
><P
CLASS="para"
>In list context, <CODE
CLASS="literal"
>expect</CODE
> returns a five-element list. The first element is the number of the pattern or string that matched, the same as its return value in scalar context. The second argument is a string indicating why <CODE
CLASS="literal"
>expect</CODE
> returned. If there were no error, the second argument will be <CODE
CLASS="literal"
>undef</CODE
>. Possible errors are <CODE
CLASS="literal"
>&quot;1:TIMEOUT&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;2:EOF&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;3:spawn</CODE
> <CODE
CLASS="literal"
>id(...)died&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;4:...&quot;</CODE
>. (See the <I
CLASS="filename"
>Expect </I
>(3) manpage for the precise meaning of these messages.) The third argument of <CODE
CLASS="literal"
>expect</CODE
>'s return list is the string matched. The fourth argument is text before the match, and the fifth argument is text after the match.</P
><P
CLASS="para"
>Sending <A
CLASS="indexterm"
NAME="ch15-idx-1000005153-0"
></A
>input to the program you're controlling with Expect is as simple as using <CODE
CLASS="literal"
>print</CODE
>. The only catch is that terminals, devices, and sockets all vary in what they send and expect as the line terminator &nbsp;-  we've left the sanctuary of the C standard I/O library, so the behind-the-scenes conversion to <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> isn't taking place. We recommend trying <CODE
CLASS="literal"
>&quot;\r&quot;</CODE
> at first. If that doesn't work, try <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;\r\n&quot;</CODE
>.</P
><P
CLASS="para"
>When you're finished with the spawned program, you have three options. One, you can continue with your main program, and the spawned program will be forcibly killed when the main program ends. This will accumulate processes, though. Two, if you know the spawned program will terminate normally either when it has finished sending you output or because you told it to stop &nbsp;-  for example, <EM
CLASS="emphasis"
>telnet</EM
> after you exit the remote shell &nbsp;-  call the <CODE
CLASS="literal"
>soft_close</CODE
> method. If the spawned program could continue forever, like <EM
CLASS="emphasis"
>tail -f</EM
>, then use the <CODE
CLASS="literal"
>hard_close</CODE
> method; this kills the spawned program.<A
CLASS="indexterm"
NAME="ch15-idx-1000005148-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005148-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005148-2"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005148-3"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-1000005148-4"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch15-pgfId-1381"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the Expect, IO::Pty, and IO::Stty modules from CPAN; <CITE
CLASS="citetitle"
>Exploring Expect</CITE
>, by Don Libes, O'Reilly &amp; Associates (1995).</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch15_13.htm"
TITLE="15.12. Managing the Screen"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.12. Managing the Screen"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch15_15.htm"
TITLE="15.14. Creating Menus with Tk"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.14. Creating Menus with Tk"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>15.12. Managing the Screen</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>15.14. Creating Menus with Tk</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
