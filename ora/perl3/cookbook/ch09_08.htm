<HTML
><HEAD
>
<TITLE>Recipe 9.7. Processing All Files in a Directory Recursively (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:18Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"><LINK
REL="prev"
HREF="ch09_07.htm"
TITLE="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"><LINK
REL="next"
HREF="ch09_09.htm"
TITLE="9.8. Removing a Directory and Its Contents"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_09.htm"
TITLE="9.8. Removing a Directory and Its Contents"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.8. Removing a Directory and Its Contents"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-11236"
>9.7. Processing All Files in a Directory Recursively</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-734"
>Problem<A
CLASS="indexterm"
NAME="ch09-idx-1000004404-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004404-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004404-2"
></A
></A
></H3
><P
CLASS="para"
>You want to do something to each file and subdirectory in a particular directory.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-740"
>Solution</A
></H3
><P
CLASS="para"
>Use the standard <A
CLASS="indexterm"
NAME="ch09-idx-1000004418-0"
></A
>File::Find module.</P
><PRE
CLASS="programlisting"
>use File::Find;
sub process_file {
    # do whatever;
}
find(\&amp;process_file, @DIRLIST);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-756"
>Discussion</A
></H3
><P
CLASS="para"
>File::Find provides a convenient way to process a directory recursively. It does the directory scans and recursion for you. All you do is pass <CODE
CLASS="literal"
>find</CODE
> a code reference and a list of directories. For each file in those directories, recursively, <CODE
CLASS="literal"
>find</CODE
> calls your function.</P
><P
CLASS="para"
>Before calling your function, <CODE
CLASS="literal"
>find</CODE
> changes to the directory being visited, whose path relative to the starting directory is stored in the <CODE
CLASS="literal"
>$File::Find::dir</CODE
> variable. <CODE
CLASS="literal"
>$_</CODE
> is set to the basename of the file being visited, and the full path of that file can be found in <CODE
CLASS="literal"
>$File::Find::name</CODE
>. Your code can set <CODE
CLASS="literal"
>$File::Find::prune</CODE
> to true to tell <CODE
CLASS="literal"
>find</CODE
> not to descend into the directory just seen.</P
><P
CLASS="para"
>This simple example demonstrates File::Find. We give <CODE
CLASS="literal"
>find</CODE
> an anonymous subroutine that prints the name of each file visited and adds a <CODE
CLASS="literal"
>/</CODE
> to the names of directories:</P
><PRE
CLASS="programlisting"
>@ARGV = qw(.) unless @ARGV;
use File::Find;
find sub { print $File::Find::name, -d &amp;&amp; '/', &quot;\n&quot; }, @ARGV;</PRE
><P
CLASS="para"
>This prints a <CODE
CLASS="literal"
>/</CODE
> after directory names using the <B
CLASS="emphasis.bold"
>-d</B
> file test operator, which returns the empty string <CODE
CLASS="literal"
>''</CODE
> if it fails.</P
><P
CLASS="para"
>The following program prints the sum of everything in a directory. It gives <CODE
CLASS="literal"
>find</CODE
> an anonymous subroutine to keep a running sum of the sizes of each file it visits. That includes all inode types, including the sizes of directories and symbolic links, not just regular files. Once the <CODE
CLASS="literal"
>find</CODE
> function returns, the accumulated sum is displayed.</P
><PRE
CLASS="programlisting"
>use File::Find;
@ARGV = ('.') unless @ARGV;
my $sum = 0;
find sub { $sum += -s }, @ARGV;
print &quot;@ARGV contains $sum bytes\n&quot;;</PRE
><P
CLASS="para"
>This code finds the largest single file within a set of directories:</P
><PRE
CLASS="programlisting"
>use File::Find;
@ARGV = ('.') unless @ARGV;
my ($saved_size, $saved_name) = (-1, '');
sub biggest {
    return unless -f &amp;&amp; -s _ &gt; $saved_size;
    $saved_size = -s _;
    $saved_name = $File::Find::name;
}
find(\&amp;biggest, @ARGV);
print &quot;Biggest file $saved_name in @ARGV is $saved_size bytes long.\n&quot;;</PRE
><P
CLASS="para"
>We use <CODE
CLASS="literal"
>$saved_size</CODE
> and <CODE
CLASS="literal"
>$saved_name</CODE
> to keep track of the name and the size of the largest file visited. If we find a file bigger than the largest seen so far, we replace the saved name and size with the current ones. When the <CODE
CLASS="literal"
>find</CODE
> is done running, the largest file and its size are printed out, rather verbosely. A more general tool would probably just print the filename, its size, or both. This time we used a named function rather than an anonymous one because the function was getting big.</P
><P
CLASS="para"
>It's simple to change this to find the most recently changed file:</P
><PRE
CLASS="programlisting"
>use File::Find;
@ARGV = ('.') unless @ARGV;
my ($age, $name);
sub youngest {
    return if defined $age &amp;&amp; $age &gt; (stat($_))[9];
    $age = (stat(_))[9];
    $name = $File::Find::name;
}
find(\&amp;youngest, @ARGV);
print &quot;$name &quot; . scalar(localtime($age)) . &quot;\n&quot;;</PRE
><P
CLASS="para"
>The File::Find module doesn't export its <CODE
CLASS="literal"
>$name</CODE
> variable, so always refer to it by its fully qualified name. The example in <A
CLASS="xref"
HREF="ch09_08.htm"
TITLE="fdirs"
>Example 9.2</A
> is more a demonstration of namespace munging than of recursive directory traversal, although it does find all the directories. It makes <CODE
CLASS="literal"
>$name</CODE
> in our current package an alias for the one in File::Find, which is essentially how Exporter works. Then it declares its own version of <CODE
CLASS="literal"
>find</CODE
> with a prototype that lets it be called like <CODE
CLASS="literal"
>grep</CODE
> or <CODE
CLASS="literal"
>map</CODE
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch09-34586"
>Example 9.2: fdirs</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -lw
# <A
CLASS="indexterm"
NAME="ch09-idx-1000004489-0"
></A
>fdirs - find all directories
@ARGV = qw(.) unless @ARGV;
use File::Find ();
sub find(&amp;@) { &amp;File::Find::find }
*name = *File::Find::name;
find { print $name if -d } @ARGV;</PRE
></DIV
><P
CLASS="para"
>Our <CODE
CLASS="literal"
>find</CODE
> only calls the <CODE
CLASS="literal"
>find</CODE
> in File::Find, which we were careful not to import by specifying an <CODE
CLASS="literal"
>()</CODE
> empty list in the <CODE
CLASS="literal"
>use</CODE
> statement. Rather than write this:</P
><PRE
CLASS="programlisting"
>find sub { print $File::Find::name if -d }, @ARGV;</PRE
><P
CLASS="para"
>we can write the more pleasant:</P
><PRE
CLASS="programlisting"
>find { print $name if -d } @ARGV;<A
CLASS="indexterm"
NAME="ch09-idx-1000004406-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004406-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004406-2"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004406-3"
></A
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-856"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard File::Find and Exporter modules (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>); your system's <I
CLASS="filename"
>find </I
>(1) manpage; <A
CLASS="xref"
HREF="ch09_07.htm"
TITLE="Globbing, or Getting a List of Filenames Matching a Pattern"
>Recipe 9.6</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.6. Globbing, or Getting a List of Filenames Matching a Pattern"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_09.htm"
TITLE="9.8. Removing a Directory and Its Contents"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.8. Removing a Directory and Its Contents"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>9.6. Globbing, or Getting a List of Filenames Matching a Pattern</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>9.8. Removing a Directory and Its Contents</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
