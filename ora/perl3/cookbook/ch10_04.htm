<HTML
><HEAD
>
<TITLE>Recipe 10.3. Creating Persistent Private Variables (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:37Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"><LINK
REL="prev"
HREF="ch10_03.htm"
TITLE="10.2. Making Variables Private to a Function"><LINK
REL="next"
HREF="ch10_05.htm"
TITLE="10.4. Determining Current Function Name"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_03.htm"
TITLE="10.2. Making Variables Private to a Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2. Making Variables Private to a Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Subroutines"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_05.htm"
TITLE="10.4. Determining Current Function Name"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4. Determining Current Function Name"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-20398"
>10.3. Creating Persistent Private Variables</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-246"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-1000004664-0"
></A
>You want a variable to retain its value between calls to a subroutine but not be visible outside that routine. For instance, you'd like your function to keep track of how many times it was called.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-252"
>Solution</A
></H3
><P
CLASS="para"
>Wrap the function in another block, and declare <CODE
CLASS="literal"
>my</CODE
> variables in that block's scope rather than the function's:</P
><PRE
CLASS="programlisting"
>{
    my $variable;
    sub mysub {
        # ... accessing $variable
    }
}</PRE
><P
CLASS="para"
>If the variables require initialization, make that block a BEGIN so the variable is guaranteed to be set before the main program starts running:</P
><PRE
CLASS="programlisting"
>BEGIN {
    my $variable = 1;                       # initial value
    sub othersub {                          # ... accessing $variable
    }
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-284"
>Discussion</A
></H3
><P
CLASS="para"
>Unlike local variables in C or C++, Perl's lexical variables don't necessarily get recycled just because their scope has exited. If something more permanent is still aware of the lexical, it will stick around. In this case, <CODE
CLASS="literal"
>mysub</CODE
> uses $<CODE
CLASS="literal"
>variable</CODE
>, so Perl doesn't reclaim the variable when the block around the definition of <CODE
CLASS="literal"
>mysub</CODE
> ends.</P
><P
CLASS="para"
>Here's how to write a counter:</P
><PRE
CLASS="programlisting"
>{
    my $counter;
    sub next_counter { return ++$counter }
}</PRE
><P
CLASS="para"
>Each time <CODE
CLASS="literal"
>next_counter</CODE
> is called, it increments and returns the <CODE
CLASS="literal"
>$counter</CODE
> variable. The first time <CODE
CLASS="literal"
>next_counter</CODE
> is called, <CODE
CLASS="literal"
>$counter</CODE
> is undefined, so it behaves as though it were 0 for the <CODE
CLASS="literal"
>++</CODE
>. The variable is not part of <CODE
CLASS="literal"
>next_counter</CODE
>'s scope, but rather part of the block surrounding it. No code from outside can change <CODE
CLASS="literal"
>$counter</CODE
> except by calling <CODE
CLASS="literal"
>next_counter</CODE
>.</P
><P
CLASS="para"
>Generally, you should use a BEGIN for the extra scope. Otherwise, you could call the function before its variable were initialized.</P
><PRE
CLASS="programlisting"
>BEGIN {
    my $counter = 42;
    sub next_counter { return ++$counter }
    sub prev_counter { return --$counter }
}</PRE
><P
CLASS="para"
>This technique creates the Perl equivalent of C's static variables. Actually, it's a little better. Rather than being limited to just one function, both functions share their private variable.<A
CLASS="indexterm"
NAME="ch10-idx-1000004660-0"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004660-1"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004660-2"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004660-3"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004660-4"
></A
><A
CLASS="indexterm"
NAME="ch10-idx-1000004660-5"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch10-pgfId-316"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../prog/ch04_03.htm"
>"Closures"</A
> in <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
>and on <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>"Package Constructors and Destructors: BEGIN and END"</A
> in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the section on "Private Variables via my(  )" in <I
CLASS="filename"
>perlsub </I
>(1); the section on "Package Constructors and Destructors" in <I
CLASS="filename"
>perlmod </I
>(1); <A
CLASS="xref"
HREF="ch11_05.htm"
TITLE="Taking References to Functions"
>Recipe 11.4</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_03.htm"
TITLE="10.2. Making Variables Private to a Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2. Making Variables Private to a Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch10_05.htm"
TITLE="10.4. Determining Current Function Name"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4. Determining Current Function Name"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>10.2. Making Variables Private to a Function</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>10.4. Determining Current Function Name</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
