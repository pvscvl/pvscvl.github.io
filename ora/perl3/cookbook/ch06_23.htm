<HTML
><HEAD
>
<TITLE>Recipe 6.22. Program: tcgrep (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:09Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_22.htm"
TITLE="6.21. Program: urlify"><LINK
REL="next"
HREF="ch06_24.htm"
TITLE="6.23. Regular Expression Grabbag"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_22.htm"
TITLE="6.21. Program: urlify"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.21. Program: urlify"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_24.htm"
TITLE="6.23. Regular Expression Grabbag"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.23. Regular Expression Grabbag"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-65583"
>6.22. Program: tcgrep</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-1000007735-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007735-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007735-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007735-3"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007735-4"
></A
>This program is a Perl rewrite of the Unix <EM
CLASS="emphasis"
>grep</EM
> program. Although it runs slower than C versions (especially the GNU <EM
CLASS="emphasis"
>grep</EM
>s), it offers many more features.</P
><P
CLASS="para"
>The first, and perhaps most important, feature is that it runs anywhere Perl does. Other enhancements are that it can ignore anything that's not a plain text file, automatically expand compressed or <EM
CLASS="emphasis"
>gzip </EM
>ped files, recurse down directories, search complete paragraphs or user-defined records, look in younger files before older ones, and add underlining or highlighting of matches. It also supports both the <B
CLASS="emphasis.bold"
>-c</B
> option to indicate a count of matching records as well as <B
CLASS="emphasis.bold"
>-C</B
> for a count of matching patterns when there could be more than one per record.</P
><P
CLASS="para"
>This program uses <EM
CLASS="emphasis"
>gzcat</EM
> or <EM
CLASS="emphasis"
>zcat</EM
> to decompress compressed files, so this feature is unavailable on systems without these programs and systems without the ability to run external programs (such as the Macintosh).</P
><P
CLASS="para"
>Run the program with no arguments for a usage message (see the <CODE
CLASS="literal"
>usage</CODE
> subroutine in the following code). This command line recursively and case-insensitively greps every file in <EM
CLASS="emphasis"
>~/mail</EM
> for mail messages from someone called "kate", reporting the filenames that contained matches.</P
><PRE
CLASS="programlisting"
>% tcgrep -ril '^From: .*kate' ~/mail</PRE
><P
CLASS="para"
>The program is shown in <A
CLASS="xref"
HREF="ch06_23.htm"
TITLE="tcgrep"
>Example 6.14</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch06-11977"
>Example 6.14: tcgrep</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# tcgrep: tom christiansen's rewrite of grep
# v1.0: Thu Sep 30 16:24:43 MDT 1993
# v1.1: Fri Oct  1 08:33:43 MDT 1993
# v1.2: Fri Jul 26 13:37:02 CDT 1996
# v1.3: Sat Aug 30 14:21:47 CDT 1997
# v1.4: Mon May 18 16:17:48 EDT 1998

use strict;
                                  # globals
use vars qw($Me $Errors $Grand_Total $Mult %Compress $Matches);

my ($matcher, $opt);              # matcher - anon. sub to check for matches
                                  # opt - ref to hash w/ command line options

init();                           # initialize globals

($opt, $matcher) = parse_args();  # get command line options and patterns

matchfile($opt, $matcher, @ARGV); # process files

exit(2) if $Errors;
exit(0) if $Grand_Total;
exit(1);

###################################

sub init {
    ($Me = $0) =~ s!.*/!!;        # get basename of program, &quot;tcgrep&quot;
    $Errors = $Grand_Total = 0;   # initialize global counters
    $Mult = &quot;&quot;;                   # flag for multiple files in @ARGV
    $| = 1;                       # autoflush output

    %Compress = (                 # file extensions and program names
        z  =&gt; 'gzcat',            # for uncompressing
        gz =&gt; 'gzcat',
        Z  =&gt; 'zcat',
    );
}

###################################

sub usage {
        die &lt;&lt;EOF
usage: $Me [flags] [files]

Standard grep options:
        i   case insensitive
        n   number lines
        c   give count of lines matching
        C   ditto, but &gt;1 match per line possible
        w   word boundaries only
        s   silent mode
        x   exact matches only
        v   invert search sense (lines that DON'T match)
        h   hide filenames
        e   expression (for exprs beginning with -)
        f   file with expressions
        l   list filenames matching

Specials:
        1   1 match per file
        H   highlight matches
        u   underline matches
        r   recursive on directories or dot if none
        t   process directories in 'ls -t' order
        p   paragraph mode (default: line mode)
        P   ditto, but specify separator, e.g. -P '%%\\n'
        a   all files, not just plain text files
        q   quiet about failed file and dir opens
        T   trace files as opened

May use a TCGREP environment variable to set default options.
EOF
}

###################################

sub parse_args {
    use Getopt::Std;

    my ($optstring, $zeros, $nulls, %opt, $pattern, @patterns, $match_code);
    my ($SO, $SE);

    if ($_ = $ENV{TCGREP}) {      # get envariable TCGREP
        s/^([^\-])/-$1/;          # add leading - if missing
        unshift(@ARGV, $_);       # add TCGREP opt string to @ARGV
    }

    $optstring = &quot;incCwsxvhe:f:l1HurtpP:aqT&quot;;

    $zeros = 'inCwxvhelut';       # options to init to 0 (prevent warnings)
    $nulls = 'pP';                # options to init to &quot;&quot; (prevent warnings)

    @opt{ split //, $zeros } = ( 0 )  x length($zeros);
    @opt{ split //, $nulls } = ( '' ) x length($nulls);

    getopts($optstring, \%opt)              or usage();

    if ($opt{f}) {                # -f patfile
        open(PATFILE, $opt{f})          or die qq($Me: Can't open '$opt{f}': $!);

                                  # make sure each pattern in file is valid
        while ( defined($pattern = &lt;PATFILE&gt;) ) {
            chomp $pattern;
            eval { 'foo' =~ /$pattern/, 1 } or
                die &quot;$Me: $opt{f}:$.: bad pattern: $@&quot;;
            push @patterns, $pattern;
        }
        close PATFILE;
    }
    else {                        # make sure pattern is valid
        $pattern = $opt{e} || shift(@ARGV) || usage();
        eval { 'foo' =~ /$pattern/, 1 } or
            die &quot;$Me: bad pattern: $@&quot;;
        @patterns = ($pattern);
    }

    if ($opt{H} || $opt{u}) {     # highlight or underline
        my $term = $ENV{TERM} || 'vt100';
        my $terminal;

        eval {                    # try to look up escapes for stand-out
            require POSIX;        # or underline via Term::Cap
            use Term::Cap;

            my $termios = POSIX::Termios-&gt;new();
            $termios-&gt;getattr;
            my $ospeed = $termios-&gt;getospeed;

            $terminal = Tgetent Term::Cap { TERM=&gt;undef, OSPEED=&gt;$ospeed }
        };

        unless ($@) {             # if successful, get escapes for either
            local $^W = 0;        # stand-out (-H) or underlined (-u)
            ($SO, $SE) = $opt{H}
                ? ($terminal-&gt;Tputs('so'), $terminal-&gt;Tputs('se'))
                : ($terminal-&gt;Tputs('us'), $terminal-&gt;Tputs('ue'));
        }
        else {                    # if use of Term::Cap fails,
            ($SO, $SE) = $opt{H}  # use tput command to get escapes
                ? (`tput -T $term smso`, `tput -T $term rmso`)
                : (`tput -T $term smul`, `tput -T $term rmul`)
        }
    }

    if ($opt{i}) {
        @patterns = map {&quot;(?i)$_&quot;} @patterns;
    }

    if ($opt{p} || $opt{P}) {
        @patterns = map {&quot;(?m)$_&quot;} @patterns;
    }

    $opt{p}   &amp;&amp; ($/ = '');
    $opt{P}   &amp;&amp; ($/ = eval(qq(&quot;$opt{P}&quot;)));     # for -P '%%\n'
    $opt{w}   &amp;&amp; (@patterns = map {'\b' . $_ . '\b'} @patterns);
    $opt{'x'} &amp;&amp; (@patterns = map {&quot;^$_\$&quot;} @patterns);
    if (@ARGV) {
        $Mult = 1 if ($opt{r} || (@ARGV &gt; 1) || -d $ARGV[0]) &amp;&amp; !$opt{h};
    }
    $opt{1}   += $opt{l};                   # that's a one and an ell
    $opt{H}   += $opt{u};
    $opt{c}   += $opt{C};
    $opt{'s'} += $opt{c};
    $opt{1}   += $opt{'s'} &amp;&amp; !$opt{c};     # that's a one

    @ARGV = ($opt{r} ? '.' : '-') unless @ARGV;
    $opt{r} = 1 if !$opt{r} &amp;&amp; grep(-d, @ARGV) == @ARGV;

    $match_code  = '';
    $match_code .= 'study;' if @patterns &gt; 5; # might speed things up a bit

    foreach (@patterns) { s(/)(\\/)g }

    if ($opt{H}) {
        foreach $pattern (@patterns) {
            $match_code .= &quot;\$Matches += s/($pattern)/${SO}\$1${SE}/g;&quot;;
        }
    }
    elsif ($opt{v}) {
        foreach $pattern (@patterns) {
            $match_code .= &quot;\$Matches += !/$pattern/;&quot;;
        }
    }
    elsif ($opt{C}) {
        foreach $pattern (@patterns) {
            $match_code .= &quot;\$Matches++ while /$pattern/g;&quot;;
        }
    }
    else {
        foreach $pattern (@patterns) {
            $match_code .= &quot;\$Matches++ if /$pattern/;&quot;;
        }
    }

    $matcher = eval &quot;sub { $match_code }&quot;;
    die if $@;

    return (\%opt, $matcher);
}

###################################

sub matchfile {
    $opt = shift;                 # reference to option hash
    $matcher = shift;             # reference to matching sub

    my ($file, @list, $total, $name);
    local($_);
    $total = 0;

FILE: while (defined ($file = shift(@_))) {

        if (-d $file) {
            if (-l $file &amp;&amp; @ARGV != 1) {
                warn &quot;$Me: \&quot;$file\&quot; is a symlink to a directory\n&quot;
                    if $opt-&gt;{T};
                next FILE;

            }
            if (!$opt-&gt;{r}) {
                warn &quot;$Me: \&quot;$file\&quot; is a directory, but no -r given\n&quot;
                    if $opt-&gt;{T};
                next FILE;
            }
            unless (opendir(DIR, $file)) {
                unless ($opt-&gt;{'q'}) {
                    warn &quot;$Me: can't opendir $file: $!\n&quot;;
                    $Errors++;
                }
                next FILE;
            }
            @list = ();
            for (readdir(DIR)) {
                push(@list, &quot;$file/$_&quot;) unless /^\.{1,2}$/;
            }
            closedir(DIR);
            if ($opt-&gt;{t}) {
                my (@dates);
                for (@list) { push(@dates, -M) }
                @list = @list[sort { $dates[$a] &lt;=&gt; $dates[$b] } 0..$#dates];
            }
            else {
                @list = sort @list;
            }
            matchfile($opt, $matcher, @list);    # process files
            next FILE;
        }

        if ($file eq '-') {
            warn &quot;$Me: reading from stdin\n&quot; if -t STDIN &amp;&amp; !$opt-&gt;{'q'};
            $name = '&lt;STDIN&gt;';
        }
        else {
            $name = $file;
            unless (-e $file) {
                warn qq($Me: file &quot;$file&quot; does not exist\n) unless $opt-&gt;{'q'};
                $Errors++;
                next FILE;
            }
            unless (-f $file || $opt-&gt;{a}) {
                warn qq($Me: skipping non-plain file &quot;$file&quot;\n) if $opt-&gt;{T};
                next FILE;
            }

            my ($ext) = $file =~ /\.([^.]+)$/;
            if (defined $ext &amp;&amp; exists $Compress{$ext}) {
                $file = &quot;$Compress{$ext} &lt;$file |&quot;;
            }
            elsif (! (-T $file  || $opt-&gt;{a})) {
                warn qq($Me: skipping binary file &quot;$file&quot;\n) if $opt-&gt;{T};
                next FILE;
            }
        }

        warn &quot;$Me: checking $file\n&quot; if $opt-&gt;{T};

        unless (open(FILE, $file)) {
            unless ($opt-&gt;{'q'}) {
                warn &quot;$Me: $file: $!\n&quot;;
                $Errors++;
            }
            next FILE;
        }

        $total = 0;

        $Matches = 0;

LINE:  while (&lt;FILE&gt;) {
            $Matches = 0;
    
            ##############
            &amp;{$matcher}();        # do it! (check for matches)
            ##############

            next LINE unless $Matches;

            $total += $Matches;

            if ($opt-&gt;{p} || $opt-&gt;{P}) {
                s/\n{2,}$/\n/ if $opt-&gt;{p};
                chomp         if $opt-&gt;{P};
            }

            print(&quot;$name\n&quot;), next FILE if $opt-&gt;{l};

            $opt-&gt;{'s'} || print $Mult &amp;&amp; &quot;$name:&quot;,
                $opt-&gt;{n} ? &quot;$.:&quot; : &quot;&quot;,
                $_,
                ($opt-&gt;{p} || $opt-&gt;{P}) &amp;&amp; ('-' x 20) . &quot;\n&quot;;

            next FILE if $opt-&gt;{1};                 # that's a one
        }
    }
    continue {
        print $Mult &amp;&amp; &quot;$name:&quot;, $total, &quot;\n&quot; if $opt-&gt;{c};
    }
    $Grand_Total += $total;
}<A
CLASS="indexterm"
NAME="ch06-idx-1000007737-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007737-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007737-2"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_22.htm"
TITLE="6.21. Program: urlify"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.21. Program: urlify"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_24.htm"
TITLE="6.23. Regular Expression Grabbag"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.23. Regular Expression Grabbag"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>6.21. Program: urlify</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>6.23. Regular Expression Grabbag</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
