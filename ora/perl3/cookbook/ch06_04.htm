<HTML
><HEAD
>
<TITLE>Recipe 6.3. Matching Words (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:40Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_03.htm"
TITLE="6.2. Matching Letters"><LINK
REL="next"
HREF="ch06_05.htm"
TITLE="6.4.  Commenting Regular Expressions"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_03.htm"
TITLE="6.2. Matching Letters"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.2. Matching Letters"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.4.  Commenting Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.4.  Commenting Regular Expressions"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-20126"
>6.3. Matching Words</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-403"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007529-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007529-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007529-2"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007529-3"
></A
></A
></H3
><P
CLASS="para"
>You want to pick out words from a string.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-409"
>Solution</A
></H3
><P
CLASS="para"
>Think long and hard about what you want a word to be and what separates one word from the next, then write a regular expression that embodies your decisions. For example:</P
><PRE
CLASS="programlisting"
>/\S+/               # as many non-whitespace bytes as possible
/[A-Za-z'-]+/       # as many letters, apostrophes, and hyphens</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-419"
>Discussion</A
></H3
><P
CLASS="para"
>Because words vary between applications, languages, and input streams, Perl does not have built-in definitions of words. You must make them from character classes and quantifiers yourself, as we did previously. The second pattern is an attempt to recognize <CODE
CLASS="literal"
>&quot;shepherd's&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;sheep-shearing&quot;</CODE
> each as single words.</P
><P
CLASS="para"
>Most approaches will have limitations because of the vagaries of written human languages. For instance, although the second pattern successfully identifies <CODE
CLASS="literal"
>&quot;spank'd&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;counter-clockwise&quot;</CODE
> as words, it will also pull the <CODE
CLASS="literal"
>&quot;rd&quot;</CODE
> out of <CODE
CLASS="literal"
>&quot;23rd</CODE
> <CODE
CLASS="literal"
>Psalm&quot;</CODE
>. If you want to be more precise when you pull words out from a string, you can specify the stuff surrounding the word. Normally, this should be a word-boundary, not whitespace:</P
><PRE
CLASS="programlisting"
>/\b([A-Za-z]+)\b/            # usually best
/\s([A-Za-z]+)\s/            # fails at ends or w/ punctuation</PRE
><P
CLASS="para"
>Although Perl provides <CODE
CLASS="literal"
>\w</CODE
>, which matches a character that is part of a valid Perl identifier, Perl identifiers are rarely what you think of as words, since we really mean a string of alphanumerics and underscores, but not colons or quotes. Because it's defined in terms of <CODE
CLASS="literal"
>\w</CODE
>, <CODE
CLASS="literal"
>\b</CODE
> may surprise you if you expect to match an English word boundary (or, even worse, a Swahili word boundary).</P
><P
CLASS="para"
><CODE
CLASS="literal"
>\b</CODE
> and <CODE
CLASS="literal"
>\B</CODE
> can still be useful. For example, <CODE
CLASS="literal"
>/\Bis\B/</CODE
> matches the string <CODE
CLASS="literal"
>&quot;is&quot;</CODE
> only within a word, not at the edges. And while <CODE
CLASS="literal"
>&quot;thistle&quot;</CODE
> would be found,  <CODE
CLASS="literal"
>&quot;vis-à-vis&quot;</CODE
> wouldn't.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000010943"
>See Also</A
></H3
><P
CLASS="para"
>The treatment of <CODE
CLASS="literal"
>\b</CODE
>, <CODE
CLASS="literal"
>\w</CODE
>, and <CODE
CLASS="literal"
>\s</CODE
> in <I
CLASS="filename"
>perlre</I
> (1) and in the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Regular expression bestiary"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the words-related patterns in <A
CLASS="xref"
HREF="ch06_24.htm"
TITLE="Regular Expression Grabbag"
>Recipe 6.23</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_03.htm"
TITLE="6.2. Matching Letters"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.2. Matching Letters"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.4.  Commenting Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.4.  Commenting Regular Expressions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>6.2. Matching Letters</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>6.4.  Commenting Regular Expressions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
