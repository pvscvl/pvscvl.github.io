<HTML
><HEAD
>
<TITLE>Recipe 1.4. Converting Between ASCII Characters and Values (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:28:49Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_04.htm"
TITLE="1.3. Exchanging Values Without Using Temporary Variables"><LINK
REL="next"
HREF="ch01_06.htm"
TITLE="1.5. Processing a String One Character at a Time"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.3. Exchanging Values Without Using Temporary Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.3. Exchanging Values Without Using Temporary Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_06.htm"
TITLE="1.5. Processing a String One Character at a Time"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.5. Processing a String One Character at a Time"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-42021"
>1.4. Converting Between ASCII Characters and Values</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-449"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010195-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010195-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010195-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010195-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010195-4"
></A
></A
></H3
><P
CLASS="para"
>You want to print out the number represented by a given ASCII character, or you want to print out an ASCII character given a number.<A
CLASS="indexterm"
NAME="ch01-idx-1000010205-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010205-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-455"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>ord</CODE
> to convert a character to a number, or use <CODE
CLASS="literal"
>chr</CODE
> to convert a number to a character:</P
><PRE
CLASS="programlisting"
>$num  = ord($char);
$char = chr($num);</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>%c</CODE
> format used in <CODE
CLASS="literal"
>printf</CODE
> and <CODE
CLASS="literal"
>sprintf</CODE
> also converts a number to a character:</P
><PRE
CLASS="programlisting"
>$char = sprintf(&quot;%c&quot;, $num);                # slower than chr($num)
printf(&quot;Number %d is character %c\n&quot;, $num, $num);
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Number 101 is character e</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>A <CODE
CLASS="literal"
>C*</CODE
> template used with <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> can quickly convert many characters.</P
><PRE
CLASS="programlisting"
>@ASCII = unpack(&quot;C*&quot;, $string);
$STRING = pack(&quot;C*&quot;, @ascii);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-479"
>Discussion</A
></H3
><P
CLASS="para"
>Unlike low-level, typeless languages like assembler, Perl doesn't treat characters and numbers interchangeably; it treats <EM
CLASS="emphasis"
>strings</EM
> and numbers interchangeably. That means you can't just assign characters and numbers back and forth. Perl provides Pascal's <CODE
CLASS="literal"
>chr</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010206-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010206-1"
></A
> and <CODE
CLASS="literal"
>ord</CODE
> to convert between a character and its corresponding ordinal value:</P
><PRE
CLASS="programlisting"
>$ascii_value = ord(&quot;e&quot;);    # now 101
$character   = chr(101);    # now &quot;e&quot;</PRE
><P
CLASS="para"
>If you already have a character, it's really represented as a string of length one, so just print it out directly using <CODE
CLASS="literal"
>print</CODE
> or the <CODE
CLASS="literal"
>%s</CODE
> format in <CODE
CLASS="literal"
>printf</CODE
> and <CODE
CLASS="literal"
>sprintf</CODE
>. The <CODE
CLASS="literal"
>%c</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010207-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010207-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010207-2"
></A
> format forces <CODE
CLASS="literal"
>printf</CODE
> or <CODE
CLASS="literal"
>sprintf</CODE
> to convert a number into a character; it's not used for printing a character that's already in character format (that is, a string).</P
><PRE
CLASS="programlisting"
>printf(&quot;Number %d is character %c\n&quot;, 101, 101);</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>pack</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010208-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010208-1"
></A
>, <CODE
CLASS="literal"
>unpack</CODE
>, <CODE
CLASS="literal"
>chr</CODE
>, and <CODE
CLASS="literal"
>ord</CODE
> functions are all faster than <CODE
CLASS="literal"
>sprintf</CODE
>. Here are <CODE
CLASS="literal"
>pack</CODE
> and <CODE
CLASS="literal"
>unpack</CODE
> in action:</P
><PRE
CLASS="programlisting"
>@ascii_character_numbers = unpack(&quot;C*&quot;, &quot;sample&quot;);
print &quot;@ascii_character_numbers\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>115 97 109 112 108 101</I
></CODE
></B
></CODE
>

$word = pack(&quot;C*&quot;, @ascii_character_numbers);
$word = pack(&quot;C*&quot;, 115, 97, 109, 112, 108, 101);   # same
print &quot;$word\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>sample</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Here's how to convert from HAL to IBM:</P
><PRE
CLASS="programlisting"
>$hal = &quot;HAL&quot;;
@ascii = unpack(&quot;C*&quot;, $hal);
foreach $val (@ascii) {
    $val++;                 # add one to each ASCII value
}
$ibm = pack(&quot;C*&quot;, @ascii);
print &quot;$ibm\n&quot;;             # prints &quot;IBM&quot;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>ord</CODE
> function can return numbers from 0 to 255. These correspond to C's <CODE
CLASS="literal"
>unsigned</CODE
> <CODE
CLASS="literal"
>char</CODE
> data type.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-529"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>chr</CODE
>, <CODE
CLASS="literal"
>ord</CODE
>, <CODE
CLASS="literal"
>printf</CODE
>, <CODE
CLASS="literal"
>sprintf</CODE
>, <CODE
CLASS="literal"
>pack</CODE
>, and <CODE
CLASS="literal"
>unpack</CODE
> functions in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010197-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010197-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010197-2"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010197-3"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010197-4"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_04.htm"
TITLE="1.3. Exchanging Values Without Using Temporary Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.3. Exchanging Values Without Using Temporary Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_06.htm"
TITLE="1.5. Processing a String One Character at a Time"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.5. Processing a String One Character at a Time"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>1.3. Exchanging Values Without Using Temporary Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>1.5. Processing a String One Character at a Time</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
