<HTML
><HEAD
>
<TITLE>Recipe 14.7. Treating a Text File as a Database Array (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:52Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Database Access"><LINK
REL="prev"
HREF="ch14_07.htm"
TITLE="14.6. Sorting Large DBM Files"><LINK
REL="next"
HREF="ch14_09.htm"
TITLE="14.8. Storing Complex Data in a DBM File"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.6. Sorting Large DBM Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.6. Sorting Large DBM Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Database Access"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_09.htm"
TITLE="14.8. Storing Complex Data in a DBM File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.8. Storing Complex Data in a DBM File"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-10143"
>14.7. Treating a Text File as a Database Array</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-728"
>Problem<A
CLASS="indexterm"
NAME="ch14-idx-1000004980-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004980-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004980-2"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004980-3"
></A
></A
></H3
><P
CLASS="para"
>You'd like to treat a text file as an array of lines with read-write privileges. You might want to do that so you could easily update the Nth line.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-734"
>Solution</A
></H3
><P
CLASS="para"
>The DB_File module lets you <CODE
CLASS="literal"
>tie</CODE
> a text file to an array.</P
><PRE
CLASS="programlisting"
>use DB_File;

tie(@array, &quot;DB_File&quot;, &quot;/tmp/textfile&quot;, O_RDWR|O_CREAT, 0666, $DB_RECNO)
    or die &quot;Cannot open file 'text': $!\en&quot; ;

$array[4] = &quot;a new line&quot;;
untie @array;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-754"
>Description</A
></H3
><P
CLASS="para"
>Updating a textfile in place is surprisingly tricky, as noted in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="File Access"
>Chapter 7, <CITE
CLASS="chapter"
>File Access</CITE
></A
>. The RECNO binding provides a nice way to address the file as though it were a simple array of lines &nbsp;-  the way everyone always seems to think they can.</P
><P
CLASS="para"
>Working with files this way can be odd. For one thing, the zeroth element of the tied array is the first line of the file. More importantly, tied arrays aren't as fully featured as tied hashes are. This will be fixed in a future version of Perl &nbsp;-  patches are already available, in fact.</P
><P
CLASS="para"
>As you can see from the example above, the tied array interface is limited. To make the interface more useful, methods supplied with DB_File simulate the standard array operations that are not currently implemented in Perl's tied array interface. Save the return value from <CODE
CLASS="literal"
>tie</CODE
> function or retrieve it later from the tied hash using the <CODE
CLASS="literal"
>tied</CODE
> function. Use this object to access the following methods:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>$X-&gt;push(LIST)</CODE
> </DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Pushes elements of <CODE
CLASS="literal"
>LIST</CODE
> to the end of the array.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$value</CODE
> <CODE
CLASS="literal"
>= $X-&gt;pop </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Removes and returns the last element of the array.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$X-&gt;shift </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Removes and returns the first element of the array.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$X-&gt;unshift(LIST) </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Pushes elements of <CODE
CLASS="literal"
>LIST</CODE
> to the start of the array.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$X-&gt;length </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns the number of elements in the array.</P
></DD
></DL
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch14_08.htm"
TITLE="recno_demo"
>Example 14.5</A
> is a more complete example using methods described above. It also accesses the direct API interface as described in the DB_File module documentation. (Much of this recipe is derived from the DB_File module documentation, courtesy of Paul Marquess, author of the Perl port of Berkeley DB. This material is used with his permission.)</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-19290"
>Example 14.5: recno_demo</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch14-idx-1000004981-0"
></A
>recno_demo - show how to use the raw API on recno bindings
use strict;
use vars qw(@lines $dbobj $file $i);
use DB_File;

$file = &quot;/tmp/textfile&quot;;
unlink $file;               # just in case

$dbobj = tie(@lines, &quot;DB_File&quot;, $file, O_RDWR|O_CREAT, 0666, $DB_RECNO)
    or die &quot;Cannot open file $file: $!\n&quot;;

# first create a text file to play with
$lines[0] = &quot;zero&quot;;
$lines[1] = &quot;one&quot;;
$lines[2] = &quot;two&quot;;
$lines[3] = &quot;three&quot;;
$lines[4] = &quot;four&quot;;

# Print the records in order.
#
# The length method is needed here because evaluating a tied
# array in a scalar context does not return the number of
# elements in the array.

print &quot;\nORIGINAL\n&quot;;
foreach $i (0 .. $dbobj-&gt;length - 1) {
    print &quot;$i: $lines[$i]\n&quot;;
}

# use the push &amp; pop methods
$a = $dbobj-&gt;pop;
$dbobj-&gt;push(&quot;last&quot;);
print &quot;\nThe last record was [$a]\n&quot;;

# and the shift &amp; unshift methods
$a = $dbobj-&gt;shift;
$dbobj-&gt;unshift(&quot;first&quot;);
print &quot;The first record was [$a]\n&quot;;

# Use the API to add a new record after record 2.
$i = 2;
$dbobj-&gt;put($i, &quot;Newbie&quot;, R_IAFTER);
    
# and a new record before record 1.
$i = 1;
$dbobj-&gt;put($i, &quot;New One&quot;, R_IBEFORE);

# delete record 3
$dbobj-&gt;del(3);

# now print the records in reverse order
print &quot;\nREVERSE\n&quot;;
for ($i = $dbobj-&gt;length - 1; $i &gt;= 0; -- $i) {
    print &quot;$i: $lines[$i]\n&quot;;
}

# same again, but use the API functions instead
print &quot;\nREVERSE again\n&quot;;
my ($s, $k, $v)  = (0, 0, 0);
for ($s = $dbobj-&gt;seq($k, $v, R_LAST);
     $s == 0;
     $s = $dbobj-&gt;seq($k, $v, R_PREV))
{
    print &quot;$k: $v\n&quot;
}

undef $dbobj;
untie @lines;</PRE
></DIV
><P
CLASS="para"
>This is what it outputs:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>ORIGINAL</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>0: zero</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1: one</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>2: two</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>3: three</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>4: four</I
></CODE
></B
></CODE
>

<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The last record was [four]</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The first record was [zero]</I
></CODE
></B
></CODE
>

<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>REVERSE</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>5: last</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>4: three</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>3: Newbie</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>2: one</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1: New One</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>0: first</I
></CODE
></B
></CODE
>

<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>REVERSE again</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>5: last</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>4: three</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>3: Newbie</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>2: one</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>1: New One</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>0: first</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Note that rather than iterating through the array, <CODE
CLASS="literal"
>@lines</CODE
>, like this:</P
><PRE
CLASS="programlisting"
>    foreach $item (@lines) { }</PRE
><P
CLASS="para"
>you must use either this:</P
><PRE
CLASS="programlisting"
>    foreach $i (0 .. $dbobj-&gt;length - 1) { }</PRE
><P
CLASS="para"
>or this:</P
><PRE
CLASS="programlisting"
>    for ($done_yet = $dbobj-&gt;get($k, $v, R_FIRST);
         not $done_yet;
         $done_yet = $dbobj-&gt;get($k, $v, R_NEXT) )
    {
        # process key or value
    }</PRE
><P
CLASS="para"
>Also, when we used the <CODE
CLASS="literal"
>put</CODE
> method, we specified the record index using a variable, <CODE
CLASS="literal"
>$i</CODE
>, rather than passing the literal value itself. This is because <CODE
CLASS="literal"
>put</CODE
> returns the record number of the inserted line in that parameter, altering its contents.<A
CLASS="indexterm"
NAME="ch14-idx-1000004983-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004983-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004983-2"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004983-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-1004"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard DB_File module, also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>, in its discussion of <CODE
CLASS="literal"
>$DB_RECNO</CODE
> bindings.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.6. Sorting Large DBM Files"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.6. Sorting Large DBM Files"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_09.htm"
TITLE="14.8. Storing Complex Data in a DBM File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.8. Storing Complex Data in a DBM File"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>14.6. Sorting Large DBM Files</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>14.8. Storing Complex Data in a DBM File</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
