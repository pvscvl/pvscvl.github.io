<HTML
><HEAD
>
<TITLE>Recipe 13.10. Accessing Overridden Methods (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:26Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_10.htm"
TITLE="13.9. Writing an Inheritable Class"><LINK
REL="next"
HREF="ch13_12.htm"
TITLE="13.11. Generating Attribute Methods Using AUTOLOAD"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_10.htm"
TITLE="13.9. Writing an Inheritable Class"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.9. Writing an Inheritable Class"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_12.htm"
TITLE="13.11. Generating Attribute Methods Using AUTOLOAD"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.11. Generating Attribute Methods Using AUTOLOAD"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-33387"
>13.10. Accessing Overridden Methods</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1265"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004577-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004577-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004577-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004577-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004577-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004577-5"
></A
></A
></H3
><P
CLASS="para"
>Your constructor method overrides the constructor of a parent class. You want your constructor to call the parent class's constructor.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1271"
>Solution</A
></H3
><P
CLASS="para"
>Learn about the special class, <A
CLASS="indexterm"
NAME="ch13-idx-1000004583-0"
></A
>SUPER.</P
><PRE
CLASS="programlisting"
>sub meth { 
    my $self = shift;
    $self-&gt;SUPER::<CODE
CLASS="literal"
>meth()</CODE
>;
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1285"
>Discussion</A
></H3
><P
CLASS="para"
>In languages like C++ where constructors don't actually allocate memory but just initialize the object, all base class constructors are automatically called for you. In languages like Java and Perl, you have to call them yourself.</P
><P
CLASS="para"
>To call a method in a particular class, the notation <CODE
CLASS="literal"
>$self-&gt;SUPER::meth()</CODE
> is used. This is an extension of the regular notation to start looking in a particular base class. It is only valid from within an overridden method. Here's a comparison of styles:</P
><PRE
CLASS="programlisting"
>$self-&gt;<CODE
CLASS="literal"
>meth();</CODE
>                # Call wherever first meth is found
$self-&gt;Where::<CODE
CLASS="literal"
>meth();</CODE
>         # Start looking in package &quot;Where&quot;
$self-&gt;SUPER::<CODE
CLASS="literal"
>meth(); </CODE
>        # Call overridden version</PRE
><P
CLASS="para"
>Simple users of the class should probably limit themselves to the first one. The second is possible, but not suggested. The last must only be called from within the overridden method.</P
><P
CLASS="para"
>An overriding constructor should call its SUPER's constructor to allocate and bless the object, limiting itself to instantiating any data fields needed. It makes sense here to separate the object allocation code from the object initialization code. We'll name it with a leading underscore, a convention indicating a nominally private method. Think of it as a "Do Not Disturb" sign.</P
><PRE
CLASS="programlisting"
>sub new {
    my $classname  = shift;         # What class are we constructing?
    my $self       = $classname-&gt;SUPER::new(@_);
    $self-&gt;_init(@_);
    return $self;                   # And give it back
} 

sub _init {
    my $self = shift;
    $self-&gt;{START}   = time();   # init data fields
    $self-&gt;{AGE}     = 0;
    $self-&gt;{EXTRA}   = { @_ };   # anything extra
}</PRE
><P
CLASS="para"
>Both <CODE
CLASS="literal"
>SUPER::new</CODE
> and <CODE
CLASS="literal"
>_init</CODE
> have been called with any remaining arguments. That way the user might pass other field initializers in, as in:</P
><PRE
CLASS="programlisting"
>$obj = Widget-&gt;new( haircolor =&gt; red, freckles =&gt; 121 );</PRE
><P
CLASS="para"
>Whether you store these user parameters in their own extra hash or not is up to you.</P
><P
CLASS="para"
>Note that SUPER only works on the first overridden method. If your <CODE
CLASS="literal"
>@ISA</CODE
> array has several classes, it only gets the first one. A manual traversal of <CODE
CLASS="literal"
>@ISA</CODE
> is possible, but probably not worth the hassle.</P
><PRE
CLASS="programlisting"
>my $self = bless {}, $class;
for my $class (@ISA) {
    my $meth = $class . &quot;::_init&quot;;
    $self-&gt;$meth(@_) if $class-&gt;can(&quot;_init&quot;);
} </PRE
><P
CLASS="para"
>This fragile code assumes that all superclasses initialize their objects with <CODE
CLASS="literal"
>_init</CODE
> instead of initializing in the constructor. It also assumes that a hash reference is used for the underlying object.<A
CLASS="indexterm"
NAME="ch13-idx-1000004579-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004579-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004579-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004579-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004579-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004579-5"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1000006443"
>See Also</A
></H3
><P
CLASS="para"
>The discussion on the SUPER class in <I
CLASS="filename"
>perltoot </I
>(1) and <I
CLASS="filename"
>perlobj </I
>(1), and in the section on "Method Invocation" in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_10.htm"
TITLE="13.9. Writing an Inheritable Class"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.9. Writing an Inheritable Class"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_12.htm"
TITLE="13.11. Generating Attribute Methods Using AUTOLOAD"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.11. Generating Attribute Methods Using AUTOLOAD"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>13.9. Writing an Inheritable Class</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>13.11. Generating Attribute Methods Using AUTOLOAD</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
