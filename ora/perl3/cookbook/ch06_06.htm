<HTML
><HEAD
>
<TITLE>Recipe 6.5. Finding the Nth Occurrence of a Match (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:45Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_05.htm"
TITLE="6.4.  Commenting Regular Expressions"><LINK
REL="next"
HREF="ch06_07.htm"
TITLE="6.6. Matching Multiple Lines"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.4.  Commenting Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.4.  Commenting Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_07.htm"
TITLE="6.6. Matching Multiple Lines"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.6. Matching Multiple Lines"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-chap06_finding_0"
>6.5. Finding the N<SUP
CLASS="superscript"
>th</SUP
> Occurrence of a Match</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-553"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007557-0"
></A
></A
></H3
><P
CLASS="para"
>You want to find the N<EM
CLASS="emphasis"
> </EM
><SUP
CLASS="superscript"
>th</SUP
> match in a string, not just the first one. For example, you'd like to find the word preceding the third occurrence of <CODE
CLASS="literal"
>&quot;fish&quot;</CODE
>:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>One fish two fish red fish blue fish</I
></CODE
></B
></CODE
></PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-561"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>/g</CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000007565-0"
></A
> modifier in a <CODE
CLASS="literal"
>while</CODE
> loop, keeping count of matches:</P
><PRE
CLASS="programlisting"
>$WANT = 3;
$count = 0;
while (/(\w+)\s+fish\b/gi) {
    if (++$count == $WANT) {
        print &quot;The third fish is a $1 one.\n&quot;;
        # Warning: don't `last' out of this loop
    }
}
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The third fish is a red one.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Or use a repetition count and repeated pattern like this:</P
><PRE
CLASS="programlisting"
>/(?:\w+\s+fish\s+){2}(\w+)\s+fish/i;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-589"
>Discussion</A
></H3
><P
CLASS="para"
>As explained in the chapter introduction, using the <CODE
CLASS="literal"
>/g</CODE
> modifier in scalar context creates something of a <A
CLASS="indexterm"
NAME="ch06-idx-1000008346-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000008346-1"
></A
><EM
CLASS="emphasis"
>progressive match</EM
>, useful in <CODE
CLASS="literal"
>while</CODE
> loops. This is commonly used to count the number of times a pattern matches in a string:</P
><PRE
CLASS="programlisting"
># simple way with while loop
$count = 0;
while ($string =~ /PAT/g) {
    $count++;               # or whatever you'd like to do here
}

# same thing with trailing while
$count = 0;
$count++ while $string =~ /PAT/g;

# or with for loop
for ($count = 0; $string =~ /PAT/g; $count++) { }
    
# Similar, but this time count overlapping matches
$count++ while $string =~ /(?=PAT)/g;</PRE
><P
CLASS="para"
>To find the N<SUP
CLASS="superscript"
>th</SUP
> match, it's easiest to keep your own counter. When you reach the appropriate N, do whatever you care to. A similar technique could be used to find every N<SUP
CLASS="superscript"
>th</SUP
> match by checking for multiples of N using the modulus operator. For example, <CODE
CLASS="literal"
>(++$count</CODE
> <CODE
CLASS="literal"
>%</CODE
> <CODE
CLASS="literal"
>3)</CODE
> <CODE
CLASS="literal"
>==</CODE
> <CODE
CLASS="literal"
>0</CODE
> would be every third match.</P
><P
CLASS="para"
>If this is too much bother, you can always extract all matches and then hunt for the ones you'd like.</P
><PRE
CLASS="programlisting"
>$pond  = 'One fish two fish red fish blue fish';

# using a temporary
@colors = ($pond =~ /(\w+)\s+fish\b/gi);      # get all matches
$color  = $colors[2];                         # then the one we want

# or without a temporary array
$color = ( $pond =~ /(\w+)\s+fish\b/gi )[2];  # just grab element 3

print &quot;The third fish in the pond is $color.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>The third fish in the pond is red.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Or finding all even-numbered fish:</P
><PRE
CLASS="programlisting"
>$count = 0;
$_ = 'One fish two fish red fish blue fish';
@evens = grep { $count++ % 2 == 1 } /(\w+)\s+fish\b/gi;
print &quot;Even numbered fish are @evens.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Even numbered fish are two blue.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>For substitution, the replacement value should be a code expression that returns the proper string. Make sure to return the original as a replacement string for the cases you aren't interested in changing. Here we fish out the fourth specimen and turn it into a snack:</P
><PRE
CLASS="programlisting"
>$count = 0;
s{
   \b               # makes next \w more efficient
   ( \w+ )          # this is what we'll be changing
   (
     \s+ fish \b
   )
}{
    if (++$count == 4) {
        &quot;sushi&quot; . $2;
    } else {
         $1   . $2;
    }
}gex;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>One fish two fish red fish sushi fish</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>Picking out the last match instead of the first one is a fairly common task. The easiest way is to skip the beginning part greedily. After <CODE
CLASS="literal"
>/.*\b(\w+)\s+fish\b/</CODE
>, for example, the <CODE
CLASS="literal"
>$1</CODE
> variable would have the last fish.</P
><P
CLASS="para"
>Another way to get arbitrary counts is to make a global match in list context to produce all hits, then extract the desired element of that list:</P
><PRE
CLASS="programlisting"
>$pond = 'One fish two fish red fish blue fish swim here.';
$color = ( $pond =~ /\b(\w+)\s+fish\b/gi )[-1];
print &quot;Last fish is $color.\n&quot;;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Last fish is blue.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>If you need to express this same notion of finding the last match in a single pattern without <CODE
CLASS="literal"
>/g</CODE
>, you can do so with the negative lookahead assertion <CODE
CLASS="literal"
>(?!THING)</CODE
>. When you want the last match of arbitrary pattern A, you find A followed by any amount of not A through the end of the string. The general construct is <CODE
CLASS="literal"
>A(?!.*A)*$</CODE
>, which can be broken up for legibility:</P
><PRE
CLASS="programlisting"
>m{
    A               # find some pattern A
    (?!             # mustn't be able to find
        .*          # something
        A           # and A
    )
    $               # through the end of the string
}x</PRE
><P
CLASS="para"
>That leaves us with this approach for selecting the last fish:</P
><PRE
CLASS="programlisting"
>$pond = 'One fish two fish red fish blue fish swim here.';
if ($pond =~ m{
                    \b  (  \w+) \s+ fish \b
                (?! .* \b fish \b )
            }six )
{
    print &quot;Last fish is $1.\n&quot;;
} else {
    print &quot;Failed!\n&quot;;
}
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Last fish is blue.</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>This approach has the advantage that it can fit in just one pattern, which makes it suitable for similar situations as shown in <A
CLASS="xref"
HREF="ch06_18.htm"
TITLE="Expressing AND, OR, and NOT in a Single Pattern"
>Recipe 6.17</A
>. It has its disadvantages, though. It's obviously much harder to read and understand, although once you learn the formula, it's not too bad. But it also runs more slowly though &nbsp;-  around twice as slowly on the data set tested <CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch06-idx-1000009178-0"
></A
>above.<A
CLASS="indexterm"
NAME="ch06-idx-1000009179-0"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1000009180"
>See Also</A
></H3
><P
CLASS="para"
>The behavior of <CODE
CLASS="literal"
>m//g</CODE
> in scalar context is given in the "Regexp Quote-like Operators" section of <I
CLASS="filename"
>perlop</I
> (1), and in the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Pattern Matching Operators"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; zero-width positive lookahead assertions are shown in the "Regular Expressions" section of <I
CLASS="filename"
>perlre </I
>(1), and in the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"rules of regular expression matching"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_05.htm"
TITLE="6.4.  Commenting Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.4.  Commenting Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_07.htm"
TITLE="6.6. Matching Multiple Lines"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.6. Matching Multiple Lines"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>6.4.  Commenting Regular Expressions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>6.6. Matching Multiple Lines</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
