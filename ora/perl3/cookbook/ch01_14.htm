<HTML
><HEAD
>
<TITLE>Recipe 1.13. Escaping Characters (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:18Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_13.htm"
TITLE="1.12. Reformatting Paragraphs"><LINK
REL="next"
HREF="ch01_15.htm"
TITLE="1.14. Trimming Blanks from the Ends of a String"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_13.htm"
TITLE="1.12. Reformatting Paragraphs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.12. Reformatting Paragraphs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_15.htm"
TITLE="1.14. Trimming Blanks from the Ends of a String"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.14. Trimming Blanks from the Ends of a String"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-23292"
>1.13. Escaping Characters</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1523"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010315-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010315-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010315-2"
></A
></A
></H3
><P
CLASS="para"
>You need to output a string with certain characters (quotes, commas, etc.) escaped. For instance, you're producing a format string for <CODE
CLASS="literal"
>sprintf</CODE
> and want to convert literal <CODE
CLASS="literal"
>%</CODE
> signs into <CODE
CLASS="literal"
>%%</CODE
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1529"
>Solution</A
></H3
><P
CLASS="para"
>Use a substitution to backslash or double each character to be escaped. <A
CLASS="indexterm"
NAME="ch01-idx-1000010316-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010316-1"
></A
></P
><PRE
CLASS="programlisting"
># backslash
$var =~ s/([CHARLIST])/\\$1/g;

# double
$var =~ s/([CHARLIST])/$1$1/g;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1545"
>Discussion</A
></H3
><P
CLASS="para"
><CODE
CLASS="literal"
>$var</CODE
> is the variable to be altered. The <CODE
CLASS="literal"
>CHARLIST</CODE
> is a list of characters to escape and can contain backslash escapes like <CODE
CLASS="literal"
>\t</CODE
> and <CODE
CLASS="literal"
>\n</CODE
>. If you just have one character to escape, omit the brackets:</P
><PRE
CLASS="programlisting"
>$string =~ s/%/%%/g;</PRE
><P
CLASS="para"
>The following lets you do escaping when preparing strings to submit to the shell. (In practice, you would need to escape more than just <CODE
CLASS="literal"
>'</CODE
> and &quot; to make any arbitrary string safe for the shell. Getting the list of characters right is so hard, and the risks if you get it wrong are so great, that you're better off using the list form of <CODE
CLASS="literal"
>system</CODE
> and <CODE
CLASS="literal"
>exec</CODE
> to run programs, shown in <A
CLASS="xref"
HREF="ch16_03.htm"
TITLE="Running Another Program"
>Recipe 16.2</A
>. They avoid the shell altogether.)</P
><PRE
CLASS="programlisting"
>$string = q(Mom said, &quot;Don't do that.&quot;);
$string =~ s/(['&quot;])/\\$1/g;</PRE
><P
CLASS="para"
>We had to use two backslashes in the replacement because the replacement section of a substitution is read as a double-quoted string, and to get one backslash, you need to write two. Here's a similar example for VMS DCL, where you need to double every quote to get one through:</P
><PRE
CLASS="programlisting"
>$string = q(Mom said, &quot;Don't do that.&quot;);
$string =~ s/(['&quot;])/$1$1/g;</PRE
><P
CLASS="para"
>Microsoft <A
CLASS="indexterm"
NAME="ch01-idx-1000010327-0"
></A
>command interpreters are harder to work with. In DOS and Windows <EM
CLASS="emphasis"
>COMMAND.COM</EM
> recognizes double quotes but not single ones, has no clue what to do with backquotes, and requires a backslash to make a double quote a literal. Almost any of the free or commercial Unix-like shell environments for Windows will improve this depressing situation.</P
><P
CLASS="para"
>Because we're using character classes in the regular expressions, we can use <CODE
CLASS="literal"
>-</CODE
> to define a range, and <CODE
CLASS="literal"
>^</CODE
> at the start to negate. This escapes all characters that aren't in the range A through Z.</P
><PRE
CLASS="programlisting"
>$string =~ s/([^A-Z])/\\$1/g;</PRE
><P
CLASS="para"
>If you want to escape all non-word characters, use the <CODE
CLASS="literal"
>\Q</CODE
> and <CODE
CLASS="literal"
>\E</CODE
> string metacharacters or the <CODE
CLASS="literal"
>quotemeta</CODE
><A
CLASS="indexterm"
NAME="ch01-idx-1000010328-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010328-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010328-2"
></A
> function. For example, these are equivalent:</P
><PRE
CLASS="programlisting"
>$string = &quot;this \Qis a test!\E&quot;;
$string = &quot;this is\\ a\\ test\\!&quot;;
$string = &quot;this &quot; . quotemeta(&quot;is a test!&quot;);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1579"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>s///</CODE
> operator in <EM
CLASS="emphasis"
>perlre </EM
>(1) and <EM
CLASS="emphasis"
>perlop </EM
>(1) and the <A
CLASS="olink"
HREF="../prog/ch02_04.htm"
>"Pattern Matching"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the <CODE
CLASS="literal"
>quotemeta</CODE
> function in <EM
CLASS="emphasis"
>perlfunc </EM
>(1) and <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the discussion of HTML escaping in <A
CLASS="xref"
HREF="ch19_02.htm"
TITLE="Writing a CGI Script"
>Recipe 19.1</A
>; <A
CLASS="xref"
HREF="ch19_07.htm"
TITLE="Executing Commands Without Shell Escapes"
>Recipe 19.6</A
> for how to avoid having to escape strings to give the shell<A
CLASS="indexterm"
NAME="ch01-idx-1000010323-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010323-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010323-2"
></A
> <A
CLASS="indexterm"
NAME="ch01-idx-1000010318-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010318-1"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_13.htm"
TITLE="1.12. Reformatting Paragraphs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.12. Reformatting Paragraphs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_15.htm"
TITLE="1.14. Trimming Blanks from the Ends of a String"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.14. Trimming Blanks from the Ends of a String"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>1.12. Reformatting Paragraphs</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>1.14. Trimming Blanks from the Ends of a String</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
