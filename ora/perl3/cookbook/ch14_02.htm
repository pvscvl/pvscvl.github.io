<HTML
><HEAD
>
<TITLE>Recipe 14.1. Making and Using a DBM File (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:46Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Database Access"><LINK
REL="prev"
HREF="ch14_01.htm"
TITLE="14.0. Introduction"><LINK
REL="next"
HREF="ch14_03.htm"
TITLE="14.2. Emptying a DBM File"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_01.htm"
TITLE="14.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Database Access"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.2. Emptying a DBM File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.2. Emptying a DBM File"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-25857"
>14.1. Making and Using a DBM File</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-150"
>Problem<A
CLASS="indexterm"
NAME="ch14-idx-1000004919-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004919-1"
></A
></A
></H3
><P
CLASS="para"
>You want to create, populate, inspect, or delete values in a DBM database.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-156"
>Solution</A
></H3
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>dbmopen</CODE
><A
CLASS="indexterm"
NAME="ch14-idx-1000004920-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004920-1"
></A
> or <CODE
CLASS="literal"
>tie</CODE
> to open the database and make it accessible through a hash. Then use the hash as you normally would. When you're done, call <CODE
CLASS="literal"
>dbmclose</CODE
><A
CLASS="indexterm"
NAME="ch14-idx-1000004921-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004921-1"
></A
> or <CODE
CLASS="literal"
>untie</CODE
>.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-1000004641"
>dbmopen</A
></H4
><PRE
CLASS="programlisting"
>use DB_File;                      # optional; overrides default
dbmopen %HASH, $FILENAME, 0666    # open database, accessed through %HASH
    or die &quot;Can't open $FILENAME: $!\n&quot;;

$V = $HASH{$KEY};                 # retrieve from database
$HASH{$KEY} = $VALUE;             # put value into database
if (exists $HASH{$KEY}) {         # check whether in database
    # ...
}
delete $HASH{$KEY};               # remove from database
dbmclose %HASH;                   # close the database</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="ch14-pgfId-1000004663"
>tie</A
></H4
><PRE
CLASS="programlisting"
>use DB_File;                      # load database module

tie %HASH, &quot;DB_File&quot;, $FILENAME   # open database, to be accessed
    or die &quot;Can't open $FILENAME:$!\n&quot;;    # through %HASH

$V = $HASH{$KEY};                 # retrieve from database
$HASH{$KEY} = $VALUE;             # put value into database
if (exists $HASH{$KEY}) {         # check whether in database
    # ...
}
delete $HASH{$KEY};               # delete from database
untie %hash;                      # close the database</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-1000004643"
>Discussion</A
></H3
><P
CLASS="para"
>Accessing a database as a hash is powerful but easy, giving you a persistent hash that sticks around after the program using it has finished running. It's also much faster than loading in a new hash every time; even if the hash has a million entries, your program starts up virtually instantaneously.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch14-idx-1000004931-0"
></A
>program in <A
CLASS="xref"
HREF="ch14_02.htm"
TITLE="userstats"
>Example 14.1</A
> treats the database as though it were a normal hash. You can even call <CODE
CLASS="literal"
>keys</CODE
> or <CODE
CLASS="literal"
>each</CODE
> on it. Likewise, <CODE
CLASS="literal"
>exists</CODE
> and <CODE
CLASS="literal"
>defined</CODE
> are implemented for tied DBM hashes. Unlike a normal hash, a DBM hash does not distinguish between those two functions.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch14-26660"
>Example 14.1: userstats</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# userstats - generates statistics on who is logged in.
# call with an argument to display totals

use DB_File;

$db = '/tmp/userstats.db';       # where data is kept between runs

tie(%db, 'DB_File', $db)         or die &quot;Can't open DB_File $db : $!\n";

if (@ARGV) {
    if (&quot;@ARGV&quot; eq &quot;ALL&quot;) {
        @ARGV = sort keys %db;
    }
    foreach $user (@ARGV) {
            print &quot;$user\t$db{$user}\n&quot;;
    }
} else {
    @who = `who`;                                   # run who(1)
    if ($?) {
        die &quot;Couldn't run who: $?\n&quot;;               # exited abnormally
    }
    # extract username (first thing on the line) and update
    foreach $line (@who) {
        $line =~ /^(\S+)/;
        die &quot;Bad line from who: $line\n&quot; unless $1;
        $db{$1}++;
    }
}

untie %db;</PRE
></DIV
><P
CLASS="para"
>We use <EM
CLASS="emphasis"
>who</EM
> to get a list of users logged in. This typically produces output like:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>gnat     ttyp1   May 29 15:39   (coprolith.frii.com)</B
></PRE
><P
CLASS="para"
>If the <EM
CLASS="emphasis"
>userstats</EM
> program is called without any arguments, it checks who's logged on and updates the database appropriately.</P
><P
CLASS="para"
>If the program is called with arguments, these are treated as usernames whose information will be presented. The special argument <CODE
CLASS="literal"
>&quot;ALL&quot;</CODE
> sets <CODE
CLASS="literal"
>@ARGV</CODE
> to a sorted list of DBM keys. For large hashes with many keys, this is prohibitively expensive &nbsp;-  a better solution would be to use the BTREE bindings of DB_File described in <A
CLASS="xref"
HREF="ch14_07.htm"
TITLE="Sorting Large DBM Files"
>Recipe 14.6</A
>.<A
CLASS="indexterm"
NAME="ch14-idx-1000004923-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004923-1"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-1000004923-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch14-pgfId-240"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the standard modules GDBM_File, NDBM_File, SDBM_File, DB_File, also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <I
CLASS="filename"
>perltie </I
>(1); the section on <A
CLASS="olink"
HREF="../prog/ch05_04.htm"
>"Using Tied Variables"</A
> in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the discussion on the effect of your <CODE
CLASS="literal"
>umask</CODE
> on file creation in <A
CLASS="xref"
HREF="ch07_02.htm"
TITLE="Opening a File"
>Recipe 7.1</A
>; <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Creating Magic Variables with tie"
>Recipe 13.15</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_01.htm"
TITLE="14.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.2. Emptying a DBM File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.2. Emptying a DBM File"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>14.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>14.2. Emptying a DBM File</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
