<HTML
><HEAD
>
<TITLE>Recipe 13.11. Generating Attribute Methods Using AUTOLOAD (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:27Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_11.htm"
TITLE="13.10. Accessing Overridden Methods"><LINK
REL="next"
HREF="ch13_13.htm"
TITLE="13.12. Solving the Data Inheritance Problem"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_11.htm"
TITLE="13.10. Accessing Overridden Methods"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.10. Accessing Overridden Methods"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_13.htm"
TITLE="13.12. Solving the Data Inheritance Problem"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.12. Solving the Data Inheritance Problem"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-39267"
>13.11. Generating Attribute Methods Using AUTOLOAD</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1353"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004584-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004584-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004584-2"
></A
></A
></H3
><P
CLASS="para"
>Your object needs accessor methods to set or get its data fields, and you're tired of writing them all out one at a time.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1359"
>Solution</A
></H3
><P
CLASS="para"
>Carefully use Perl's AUTOLOAD mechanism as a proxy method generator so you don't have to create them all yourself each time you want to add a new data field.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1365"
>Discussion</A
></H3
><P
CLASS="para"
>Perl's AUTOLOAD mechanism intercepts all possible undefined method calls. So as not to permit arbitrary data names, we'll store the list of permitted fields in a hash. The AUTOLOAD method will check to verify that the accessed field is in that hash.</P
><PRE
CLASS="programlisting"
>package Person;
use strict;
use Carp;
use vars qw($AUTOLOAD %ok_field);

# Authorize four attribute fields
for my $attr ( qw(name age peers parent) ) { $ok_field{$attr}++; } 

sub AUTOLOAD {
    my $self = shift;
    my $attr = $AUTOLOAD;
    $attr =~ s/.*:://;
    return unless $attr =~ /[^A-Z]/;  # skip DESTROY and all-cap methods
    croak &quot;invalid attribute method: -&gt;<CODE
CLASS="literal"
>$attr()&quot;</CODE
> unless $ok_field{$attr};
    $self-&gt;{uc $attr} = shift if @_;
    return $self-&gt;{uc $attr};
}
sub new {
    my $proto  = shift;
    my $class  = ref($proto) || $proto;
    my $parent = ref($proto) &amp;&amp; $proto;
    my $self = {};
    bless($self, $class);
    $self-&gt;parent($parent);
    return $self;
} 
1;</PRE
><P
CLASS="para"
>This class supports a constructor named <CODE
CLASS="literal"
>new</CODE
>, and four attribute methods: <CODE
CLASS="literal"
>name</CODE
>, <CODE
CLASS="literal"
>age</CODE
>, <CODE
CLASS="literal"
>peers</CODE
>, and <CODE
CLASS="literal"
>parent</CODE
>. Use the module this way:</P
><PRE
CLASS="programlisting"
>use Person;
my ($dad, $kid);
$dad = Person-&gt;new;
$dad-&gt;name(&quot;Jason&quot;);
$dad-&gt;age(23);
$kid = $dad-&gt;new;
$kid-&gt;name(&quot;Rachel&quot;);
$kid-&gt;age(2);
printf &quot;Kid's parent is %s\n&quot;, $kid-&gt;parent-&gt;name;
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Kid's parent is Jason</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>This is tricky when producing inheritance trees. Suppose you'd like an Employee class that had every data attribute of the Person class, plus two new ones, like <CODE
CLASS="literal"
>salary</CODE
> and <CODE
CLASS="literal"
>boss</CODE
>. Class Employee can't rely upon an inherited <CODE
CLASS="literal"
>Person::AUTOLOAD</CODE
> to determine what Employee's attribute methods are. So each class would need its own <CODE
CLASS="literal"
>AUTOLOAD</CODE
> function. This would check just that class's known attribute fields, but instead of croaking when incorrectly triggered, it would call its overridden superclass version.</P
><P
CLASS="para"
>Here's a version that takes this into consideration:</P
><PRE
CLASS="programlisting"
>sub AUTOLOAD {
    my $self = shift;
    my $attr = $AUTOLOAD;
    $attr =~ s/.*:://;
    return if $attr eq 'DESTROY';   

    if ($ok_field{$attr}) {
        $self-&gt;{uc $attr} = shift if @_;
        return $self-&gt;{uc $attr};
    } else {
        my $superior = &quot;SUPER::$attr&quot;;
        $self-&gt;$superior(@_);
    } 
}</PRE
><P
CLASS="para"
>If the attribute isn't in our OK list, we'll pass it up to our superior, hoping that it can cope with it. But you can't inherit this <CODE
CLASS="literal"
>AUTOLOAD</CODE
>; each class has to have its own, because it is unwisely accessing class data directly, not through the object. Even worse, if a class A inherits from two classes B and C, both of which define their own <CODE
CLASS="literal"
>AUTOLOAD</CODE
>, an undefined method call on A will hit the <CODE
CLASS="literal"
>AUTOLOAD</CODE
> in only one of the two parent classes.</P
><P
CLASS="para"
>We could try to cope with these limitations, but <CODE
CLASS="literal"
>AUTOLOAD</CODE
> eventually begins to feel like a kludge piled on a hack piled on a workaround. There are better approaches for the more complex situations.<A
CLASS="indexterm"
NAME="ch13-idx-1000004594-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004594-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004594-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1485"
>See Also</A
></H3
><P
CLASS="para"
>The examples using AUTOLOAD in <I
CLASS="filename"
>perltoot </I
>(1); <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch10_16.htm"
TITLE="Trapping Undefined Function Calls with AUTOLOAD"
>Recipe 10.15</A
>; <A
CLASS="xref"
HREF="ch13_13.htm"
TITLE="Solving the Data Inheritance Problem"
>Recipe 13.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_11.htm"
TITLE="13.10. Accessing Overridden Methods"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.10. Accessing Overridden Methods"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_13.htm"
TITLE="13.12. Solving the Data Inheritance Problem"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.12. Solving the Data Inheritance Problem"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>13.10. Accessing Overridden Methods</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>13.12. Solving the Data Inheritance Problem</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
