<HTML
><HEAD
>
<TITLE>Recipe 13.5. Using Classes as Structs (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:20Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_05.htm"
TITLE="13.4. Managing Class Data"><LINK
REL="next"
HREF="ch13_07.htm"
TITLE="13.6. Cloning Objects"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_05.htm"
TITLE="13.4. Managing Class Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.4. Managing Class Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_07.htm"
TITLE="13.6. Cloning Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.6. Cloning Objects"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-21970"
>13.5. Using Classes as Structs</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-713"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004525-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004525-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004525-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004525-3"
></A
></A
></H3
><P
CLASS="para"
>You're used to structured data types more complex than Perl's arrays and hashes, such as C's structs and Pascal's records. You've heard that Perl's classes are comparable, but you aren't an object-oriented programmer.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-719"
>Solution</A
></H3
><P
CLASS="para"
>Use the standard Class::Struct module to declare C-like structures:</P
><PRE
CLASS="programlisting"
>use Class::Struct;          # load struct-building module

struct Person =&gt; {          # create a definition for a &quot;Person&quot;
    name   =&gt; '$',          #    name field is a scalar
    age    =&gt; '$',          #    age field is also a scalar
    peers  =&gt; '@',          #    but peers field is an array (reference)
};

my $p = Person-&gt;<CODE
CLASS="literal"
>new()</CODE
>;      # allocate an empty Person struct

$p-&gt;name(&quot;Jason Smythe&quot;);                   # set its name field
$p-&gt;age(13);                                # set its age field
$p-&gt;peers( [&quot;Wilbur&quot;, &quot;Ralph&quot;, &quot;Fred&quot; ] );  # set its peers field

# or this way:
@{$p-&gt;peers} = (&quot;Wilbur&quot;, &quot;Ralph&quot;, &quot;Fred&quot;);

# fetch various values, including the zeroth friend
printf &quot;At age %d, %s's first friend is %s.\n&quot;,
    $p-&gt;age, $p-&gt;name, $p-&gt;peers(0);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-765"
>Discussion</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>Class::Struct::struct</CODE
><A
CLASS="indexterm"
NAME="ch13-idx-1000004531-0"
></A
> function builds struct-like classes on the fly. It creates a class of the name given in the first argument, and gives the class a constructor named <CODE
CLASS="literal"
>new</CODE
> and per-field accessor methods.</P
><P
CLASS="para"
>In the structure layout definition, the keys are the names of the fields and the values are the data type. This type can be one of the three base types, <CODE
CLASS="literal"
>'$'</CODE
> for scalars, <CODE
CLASS="literal"
>'@'</CODE
> for arrays, and <CODE
CLASS="literal"
>'%'</CODE
> for hashes. Each accessor method can be called without arguments to fetch the current value, or with an argument to set the value. In the case of a field whose type is an array or hash, a zero-argument method call returns a reference to the entire array or hash, a one-argument call retrieves the value at that subscript,[<A
CLASS="footnote"
HREF="#ch13-pgfId-1000000614"
>1</A
>] and a two-argument call sets the value at that subscript.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch13-pgfId-1000000614"
>[1]</A
> Unless it's a reference, in which case it uses that as the new aggregate, with type checking.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The type can even be the name of another named structure  &nbsp;-   or any class, for that matter  &nbsp;-   which provides a constructor named <CODE
CLASS="literal"
>new</CODE
>.</P
><PRE
CLASS="programlisting"
>use Class::Struct;

struct Person =&gt; {name =&gt; '$',      age  =&gt; '$'};
struct Family =&gt; {head =&gt; 'Person', address =&gt; '$', members =&gt; '@'};

$folks  = Family-&gt;<CODE
CLASS="literal"
>new();</CODE
>
$dad    = $folks-&gt;head;
$dad-&gt;name(&quot;John&quot;);
$dad-&gt;age(34);

printf(&quot;%s's age is %d\n&quot;, $folks-&gt;head-&gt;name, $folks-&gt;head-&gt;age);</PRE
><P
CLASS="para"
>If you'd like to impose more parameter checking on the fields' values, supply your own version for the accessor method to override the default version. Let's say you wanted to make sure the age value contains only digits, and that it falls within reasonably human age requirements. Here's how that function might be coded:</P
><PRE
CLASS="programlisting"
>sub Person::age {
    use Carp;
    my ($self, $age) = @_;
    if    (@_  &gt; 2) {  confess &quot;too many arguments&quot; } 
    elsif (@_ == 1) {  return $struct-&gt;{'age'}      }
    elsif (@_ == 2) {
        carp &quot;age `$age' isn't numeric&quot;   if $age !~ /^\d+/;
        carp &quot;age `$age' is unreasonable&quot; if $age &gt; 150;
        $self-&gt;{'age'} = $age;
    } 
} </PRE
><P
CLASS="para"
>If you want to provide warnings only when the <B
CLASS="emphasis.bold"
>-w</B
> command-line flag is used, check the <CODE
CLASS="literal"
>$^W</CODE
><A
CLASS="indexterm"
NAME="ch13-idx-1000004532-0"
></A
> variable:</P
><PRE
CLASS="programlisting"
>if ($^W) { 
    carp &quot;age `$age' isn't numeric&quot;   if $age !~ /^\d+/;
    carp &quot;age `$age' is unreasonable&quot; if $age &gt; 150;
}</PRE
><P
CLASS="para"
>If you want to complain if <B
CLASS="emphasis.bold"
>-w</B
> is set, but to raise an exception if the user doesn't ask for warnings, do something like the following. Don't be confused by the pointer arrow; it's an indirect function call, not a method call.</P
><PRE
CLASS="programlisting"
>my $gripe = $^W ? \&amp;carp : \&amp;croak;
$gripe-&gt;(&quot;age `$age' isn't numeric&quot;)   if $age !~ /^\d+/;
$gripe-&gt;(&quot;age `$age' is unreasonable&quot;) if $age &gt; 150;</PRE
><P
CLASS="para"
>Internally, the class is implemented using a hash, as most classes are. This makes your code easy to debug and manipulate. Consider the effect of printing out a structure in the debugger, for example. But the Class::Struct module also supports an array representation. Just specify the fields within square brackets instead of curly ones:</P
><PRE
CLASS="programlisting"
>struct Family =&gt; [head =&gt; 'Person', address =&gt; '$', members =&gt; '@'];</PRE
><P
CLASS="para"
>Empirical evidence suggests that selecting the array representation instead of a hash trims between 10% and 50% off the memory consumption of your objects, and up to 33% of the access time. The cost is less informative debugging information and more mental overhead when writing override functions, such as <CODE
CLASS="literal"
>Person::age</CODE
> above. Choosing an array representation for the object would make it difficult to use inheritance. That's not an issue here, because C-style structures employ the much more easily understood notion of aggregation instead.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>fields</CODE
> pragma in the 5.005 release of Perl provides the speed and space arrays with the expressiveness of hashes, and adds compile-time checking of an object's field names.</P
><P
CLASS="para"
>If all the fields are the same type, rather than writing it out this way:</P
><PRE
CLASS="programlisting"
>struct Card =&gt; { 
    name    =&gt; '$',
    color   =&gt; '$',
    cost    =&gt; '$',
    type    =&gt; '$',
    release =&gt; '$',
    text    =&gt; '$',
};</PRE
><P
CLASS="para"
>you could use a <CODE
CLASS="literal"
>map</CODE
> to shorten it:</P
><PRE
CLASS="programlisting"
>struct Card =&gt; map { $_ =&gt; '$' } qw(name color cost type release text);</PRE
><P
CLASS="para"
>Or, if you're a C programmer who prefers to precede the field name with its type, rather than vice-versa, just reverse the order:</P
><PRE
CLASS="programlisting"
>struct hostent =&gt; { reverse qw{
    $ name
    @ aliases
    $ addrtype
    $ length
    @ addr_list
}};</PRE
><P
CLASS="para"
>You can even make aliases, in the (dubious) spirit of <CODE
CLASS="literal"
>#define</CODE
>, that allow the same field to be accessed under multiple aliases. In C you can say:</P
><PRE
CLASS="programlisting"
>#define h_type h_addrtype
#define h_addr h_addr_list[0]</PRE
><P
CLASS="para"
>In Perl, you might try this:</P
><PRE
CLASS="programlisting"
># make (hostent object)-&gt;<CODE
CLASS="literal"
>type()</CODE
> same as (hostent object)-&gt;<CODE
CLASS="literal"
>addrtype()</CODE
>
*hostent::type = \&amp;hostent::addrtype;

# make (hostenv object)-&gt;<CODE
CLASS="literal"
>addr()</CODE
> same as (hostenv object)-&gt;addr_list(0)
sub hostent::addr { shift-&gt;addr_list(0,@_) }</PRE
><P
CLASS="para"
>As you see, you can add methods to a class  &nbsp;-   or functions to a package  &nbsp;-   simply by declaring a subroutine in the right namespace. You don't have to be in the file defining the class, subclass it, or do anything fancy and complicated. It would be much better to subclass it, however:</P
><PRE
CLASS="programlisting"
>package Extra::hostent;
use Net::hostent;
@ISA = qw(hostent);
sub addr { shift-&gt;addr_list(0,@_) } 
1;</PRE
><P
CLASS="para"
>That one's already available in the standard Net::hostent class, so you needn't bother. Check out that module's source code as a form of inspirational reading. We can't be held responsible for what it inspires you to do, though.<A
CLASS="indexterm"
NAME="ch13-idx-1000004527-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004527-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004527-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004527-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-917"
>See Also</A
></H3
><P
CLASS="para"
><I
CLASS="filename"
>perltoot </I
>(1), <I
CLASS="filename"
>perlobj </I
>(1), and <I
CLASS="filename"
>perlbot </I
>(1); the documentation for the standard Class::Struct module; the source code for the standard Net::hostent module; the documentation for the Alias module from CPAN; <A
CLASS="xref"
HREF="ch13_04.htm"
TITLE="Managing Instance Data"
>Recipe 13.3</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_05.htm"
TITLE="13.4. Managing Class Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.4. Managing Class Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_07.htm"
TITLE="13.6. Cloning Objects"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.6. Cloning Objects"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>13.4. Managing Class Data</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>13.6. Cloning Objects</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
