<HTML
><HEAD
>
<TITLE>Recipe 4.1. Specifying a List In Your Program (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:01Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"><LINK
REL="prev"
HREF="ch04_01.htm"
TITLE="4.0. Introduction"><LINK
REL="next"
HREF="ch04_03.htm"
TITLE="4.2. Printing a List with Commas"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_01.htm"
TITLE="4.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Arrays"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.2. Printing a List with Commas"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2. Printing a List with Commas"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-chap04_specifying_0"
>4.1. Specifying a List In Your Program</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-63"
>Problem <A
CLASS="indexterm"
NAME="ch04-idx-1000006572-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006572-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006572-2"
></A
></A
></H3
><P
CLASS="para"
>You want to include a list in your program. This is how you initialize arrays.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-69"
>Solution</A
></H3
><P
CLASS="para"
>You can write out a <A
CLASS="indexterm"
NAME="ch04-idx-1000006588-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006588-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006588-2"
></A
>comma-separated list of elements:</P
><PRE
CLASS="programlisting"
>@a = (&quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;);</PRE
><P
CLASS="para"
>If you have a lot of single-word elements, use the <CODE
CLASS="literal"
>qw()</CODE
><A
CLASS="indexterm"
NAME="ch04-idx-1000006590-0"
></A
> operator:</P
><PRE
CLASS="programlisting"
>@a = qw(Why are you teasing me?);</PRE
><P
CLASS="para"
>If you have a lot of multi-word elements, use a here document and extract lines:</P
><PRE
CLASS="programlisting"
>@lines = (&lt;&lt;&quot;END_OF_HERE_DOC&quot; =~ m/^\s*(.+)/gm);
    The boy stood on the burning deck,
    It was as hot as glass.
END_OF_HERE_DOC</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-91"
>Discussion</A
></H3
><P
CLASS="para"
>The first technique is the most commonly used, often because only small arrays are normally initialized as program literals. Initializing a large array would fill your program with values and make it hard to read, so such arrays are either initialized in a separate library file (see <A
CLASS="xref"
HREF="ch12_01.htm"
TITLE="Packages, Libraries, and Modules"
>Chapter 12, <CITE
CLASS="chapter"
>Packages, Libraries, and Modules</CITE
></A
>), or the values are simply read from a file:</P
><PRE
CLASS="programlisting"
>@bigarray = ();
open(DATA, &quot;&lt; mydatafile&quot;)       or die &quot;Couldn't read from datafile: $!\n&quot;;
while (&lt;DATA&gt;) {
    chomp;
    push(@bigarray, $_);
}</PRE
><P
CLASS="para"
>The second technique uses the <CODE
CLASS="literal"
>qw()</CODE
> operator, one of the quoting operators. Along with <CODE
CLASS="literal"
>q()</CODE
><A
CLASS="indexterm"
NAME="ch04-idx-1000006593-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006593-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006593-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006593-3"
></A
>, <CODE
CLASS="literal"
>qq()</CODE
>, and <CODE
CLASS="literal"
>qx()</CODE
>, <CODE
CLASS="literal"
>qw()</CODE
> <A
CLASS="indexterm"
NAME="ch04-idx-1000006598-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006598-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006598-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006598-3"
></A
>provides another way to quote values for your program. <CODE
CLASS="literal"
>q()</CODE
> behaves like single quotes, so these two lines are equivalent:</P
><PRE
CLASS="programlisting"
>$banner = 'The Mines of Moria';
$banner = q(The Mines of Moria);</PRE
><P
CLASS="para"
>Similarly, <CODE
CLASS="literal"
>qq()</CODE
> behaves like double quotes:</P
><PRE
CLASS="programlisting"
>$name   =  &quot;Gandalf&quot;;
$banner = &quot;Speak, $name, and enter!&quot;;
$banner = qq(Speak, $name, and welcome!);</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch04-idx-1000006600-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006600-1"
></A
>And <CODE
CLASS="literal"
>qx()</CODE
> is almost exactly like backticks; that is, it runs a command through the shell complete with variable interpolation and backslash escapes. You can't stop interpolation with backticks, but you can with <CODE
CLASS="literal"
>qx</CODE
>. If you don't want Perl variables to be expanded, you can use a single-quote delimiter on <CODE
CLASS="literal"
>qx</CODE
> to suppress this:</P
><PRE
CLASS="programlisting"
>$his_host   = 'www.perl.com';
$host_info  = `nslookup $his_host`; # expand Perl variable

$perl_info  = qx(ps $$);            # that's Perl's $$
$shell_info = qx'ps $$';            # that's the new shell's $$</PRE
><P
CLASS="para"
>Whereas <CODE
CLASS="literal"
>q()</CODE
>, <CODE
CLASS="literal"
>qq()</CODE
>, and <CODE
CLASS="literal"
>qx()</CODE
> quote single strings, <CODE
CLASS="literal"
>qw()</CODE
> quotes a list of single-word strings by splitting its argument on whitespace, without variable interpolation. These are all the same:</P
><PRE
CLASS="programlisting"
>@banner = ('Costs', 'only', '$4.95');
@banner = qw(Costs only $4.95);
@banner = split(' ', 'Costs only $4.95');</PRE
><P
CLASS="para"
>All quoting operators behave like regular expression matches, in that you can select your quote delimiters, including paired brackets. All four kinds of brackets (angle, square, curly, and round ones) nest properly. That means you can easily use parentheses or braces (or the other two) without fear, provided that they match up:</P
><PRE
CLASS="programlisting"
>@brax   = qw! ( ) &lt; &gt; { } [ ] !;
@rings  = qw(Nenya Narya Vilya);
@tags   = qw&lt;LI TABLE TR TD A IMG H1 P&gt;;
@sample = qw(The vertical bar (|) looks and behaves like a pipe.);</PRE
><P
CLASS="para"
>If you don't want to change the quoting character, use a backslash to escape the delimiter in the string:</P
><PRE
CLASS="programlisting"
>@banner = qw|The vertical bar (\|) looks and behaves like a pipe.|;</PRE
><P
CLASS="para"
>You may only use <CODE
CLASS="literal"
>qw()</CODE
> when each separate, space-separated component is an element in the return list. Be careful not to give Columbus four ships instead of three:</P
><PRE
CLASS="programlisting"
>@ships  = qw(Niña Pinta Santa María);               # WRONG
@ships  = ('Niña', 'Pinta', 'Santa María');         # right</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-163"
>See Also</A
></H3
><P
CLASS="para"
>The "List Value Constructors" section of <I
CLASS="filename"
>perldata </I
>(1); the <A
CLASS="olink"
HREF="../prog/ch02_03.htm"
>"List Values and Arrays"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the "Quote and Quote-Like Operators" section of <I
CLASS="filename"
>perlop </I
>(1); the <CODE
CLASS="literal"
>s///</CODE
> operator in <I
CLASS="filename"
>perlop </I
>(1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006580-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006580-1"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006580-2"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-1000006580-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_01.htm"
TITLE="4.0. Introduction"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.0. Introduction"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.2. Printing a List with Commas"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2. Printing a List with Commas"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>4.0. Introduction</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>4.2. Printing a List with Commas</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
