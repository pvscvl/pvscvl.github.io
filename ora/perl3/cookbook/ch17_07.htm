<HTML
><HEAD
>
<TITLE>Recipe 17.6. Using UNIX Domain Sockets (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:32Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"><LINK
REL="prev"
HREF="ch17_06.htm"
TITLE="17.5. Setting Up a UDP Server"><LINK
REL="next"
HREF="ch17_08.htm"
TITLE="17.7. Identifying the Other End of a Socket"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.5. Setting Up a UDP Server"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.5. Setting Up a UDP Server"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. Sockets"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_08.htm"
TITLE="17.7. Identifying the Other End of a Socket"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.7. Identifying the Other End of a Socket"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-12131"
>17.6. Using UNIX Domain Sockets</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-834"
>Problem<A
CLASS="indexterm"
NAME="ch17-idx-1000004757-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004757-1"
></A
></A
></H3
><P
CLASS="para"
>You want to communicate with other processes on only the local machine.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-840"
>Solution</A
></H3
><P
CLASS="para"
>Use domain sockets. You can use the code and techniques from the preceding Internet domain recipes, with the following changes:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-844"
></A
>Because the naming system is different, use <CODE
CLASS="literal"
>sockaddr_un</CODE
> instead of <CODE
CLASS="literal"
>sockaddr_in</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-846"
></A
>Use IO::Socket::UNIX instead of IO::Socket::INET.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-848"
></A
>Use PF_UNIX instead of PF_INET, and give PF_UNSPEC as the last argument to <CODE
CLASS="literal"
>socket</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="ch17-pgfId-850"
></A
>SOCK_STREAM clients don't have to <CODE
CLASS="literal"
>bind</CODE
> to a local address before they <CODE
CLASS="literal"
>connect</CODE
>.</P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-854"
>Discussion</A
></H3
><P
CLASS="para"
>Unix domain sockets have names like files on the filesystem. In fact, most systems implement them as special files; that's what Perl's <CODE
CLASS="literal"
>-S</CODE
> filetest operator looks for&nbsp;- whether the file is a Unix domain socket.</P
><P
CLASS="para"
>Supply the filename as the Peer argument to <CODE
CLASS="literal"
>IO::Socket::UNIX-&gt;new</CODE
>, or encode it with <CODE
CLASS="literal"
>sockaddr_un</CODE
> and pass it to <CODE
CLASS="literal"
>connect</CODE
>. Here's how to make server and client Unix domain datagram sockets with IO::Socket::UNIX:</P
><PRE
CLASS="programlisting"
>use IO::Socket;

unlink &quot;/tmp/mysock&quot;;
$server = IO::Socket::UNIX-&gt;new(LocalAddr =&gt; &quot;/tmp/mysock&quot;,
                                Type      =&gt; SOCK_DGRAM,
                                Listen    =&gt; 5 )
    or die $@;

$client = IO::Socket::UNIX-&gt;new(PeerAddr  =&gt; &quot;/tmp/mysock&quot;,
                                Type      =&gt; SOCK_DGRAM,
                                Timeout   =&gt; 10 )
    or die $@;</PRE
><P
CLASS="para"
>Here's how to use the traditional functions to make stream sockets:</P
><PRE
CLASS="programlisting"
>use Socket;
    
socket(SERVER, PF_UNIX, SOCK_STREAM, 0);
unlink &quot;/tmp/mysock&quot;;
bind(SERVER, sockaddr_un(&quot;/tmp/mysock&quot;))
    or die &quot;Can't create server: $!&quot;;

socket(CLIENT, PF_UNIX, SOCK_STREAM, 0);
connect(CLIENT, sockaddr_un(&quot;/tmp/mysock&quot;))
    or die &quot;Can't connect to /tmp/mysock: $!&quot;;</PRE
><P
CLASS="para"
>Unless you know what you're doing, set the protocol (the Proto argument to <CODE
CLASS="literal"
>IO::Socket::UNIX-&gt;new</CODE
>, and the last argument to <CODE
CLASS="literal"
>socket</CODE
>) to 0 for PF_UNIX sockets. You can use both SOCK_DGRAM and SOCK_STREAM types of communication in the Unix domain, with the same semantics as we saw for Internet sockets. Changing the domain doesn't change the characteristics of the type of socket.</P
><P
CLASS="para"
>Because many systems actually create a special file in the filesystem, you should delete the file before you try to bind the socket. Even though there is a race condition (somebody could create a file with the name of your socket between your calls to <CODE
CLASS="literal"
>unlink</CODE
> and <CODE
CLASS="literal"
>bind</CODE
>), this isn't a security problem, because <CODE
CLASS="literal"
>bind</CODE
> won't overwrite an existing file.<A
CLASS="indexterm"
NAME="ch17-idx-1000004768-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-1000004768-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch17-pgfId-912"
>See Also</A
></H3
><P
CLASS="para"
>Recipes <A
CLASS="xref"
HREF="ch17_02.htm"
TITLE="Writing a TCP Client"
>Recipe 17.1</A
> through <A
CLASS="xref"
HREF="ch17_06.htm"
TITLE="Setting Up a UDP Server"
>Recipe 17.5</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.5. Setting Up a UDP Server"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.5. Setting Up a UDP Server"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch17_08.htm"
TITLE="17.7. Identifying the Other End of a Socket"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.7. Identifying the Other End of a Socket"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>17.5. Setting Up a UDP Server</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>17.7. Identifying the Other End of a Socket</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
