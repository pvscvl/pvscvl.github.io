<HTML
><HEAD
>
<TITLE>Recipe 6.8. Extracting a Range of Lines (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:19Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"><LINK
REL="prev"
HREF="ch06_08.htm"
TITLE="6.7. Reading Records with a Pattern Separator"><LINK
REL="next"
HREF="ch06_10.htm"
TITLE="6.9. Matching Shell Globs as Regular Expressions"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_08.htm"
TITLE="6.7. Reading Records with a Pattern Separator"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.7. Reading Records with a Pattern Separator"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Pattern Matching"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_10.htm"
TITLE="6.9. Matching Shell Globs as Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.9. Matching Shell Globs as Regular Expressions"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-chap06_extracting_0"
>6.8. Extracting a Range of Lines</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-921"
>Problem<A
CLASS="indexterm"
NAME="ch06-idx-1000007599-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007599-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007599-2"
></A
></A
></H3
><P
CLASS="para"
>You want to extract all lines from one starting pattern through an ending pattern or from a starting line number up to an ending line number.</P
><P
CLASS="para"
>A common example of this is extracting the first 10 lines of a file (line numbers 1 to 10) or just the body of a mail message (everything past the blank line).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-929"
>Solution</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch06-idx-1000007605-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007605-1"
></A
>Use the operators <CODE
CLASS="literal"
>..</CODE
> or <CODE
CLASS="literal"
>...</CODE
> with patterns or line numbers. The operator <CODE
CLASS="literal"
>...</CODE
> doesn't return true if both its tests are true on the same line, but <CODE
CLASS="literal"
>..</CODE
> does.</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    if (/BEGIN PATTERN/ .. /END PATTERN/) {
        # line falls between BEGIN and END in the
        # text, inclusive.
    }
}

while (&lt;&gt;) {
    if ($FIRST_LINE_NUM .. $LAST_LINE_NUM) {
        # operate only between first and last line, inclusive.
    }
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>...</CODE
> operator doesn't test both conditions at once if the first one is true.</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    if (/BEGIN PATTERN/ ... /END PATTERN/) {
        # line is between BEGIN and END on different lines
    }
}

while (&lt;&gt;) {
    if ($FIRST_LINE_NUM ... $LAST_LINE_NUM) {
        # operate only between first and last line, but not same
    }
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-985"
>Discussion</A
></H3
><P
CLASS="para"
>The range operators, <CODE
CLASS="literal"
>..</CODE
> and <CODE
CLASS="literal"
>...</CODE
>, are probably the least understood of Perl's myriad operators. They were designed to allow easy extraction of ranges of lines without forcing the programmer to retain explicit state information. When used in a scalar sense, such as in the test of <CODE
CLASS="literal"
>if</CODE
> and <CODE
CLASS="literal"
>while</CODE
> statements, these operators return a true or false value that's partially dependent on what they last returned. The expression <CODE
CLASS="literal"
>left_operand</CODE
> <CODE
CLASS="literal"
>..</CODE
> <CODE
CLASS="literal"
>right_operand</CODE
> returns false until <CODE
CLASS="literal"
>left_operand</CODE
> is true, but once that test has been met, it stops evaluating <CODE
CLASS="literal"
>left_operand</CODE
> and keeps returning true until <CODE
CLASS="literal"
>right_operand</CODE
> becomes true, after which it restarts the cycle. To put it another way, the first operand turns on the construct as soon as it returns a true value, whereas the second one turns it off as soon as <EM
CLASS="emphasis"
>it</EM
> returns true.</P
><P
CLASS="para"
>These conditions are absolutely arbitrary. In fact, you could write <CODE
CLASS="literal"
>mytestfunc1()</CODE
> <CODE
CLASS="literal"
>..</CODE
> <CODE
CLASS="literal"
>mytestfunc2()</CODE
>, although in practice this is seldom done. Instead, the range operators are usually used either with line numbers as operands (the first example), patterns as operands (the second example), or both.</P
><PRE
CLASS="programlisting"
># command-line to print lines 15 through 17 inclusive (see below)
perl -ne 'print if 15 .. 17' datafile

# print out all &lt;XMP&gt; .. &lt;/XMP&gt; displays from HTML doc
while (&lt;&gt;) {
    print if m#&lt;XMP&gt;#i .. m#&lt;/XMP&gt;#i;
}
    
# same, but as shell command
% perl -ne 'print if m#&lt;XMP&gt;#i .. m#&lt;/XMP&gt;#i' document.html</PRE
><P
CLASS="para"
>If either operand is a numeric literal, the range operators implicitly compare against the <CODE
CLASS="literal"
>$.</CODE
> variable (<CODE
CLASS="literal"
>$NR</CODE
> or <CODE
CLASS="literal"
>$INPUT_LINE_NUMBER</CODE
> if you <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>English</CODE
>). Be careful with implicit line number comparisons here. You must specify literal numbers in your code, not variables containing line numbers. That means you can simply say <CODE
CLASS="literal"
>3</CODE
> <CODE
CLASS="literal"
>..</CODE
> <CODE
CLASS="literal"
>5</CODE
> in a conditional, but not <CODE
CLASS="literal"
>$n</CODE
> <CODE
CLASS="literal"
>..</CODE
> <CODE
CLASS="literal"
>$m</CODE
> where <CODE
CLASS="literal"
>$n</CODE
> and <CODE
CLASS="literal"
>$m</CODE
> are 3 and 5 respectively. You have to be more explicit and test the <CODE
CLASS="literal"
>$.</CODE
> variable directly.</P
><PRE
CLASS="programlisting"
>perl -ne 'BEGIN { $top=3; $bottom=5 }  print if $top .. $bottom' /etc/passwd        # previous command FAILS
perl -ne 'BEGIN { $top=3; $bottom=5 } \
    print if $. == $top .. $. ==     $bottom' /etc/passwd    # works
perl -ne 'print if 3 .. 5' /etc/passwd   # also works</PRE
><P
CLASS="para"
>The difference between <CODE
CLASS="literal"
>..</CODE
> and <CODE
CLASS="literal"
>...</CODE
> is their behavior when both operands can be true on the same line. Consider these two cases:</P
><PRE
CLASS="programlisting"
>print if /begin/ .. /end/;
print if /begin/ ... /end/;</PRE
><P
CLASS="para"
>Given the line <CODE
CLASS="literal"
>&quot;You</CODE
> <CODE
CLASS="literal"
>may</CODE
> <CODE
CLASS="literal"
>not</CODE
> <CODE
CLASS="literal"
>end</CODE
> <CODE
CLASS="literal"
>ere</CODE
> <CODE
CLASS="literal"
>you</CODE
> <CODE
CLASS="literal"
>begin&quot;</CODE
>, both the double- and triple-dot versions of the range operator above return true. But the code using <CODE
CLASS="literal"
>..</CODE
> will not print any further lines. That's because <CODE
CLASS="literal"
>..</CODE
> tests both conditions on the same line once the first test matches, and the second test tells it that it's reached the end of its region. On the other hand, <CODE
CLASS="literal"
>...</CODE
> will continue until the <EM
CLASS="emphasis"
>next</EM
> line that matches <CODE
CLASS="literal"
>/end/</CODE
> because it never tries to test both operands on the same time.</P
><P
CLASS="para"
>You may mix and match conditions of different sorts, as in:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    $in_header =   1  .. /^$/;
    $in_body   = /^$/ .. eof();
}</PRE
><P
CLASS="para"
>The first assignment sets <CODE
CLASS="literal"
>$in_header</CODE
> to be true from the first input line until after the blank line separating the header, such as from a mail message, a news posting, or even an HTTP header. (Technically speaking, an HTTP header should have both linefeeds and carriage returns as network line terminators, but in practice, servers are liberal in what they accept.) The second assignment sets <CODE
CLASS="literal"
>$in_body</CODE
> to be true starting as soon as the first blank line is encountered, up through end of file. Because range operators do not retest their initial condition, any further blank lines (such as those between paragraphs) won't be noticed.</P
><P
CLASS="para"
>Here's an example. It reads files containing mail messages and prints addresses it finds in headers. Each address is printed only once. The extent of the header is from a line beginning with a <CODE
CLASS="literal"
>&quot;From</CODE
>:<CODE
CLASS="literal"
>&quot;</CODE
> up through the first blank line. If we're not within that range, go on to the next line. This isn't an RFC-822 notion of an address, but it's easy to write.</P
><PRE
CLASS="programlisting"
>%seen = ();
while (&lt;&gt;) {
    next unless /^From:?\s/i .. /^$/;
    while (/([^&lt;&gt;(),;\s]+\@[^&lt;&gt;(),;\s]+)/g) {
        print &quot;$1\n&quot; unless $seen{$1}++;
    }
}</PRE
><P
CLASS="para"
>If this all range business seems mighty strange, chalk it up to trying to support the <EM
CLASS="emphasis"
>s2p</EM
> and <EM
CLASS="emphasis"
>a2p</EM
> translators for converting <EM
CLASS="emphasis"
>sed</EM
> and <EM
CLASS="emphasis"
>awk</EM
> code into Perl. Both those tools have range operators that must work in Perl.<A
CLASS="indexterm"
NAME="ch06-idx-1000007601-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007601-1"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-1000007601-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-1059"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>..</CODE
> and <CODE
CLASS="literal"
>...</CODE
> operators in the "Range Operator" sections of <I
CLASS="filename"
>perlop</I
> (1) and <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the entry for <CODE
CLASS="literal"
>$NR</CODE
> in <I
CLASS="filename"
>perlvar</I
> (1) and the <A
CLASS="olink"
HREF="../prog/ch02_09.htm"
>"Special Variables"</A
> section of <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_08.htm"
TITLE="6.7. Reading Records with a Pattern Separator"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.7. Reading Records with a Pattern Separator"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch06_10.htm"
TITLE="6.9. Matching Shell Globs as Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.9. Matching Shell Globs as Regular Expressions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>6.7. Reading Records with a Pattern Separator</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>6.9. Matching Shell Globs as Regular Expressions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
