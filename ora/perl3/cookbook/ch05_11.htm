<HTML
><HEAD
>
<TITLE>Recipe 5.10. Merging Hashes (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"><LINK
REL="prev"
HREF="ch05_10.htm"
TITLE="5.9. Sorting a Hash"><LINK
REL="next"
HREF="ch05_12.htm"
TITLE="5.11. Finding Common or Different Keys in Two Hashes"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_10.htm"
TITLE="5.9. Sorting a Hash"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.9. Sorting a Hash"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_12.htm"
TITLE="5.11. Finding Common or Different Keys in Two Hashes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.11. Finding Common or Different Keys in Two Hashes"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-30040"
>5.10. Merging Hashes</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-972"
>Problem <A
CLASS="indexterm"
NAME="ch05-idx-1000006496-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-1000006496-1"
></A
></A
></H3
><P
CLASS="para"
>You need to make a new hash with the entries of two existing hashes.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-978"
>Solution</A
></H3
><P
CLASS="para"
>Treat them as lists, and join them as you would lists.</P
><PRE
CLASS="programlisting"
>%merged = (%A, %B);</PRE
><P
CLASS="para"
>To save memory, loop over the hashes' elements and build a new hash that way:</P
><PRE
CLASS="programlisting"
>%merged = ();
while ( ($k,$v) = each(%A) ) {
    $merged{$k} = $v;
}
while ( ($k,$v) = each(%B) ) {
    $merged{$k} = $v;
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-1002"
>Discussion</A
></H3
><P
CLASS="para"
>The first method, like the earlier recipe on inverting a hash, uses the hash-list equivalence explained in the introduction. <CODE
CLASS="literal"
>(%A,</CODE
> <CODE
CLASS="literal"
>%B)</CODE
> evaluates to a list of paired keys and values. When we assign it to <CODE
CLASS="literal"
>%merged</CODE
>, Perl turns that list of pairs back into a hash.</P
><P
CLASS="para"
>Here's an example of that technique:</P
><PRE
CLASS="programlisting"
># %food_color as per the introduction
%drink_color = ( Galliano  =&gt; &quot;yellow&quot;,
                 &quot;Mai Tai&quot; =&gt; &quot;blue&quot; );

%ingested_color = (%drink_color, %food_color);</PRE
><P
CLASS="para"
>Keys in both input hashes appear only once in the output hash. If a food and a drink shared the same name, for instance, then the last one seen by the first merging technique would be the one that showed up in the resultant hash.</P
><P
CLASS="para"
>This style of direct assignment, as in the first example, is easier to read and write, but requires a lot of memory if the hashes are large. That's because Perl has to unroll both hashes into a temporary list before the assignment to the merged hash is done. Step-by-step merging using <CODE
CLASS="literal"
>each</CODE
>, as in the second technique, spares you that cost and lets you decide what to do with duplicate keys.</P
><P
CLASS="para"
>The first example could be rewritten to use the <CODE
CLASS="literal"
>each</CODE
><A
CLASS="indexterm"
NAME="ch05-idx-1000006497-0"
></A
> technique:</P
><PRE
CLASS="programlisting"
># %food_color per the introduction, then
%drink_color = ( Galliano  =&gt; &quot;yellow&quot;,
                 &quot;Mai Tai&quot; =&gt; &quot;blue&quot; );

%substance_color = ();
while (($k, $v) = each %food_color) {
    $substance_color{$k} = $v;
} 
while (($k, $v) = each %drink_color) {
    $substance_color{$k} = $v;
} </PRE
><P
CLASS="para"
>That technique duplicated the <CODE
CLASS="literal"
>while</CODE
> and assignment code. Here's a sneaky way to get around that:</P
><PRE
CLASS="programlisting"
>foreach $substanceref ( \%food_color, \%drink_color ) {
    while (($k, $v) = each %$substanceref) {
        $substance_color{$k} = $v;
    }
}</PRE
><P
CLASS="para"
>If we were merging hashes with duplicates, we can insert our own code to decide what to do with those duplicates:</P
><PRE
CLASS="programlisting"
>foreach $substanceref ( \%food_color, \%drink_color ) {
    while (($k, $v) = each %$substanceref) {
        if (exists $substance_color{$k}) {
            print &quot;Warning: $k seen twice.  Using the first definition.\n&quot;;
            next;
        }
        $substance_color{$k} = $v;
    }
}</PRE
><P
CLASS="para"
>In the special case of appending one hash to another, we can use the hash slice notation to give an elegant shorthand:</P
><PRE
CLASS="programlisting"
>@all_colors{keys %new_colors} = values %new_colors;</PRE
><P
CLASS="para"
>This requires enough memory for lists of the keys and values of <CODE
CLASS="literal"
>%new_colors</CODE
>. As with the first technique, the memory requirement might make this technique infeasible when such lists would be large.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-1086"
>See Also</A
></H3
><P
CLASS="para"
>This is a variation on <A
CLASS="xref"
HREF="ch04_10.htm"
TITLE="Appending One Array to Another"
>Recipe 4.9</A
>; the <CODE
CLASS="literal"
>each</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_10.htm"
TITLE="5.9. Sorting a Hash"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.9. Sorting a Hash"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch05_12.htm"
TITLE="5.11. Finding Common or Different Keys in Two Hashes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.11. Finding Common or Different Keys in Two Hashes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>5.9. Sorting a Hash</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>5.11. Finding Common or Different Keys in Two Hashes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
