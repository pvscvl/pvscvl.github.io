<HTML
><HEAD
>
<TITLE>Recipe 12.3. Delaying use Until Run Time (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:41:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"><LINK
REL="prev"
HREF="ch12_03.htm"
TITLE="12.2. Trapping Errors in require or use"><LINK
REL="next"
HREF="ch12_05.htm"
TITLE="12.4. Making Variables Private to a Module"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.2. Trapping Errors in require or use"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.2. Trapping Errors in require or use"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Packages, Libraries, and Modules"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.4. Making Variables Private to a Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.4. Making Variables Private to a Module"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-19732"
>12.3. Delaying use Until Run Time</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-492"
>Problem<A
CLASS="indexterm"
NAME="ch12-idx-1000005185-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005185-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005185-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005185-3"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005185-4"
></A
></A
></H3
><P
CLASS="para"
>You have a module that you don't need to load each time the program runs, or whose inclusion you wish to delay until after the program starts up.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-498"
>Solution</A
></H3
><P
CLASS="para"
>Either break up the <CODE
CLASS="literal"
>use</CODE
> into its separate <CODE
CLASS="literal"
>require</CODE
> and <CODE
CLASS="literal"
>import</CODE
> components, or else employ the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>autouse</CODE
> pragma.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-504"
>Discussion</A
></H3
><P
CLASS="para"
>Programs that check their arguments and abort with a usage message on error have no reason to load modules they'll never use. This delays the inevitable and annoys users. But those <CODE
CLASS="literal"
>use</CODE
> statements happen during compilation, not execution, as explained in the Introduction.</P
><P
CLASS="para"
>Here, an effective strategy is to place argument checking in a <CODE
CLASS="literal"
>BEGIN</CODE
> block before loading the modules. The following is the start of a program that checks to make sure it was called with exactly two arguments, which must be whole numbers, before going on to load the modules it will need:</P
><PRE
CLASS="programlisting"
>BEGIN {
    unless (@ARGV == 2 &amp;&amp; (2 == grep {/^\d+$/} @ARGV)) {
        die &quot;usage: $0 num1 num2\n&quot;;
    }
}
use Some::Module;
use More::Modules;</PRE
><P
CLASS="para"
>A related situation arises in programs that don't always use the same set of modules every time they're run. For example, the <EM
CLASS="emphasis"
>factors</EM
> program from <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="Numbers"
>Chapter 2, <CITE
CLASS="chapter"
>Numbers</CITE
></A
>, needs the infinite precision arithmetic library only when the <B
CLASS="emphasis.bold"
>-b</B
> command-line flag is supplied. A <CODE
CLASS="literal"
>use</CODE
> statement would be pointless within a conditional because it's evaluated at compile time, long before the <CODE
CLASS="literal"
>if</CODE
> can be checked. So we'll use a <CODE
CLASS="literal"
>require</CODE
> instead:</P
><PRE
CLASS="programlisting"
>if ($opt_b) {
    require Math::BigInt;
}</PRE
><P
CLASS="para"
>Because Math::BigInt is an object-oriented module instead of a traditional one, no import was needed. If you have an import list, specify it with a <CODE
CLASS="literal"
>qw()</CODE
> construct as you would with <CODE
CLASS="literal"
>use</CODE
>. For example, rather than this:</P
><PRE
CLASS="programlisting"
>use Fcntl qw(O_EXCL O_CREAT O_RDWR);</PRE
><P
CLASS="para"
>you might say this instead:</P
><PRE
CLASS="programlisting"
>require Fcntl;
Fcntl-&gt;import(qw(O_EXCL O_CREAT O_RDWR));</PRE
><P
CLASS="para"
>Delaying the import until run time means that the rest of your program will not be subject to any imported semantic changes that the compiler would have seen if you'd used a <CODE
CLASS="literal"
>use</CODE
>. In particular, subroutine prototypes and the overriding of built-in functions will not be seen in time.</P
><P
CLASS="para"
>You might want to encapsulate this delayed loading in a subroutine. The following deceptively simple approach does not work:</P
><PRE
CLASS="programlisting"
>sub load_module {
    require $_[0];  #WRONG
    import  $_[0];  #WRONG
}</PRE
><P
CLASS="para"
>It fails for subtle reasons. Imagine calling <CODE
CLASS="literal"
>require</CODE
> with an argument of <CODE
CLASS="literal"
>&quot;Math::BigFloat&quot;</CODE
>. If that's a bareword, the double colon is converted into your operating system's path separator and a trailing <CODE
CLASS="literal"
>.pm</CODE
> is added. But as a simple variable, it's a literal filename. Worse, Perl doesn't have a built-in <CODE
CLASS="literal"
>import</CODE
> function. Instead, there's a class method named <CODE
CLASS="literal"
>import</CODE
> that we're using the dubious indirect object syntax on. As with indirect filehandles, you can't use indirect objects on anything but a plain scalar variable, or a bareword or a block returning the object, not an expression or one element from an array or hash.</P
><P
CLASS="para"
>A better implementation might look more like:</P
><PRE
CLASS="programlisting"
>load_module('Fcntl', qw(O_EXCL O_CREAT O_RDWR));

sub load_module {
    eval &quot;require $_[0]&quot;;
    die if $@;
    $_[0]-&gt;import(@_[1 .. $#_]);
}</PRE
><P
CLASS="para"
>But this still isn't perfectly correct in the general case. It really shouldn't import those symbols into its own package. It should put them into its caller's package. We could account for this, but the whole procedure is getting increasingly messy.</P
><P
CLASS="para"
>A convenient alternative is the <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>autouse</CODE
> pragma. New as of Perl 5.004, this directive can save time on infrequently loaded functions by delaying their loading until they're actually used:</P
><PRE
CLASS="programlisting"
>use autouse Fcntl =&gt; qw( O_EXCL() O_CREAT() O_RDWR() );</PRE
><P
CLASS="para"
>We put parentheses after <CODE
CLASS="literal"
>O_EXCL </CODE
>, <CODE
CLASS="literal"
>O_CREAT </CODE
>, and <CODE
CLASS="literal"
>O_RDWR</CODE
> when we <CODE
CLASS="literal"
>autouse</CODE
>d them but not when we <CODE
CLASS="literal"
>use</CODE
>d them or <CODE
CLASS="literal"
>import</CODE
>ed them. The <CODE
CLASS="literal"
>autouse</CODE
> pragma doesn't just take function names, it can also take a prototype for the function. The Fcntl constants are prototyped to take no arguments, so we can use them as barewords in our program without <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
> kvetching.</P
><P
CLASS="para"
>Remember, too, that <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>strict</CODE
>'s checks take place at compile time. If we <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>Fcntl</CODE
>, the prototypes in the Fcntl module will be compiled and we can use the constants without parentheses. If we <CODE
CLASS="literal"
>require</CODE
> or wrap the <CODE
CLASS="literal"
>use</CODE
> in an <CODE
CLASS="literal"
>eval</CODE
>, as we did earlier, we prevent the compiler from reading the prototypes, so we can't use the Fcntl constants without parentheses.</P
><P
CLASS="para"
>Read the <CODE
CLASS="literal"
>autouse</CODE
> pragma's online documentation to learn its various caveats and provisos.<A
CLASS="indexterm"
NAME="ch12-idx-1000005200-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005200-1"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005200-2"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-1000005200-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch12-pgfId-586"
>See Also</A
></H3
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch12_03.htm"
TITLE="Trapping Errors in require or use"
>Recipe 12.2</A
>; the discussion on the <CODE
CLASS="literal"
>import</CODE
> method in the documentation for the standard Exporter module, also found in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; the documentation for the standard <CODE
CLASS="literal"
>use</CODE
> <CODE
CLASS="literal"
>autouse</CODE
> pragma</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.2. Trapping Errors in require or use"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.2. Trapping Errors in require or use"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch12_05.htm"
TITLE="12.4. Making Variables Private to a Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.4. Making Variables Private to a Module"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>12.2. Trapping Errors in require or use</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>12.4. Making Variables Private to a Module</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
