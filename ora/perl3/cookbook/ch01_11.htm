<HTML
><HEAD
>
<TITLE>Recipe 1.10. Interpolating Functions and Expressions Within Strings (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:08Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"><LINK
REL="prev"
HREF="ch01_10.htm"
TITLE="1.9. Controlling Case"><LINK
REL="next"
HREF="ch01_12.htm"
TITLE="1.11. Indenting Here Documents"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_10.htm"
TITLE="1.9. Controlling Case"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.9. Controlling Case"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Strings"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_12.htm"
TITLE="1.11. Indenting Here Documents"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.11. Indenting Here Documents"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-40187"
>1.10. Interpolating Functions and Expressions Within Strings</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1067"
>Problem <A
CLASS="indexterm"
NAME="ch01-idx-1000010279-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010279-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010279-2"
></A
></A
></H3
><P
CLASS="para"
>You want a function call or expression to expand within a string. This lets you construct more complex templates than with simple scalar variable interpolation.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1073"
>Solution</A
></H3
><P
CLASS="para"
>You can break up your expression into distinct concatenated pieces:</P
><PRE
CLASS="programlisting"
>$answer = $var1 . func() . $var2;   # scalar only</PRE
><P
CLASS="para"
>Or you can use the slightly sneaky <CODE
CLASS="literal"
>@{[</CODE
> <CODE
CLASS="literal"
>LIST</CODE
> <CODE
CLASS="literal"
>EXPR</CODE
> <CODE
CLASS="literal"
>]}</CODE
> or <CODE
CLASS="literal"
>${</CODE
> <CODE
CLASS="literal"
>\(SCALAR</CODE
> <CODE
CLASS="literal"
>EXPR</CODE
> <CODE
CLASS="literal"
>)</CODE
> <CODE
CLASS="literal"
>}</CODE
> expansions:</P
><PRE
CLASS="programlisting"
>$answer = &quot;STRING @{[ LIST EXPR ]} MORE STRING&quot;;
$answer = &quot;STRING ${\( SCALAR EXPR )} MORE STRING&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1087"
>Discussion</A
></H3
><P
CLASS="para"
>This code shows both techniques. The first line shows concatenation; the second shows the expansion trick:</P
><PRE
CLASS="programlisting"
>$phrase = &quot;I have &quot; . ($n + 1) . &quot; guanacos.&quot;;
$phrase = &quot;I have ${\($n + 1)} guanacos.&quot;;</PRE
><P
CLASS="para"
>The first technique builds the final string by concatenating smaller strings, avoiding interpolation but achieving the same end. Because <CODE
CLASS="literal"
>print</CODE
> effectively concatenates its entire argument list, if we were going to <CODE
CLASS="literal"
>print</CODE
> <CODE
CLASS="literal"
>$phrase</CODE
>, we could have just said:</P
><PRE
CLASS="programlisting"
>print &quot;I have &quot;,  $n + 1, &quot; guanacos.\n&quot;;</PRE
><P
CLASS="para"
>When you absolutely must have interpolation, you need the punctuation-riddled interpolation from the Solution. Only <CODE
CLASS="literal"
>@</CODE
>, <CODE
CLASS="literal"
>$</CODE
>, and <CODE
CLASS="literal"
>\</CODE
> are special within double quotes and most backquotes. (As with <CODE
CLASS="literal"
>m//</CODE
> and <CODE
CLASS="literal"
>s///</CODE
>, the <CODE
CLASS="literal"
>qx()</CODE
> synonym is not subject to double-quote expansion if its delimiter is single quotes! <CODE
CLASS="literal"
>$home</CODE
> <CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>qx'echo</CODE
> <CODE
CLASS="literal"
>home</CODE
> <CODE
CLASS="literal"
>is</CODE
> <CODE
CLASS="literal"
>$HOME';</CODE
> would get the shell <CODE
CLASS="literal"
>$HOME</CODE
> variable, not one in Perl.) So, the only way to force arbitrary expressions to expand is by expanding a <CODE
CLASS="literal"
>${}</CODE
> or <CODE
CLASS="literal"
>@{}</CODE
> whose block contains a reference.</P
><P
CLASS="para"
>You can do more than simply assign to a variable after interpolation. It's a general mechanism that can be used in any double-quoted string. For instance, this example will build a string with an interpolated expression and pass the result to a function:</P
><PRE
CLASS="programlisting"
>some_func(&quot;What you want is @{[ split /:/, $rec ]} items&quot;);</PRE
><P
CLASS="para"
>You can interpolate into a here document, as by:</P
><PRE
CLASS="programlisting"
>die &quot;Couldn't send mail&quot; unless send_mail(&lt;&lt;&quot;EOTEXT&quot;, $target);
To: $naughty
From: Your Bank
Cc: @{ get_manager_list($naughty) }
Date: @{[ do { my $now = `date`; chomp $now; $now } ]} (today)

Dear $naughty,

Today, you bounced check number @{[ 500 + int rand(100) ]} to us.
Your account is now closed.

Sincerely,
the management
EOTEXT</PRE
><P
CLASS="para"
>Expanding <A
CLASS="indexterm"
NAME="ch01-idx-1000010285-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010285-1"
></A
>backquotes (<CODE
CLASS="literal"
>``</CODE
>) is particularly challenging because you would normally end up with spurious newlines. By creating a braced block following the <CODE
CLASS="literal"
>@</CODE
> within the <CODE
CLASS="literal"
>@{[]}</CODE
> anonymous array dereference, as we did in the last example, you can create private variables.</P
><P
CLASS="para"
>Although these techniques work, simply breaking your work up into several steps or storing everything in temporary variables is almost always clearer to the reader.</P
><P
CLASS="para"
>In version 5.004 of Perl, <CODE
CLASS="literal"
>${\</CODE
> <CODE
CLASS="literal"
>EXPR</CODE
> <CODE
CLASS="literal"
>}</CODE
> wrongly evaluates <CODE
CLASS="literal"
>EXPR</CODE
> in list instead of scalar context. This bug is fixed in version 5.005.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch01-pgfId-1143"
>See Also</A
></H3
><P
CLASS="para"
><EM
CLASS="emphasis"
>perlref </EM
>(1) and the <A
CLASS="olink"
HREF="../prog/ch04_03.htm"
>"Other Tricks You Can Do with Hard References"</A
> section of <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010281-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010281-1"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-1000010281-2"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_10.htm"
TITLE="1.9. Controlling Case"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.9. Controlling Case"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch01_12.htm"
TITLE="1.11. Indenting Here Documents"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.11. Indenting Here Documents"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>1.9. Controlling Case</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>1.11. Indenting Here Documents</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
