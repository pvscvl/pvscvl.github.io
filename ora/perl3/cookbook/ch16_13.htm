<HTML
><HEAD
>
<TITLE>Recipe 16.12. Sharing Variables in Different Processes (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:07Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_12.htm"
TITLE="16.11. Making a Process Look Like a File with Named Pipes"><LINK
REL="next"
HREF="ch16_14.htm"
TITLE="16.13. Listing Available Signals"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_12.htm"
TITLE="16.11. Making a Process Look Like a File with Named Pipes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.11. Making a Process Look Like a File with Named Pipes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_14.htm"
TITLE="16.13. Listing Available Signals"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.13. Listing Available Signals"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-32637"
>16.12. Sharing Variables in Different Processes</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-2148"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006366-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006366-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006366-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006366-3"
></A
></A
></H3
><P
CLASS="para"
>You want to share variables across forks or between unrelated processes.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-2154"
>Solution</A
></H3
><P
CLASS="para"
>Use SysV IPC, if your operating system supports it.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-2160"
>Discussion</A
></H3
><P
CLASS="para"
>While SysV IPC (shared memory, semaphores, etc.) isn't as widely used as pipes, named pipes, and sockets for interprocess communication, it still has some interesting properties. Normally, however, you can't expect to use shared memory via <CODE
CLASS="literal"
>shmget</CODE
> or the <I
CLASS="filename"
>mmap </I
>(2) system call to share a variable among several processes. That's because Perl would reallocate your string when you weren't wanting it to.</P
><P
CLASS="para"
>The CPAN module <A
CLASS="indexterm"
NAME="ch16-idx-1000006367-0"
></A
>IPC::Shareable takes care of that. Using a clever <CODE
CLASS="literal"
>tie</CODE
> module, SysV shared memory, and the Storable module from CPAN allows data structures of arbitrary complexity to be shared among cooperating processes on the same machine. These processes don't even have to be related to each other.</P
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch16_13.htm"
TITLE="sharetest"
>Example 16.11</A
> is a simple demonstration of the module.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch16-25358"
>Example 16.11: sharetest</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl 
# <A
CLASS="indexterm"
NAME="ch16-idx-1000006368-0"
></A
>sharetest - test shared variables across forks
use IPC::Shareable;

$handle = tie $buffer, 'IPC::Shareable', undef, { destroy =&gt; 1 };
$SIG{INT} = sub { die &quot;$$ dying\n&quot; };

for (1 .. 10) { 
    unless ($child = fork) {        # i'm the child
        die &quot;cannot fork: $!&quot; unless defined $child;
        squabble();
        exit;
    } 
    push @kids, $child;  # in case we care about their pids
}

while (1) {
    print &quot;Buffer is $buffer\n&quot;;
    sleep 1;
} 
die &quot;Not reached&quot;;

sub squabble {
    my $i = 0;
    while (1) { 
        next if $buffer =~ /^$$\b/o;  
        $handle-&gt;shlock();
        $i++;
        $buffer = &quot;$$ $i&quot;;
        $handle-&gt;shunlock();
    }
} </PRE
></DIV
><P
CLASS="para"
>The starting process creates the shared variable, forks off 10 children, and then sits back and prints out the value of the buffer every second or so, forever, or until you hit Ctrl-C.</P
><P
CLASS="para"
>Because the SIGINT handler was set before any forking, it got inherited by the squabbling children as well, so they'll also bite the dust when the process group is interrupted. Keyboard interrupts send signals to the whole process group, not just one process.</P
><P
CLASS="para"
>What do the kids squabble over? They're bickering over who gets to update that shared variable. Each one looks to see whether someone else was here or not. So long as the buffer starts with their own signature (their PID), they leave it alone. As soon as someone else has changed it, they lock the shared variable using a special method call on the handle returned from the <CODE
CLASS="literal"
>tie</CODE
>, update it, and release the lock.</P
><P
CLASS="para"
>The program runs much faster by commenting out the line that starts with <CODE
CLASS="literal"
>next</CODE
> where each process is checking that they were the last one to touch the buffer.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>/^$$\b/o</CODE
> may look suspicious, since <CODE
CLASS="literal"
>/o</CODE
> tells Perl to compile the pattern once only, but then went and changed the variable's value by forking. Fortunately, the value isn't locked at program compile time, but only the first time the pattern is itself compiled in each process, during whose own lifetime <CODE
CLASS="literal"
>$$</CODE
> does not alter.</P
><P
CLASS="para"
>The IPC::Sharable module also supports sharing variables among unrelated processes on the same machine. See its documentation for details.<A
CLASS="indexterm"
NAME="ch16-idx-1000008779-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000008779-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000008779-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000008779-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1000008287"
>See Also</A
></H3
><P
CLASS="para"
>The <A
CLASS="olink"
HREF="../prog/ch03_136.htm"
><CODE
CLASS="literal"
>semctl</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_137.htm"
><CODE
CLASS="literal"
>semget</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_138.htm"
><CODE
CLASS="literal"
>semop</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_136.htm"
><CODE
CLASS="literal"
>shmctl</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_137.htm"
><CODE
CLASS="literal"
>shmget</CODE
></A
>, <A
CLASS="olink"
HREF="../prog/ch03_146.htm"
><CODE
CLASS="literal"
>shmread</CODE
></A
>, and <A
CLASS="olink"
HREF="../prog/ch03_147.htm"
><CODE
CLASS="literal"
>shmwrite</CODE
></A
> functions in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <EM
CLASS="emphasis"
>perlfunc </EM
>(1); the documentation for the IPC::Shareable module from CPAN</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_12.htm"
TITLE="16.11. Making a Process Look Like a File with Named Pipes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.11. Making a Process Look Like a File with Named Pipes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_14.htm"
TITLE="16.13. Listing Available Signals"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.13. Listing Available Signals"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>16.11. Making a Process Look Like a File with Named Pipes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>16.13. Listing Available Signals</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
