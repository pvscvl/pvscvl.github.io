<HTML
><HEAD
>
<TITLE>Recipe 9.9. Renaming Files (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:39:20Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"><LINK
REL="prev"
HREF="ch09_09.htm"
TITLE="9.8. Removing a Directory and Its Contents"><LINK
REL="next"
HREF="ch09_11.htm"
TITLE="9.10. Splitting a Filename into Its Component Parts"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_09.htm"
TITLE="9.8. Removing a Directory and Its Contents"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.8. Removing a Directory and Its Contents"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch09_01.htm"
TITLE="9. Directories"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_11.htm"
TITLE="9.10. Splitting a Filename into Its Component Parts"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.10. Splitting a Filename into Its Component Parts"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-60164"
>9.9. Renaming Files</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-944"
>Problem<A
CLASS="indexterm"
NAME="ch09-idx-1000004434-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004434-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004434-2"
></A
></A
></H3
><P
CLASS="para"
>You have a lot of files whose names you want to change.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-950"
>Solution</A
></H3
><P
CLASS="para"
>Use a <CODE
CLASS="literal"
>foreach</CODE
> loop and the <CODE
CLASS="literal"
>rename</CODE
> function:</P
><PRE
CLASS="programlisting"
>foreach $file (@NAMES) {
    my $newname = $file;
    # change $newname
    rename($file, $newname) or  
        warn &quot;Couldn't rename $file to $newname: $!\n&quot;;
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-1000004700"
>Discussion</A
></H3
><P
CLASS="para"
>This is straightforward. <CODE
CLASS="literal"
>rename</CODE
> takes two arguments. The first is the filename to change, and the second is its new name. Perl's <CODE
CLASS="literal"
>rename</CODE
> is a front end to the operating system's rename system call, which typically won't let you rename files across filesystem boundaries.</P
><P
CLASS="para"
>A small change turns this into a generic <CODE
CLASS="literal"
>rename</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-1000004438-0"
></A
> script, such as the one by Larry Wall shown in <A
CLASS="xref"
HREF="ch09_10.htm"
TITLE="rename"
>Example 9.5</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch09-40514"
>Example 9.5: rename</A
></H4
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# rename - Larry's filename fixer
$op = shift or die &quot;Usage: rename expr [files]\n&quot;;
chomp(@ARGV = &lt;STDIN&gt;) unless @ARGV;
for (@ARGV) {
    $was = $_;
    eval $op;
    die $@ if $@;
    rename($was,$_) unless $was eq $_;
}</PRE
></DIV
><P
CLASS="para"
>This script's first argument is Perl code that alters the filename (stored in <CODE
CLASS="literal"
>$_ </CODE
>) to reflect how you want the file renamed. It can do this because it uses an <CODE
CLASS="literal"
>eval</CODE
> to do the hard work. It also skips <CODE
CLASS="literal"
>rename</CODE
> calls when the filename is untouched. This lets you simply use wildcards like <CODE
CLASS="literal"
>rename</CODE
> <CODE
CLASS="literal"
>EXPR</CODE
> <CODE
CLASS="literal"
>*</CODE
> instead of making long lists of filenames.</P
><P
CLASS="para"
>Here are five examples of calling the <EM
CLASS="emphasis"
>rename</EM
> program from your shell:</P
><PRE
CLASS="programlisting"
>% rename 's/\.orig$//'  *.orig
% rename 'tr/A-Z/a-z/ unless /^Make/'  *
% rename '$_ .= &quot;.bad&quot;'  *.f
% rename 'print &quot;$_: &quot;; s/foo/bar/ if &lt;STDIN&gt; =~ /^y/i'  *
% find /tmp -name '*~' -print | rename 's/^(.+)~$/.#$1/'</PRE
><P
CLASS="para"
>The first shell command removes a trailing <CODE
CLASS="literal"
>&quot;.orig&quot;</CODE
> from each filename.</P
><P
CLASS="para"
>The second converts uppercase to lowercase. Because a translation is used rather than the <CODE
CLASS="literal"
>lc</CODE
> function, this conversion won't be locale-aware. To fix that, you'd have to write:</P
><PRE
CLASS="programlisting"
>% rename 'use locale; $_ = lc($_) unless /^Make/' *</PRE
><P
CLASS="para"
>The third appends <CODE
CLASS="literal"
>&quot;.bad&quot;</CODE
> to each Fortran file ending in <CODE
CLASS="literal"
>&quot;.f&quot;</CODE
>, something a lot of us have wanted to do for a long time.</P
><P
CLASS="para"
>The fourth prompts the user for the change. Each file's name is printed to standard output and a response is read from standard input. If the user types something starting with a <CODE
CLASS="literal"
>&quot;y&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;Y&quot;</CODE
>, any <CODE
CLASS="literal"
>&quot;foo&quot;</CODE
> in the filename is changed to <CODE
CLASS="literal"
>&quot;bar&quot;</CODE
>.</P
><P
CLASS="para"
>The fifth uses <EM
CLASS="emphasis"
>find</EM
> to locate files in <CODE
CLASS="literal"
>/tmp</CODE
> that end with a tilde. It renames these so that instead of ending with a tilde, they start with a dot and a pound sign. In effect, this switches between two common conventions for backup files.</P
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>rename</EM
> script exemplifies the powerful Unix tool-and-filter philosophy. Even though we could have created a dedicated command to do the lowercase conversion, it's nearly as easy to write a flexible, reusable tool by embedding an <CODE
CLASS="literal"
>eval</CODE
>. By allowing the filenames to be read from standard input, we don't have to build in the recursive directory walk. Instead, we just use <EM
CLASS="emphasis"
>find</EM
>, which performs this function well. There's no reason to recreate the wheel, although using File::Find we could have.<A
CLASS="indexterm"
NAME="ch09-idx-1000004429-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004429-1"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-1000004429-2"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch09-pgfId-1022"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>rename</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; your system's <I
CLASS="filename"
>mv </I
>(1) and <I
CLASS="filename"
>rename</I
> (2) manpages; the documentation for the standard File::Find module (also in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_09.htm"
TITLE="9.8. Removing a Directory and Its Contents"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9.8. Removing a Directory and Its Contents"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch09_11.htm"
TITLE="9.10. Splitting a Filename into Its Component Parts"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.10. Splitting a Filename into Its Component Parts"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>9.8. Removing a Directory and Its Contents</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>9.10. Splitting a Filename into Its Component Parts</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
