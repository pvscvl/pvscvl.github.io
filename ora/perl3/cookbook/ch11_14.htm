<HTML
><HEAD
>
<TITLE>Recipe 11.13. Storing Data Structures to Disk (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:40:53Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"><LINK
REL="prev"
HREF="ch11_13.htm"
TITLE="11.12. Copying Data Structures"><LINK
REL="next"
HREF="ch11_15.htm"
TITLE="11.14. Transparently Persistent Data Structures"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_13.htm"
TITLE="11.12. Copying Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.12. Copying Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. References and Records"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_15.htm"
TITLE="11.14. Transparently Persistent Data Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.14. Transparently Persistent Data Structures"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-38864"
>11.13. Storing Data Structures to Disk</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1342"
>Problem<A
CLASS="indexterm"
NAME="ch11-idx-1000004872-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004872-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004872-2"
></A
></A
></H3
><P
CLASS="para"
>You want to save your large, complex data structure to disk so you don't have to build it up each time your program runs.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1348"
>Solution</A
></H3
><P
CLASS="para"
>Use the CPAN module Storable's <CODE
CLASS="literal"
>store</CODE
> and <CODE
CLASS="literal"
>retrieve</CODE
> functions:</P
><PRE
CLASS="programlisting"
>use Storable; 
store(\%hash, &quot;filename&quot;);

# later on...  
$href = retrieve(&quot;filename&quot;);        # by ref
%hash = %{ retrieve(&quot;filename&quot;) };   # direct to hash</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1366"
>Discussion</A
></H3
><P
CLASS="para"
>The Storable module uses C functions and a binary format to walk Perl's internal data structures and lay out its data. It's more efficient than a pure Perl and string-based approach, but it's also more fragile.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>The</CODE
> <CODE
CLASS="literal"
>store</CODE
> and <CODE
CLASS="literal"
>retrieve</CODE
> functions expect binary data using the machine's own byte-ordering. This means files created with these functions cannot be shared across different architectures. <CODE
CLASS="literal"
>nstore</CODE
><A
CLASS="indexterm"
NAME="ch11-idx-1000004878-0"
></A
> does the same job <CODE
CLASS="literal"
>store</CODE
> does, but keeps data in canonical (network) byte order, at a slight speed cost:</P
><PRE
CLASS="programlisting"
>use Storable qw(nstore); 
nstore(\%hash, &quot;filename&quot;); 
# later ...  
$href = retrieve(&quot;filename&quot;);</PRE
><P
CLASS="para"
>No matter whether <CODE
CLASS="literal"
>store</CODE
> or <CODE
CLASS="literal"
>nstore</CODE
> was used, you need to call the same <CODE
CLASS="literal"
>retrieve</CODE
> routine to restore the objects in memory. The producer must commit to portability, but the consumer doesn't have to. Code needs only to be changed in one place when the producer changes their mind and the code thus offers a consistent interface on the consumer side, who does not need to know or care.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>store</CODE
> and <CODE
CLASS="literal"
>nstore</CODE
> functions don't lock any of the files they work on. If you're worried about concurrent access, open the file yourself, lock it using <A
CLASS="xref"
HREF="ch07_12.htm"
TITLE="Locking a File"
>Recipe 7.11</A
>, and then use <CODE
CLASS="literal"
>store_fd</CODE
> or its slower but machine-independent version <CODE
CLASS="literal"
>nstore_fd</CODE
>.</P
><P
CLASS="para"
>Here's code to save a hash to a file, with locking. We don't open with the <CODE
CLASS="literal"
>O_TRUNC</CODE
> flag because we have to wait to get the lock before we can clobber the file.</P
><PRE
CLASS="programlisting"
>use Storable qw(nstore_fd);
use Fcntl qw(:DEFAULT :flock);
sysopen(DF, &quot;/tmp/datafile&quot;, O_RDWR|O_CREAT, 0666) 
    or die &quot;can't open /tmp/datafile: $!&quot;;
flock(DF, LOCK_EX)           or die &quot;can't lock /tmp/datafile: $!&quot;;
nstore_fd(\%hash, *DF)
    or die &quot;can't store hash\n&quot;;
truncate(DF, tell(DF));
close(DF);</PRE
><P
CLASS="para"
>Here's code to restore that hash from a file, with locking:</P
><PRE
CLASS="programlisting"
>use Storable;
use Fcntl qw(:DEFAULT :flock);
open(DF, &quot;&lt; /tmp/datafile&quot;)      or die &quot;can't open /tmp/datafile: $!&quot;;
flock(DF, LOCK_SH)               or die &quot;can't lock /tmp/datafile: $!&quot;;
$href = retrieve(*DF);
close(DF);</PRE
><P
CLASS="para"
>With care, you can pass large data objects efficiently between processes with this strategy, since a filehandle connected to a pipe or socket is still a byte stream, just like a plain file.</P
><P
CLASS="para"
>Unlike the various DBM bindings, Storable does not restrict you to using only hashes (or arrays, with DB_File). Arbitrary data structures, including objects, can be stored to disk. The whole structure must be read in or written out in its entirety.<A
CLASS="indexterm"
NAME="ch11-idx-1000004874-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004874-1"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004874-2"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-1000004874-3"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-1430"
>See Also</A
></H3
><P
CLASS="para"
>The section on <A
CLASS="olink"
HREF="../advprog/ch13_02.htm"
>"Remote Procedure Calls (RPC)"</A
> in <A
CLASS="olink"
HREF="../advprog/ch13_01.htm"
>Chapter 13</A
> of <A
CLASS="citetitle"
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
><CITE
CLASS="citetitle"
>Advanced Perl Programming</CITE
></A
>; <A
CLASS="xref"
HREF="ch11_15.htm"
TITLE="Transparently Persistent Data Structures"
>Recipe 11.14</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_13.htm"
TITLE="11.12. Copying Data Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.12. Copying Data Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch11_15.htm"
TITLE="11.14. Transparently Persistent Data Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.14. Transparently Persistent Data Structures"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>11.12. Copying Data Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>11.14. Transparently Persistent Data Structures</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
