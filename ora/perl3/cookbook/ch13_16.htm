<HTML
><HEAD
>
<TITLE>Recipe 13.15. Creating Magic Variables with tie (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:42:35Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"><LINK
REL="prev"
HREF="ch13_15.htm"
TITLE="13.14. Overloading Operators"><LINK
REL="next"
HREF="ch14_01.htm"
TITLE="14. Database Access"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_15.htm"
TITLE="13.14. Overloading Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.14. Overloading Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch13_01.htm"
TITLE="13. Classes, Objects, and Ties"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="chapter"
HREF="ch14_01.htm"
TITLE="14. Database Access"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14. Database Access"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-24376"
>13.15. Creating Magic Variables with tie</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-2257"
>Problem<A
CLASS="indexterm"
NAME="ch13-idx-1000004677-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004677-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004677-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004677-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004677-4"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004677-5"
></A
></A
></H3
><P
CLASS="para"
>You want to add special processing to a variable or handle.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-2263"
>Solution</A
></H3
><P
CLASS="para"
>Use the <CODE
CLASS="literal"
>tie</CODE
> function to give your ordinary variables object hooks.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-2269"
>Discussion</A
></H3
><P
CLASS="para"
>Anyone who's ever used a DBM file under Perl has already used tied objects. Perhaps the most excellent way of using objects is such that the user never notices them. With <CODE
CLASS="literal"
>tie</CODE
>, you can bind a variable or handle to a class, after which all access to the tied variable or handle is transparently intercepted by specially named object methods.</P
><P
CLASS="para"
>The most important <CODE
CLASS="literal"
>tie</CODE
> methods are <A
CLASS="indexterm"
NAME="ch13-idx-1000004678-0"
></A
>FETCH to intercept read access, <A
CLASS="indexterm"
NAME="ch13-idx-1000004679-0"
></A
>STORE to intercept write access, and the constructor, which is one of <A
CLASS="indexterm"
NAME="ch13-idx-1000004680-0"
></A
>TIESCALAR, TIEARRAY, TIEHASH, or TIEHANDLE.</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>User Code</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Executed Code</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>tie $s, &quot;SomeClass&quot;</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>SomeClass-&gt;<CODE
CLASS="literal"
>TIESCALAR()</CODE
></PRE
>
</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$p = $s</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$p = $obj-&gt;<CODE
CLASS="literal"
>FETCH()</CODE
></PRE
>
</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$s = 10</PRE
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<PRE
CLASS="programlisting"
>$obj-&gt;STORE(10)</PRE
>
</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Where did that <CODE
CLASS="literal"
>$obj</CODE
> come from? The <CODE
CLASS="literal"
>tie</CODE
> triggers a call to the class's TIESCALAR constructor method. Perl squirrels away the object returned and surreptitiously uses it for later access.</P
><P
CLASS="para"
>Here's a simple example of a <CODE
CLASS="literal"
>tie</CODE
> class that implements a value ring. Every time the variable is read from, the next value on the ring is displayed. When it's written to, a new value is pushed on the ring. Here's an example:</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# demo_valuering - show tie class
use ValueRing;
tie $color, 'ValueRing', qw(red blue);
print &quot;$color $color $color $color $color $color\n&quot;;
<B
CLASS="emphasis.bold"
>red blue red blue red blue</B
>

$color = 'green';
print &quot;$color $color $color $color $color $color\n&quot;;
<B
CLASS="emphasis.bold"
>green red blue green red blue</B
></PRE
><P
CLASS="para"
>The simple implementation is shown in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="ValueRing"
>Example 13.3</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-35467"
>Example 13.3: ValueRing</A
></H4
><PRE
CLASS="programlisting"
>package ValueRing;

# this is the constructor for scalar ties
sub TIESCALAR {
    my ($class, @values) = @_;
    bless  \@values, $class;
    return \@values;
} 

# this intercepts read accesses
sub FETCH {
    my $self = shift;
    push(@$self, shift(@$self));
    return $self-&gt;[-1];
} 

# this intercepts write accesses
sub STORE {
    my ($self, $value) = @_;
    unshift @$self, $value;
    return $value;
} 

1;</PRE
></DIV
><P
CLASS="para"
>This example might not be compelling, but it illustrates how easy it is to write ties of arbitrary complexity. To the user, <CODE
CLASS="literal"
>$color</CODE
> is just a plain old variable, not an object. All the magic is hidden beneath the tie. You don't have to use a scalar reference just because you're tying a scalar. Here we've used an array reference, but you can use anything you'd like. Usually a hash reference will be used irrespective of what's being tied to because it's the most flexible object representation.</P
><P
CLASS="para"
>For arrays and hashes, more elaborate operations are possible. Tied handles didn't appear until the 5.004 release, and prior to 5.005 use of tied arrays was somewhat limited, but tied hashes have always been richly supported. Because so many object methods are needed to fully support tied hashes, most users choose to inherit from the standard Tie::Hash module, which provides default methods for these. <A
CLASS="indexterm"
NAME="ch13-idx-1000004707-0"
></A
></P
><P
CLASS="para"
>Following are numerous examples of interesting uses of ties.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-chap13_tie_0"
>Tie Example: Outlaw $_</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000004686-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004686-1"
></A
>This curious tie class is used to outlaw unlocalized uses of the implicit variable, <CODE
CLASS="literal"
>$_</CODE
>. Instead of pulling it in with <CODE
CLASS="literal"
>use</CODE
>, which implicitly invokes the class's <CODE
CLASS="literal"
>import ( )</CODE
> method, this one should be loaded with <CODE
CLASS="literal"
>no</CODE
> to call the seldom-used <CODE
CLASS="literal"
>unimport ( )</CODE
> method. The user says:</P
><PRE
CLASS="programlisting"
>no UnderScore;</PRE
><P
CLASS="para"
>Then, all uses of the unlocalized global <CODE
CLASS="literal"
>$_</CODE
> will raise an exception.</P
><P
CLASS="para"
>Here's a little test suite for the module.</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# <A
CLASS="indexterm"
NAME="ch13-idx-1000006758-0"
></A
>nounder_demo - show how to ban $_ from your program
no UnderScore;
@tests = (
    &quot;Assignment&quot;  =&gt; sub { $_ = &quot;Bad&quot; },
    &quot;Reading&quot;     =&gt; sub { print }, 
    &quot;Matching&quot;    =&gt; sub { $x = /badness/ },
    &quot;Chop&quot;        =&gt; sub { chop },
    &quot;Filetest&quot;    =&gt; sub { -x }, 
    &quot;Nesting&quot;     =&gt; sub { for (1..3) { print } },
);

while ( ($name, $code) = splice(@tests, 0, 2) ) {
    print &quot;Testing $name: &quot;;
    eval { &amp;$code };
    print $@ ? &quot;detected&quot; : &quot;missed!&quot;;
    print &quot;\n&quot;;
} </PRE
><P
CLASS="para"
>The result is the following:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Testing Assignment: detected</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Testing Reading: detected</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Testing Matching: detected</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Testing Chop: detected</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Testing Filetest: detected</I
></CODE
></B
></CODE
>
<CODE
CLASS="userinput"
><B
><CODE
CLASS="replaceable"
><I
>Testing Nesting: 123missed!</I
></CODE
></B
></CODE
></PRE
><P
CLASS="para"
>The reason the last one was missed is that it was properly localized by the <CODE
CLASS="literal"
>for</CODE
> loop, so it was considered safe.</P
><P
CLASS="para"
>The UnderScore module itself is shown in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="UnderScore (continued)"
>Example 13.4</A
>. Notice how small it is. The module itself does the <CODE
CLASS="literal"
>tie</CODE
> in its initialization code.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-32163"
>Example 13.4: UnderScore (continued)</A
></H4
><PRE
CLASS="programlisting"
>package UnderScore;
use Carp;
sub TIESCALAR {
    my $class = shift;
    my $dummy;
    return bless \$dummy =&gt; $class;
} 
sub FETCH { croak &quot;Read access to \$_ forbidden&quot;  } 
sub STORE { croak &quot;Write access to \$_ forbidden&quot; } 
sub unimport { tie($_, __PACKAGE__) }
sub import { untie $_ } 
tie($_, __PACKAGE__) unless tied $_;
1;</PRE
></DIV
><P
CLASS="para"
>You can't usefully mix calls to <CODE
CLASS="literal"
>use</CODE
> and <CODE
CLASS="literal"
>no</CODE
> for this class in your program, because they all happen at compile time, not run time. To renege and let yourself use <CODE
CLASS="literal"
>$_</CODE
> again, <CODE
CLASS="literal"
>local</CODE
>ize it.<A
CLASS="indexterm"
NAME="ch13-idx-1000004688-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000004688-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-chap13_tie_1"
>Tie Example: Make a Hash That Always Appends</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000004692-0"
></A
>The class shown below produces a hash whose keys accumulate in an array.</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl 
# <A
CLASS="indexterm"
NAME="ch13-idx-1000004713-0"
></A
>appendhash_demo - show magic hash that autoappends
use Tie::AppendHash;
tie %tab, 'Tie::AppendHash';

$tab{beer} = &quot;guinness&quot;;
$tab{food} = &quot;potatoes&quot;;
$tab{food} = &quot;peas&quot;;

while (my($k, $v) = each %tab) {
    print &quot;$k =&gt; [@$v]\n&quot;;
}</PRE
><P
CLASS="para"
>Here is the result:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>food =&gt; [potatoes peas]</B
>
<B
CLASS="emphasis.bold"
>beer =&gt; [guinness]</B
></PRE
><P
CLASS="para"
>To make this class easy, we will use the boilerplate hash tying module from the standard distribution, shown in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Tie::AppendHash"
>Example 13.5</A
>. To do this, we load the Tie::Hash module and then inherit from the Tie::StdHash class. (Yes, those are different names. The file <EM
CLASS="emphasis"
>Tie/Hash.pm</EM
> provides both the Tie::Hash and Tie::StdHash classes, which are slightly different.)</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-15202"
>Example 13.5: Tie::AppendHash</A
></H4
><PRE
CLASS="programlisting"
>package Tie::AppendHash;
use strict;
use Tie::Hash;
use Carp;
use vars qw(@ISA);
@ISA = qw(Tie::StdHash);
sub STORE {
    my ($self, $key, $value) = @_;
    push @{$self-&gt;{$key}}, $value;
} 
1;</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-chap13_tie_2"
>Tie Example: Case-Insensitive Hash</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000006808-0"
></A
>Here's a fancier hash tie called Tie::Folded. It provides a hash with case-insensitive keys.</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl 
# <A
CLASS="indexterm"
NAME="ch13-idx-1000004715-0"
></A
>folded_demo - demo hash that magically folds case
use Tie::Folded;
tie %tab, 'Tie::Folded';

$tab{VILLAIN}  = &quot;big &quot;; 
$tab{herOine}  = &quot;red riding hood&quot;;
$tab{villain} .= &quot;bad wolf&quot;;   

while ( my($k, $v) = each %tab ) {
    print &quot;$k is $v\n&quot;;
}</PRE
><P
CLASS="para"
>The following is the output of this demo program:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>heroine is red riding hood</B
>
<B
CLASS="emphasis.bold"
>villain is big bad wolf</B
></PRE
><P
CLASS="para"
>Because we have to trap more accesses, the class in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Tie::Folded"
>Example 13.6</A
> is slightly more complicated than the one in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Tie::AppendHash"
>Example 13.5</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-20857"
>Example 13.6: Tie::Folded</A
></H4
><PRE
CLASS="programlisting"
>package Tie::Folded;
use strict;
use Tie::Hash;
use vars qw(@ISA);
@ISA = qw(Tie::StdHash);
sub STORE {
    my ($self, $key, $value) = @_;
    return $self-&gt;{lc $key} = $value;
    } 
sub FETCH {
    my ($self, $key) = @_;
    return $self-&gt;{lc $key};
} 
sub EXISTS {
    my ($self, $key) = @_;
    return exists $self-&gt;{lc $key};
} 
sub DEFINED {
    my ($self, $key) = @_;
    return defined $self-&gt;{lc $key};
} 
1;<A
CLASS="indexterm"
NAME="ch13-idx-1000006068-0"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-chap13_tie_3"
>Tie Example: Hash That Allows Look-Ups by Key or Value</A
></H3
><P
CLASS="para"
>Here is a hash that lets you look up members by key or by value. It does this by having a store method that not only uses the key to store the value, it also uses the value to store the key.</P
><P
CLASS="para"
>Normally there could be a problem if the value being stored were a reference, since you can't normally use a <A
CLASS="indexterm"
NAME="ch13-idx-1000006817-0"
></A
>reference as a key. The standard distribution comes with the Tie::RefHash class that avoids this problem. We'll inherit from it so that we can also avoid this difficulty.</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# <A
CLASS="indexterm"
NAME="ch13-idx-1000004717-0"
></A
>revhash_demo - show hash that permits key *or* value lookups
use strict;
use Tie::RevHash;
my %tab;
tie %tab, 'Tie::RevHash';
%tab = qw{
    Red         Rojo
    Blue        Azul
    Green       Verde
};
$tab{EVIL} = [ &quot;No way!&quot;, &quot;Way!!&quot; ];

while ( my($k, $v) = each %tab ) {
    print ref($k) ? &quot;[@$k]&quot; : $k, &quot; =&gt; &quot;,
        ref($v) ? &quot;[@$v]&quot; : $v, &quot;\n&quot;;
} </PRE
><P
CLASS="para"
>When run, <I
CLASS="filename"
>revhash_demo</I
> produces this:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>[No way! Way!!] =&gt; EVIL</B
>
<B
CLASS="emphasis.bold"
>EVIL =&gt; [No way! Way!!]</B
>
<B
CLASS="emphasis.bold"
>Blue =&gt; Azul</B
>
<B
CLASS="emphasis.bold"
>Green =&gt; Verde</B
>
<B
CLASS="emphasis.bold"
>Rojo =&gt; Red</B
>
<B
CLASS="emphasis.bold"
>Red =&gt; Rojo</B
>
<B
CLASS="emphasis.bold"
>Azul =&gt; Blue</B
>
<B
CLASS="emphasis.bold"
>Verde =&gt; Green</B
></PRE
><P
CLASS="para"
>The module is shown in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Tie::RevHash"
>Example 13.7</A
>. Notice how small it is!</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-33223"
>Example 13.7: Tie::RevHash</A
></H4
><PRE
CLASS="programlisting"
>package Tie::RevHash;
use Tie::RefHash;
use vars qw(@ISA);
@ISA = qw(Tie::RefHash);
sub STORE {
    my ($self, $key, $value) = @_;
    $self-&gt;SUPER::STORE($key, $value);
    $self-&gt;SUPER::STORE($value, $key);
}

sub DELETE {
    my ($self, $key) = @_;
    my $value = $self-&gt;SUPER::FETCH($key);
    $self-&gt;SUPER::DELETE($key);
    $self-&gt;SUPER::DELETE($value);
}

1;<A
CLASS="indexterm"
NAME="ch13-idx-1000006111-0"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-chap13_tie_4"
>Tie Example: Handle That Counts Access</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-1000004700-0"
></A
>Here's an example of tying a filehandle:</P
><PRE
CLASS="programlisting"
>use Counter;
tie *CH, 'Counter';
while (&lt;CH&gt;) {
    print &quot;Got $_\n&quot;;
} </PRE
><P
CLASS="para"
>When run, that program keeps printing <CODE
CLASS="literal"
>Got</CODE
> <CODE
CLASS="literal"
>1</CODE
>, <CODE
CLASS="literal"
>Got</CODE
> <CODE
CLASS="literal"
>2</CODE
>, and so on until the universe collapses, you hit an interrupt, or your computer reboots, whichever comes first. Its simple implementation is shown in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Counter"
>Example 13.8</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-36823"
>Example 13.8: Counter</A
></H4
><PRE
CLASS="programlisting"
>package Counter;
sub TIEHANDLE {
    my $class = shift;
    my $start = shift;
    return bless \$start =&gt; $class;
} 
sub READLINE {
    my $self = shift;
    return ++$$self;
} 
1;</PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-chap13_tie_5"
>Tie Example: Multiple Sink Filehandles</A
></H3
><P
CLASS="para"
>Finally, here's an example of a tied handle that implements a <EM
CLASS="emphasis"
>tee</EM
>-like functionality by twinning standard out and standard error:</P
><PRE
CLASS="programlisting"
>use Tie::Tee;
tie *TEE, 'Tie::Tee', *STDOUT, *STDERR;
print TEE &quot;This line goes both places.\n&quot;;</PRE
><P
CLASS="para"
>Or, more elaborately:</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
# demo_tietee
use Tie::Tee;
use Symbol;

@handles = (*STDOUT);
for $i ( 1 .. 10 ) {
    push(@handles, $handle = gensym());
    open($handle, &quot;&gt;/tmp/teetest.$i&quot;);
} 

tie *TEE, 'Tie::Tee', @handles;
print TEE &quot;This lines goes many places.\n&quot;;</PRE
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>Tie/Tee.pm</EM
> file is shown in <A
CLASS="xref"
HREF="ch13_16.htm"
TITLE="Tie::Tee"
>Example 13.9</A
>.</P
><DIV
CLASS="example"
><H4
CLASS="example"
><A
CLASS="title"
NAME="ch13-36731"
>Example 13.9: Tie::Tee</A
></H4
><PRE
CLASS="programlisting"
>package Tie::Tee;

sub TIEHANDLE {
    my $class   = shift;
    my $handles = [@_];

    bless $handles, $class;
    return $handles;
}

sub PRINT {
    my $href = shift;
    my $handle;
    my $success = 0;

    foreach $handle (@$href) {
        $success += print $handle @_;
    }

    return $success == @$href;
}                                     

1;<A
CLASS="indexterm"
NAME="ch13-idx-1000006714-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006714-1"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006714-2"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006714-3"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-1000006714-4"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch13-pgfId-1000000533"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>tie</CODE
> function in <I
CLASS="filename"
>perlfunc </I
>(1); <I
CLASS="filename"
>perltie </I
>(1); the section on "Using Tied Variables" in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch13_15.htm"
TITLE="13.14. Overloading Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 13.14. Overloading Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="chapter"
HREF="ch14_01.htm"
TITLE="14. Database Access"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14. Database Access"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>13.14. Overloading Operators</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>14. Database Access</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
