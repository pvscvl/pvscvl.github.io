<HTML
><HEAD
>
<TITLE>Recipe 16.8. Controlling Input and Output of Another Program (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:43:51Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"><LINK
REL="prev"
HREF="ch16_08.htm"
TITLE="16.7. Reading STDERR from a Program"><LINK
REL="next"
HREF="ch16_10.htm"
TITLE="16.9. Controlling the Input, Output, and Error of Another Program"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_08.htm"
TITLE="16.7. Reading STDERR from a Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.7. Reading STDERR from a Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. Process Management and Communication"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_10.htm"
TITLE="16.9. Controlling the Input, Output, and Error of Another Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.9. Controlling the Input, Output, and Error of Another Program"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-17010"
>16.8. Controlling Input and Output of Another Program</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1394"
>Problem<A
CLASS="indexterm"
NAME="ch16-idx-1000006314-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006314-1"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006314-2"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006314-3"
></A
></A
></H3
><P
CLASS="para"
>You want to both write to and read from another program. The <CODE
CLASS="literal"
>open</CODE
> function lets you do one or the other, but not both.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1400"
>Solution</A
></H3
><P
CLASS="para"
>Use the standard IPC::Open2 module:</P
><PRE
CLASS="programlisting"
>use IPC::Open2;

open2(*README, *WRITEME, $program);
print WRITEME &quot;here's your input\n&quot;;
$output = &lt;README&gt;;
close(WRITEME);
close(README);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1420"
>Discussion</A
></H3
><P
CLASS="para"
>Wanting simultaneous read and write access to another program is very common, but surprisingly perilous. That's why <CODE
CLASS="literal"
>open</CODE
> doesn't let you say:</P
><PRE
CLASS="programlisting"
>open(DOUBLE_HANDLE, &quot;| program args |&quot;)     # WRONG</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-1000006320-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-1000006320-1"
></A
>The big problem here is buffering. Because you can't force the other program to unbuffer its output, you can't guarantee that your reads won't block. If you block trying to read at the same time the other process blocks waiting for you to send something, you've achieved the unholy state of deadlock. There you'll both stay, wedged, until someone kills your process or the machine reboots.</P
><P
CLASS="para"
>If you control the other process's buffering because you wrote the other program and know how it works, then <A
CLASS="indexterm"
NAME="ch16-idx-1000006341-0"
></A
>IPC::Open2 may be the module for you. The first two arguments to <CODE
CLASS="literal"
>open2</CODE
> that IPC::Open2 exports into your namespace are filehandles. Either pass references to typeglobs as in the Solution, or create your own IO::Handle objects and pass them in:</P
><PRE
CLASS="programlisting"
>use IPC::Open2;
use IO::Handle;

($reader, $writer) = (IO::Handle-&gt;new, IO::Handle-&gt;new);
open2($reader, $writer, $program);</PRE
><P
CLASS="para"
>If you pass in objects, you must have created them (with <CODE
CLASS="literal"
>IO::Handle-&gt;new</CODE
>, for instance) first. The <CODE
CLASS="literal"
>open2</CODE
> function will not create handles for you if you pass in variables that don't contain filehandles.</P
><P
CLASS="para"
>Alternatively, you can pass in arguments that look like <CODE
CLASS="literal"
>&quot;&lt;&amp;OTHERFILEHANDLE&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;&gt;&amp;OTHERFILEHANDLE&quot;</CODE
>, which specify existing filehandles for the child process to read from or write to. These filehandles don't have to be controlled by your program&nbsp;- they may be connected to other programs, files, or sockets.</P
><P
CLASS="para"
>You can specify the program either as a list (where the first element is the program name and the remaining elements are arguments to the program) or as a single string (which is passed to the shell as a command to start the program). If you also want control over the process's standard error, use the IPC::Open3 module and see the next recipe.</P
><P
CLASS="para"
>If an error occurs, <CODE
CLASS="literal"
>open2</CODE
> and <CODE
CLASS="literal"
>open3</CODE
> do not return. Instead, they <CODE
CLASS="literal"
>die</CODE
> with an error message that begins with <CODE
CLASS="literal"
>&quot;open2&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;open3&quot;</CODE
>. To test for failure, use the <CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="literal"
>BLOCK</CODE
> construct:</P
><PRE
CLASS="programlisting"
>eval {
    open2($readme, $writeme, @program_and_arguments);
};
if ($@) { 
    if ($@ =~ /^open2/) {
        warn &quot;open2 failed: $!\n$@\n&quot;;
        return;
    }
    die;            # reraise unforeseen exception
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch16-pgfId-1470"
>See Also</A
></H3
><P
CLASS="para"
>The documentation for the IPC::Open2 and IPC::Open3 modules; <A
CLASS="xref"
HREF="ch10_13.htm"
TITLE="Handling Exceptions"
>Recipe 10.12</A
>; the <A
CLASS="olink"
HREF="../prog/ch03_032.htm"
><CODE
CLASS="literal"
>eval</CODE
></A
> function in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <EM
CLASS="emphasis"
>perlfunc </EM
>(1); the <CODE
CLASS="literal"
>$@</CODE
> variable in the section on <A
CLASS="olink"
HREF="../prog/ch02_09.htm"
>"Global Special Variables"</A
> in <A
CLASS="olink"
HREF="../prog/ch02_01.htm"
>Chapter 2</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and in <EM
CLASS="emphasis"
>perlvar </EM
>(1)</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_08.htm"
TITLE="16.7. Reading STDERR from a Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.7. Reading STDERR from a Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch16_10.htm"
TITLE="16.9. Controlling the Input, Output, and Error of Another Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.9. Controlling the Input, Output, and Error of Another Program"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>16.7. Reading STDERR from a Program</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>16.9. Controlling the Input, Output, and Error of Another Program</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
