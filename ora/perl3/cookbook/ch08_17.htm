<HTML
><HEAD
>
<TITLE>Recipe 8.16. Reading Configuration Files (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:38:53Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"><LINK
REL="prev"
HREF="ch08_16.htm"
TITLE="8.15. Reading Fixed-Length Records"><LINK
REL="next"
HREF="ch08_18.htm"
TITLE="8.17. Testing a File for Trustworthiness"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_16.htm"
TITLE="8.15. Reading Fixed-Length Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.15. Reading Fixed-Length Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. File Contents"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_18.htm"
TITLE="8.17. Testing a File for Trustworthiness"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.17. Testing a File for Trustworthiness"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-34459"
>8.16. Reading Configuration Files</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1444"
>Problem<A
CLASS="indexterm"
NAME="ch08-idx-1000004706-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004706-1"
></A
></A
></H3
><P
CLASS="para"
>You want to allow the users of your program to change its behavior through configuration files.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1450"
>Solution</A
></H3
><P
CLASS="para"
>Either process a file in trivial VAR=VALUE format, setting a hash key-value pair for each setting:</P
><PRE
CLASS="programlisting"
>while (&lt;CONFIG&gt;) {
    chomp;                  # no newline
    s/#.*//;                # no comments
    s/^\s+//;               # no leading white
    s/\s+$//;               # no trailing white
    next unless length;     # anything left?
    my ($var, $value) = split(/\s*=\s*/, $_, 2);
    $User_Preferences{$var} = $value;
} </PRE
><P
CLASS="para"
>Or better yet, treat the config file as full Perl code:</P
><PRE
CLASS="programlisting"
>do &quot;$ENV{HOME}/.progrc&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1478"
>Discussion</A
></H3
><P
CLASS="para"
>The first solution lets you read in config files in a trivial format like this (comments and blank lines are allowed):</P
><PRE
CLASS="programlisting"
># set class C net
NETMASK = 255.255.255.0
MTU     = 296
    
DEVICE  = cua1
RATE    = 115200
MODE    = adaptive</PRE
><P
CLASS="para"
>After you're done, you can pull in a setting by something like <CODE
CLASS="literal"
>$User_Preferences{&quot;RATE&quot;}</CODE
> to find the value 115200. If you wanted the config file to directly set a variable in your program using that name, instead of assigning to the hash, do this:</P
><PRE
CLASS="programlisting"
>no strict 'refs';
$$var = $value;</PRE
><P
CLASS="para"
>and the <CODE
CLASS="literal"
>$RATE</CODE
> variable would contain 115200.</P
><P
CLASS="para"
>The second solution uses <CODE
CLASS="literal"
>do</CODE
><A
CLASS="indexterm"
NAME="ch08-idx-1000004714-0"
></A
> to pull in raw Perl code directly. When used with an expression instead of a block, <CODE
CLASS="literal"
>do</CODE
> interprets the expression as a filename. This is nearly identical to using <CODE
CLASS="literal"
>require</CODE
>, but without risk of taking a fatal exception. In the second format, the config file would look like:</P
><PRE
CLASS="programlisting"
># set class C net
$NETMASK = '255.255.255.0';
$MTU     = 0x128;
# Brent, please turn on the modem
$DEVICE  = 'cua1';
$RATE    = 115_200;
$MODE    = 'adaptive';</PRE
><P
CLASS="para"
>If you don't see the point of having extra punctuation and live code, consider this: you can have all of Perl at your disposal. You can now add arbitrary logic and tests to your simple assignments:</P
><PRE
CLASS="programlisting"
>if ($DEVICE =~ /1$/) {
    $RATE = 28_800;
} else {
    $RATE = 115_200;
} </PRE
><P
CLASS="para"
>Many programs support system and personal configuration files. If you want the user's choices to override the system ones, load the user file second:</P
><PRE
CLASS="programlisting"
>$APPDFLT = &quot;/usr/local/share/myprog&quot;;

do &quot;$APPDFLT/sysconfig.pl&quot;;
do &quot;$ENV{HOME}/.myprogrc&quot;;</PRE
><P
CLASS="para"
>If you want to ignore the system config file when the user has their own, test the return value of the <CODE
CLASS="literal"
>do</CODE
>.</P
><PRE
CLASS="programlisting"
>do &quot;$ENV{HOME}/.myprogrc&quot;;
    or
do &quot;$APPDFLT/sysconfig.pl&quot;</PRE
><P
CLASS="para"
>You might wonder what context those files will be executed under. They will be in the same package that <CODE
CLASS="literal"
>do</CODE
> itself was compiled into. Typically you'll direct users to set particular variables, which, being unqualified globals, will end up in the current package. If you'd prefer unqualified variables go into a particular package, do this:</P
><PRE
CLASS="programlisting"
>{ package Settings; do &quot;$ENV{HOME}/.myprogrc&quot; }<CODE
CLASS="literal"
></CODE
><A
CLASS="indexterm"
NAME="ch08-idx-1000004716-0"
></A
></PRE
><P
CLASS="para"
>As with a file read in using <CODE
CLASS="literal"
>require</CODE
> or <CODE
CLASS="literal"
>use</CODE
>, those read in using <CODE
CLASS="literal"
>do</CODE
> count as a separate and unrelated lexical scope. That means the configuration file can't access its caller's lexical (<CODE
CLASS="literal"
>my</CODE
>) variables, nor can the caller find any such variables that might have been set in the file. It also means that the user's code isn't held accountable to a pragma like <EM
CLASS="emphasis"
>use strict</EM
> or <EM
CLASS="emphasis"
>use integer</EM
> that may be in effect in the caller.</P
><P
CLASS="para"
>If you don't want clean partitioning of variable visibility, you can get the config file's code executed in your own lexical scope. If you have a <CODE
CLASS="literal"
>cat</CODE
> program or its technical equivalent handy, you could write yourself a hand-rolled <CODE
CLASS="literal"
>do</CODE
>:</P
><PRE
CLASS="programlisting"
>eval `cat $ENV{HOME}/.myprogrc`;</PRE
><P
CLASS="para"
>We've never actually seen anyone (except Larry) use that approach in production code.</P
><P
CLASS="para"
>For one thing, <CODE
CLASS="literal"
>do</CODE
> is a lot easier to type. Also, it respects the <CODE
CLASS="literal"
>@INC</CODE
> path, which is normally searched if a full path is not specified, but, unlike using a <CODE
CLASS="literal"
>require</CODE
>, no implicit error checking happens under <CODE
CLASS="literal"
>do</CODE
>. This means you don't have to wrap it in an <CODE
CLASS="literal"
>eval</CODE
> to catch exceptions that would otherwise cause your program to die, because <CODE
CLASS="literal"
>do</CODE
> already functions as an <CODE
CLASS="literal"
>eval</CODE
>.</P
><P
CLASS="para"
>You can still check for errors on your own if you'd like:</P
><PRE
CLASS="programlisting"
>$file = &quot;someprog.pl&quot;;
unless ($return = do $file) {
    warn &quot;couldn't parse $file: $@&quot;         if $@;
    warn &quot;couldn't do $file: $!&quot;            unless defined $return;
    warn &quot;couldn't run $file&quot;               unless $return;
}</PRE
><P
CLASS="para"
>This is much simpler for the programmer to source in code than it would be to invent and then parse a complicated, new syntax. It's also much easier on the user than forcing them to learn the syntax rules of yet another configuration file. Even better, you give the user access to a powerful algorithmic programming language.</P
><P
CLASS="para"
>One reasonable concern is security. How do you know that the file hasn't been tampered with by someone other than the user? The traditional approach here is to do nothing, trusting the directory and file permissions. Nine times out of ten, this is also the right approach. Most projects just aren't worth being that paranoid over. For those that are, see the next recipe.<A
CLASS="indexterm"
NAME="ch08-idx-1000004708-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-1000004708-1"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch08-pgfId-1584"
>See Also</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>eval</CODE
> and <CODE
CLASS="literal"
>require</CODE
> functions in <I
CLASS="filename"
>perlfunc </I
>(1) and in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>; <A
CLASS="xref"
HREF="ch08_18.htm"
TITLE="Testing a File for Trustworthiness"
>Recipe 8.17</A
>; <A
CLASS="xref"
HREF="ch10_13.htm"
TITLE="Handling Exceptions"
>Recipe 10.12</A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_16.htm"
TITLE="8.15. Reading Fixed-Length Records"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.15. Reading Fixed-Length Records"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch08_18.htm"
TITLE="8.17. Testing a File for Trustworthiness"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.17. Testing a File for Trustworthiness"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>8.15. Reading Fixed-Length Records</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>8.17. Testing a File for Trustworthiness</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
