<HTML
><HEAD
>
<TITLE>Recipe 18.2. Being an FTP Client (Perl Cookbook)</TITLE>
<META
NAME="DC.title"
CONTENT="Perl Cookbook"><META
NAME="DC.creator"
CONTENT="Tom Christiansen &amp; Nathan Torkington"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:44:59Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-243-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. Internet Services"><LINK
REL="prev"
HREF="ch18_02.htm"
TITLE="18.1. Simple DNS Lookups"><LINK
REL="next"
HREF="ch18_04.htm"
TITLE="18.3. Sending Mail"></HEAD
><BODY
BGCOLOR="#FFFFFF"><img alt="Book Home" border="0" src="gifs/smbanner.gif" usemap="#banner-map" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Perl Cookbook"><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map><div class="navbar"><p>
<TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_02.htm"
TITLE="18.1. Simple DNS Lookups"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1. Simple DNS Lookups"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. Internet Services"
></A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_04.htm"
TITLE="18.3. Sending Mail"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.3. Sending Mail"
BORDER="0"></A
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-chap18_being_0"
>18.2. Being an FTP Client</A
></H2
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-255"
>Problem</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch18-idx-1000004287-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004287-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004287-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004287-3"
></A
>You want to connect to an FTP server and get or put files. You might want to automate the one-time transfer of many files or automatically mirror an entire section of an FTP server, for example.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-261"
>Solution</A
></H3
><P
CLASS="para"
>Use the CPAN module Net::FTP:</P
><PRE
CLASS="programlisting"
>use Net::FTP;

$ftp = Net::FTP-&gt;new(&quot;ftp.host.com&quot;)    or die &quot;Can't connect: $@\n&quot;;
$ftp-&gt;login($username, $password)       or die &quot;Couldn't login\n&quot;;
$ftp-&gt;cwd($directory)                   or die "Couldn't change directory\n";
$ftp-&gt;get($filename)                    or die &quot;Couldn't get $filename\n";
$ftp-&gt;put($filename)                    or die &quot;Couldn't put $filename\n";</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-281"
>Discussion</A
></H3
><P
CLASS="para"
>Using the Net::FTP module is a three-part process: <EM
CLASS="emphasis"
>connect</EM
> to a server, identify and <EM
CLASS="emphasis"
>authenticate</EM
> yourself, and <EM
CLASS="emphasis"
>transfer</EM
> files. All interaction with the FTP server happens through method calls on a Net::FTP object. If an error occurs, methods return <CODE
CLASS="literal"
>undef</CODE
> in scalar context or an empty list in list context.</P
><P
CLASS="para"
>The connection is established with the <CODE
CLASS="literal"
>new</CODE
> constructor. If an error occurs, <CODE
CLASS="literal"
>$@</CODE
> is set to an error message and <CODE
CLASS="literal"
>new</CODE
> returns <CODE
CLASS="literal"
>undef</CODE
>. The first argument is the hostname of the FTP server and is optionally followed by named options:</P
><PRE
CLASS="programlisting"
>$ftp = Net::FTP-&gt;new(&quot;ftp.host.com&quot;,
                     Timeout =&gt; 30,
                     Debug   =&gt; 1)
    or die &quot;Can't connect: $@\n&quot;;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>Timeout</CODE
> option gives the number of seconds all operations wait before giving up. <CODE
CLASS="literal"
>Debug</CODE
> sets the debugging level (non-zero sends copies of all commands to STDERR). <CODE
CLASS="literal"
>Firewall</CODE
> takes a string as an argument, specifying the machine acting as an FTP proxy. <CODE
CLASS="literal"
>Port</CODE
> lets you specify an alternate port number (the default is 21, the standard port for FTP). Finally, if the <CODE
CLASS="literal"
>Passive</CODE
> option is set to true, all transfers are done passively (some firewalls and proxies require this). The <CODE
CLASS="literal"
>Firewall</CODE
> and <CODE
CLASS="literal"
>Passive</CODE
> options override the environment variables <CODE
CLASS="literal"
>FTP_FIREWALL</CODE
> and <CODE
CLASS="literal"
>FTP_PASSIVE</CODE
>.</P
><P
CLASS="para"
>Having connected, the next step is to authenticate. Normally, you'll want to call <CODE
CLASS="literal"
>login</CODE
> with up to three arguments: username, password, and account.</P
><PRE
CLASS="programlisting"
>$ftp-&gt;<CODE
CLASS="literal"
>login()</CODE
>
    or die &quot;Couldn't authenticate.\n&quot;;

$ftp-&gt;login($username)
    or die &quot;Still couldn't authenticate.\n&quot;;

$ftp-&gt;login($username, $password)
    or die &quot;Couldn't authenticate, even with explicit username
            and password.\n";

$ftp-&gt;login($username, $password, $account)
    or die &quot;No dice.  It hates me.\n&quot;;</PRE
><P
CLASS="para"
>If you call <CODE
CLASS="literal"
>login</CODE
> with no arguments, Net::FTP uses the Net::Netrc module to find settings for the host you've connected to. If none are found there, anonymous login is attempted (username <CODE
CLASS="literal"
>anonymous</CODE
>, password <CODE
CLASS="literal"
>username@hostname</CODE
>). If no password is given and the username <CODE
CLASS="literal"
>anonymous</CODE
> is used, the user's mail address is supplied as the password. The optional account argument is not used on most systems. If the authentication fails, <CODE
CLASS="literal"
>login</CODE
> returns <CODE
CLASS="literal"
>undef</CODE
>.</P
><P
CLASS="para"
>Once authenticated, the usual FTP commands are available as methods called on your Net::FTP object. The <CODE
CLASS="literal"
>get</CODE
> and <CODE
CLASS="literal"
>put</CODE
> methods fetch and send files. To send a file, use:</P
><PRE
CLASS="programlisting"
>$ftp-&gt;put($localfile, $remotefile)
    or die &quot;Can't send $localfile: $!\n&quot;;</PRE
><P
CLASS="para"
>If you omit the second argument, the remote file will have the same name as the local file. You can also send from a filehandle (in which case the remote filename must be given as the second argument):</P
><PRE
CLASS="programlisting"
>$ftp-&gt;put(*STDIN, $remotefile)
    or die &quot;Can't send from STDIN: $!\n&quot;;</PRE
><P
CLASS="para"
>If the transfer is interrupted, the remote file is not automatically deleted. The <CODE
CLASS="literal"
>put</CODE
> method returns the remote filename if it succeeded, or <CODE
CLASS="literal"
>undef</CODE
> if an error occurred.</P
><P
CLASS="para"
>To fetch a file, use the <CODE
CLASS="literal"
>get</CODE
> method, which returns the local filename, or <CODE
CLASS="literal"
>undef</CODE
> if there was an error:</P
><PRE
CLASS="programlisting"
>$ftp-&gt;get($remotefile, $localfile)
    or die &quot;Can't fetch $remotefile : $!\n&quot;;</PRE
><P
CLASS="para"
>You can also <CODE
CLASS="literal"
>get</CODE
> into a filehandle, in which case the filehandle is returned (or <CODE
CLASS="literal"
>undef</CODE
> if there was an error):</P
><PRE
CLASS="programlisting"
>$ftp-&gt;get($remotefile, *STDOUT)
    or die &quot;Can't fetch $remotefile: $!\n&quot;;</PRE
><P
CLASS="para"
>Pass <CODE
CLASS="literal"
>get</CODE
> an optional third argument, an offset into the remote file, to begin the transfer at that offset. Received bytes are appended to the local file.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>type</CODE
> method changes the file translation mode. Pass it a string (<CODE
CLASS="literal"
>&quot;A&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;I&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;E&quot;</CODE
>, or <CODE
CLASS="literal"
>&quot;L&quot;</CODE
>) and it will return the previous translation mode. The <CODE
CLASS="literal"
>ascii</CODE
>, <CODE
CLASS="literal"
>binary</CODE
>, <CODE
CLASS="literal"
>ebcdic</CODE
>, and <CODE
CLASS="literal"
>byte</CODE
> methods call <CODE
CLASS="literal"
>type</CODE
> with the appropriate string. If an error occurs (the FTP server does not do EBCDIC, for example), <CODE
CLASS="literal"
>type</CODE
> and its helper methods return <CODE
CLASS="literal"
>undef</CODE
>.</P
><P
CLASS="para"
>Use <CODE
CLASS="literal"
>cwd($remotedir)</CODE
> and <CODE
CLASS="literal"
>pwd</CODE
> to set and fetch the current remote directory. They both return true if successful, false otherwise. If you <CODE
CLASS="literal"
>cwd(&quot;..&quot;)</CODE
>, the <CODE
CLASS="literal"
>cdup</CODE
> method is called to change the directory to the parent of the current directory. Call <CODE
CLASS="literal"
>cwd</CODE
> without an argument to change to the root directory.</P
><PRE
CLASS="programlisting"
>$ftp-&gt;cwd(&quot;/pub/perl/CPAN/images/g-rated&quot;);
print &quot;I'm in the directory &quot;, $ftp-&gt;pwd(), &quot;\n&quot;;</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>mkdir($remotedir)</CODE
> and <CODE
CLASS="literal"
>rmdir($remotedir)</CODE
> make and delete directories on the remote machine. You have the built-in <CODE
CLASS="literal"
>mkdir</CODE
> and <CODE
CLASS="literal"
>rmdir</CODE
> functions to make and delete directories on the local machine. To create all directories up to the given directory, pass a true second argument to <CODE
CLASS="literal"
>mkdir</CODE
>. For instance, if you want to make <EM
CLASS="emphasis"
>/pub</EM
>, <EM
CLASS="emphasis"
>/pub/gnat</EM
>, and <EM
CLASS="emphasis"
>/pub/gnat/perl</EM
>, say:</P
><PRE
CLASS="programlisting"
>   $ftp-&gt;mkdir(&quot;/pub/gnat/perl&quot;, 1)
    or die &quot;Can't create /pub/gnat/perl recursively: $!\n&quot;;</PRE
><P
CLASS="para"
>If <CODE
CLASS="literal"
>mkdir</CODE
> succeeds, the full path to the newly created directory is returned. If it fails, <CODE
CLASS="literal"
>mkdir</CODE
> returns <CODE
CLASS="literal"
>undef</CODE
>.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>ls</CODE
> and <CODE
CLASS="literal"
>dir</CODE
> methods get a list of files in a remote directory. Traditionally, <CODE
CLASS="literal"
>dir</CODE
> gives you a more verbose listing than <CODE
CLASS="literal"
>ls</CODE
>, but neither has a standard format. Most Unix FTP servers return the output of <EM
CLASS="emphasis"
>ls</EM
> and <EM
CLASS="emphasis"
>ls -l</EM
> respectively, but you can't guarantee that behavior from every FTP server. These methods, in list context, return the list of lines returned by the server. In scalar context, they return a reference to an array.</P
><PRE
CLASS="programlisting"
>@lines = $ftp-&gt;ls(&quot;/pub/gnat/perl&quot;)
    or die &quot;Can't get a list of files in /pub/gnat/perl: $!&quot;;
$ref_to_lines = $ftp-&gt;dir(&quot;/pub/perl/CPAN/src/latest.tar.gz&quot;)
    or die &quot;Can't check status of latest.tar.gz: $!\n&quot;;</PRE
><P
CLASS="para"
>When you're done and want to close up gracefully, use the <CODE
CLASS="literal"
>quit</CODE
> method:</P
><PRE
CLASS="programlisting"
>$ftp-&gt;quit()    or warn &quot;Couldn't quit.  Oh well.\n&quot;;</PRE
><P
CLASS="para"
>Other methods rename, change ownership and permissions of remote files, check the size of the remote file, and so on. Read the Net::FTP documentation for details.</P
><P
CLASS="para"
>If you want to mirror files between machines, use the excellent <EM
CLASS="emphasis"
>mirror</EM
> program written in Perl by Lee McLoughlin. Look for it on the Web at <A
CLASS="systemitem.url"
HREF="../../../../../../sunsite.doc.ic.ac.uk/packages/mirror/."
>http://sunsite.doc.ic.ac.uk/packages/mirror/.</A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-389"
>See Also</A
></H3
><P
CLASS="para"
>Your system's <I
CLASS="filename"
>ftp </I
>(1) and <I
CLASS="filename"
>ftpd</I
> (8) manpages (if you have them); the documentation for the Net::FTP module from CPAN<A
CLASS="indexterm"
NAME="ch18-idx-1000004289-0"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004289-1"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004289-2"
></A
><A
CLASS="indexterm"
NAME="ch18-idx-1000004289-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><TABLE
WIDTH="684"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_02.htm"
TITLE="18.1. Simple DNS Lookups"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.1. Simple DNS Lookups"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="book"
HREF="index.htm"
TITLE="Perl Cookbook"
><IMG
SRC="../gifs/txthome.gif"
ALT="Perl Cookbook"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="sect1"
HREF="ch18_04.htm"
TITLE="18.3. Sending Mail"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.3. Sending Mail"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="228"
>18.1. Simple DNS Lookups</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="228"
><A
CLASS="index"
HREF="index/index.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="228"
>18.3. Sending Mail</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="684"
TITLE="footer"><FONT
SIZE="-1"
></DIV<!-- LIBRARY NAV BAR --> <img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p> <a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font> </p> <map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map> </BODY
></HTML
>
