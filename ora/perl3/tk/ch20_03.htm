<html><head><title>TclRobots (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch21_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">20.3. TclRobots</h2>

<p><a name="INDEX-3080" /><a name="INDEX-3081" /><a name="INDEX-3082" />TclRobots, written by Tom Poindexter, is a
test of programming prowess. The goal is to program a robot that
battles other robots and hopefully, survives to become the victor.
How well a robot performs depends mostly on the Robot Control Program
(RCP) you write. As in real life, there is randomness built into the
contest, so even the best RCP is occasionally defeated.
</p>

<p>The TclRobots arena is a square, 1,000 meters on each side. Robots,
identical other than their controlling RCPs, have drive mechanisms
that move them each in a given direction at a given velocity within
the arena, scanners for seeking out enemy robots, and cannons for
firing at the enemy. A contest involves two, three, or four robots,
each trying to outlast the others. In <a href="ch20_03.htm">Figure 20-4</a>,
two robot scanners have targeted enemies, <em class="filename">complex.tr
</em>has taken a severe hit, and a cannon shot is in
mid-flight.
</p>

<a name="mastperltk-CHP-20-FIG-4" /><div class="figure"><img src="figs/mptk.2004.gif" alt="Figure 20-4" width="481" height="386" /></div><h4 class="objtitle">Figure 20-4.  A TclRobots contest</h4>

<p><i class="command">tclrobots</i><a name="INDEX-3083" /> starts a robot instance by
<tt class="literal">exec</tt> ing a new <i class="command">wish</i>
interpreter,<a href="#FOOTNOTE-56">[56]</a> then uses <tt class="literal">send</tt> to customize it. First,
it transmits specially crafted subroutines that implement the RCP
command set (commands such as <tt class="literal">drive</tt>,
<tt class="literal">scan</tt>, and <tt class="literal">cannon</tt>). These
commands define the RCP application programming interface (API), and
they use <tt class="literal">send</tt> to invoke subroutines in
<i class="command">tclrobots</i>. Next, <i class="command">tclrobots</i>
sends the Tcl RCP source code to the robot and starts it running.
(There's actually a <em class="emphasis">lot</em> more detail behind
the scenes. Feel free to visit the <i class="command">tclrobots</i>
source code.)
</p><blockquote class="footnote"> <a name="FOOTNOTE-56" /><p> [56] Just like in the message passing
example, although this is Tom's idea, not mine.</p>
</blockquote>

<p><a name="INDEX-3084" /><a name="INDEX-3085" />Until
now, the only RCP programming language available was Tcl, but my
desire to write RCPs in Perl changed that, as we are about to see.
Several things are required before a Perl RCP is possible. First,
<i class="command">tclrobots</i> needs to distinguish between a Tcl and
Perl RCP. Since the convention of using the extension
<em class="emphasis">.tr</em>, for TclRobot, was already in place, I
selected .<em class="emphasis">ptr</em>, for PerlTclRobot. Thus,
<i class="command">tclrobots</i> checks for those extensions and
differentially loads <i class="command">perl</i> or
<i class="command">wish</i>. Second, incoming Tcl messages must be
translated into proper Perl actions, and results returned in Tcl
format. Lastly, the RCP API needs to be re-implemented in Perl so it
sends Tcl commands and returns Perl results.
</p>

<a name="mastperltk-CHP-20-SECT-3.1" /><div class="sect2">
<h3 class="sect2">20.3.1. TclRobots.pm, the Perl Interface to TclRobots</h3>

<p><a name="INDEX-3086" />This module implements a thin API so you
can write RCPs in your favorite language&#x2014;Perl&#x2014;and do
battle with all the existing Tcl RCPs. It's one of the
strangest modules around, mixing Exporter subroutines; Perl, Tk, and
Tcl code; and inter-language, bidirectional communications. You never
knowingly <i class="command">use</i> this module; rather, it's
included when <i class="command">tclrobots</i> runs an instance of
<tt class="literal">perl</tt> <tt class="literal">-MTclRobots</tt>, at which time
this module is loaded and begins execution on behalf of your RCP. It
creates the main window of the required dimensions and at the proper
location on the display, and adds all the widgets, text, and images.
When instructed by <i class="command">tclrobots</i>, the module then
loads your Perl RCP via <tt class="literal">require</tt>, so be sure the
code returns a true value. From that point on, incoming TclRobots
messages are dispatched to Perl emulation handlers, and Perl RCP
commands are converted to Tcl syntax and sent to
<i class="command">tclrobots.</i> The communication is handled
transparently via <tt class="literal">send</tt> and
<tt class="literal">Tk::Receive</tt>.
</p>

<a name="mastperltk-CHP-20-SECT-3.1.1" /><div class="sect3">
<h3 class="sect3">20.3.1.1. Tk::Receive handles tclrobots to Perl communications</h3>

<p><a name="INDEX-3087" />To figure out the TclRobots protocol, the
first version of <tt class="literal">Tk::Receive</tt> simply dumped
messages to a file for study. A little experimentation determined
what <i class="command">tclrobots</i> sent and what it expected to
receive. Some messages were easy to dechiper, like <tt class="literal">expr
1+1</tt>, which obviously must return 2. Other messages create
and modify the Tk interface or start and stop the RCP. The final
version of Tk::Receive follows; note that all global symbols are
prefixed with an underscore, indicating they are private to
<em class="emphasis">TclRobots.pm</em>. The <tt class="literal">CASE</tt>
statement simply uses several regular expressions to pattern match
the incoming Tcl commands and call a Perl handler.
</p>

<blockquote><pre class="code">sub Tk::Receive {

    # Accept Tcl strings from tclrobots and invoke 
    # Perl/Tk emulation code.

    my($mw) = shift;         # main window
    $_ = shift;              # Tcl command

    return 2 if /expr 1\+1/;
    return if /(Knuth|^rename)/m;
    
  CASE:
    {
        /setup window/m    and do {_setup_window_;        last CASE};
        /create|configure/ and do {_customize_window_ $_; last CASE};
        /set _start_ 0/    and do {_load_rcp_;            last CASE};
        /set _start_ 1/    and do {_start_rcp_;           last CASE};
        /^proc after/      and do {_disable_rcp_;         last CASE};
        /\.d\.l insert/    and do {_insult_rcp_ $_;       last CASE};
        /^_a_\d+ 0 _e_\d+/ and do {_destroy_rcp_;         last CASE};
        /^set/             and do {_set_variables_ $_;    last CASE};
        print STDERR "UNHANDLED cmd=$_!\n";
    } # casend

} # end Tk::Receive</pre></blockquote>

<p>As an example, <tt class="literal">_setup_window_</tt> creates the small
RCP MainWindow shown in <a href="ch20_03.htm">Figure 20-4</a>, containing a
tiny Canvas and two Labels. These display the RCP's icon,
filename, and damage percentage, respectively. Below these widgets is
a scrolled Listbox for debug and status information. (The following
section describes when and how the MainWindow,
<tt class="literal">$_mw_</tt>, is created.)
</p>

<blockquote><pre class="code">sub _setup_window_ {

    # Setup the RCP's debug and damage window.

    my $f = $_mw_-&gt;Frame; 
    $f-&gt;pack(qw/-side top -fill x -ipady 5/);
    $_fc_ = $f-&gt;Canvas(qw/-width 20 -height 16/);
    $_fl_ = $f-&gt;Label(qw/-relief sunken -width 30  -text/ =&gt;
              "(loading robot code..)");
    $_fs_ = $f-&gt;Label(qw/-relief sunken -width 5   -text/ =&gt; "0%");
    $_fc_-&gt;pack(qw/-side left/);
    $_fs_-&gt;pack(qw/-side right/);
    $_fl_-&gt;pack(qw/-side left -expand 1 -fill both/);

    $_dl_ = $_mw_-&gt;Scrolled('Listbox', qw/-relief sunken -scrollbars se/);
    $_dl_-&gt;pack(qw/-side left  -expand 1 -fill both/);
    $_mw_-&gt;minsize(100, 70);
    $_mw_-&gt;update;

}</pre></blockquote>

</div>

<a name="mastperltk-CHP-20-SECT-3.1.2" /><div class="sect3">
<h3 class="sect3">20.3.1.2. The RCP API handles Perl to tclrobots communications</h3>

<p><em class="filename">TclRobots.pm</em><a name="INDEX-3088" /> is a plain old module that exports
subroutines. Specifically, it exports the RCP commands that control
the robot. Unlike other Perl modules, however, once loaded, this one
begins executing, creates a MainWindow, enters the Tk event loop, and
never returns. I've distilled the salient portions:
</p>

<blockquote><pre class="code">$TclRobots::VERSION = '2.1';

package TclRobots;

# This module implements a thin API that interfaces ...

use Exporter;
@ISA = qw/Exporter/;
@EXPORT = qw/after alert cannon damage dputs drive dsp
    heat loc_x loc_y scanner speed team_declare team_get
    team_send tick update/;

use Tk;
use Tk::widgets qw/Dialog/;

use vars qw/$_mw_/;
use strict;

$ENV{'HOME'} = '/tmp';
$_mw_ = MainWindow-&gt;new;
MainLoop;

# Robot Control Program commands ... 

sub drive {
}
sub scan {
}
sub cannon {
}</pre></blockquote>

<p>In Tcl, the RCP command to move a robot is <tt class="literal">drive</tt>:</p>

<blockquote><pre class="code">drive $heading $velocity</pre></blockquote>

<p>The heading is given in degrees, 0 to 359, with 0 degrees due east,
rotating counter-clockwise. The velocity is a percentage, from 0 to
100. Here's the Perl <tt class="literal">drive</tt> implementation;
all RCP subroutines follow this format:
</p>

<blockquote><pre class="code">sub drive {
    my($deg, $speed) = @_;
    $_mw_-&gt;after(100);
    $_mw_-&gt;update;
    my $val = Tk::catch {$_mw_-&gt;send($_tclrobots_,
                 "do_drive $_robot_ $deg $speed")};
    $_mw_-&gt;waitVariable(\$_resume_) if $_debug and $_step_;
    &amp;_ping_check_;
    $_mw_-&gt;update;
    return $val;
}</pre></blockquote>

<p>The subroutine first delays for 100 milliseconds (reflecting the fact
that hardware commands take a finite amount of time), invokes
<i class="command">tclrobots</i>' <tt class="literal">do_drive</tt>
subroutine, and returns the result. For debugging purposes, the RCP
can be single-stepped, which is what the
<tt class="literal">waitVariable</tt> statement is for. An RCP can also
define a callback alerting it when an enemy robot scans it;
<tt class="literal">_ping_check_</tt> invokes any such callback.
</p>

</div>
</div>
<a name="mastperltk-CHP-20-SECT-3.2" /><div class="sect2">
<h3 class="sect2">20.3.2. Robot Control Programs</h3>

<p><a name="INDEX-3089" />"Do
I flee when scanned, or do I turn and attack? How do I know where I
am? I've kept a list of enemy robots and their locations, which
do I shoot at first? How do I keep from running into an arena wall?
How do I steer? How do I get from point A to point B? How do I
compensate for my motion when computing a firing solution?" We
certainly won't answer these questions, but just in case you
think writing an RCP is easy, think again!
</p>

<p><a name="INDEX-3090" />A good way to start writing your own
RCP is to examine the samples, and the tournament entries at
<a href="../../../../../../www.neosoft.com/tcl/ftparchive/sorted/misc/TclRobots/">http://www.neosoft.com/tcl/ftparchive/sorted/misc/TclRobots/</a>.
Or search the Web; I've found Computer Science courses that
teach RCP programming! And, of course, read the manpage.
</p>

<p>Let's take a quick look at the Perl version of a sample RCP,
<em class="filename">charger.ptr</em>. It's one of the shortest RCPs
I've seen, yet it's surprisingly effective. Its strategy
is simple: scan with a wide resolution until an enemy robot is found,
charge the opponent, pinpoint the target with a narrow scan, and fire
the cannon. Notice the code is strictly Perl, no Tcl or Tk required.
The <tt class="literal">$status</tt> callback, executed every 10 seconds,
demonstrates how to emulate <tt class="literal">repeat</tt> if it's
not part of the language. It posts the robot's current position
and the hardware tick count in the debug window. The
<tt class="literal">scanner</tt> command expects the direction and
resolution of the scan and returns the distance to the first target
found. The <tt class="literal">cannon</tt> command fires a shell in the
specified direction for the specified distance.
</p>

<blockquote><pre class="code">use vars qw/$dir $closest $limit $nothing $rng $start $status/;
use strict;

$dir = 90;
$nothing = 0;
$closest = 0;

$status = sub {
    dputs "tick count=", tick, "location=(", loc_x, ",", loc_y, ")";
    after 10_000 =&gt; \&amp;$status;
};
after 0 =&gt; \&amp;$status;           # Tcl idiom for repeat( )

while (1) {
    $rng = scanner $dir, 10;    # look for an opponent
    if ($rng &gt; 0 and $rng &lt; 700) { # if found and in range
        $start  = ($dir+20)%360;   # begin narrow scan
        for ($limit = 1; $limit &lt;= 40; $limit++) {
            $dir = ($start - $limit + 360) % 360;
            $rng = scanner $dir, 1;
            if ($rng &gt; 0 and $rng &lt; 700) {
                $nothing = 0;           # charge!  fire a shell, and backup
                cannon $dir, $rng;      # scan so not to miss a moving target
                drive $dir, 70;
                $limit -= 4;
            }
        }
    } else {
        $nothing++;
        $closest = $dir if $rng &gt; 700;
    }

    drive 0, 0;

    if ($nothing &gt;= 30) {  # check for nothing found in reasonable time
        $nothing = 0;
        drive $closest, 100;
        after 10000 =&gt; sub {drive 0, 0};
    }
    $dir = ($dir - 20 + 360) % 360;
}

1;</pre></blockquote>

<p>Unsurprisingly, trigonometry plays an important part in any
nontrivial RCP. Here are two formulas I've found useful. The
first computes the distance between two points:
</p>

<blockquote><pre class="code">[expr hypot( ($x-$x0),($y-$y0) )]</pre></blockquote>

<p>You might use this to check if the robot has reached a particular
coordinate or to calculate the range to a target. The second equation
computes a heading between two points:
</p>

<blockquote><pre class="code">[expr (round($R2D * atan2(($y-$y0),($x-$x0))) + 360) % 360]</pre></blockquote>

<p>This is useful for steering the robot. The variable
<tt class="literal">$R2D</tt> converts radians to degrees and is given by:
</p>

<blockquote class="simplelist"><p><tt class="literal">set R2D [expr 180.0 / <img src="figs/U03C0.gif" alt="Figure 20.3.2" />]</tt></p></blockquote>

<p>Of course, by now, you are fully capable of computing <img src="figs/U03C0.gif" alt="Figure 20.3.2" /> and
translating these simple Tcl statements to Perl.
</p>

<p>Turn to <a href="appc_01.htm">Appendix C, "Complete Program Listings"</a> for a listing of
<i class="command">complex.ptr</i>, a sophisticated RCP written in Perl.
This RCP is completely state driven and uses clock ticks to schedule
internal events. It moves in a path described by an
<em class="replaceable"><tt>n</tt></em>-sided polygon that approximates a
circle. The direction of movement is randomly chosen during preset,
eliminating "wall" code (although the RCP may perform a
"crazy Ivan" if it cannot find an enemy). The RCP also
attempts to move as fast as possible, thus tracks its cooling rate to
coordinate turns, eliminating "flee" code. There is also
some watchdog code that periodically checks the RCP's health.
Finally, the robot recognizes team members and targets only real
enemies.<a name="INDEX-3091" /><a name="INDEX-3092" /><a name="INDEX-3093" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch21_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">20.2. Computing  with Parallel Message Passing</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">21. C Widget Internals</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>