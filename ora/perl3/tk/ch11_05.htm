<html><head><title>Toplevel Methods (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch11_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">11.5. Toplevel Methods</h2>

<p>The Toplevel widget methods are listed and explained in the following
sections. It is important to note that all of these methods apply to
a MainWindow as well; a MainWindow is just a specialized Toplevel
widget. Also keep in mind that a lot of these methods were designed
originally for use with a Unix windowing environment, and quite a few
of them will state "No effect in Win32 system." Many of
these functions serve no useful purpose to the typical ordinary
Perl/Tk application, but we document them here for thoroughness.
</p>

<p>Several of the methods here alter <em class="emphasis">window manager
properties</em>, which often look like WM_PROPERTY_THING. These
properties are also traditionally associated with the X Window system
on Unix, but some still apply in Win32 systems. If a specific method
doesn't say anything about which system it applies to, it will
apply to both. If it applies only to one or the other (or only
half-works in one system), this will be mentioned as well.
</p>

<a name="mastperltk-CHP-11-SECT-5.1" /><div class="sect2">
<h3 class="sect2">11.5.1. Sizing a Toplevel</h3>

<p>You can use the <tt class="literal">geometry</tt> method to define or
retrieve a geometry string. A <em class="emphasis">geometry string</em>
determines the size and placement of a window on the screen. The
geometry string is a concept that originated on Unix systems and is a
bit cryptic at first glance. Here is a regular expression that
describes a complete geometry string:
</p>

<blockquote><pre class="code">^=?(\d+x\d+)?([+-]\d+[+-]\d+)?$</pre></blockquote>

<p>The equals sign can be omitted completely (and usually is). The first
portion (<tt class="literal">\d+x\d+</tt>) is the width and height (in that
order), separated by an <tt class="literal">x</tt>. Both width and height
are specified in pixels by default and in grid units if the window is
gridded with the <tt class="literal">grid</tt> method
(described later). The last portion of the geometry string represents
the x and y coordinates of the location in which the Toplevel should
be placed on the screen. Both x and y are always in pixels. Here are
a few examples of what some geometry strings look like:
</p>

<blockquote><pre class="code">300x300       # width and height both = 300
300x450       # width = 300, height = 450
300x450+0+0   # width = 300, height = 450 placed in upper left corner
300x450-0-0   # width = 300, height = 450 placed in lower right corner
300x450+10+10 # width = 300, height = 450 
              # placed 10 pixels out from upper left corner
+0+0          # window is 'natural' size, placed in upper left corner</pre></blockquote>

<p>When <tt class="literal">geometry</tt> is called with no arguments, the
current geometry string is returned. You can also specify a new
geometry by using <tt class="literal">geometry</tt> with the new geometry
string as the argument. To set the size and position of the window
immediately, you would do this:
</p>

<blockquote><pre class="code">$mw = MainWindow-&gt;new( );
$mw-&gt;geometry("300x450+0+0");</pre></blockquote>

<p>If you specify only the width and height, the placement of the window
is determined by the window manager. If you specify only the
positioning, then the size of the window will be determined by the
widgets placed within the Toplevel, but the window will be placed at
those x and y coordinates.
</p>

<p>You can force the window back to its natural size by calling
<tt class="literal">geometry</tt> with an empty geometry string:
</p>

<blockquote><pre class="code">$toplevel-&gt;geometry("");</pre></blockquote>

</div>
<a name="mastperltk-CHP-11-SECT-5.2" /><div class="sect2">
<h3 class="sect2">11.5.2. Maximum Size</h3>

<p>You can use <tt class="literal">maxsize</tt> to restrict the largest size
of the window<em class="emphasis">.</em> It takes two integers as
arguments, as follows:
</p>

<blockquote><pre class="code">$toplevel-&gt;maxsize(300,300);</pre></blockquote>

<p>If you call <tt class="literal">maxsize</tt> without
any arguments, you get an empty string or a list with two items in it
representing the current values. Calling <tt class="literal">maxsize</tt>
with two empty strings cancels the limitation.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.3" /><div class="sect2">
<h3 class="sect2">11.5.3. Minimum Size</h3>

<p>You can also restrict the smallest size of the window by using
<tt class="literal">minsize</tt>. The window will always be at least the
size specified:
</p>

<blockquote><pre class="code">$toplevel-&gt;minsize(100,100);</pre></blockquote>

<p>Calling <tt class="literal">minsize</tt> without
arguments returns an empty string or a list containing the width and
height, respectively. Calling <tt class="literal">minsize</tt> with two
empty strings eliminates the minimum size restriction.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.4" /><div class="sect2">
<h3 class="sect2">11.5.4. Limiting Resizing</h3>

<p>You can control whether a window can be resized in width and/or
height by using <tt class="literal">resizable</tt>:
</p>

<blockquote><pre class="code">$toplevel-&gt;resizable(1, 0);
($canwidth, $canheight) = $toplevel-&gt;resizable( );</pre></blockquote>

<p>Specifying 1 means it is resizable, and 0 means it is nonresizable in
the specified direction. If you don't specify any arguments,
<tt class="literal">resizable</tt> returns a list with two items. The first
item is a 1 or 0 and indicates whether the width is resizable. The
second item is a 1 or 0 and indicates whether the height is
resizable. By default, a window is resizable in both directions.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.5" /><div class="sect2">
<h3 class="sect2">11.5.5. Using a Size Aspect</h3>

<p>You can use the <tt class="literal">aspect</tt> method to force the window
to stay a certain width and height:
</p>

<blockquote><pre class="code">$toplevel-&gt;aspect( <em class="replaceable"><tt>[ minN, minD, maxN, maxD ]</tt></em>);</pre></blockquote>

<p>In this example, the <em class="replaceable"><tt>N</tt></em> in
<em class="replaceable"><tt>minN</em> and <em class="replaceable">maxN</tt></em>
stands for "numerator" and the
<em class="replaceable"><tt>D</em> in <em class="replaceable">minD</tt></em> and
<em class="replaceable"><tt>maxD</tt></em> stands for "denominator."
</p>

<p>The <tt class="literal">aspect</tt> method does some very subtle things,
and you'll probably never use it. If you do, play around with
different values (starting with the example that follows) to get the
effect you want.
</p>

<p>When you use the <tt class="literal">aspect</tt> method with no arguments,
it returns either an empty string (if there are no constraints to the
aspect of the window) or an array containing four elements:
</p>

<blockquote><pre class="code">($minN, $minD, $maxN, $maxD) = $toplevel-&gt;aspect;</pre></blockquote>

<p>Using these values, you can see how <tt class="literal">aspect</tt>
controls the window:
</p>

<blockquote><pre class="code">($minN/$minD) &lt; width/height &lt; ($maxN/$maxD)</pre></blockquote>

<p>You can also send four empty strings to unset the aspect restrictions
on the window. Try using
<tt class="literal">$toplevel-&gt;aspect(1,2,3,1)</tt>; the effect is
subtle.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.6" /><div class="sect2">
<h3 class="sect2">11.5.6. Setting the Title</h3>

<p>To change the text across the top of the window, use the
<tt class="literal">title</tt> method:
</p>

<blockquote><pre class="code">$toplevel-&gt;title("This will be the title");</pre></blockquote>

<p>Pass a string in with <tt class="literal">title</tt> and the new title will
appear immediately in the window, assuming the window is currently
visible. If you don't pass an argument with
<tt class="literal">title</tt>, the current title string is returned. For
the X Window System, the default title of a window is the name used
to run the program, and the first character of the name is uppercase.
For Microsoft Windows, the title always starts out as Toplevel.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.7" /><div class="sect2">
<h3 class="sect2">11.5.7. Showing the Toplevel</h3>

<p>The <tt class="literal">deiconify</tt> method causes the Toplevel to be
displayed noniconified or deiconifies it immediately if the window
has already been displayed once. If the window has been withdrawn, a
<tt class="literal">$toplevel-&gt;raise( )</tt> must also be done to
display the window correctly.
</p>

<p>If you call it with no arguments, the <tt class="literal">raise</tt> method
brings the Toplevel to the front of all the other Toplevel windows in
the application:
</p>

<blockquote><pre class="code">$toplevel-&gt;raise( );</pre></blockquote>

<p>You can also put the Toplevel in front of another Toplevel:</p>

<blockquote><pre class="code">$toplevel-&gt;raise($other_toplevel);</pre></blockquote>

<p>It is sometimes necessary to use both <tt class="literal">deiconify</tt>
and <tt class="literal">raise</tt> to get the window to show up on the
screen.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.8" /><div class="sect2">
<h3 class="sect2">11.5.8. Withdrawing the Toplevel</h3>

<p>When you create a window, it is a good idea to make it invisible
while you fill it with widgets. You can do so by using the
<tt class="literal">withdraw</tt> method:
</p>

<blockquote><pre class="code">$toplevel-&gt;withdraw( );</pre></blockquote>

<p>If the window is already visible, <tt class="literal">withdraw</tt> will
make the window manager forget about the window until it has been
deiconified.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.9" /><div class="sect2">
<h3 class="sect2">11.5.9. Iconifying the Toplevel</h3>

<p>The <tt class="literal">iconify</tt> method forces the Toplevel into
iconified form:
</p>

<blockquote><pre class="code">$toplevel-&gt;iconify( );</pre></blockquote>

<p>Iconifying is not the same as withdrawing the window. Withdrawing the
window will not show an icon on the desktop. Also, note that window
managers are free to decide what to do in the iconified state. Some
window managers (such as Microsoft Windows or KDE) don't show
icons but just mark the windows in the task bar differently.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.10" /><div class="sect2">
<h3 class="sect2">11.5.10. Specifying the Icon Bitmap</h3>

<p>When you iconify your application under the X Window System, it is
represented on the screen with a bitmap. You use the
<tt class="literal">iconbitmap</tt> method to specify this bitmap:
</p>

<blockquote><pre class="code">$toplevel-&gt;iconbitmap( );
$toplevel-&gt;iconbitmap("bitmap");</pre></blockquote>

<p>It takes a bitmap in the same form as the <tt class="literal">-bitmap</tt>
option supported by the Button widget (see <a href="ch04_01.htm">Chapter 4, "
Button, Checkbutton, and Radiobutton Widgets"</a>). Calling <tt class="literal">iconbitmap</tt> with
no arguments returns the current bitmap or an empty string. Calling
<tt class="literal">iconbitmap</tt> with an empty
string removes the current bitmap.
</p>

<p>On Win32 systems, the application is kept in the Start taskbar with
an unchangeable Tk icon and the name of the application. Using the
<tt class="literal">iconbitmap</tt> method on a Win32 system does nothing.
</p>

<p>In recent versions of Perl/Tk, the <tt class="literal">Icon</tt> method
should be used instead. The <tt class="literal">Icon</tt> method works with
both Unix and Win32 and allows you to specify an image instead of a
bitmap, if you prefer.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.11" /><div class="sect2">
<h3 class="sect2">11.5.11. Specifying the Icon Mask</h3>

<p>A mask for the icon bitmap can be specified by using the
<tt class="literal">iconmask</tt> method (remember, this will only work
with X Window Systems). It also takes a bitmap specified from a file
or a default bitmap name (see the <tt class="literal">-bitmap</tt>
documentation in <a href="ch04_01.htm">Figure 4-1</a>). Where the bitmap mask
has zeros, no part of the normal icon bitmap will be displayed. Where
the mask has ones, normal icon bitmaps will be displayed.
</p>

<p>Calling <tt class="literal">iconmask</tt> with no arguments returns the
current bitmap mask or an empty string if no bitmap is being used.
Calling <tt class="literal">iconmask</tt> with an empty string unsets the
mask:
</p>

<blockquote><pre class="code">$currentmask = $toplevel-&gt;iconmask();  # get the mask
$toplevel-&gt;iconmask("bitmapname");     # set the mask
$toplevel-&gt;iconmask("");               # unset the mask</pre></blockquote>

</div>
<a name="mastperltk-CHP-11-SECT-5.12" /><div class="sect2">
<h3 class="sect2">11.5.12. Setting the Name of the Icon</h3>

<p>The <tt class="literal">iconname</tt> method sets or returns the current
text associated with the icon that is displayed when the application
is iconified. You can pass in a new string or an empty string:
</p>

<blockquote><pre class="code">$toplevel-&gt;iconname("newname");
$current_name = $toplevel-&gt;iconname();</pre></blockquote>

<p>If you don't specify an argument at all,
<tt class="literal">iconname</tt> returns the current icon name or an empty
string. You can query and set the icon name on a Win32 system, but it
doesn't do anything. This method is used on the X Window System
only.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.13" /><div class="sect2">
<h3 class="sect2">11.5.13. Setting the Icon Position</h3>

<p>The <tt class="literal">iconposition</tt> method suggests to the X Window
System manager where the icon should be placed on the desktop when
the application is iconified:
</p>

<blockquote><pre class="code">($x, $y) = $toplevel-&gt;iconposition();
$toplevel-&gt;iconposition($x, $y);</pre></blockquote>

<p>If x and y aren't specified, a list is returned containing only
two items: the current x and y coordinates. If you call
<tt class="literal">iconposition</tt> with two empty strings (one for each
x and y), the suggestion to the window manager is canceled.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.14" /><div class="sect2">
<h3 class="sect2">11.5.14. Using a Window Instead of an Icon</h3>

<p>Some systems (not including Win32) support the idea of using a widget
(or window) instead of a bitmap for an icon. Specify the widget by
using the <tt class="literal">iconwindow</tt> method. To find out what the
current widget is, call <tt class="literal">iconwindow</tt> with no arguments (an empty string is returned if there is
no associated <tt class="literal">$widget</tt>). You can specify an empty
string instead of <tt class="literal">$widget</tt> to cancel by using a
widget for the icon:
</p>

<blockquote><pre class="code">$currentwindow = $toplevel-&gt;iconwindow(); # get
$toplevel-&gt;iconwindow($window);           # set
$toplevel-&gt;iconwindow("");                # unset </pre></blockquote>

</div>
<a name="mastperltk-CHP-11-SECT-5.15" /><div class="sect2">
<h3 class="sect2">11.5.15. Determining the State</h3>

<p>The <tt class="literal">state</tt> method returns one of three strings:
<tt class="literal">"normal"</tt>, <tt class="literal">"iconic"</tt>, or
<tt class="literal">"withdrawn"</tt>.
</p>

<blockquote><pre class="code">$state = $toplevel-&gt;state();</pre></blockquote>

<p>The string indicates the state of the window when
<tt class="literal">state</tt> is called.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.16" /><div class="sect2">
<h3 class="sect2">11.5.16. Assigning a Client Name</h3>

<p>Every graphical program has a WM_CLIENT_MACHINE window property,
which should be the hostname of the machine the program is executing
on. This property can be changed using the <tt class="literal">client</tt>
method, as follows:
</p>

<blockquote><pre class="code">$mw-&gt;client (<em class="replaceable"><tt>new_client_name</tt></em>);</pre></blockquote>

<p>If <em class="replaceable"><tt>new_client_name</tt></em> is omitted, the current
name is returned. Passing <tt class="literal">undef</tt> to the
<tt class="literal">client</tt> method resets the WM_CLIENT_MACHINE
property to its original value.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.17" /><div class="sect2">
<h3 class="sect2">11.5.17. Window Properties</h3>

<p>The <tt class="literal">protocol</tt> method controls the following window
properties: WM_DELETE_WINDOW, WM_SAVE_YOURSELF, and WM_TAKE_FOCUS.
The callback (if any) associated with each property will be invoked
when the window manager recognizes the event associated with the
property:
</p>

<blockquote><pre class="code">$toplevel-&gt;protocol ( [ <em class="replaceable"><tt>property_name</em>] [, <em class="replaceable">callback</tt></em> ] );</pre></blockquote>

<p>The WM_DELETE_WINDOW property callback is invoked when the window has
been deleted by the window manager. By default, there is a callback
assigned by Perl/Tk that destroys the window. If you assign a new
callback, your callback will be invoked instead of the default
callback. If you need to save data associated with that window, do so
in the callback, then invoke
<tt class="literal">$toplevel-&gt;destroy()</tt> to mimic the correct
behavior afterward.
</p>

<p>The other two properties, WM_SAVE_YOURSELF and WM_TAKE_FOCUS, are
used much less commonly. For instance, WM_TAKE_FOCUS is used in Unix
systems but not in Win32. The presence of these properties is
dependent on the window system you are running. If your application
will be running on multiple systems, don't expect these
properties to always be available. To find out if they are available,
assign each one a callback that does a <tt class="literal">print</tt>, then
run the application to see if the <tt class="literal">print</tt> is ever
invoked.
</p>

<p>If you leave out the callback when you use
<tt class="literal">protocol</tt>, the current callback assigned to that
property will be returned (or an empty string, if there isn't a
current callback assigned). You can remove the callback by sending an
empty string instead of the callback. If neither argument is
specified, the method returns a list of all properties that have
callbacks assigned to them.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.18" /><div class="sect2">
<h3 class="sect2">11.5.18. The Colormap Property</h3>

<p>The <tt class="literal">colormapwindows</tt> method
affects the WM_COLORMAP_WINDOWS property. This property is used to
talk to the window manager about windows that have private colormaps.
Using <tt class="literal">colormapwindows</tt> with no arguments returns a
list of windows. The list contains windows (in order of priority)
that have different colormaps than their parents:
</p>

<blockquote><pre class="code">@list = $toplevel-&gt;colormapwindows( );</pre></blockquote>

<p>You can pass a list of windows to <tt class="literal">colormapwindows</tt>
as well:
</p>

<blockquote><pre class="code">$toplevel-&gt;colormapwindows(@list);</pre></blockquote>

<p>If you don't use this function at all, Perl/Tk will take care
of everything for you, although the order of the windows might be
different.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.19" /><div class="sect2">
<h3 class="sect2">11.5.19. The Command Property</h3>

<p>The <tt class="literal">command</tt> method (not to be
confused with the <tt class="literal">-command</tt> option used with most
of the widgets) controls the WM_COMMAND property. When used with no
arguments, <tt class="literal">command</tt> returns a list reference:
</p>

<blockquote><pre class="code">$listref = $toplevel-&gt;command();</pre></blockquote>

<p>The list holds the words of the command used to start the
application. Use this bit of code to determine what your application
command was (which is sometimes nothing):
</p>

<blockquote><pre class="code">$listptr = $mw-&gt;command();
foreach (@$listptr) {
  print "<em class="replaceable"><tt>$_</tt></em>\n";
}</pre></blockquote>

<p>You can unset the WM_COMMAND property by sending an empty string:</p>

<blockquote><pre class="code">$toplevel-&gt;command("");</pre></blockquote>

</div>
<a name="mastperltk-CHP-11-SECT-5.20" /><div class="sect2">
<h3 class="sect2">11.5.20. The Focus Model</h3>

<p>The <tt class="literal">focusmodel</tt> method controls whether or not the
Toplevel widget will give up the keyboard focus when another
application or window should have it:
</p>

<blockquote><pre class="code">$toplevel-&gt;focusmodel( [ "active" | "passive" ] );</pre></blockquote>

<p>The default is <tt class="literal">"passive"</tt>, meaning it will give up
the keyboard focus. The changes present in your application depend
completely on the type of window manager you use. Our testing
revealed no changes under Win32 or the X Window System.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.21" /><div class="sect2">
<h3 class="sect2">11.5.21. Getting a Widget's Window ID</h3>

<p>If a widget has been reparented by the windowing system, the
<tt class="literal">frame</tt> method returns the window ID of the window
manager's decorative Frame. Otherwise, the returned window ID
is that of the widget itself. See also the <tt class="literal">id</tt>
method.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.22" /><div class="sect2">
<h3 class="sect2">11.5.22. The Application Grid</h3>

<p>The <tt class="literal">grid</tt> method restricts the size of a window.
However, to avoid conflicts with the <tt class="literal">grid</tt> geometry
manager (as described in <a href="ch02_01.htm">Chapter 2, "Geometry Management"</a>), you must use
the <tt class="literal">wm</tt> method to invoke <tt class="literal">grid</tt>
indirectly, as follows:
</p>

<blockquote><pre class="code">$mw-&gt;wm('grid', ... );</pre></blockquote>

<p>When you tell the window to <tt class="literal">grid</tt>, you are
restricting its size. The size must always snap to the grid as
defined in <tt class="literal">grid</tt>. If you remember the Listbox
widget and the <tt class="literal">-setgrid</tt> option to the Listbox
widget back in <a href="ch07_01.htm">Chapter 7, "The Listbox Widget"</a>, once you use
<tt class="literal">-setgrid</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">1</tt> on a Listbox, you can use
<tt class="literal">@list</tt> <tt class="literal">=</tt>
<tt class="literal">$toplevel-&gt;wm('grid');</tt> to determine the values
used in the grid. Supposing the values you get are 10, 10, 7, and 17,
this means the base width and height were each 10 pixels and each
grid unit incremented by 7 pixels in width and 17 pixels in height.
You can change the grid size and increments by calling
<tt class="literal">wm('grid',</tt> <tt class="literal">...)</tt> with new values
if you desire; but if you don't, Tk manages everything quite
nicely for any of the gridded widgets.
</p>

<p>You should also know that you can unset the grid values by using
empty strings for each instead of new values.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.23" /><div class="sect2">
<h3 class="sect2">11.5.23. Being the Leader</h3>

<p>This is another method you'll never use, but it's good to
know about. The <tt class="literal">group</tt> method makes a widget the
group leader of related windows. For each Toplevel that you want to
be in <tt class="literal">$widget</tt>'s group, call
<tt class="literal">$toplevel-&gt;group($widget)</tt>. If
<tt class="literal">$widget</tt> isn't
specified, it will return the current group leader of
<tt class="literal">$toplevel</tt>; it will return an empty string if
<tt class="literal">$toplevel</tt> isn't part of a group.
</p>

<p>You can send an empty string to cancel Toplevel's association
with that group. That is, to remove a Toplevel from the group, call
<tt class="literal">$toplevel-&gt;group("")</tt>.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.24" /><div class="sect2">
<h3 class="sect2">11.5.24. Removing Decorations</h3>

<p>To make a window with none of the normal window decorations
(titlebars, borders, and so on), you can use the
<tt class="literal">overrideredirect</tt> method with a true value:
</p>

<blockquote><pre class="code">$toplevel-&gt;overrideredirect(1);  # Remove all decorations</pre></blockquote>

<p>Be careful though; you won't be able to move the window on the
screen once it is drawn. If you forgot to put an Exit Button on it,
you won't be able to quit the application gracefully (although
a Control-C in the window that started the script will kill it).
</p>

<p>This is a way to make a splash screen (a screen that shows up as your
application is loading). Remember that you must call
<tt class="literal">MainLoop</tt> or <tt class="literal">update</tt> for it to
show up at all. <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a> discusses
Tk::Splashscreen.
</p>

<p>Calling <tt class="literal">overrideredirect</tt> with no argument returns
the current value (1 or 0):
</p>

<blockquote><pre class="code">$current_value = $toplevel-&gt;overrideredirect();</pre></blockquote>

<p>Calling <tt class="literal">overrideredirect</tt> again with a 0 value will
not turn decorations back on once the window has been displayed.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.25" /><div class="sect2">
<h3 class="sect2">11.5.25. Who Placed the Window?</h3>

<p>When the Toplevel widget is placed on the window, either the window
manager tells the program where to be or the program tells the window
manager where it wants to be. In some cases, the user positions the
window manually when it comes up.
</p>

<blockquote><pre class="code">$who = $toplevel-&gt;positionfrom();
$toplevel-&gt;positionfrom("program");  # Try and force it</pre></blockquote>

<p>When called without argument, the <tt class="literal">positionfrom</tt>
method returns information on which one happened. If it returns the
string <tt class="literal">"program"</tt>, an empty string, or a
<tt class="literal">$widget</tt>, it means either the window manager or the
program requested the position. If<tt class="literal">positionfrom</tt> returns the string
<tt class="literal">"user"</tt>, the user placed the window manually when
it was created.
</p>

<p>You can try to force which will happen by calling <tt class="literal">positionfrom</tt> with
the <tt class="literal">"program"</tt> or <tt class="literal">"user"</tt> string,
but it will only work if your window manager agrees with you.
</p>

</div>
<a name="mastperltk-CHP-11-SECT-5.26" /><div class="sect2">
<h3 class="sect2">11.5.26. Who Sized It?</h3>

<p>The <tt class="literal">sizefrom</tt> method does the same thing
<tt class="literal">positionfrom</tt> does except, it returns information
regarding the size of the window.
</p>

<blockquote><pre class="code">$who = $toplevel-&gt;sizefrom(); # "program" or "user"?
$toplevel-&gt;sizefrom("user");  # Try and force it</pre></blockquote>

</div>
<a name="mastperltk-CHP-11-SECT-5.27" /><div class="sect2">
<h3 class="sect2">11.5.27. Transient Windows</h3>

<p>A transient window is one that isn't quite a real window (such
as a pulldown menu). You can indicate to the window manager that the
Toplevel (for example, the pulldown menu) is related to its master
(the window in which it is displayed) by using the
<tt class="literal">transient</tt> method:
</p>

<blockquote><pre class="code">$mymaster = $toplevel-&gt;transient( );
$toplevel-&gt;transient($master);</pre></blockquote>

<p>If you don't use any arguments with
<tt class="literal">transient</tt>, it returns either the current master or
an empty string.
</p>

<p>The appearance of transient windows is different among different
window managers. On some window managers, there is no difference,
whereas some allow for customization with their
<em class="filename">.rc</em> files. Some only use a minimal title bar,
and some show no title bar at all. Iconifying the master window may
or may not iconify the transient window as well. Also, sometimes
transient windows are always on top of the master window. All of this
should be taken into consideration when writing portable code.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch11_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.4. Frame Methods</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">11.6. Creating Multiple MainWindows</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>