<html><head><title>Focus Methods (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_15.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch13_17.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">13.16. Focus Methods</h2>

<p><a name="INDEX-2092" /><a name="INDEX-2093" /><a name="INDEX-2094" />When your application is running, you can
force a widget to have the keyboard focus by calling
<tt class="literal">focus</tt> on that widget:
</p>

<blockquote><pre class="code">$widget-&gt;focus;</pre></blockquote>

<p><a name="INDEX-2095" />You might want to do this if you have an
Entry widget into which the user should start typing first. Calling
<tt class="literal">focus</tt> right before <tt class="literal">MainLoop</tt>
causes the widget to get the focus right away. If you press the Tab
key, the focus automatically changes from one widget to the next.
Shift-Tab can be used to change the focus to the previous widget.
Control-Tab can be used in the Text widget. When in doubt, remember
that you can tell when a widget has the focus by the highlight
rectangle around it.
</p>

<p>There are several methods that allow you to manipulate the focus.</p>

<p><a name="INDEX-2096" /><a name="INDEX-2097" />To make the focus follow the mouse
around, use <tt class="literal">focusFollowsMouse</tt>:
</p>

<blockquote><pre class="code">$widget-&gt;focusFollowsMouse;</pre></blockquote>

<p><a name="INDEX-2098" />To find
out which widget has the focus, call
<tt class="literal">focusCurrent</tt><em class="emphasis">:</em>
</p>

<blockquote><pre class="code">$who = $widget-&gt;focusCurrent;</pre></blockquote>

<p><a name="INDEX-2099" />To force a
widget to have the focus even if the application isn't
currently active, call <tt class="literal">focusForce</tt>:
</p>

<blockquote><pre class="code">$widget-&gt;focusForce;</pre></blockquote>

<p>This is not a nice thing to do, so try to not use it.</p>

<p><a name="INDEX-2100" />To find out
which widget had the focus last, call <tt class="literal">focusLast</tt>:
</p>

<blockquote><pre class="code">$which = $widget-&gt;focusLast;</pre></blockquote>

<p>If none of the widgets in the window has the focus, the Toplevel is
returned.
</p>

<p><a name="INDEX-2101" /><a name="INDEX-2102" />You can use the
<tt class="literal">focusNext</tt> and <tt class="literal">focusPrev</tt> methods
to actually move the focus to the next or previous widget in focus
order:
</p>

<blockquote><pre class="code">$nextwidget = $widget-&gt;focusNext;
$prevwidget = $widget-&gt;focusPrev;</pre></blockquote>

<p><a name="INDEX-2103" />So, what is
<em class="emphasis">focus order</em>? First, focus order is constrained
to <tt class="literal">$widget</tt>'s Toplevel and the
Toplevel's descendant widgets. f<tt class="literal">ocusNext</tt>
follows the stacking order of <tt class="literal">$widget</tt>'s
children as it tries to determine which is the next widget to receive
the focus. As it happens, the widget lowest (first) in the stacking
order is the most eligible window to receive the focus. The search is
then depth-first: the first widget in the stacking order and all its
children are considered first, then the first widget's
siblings.
</p>

<p>Once a candidate widget to receive the focus is determined, the
candidate widget's <tt class="literal">-takefocus</tt> option is
evaluated. If <tt class="literal">-takefocus</tt> is 0, the widget never
gets the focus. If 1, then the widget gets the focus. If
<tt class="literal">undef</tt>, then Tk decides. Otherwise, the value of
<tt class="literal">-takefocus</tt> is a standard callback, which should
return 0, 1, or <tt class="literal">undef</tt>.
</p>

<p><tt class="literal">focusPrev</tt> sets the focus to the previous widget in
the focus order.
</p>

<a name="mastperltk-CHP-13-SECT-16.1" /><div class="sect2">
<h3 class="sect2">13.16.1. Keyboard Traversal</h3>

<p><a name="INDEX-2104" />What should you do when you
don't want to use your mouse in your Perl/Tk application? There
are ways you can move around in your application without having to
touch the mouse.
</p>

<a name="mastperltk-CHP-13-SECT-16.1.1" /><div class="sect3">
<h3 class="sect3">13.16.1.1. Tabbing between widgets</h3>

<p><a name="INDEX-2105" />Run any of the
Perl/Tk applications you have and hit the Tab key. Assuming you
haven't bound Tab to anything else, you'll see different
widgets in your application get the focus, each in turn. You know a
widget has the focus by a variety of ways. A Button will have a
dotted or solid line drawn around it that wasn't there before
it had the focus. An Entry will automatically select all the text in
it when it has the focus. Only one widget in your application can
have the focus at a time. When that widget has the focus, you are
able to interact with it using the keyboard. With a widget such as
Entry, this makes complete sense. You need to be able to type text
into it using the keyboard. We'll talk about this in more
detail in the next section.
</p>

<p>Not all widgets will take the focus. A Label doesn't accept any
keyboard or mouse input, so it won't ever get the focus. A Text
widget is special because once it has the focus, a Tab is rebound to
enter a Tab as part of the Text. Check with documentation on each
widget to determine if you can Tab out of the widget or not.
</p>

<p>The order in which the focus moves around matches the order that you
packed the widgets into your application. If you are going to rely on
using the Tab key to move between widgets in a logical fashion, you
may need to redesign the packing order. Try using Shift-Tab;
you'll now be moving between widgets in backwards order.
Sometimes when Tab has been rebound to do something else, you can use
Shift-Tab to get out of the widget and on to the next one (e.g., a
Text widget).
</p>

</div>

<a name="mastperltk-CHP-13-SECT-16.1.2" /><div class="sect3">
<h3 class="sect3">13.16.1.2. Default widget bindings</h3>

<p><a name="INDEX-2106" /><a name="INDEX-2107" />So what happens when you
start hitting other keys and a widget has the focus? A lot depends on
what widget has the focus, because there are different built-in
bindings for each widget. A Button will let you hit the spacebar to
invoke it (this is true for a Button, Checkbutton, or Radiobutton).
An Entry or Text widget will let you start typing text into the
widget. A Listbox will let you use the arrow keys to move between
different items in it. Each widget has its own set of default
bindings that let you use the keyboard to interact with it. Check the
documentation for each widget to determine what the default bindings
are. You can also take a look at the <tt class="literal">bindDump</tt>
module shown in <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a> to get some interactive
information about a widget.
</p>

</div>

<a name="mastperltk-CHP-13-SECT-16.1.3" /><div class="sect3">
<h3 class="sect3">13.16.1.3. Menu Traversal</h3>

<p><a name="INDEX-2108" />One of the more common things
you'll want to do with your application is allow shortcuts to
commands that are in menus. Here is a typical file menu being
created:
</p>

<blockquote><pre class="code">my $filem = $menubar-&gt;cascade(-label =&gt; "~File", -tearoff =&gt; 0);
$filem-&gt;command(-label =&gt; "~Open...", -command =&gt; \&amp;open_file, -accelerator =&gt;
    "Ctrl+O");
$filem-&gt;command(-label =&gt; "~Close", -command =&gt; \&amp;close_file, -accelerator =&gt;
    "Ctrl+W");
$filem-&gt;command(-label =&gt; "~Save", -command =&gt; \&amp;save_file, -accelerator =&gt;
    "Ctrl+S");
$filem-&gt;command(-label =&gt; "Save ~As...", -command =&gt; \&amp;saveas_file);</pre></blockquote>

<p><a name="INDEX-2109" />You'll
see we used the <tt class="literal">-accelerator</tt> option, which will
show on the right side of the menu when it's dropped down. (See
<a href="ch12_01.htm">Figure 12-1</a> back in <a href="ch12_01.htm">Chapter 12, "The Menu System"</a> for
an example of accelerators.) This doesn't do anything but put
text on the screen. In order to have something happen when the user
clicks on "Control-W," you need to add a binding like
this:
</p>

<blockquote><pre class="code">$mw-&gt;bind($mw, "&lt;Control-s&gt;" =&gt; \&amp;save_file);
$text-&gt;bind("Tk::Text", "&lt;Control-s&gt;" =&gt; \&amp;save_file);</pre></blockquote>

<p><a name="INDEX-2110" />By using
<tt class="literal">bind</tt> on the MainWindow widget, we've
effectively bound that key combination for all widgets in the
application. No matter which widget has the focus, you'll be
able to type Control-s and invoke the <tt class="literal">save_file</tt>
method.
</p>

<p>The second binding on the Text widget is necessary only in some cases
where the Text widget will actually parse the entered command to try
and insert text into the widget. Without that additional binding,
you'll get a funny little rectangle if the Text widget has the
focus and you'll type Control-s. This type of conflict reminds
us to check out the default bindings for each widget we are using in
our application. We might be replacing default widget functionality.
</p>

<p>Take a look at <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a> for more information on
bindings and the different ways to create them.<a name="INDEX-2111" /><a name="INDEX-2112" /><a name="INDEX-2113" />
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_15.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch13_17.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">13.15. Destroying a Widget</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">13.17. Grab Methods</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>