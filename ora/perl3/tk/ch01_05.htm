<html><head><title>Unsolicited Advice (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">1.5. Unsolicited Advice</h2>

<p>Before we end this chapter, and you become engrossed in the details
of Perl/Tk, we'd like to give you some suggestions on
programming style and window design. Bear with us, this won't
take long and might save you a lot of time in the future.
</p>

<a name="mastperltk-CHP-1-SECT-5.1" /><div class="sect2">
<h3 class="sect2">1.5.1. Programming Style</h3>

<p><a name="INDEX-95" /><a name="INDEX-96" />The
code in a Perl/Tk script can get quite cumbersome and clunky because
of all the option/value pairs used to define and configure each
widget. There are several ways to format the code to deal with
readability (and in some cases, "edit-ability"). Most
just involve adding extra spaces or tabs to line up different
portions of code. Once you get used to seeing the code, it
won't seem quite so mysterious and unwieldy.
</p>

<p>One coding style places each option/value pair on a separate line:</p>

<blockquote><pre class="code">$bttn = $parent-&gt;Button(-text =&gt; "my text",
                        -command =&gt; sub { exit }, 
                        -width =&gt; 10, 
                        -height =&gt; 10);</pre></blockquote>

<p><a name="INDEX-97" />With this style, it is extremely
obvious what the pairs are and what value is associated with which
option. (You could also go to the extreme of aligning each
<tt class="literal">=&gt;</tt> to make nice columns, depending on how much
time you have to press the spacebar.) Some people like to start the
option/value pairs on the next line and put the ending
<tt class="literal">);</tt> on its own separate line, after the last
option/value pair, which retains the comma for formatting ease:
</p>

<blockquote><pre class="code">$bttn = $parent-&gt;Button(
   -text =&gt; "Exit", 
   -command =&gt; sub { exit }, 
   -width =&gt; 10, 
   -height =&gt; 10,
);</pre></blockquote>

<p><a name="INDEX-98" />This
makes the code easier to edit; an option/value pair can be added or
deleted on each line without having to mess with parentheses,
semicolons, or commas. It also keeps the next lines closer to the
left side of the page, so if you have several indentation levels, you
don't end up with code quite so deeply nested to the right.
</p>

<p><a name="INDEX-99" /><a name="INDEX-100" />In either case, Emacs users
may find the functionality of <em class="filename">cperl-mode.el</em>
handy. This is an Emacs initialization file that adds color
highlighting and special formatting that makes editing Perl code more
efficient. You can find the file in the standard Perl distribution,
in the <em class="filename">perl-5.6.0/emacs</em> directory.
</p>

<p>Sometimes if there are only one or two option/value pairs, it makes
sense to leave them all on the same line and conserve a little bit of
space:
</p>

<blockquote><pre class="code">$bttn = $parent-&gt;Button(-text =&gt; "my text", -command =&gt; sub { exit });</pre></blockquote>

<p>You'll eventually come up with a style that works for the way
you read and edit code. Whichever way you choose, try to be
consistent throughout your scripts in case someone else takes over
the maintenance of your code (it might even be you, a year or more
down the road).
</p>

</div>
<a name="mastperltk-CHP-1-SECT-5.2" /><div class="sect2">
<h3 class="sect2">1.5.2. Naming Conventions for Widget Types</h3>

<p>Sometimes your programs run away from you, getting so large and
unwieldy that it becomes hard to remember what a particular variable
was pointing to. If there are over 10 Buttons in a program, we would
be hard-pressed to figure out which Button was
<tt class="literal">$button3</tt> without digging through a bunch of code.
</p>

<p>So we've established a naming convention for our code. You
don't need to use our convention, but it'll hopefully
inspire you to come up with your own. Otherwise, we hope you have a
really good memory.
</p>

<p><a name="INDEX-101" /><a name="INDEX-102" />For Buttons, you might use
<tt class="literal">_b</tt>, <tt class="literal">_bttn</tt>, or
<tt class="literal">Button</tt> as a type of qualifier to the variable
name. For instance, you could name the Button in the Hello World
example <tt class="literal">$done_b</tt>,
<tt class="literal">$done_bttn</tt>,or<tt class="literal">$doneButton</tt>.
</p>

<p><a name="INDEX-103" />The topmost widget in an
application's widget hierarchy is the MainWindow. Throughout
this book, we use the variable <tt class="literal">$mw</tt> to represent
this widget. You will see other programs use
<tt class="literal">$main</tt>, <tt class="literal">$top</tt>, or
<tt class="literal">$mainwindow</tt> as well.
</p>

<p><a href="ch01_05.htm">Table 1-1</a> lists widget types and suggested naming
conventions for them. Replace "blah" with a sensible
description of the widget's purpose (e.g.,
<tt class="literal">exit</tt>). If you use this convention, you'll
always know what type of widget you're working with.
</p>

<a name="mastperltk-CHP-1-TABLE-1" /><h4 class="objtitle">Table 1-1. Naming conventions by widget type </h4><table border="1">




<tr>
<th>
<p>Widget type</p>
</th>
<th>
<p>Suggested name</p>
</th>
<th>
<p>Examples</p>
</th>
</tr>


<tr>
<td>
<p>Button</p>
</td>
<td>
<p><tt class="literal">$blah_b</tt>, <tt class="literal">$blah_bttn</tt>,
<tt class="literal">or $blahButton</tt>
</p>
</td>
<td>
<p><tt class="literal">$exit_b</tt>, <tt class="literal">$apply_b</tt>,
<tt class="literal">$newButton</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>Canvas</p>
</td>
<td>
<p><tt class="literal">$blah_canvas</tt> or <tt class="literal">$blahCanvas</tt></p>
</td>
<td>
<p><tt class="literal">$main_canvas</tt>, <tt class="literal">$tinyCanvas</tt></p>
</td>
</tr>
<tr>
<td>
<p>Checkbutton</p>
</td>
<td>
<p><tt class="literal">$blah_cb</tt> or <tt class="literal">$blahCheckbutton</tt></p>
</td>
<td>
<p><tt class="literal">$uppercase_cb</tt><a name="INDEX-104" /><a name="INDEX-105" /><a name="INDEX-106" /><a name="INDEX-107" />, <tt class="literal">$lowercaseCheckbutton</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>Entry</p>
</td>
<td>
<p><tt class="literal">$blah_e</tt> or <tt class="literal">$blahEntry</tt></p>
</td>
<td>
<p><tt class="literal">$name_e</tt>, <tt class="literal">$addressEntry</tt></p>
</td>
</tr>
<tr>
<td>
<p>Frame</p>
</td>
<td>
<p><tt class="literal">$blah_f</tt> or <tt class="literal">$blahFrame</tt></p>
</td>
<td>
<p><tt class="literal">$main_f</tt>, <tt class="literal">$left_f</tt>,
<tt class="literal">$canvasFrame</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>Label</p>
</td>
<td>
<p><tt class="literal">$blah_l</tt> or <tt class="literal">$blahLabel</tt></p>
</td>
<td>
<p><tt class="literal">$name_l</tt>, <tt class="literal">$addressLabel</tt></p>
</td>
</tr>
<tr>
<td>
<p>Listbox</p>
</td>
<td>
<p><tt class="literal">$blah_lb</tt> or <tt class="literal">$blahListbox</tt></p>
</td>
<td>
<p><tt class="literal">$teams_lb</tt>, <tt class="literal">$teamsListbox</tt></p>
</td>
</tr>
<tr>
<td>
<p>Menu</p>
</td>
<td>
<p><tt class="literal">$blah_m</tt> or <tt class="literal">$blahMenu</tt></p>
</td>
<td>
<p><tt class="literal">$file_m</tt>, <tt class="literal">$edit_m</tt>,
<tt class="literal">$helpMenu</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>Radiobutton</p>
</td>
<td>
<p><tt class="literal">$blah_rb</tt> or <tt class="literal">$blahRadiobutton</tt></p>
</td>
<td>
<p><tt class="literal">$blue_rb</tt>, <tt class="literal">$grey_rb</tt>,
<tt class="literal">$redRadiobutton</tt>
</p>
</td>
</tr>
<tr>
<td>
<p>Scale</p>
</td>
<td>
<p><tt class="literal">$blah_scale</tt> or <tt class="literal">$blahScale</tt></p>
</td>
<td>
<p><tt class="literal">$age_scale</tt>, <tt class="literal">$incomeScale</tt></p>
</td>
</tr>
<tr>
<td>
<p>Scrollbar</p>
</td>
<td>
<p><tt class="literal">$blah_scroll</tt>, <tt class="literal">$blah_sbar</tt>, or
<tt class="literal">$blahScroll</tt>
</p>
</td>
<td>
<p><tt class="literal">$x_scroll</tt>, <tt class="literal">$yScroll</tt></p>
</td>
</tr>
<tr>
<td>
<p>Text</p>
</td>
<td>
<p><tt class="literal">$blah_t</tt> or <tt class="literal">$blahText</tt></p>
</td>
<td>
<p><tt class="literal">$file_text</tt>, <tt class="literal">$commentText</tt></p>
</td>
</tr>
<tr>
<td>
<p>Toplevel</p>
</td>
<td>
<p><tt class="literal">$blah_w</tt> or <tt class="literal">$blahWindow</tt></p>
</td>
<td>
<p><tt class="literal">$main_w</tt>, <tt class="literal">$fileopenWindow</tt></p>
</td>
</tr>

</table><p>

</div>
<a name="mastperltk-CHP-1-SECT-5.3" /><div class="sect2">
<h3 class="sect2">1.5.3. Designing Your Windows </h3>

<p>Before you decide what events to handle, it is worthwhile to spend
some time sketching out a few windows on paper and deciding what
should happen (from the user's perspective) when you click a
button or invoke a menu item.
</p>

<p>A GUI often makes the application look much more polished and
purposeful than a command-line interface does, but it's easy to
go overboard with a GUI and end up with something ugly, clunky, and
impossible to navigate. So here are some things to consider when
deciding how the GUI should look:
</p>

<ul><li>
<p>Every widget should have a purpose that is intuitive and informative.</p>
</li><li>
<p>Think about the way a user will use an application and design
accordingly.
</p>
</li><li>
<p>Don't try to cram everything your application does into one
window.
</p>
</li><li>
<p>Don't always try to separate everything into different windows.
Sometimes the application is so simple that one window is all you
need.
</p>
</li><li>
<p>Colors are great, but there are a lot of color-blind people out
there. The same applies to fonts: many folks cannot read very small
fonts. If you insist on using color and particular fonts, allow them
to be customized via the resource database, through a file, or
through the application itself.
</p>
</li><li>
<p>Some widgets do their jobs better than others. Use the proper widget
for the job.
</p>
</li></ul>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.4. Hello World Example</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.6. Debugging and PrototypingPerl/Tk Programs</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>