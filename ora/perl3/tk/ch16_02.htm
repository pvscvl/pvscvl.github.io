<html><head><title>Using the Option Database (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">16.2. Using the Option Database</h2>

<p><a name="INDEX-2586" /><a name="INDEX-2587" /><a name="INDEX-2588" /><a name="INDEX-2589" /><a name="INDEX-2590" /><a name="INDEX-2591" /><a name="INDEX-2592" />The option database is populated by
several mechanisms. We already know
<tt class="literal">Tk::CmdLine::SetArguments</tt> sets standard X11
options prior to MainWindow creation. Unix users should be familiar
with the <em class="filename">.Xdefaults</em> file, a simple text file
that can contain resource entries and is one of the files
<tt class="literal">Tk::CmdLine::SetArguments</tt> reads during MainWindow
initialization. Perl/Tk programs can load resources from other files
as well by calling<i class="command">
</i><tt class="literal">Tk::CmdLine::LoadResources</tt><i class="command">
</i>or <tt class="literal">optionReadfile</tt><i class="command">.</i>
Or, <tt class="literal">Tk::CmdLine::SetResources</tt> and
<tt class="literal">optionAdd</tt> can add individual resources to the
option database. For the location of other resources files, please
read the manpage for <tt class="literal">Tk::CmdLine</tt>.
</p>

<p>Here are some sample resource entries:</p>

<blockquote><pre class="code">*font                         : 12x24
frog*Foreground               : blue
frog.button1.Background       : orange
frog.b3.foreground            : green
frog*Label*cursor             : gobbler </pre></blockquote>

<p>Note that the resource pattern is to the left of the colon, and its
value to the right. The pattern can be general (such as the first
entry, which changes the default font for every X and Tk application)
or specific (such as the fourth entry, which changes only the
foreground color of the widget named <tt class="literal">b3</tt> of the
application <i class="command">frog)</i>.
</p>

<p><a name="INDEX-2593" /><a name="INDEX-2594" /><a name="INDEX-2595" /><a name="INDEX-2596" /><a name="INDEX-2597" /><a name="INDEX-2598" /><a name="INDEX-2599" /><a name="INDEX-2600" /><a name="INDEX-2601" /><a name="INDEX-2602" /><a name="INDEX-2603" /><a name="INDEX-2604" />A resource pattern identifies an
option and one or more widgets in the window hierarchy. Tk generates
the hierarchy automatically, assigning string pathnames to each
widget. In <a href="ch13_01.htm">Chapter 13, "Miscellaneous Perl/Tk Methods"</a>, we learned that Tcl/Tk
programmers are required to do this manually. In Perl/Tk, we seldom
need to refer to widget pathnames; rather, we use object references.
If we need to see a widget's pathname, we use the
<tt class="literal">PathName</tt> method. Pathnames are composed of words
(components) separated by pathname separators (<tt class="literal">.</tt>),
analogous to the forward slash in Unix pathnames or the backslash in
Win32. For example, the pathname
<tt class="literal">.frame.text.button</tt> might represent the Button
created from these commands:
</p>

<blockquote><pre class="code">$mw-&gt;Frame;
$t = $mw-&gt;Text;
$b = $t-&gt;Button;</pre></blockquote>

<p><a name="INDEX-2605" /><a name="INDEX-2606" /><a name="INDEX-2607" /><a name="INDEX-2608" /><a name="INDEX-2609" />A resource pattern is also composed of
words separated by <tt class="literal">.</tt> and <tt class="literal">*</tt>
characters. These words may be program names, class names, option
names, or widget names (a widget's name is the leaf portion of
its pathname; if the pathname is <tt class="literal">.a.b.c</tt>, the leaf
portion is <tt class="literal">c</tt>).
</p>

<p><a name="INDEX-2610" />The characters <tt class="literal">.</tt> and
<tt class="literal">*</tt> are used to provide tight and loose pattern
match bindings. The <tt class="literal">.</tt> is the tight binding
operator, separating adjacent pathname components. The
<tt class="literal">*</tt> is the loose binding operator, separating any
number of pathname components, including none. That's why the
<tt class="literal">*font</tt> resource changes the font for any X or Tk
program.
</p>

<p><a name="INDEX-2611" />If you want
a resource to apply to a particular program (or instance of a
program), prepend the program name as the first component of the
pattern. In the previous example, the second through fifth resources
apply only to the program <tt class="literal">"frog"</tt>.
<tt class="literal">frog</tt> is in quotes because there are various ways
to name a program <tt class="literal">frog</tt>. First, the program's
filename can be <em class="filename">frog</em> or
<em class="filename">frog.ext</em> (extensions are thrown away). Or, use
the <tt class="literal">-name</tt> command-line option and name any old
program <em class="filename">frog</em>.
</p>

<p><a name="INDEX-2612" />A
program's class name is its name with the first character
capitalized or the value of the <tt class="literal">-class</tt>
command-line option. Thus, if you have several frog-related programs,
named, say, <em class="filename">tree-frog</em> and
<i class="command">sand-frog</i>, they could all be of class
<tt class="literal">Frog</tt> and share resource entries, each of whose
first component is <tt class="literal">Frog</tt>. Resource entries
beginning with <tt class="literal">Frog</tt> are distinct from those
beginning with <tt class="literal">frog</tt>.
</p>

<p>Let's use the following program as an example. We create the
MainWindow and disable its propagate feature, so it doesn't
shrink-wrap itself around the widgets inside it. This lets us see its
background color. Somewhere early on in this process,
<tt class="literal">Tk::CmdLine::SetArguments</tt> is called to initialize
the option database with command-line option/values. We print
<tt class="literal">@ARGV</tt> so we can see what's left in the array
after the call to <tt class="literal">MainWindow</tt>.
</p>

<p>The Label's purpose is simply to show us the
application's class and name, which affect how option database
lookups work.
</p>

<p>Now for the three Buttons, each designed for a special purpose. The
first has a hardcoded background color, so it should remain yellow no
matter what background-related resources are in the option database.
The second button has no attributes set, so its background can be set
from the option database. Finally, the third button has explicity set
its name using the <tt class="literal">Name</tt> option. A widget's
name can be changed only during widget creation; the name cannot be
reconfigured afterwards. If the <tt class="literal">Name</tt> option is
omitted, Tk automatically generates the name.
</p>

<p>Lastly, we loop through all the widgets (ignoring Labels) and
configure the Button's text to show its full pathname.
It's the pathname we're interested in when creating
resource entries.
</p>

<blockquote><pre class="code">my $mw = MainWindow-&gt;new;
$mw-&gt;packPropagate(0);

print "ARGV=@ARGV.\n";

my $l1 = $mw-&gt;Label(-text =&gt;
    "Application class/name is\n'" . $mw-&gt;class . '/' . $mw-&gt;name . "'");
$l1-&gt;pack;
my $b1 = $mw-&gt;Button(-background =&gt; 'yellow')-&gt;pack;
my $b2 = $mw-&gt;Button-&gt;pack;
my $b3 = $mw-&gt;Button('Name' =&gt; 'B3')-&gt;pack;

foreach ($mw-&gt;children) {
    next if ref $_ eq 'Tk::Label';
    $_-&gt;configure(-text =&gt; "'" . $_-&gt;PathName . "'");
}</pre></blockquote>

<p>Let's assume the preceding code is saved in a file named
<em class="filename">frog</em>. This means that the program's name
is <em class="filename">frog</em> and its class is
<tt class="literal">Frog</tt>.
</p>

<p>For our test runs, we'll use the same resource entries that we
saw before, which we've stored in our
<em class="filename">.Xdefaults</em> file.
</p>

<blockquote><pre class="code">*font                         : 12x24
frog*Foreground               : blue
frog.button1.Background       : orange
frog.b3.foreground            : green
frog*Label*cursor             : gobbler </pre></blockquote>

<p>This file always resides in our home directory. Tk uses the value of
the environment variable <tt class="literal">$HOME</tt> to locate the
<em class="filename">.Xdefaults</em> file. Under Unix, the variable is
always defined, but not so for you Win32 users, where the concept of
a home directory doesn't exist. Nevertheless, you can define an
MS-DOS <tt class="literal">HOME</tt> environment variable pointing to any
directory you choose and store your <em class="filename">.Xdefaults</em>
file there. If you want the <em class="filename">.Xdefaults</em> file on
your desktop, use this command:
</p>

<blockquote><pre class="code">set HOME=c:\windows\desktop</pre></blockquote>

<p>Alternatively, you can create a batch (<em class="filename">.bat</em>)
file, which might look like this:
</p>

<blockquote><pre class="code">set HOME=C:\Program Files\PerlApps
perl "C:\Program Files\PerlApps\fontviewer.pl"</pre></blockquote>

<p>This allows you to keep various resource files lying about.</p>

<p>Now run the program with the following command-line arguments and
note the output. It shows us that
<tt class="literal">Tk::CmdLine::SetArguments</tt> has indeed processed the
<tt class="literal">-geometry</tt> option and left the unknown option in
<tt class="literal">@ARGV</tt> for us to handle. <a href="ch16_02.htm">Figure 16-1</a> displays the window.
</p>

<blockquote><pre class="code"> [bug@Pandy atk]$ frog -geometry -0-0 -unknown-arg 123
ARGV=-unknown-arg 123. </pre></blockquote>

<a name="mastperltk-CHP-16-FIG-1" /><div class="figure"><img src="figs/mptk.1601.gif" alt="Figure 16-1" width="278" height="256" /></div><h4 class="objtitle">Figure 16-1. frog application with a huge font</h4>

<p>It's immediately clear that the font is huge. That's due
to a loose binding <tt class="literal">*font</tt> <tt class="literal">:</tt>
<tt class="literal">12x24</tt> resource. This turns out to be a very
unpleasant resource, as it trashes nearly every graphical
application. Fortunately for us, we can still tell that the
program's class and name are <tt class="literal">Frog</tt> and
<tt class="literal">frog</tt>, respectively.
</p>

<p>Although you can't tell from the grayscale image, the first
Button (<tt class="literal">.button</tt>) has a yellow background with blue
lettering. Indeed, the loose binding
<tt class="literal">frog*Foreground</tt> <tt class="literal">:</tt>
<tt class="literal">blue</tt> resource ensures that any widget attribute of
class <tt class="literal">Foreground</tt> is set to blue, unless otherwise
overridden.
</p>

<p>The second Button (<tt class="literal">.button1</tt>) has an orange
background and, again, a blue foreground.
</p>

<p>The third Button (<tt class="literal">.b3</tt>) has the standard gray
background with green lettering when inactive. In the figure, the
Button is active, thus its background is blue and foreground is
black. It's blue because a Button's
<tt class="literal">-activebackground</tt> option is of class
<tt class="literal">Foreground</tt>.
</p>

<p>Let's remove the loose font resource binding by commenting it
out. The option database comment character is the exclamation point.
</p>

<blockquote><pre class="code">!*font                         : 12x24
frog*Foreground                : blue
frog.button1.Background        : orange
frog.b3.foreground             : green
frog*Label*cursor              : gobbler </pre></blockquote>

<p><a href="ch16_02.htm">Figure 16-2</a> shows the result. First, the font is
back to the Tk default. We've also left the pointer hanging
over the Label and, as per the option database, the cursor has
changed to a <tt class="literal">gobbler</tt>.
</p>

<a name="mastperltk-CHP-16-FIG-2" /><div class="figure"><img src="figs/mptk.1602.gif" alt="Figure 16-2" width="184" height="198" /></div><h4 class="objtitle">Figure 16-2. frog with normal fonts again</h4>

<p>What do we do if we want to change the options on some Buttons but
not others? From what we've covered, we know that all Button
widgets nominally belong to the class <tt class="literal">Tk::Button</tt>,
unless we do something to change it. If we want to group all Buttons
with the text <tt class="literal">Ok</tt> on them, we can put them in the
<tt class="literal">'OkButton'</tt> class:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; 'Ok', -class =&gt; 'OkButton');</pre></blockquote>

<p>Even if you create a Button with the text <tt class="literal">Cancel</tt>,
as long as the <tt class="literal">-class</tt> option uses
<tt class="literal">OkButton</tt>, it belongs to the proper class.
</p>

<a name="mastperltk-CHP-16-SECT-2.1" /><div class="sect2">
<h3 class="sect2">16.2.1. Manipulating Resources with option* Methods</h3>

<p><tt class="literal">optionClear</tt><a name="INDEX-2613" /><a name="INDEX-2614" />, <tt class="literal">optionAdd</tt>,
<tt class="literal">optionGet</tt>, and <tt class="literal">optionReadfile</tt>
are the standard Tk resource handling methods. For complete details,
read the Tk::option manpage. Briefly:
</p>

<dl>
<dt><tt class="literal">$widget-&gt;optionClear</tt></dt>
<dd>
Clears the option database. The next time a resource is added to or
removed from the database, <em class="filename">.Xdefaults</em></tt> is
reloaded automatically.
</p>
</dd>


<dt><tt class="literal">$widget-&gt;optionAdd(</tt><tt><em class="replaceable"><tt>pattern</em></tt> <tt class="literal">=&gt;</tt> <tt><em class="replaceable">value</em></tt> <tt class="literal">?,</tt> <tt><em class="replaceable">priority</tt></em></tt><tt class="literal">?)</tt></dt>
<dd>
<a name="INDEX-2615" />Adds the
specified resource to the option database, with a priority of
<em class="replaceable"><tt><tt>priority</tt></tt></em> (0-100). These are the
recommended symbolic values:
</p>

<dl>
<dt><tt class="literal">widgetDefault</tt> (20)</dt>
<dd>
Used for default values hardcoded into widgets.</p>
</dd>


<dt><tt class="literal">startupFile</tt> (40)</dt>
<dd>
Used for options specified in application-specific startup files.</p>
</dd>


<dt><tt class="literal">userDefault</tt> (60)</dt>
<dd>
Used for options specified in the <em class="filename">.Xdefaults</em></tt>
file.
</p>
</dd>


<dt><tt class="literal">interactive</tt> (80)</dt>
<dd>
Used for options specified interactively after the application starts
running. This is the default <em class="replaceable"><tt><tt>priority</tt></tt></em>.
</p>
</dd>

</dl>

<p>If an option database lookup results in multiple pattern matches, the
one with the highest priority wins. If there are multiple matches at
the same priority, the latest resource entered in the option database
wins.
</p>
</dd>



<dt><tt class="literal">$widget-&gt;optionGet(</tt><tt><em class="replaceable">name</em></tt><tt class="literal">,</tt> <tt><em class="replaceable">class</em></tt><tt class="literal">)</tt></dt>
<dd>
<a name="INDEX-2616" />Returns a
widget's option value given the specified
<tt><em class="replaceable">name</em></tt> and <tt><em class="replaceable">class</em></tt>.
<tt><em class="replaceable">name</em></tt> might be a configuration option like
<tt class="literal">background</tt>, and class might be an
application's class name or widget class, such as Tk::Button.
This method is for looking up option database values only; it is not
an analog of <tt class="literal">cget</tt>. In the context of the program
<i class="command">frog</i>, these commands both return
<tt class="literal">green</tt>:
</p>

<blockquote><pre class="code">$b3-&gt;optionGet('foreground', ' Frog');
$b3-&gt;optionGet('foreground', ref $b3); </pre></blockquote>
</dd>


<dt><tt class="literal">$widget-&gt;optionReadfile(</tt><tt><em class="replaceable">pathName</em></tt> <tt class="literal">?,</tt> <tt><em class="replaceable">priority</em></tt><tt class="literal">?)</tt></dt>
<dd>
<a name="INDEX-2617" />Loads
the resources from file <em class="replaceable"><tt>pathName</tt></em> at the
given <em class="replaceable"><tt>priority</tt></em>.
</p>
</dd>

</dl>

<p>Be aware that Perl/Tk widgets can have hierarchical class names
(Tk::A::B), but that the internal Tk class is always the leaf part
(B). The internal Tk class is used as the identifier for option
database lookups, as the following code demonstrates:
</p>

<blockquote><pre class="code">package Tk::Foo::Bar;
use base qw/Tk::Label/;
Construct Tk::Widget 'FooBar';

package main;
$mw = MainWindow-&gt;new;
$mw-&gt;optionAdd("*FooBar.background", "red"); # does not work
$mw-&gt;optionAdd("*Bar.foreground", "blue");      # works
$f = $mw-&gt;FooBar(-text =&gt; "foobar")-&gt;pack;
warn $f-&gt;Class;</pre></blockquote>

</div>
<a name="mastperltk-CHP-16-SECT-2.2" /><div class="sect2">
<h3 class="sect2">16.2.2. Manipulating Resources with Tk::CmdLine Subroutines</h3>

<p><a name="INDEX-2618" />In
addition to the <tt class="literal">option</tt><i class="command">*</i>
methods, Perl/Tk provides the following subroutines to manage the
option database, fully described in the Tk::CmdLine manpage.
</p>

<dl>
<dt><tt class="literal">Tk::CmdLine::SetArguments([</tt><tt><em class="replaceable"><tt>args</tt></em></tt><tt class="literal">])</tt></dt>
<dd>
<a name="INDEX-2619" />Parses the command-line-formatted
option/value pairs in the array <tt class="literal">args</tt> and adds them
to the option database. The array <tt class="literal">@ARGV</tt> is used by
default. Perl/Tk implicitly calls this subroutine as it creates the
first MainWindow.
</p>
</dd>


<dt><tt class="literal">Tk::CmdLine::cget([</tt><tt><em class="replaceable"><tt>option</tt></em></tt><tt class="literal">])</tt></dt>
<dd>
<a name="INDEX-2620" />Returns the value of an option
initialized by <tt class="literal">Tk::CmdLine::SetArguments</tt>. The only
valid options are <tt class="literal">-class</tt>,
<tt class="literal">-name</tt>, <tt class="literal">-screen</tt>, and
<tt class="literal">-title</tt>. You might use this command to determine an
application's class, which then might map to a particular
resource file to load via
<tt class="literal">Tk::CmdLine::LoadResources</tt>. The default option is
<tt class="literal">-class</tt>.
</p>
</dd>


<dt><tt class="literal">Tk::CmdLine::SetResources(</tt><tt><em class="replaceable"><tt>resource</em></tt> <tt class="literal">[,</tt> <tt><em class="replaceable">priority</tt></em></tt><tt class="literal">])</tt></dt>
<dd>
<a name="INDEX-2621" />Sets one or more resources. If
<tt><em class="replaceable"><tt>resource</tt></em></tt> is a scalar, it's
interpreted as a resource pattern/value string. If
<tt><em class="replaceable"><tt>resource</tt></em></tt> is an array reference, its
elements may be pattern/value strings or yet another reference to an
array of two elements, the first being the pattern and the second the
pattern's value. The <tt><em class="replaceable"><tt>priority</tt></em></tt>
defaults to <tt class="literal">userDefault</tt>.
</p>
</dd>


<dt><tt class="literal">Tk::CmdLine::LoadResources</tt></dt>
<dd>
<a name="INDEX-2622" /><a name="INDEX-2623" /><a name="INDEX-2624" /><a name="INDEX-2625" /><a name="INDEX-2626" />Loads resources from one or more files
into the option database. This subroutine accepts four options,
though none are required. Typically, you would use
<tt class="literal">-file</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">pathName</tt> and perhaps <tt class="literal">-priority</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">priority</tt>. The
<tt class="literal">-symbol</tt> option specifies the name of an
environment variable that contains a colon-separated list of
directory and/or file patterns. The <tt class="literal">-echo</tt> option
expects a file handle reference (default is
<tt class="literal">\</tt>*<tt class="literal">STDOUT</tt>). For every resource
file loaded, its filename is written to this file handle. Refer to
the Tk::CmdLine manpage for details.<a name="INDEX-2627" /><a name="INDEX-2628" />
</p>
</dd>

</dl>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch17_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">16. User Customization</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">17. Images and Animations</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>