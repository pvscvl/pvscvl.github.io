<html><head><title>Binding to Events (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">15.2. Binding to Events</h2>

<p><a name="INDEX-2357" /><a name="INDEX-2358" /><a name="INDEX-2359" />When creating a Button instance, the
-<tt class="literal">command</tt> option specifies the callback to invoke
when the user presses the Button. The button press must be button 1,
because that's the Button's documented behavior. As a
convenience, the Button constructor automatically creates the link
between the button 1 press and our callback using the
<tt class="literal">bind</tt> command. If it didn't, we'd have
to do it manually for every Button we create, using syntax similar to
this:
</p>

<blockquote><pre class="code">$button-&gt;bind('&lt;ButtonRelease-1&gt;' =&gt; <em class="replaceable"><tt>callback</tt></em>);</pre></blockquote>

<p>If nothing else, <tt class="literal">-command =&gt; callback</tt> is fewer
characters to type, but it also provides consistency, because the
Button always reacts to the first button, not whatever button the
programmer decided to use.
</p>

<p><a name="INDEX-2360" /><a name="INDEX-2361" />In the
previous <tt class="literal">bind</tt> command, the string
<tt class="literal">&lt;ButtonRelease-1&gt;</tt> is know as an
<em class="emphasis">event descriptor</em>. It's composed of two
fields enclosed in angle brackets, the <em class="emphasis">event
type</em> and the <em class="emphasis">event detail</em>. In the
case of a <tt class="literal">ButtonRelease</tt> event type, the detail
portion specifies which button we are interested in. The event
descriptor in this example is very specific: it invokes the callback
only when button 1 is released over the Button widget (as opposed to
when it's pressed). If you watch a Button closely, pressing
button 1 only changes the widget's relief from
<tt class="literal">raised</tt> to <tt class="literal">sunken</tt>. If you move
the cursor away from the Button, the relief changes back, but the
widget's callback is never invoked.
</p>

<a name="mastperltk-CHP-15-SECT-2.1" /><div class="sect2">
<h3 class="sect2">15.2.1. Event Descriptor Syntax</h3>

<p>An event descriptor can be more complex than our first example; it
can actually be one or more <em class="emphasis">event patterns</em>, and
each pattern can have zero or more modifiers:
</p>

<blockquote><pre class="code">&lt;<em class="replaceable"><tt>modifier</em>-<em class="replaceable">modifier</em>-<em class="replaceable">type</em>-<em class="replaceable">detail</tt></em>&gt;</pre></blockquote>

<p>In the previous example, the event descriptor was comprised of one
event pattern, which is typically all you'll ever use. Any of
the fields may be omitted, as long as at least
<em class="replaceable"><tt>type</em> or <em class="replaceable">detail</tt></em>
is present.
</p>

<p><a name="INDEX-2362" />Tk also
supports user defined <em class="emphasis">virtual events</em>. They are
named entities surrounded by double angle brackets:
</p>

<blockquote><pre class="code">&lt;&lt;<em class="replaceable"><tt>virtual-event-name</tt></em>&gt;&gt;                                                   </pre></blockquote>

<p><a name="INDEX-2363" /><a name="INDEX-2364" />Virtual
events may not have modifiers. In previous chapters, we've
discussed these virtual events: <tt class="literal">Tk::Text</tt>
<tt class="literal">&lt;&lt;Undo&gt;&gt;</tt> and
<tt class="literal">&lt;&lt;Redo&gt;&gt;</tt>, <tt class="literal">Tk::Menu</tt>
<tt class="literal">&lt;&lt;MenuSelect&gt;&gt;</tt>, and
<tt class="literal">Tk::Listbox</tt>
<tt class="literal">&lt;&lt;ListboxSelect&gt;&gt;</tt>.
</p>

<p><a name="INDEX-2365" />Use the
<tt class="literal">eventGenerate</tt> command described later to trigger a
virtual event.
</p>

<a name="mastperltk-CHP-15-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">15.2.1.1. Event descriptor modifiers</h3>

<p><a href="ch15_02.htm">Table 15-2</a> lists the valid modifiers.
<tt class="literal">Double</tt> and <tt class="literal">Triple</tt> modifiers
repeat events. They are most often associated with buttons, so we
often see event descriptors like
<tt class="literal">&lt;Double-Button-1&gt;</tt>. Common keyboard modifiers
include <tt class="literal">Alt</tt>, <tt class="literal">Control</tt>,
<tt class="literal">Meta</tt>, <tt class="literal">Mod</tt>, and
<tt class="literal">Shift</tt>; thus,
<tt class="literal">&lt;Control-Key-c&gt;</tt> would trap a Control-c.
</p>

<a name="mastperltk-CHP-15-TABLE-2" /><h4 class="objtitle">Table 15-2. Event modifiers </h4><table border="1">




<tr>
<td>
<p><tt class="literal">Alt</tt></p>
</td>
<td>
<p><tt class="literal">Control</tt></p>
</td>
<td>
<p><tt class="literal">Mod3, M3</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Button1, B1</tt></p>
</td>
<td>
<p><tt class="literal">Double</tt></p>
</td>
<td>
<p><tt class="literal">Mod4, M4</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Button2, B2</tt></p>
</td>
<td>
<p><tt class="literal">Lock</tt></p>
</td>
<td>
<p><tt class="literal">Mod5, M5</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Button3, B3</tt></p>
</td>
<td>
<p><tt class="literal">Meta, M</tt></p>
</td>
<td>
<p><tt class="literal">Shift</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Button4, B4</tt></p>
</td>
<td>
<p><tt class="literal">Mod1, M1</tt></p>
</td>
<td>
<p><tt class="literal">Triple</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Button5, B5</tt></p>
</td>
<td>
<p><tt class="literal">Mod2, M2</tt></p>
</td>
<td>

</td>
</tr>

</table><p>

</div>

<a name="mastperltk-CHP-15-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">15.2.1.2. Event descriptor types</h3>

<p><a name="INDEX-2366" /><a name="INDEX-2367" /><a name="INDEX-2368" /><a name="INDEX-2369" /><a name="INDEX-2370" /><a name="INDEX-2371" /><a name="INDEX-2372" /><a name="INDEX-2373" /><a name="INDEX-2374" /><a name="INDEX-2375" /><a name="INDEX-2376" /><a name="INDEX-2377" /><a name="INDEX-2378" /><a name="INDEX-2379" /><a name="INDEX-2380" /><a name="INDEX-2381" /><a name="INDEX-2382" /><a name="INDEX-2383" /><a name="INDEX-2384" /><a name="INDEX-2385" /><a name="INDEX-2386" /><a name="INDEX-2387" /><a name="INDEX-2388" /><a name="INDEX-2389" /><a name="INDEX-2390" /><a name="INDEX-2391" />An event descriptor can include any of the
types described in <a href="ch15_02.htm">Table 15-3</a>.
</p>

<a name="mastperltk-CHP-15-TABLE-3" /><h4 class="objtitle">Table 15-3. Legal event types </h4><table border="1">



<tr>
<th>
<p>Event type</p>
</th>
<th>
<p>Brief description</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">Activate</tt></p>
</td>
<td>
<p>Currently unused.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ButtonPress</tt> (or <tt class="literal">Button</tt>)</p>
</td>
<td>
<p>A mouse button was pressed.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ButtonRelease</tt></p>
</td>
<td>
<p>A mouse button was released.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Circulate</tt></p>
</td>
<td>
<p>A widget's stacking order has changed.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">ColorMap</tt></p>
</td>
<td>
<p>A widget's colormap has changed.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Configure</tt></p>
</td>
<td>
<p>A widget has changed size or position and may need to adjust its
layout.
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Deactivate</tt></p>
</td>
<td>
<p>Currently unused.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Destroy</tt></p>
</td>
<td>
<p>A widget was destroyed.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Enter</tt></p>
</td>
<td>
<p>The cursor has moved into a widget.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Expose</tt></p>
</td>
<td>
<p>All or part of a widget has been uncovered and may need to be redrawn.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">FocusIn</tt></p>
</td>
<td>
<p>A widget has gained the keyboard focus.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">FocusOut</tt></p>
</td>
<td>
<p>A widget has lost the keyboard focus.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Gravity</tt></p>
</td>
<td>
<p>A widget has moved because its parent changed size.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">KeyPress</tt> (or <tt class="literal">Key</tt>)</p>
</td>
<td>
<p>A key has been pressed.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">KeyRelease</tt></p>
</td>
<td>
<p>A key has been released.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Motion</tt></p>
</td>
<td>
<p>The cursor is in motion over a widget.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">MouseWheel</tt></p>
</td>
<td>
<p>The mousewheel is scrolling.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Leave</tt></p>
</td>
<td>
<p>The cursor has moved out of a widget.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Map</tt></p>
</td>
<td>
<p>A widget has been mapped onto the display and is visible.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Property</tt></p>
</td>
<td>
<p>A widget property has changed.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Reparent</tt></p>
</td>
<td>
<p>A widget has been reparented.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Unmap</tt></p>
</td>
<td>
<p>A widget has been unmapped from the display and is no longer visible.</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Visibility</tt></p>
</td>
<td>
<p>A widget's visibility has changed.</p>
</td>
</tr>

</table><p>

<p>Of all these event types, most of the time you'll only deal
with <tt class="literal">ButtonPress</tt>,
<tt class="literal">ButtonRelease</tt>, <tt class="literal">Destroy</tt>,
<tt class="literal">Enter</tt>, <tt class="literal">KeyPress</tt>,
<tt class="literal">KeyRelease</tt>, <tt class="literal">Leave</tt>, and
<tt class="literal">Motion</tt>.
</p>

<p><a name="INDEX-2392" /><a name="INDEX-2393" />We know that for Button events, the detail
field of the event descriptor is a button number. Valid numbers are
one through five. If the Button detail is omitted,
<em class="emphasis">any</em> button triggers the callback. For Key events
(<tt class="literal">KeyPress</tt> and <tt class="literal">KeyRelease</tt>), the
detail field is a <em class="emphasis">keysym</em>, an identifier for the
desired keyboard character. For alphabetic characters, the keysym is
simply the character itself. For example:
</p>

<blockquote><pre class="code">$mw-&gt;bind('&lt;KeyRelease-a&gt;' =&gt; <em class="replaceable"><tt>callback</tt></em>);</pre></blockquote>

<p>invokes the callback when the lowercase character "a" is
typed in the MainWindow. If you want to bind to an uppercase
character, use the uppercase keysym:
</p>

<blockquote><pre class="code">$mw-&gt;bind('&lt;KeyRelease-A&gt;' =&gt; <em class="replaceable"><tt>callback</tt></em>);</pre></blockquote>

<p>Other keysyms are not so easy to figure out; for instance,
what's the keysym for the page-down key? Well, let's find
out....
</p>

</div>
</div>
<a name="mastperltk-CHP-15-SECT-2.2" /><div class="sect2">
<h3 class="sect2">15.2.2. The Event Structure</h3>

<p><a name="INDEX-2394" /><a name="INDEX-2395" />When Tk invokes a callback, it
provides detailed information about the event that triggered the
callback. In C, this data is stored in a structure and has been
historically called the <em class="emphasis">event structure</em>. The
internal Tk event structure is still a real C structure, but we
don't fiddle with it directly. Instead, Perl/Tk gives us an
<em class="emphasis">event object</em>, which we use to call methods that
return the pieces of data of interest to us.
</p>

<p><a name="INDEX-2396" />To see how this
works, let's examine a program that prints the keysym for any
keyboard character:
</p>

<blockquote><pre class="code">$mw-&gt;bind('&lt;KeyPress&gt;' =&gt; \&amp;print_keysym);

sub print_keysym {
    my($widget) = @_;
    my $e = $widget-&gt;XEvent;    # get event object
    my($keysym_text, $keysym_decimal) = ($e-&gt;K, $e-&gt;N);
    print "keysym=$keysym_text, numeric=$keysym_decimal\n";
}</pre></blockquote>

<p>Notice the <tt class="literal">KeyPress</tt> binding is for the MainWindow,
which lets us type anywhere in the window, even if it's filled
with other widgets. The <tt class="literal">KeyPress</tt> event descriptor
is missing its detail field, which means the callback is invoked when
<em class="emphasis">any</em> key is pressed. Also notice that we've
used a callback syntax that doesn't allow us to pass explicit
arguments to <tt class="literal">print_keysym</tt>.
</p>

<p>But <tt class="literal">print_keysym</tt> is expecting an argument; in
fact, Tk implicitly passes the bound widget reference as the first
argument to the callback, adding any of our explicit arguments
afterwards. This is usually what we want, but sometimes the implicit
argument gets in our way. To prevent <tt class="literal">bind</tt> from
supplying the widget reference, specify your own object:
</p>

<blockquote><pre class="code">$a-&gt;bind(<em class="replaceable"><tt>event_desciptor</em> =&gt; [$b =&gt; <em class="replaceable">callback</tt></em>]);</pre></blockquote>

<p><tt class="literal">bind</tt> invokes the callback with widget
<tt class="literal">$b</tt> rather than <tt class="literal">$a</tt>.
</p>

<p><a name="INDEX-2397" /><a name="INDEX-2398" /><a name="INDEX-2399" />Using the widget reference, we call
<tt class="literal">XEvent</tt>, which returns the event object for the
<tt class="literal">KeyPress</tt>. The <tt class="literal">K</tt> method returns
the key symbol, and the <tt class="literal">N</tt> method returns its
decimal value.
</p>

<p>In case you're wondering, the keysym for page down is
<tt class="literal">Next</tt>.
</p>

<a name="mastperltk-CHP-15-SECT-2.2.1" /><div class="sect3">
<h3 class="sect3">15.2.2.1. The exporter tag :variables</h3>

<p><a name="INDEX-2400" />The two most important pieces of information
a callback needs are the event object and the widget the event object
applies to. In newer Tks, Nick introduced two localized variables
that represent this information: <tt class="literal">$Tk::event</tt> and
<tt class="literal">$Tk::widget</tt>. These fully qualified variables are
available to any callback. If you're particularly lazy, import
them like so:
</p>

<blockquote><pre class="code">use Tk ':variables';</pre></blockquote>

<p>Then you can use the unqualified names <tt class="literal">$event</tt> and
<tt class="literal">$widget</tt> in your callbacks. With this new
information, we can write our keysym program more succinctly:
</p>

<blockquote><pre class="code">$mw-&gt;bind('&lt;KeyPress&gt;' =&gt; sub {
    print 'Keysym=', $Tk::event-&gt;K, ', numeric=', $Tk::event-&gt;N, "\n";
});</pre></blockquote>

<p><a name="INDEX-2401" />In the following example, we see the
three different ways to get the event's widget reference:
</p>

<blockquote><pre class="code">my $b = $mw-&gt;Button(-text =&gt; 'Click B1 Then B2', -command =&gt; \&amp;callback);
$b-&gt;bind('&lt;ButtonRelease-2&gt;' =&gt; \&amp;callback);

sub callback {
    print "\n";
    print "callback args  = @_\n";
    print "\$Tk::event     = $Tk::event\n";
    print "\$Tk::widget    = $Tk::widget\n";
    print "\$Tk::event-&gt;W  = ", $Tk::event-&gt;W, "\n";
}</pre></blockquote>

<p>Clicking button 1 invokes <tt class="literal">callback</tt> with no
arguments, and we see that <tt class="literal">$Tk::widget</tt> and the
<tt class="literal">W</tt> event information method both return the same
widget reference (that of the Button). Clicking button 2 invokes
<tt class="literal">callback</tt> again, but this time, Tk supplies the
<tt class="literal">bind</tt> widget reference as an argument: the Button
reference.
</p>

<blockquote><pre class="code">callback args  = 
$Tk::event     = XEvent=SCALAR(0x82920f0)
$Tk::widget    = Tk::Button=HASH(0x817fa00)
$Tk::event-&gt;W  = Tk::Button=HASH(0x817fa00)

callback args  = Tk::Button=HASH(0x817fa00)
$Tk::event     = XEvent=SCALAR(0x817ff70)
$Tk::widget    = Tk::Button=HASH(0x817fa00)
$Tk::event-&gt;W  = Tk::Button=HASH(0x817fa00)</pre></blockquote>

</div>

<a name="mastperltk-CHP-15-SECT-2.2.2" /><div class="sect3">
<h3 class="sect3">15.2.2.2. Event information methods</h3>

<p><a href="ch15_02.htm">Table 15-4</a> lists all the event information methods.
Keep in mind that not all information is applicable to all events.
For conciseness, we also list the corresponding
<tt class="literal">eventGenerate</tt> options. The Tk::event documentation
has more complete information.
</p>

<a name="mastperltk-CHP-15-TABLE-4" /><h4 class="objtitle">Table 15-4. Event information methods </h4><table border="1">




<tr>
<th>
<p>Method/option</p>
</th>
<th>
<p>Valid events</p>
</th>
<th>
<p>Comments</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">#<a href="#FOOTNOTE-39">[39]</a> /
-serial</tt>
<br><a name="FOOTNOTE-39"> Since # is an illegal method name, you must store it in a variable: <tt>$sn = '#' ; $Tk::event->$sn().</a>
</p>
</td>
<td>
<p>All events</p>
</td>
<td>
<p>Integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">@</tt></p>
</td>
<td>
<p>Events with x/y fields</p>
</td>
<td>
<p><tt class="literal">"@x,y"</tt> used by Tk::Text</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">A</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt></p>
</td>
<td>
<p>ASCII character</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">a / -above</tt></p>
</td>
<td>
<p><tt class="literal">Configure</tt></p>
</td>
<td>
<p>Window object or ID</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">B / -borderwidth</tt></p>
</td>
<td>
<p><tt class="literal">Configure</tt></p>
</td>
<td>
<p>Screen distance</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">b / -button</tt></p>
</td>
<td>
<p><tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt></p>
</td>
<td>
<p>Button number</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">c / -count</tt></p>
</td>
<td>
<p><tt class="literal">Expose</tt>, <tt class="literal">Map</tt></p>
</td>
<td>
<p>Integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">D / -delta</tt></p>
</td>
<td>
<p><tt class="literal">MouseWheel</tt></p>
</td>
<td>
<p>Integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">d / -detail</tt></p>
</td>
<td>
<p><tt class="literal">Enter</tt>, <tt class="literal">Leave</tt>,
<tt class="literal">FocusIn</tt>, <tt class="literal">FocusOut</tt>
</p>
</td>
<td>
<p>See Tk::event POD</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">E / -sendevent</tt></p>
</td>
<td>
<p>All events</p>
</td>
<td>
<p>Boolean</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">f / -focus</tt></p>
</td>
<td>
<p><tt class="literal">Enter</tt>, <tt class="literal">Leave</tt></p>
</td>
<td>
<p>All events</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">h / -height</tt></p>
</td>
<td>
<p><tt class="literal">Configure</tt></p>
</td>
<td>
<p>Screen distance</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">K / -keysym</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt></p>
</td>
<td>
<p>Symbolic keysym</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">k / -keycode</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt></p>
</td>
<td>
<p>Integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">m / -mode</tt></p>
</td>
<td>
<p><tt class="literal">Enter</tt>, <tt class="literal">Leave</tt>,
<tt class="literal">FocusIn</tt>, <tt class="literal">FocusOut</tt>
</p>
</td>
<td>
<p>See Tk::events POD</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">N</tt> </p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt></p>
</td>
<td>
<p>Decimal keysym</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">o / -override</tt></p>
</td>
<td>
<p><tt class="literal">Map</tt>, <tt class="literal">Reparent</tt>,
<tt class="literal">Configure</tt>
</p>
</td>
<td>
<p>Boolean (<tt class="literal">overrideredirect</tt>)</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">p / -place</tt></p>
</td>
<td>
<p><tt class="literal">Circulate</tt></p>
</td>
<td>
<p>See Tk::event POD</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">R / -root</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt>,
<tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt>,
<tt class="literal">Enter</tt>, <tt class="literal">Leave</tt>,
<tt class="literal">Motion</tt>
</p>
</td>
<td>
<p>Window object or ID</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">S / -subwindow</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt>,
<tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt>,
<tt class="literal">Enter</tt>, <tt class="literal">Leave</tt>,
<tt class="literal">Motion</tt>
</p>
</td>
<td>
<p>Window object or ID</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">s / -state</tt></p>
</td>
<td>
<p>All events</p>
</td>
<td>
<p>See Tk::event POD</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">T</tt> </p>
</td>
<td>
<p>All events</p>
</td>
<td>
<p>The event type</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">t / -time</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt>,
<tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt>,
<tt class="literal">Enter</tt>, <tt class="literal">Leave</tt>,
<tt class="literal">Motion</tt>, <tt class="literal">Property</tt>
</p>
</td>
<td>
<p>Integer</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">W</tt></p>
</td>
<td>
<p>All events</p>
</td>
<td>
<p>Widget reference</p>
</td>
</tr>
<tr>
<td>
<p> <tt class="literal">/ -when</tt></p>
</td>
<td>
<p>All events</p>
</td>
<td>
<p><tt class="literal">now</tt> | <tt class="literal">tail</tt> |
<tt class="literal">head</tt> | <tt class="literal">mark</tt>See Tk::event POD
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">w / -width</tt></p>
</td>
<td>
<p><tt class="literal">Configure</tt></p>
</td>
<td>
<p>Screen distance</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">X / -rootx</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt>,
<tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt>,
<tt class="literal">Enter</tt>, <tt class="literal">Leave</tt>,
<tt class="literal">Motion</tt>
</p>
</td>
<td>
<p>Screen distance (the event's x coordinate relative to the root
window)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">x / -x</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt>,
<tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt>,
<tt class="literal">Motion</tt>, <tt class="literal">Enter</tt>,
<tt class="literal">Leave</tt>, <tt class="literal">Expose</tt>,
<tt class="literal">Configure</tt>, <tt class="literal">Gravity</tt>,
<tt class="literal">Reparent</tt>
</p>
</td>
<td>
<p>Screen distance (the event's x coordinate relative to the
widget)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">Y/ -rooty</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt>,
<tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt>,
<tt class="literal">Enter</tt>, <tt class="literal">Leave</tt>,
<tt class="literal">Motion</tt>
</p>
</td>
<td>
<p>Screen distance (the event's y coordinate relative to the root
window)
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">y / -y</tt></p>
</td>
<td>
<p><tt class="literal">KeyPress</tt>, <tt class="literal">KeyRelease</tt>,
<tt class="literal">ButtonPress</tt>, <tt class="literal">ButtonRelease</tt>,
<tt class="literal">Motion</tt>, <tt class="literal">Enter</tt>,
<tt class="literal">Leave</tt>, <tt class="literal">Expose</tt>,
<tt class="literal">Configure</tt>, <tt class="literal">Gravity</tt>,
<tt class="literal">Reparent</tt>
</p>
</td>
<td>
<p>Screen distance (the event's y coordinate relative to the
widget)
</p>
</td>
</tr>
</table>
</div>
</div>
<a name="mastperltk-CHP-15-SECT-2.3" /><div class="sect2">
<h3 class="sect2">15.2.3. Widget Class Bindings</h3>

<p><a name="INDEX-2402" /><a name="INDEX-2403" />Like most widgets, Buttons have a default
behavior defined by bindings automatically created by Perl/Tk.
That's why when we make a Button, we don't have to create
its <tt class="literal">&lt;ButtonRelease-1&gt;</tt> binding. These default
widget bindings are known as <em class="emphasis">class bindings</em>. We
can see these bindings by using a second form of the
<tt class="literal">bind</tt> command, where we pass it just a class name.
<tt class="literal">bind</tt> then reports all the event descriptors for
that class. We use the Perl built-in function <tt class="literal">ref</tt>
to determine the widget's class:<a name="INDEX-2404" /><a name="INDEX-2405" />
</p>

<blockquote><pre class="code">my $b = $mw-&gt;Button(qw/-text Beep -command/ =&gt; sub {$mw-&gt;bell});
$b-&gt;pack;
my $class = ref $b;
print "Button \$b is an instance of class '$class'.\n" .
      "This class has bindings for these events:\n\n";
print join("\n", $b-&gt;bind($class) ), "\n";</pre></blockquote>

<p>This produces:</p>

<blockquote><pre class="code">Button $b is an instance of class 'Tk::Button'.
This class has bindings for these events:

&lt;Key-Return&gt;
&lt;Key-space&gt;
&lt;ButtonRelease-1&gt;
&lt;ButtonPress-1&gt;
&lt;Leave&gt;
&lt;Enter&gt;</pre></blockquote>

<p>Without even referring to the Tk::Button documentation, we can guess
what most of these bindings do. The <tt class="literal">&lt;Enter&gt;</tt>
event is triggered when the cursor moves over the Button, and the
Button's background color changes, indicating it's
activated. The <tt class="literal">&lt;Leave&gt;</tt> event restores the
Button's background color. The
<tt class="literal">&lt;ButtonPress-1&gt;</tt> event changes the
Button's relief to sunken, and the
<tt class="literal">&lt;ButtonRelease-1&gt;</tt> event changes the relief
back to raised and invokes the -<tt class="literal">command</tt> callback.
The <tt class="literal">Key</tt> events also invoke the callback if the
Button has the input focus.
</p>

<p>You can add additional widget bindings to the class if you desire, so
that all Buttons inherit this new behavior. Suppose you want button 2
to execute a Button callback twice. Here's how to do it:
</p>

<blockquote><pre class="code">my $b = $mw-&gt;Button(qw/-text Beep -command/ =&gt; sub {$mw-&gt;bell});
$b-&gt;pack;
my $class = ref $b;
<tt class="userinput"><b>$b-&gt;bind($class, '&lt;ButtonRelease-2&gt;' =&gt; \&amp;twice);</b></tt>

print "Button \$b is an instance of class '$class'.\n" .
      "This class has bindings for these events:\n\n";
print join("\n", $b-&gt;bind($class) ), "\n";

<tt class="userinput"><b>sub twice {</b></tt>
<tt class="userinput"><b>    my $button = shift;</b></tt>
<tt class="userinput"><b>    $button-&gt;Callback(-command);</b></tt>
<tt class="userinput"><b>    $button-&gt;Callback(-command);</b></tt>
<tt class="userinput"><b>}</b></tt></pre></blockquote>

<p>This produces:</p>

<blockquote><pre class="code">Button $b is an instance of class 'Tk::Button'.
This class has bindings for these events:

<tt class="userinput"><b>&lt;ButtonRelease-2&gt;</b></tt>
&lt;Key-Return&gt;
&lt;Key-space&gt;
&lt;ButtonRelease-1&gt;
&lt;Button-1&gt;
&lt;Leave&gt;
&lt;Enter&gt;</pre></blockquote>

<p>Here we used a third variant of <tt class="literal">bind</tt> that ties an
event to a class as a whole. There are three important facts to note:
</p>

<ul><li>
<p>We've used a named subroutine rather than an anonymous
subroutine for the callback. While not strictly required, it's
still good style, because it lets others override the callback by
providing their own subroutine of the same name. This is particularly
relevant when writing mega-widgets.
</p>
</li><li>
<p>The new binding is retroactive. Widget instances of the class created
prior to the new binding definition automatically inherit the new
binding.
</p>
</li><li>
<p><a name="INDEX-2406" />The <tt class="literal">Callback</tt>
method is the proper way to invoke a Perl/Tk callback. It works like
this: <tt class="literal">Callback</tt> takes its object (here, the Button
widget), looks up the value of the option passed as its argument
(here, -<tt class="literal">command</tt>), then invokes the callback.
<tt class="literal">Callback</tt> takes care of the argument handling on
our behalf; all the information it needs is contained in the
Tk::Callback object.<a name="INDEX-2407" /> 
</p>
</li></ul>
</div>
<a name="mastperltk-CHP-15-SECT-2.4" /><div class="sect2">
<h3 class="sect2">15.2.4. Widget Instance Bindings</h3>

<p><a name="INDEX-2408" /><a name="INDEX-2409" /><a name="INDEX-2410" />Sometimes you want a binding placed on a
particular widget instance instead of the entire class. If you want
one particular Button to invoke its callback twice, use this familiar
<tt class="literal">bind</tt> format:
</p>

<blockquote><pre class="code">$b-&gt;bind('&lt;ButtonRelease-2&gt;' =&gt; \&amp;twice);</pre></blockquote>

<p>To query instance bindings, use this fourth flavor of the
<tt class="literal">bind</tt> command:
</p>

<blockquote><pre class="code">print $b-&gt;bind, "\n";</pre></blockquote>

<p>Which yields:</p>

<blockquote><pre class="code">&lt;ButtonRelease-2&gt;</pre></blockquote>

<p>This is as expected. Remember, all other Button bindings are
<em class="emphasis">class</em> bindings.
</p>

<p><a href="ch15_02.htm">Table 15-5</a> shows <tt class="literal">bind</tt> syntax.
<tt class="literal">tag</tt> represents a Tk class name, a widget
reference, or a symbolic <tt class="literal">bindtags</tt> tag. We examine
<tt class="literal">bindtags</tt> in the next section.
</p>

</th>
<th>
<p>Comments</p>
</th>
</tr>


<tr>
<td>
<blockquote><pre class="code">$w-&gt;bind;</pre></blockquote>
</td>
<td>
<p>Query <tt class="literal">$w</tt> for its event descriptors (same as
<tt class="literal">$w-&gt;bind($w);</tt>).
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">$w-&gt;bind(<em class="replaceable"><tt>tag</tt></em>);</pre></blockquote>
</td>
<td>
<p>Query <em class="replaceable"><tt>tag</tt></em> for its event descriptors.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">$w-&gt;bind(<em class="replaceable"><tt>event_descriptor</tt></em>);</pre></blockquote>
</td>
<td>
<p>Query <tt class="literal">$w</tt>'s
<em class="replaceable"><tt>event_descriptor</tt></em> for its callback.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">$w-&gt;bind(<em class="replaceable"><tt>tag, event_descriptor</tt></em>);</pre></blockquote>
</td>
<td>
<p>Query <em class="replaceable"><tt>tag's</tt></em>
<em class="replaceable"><tt>event_descriptor</tt></em>for its callback.
</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">$w-&gt;bind(<em class="replaceable"><tt>event_descriptor</tt></em> =&gt;
              <em class="replaceable"><tt>callback</tt></em>);</pre></blockquote>
</td>
<td>
<p>Set callback for <tt class="literal">$w</tt>.</p>
</td>
</tr>
<tr>
<td>
<blockquote><pre class="code">$w-&gt;bind(<em class="replaceable"><tt>tag</em>, <em class="replaceable">event_descriptor</tt></em> =&gt;
              <em class="replaceable"><tt>callback</tt></em>);</pre></blockquote>
</td>
<td>
<p>Set callback for <tt class="literal">tag</tt>.</p>
</td>
</tr>

</table><p>

<p><a name="INDEX-2411" /><a name="INDEX-2412" /><a name="INDEX-2413" />There are two
callback formats we haven't yet talked about. They both query
for the actual callback associated with an event descriptor, and you
might wonder how they can be useful in the Perl/Tk world, where
callbacks are code references. Well, the callbacks may be method
names as well, and if we query for a callback, we might get a method
name (as a string) instead of a code reference. One thing we can do
with this information is write a drop-in replacement for the named
subroutine in a widget subclass. Tk will invoke our new subroutine in
deference to the superclass method. We can simulate this in
non-mega-widget code using the <tt class="literal">_ _PACKAGE_ _</tt>
construct. Here's a way of rewriting the previous instance
binding as a fake method name:
</p>

<blockquote><pre class="code">$b-&gt;bind('&lt;ButtonRelease-2&gt;' =&gt; __PACKAGE__ . '::twice');</pre></blockquote>

<p>Now Tk invokes the named subroutine in the named package (usually
package <tt class="literal">main</tt>). You do not want to qualify the
subroutine with an explicit package name in a mega-widget, though;
Perl will find the method via its normal lookup mechanism.
</p>

<p>Here is example code for a hypothetical calculator that binds the
digits and arithmetic operators that drive the calculator, including
those on the numeric keypad:
</p>

<blockquote><pre class="code">foreach my $key ( qw/0 1 2 3 4 5 6 7 8 9/ ) {
    $mw-&gt;bind( "&lt;Key-$key&gt;" =&gt; [\&amp;key, $key] );
    $mw-&gt;bind( "&lt;KP_$key&gt;"  =&gt; [\&amp;key, $key] );
}

foreach my $key ( qw/period KP_Decimal/ ) {
    $mw-&gt;bind( "&lt;$key&gt;"     =&gt; [\&amp;key, '.'] );
}

foreach my $key ( qw/Return KP_Enter/ ) {
    $mw-&gt;bind( "&lt;$key&gt;"     =&gt;  \&amp;enter );
}

foreach my $key ( qw/plus KP_Add/ ) {
    $mw-&gt;bind( "&lt;$key&gt;"     =&gt; [\&amp;math3, $ad, $io,   undef] );
}

foreach my $key ( qw/minus KP_Subtract/ ) {
    $mw-&gt;bind( "&lt;$key&gt;"     =&gt; [\&amp;math3, $sb, undef, undef] );
}

foreach my $key ( qw/asterisk KP_Multiply/ ) {
    $mw-&gt;bind( "&lt;$key&gt;"     =&gt; [\&amp;math3, $ml, $an,     $dm] );
}

foreach my $key ( qw/slash KP_Divide/ ) {
    $mw-&gt;bind( "&lt;$key&gt;"     =&gt; [\&amp;math3, $dv, $xr,     $dd] );
}

$mw-&gt;bind( '&lt;Delete&gt;'       =&gt; \&amp;bspclrx );</pre></blockquote>

</div>
<a name="mastperltk-CHP-15-SECT-2.5" /><div class="sect2">
<h3 class="sect2">15.2.5. Binding to a MouseWheel Event</h3>

<p><a name="INDEX-2414" /><a name="INDEX-2415" /><a name="INDEX-2416" /><a name="INDEX-2417" />Many
machines of an Intel architecture include an IntelliMouse, a mouse
with a wheel sandwiched between its two buttons. In a Unix
environment, Linux in particular, the wheel acts as the middle
button. Thus, one has full three-button capabilities. In a Win32
environment, however, the wheel serves as a scrolling device. As it
happens, Tk can also use the wheel to scroll.
</p>

<p><a name="INDEX-2418" /><a name="INDEX-2419" />The following code is taken from Slaven
Rezic's post on <em class="emphasis">comp.lang.perl.tk</em>. At
last, we Unix Perl/Tk-ers can use the <tt class="literal">MouseWheel</tt>
event. Slaven tested the code under NT, and we have tested it under
Linux.
</p>

<p>Until <tt class="literal">BindMouseWheel</tt> becomes part of core Perl/Tk,
you can use code similar to this:
</p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w
use Tk;
use strict;

my $mw = MainWindow-&gt;new;
my $t = $mw-&gt;Text-&gt;pack;
$t-&gt;insert('end', "line $_\n") for (1 .. 200);
$t-&gt;focus;

&amp;BindMouseWheel($t);

MainLoop;

sub BindMouseWheel {

    my($w) = @_;

    if ($^O eq 'MSWin32') {
        $w-&gt;bind('&lt;MouseWheel&gt;' =&gt;
            [ sub { $_[0]-&gt;yview('scroll', -($_[1] / 120) * 3, 'units') },
                Ev('D') ]
        );
    } else {

       # Support for mousewheels on Linux commonly comes through
       # mapping the wheel to buttons 4 and 5.  If you have a
       # mousewheel ensure that the mouse protocol is set to
       # "IMPS/2" in your /etc/X11/XF86Config (or XF86Config-4)
       # file:
       #
       # Section "InputDevice"
       #     Identifier  "Mouse0"
       #     Driver      "mouse"
       #     Option      "Device" "/dev/mouse"
       #     Option      "Protocol" "IMPS/2"
       #     Option      "Emulate3Buttons" "off"
       #     Option      "ZAxisMapping" "4 5"
       # EndSection

        $w-&gt;bind('&lt;4&gt;' =&gt; sub {
            $_[0]-&gt;yview('scroll', -3, 'units') unless $Tk::strictMotif;
        });

        $w-&gt;bind('&lt;5&gt;' =&gt; sub {
                  $_[0]-&gt;yview('scroll', +3, 'units') unless $Tk::strictMotif;
        });
    }

} # end BindMouseWheel</pre></blockquote>

<p><a name="INDEX-2420" />There's an
interesting item here. Notice the funny <tt class="literal">Ev('D')</tt>
construct in the Win32 callback. This is the Perl/Tk way of
postponing argument evaluation until the callback is executed. Here,
it's the <tt class="literal">D</tt> field
(<tt class="literal">MouseWheel</tt> delta) from the event structure.
Equivalently, we could omit the <tt class="literal">Ev</tt> call and use
the Tk::event object to manually fetch the mousewheel delta within
the callback:
</p>

<blockquote><pre class="code">my $delta = $Tk::event-&gt;D;</pre></blockquote>

<p>where <tt class="literal">$delta</tt> corresponds to
<tt class="literal">$_[1]</tt> in the callback.
</p>

<p><tt class="literal">Ev</tt> is even more sophisticated. You can pass it yet
another Perl/Tk callback that doesn't get evaluated until the
main event callback is executed. And <tt class="literal">Ev</tt> is
recursive, so an <tt class="literal">Ev</tt> call can contain other
<tt class="literal">Ev</tt> calls.<a name="INDEX-2421" /><a name="INDEX-2422" /> 
</p>

</div>
<a name="mastperltk-CHP-15-SECT-2.6" /><div class="sect2">
<h3 class="sect2">15.2.6. Canvas Bindings</h3>

<p><a name="INDEX-2423" /><a name="INDEX-2424" />Some final notes. A Canvas widget has its
own <tt class="literal">bind</tt> method that binds callbacks to individual
Canvas items rather than the Canvas as a whole. Unsurprisingly, the
syntax parallels the normal <tt class="literal">bind</tt>:
</p>

<blockquote><pre class="code">$canvas-&gt;bind(<em class="replaceable"><tt>tagorid</em>, <em class="replaceable">event_descriptor</em> =&gt; <em class="replaceable">callback</tt></em>);</pre></blockquote>

<p><a name="INDEX-2425" />where
<em class="replaceable"><tt>tagorid</tt></em> identifies the particular Canvas
item. To create a binding for the Canvas instance, we use this
special method:
</p>

<blockquote><pre class="code">$canvas-&gt;CanvasBind(<em class="replaceable"><tt>event_descriptor</em> =&gt; <em class="replaceable">callback</tt></em>);</pre></blockquote>

<p>If <tt class="literal">CanvasBind</tt> isn't available with your
version of Perl/Tk, you can always fall back to the old syntax:
</p>

<blockquote><pre class="code">$canvas-&gt;Tk::bind(<em class="replaceable"><tt>event_descriptor</em> =&gt; <em class="replaceable">callback</tt></em>);</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">15. Anatomy of the MainLoop</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">15.3. The bindtags Command</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>
