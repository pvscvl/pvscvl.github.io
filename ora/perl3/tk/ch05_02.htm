<html><head><title>The Entry Widget (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">5.2. The Entry Widget</h2>

<p>Until now, the only input we knew how to get from the user was a
mouseclick on a Button widget (Button, Checkbutton, or Radiobutton),
which is handled via the <tt class="literal">-command</tt> option. Getting
input from a mouseclick is useful, but it's also limiting. The
Entry widget (<a href="ch05_02.htm">Figure 5-5</a>) will let the user type in
text that can then be used in any way by the application. Here are a
few examples of where you might use an Entry widget:
</p>

<ul><li>
<p>In a database form that requires one entry per field (e.g., Name,
Last name, Address)
</p>
</li><li>
<p>In a software registration window that requires a serial number</p>
</li><li>
<p>In a login window that requires a username and password</p>
</li><li>
<p>In a configuration window to get the name of a printer</p>
</li><li>
<p>In an Open File window that requires the path and name of a file</p>
</li></ul>
<a name="mastperltk-CHP-5-FIG-5" /><div class="figure"><img src="figs/mptk.0505.gif" alt="Figure 5-5" width="141" height="27" /></div><h4 class="objtitle">Figure 5-5. Entry widget</h4>

<p>Normally, we don't care what users type in an Entry widget
until they are done typing, and any processing will happen
"after the fact" when a user clicks some sort of Go
Button. You could get fancy and process each character as it's
typed by setting up a complicated <tt class="literal">bind</tt>, but
it's probably more trouble than it's worth.
</p>

<p>The user can type anything into an Entry widget. It is up to you to
decide whether the text entered is valid or not. When preparing to
use the information from an Entry, we should do some error checking.
If we want an integer but get some alphabetic characters, we should
issue a warning or error message to the user.
</p>

<p><a name="INDEX-710" />An Entry widget
is much more complex than it first appears to be. The Entry widget is
really a simplified one-line text editor. Text can be typed in,
selected with the mouse, deleted, and added. An Entry widget is a
middle-of-the-line widget; it's more complicated than a Button,
but much less complicated than the Text or Canvas widget.
</p>

<a name="mastperltk-CHP-5-SECT-2.1" /><div class="sect2">
<h3 class="sect2">5.2.1. Creating the Entry Widget</h3>

<p>No surprises here:</p>

<blockquote><pre class="code">$entry = $parent-&gt;Entry( <em class="replaceable"><tt>[ option =&gt; value . . . ] </tt></em>)-&gt;pack;</pre></blockquote>

<p>When the Entry widget is created, it is initially empty of any text,
and the insert cursor (if the Entry had the keyboard focus) is at the
far-left side.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.2" /><div class="sect2">
<h3 class="sect2">5.2.2. Entry Options</h3>

<p>The following list contains a short description of each option
available for configuring an Entry widget. Several of the options are
discussed in more detail later in this chapter.
</p>

<dl>
<dt><tt class="literal">-background =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-711" />Sets the background color of the
Entry widget. This is the area behind the text.
</p>
</dd>


<dt><tt class="literal">-borderwidth =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-712" />Changes the width of the outside
edge of the widget. Default value is 2.
</p>
</dd>


<dt><tt class="literal">-cursor =&gt;</tt> <tt><em class="replaceable"><tt>cursorname</tt></em></tt></dt>
<dd>
<a name="INDEX-713" />Changes the cursor to
<tt><em class="replaceable"><tt>cursorname</tt></em></tt> when it is over the widget.
</p>
</dd>


<dt><tt class="literal">-exportselection =&gt; 0 |</tt> <tt class="userinput"><b>1</b></tt> </dt>
<dd>
<a name="INDEX-714" />If the Boolean value specified is
true, any text selected and copied will be exported to the windowing
system's clipboard.
</p>
</dd>


<dt><tt class="literal">-font =&gt;</tt> <tt><em class="replaceable"><tt>fontname</tt></em></tt></dt>
<dd>
<a name="INDEX-715" />Changes the font displayed in the Entry to
<tt><em class="replaceable"><tt>fontname</tt></em></tt>.
</p>
</dd>


<dt><tt class="literal">-foreground =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-716" />Changes the color of the text.
</p>
</dd>


<dt><tt class="literal">-highlightbackground =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-717" />Sets the color the highlight rectangle
should be when the widget does not have the keyboard focus.
</p>
</dd>


<dt><tt class="literal">-highlightcolor =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-718" />Sets the color the highlight
rectangle should be when the widget does have the keyboard focus.
</p>
</dd>


<dt><tt class="literal">-highlightthickness =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-719" />Sets the thickness of the highlight
rectangle around the widget. Default is 2.
</p>
</dd>


<dt><tt class="literal">-insertbackground =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
Sets the color of the insert cursor.</p>
</dd>


<dt><tt class="literal">-insertborderwidth =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
Sets the width of the insert cursor's border. Normally used in
conjunction with <tt class="literal">-ipadx</tt> and
<tt class="literal">-ipady</tt> options for the geometry manager.
</p>
</dd>


<dt><tt class="literal">-insertofftime =&gt;</tt> <tt><em class="replaceable"><tt>milliseconds</tt></em></tt></dt>
<dd>
<a name="INDEX-720" />Sets the amount of time the insert
cursor is off in the Entry widget.
</p>
</dd>


<dt><tt class="literal">-insertontime =&gt;</tt> <tt><em class="replaceable"><tt>milliseconds</tt></em></tt></dt>
<dd>
Sets the amount of time the insert cursor is on in the Entry widget.</p>
</dd>


<dt><tt class="literal">-insertwidth =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
Sets the width of the insert cursor. Default is 2.</p>
</dd>


<dt><tt class="literal">-invalidcommand =&gt;</tt> <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
Specifies a callback to invoke when
<tt class="literal">-validatecommand</tt> returns a false
result&#x2014;<tt class="literal">undef</tt> disables this feature
(default). Typically, just call the <tt class="literal">bell</tt> method.
</p>
</dd>


<dt><tt class="literal">-justify =&gt; '</tt><tt class="userinput"><b>left</b></tt><tt class="literal">' | 'right' | 'center'</tt></dt>
<dd>
<a name="INDEX-721" />Sets the justification of the text in the
Entry widget.
</p>
</dd>


<dt><tt class="literal">-relief =&gt; 'flat'|'groove'|'raised'|'ridge'|'</tt><tt class="userinput"><b>sunken</b></tt><tt class="literal">'|'solid'</tt></dt>
<dd>
<a name="INDEX-722" />Sets the relief of the outside edges of
the Entry widget.
</p>
</dd>


<dt><tt class="literal">-selectbackground =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-723" />Sets the background color of any selected
text in the Entry widget.
</p>
</dd>


<dt><tt class="literal">-selectborderwidth =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-724" />Sets the width of the selection
highlight's border.
</p>
</dd>


<dt><tt class="literal">-selectforeground =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-725" />Sets the text color of any selected text
in the Entry widget.
</p>
</dd>


<dt><tt class="literal">-show =&gt;</tt> <tt><em class="replaceable"><tt>char</tt></em></tt></dt>
<dd>
<a name="INDEX-726" />Sets the
character that should be displayed instead of the actual text typed.
</p>
</dd>


<dt><tt class="literal">-state =&gt; '</tt><tt class="userinput"><b>normal</b></tt><tt class="literal">' | 'disabled' | 'active'</tt></dt>
<dd>
Indicates the state of the Entry. </p>
</dd>


<dt><tt class="literal">-takefocus =&gt; 0 | 1 |</tt> <tt class="userinput"><b>undef</b></tt></dt>
<dd>
<a name="INDEX-727" />Allows or disallows this widget to
have the keyboard focus.
</p>
</dd>


<dt><tt class="literal">-textvariable =&gt; \$variable</tt></dt>
<dd>
Sets the variable associated with the information typed in the Entry
widget.
</p>
</dd>


<dt><tt class="literal">-validate =&gt;</tt> <tt><em class="replaceable"><tt>validateMode</tt></em></tt></dt>
<dd>
Specifies the events that invoke the
<tt class="literal">-validatecommand</tt> callback: <tt class="literal">none</tt>
(default), <tt class="literal">focus</tt>, <tt class="literal">focusin</tt>,
<tt class="literal">focusout</tt>, <tt class="literal">key</tt>, or
<tt class="literal">all</tt>.
</p>
</dd>


<dt><tt class="literal">-validatecommand =&gt;</tt> <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
Specifies a callback that validates the input;
<tt class="literal">undef</tt> disables this feature (default). The
callback returns false to reject the new input and invoke the
<tt class="literal">-invalidcommand</tt> callback or true to accept the
input.
</p>
</dd>


<dt><tt class="literal">-width =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
Sets the width of the Entry in characters.</p>
</dd>


<dt><tt class="literal">-xscrollcommand =&gt;</tt> <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-728" />Assigns a callback to use when
scrolling back and forth.
</p>
</dd>

</dl>

<p>The following options behave as expected; we won't discuss them
further: <tt class="literal">-background</tt>, <tt class="literal">-cursor</tt>,
<tt class="literal">-font</tt>, <tt class="literal">-highlightbackground</tt>,
<tt class="literal">-highlightcolor</tt>,
<tt class="literal">-highlightthickness</tt>,
<tt class="literal">-foreground</tt>, <tt class="literal">-justify</tt>,
<tt class="literal">-takefocus</tt>, and <tt class="literal">-state</tt>. For
more detailed information on these how these options affect a widget,
see <a href="ch03_01.htm">Chapter 3, "Fonts"</a>.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.3" /><div class="sect2">
<h3 class="sect2">5.2.3. Assigning the Entry's Contents to a Variable</h3>

<p><a name="INDEX-729" /><a name="INDEX-730" />The <tt class="literal">-textvariable</tt>
option lets you know what the user typed in the Entry widget:
</p>

<blockquote><pre class="code">-textvariable =&gt; \$variable</pre></blockquote>

<p>By now you should be familiar with this option from several of our
Button examples. Any text input to the Entry widget will get assigned
into <tt class="literal">$variable</tt>. The reverse also applies. Any
string that gets assigned to <tt class="literal">$variable</tt> will show up in the Entry widget.
</p>

<p>It is important to remember that no matter what the user enters, it
will be assigned to this variable. This means that even if you are
expecting numeric input (e.g., <tt class="userinput"><b>314</b></tt>), you might
get something like <tt class="userinput"><b>3s14</b></tt> if the user
accidentally (or on purpose!) presses the wrong key(s). Before using
any information from an Entry widget, it's a good idea to do
some error checking to make sure it's the information you
expect or, at the very least, in the correct format. Trying to use
<tt class="literal">3s14</tt> in an equation would most likely produce
undesired results.
</p>

<p><a name="INDEX-731" />The other way to find out what is in the
Entry widget is to use the <tt class="literal">get</tt> method:
</p>

<blockquote><pre class="code">$stuff = $entry-&gt;get();</pre></blockquote>

<p>You can use <tt class="literal">get</tt> whether or not you have used the
<tt class="literal">-textvariable</tt> option.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.4" /><div class="sect2">
<h3 class="sect2">5.2.4. Relief</h3>

<p><a name="INDEX-732" />As with all the widgets, you can change
the way the edges are drawn by using the <tt class="literal">-relief</tt>
and/or <tt class="literal">-borderwidth</tt> options:
</p>

<blockquote><pre class="code">-relief =&gt; 'flat' | 'groove' | 'raised' | 'ridge' | '<tt class="userinput"><b>sunken</b></tt>'
-borderwidth =&gt; <em class="replaceable"><tt><tt>amount</tt></tt></em></pre></blockquote>

<p>The default relief for an Entry is <tt class="literal">'sunken'</tt>, which
is a change from what we've seen so far. <a href="ch05_02.htm">Figure 5-6</a> shows the different relief types at different
<tt class="literal">-borderwidth</tt> values,
incrementing from the default (2) to 4 and to 10.
</p>

<a name="mastperltk-CHP-5-FIG-6" /><div class="figure"><img src="figs/mptk.0506.gif" alt="Figure 5-6" width="452" height="200" /></div><h4 class="objtitle">Figure 5-6. Different relief types for an Entry widget: -borderwidth of 2 (the default), 4, and 10</h4>

<p>This is the code snippet that created the five Entry widgets and used
the relief name as the Entry widget's text:
</p>

<blockquote><pre class="code">foreach (qw/flat groove raised ridge sunken/) {
  $e = $mw-&gt;Entry(-relief =&gt; $_)-&gt;pack(-expand =&gt; 1);
  $e-&gt;insert('end', $_);  # put some text in the Entry
}</pre></blockquote>

</div>
<a name="mastperltk-CHP-5-SECT-2.5" /><div class="sect2">
<h3 class="sect2">5.2.5. Entry Indexes</h3>

<p>To manipulate the text in the Entry widget, you need some way to
identify specific portions or positions within the text. The last
example actually used an index in it. The line
<tt class="literal">$e-&gt;insert('end',</tt> <tt class="literal">$_)</tt> uses
the index <tt class="literal">'end'</tt>. Just like the
<tt class="literal">insert</tt> method (covered later in the chapter), all
of the methods that require information about a position will ask for
an index (or two, if the method requires a range of characters). This
index can be as simple as 0, meaning the very beginning of the text,
or something more complicated, such as <tt class="literal">'insert'</tt>.
</p>

<p>Here are the different forms of index specification and what they
mean:
</p>

<dl>
<dt><i><tt><em class="replaceable"><tt>n</tt></em></tt> (any integer)</i></dt>
<dd>
A numerical character position. 0 is the first character in the
string. If the Entry contains the string <tt class="literal">"My mother hit your
mother right on the nose"</tt> and we use an index of 12, the
character pointed to is the <tt class="literal">t</tt> in the word
<tt class="literal">hit</tt>.
</p>
</dd>


<dt><tt class="literal">'insert'</tt></dt>
<dd>
The character directly following the insertion cursor. The insertion
cursor is that funny-looking little bar thing that shows up inside
the Entry widget when text is typed. You can move it around with the
arrow keys or by clicking on a different location in the Entry
widget.
</p>
</dd>


<dt><tt class="literal">'sel.first'</tt></dt>
<dd>
The first character in the selection string. This will produce an
error if there is no selection. The selection string is the string
created by using the mouse or Shift-arrow. The selected text is
slightly raised from the background of the Entry.
</p>

<p>If our selected text was the word <tt class="literal">nose</tt> in this
string (shown here in bold):
</p>

<blockquote><pre class="code">My mother hit your mother right on the <tt class="userinput"><b>nose</b></tt></pre></blockquote>

<p><tt class="literal">'sel.first'</tt> would indicate the
<tt class="literal">n</tt>.
</p>
</dd><dt><tt class="literal">'sel.last'</tt></dt>
<dd>
The character just after the last character in the selection string.
This will also produce an error if there is no selection in the Entry
widget. In the preceding example, this would mean the space after the
<tt class="literal">e</tt> in <tt class="literal">nose</tt>.
</p>
</dd>


<dt><tt class="literal">'anchor'</tt></dt>
<dd>
The <tt class="literal">'anchor'</tt> index changes depending on what has
happened with the selection in the Entry widget. By default, it
starts at the far left of the Entry: 0. It will change if you click
anywhere in the Entry widget with the mouse. The new value will be at
the index you clicked on. The <tt class="literal">'anchor'</tt> index will
also change when a new selection is made&#x2014;either with the mouse
(which means the <tt class="literal">'anchor'</tt> will be wherever you
clicked with the mouse) or by Shift-clicking&#x2014;and
<tt class="literal">'anchor'</tt> will be set to where the selection
starts. Mostly, this index is used internally, and you'll
rarely find a case where it would be useful in an application.
</p>
</dd>


<dt><tt class="literal">'end'</tt></dt>
<dd>
The character just after the last one in the text string. This value
is the same as if you specified the length of the entire string as an
integer index.
</p>
</dd>


<dt><tt class="literal">'@</tt><tt><em class="replaceable"><tt>x</tt></em></tt><tt class="literal">'</tt></dt>
<dd>
This form uses an x coordinate in the Entry widget. The character
that contains this x coordinate will be used. <tt class="literal">"@0"</tt>
indicates the leftmost (or first) character in the Entry widget. This
form of index specification is also one you'll rarely use.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-5-SECT-2.6" /><div class="sect2">
<h3 class="sect2">5.2.6. Text Selection Options</h3>

<p><a name="INDEX-733" /><a name="INDEX-734" /><a name="INDEX-735" />You can select the text in an Entry
widget and make several things happen. The indexes
<tt class="literal">'sel.first'</tt> and <tt class="literal">'sel.last'</tt>
point to the beginning and end of the selected text, respectively.
You can also make the selected text available on the clipboard on a
Unix system by using the <tt class="literal">-exportselection</tt> option:
</p>

<blockquote><pre class="code">-exportselection =&gt; 0 | <tt class="userinput"><b>1</b></tt> </pre></blockquote>

<p>The <tt class="literal">-exportselection</tt> option indicates whether or
not any selected text in the Entry will be put in the selection
buffer in addition to being stored internal to the Entry as a
selection. By leaving this option's default value, you can
paste selected text into other applications.
</p>

<p><a name="INDEX-736" /><a name="INDEX-737" /><a name="INDEX-738" />The selected text also has some color
options associated with it:
<tt class="literal">-selectbackground</tt>,<tt class="literal">-selectforeground</tt>, and
<tt class="literal">-selectborderwidth</tt>:
</p>

<blockquote><pre class="code">-selectbackground =&gt; <tt><em class="replaceable">color</em></tt>
-selectforeground =&gt; <tt><em class="replaceable">color</em></tt>
-selectborderwidth =&gt; <tt><em class="replaceable">amount</em></tt></pre></blockquote>

<p>The <tt class="literal">-selectbackground</tt> and
<tt class="literal">-selectforeground</tt> options
change the color of the text and the area behind the text when that
text is highlighted. In <a href="ch05_02.htm">Figure 5-7</a>, the word
"text" is selected.
</p>

<a name="mastperltk-CHP-5-FIG-7" /><div class="figure"><img src="figs/mptk.0507.gif" alt="Figure 5-7" width="305" height="75" /></div><h4 class="objtitle">Figure 5-7. Entry with -selectbackground =&gt; 'red' and -selectforeground =&gt; 'yellow'</h4>

<p><a name="INDEX-739" />You can change the width of the edge of
that selection box by using <tt class="literal">-selectborderwidth</tt>. If
you left the size of the Entry widget unchanged, you wouldn't
see the effects of it. The Entry widget cuts off the selection box.
To actually see the results of increasing the
<tt class="literal">-selectborderwidth</tt> value, use the
<tt class="literal">-selectborderwidth</tt> option in the Entry command and
<tt class="literal">-ipadx</tt> and <tt class="literal">-ipady</tt> in the
geometry management command. <a href="ch05_02.htm">Figure 5-8</a> illustrates
<tt class="literal">-selectborderwidth</tt>.
</p>

<a name="mastperltk-CHP-5-FIG-8" /><div class="figure"><img src="figs/mptk.0508.gif" alt="Figure 5-8" width="228" height="86" /></div><h4 class="objtitle">Figure 5-8. Entry widget with -selectborderwidth =&gt; 5</h4>

<p>You might want to change the <tt class="literal">-selectborderwidth</tt>
option if you like a little extra space around your text or if you
really want to emphasize the selected text. Here's the code
that generated the Entry widget in <a href="ch05_02.htm">Figure 5-8</a>:
</p>

<blockquote><pre class="code">$e = $mw-&gt;Entry(-selectborderwidth =&gt; 10)-&gt;pack(-expand =&gt; 1, 
                                                -fill =&gt; 'x',
                                                -ipadx =&gt; 10,
                                                -ipady =&gt; 10);
$e-&gt;insert('end', "Select the word text in this Entry");</pre></blockquote>

<p>Notice the <tt class="literal">-ipadx</tt> and <tt class="literal">-ipady</tt>
options in the <tt class="literal">pack</tt> command.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.7" /><div class="sect2">
<h3 class="sect2">5.2.7. The Insert Cursor</h3>

<p>The insert cursor is that funny-looking little bar that blinks on and
off inside the Entry widget when it has the keyboard focus. It will
only show up when the Entry widget actually has the keyboard focus.
If another widget (or none) has the keyboard focus, the insertion
cursor remains but is invisible. In <a href="ch05_02.htm">Figure 5-9</a>, the
insertion cursor is immediately after the second "n" in
the word "Insertion."
</p>

<a name="mastperltk-CHP-5-FIG-9" /><div class="figure"><img src="figs/mptk.0509.gif" alt="Figure 5-9" width="138" height="70" /></div><h4 class="objtitle">Figure 5-9. Default insertion cursor</h4>

<p>You can change the thickness, border width, and width of the
insertion cursor by using these options:
</p>

<blockquote><pre class="code">-insertbackground =&gt; <tt><em class="replaceable">color</em></tt>
-insertborderwidth =&gt; <tt><em class="replaceable">amount</em></tt>
-insertwidth =&gt; <tt><em class="replaceable">amount</em></tt></pre></blockquote>

<p>The <tt class="literal">-insertwidth</tt> option changes the width of the
cursor so it looks fatter. The <tt class="literal">-insertbackground</tt>
option changes the overall color of the insertion cursor. <a href="ch05_02.htm">Figure 5-10</a> shows an example.
</p>

<a name="mastperltk-CHP-5-FIG-10" /><div class="figure"><img src="figs/mptk.0510.gif" alt="Figure 5-10" width="138" height="70" /></div><h4 class="objtitle">Figure 5-10. Insertion cursor with -insertbackground =&gt; 'green' and -insertwidth =&gt; 10</h4>

<p>No matter how wide the cursor, it is always centered over the
position between two characters. The insertion cursor in <a href="ch05_02.htm">Figure 5-10</a> is in the same location it was in <a href="ch05_02.htm">Figure 5-9</a>. This can look distracting to users and might
just confuse them unnecessarily, so you most likely won't
change the <tt class="literal">-insertwidth</tt> option.
</p>

<p>You can give the insertion cursor a 3D look by using
<tt class="literal">-insertborderwidth</tt> (as in <a href="ch05_02.htm">Figure 5-11</a>). Like the <tt class="literal">-insertwidth</tt>
option, the <tt class="literal">-insertborderwidth</tt> option
doesn't have much practical use.
</p>

<a name="mastperltk-CHP-5-FIG-11" /><div class="figure"><img src="figs/mptk.0511.gif" alt="Figure 5-11" width="138" height="70" /></div><h4 class="objtitle">Figure 5-11. -insertborderwidth =&gt; 5, -insertbackground =&gt; 'green', and -insertwidth =&gt; 10</h4>

<p>You can change the amount of time the cursor blinks on and off by
using these options:
</p>

<blockquote><pre class="code">-insertofftime =&gt; <tt><em class="replaceable">time</em></tt>
-insertontime =&gt; <tt><em class="replaceable">time</em></tt></pre></blockquote>

<p><a name="INDEX-740" /><a name="INDEX-741" />The default value for
<tt class="literal">-insertofftime</tt> is 300 milliseconds. The default
for <tt class="literal">-insertontime</tt> is 600
milliseconds. The default values make the cursor's blink stay
on twice as long as it is off. Any value specified for these options
must be nonnegative.
</p>

<p>For a really frantic-looking cursor, change both values to something
much smaller. For a relaxed and mellow cursor, double the default
times. If you don't like a blinking cursor, change
<tt class="literal">-insertofftime</tt> to 0.<a name="INDEX-742" /> 
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.8" /><div class="sect2">
<h3 class="sect2">5.2.8. Password Entries</h3>

<p><a name="INDEX-743" /><a name="INDEX-744" />There are times when
you'll request information from the user that shouldn't
be displayed on the screen. To display something other than the
actual text typed in, use the <tt class="literal">-show</tt> option:
</p>

<blockquote><pre class="code">-show =&gt; <tt><em class="replaceable">char</em></tt></pre></blockquote>

<p>The <tt><em class="replaceable">char</em></tt> is a single character that will
be displayed instead of the typed-in characters. For a password
Entry, you might use asterisks (see <a href="ch05_02.htm">Figure 5-12</a>). If
you specify a string, just the first character of that string will be
used. By default, this value is undefined, and whatever the user
actually typed will show.
</p>

<a name="mastperltk-CHP-5-FIG-12" /><div class="figure"><img src="figs/mptk.0512.gif" alt="Figure 5-12" width="138" height="70" /></div><h4 class="objtitle">Figure 5-12. Entry displaying a password</h4>

<p>When using the <tt class="literal">-show</tt> option, the information
stored in the associated <tt class="literal">$variable</tt> will contain
the real information, not the asterisks.
</p>

<p><a name="INDEX-745" />If you use this feature, the user
can't cut and paste the password (regardless of the value of
<tt class="literal">-exportselection</tt>). If it is cut and pasted to
another screen, what the user saw on the screen (e.g., the asterisks)
is actually pasted, not the information behind it. You might think
that if you did a <tt class="literal">configure</tt> on the Entry widget,
such as <tt class="literal">$entry-&gt;configure(-show</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">"");</tt>,the words the user entered would suddenly appear. Luckily,
this isn't true. A bunch of <tt class="literal">\x0</tt> s
(essentially gibberish) show up instead. Any variable that uses the
<tt class="literal">-textvariable</tt> option and is associated with the
Entry will still contain the correct information. If you perform an
<tt class="literal">$entry-&gt;get( )</tt>, the correct (nongibberish)
information will be returned. The <tt class="literal">get</tt> method is
described later in this chapter.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.9" /><div class="sect2">
<h3 class="sect2">5.2.9. Entry Widget Validation</h3>

<p>You can perform input validation as characters are typed in an Entry
widget, although, by default, validation is disabled. You enable
validation using the <tt class="literal">-validate</tt> option, specifiying
what events trigger your validation subroutine. The possible values
for this option are <tt class="literal">focus</tt> and
<tt class="literal">focusin</tt> (when the Entry gets the keyboard focus),
<tt class="literal">focusout</tt> (when the Entry loses focus),
<tt class="literal">key</tt> (on any key press), or <tt class="literal">all</tt>.
</p>

<p>The <tt class="literal">-validatecommand</tt> callback should return true
to accept the input or false to reject it. When false is returned,
the <tt class="literal">-invalidcommand</tt> callback is executed.
</p>

<p>The -<tt class="literal">validatecommand</tt> and
<tt class="literal">-invalidcommand</tt> callbacks are called with these
arguments:
</p>

<ul><li>
<p>The proposed value of the Entry (the value of the text variable too)</p>
</li><li>
<p>The characters to be added or deleted; <tt class="literal">undef</tt> if
called due to focus, explicit call, or change in text variable
</p>
</li><li>
<p>The current value before the proposed change</p>
</li><li>
<p>The index of the string to be added/deleted, if any; otherwise, -1</p>
</li><li>
<p>The type of action: 1 for insert, 0 for delete, -1 if a forced
validation or text variable validation
</p>
</li></ul>
<p>This Entry ensures that characters are restricted to those in the
string <tt class="literal">"perl/Tk"</tt>, without regard to case:
</p>

<blockquote><pre class="code">my $e = $mw-&gt;Entry(
    -validate        =&gt; 'key',
    -validatecommand =&gt; sub {$_[1] =~ /[perl\/Tk]/i},
    -invalidcommand  =&gt; sub {$mw-&gt;bell},
)-&gt;pack;</pre></blockquote>

</div>
<a name="mastperltk-CHP-5-SECT-2.10" /><div class="sect2">
<h3 class="sect2">5.2.10. Using a Scrollbar</h3>

<p><a name="INDEX-746" /><a name="INDEX-747" />If
the information requested from the user could get lengthy, the user
can use the arrow keys to manually scroll through the text. To make
it easier, we can create and assign a horizontal Scrollbar to the
Entry widget by using the <tt class="literal">-xscrollcommand</tt> option:
</p>

<blockquote><pre class="code">-xscrollcommand =&gt; [ 'set' =&gt; $scrollbar ]</pre></blockquote>

<p>For now, we're going to show you the most basic way to assign a
Scrollbar to the Entry widget. For more details on the Scrollbar, see
<a href="ch06_01.htm">Chapter 6, "The Scrollbar Widget"</a>.
</p>

<p>The following code creates a Scrollbar and associates it with an
Entry widget:
</p>

<blockquote><pre class="code">$scroll = $mw-&gt;Scrollbar(-orient =&gt; "horizontal"); # create Scrollbar
$e = $mw-&gt;Entry(-xscrollcommand =&gt; [ 'set' =&gt; $scroll ])-&gt;
  pack(-expand =&gt; 1, -fill =&gt; 'x'); # create Entry
$scroll-&gt;pack(-expand =&gt; 1, -fill =&gt; 'x');
$scroll-&gt;configure(-command =&gt; [ $e =&gt; 'xview' ]); # link them
$e-&gt;insert('end', "Really really really long text string");</pre></blockquote>

<p><a href="ch05_02.htm">Figure 5-13</a> shows the resulting window in two
states: on the left, the window as it looked when it was created, and
on the right, how it looks after scrolling all the way to the right.
</p>

<a name="mastperltk-CHP-5-FIG-13" /><div class="figure"><img src="figs/mptk.0513.gif" alt="Figure 5-13" width="338" height="89" /></div><h4 class="objtitle">Figure 5-13. Scrollbar and an Entry widget</h4>

<p>You'll rarely want to use a Scrollbar with an Entry widget. The
Scrollbar doubles the amount of space taken, and you can get the same
functionality without it by simply using the arrow keys when the
Entry widget has the focus. If the user needs to enter multiple lines
of text, you should use a Text widget instead. See <a href="ch08_01.htm">Chapter 8, "The Text, TextUndo,and ROText Widgets"</a> for more information on what a Text widget can
do.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.11" /><div class="sect2">
<h3 class="sect2">5.2.11. Configuring an Entry Widget</h3>

<p><a name="INDEX-748" />Both <tt class="literal">cget</tt> and <tt class="literal">configure</tt> are the
same for the Entry widget as they are for any of the other widgets.
The default options for the Entry widget are listed in <a href="ch13_01.htm">Chapter 13, "Miscellaneous Perl/Tk Methods"</a>. 
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.12" /><div class="sect2">
<h3 class="sect2">5.2.12. Deleting Text</h3>

<p>You can use the <tt class="literal">delete</tt> method when you want to
remove some or all of the text from the Entry widget. You can specify
a range of indexes to remove two or more characters or a single index
to remove one character:
</p>

<blockquote><pre class="code">$entry-&gt;delete(<tt><em class="replaceable">firstindex, [ lastindex ]</em></tt>)</pre></blockquote>

<p>To remove all the text, you can use
<tt class="literal">$entry-&gt;delete(0,</tt> <tt class="literal">'end')</tt>. If
you use the <tt class="literal">-textvariable</tt> option, you can also
delete the contents by reassigning the variable to an empty string:
<tt class="literal">$variable = ""</tt>.
</p>

<p>Here are some other examples of how to use the
<tt class="literal">delete</tt> method:
</p>

<blockquote><pre class="code">$entry-&gt;delete(0);        # Remove only the first character
$entry-&gt;delete(1);        # Remove the second character

$entry-&gt;delete('sel.first', 'sel.last')  # Remove selected text
   if $entry-&gt;selectionPresent();        # if present</pre></blockquote>

</div>
<a name="mastperltk-CHP-5-SECT-2.13" /><div class="sect2">
<h3 class="sect2">5.2.13. Getting the Contents of an Entry Widget</h3>

<p><a name="INDEX-749" /><a name="INDEX-750" />There are two ways to determine the
content of the Entry widget: the <tt class="literal">get</tt> method or the
variable associated with the <tt class="literal">-textvariable</tt> option.
Using the <tt class="literal">get</tt> method, <tt class="literal">$entry_text =
$entry-&gt;get()</tt> will assign the entire content of the
Entry widget into <tt class="literal">$entry_text</tt>.
</p>

<p>How you access the content depends on what you are going to do with
the information. If you only need to reference it once in order to
write it to a file or insert it into a database, it doesn't
make sense to waste memory by storing it in a variable. Simply use
the <tt class="literal">get</tt> method in the <tt class="literal">print</tt>
statement (or wherever it would be appropriate). If the information
in the Entry widget is going to be a frequently used value, such as a
number for a mathematical calculation, then it makes sense to
initially store it in a variable for easy access later.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.14" /><div class="sect2">
<h3 class="sect2">5.2.14. Moving the Insertion Cursor</h3>

<p><a name="INDEX-751" /><a name="INDEX-752" />The <tt class="literal">icursor</tt> method
will place the cursor at the specified
<tt><em class="replaceable">index</em></tt>:
</p>

<blockquote><pre class="code">$entry-&gt;icursor(<tt><em class="replaceable">index</em></tt>);</pre></blockquote>

<p>By default, the insertion cursor starts out wherever the last
<tt class="literal">insert</tt> took place. To force the insertion cursor
to show up elsewhere, you could do something like this:
</p>

<blockquote><pre class="code">$e_txt = "Entry Text";
$e = $mw-&gt;Entry(-textvariable =&gt; \$e_txt)-&gt;pack( );
$e-&gt;focus;
$e-&gt;icursor(1); # put cursor at this index</pre></blockquote>

<p><a name="INDEX-753" />We use the
<tt class="literal">focus</tt> method (which is not specific to the Entry
widget; it's generic to all widgets) to have the application
start with the focus on our Entry widget. Then we place the insertion
cursor between the first and second characters (indexes 0 and 1) in
the Entry. See <a href="ch13_01.htm">Chapter 13, "Miscellaneous Perl/Tk Methods"</a> for more information on
<tt class="literal">focus</tt>.
</p>

<p>You might want to move the starting position of your cursor if you
are starting the text with a specific string. For instance, set
<tt class="literal">$e_txt</tt> <tt class="literal">=</tt>
<tt class="literal">"http://"</tt> and then
<tt class="literal">$e-&gt;icursor('end')</tt>.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.15" /><div class="sect2">
<h3 class="sect2">5.2.15. Getting a Numeric Index Value</h3>

<p><a name="INDEX-754" />The <tt class="literal">index</tt> method will
convert a named index into a numeric one:
</p>

<blockquote><pre class="code">$numindex = $entry-&gt;index(index) ;</pre></blockquote>

<p>One of the uses of <tt class="literal">index</tt> is to find out how many
characters are in the Entry widget: <tt class="literal">$length =
$entry-&gt;index('end')</tt>. Of course, if we used the
<tt class="literal">-textvariable</tt> option, we
could get the same result by using <tt class="literal">$length =
length($variable)</tt>.
</p>

<p>As an example of using <tt class="literal">index</tt> to find where the
current selection starts, use this code:
</p>

<blockquote><pre class="code">$startindex = $entry-&gt;selectionPresent() ? 
                $entry-&gt;index('sel.first') : -1;</pre></blockquote>

<p>We discuss <tt class="literal">selectionPresent</tt> later in the chapter.</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.16" /><div class="sect2">
<h3 class="sect2">5.2.16. Inserting Text</h3>

<p>The <tt class="literal">insert</tt> function will let you insert any text
string at the specified index:
</p>

<blockquote><pre class="code">$entry-&gt;insert(<tt><em class="replaceable">index</em></tt>, <tt><em class="replaceable">string</em></tt>);</pre></blockquote>

<p>Here's a simple application that uses <tt class="literal">insert</tt>:</p>

<blockquote><pre class="code">#!/usr/bin/perl
use Tk;
$mw = MainWindow-&gt;new;
$mw-&gt;title("Entry");

$e_txt = "Entry Text";    # Create Entry with initial text
$e = $mw-&gt;Entry(-textvariable =&gt; \$e_txt)-&gt;pack(-expand =&gt; 1,
                                                -fill =&gt; 'x');
$mw-&gt;Button(-text =&gt; "Exit",
            -command =&gt; sub { exit })-&gt;pack(-side =&gt; 'bottom');

# Create a Button that will insert a counter at the cursor
$i = 1;
$mw-&gt;Button(-text =&gt; "Insert #", -command =&gt; 
            sub { 
              if ($e-&gt;selectionPresent( )) {
                $e-&gt;insert('sel.last', "$i"); $i++;
              }
            })-&gt;pack;
MainLoop;</pre></blockquote>

<p>We fill the Entry widget with <tt class="literal">"Entry Text"</tt> as a
default. Then we create two Buttons. The first one is the obvious
Exit Button that will allow us to quit the application. The second
one is a bit more complicated. When pressed, it will check to see if
any text is selected in the Entry <tt class="literal">$e</tt>. If text is
selected, it will insert a number that keeps track of how many times
we have pressed the Insert # Button.
</p>

<p>In <a href="ch05_02.htm">Figure 5-14</a>, we first selected the word
"Entry" and then pressed the Insert # Button four times.
Each time it was pressed, it inserted a number at the index
<tt class="literal">"sel.last"</tt>. This index didn't change in
between button presses, so it looks as if we are counting backward!
</p>

<a name="mastperltk-CHP-5-FIG-14" /><div class="figure"><img src="figs/mptk.0514.gif" alt="Figure 5-14" width="138" height="96" /></div><h4 class="objtitle">Figure 5-14. Using the insert method</h4>

</div>
<a name="mastperltk-CHP-5-SECT-2.17" /><div class="sect2">
<h3 class="sect2">5.2.17. Scanning Text</h3>

<p>Both <tt class="literal">scanMark</tt> and <tt class="literal">scanDragto</tt>
allow fast scrolling within the Entry widget. A call to
<tt class="literal">scanMark</tt> simply records the x coordinate passed in
for use later with <tt class="literal">scanDragto</tt>. It returns an empty
string.
</p>

<blockquote><pre class="code">$entry-&gt;scanMark(<tt><em class="replaceable">x</em></tt>);
$entry-&gt;scanDragto(<tt><em class="replaceable">x</em></tt>);</pre></blockquote>

<p>The companion function to <tt class="literal">scanMark</tt> is <tt class="literal">scanDragto</tt>, which also takes an x
coordinate. The new coordinate is compared to the
<tt class="literal">scanMark</tt> x coordinate. The view within the Entry
widget is adjusted by 10 times the difference between the
coordinates.
</p>

<p>And don't forget you can always drag the contents of the Entry
widget left and right by holding down mouse button 2.
</p>

</div>
<a name="mastperltk-CHP-5-SECT-2.18" /><div class="sect2">
<h3 class="sect2">5.2.18. Working with the Selection</h3>

<p><a name="INDEX-755" />The
<tt class="literal">selection</tt> method has several possible argument
lists. If you look at the web page documentation, you'll see
that you can use:
</p>

<blockquote><pre class="code">$entry-&gt;selectionAdjust(<tt><em class="replaceable">index</em></tt>). </pre></blockquote>

<p>You might also see the form <tt class="literal">$entry-&gt;selection('adjust',
index)</tt>, where <tt class="literal">'adjust'</tt> is the first
argument. Be aware that they mean the same thing as you read code
written by other people.
</p>

<p><a name="INDEX-756" />You
can adjust the selection to a specified index by using
<tt class="literal">selectionAdjust</tt>:
</p>

<blockquote><pre class="code">$entry-&gt;selectionAdjust(<tt><em class="replaceable">index</em></tt>);</pre></blockquote>

<p>The selected text is extended toward the
<tt><em class="replaceable">index</em></tt> (from whichever end is closest).
</p>

<p><a name="INDEX-757" />To
clear out the selection:
</p>

<blockquote><pre class="code">$entry-&gt;selectionClear( );</pre></blockquote>

<p>Any selection indicator is removed from the Entry widget, and the
indexes <tt class="literal">'sel.first'</tt> and
<tt class="literal">'sel.last'</tt> are now undefined. The selected text
remains.
</p>

<p>To reset the <tt class="literal">'anchor'</tt> index to the specified
index, use <tt class="literal">selectionFrom</tt>:
</p>

<blockquote><pre class="code">$entry-&gt;selectionFrom(<tt><em class="replaceable">index</em></tt>);</pre></blockquote>

<p>This does not affect any currently selected text or the indexes
<tt class="literal">'sel.first'</tt> and <tt class="literal">'sel.last'</tt>.
</p>

<p>The only way to check if there is a selection in the Entry widget is
to use <tt class="literal">selectionPresent</tt>:
</p>

<blockquote><pre class="code">if ($entry-&gt;selectionPresent( )) {
}</pre></blockquote>

<p>It returns a 1 if there is a selection, which means you can safely
use the <tt class="literal">'sel.first'</tt> and
<tt class="literal">'sel.last'</tt> indexes (if there isn't a
selection, an error will be printed when you refer to either index).
<tt class="literal">selectionPresent</tt> will return a 0 if there is no
current selection.
</p>

<p><a name="INDEX-758" />You
can change the selection range by calling
<tt class="literal">selectionRange</tt>:
</p>

<blockquote><pre class="code">$entry-&gt;selectionRange(<tt><em class="replaceable">startindex</em></tt>, <tt><em class="replaceable">endindex</em></tt>);</pre></blockquote>

<p>The two indexes indicate where you would like the selection to cover.
If <tt><em class="replaceable">startindex</em></tt> is the same or greater than
<tt><em class="replaceable">endindex</em></tt>, the selection is cleared,
causing <tt class="literal">'sel.first'</tt> and
<tt class="literal">'sel.last'</tt> to be undefined. Otherwise,
<tt class="literal">'sel.first'</tt> and <tt class="literal">'sel.last'</tt> are
defined the same as <tt><em class="replaceable">startindex</em></tt> and
<tt><em class="replaceable">endindex</em></tt>, respectively.
</p>

<p>The <tt class="literal">selectionTo</tt> method causes the new selection to
be set from the current <tt class="literal">'anchor'</tt> point to the
specified index:
</p>

<blockquote><pre class="code">$entry-&gt;selectionTo(<tt><em class="replaceable">index</em></tt>);</pre></blockquote>

</div>
<a name="mastperltk-CHP-5-SECT-2.19" /><div class="sect2">
<h3 class="sect2">5.2.19. Changing the View in the Entry Widget</h3>

<p><tt class="literal">xview</tt> is a method that will change its purpose
based on what arguments are passed in. With no arguments, it will
return a two-element list containing numbers from 0 to 1. These two
numbers define what is currently visible in the Entry widget. The
first number indicates how much of the text is off to the left and
not visible. If it is .3, then 30% of the text is to the left of the
Entry widget. The second number returned is how much of the text is
not visible on the left side of the Entry widget plus the amount that
is visible in the widget. In this case, 50% of the text is actually
visible in the Entry widget (see <a href="ch05_02.htm">Figure 5-15</a>).
</p>

<blockquote><pre class="code">($left, $right) = $entry-&gt;xview( );</pre></blockquote>

<a name="mastperltk-CHP-5-FIG-15" /><div class="figure"><img src="figs/mptk.0515.gif" alt="Figure 5-15" width="228" height="103" /></div><h4 class="objtitle">Figure 5-15. What $left and $right mean</h4>

<p>When passing an index value to <tt class="literal">xview</tt>, the text in
the Entry widget will shift position so that the text at the
specified index is visible at the far-left edge:
</p>

<blockquote><pre class="code">$entry-&gt;xview(<tt><em class="replaceable">index</em></tt>);</pre></blockquote>

<p>The rest of the forms of <tt class="literal">xview</tt> have to do directly with scrolling (and are explained in
detail in <a href="ch06_01.htm">Chapter 6, "The Scrollbar Widget"</a>):
</p>

<blockquote><pre class="code">$entry-&gt;xviewMoveto(<tt><em class="replaceable">fraction</em></tt>);
$entry-&gt;xviewScroll(<tt><em class="replaceable">number</em></tt>, <tt><em class="replaceable">what</em></tt>);</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">5. Label and Entry Widgets</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">5.3. The Perl/Tk LabEntry Mega-Widget</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>