<html><head><title>Computing  with Parallel Message Passing (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch20_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">20.2. Computing <img src="figs/U03C0.gif" alt="Figure 20.2" /> with Parallel Message Passing</h2>

<p><a name="INDEX-3052" />Scientists demand
the most powerful computing machinery available, whether they model
global atmospheric conditions, decipher the human genome, study
viscous fluid dynamics, visualize plasmas in 3 dimensions, or vibrate
strings in 14. Besides tons of disk space (perhaps a terabyte for
<em class="emphasis">/tmp</em> alone) and tremendous I/O and memory
bandwidth, they want raw CPU power. Since no single CPU will ever
suffice, scientists work with vector and massively parallel
computers.
</p>

<p><a name="INDEX-3053" /><a name="INDEX-3054" />In parallel programming, we try to
divide the work of a sequential program into portions so that many
processors can work on the problem simultaneously. For example, this
code<a href="#FOOTNOTE-55">[55]</a> computes <img src="figs/U03C0.gif" alt="Figure 20.2" /> by integrating the
function 4 / (1 + x<sup class="superscript">2</sup>) in the range
<b class="emphasis-bold">-</b>.5 <img src="figs/U2264.gif" alt="Figure 20.2" /> x &lt; .5:
</p><blockquote class="footnote"> <a name="FOOTNOTE-55" /><p> [55] This is a Perl version of the C example from the
public domain MPICH distribution, available at <a href="../../../../../../www-unix.mcs.anl.gov/mpi/mpich/download.html">http://www-unix.mcs.anl.gov/mpi/mpich/download.html</a>.
Notice two optimizations: the factor <tt class="literal">$h</tt> is turned
into multiplication because it's faster than division;
likewise, multiplying <tt class="literal">$x</tt> by itself is faster than
exponentiation. </p> </blockquote>

<blockquote><pre class="code">my $intervals = 1_000;
my $h = 1.0 / $intervals;
my $sum = 0.0;

for(my $i = 1; $i &lt;= $intervals; $i++) {
    my $x = $h * ($i - 0.5);
    $sum += 4.0 / (1.0 + $x*$x);
}

my $pi = $h * $sum;</pre></blockquote>

<p>The variable <tt class="literal">$intervals</tt> defines the granularity of
the summation and, hence, the accuracy of the computation. To get a
good result, the interval must be very finely divided, which, of
course, increases the program's running time. But suppose we
parcel out the work to two processors, with each one integrating only
half of the curve? If we then add the two partial sums, the value of
<img src="figs/U03C0.gif" alt="Figure 20.2" /> is the same, but the computational wall-clock time is halved.
In fact, putting 10 processors to work completes the job an order of
magnitude faster, because this problem scales well.
</p>

<a name="mastperltk-CHP-20-SECT-2.1" /><div class="sect2">
<h3 class="sect2">20.2.1. The Message Passing Protocol</h3>

<p><a name="INDEX-3055" />Writing parallel code
requires some mechanism through which the processors can communicate
with each other. Generally, there's a master processor that
sets initial conditions and, later, collects results. In our case,
assume the master is responsible for telling the slave processors
which portion of the curve they are to integrate, collecting the
slaves' partial sums, adding them together, and reporting the
value of <img src="figs/U03C0.gif" alt="Figure 20.2.1" />.
</p>

<p>To implement this communication, we use a message passing scheme very
similar to that found on parallel supercomputers. The big iron might
use shared memory or high-speed interconnects to transfer megabytes
of data, but this example just sends a few scalars back and forth.
</p>

<p>It's unlikely you have access to a parallel computer, so
we'll make do using multiple processes on a single CPU. The
first process, the master, creates a MainWindow, menubar, and two
Entry widgets that select the number of intervals and slave
processes, as shown in <a href="ch20_02.htm">Figure 20-2</a>. It's also
responsible for starting the helpers, sending them their starting
values, and collecting their results.
</p>

<a name="mastperltk-CHP-20-FIG-2" /><div class="figure"><img src="figs/mptk.2002.gif" alt="Figure 20-2" width="464" height="338" /></div><h4 class="objtitle">Figure 20-2.  Computing pi with a master and two slave processors</h4>

<p>Each slave opens a MainWindow and populates it with a Label widget
displaying intermediate results. When a slave finishes, it sends its
result to the master.
</p>

<p>With true message passing, there's a blocking receive command
that reads the message queue and synchronizes the processors.
There's nothing like that in Tk, but we can simulate it using
<tt class="literal">tkwait</tt> <tt class="literal">variable</tt>, the Tcl way of
saying <tt class="literal">waitVariable</tt>, which logically suspends a
processor until a variable's value changes. As long as each
processor understands the protocol&#x2014;when and what to send, and
when and what variable to wait for&#x2014;we're okay. Protocol
details follow in the next two sections, during the examination of
the Tcl/Tk code.
</p>

</div>
<a name="mastperltk-CHP-20-SECT-2.2" /><div class="sect2">
<h3 class="sect2">20.2.2. Tcl/Tk Slave Processor Code</h3>

<p><a name="INDEX-3056" /><a name="INDEX-3057" />At less than 25 lines, the
slave code <em class="filename">pihelp.tcl</em> makes a good starting
point. It's simple, concise, and maps well to Perl/Tk, so you
should follow it easily. I think you'll find learning a little
Tcl/Tk to be worthwhile, and you can add another bullet to your
resum&#xE9;. Plus, there's a lot of Tcl/Tk code out there,
and this small diversion might assist you when doing a Perl/Tk port.
</p>

<blockquote><pre class="code">wm title . "Pi helper [tk appname]"
wm iconname . "pihelp"</pre></blockquote>

<p><a name="INDEX-3058" /><a name="INDEX-3059" /><a name="INDEX-3060" /><a name="INDEX-3061" /><a name="INDEX-3062" /><a name="INDEX-3063" /><a name="INDEX-3064" /><a name="INDEX-3065" /><a name="INDEX-3066" />In Tcl/Tk,
strings identify widgets, not object references, and the MainWindow
is always <tt class="literal">.</tt> (dot). These two window manager
commands initialize the MainWindow's title and icon name. Tcl
has double-quote interpolation just like Perl, as well ascommand substitution, indicated by square brackets. Here,
Tcl fetches the program's application name before interpolating
the title string and assigning it to the MainWindow.
</p>

<blockquote><pre class="code">set status ""
label .l -textvariable status -width 80
pack .l</pre></blockquote>

<p><a name="INDEX-3067" /><a name="INDEX-3068" /><a name="INDEX-3069" /><a name="INDEX-3070" />Tcl has scalars
just like Perl, and <tt class="literal">set</tt> assigns values to those
variables. Notice that, as in shell programming, there's no
leading <tt class="literal">$</tt>. The <tt class="literal">$</tt> is used only
when it's time to evaluate a variable. We then pack an
80-character Label widget, <tt class="literal">.l</tt>, a child of the
MainWindow, with an associated text variable.
</p>

<blockquote><pre class="code">#set numprocs 0
#set proc 0
#set intervals 0
tkwait variable intervals</pre></blockquote>

<p>These three set commands are commented out, because it's up to
the master processor to initialize these variables (we need to read
them but dare not write them). So we idle, waiting for our master to
<tt class="literal">send</tt> the three real <tt class="literal">set</tt>
commands. When the <tt class="literal">set</tt>
<tt class="literal">intervals</tt> command arrives, it changes the value of
<tt class="literal">intervals</tt>, the <tt class="literal">tkwait</tt>
completes, and we continue.
</p>

<blockquote><pre class="code">set h [expr 1.0 / $intervals]
set helper_sum 0

for {set i [expr $proc + 1]} {$i &lt;= $intervals} {incr i $numprocs} {
    set x [expr $h * ($i - 0.5)]
    set helper_sum [expr $helper_sum +  4.0 / (1.0 + $x*$x)]
    set status "Processor $proc, interval = $i, partial sum = $helper_sum"
    update idletasks
}
set helper_sum [expr $h * $helper_sum]
set status "Processor $proc, final sum = $helper_sum"</pre></blockquote>

<p>This is a straightforward Tcl translation of the Perl-<img src="figs/U03C0.gif" alt="Figure 20.2.2" />-computing
code we saw earlier. It only sums "one numprocs-th" of
the interval, but that's okay, because the other
"numprocs - 1" processors sum the rest. Notice how the
status label is updated in real time, via <tt class="literal">update</tt>
<tt class="literal">idletasks</tt>, just as in Perl/Tk.
</p>

<blockquote><pre class="code">while {1} {
    catch {send pi.tcl "set sums($proc) $helper_sum"}
    after 1000
}</pre></blockquote>

<p>Finally, send the partial sum back to the master, who is expecting to
see it appear in its <tt class="literal">sums</tt> associative array,
indexed by processor number. A Tcl associative array works the same
way as a Perl hash; in fact, Perl used to call its hashes associative
arrays too, but we all got lazy and shortened the phrase to simply
hash (which is more descriptive anyway).
</p>

<p>The <tt class="literal">catch</tt> construct ignores errors (perhaps the
sendee has ended?) and works just like <tt class="literal">Tk::catch</tt>.
The infinite loop, better written with <tt class="literal">repeat</tt> in
Perl/Tk, broadcasts our result until the master receives it and kills
us. The <tt class="literal">send</tt> is repeated to keep the master from
deadlocking, because it's more likely harvesting another
processor's result. The next section clarifies matters, as we
bring together all the loose ends.<a name="INDEX-3071" /> 
</p>

</div>
<a name="mastperltk-CHP-20-SECT-2.3" /><div class="sect2">
<h3 class="sect2">20.2.3. Tcl/Tk Master Processor Code</h3>

<p><a name="INDEX-3072" />For brevity,
we'll focus only on the three subroutines from
<em class="filename">pi.tcl</em> that create the user interface (<a href="ch20_02.htm">Figure 20-2</a>) and handle the send/receive transactions.
</p>

<p><tt class="literal">create_interface</tt> places the MainWindow on the
display and initializes its title and icon name. It then creates the
MainWindow's menubar and adds the File menubutton cascade with
a Quit menu item. With the exception of having to explicitly define
the cascade menu, we do exactly this in Perl/Tk. Underneath the
menubar are, essentially, two labeled Entry widgets, which are
created from scratch by packing Label and Entry widgets side-by-side
in container frames. (We'd use LabEntry widgets in Perl/Tk.)
Finally, it packs a Text widget that displays results and a Compute
button that initiates a computation.
</p>

<blockquote><pre class="code">proc create_interface {} {

    wm geometry . "+100+100"
    wm title . "Compute pi Using Multiple Processors"
    wm iconname . "pi"

    # Create menubar, menubuttons, menus and callbacks.

    menu .mb
    . configure -menu .mb

    .mb add cascade -label File -underline 0 -menu .mb.file
    menu .mb.file
    .mb.file add command -label Quit -command {destroy .}

    # Frame to hold itervals label and entry widgets.

    frame .f
    pack .f -fill x
    label .f.s -text "Intervals: "
    entry .f.e -width 25 -textvariable intervals
    pack .f.s -side left
    pack .f.e -side right

    # Frame to hold number of processors label and entry widgets.

    frame .f2
    pack .f2 -fill x
    label .f2.s -text "Processors: "
    entry .f2.e -width 25 -textvariable numprocs
    pack .f2.s -side left
    pack .f2.e -side right

    # Text widget to hold results.

    text .t -width 50 -height 14
    pack .t -fill both -expand 1

    button .c -text Compute -command {compute_pi}
    pack .c

}; # end create_interface</pre></blockquote>

<p><tt class="literal">start_helpers_calculating</tt><a name="INDEX-3073" /><a name="INDEX-3074" /> first executes all the Tk helper
programs, which then wait for a start message, as described in the
previous section. It records all the process IDs and ensures that all
instances of the helper (<em class="filename">pihelp.tcl</em>) have
different application names (<tt class="literal">-name</tt>) and appear as
nicely spaced columns on the display (<tt class="literal">-geometry</tt>).
After a 2-second delay, which gives the helpers time to synchronize
on their <tt class="literal">tkwait variable</tt> command, it sends each
helper three Tcl <tt class="literal">set</tt> commands. After the
<tt class="literal">set</tt> <tt class="literal">intervals</tt> command is
evaluated in the context of the helpers, they begin computing their
partial sums.
</p>

<p><a name="INDEX-3075" />In contrast to the Perl way, note that
each Tcl variable is local to a subroutine, and global variables must
be explicitly declared with a <tt class="literal">global</tt> command (or,
you can poke around the call stack using <tt class="literal">uplevel</tt>
and <tt class="literal">upvar</tt>).
</p>

<blockquote><pre class="code">proc start_helpers_calculating {} {

    global helper intervals numprocs pids proc sums
    global wishexe

    set proc [expr $numprocs - 1]
    set y 420
    while {$proc &gt; 0} {
        set pids($proc) [exec $wishexe -name pihelp${proc} \
            -geometry +100+${y} &lt; $helper &amp;]
        status "Helper processor $proc started, pid=$pids($proc)."
        incr y 50
        incr proc [expr -1]
    }
    after 2000

    set proc [expr $numprocs - 1]
    while {$proc &gt; 0} {
			send pihelp${proc} "set numprocs $numprocs; \
				set proc $proc; set intervals $intervals"
			incr proc [expr -1]
    }

}; # end start_helpers_calculating</pre></blockquote>

<p><tt class="literal">sum_reduce</tt> simulates a sum reduction, which is a
message-passing operation that reads data from all helper processors
and reduces the results to a single value by summing. It waits for
each helper, in turn, to store its partial sum in the
<tt class="literal">sums</tt> associative array and kills the helper
afterward. Finally, it adds its own partial sum and returns the
reduced result, <img src="figs/U03C0.gif" alt="Figure 20.2.3" />.
</p>

<a name="INDEX-3076" /><a name="INDEX-3077" /><a name="INDEX-3078" /><a name="INDEX-3079" /><blockquote><pre class="code">proc sum_reduce {} {

    # Do a sum reduction.  Fetch all the partial sums computed
    # by the helper processors, and then add them to our partial
    # sum.  The result is an approximation of pi.

    global helper intervals numprocs pids proc sums

    set pi 0
    for {set proc 1} {$proc &lt; $numprocs} {incr proc} {
        tkwait variable sums($proc)
        status "Partial sum from processor $proc = $sums($proc)."
        set pi [expr $pi + $sums($proc)]
        exec kill $pids($proc)
    }
    return [expr $pi + $sums(0)]

}; # end sum_reduce</pre></blockquote>

<p><a href="ch20_02.htm">Figure 20-3</a> shows the outcome. </p>

<a name="mastperltk-CHP-20-FIG-3" /><div class="figure"><img src="figs/mptk.2003.gif" alt="Figure 20-3" width="296" height="259" /></div><h4 class="objtitle">Figure 20-3.  An estimated value of pi, with error</h4>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch20_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch20_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">20. IPC with send</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">20.3. TclRobots</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>