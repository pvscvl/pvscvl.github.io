<html><head><title>Option Menus (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch12_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">12.6. Option Menus</h2>

<p><a name="INDEX-1869" /><a name="INDEX-1870" /><a name="INDEX-1871" /><a name="INDEX-1872" />An option menu is a simple widget
with a label and an indicator. Clicking the indicator posts a menu of
selections from which we can choose any single value, which is then
displayed in the label. An option menu has an associated Perl
variable that keeps the current option value and may also have a
-<tt class="literal">command</tt> callback that is invoked after the new
option value is stored in the variable.
</p>

<p><a name="INDEX-1873" />Perl/Tk
has two option menu widgets: Tk::Optionmenu from the standard
distribution and a native option menu that almost no one is aware of
but that you will see shortly. Each has its pros and cons, so pick
one based on the job at hand. Both option menus are based on a
Menubutton widget, which posts its menu items when pressed.
</p>

<a name="mastperltk-CHP-12-SECT-6.1" /><div class="sect2">
<h3 class="sect2">12.6.1. Tk::Optionmenu</h3>

<p><a name="INDEX-1874" /><a name="INDEX-1875" /><a name="INDEX-1876" />If we want to select a color from a
<em class="emphasis">small</em> set of colors, we could use an Optionmenu
like that shown in <a href="ch12_06.htm">Figure 12-8</a>. The operative word
is small, because an Optionmenu's menu is limited to a single
column. The -<tt class="literal">options</tt> option expects a reference to
a list of options, which may be string values and/or array references
of the form <tt class="literal">['label'</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">'value']</tt>. The <tt class="literal">'label'</tt> is
what's displayed in the menu, and the
<tt class="literal">'value'</tt> is stored in the variable. The
<tt class="literal">-command</tt> option is a standard Perl/Tk callback.
When the callback is invoked, the value of the option menu is
appended to the callback argument list.
</p>

<blockquote><pre class="code">my $palette;
my @colors = qw/Black red4 DarkGreen NavyBlue gray75 Red Green Blue
    gray50 Yellow Cyan Magenta White Brown DarkSeaGreen DarkViolet/;

my $om = $mw-&gt;Optionmenu(
    -variable =&gt; \$palette,
    -options  =&gt; [@colors],
    -command  =&gt; [sub {print "args=@_.\n"}, 'First'],
);
$om-&gt;pack;</pre></blockquote>

<p><a name="INDEX-1877" />The
Optionmenu widget has an <tt class="literal">addOptions</tt> method to add
more items to the menu.
</p>

<blockquote><pre class="code">$om-&gt;addOptions(['chlorophyll' =&gt; '#8395ffff0000']);</pre></blockquote>

<p>And that's pretty much all you can do with a Tk::Optionmenu
widget.<a name="INDEX-1878" />
</p>

<a name="mastperltk-CHP-12-FIG-8" /><div class="figure"><img src="figs/mptk.1208.gif" alt="Figure 12-8" width="106" height="336" /></div><h4 class="objtitle">Figure 12-8.  Tk::Optionmenu widgets are limited to a single column</h4>

</div>
<a name="mastperltk-CHP-12-SECT-6.2" /><div class="sect2">
<h3 class="sect2">12.6.2. A Native Option Menu</h3>

<p>It's possible to build an option menu from standard Perl/Tk
components that's more powerful than one created by
Tk::Optionmenu. It is more complex and, because it's not part
of the standard distribution, we have to carry extra baggage around.
But we have direct access to its Menu, which provides us with a lot
of flexibility.
</p>

<p><a href="ch12_06.htm">Figure 12-9</a> illustrates how the new option menu
displays our list of colors as an array of radiobutton menu
items.<a href="#FOOTNOTE-27">[27]</a> In this context,
it's convenient to break the color list into several columns,
plus the radiobutton's indicator serves to identify the
widget's current value while the menu is posted.
</p><blockquote class="footnote"> <a name="FOOTNOTE-27" /><p> [27] In <a href="ch17_01.htm">Chapter 17, "Images and Animations"</a>, we expand on
this idea and use a color palette of Photo images rather than plain
radiobutton menu items.</p> </blockquote>

<a name="mastperltk-CHP-12-FIG-9" /><div class="figure"><img src="figs/mptk.1209.gif" alt="Figure 12-9" width="317" height="124" /></div><h4 class="objtitle">Figure 12-9.  A multicolumn native option menu</h4>

<p>The actual user code is very similar to the Tk::Optionmenu code. The
main difference is we call a subroutine instead of invoking a Tk
method. (As an exercise, turn this code into a Perl/Tk class.) The
subroutine uses positional parameters rather than option/value pairs:
the first argument is the widget's parent, the second argument
is the variable, the third argument is the callback, and the
remaining arguments are the menu options.
</p>

<blockquote><pre class="code">use subs qw/native_optionmenu/;

my $palette;
my @colors = qw/Black red4 DarkGreen NavyBlue gray75 Red Green Blue
    gray50 Yellow Cyan Magenta White Brown DarkSeaGreen DarkViolet/;

my $nom = native_optionmenu(
    $mw,
    \$palette,
    [sub {print "args=@_.\n"}, 'First'],
    @colors);
$nom-&gt;pack;;</pre></blockquote>

<p><a name="INDEX-1879" />The
following chunk of code breaks the menu into columns. The variable
<tt class="literal">$nom</tt> is actually a reference to a Menubutton
widget from which we fetch the menu reference. Then we loop, setting
the <tt class="literal">-columnbreak</tt> option on every fourth menu item.
</p>

<blockquote><pre class="code">my $menu = $nom-&gt;cget(-menu);
for my $i (0 .. $#colors) {
    $menu-&gt;entryconfigure($i, -columnbreak =&gt; 1) unless $i % 4;
}</pre></blockquote>

<p><a name="INDEX-1880" /><a name="INDEX-1881" /><a name="INDEX-1882" /><a name="INDEX-1883" />The
<tt class="literal">native_optionmenu</tt> subroutine builds the actual
option menu for us. First, we default the option menu variable to the
first option value, which becomes the Menubutton's initial
label. As the variable referenced by the
-<tt class="literal">textvariable</tt> option changes, so does the text on
the Menubutton. The -<tt class="literal">indicatoron</tt> option is what
makes the Menubutton look and behave as an
"OptionMenubutton." The -<tt class="literal">anchor</tt> and
-<tt class="literal">direction</tt> options ensure that the tearoff-less
menu pops up, centered directly on top of the Menubutton. Finally, we
loop through the list of option values, populate the menu with
radiobutton menu items, and return a reference to the Menubutton. The
only trickiness is normalizing the -<tt class="literal">command</tt>
callback and appending the correct "selected value" to
the callback argument list.
</p>

<blockquote><pre class="code">sub native_optionmenu {

    my($parent, $varref, $callback, @optionvals) = @_;

    $$varref = $optionvals[0];

    my $mb = $parent-&gt;Menubutton(
        -textvariable       =&gt; $varref,
        -indicatoron        =&gt; 1,
        -relief             =&gt; 'raised',
        -borderwidth        =&gt; 2,
        -highlightthickness =&gt; 2,
        -anchor             =&gt; 'c',
        -direction          =&gt; 'flush',
    );
    my $menu = $mb-&gt;Menu(-tearoff =&gt; 0);
    $mb-&gt;configure(-menu =&gt; $menu);

    my $callback = ref($command) =~ /CODE/ ? [$command] : $command;

    foreach (@optionvals) {
        $menu-&gt;radiobutton(
            -label     =&gt; $_,
            -variable  =&gt; $varref,
            -command   =&gt; [$callback, $_],
        );
    }

   $mb;

} # end native_optionmenu</pre></blockquote>

<p><a name="INDEX-1884" /><a name="INDEX-1885" />Menu items have left and right
margins, and it's in these margins that the radiobutton and
checkbutton indicators are drawn. If you want to dispense with the
margin, be aware that the indicators disappear too. This code sets
each radiobutton's <tt class="literal">-hidemargin</tt> option based
on the true/false setting of a Checkbutton widget:
</p>

<blockquote><pre class="code">sub hide {
    my $menu = $nom-&gt;cget(-menu);
    foreach (@colors) {
        $menu-&gt;entryconfigure($_, -hidemargin =&gt; ${$cb-&gt;cget(-variable)});
    }
}</pre></blockquote>

<p><a href="ch12_06.htm">Figure 12-10</a> shows a native option menu with a
<tt class="literal">-hidemargin</tt> set to 1. <a name="INDEX-1886" />
</p>

<a name="mastperltk-CHP-12-FIG-10" /><div class="figure"><img src="figs/mptk.1210.gif" alt="Figure 12-10" width="220" height="124" /></div><h4 class="objtitle">Figure 12-10. A native option menu with -hidemargin =&gt; 1</h4>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch12_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12.5. Popup Menus</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">12.7. Menu Virtual Events</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>