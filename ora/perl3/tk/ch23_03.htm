<html><head><title>Dialog Boxes (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch23_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">23.3. Dialog Boxes</h2>

<p><a name="INDEX-3265" />There are several reasons you might want
to create a dialog box in Perl/Tk. This section will show you what
your choices are and how to configure dialog boxes.
</p>

<a name="mastperltk-CHP-23-SECT-3.1" /><div class="sect2">
<h3 class="sect2">23.3.1. The Dialog Widget</h3>

<p><a name="INDEX-3266" />The most basic
widget provided in Tk to create a dialog box is Dialog. It's
perfect when you need a quick way to display information or get an
answer from a user.
</p>

<blockquote><pre class="code">$answer = $mw-&gt;Dialog(-title =&gt; 'Please Reply', 
   -text =&gt; 'Would you like to continue?', 
   -default_button =&gt; 'yay', -buttons =&gt; [ 'yay', 'nay'], 
   -bitmap =&gt; 'question' )-&gt;Show( );
if ($answer eq 'yay') {
  # ... do something ...
}</pre></blockquote>

<p><a href="ch23_03.htm">Figure 23-4</a> shows the output from our code snippet.</p>

<a name="mastperltk-CHP-23-FIG-4" /><div class="figure"><img src="figs/mptk.2304.gif" alt="Figure 23-4" width="209" height="105" /></div><h4 class="objtitle">Figure 23-4.  A typical dialog box</h4>

<p>Instead of calling <tt class="literal">Show</tt> immediately, you can save
a reference to the dialog and reuse it throughout your application.
The options you can use with a Dialog are as follows:
</p>

<dl>
<dt><tt class="literal">-bitmap</tt> =&gt; <tt><em class="replaceable"><tt>bitmap</tt></em></tt></dt>
<dd>
<a name="INDEX-3267" />Displays a bitmap to the left of the text
in the Dialog. Optional.
</p>
</dd>


<dt><tt class="literal">-buttons</tt> =&gt; <tt class="literal">[</tt> <tt><em class="replaceable"><tt>button list</tt></em></tt> <tt class="literal">]</tt></dt>
<dd>
<a name="INDEX-3268" />An anonymous list of buttons to
display on the dialog. Buttons will be displayed in the same order
they are listed.
</p>
</dd>


<dt><tt class="literal">-default_button</tt> =&gt; <tt><em class="replaceable"><tt>button text</tt></em></tt></dt>
<dd>
<a name="INDEX-3269" />Whichever
button matches this string will be highlighted as the default button
for the Dialog. The string match is case senstive, and if the string
doesn't match anything, there will be no default.
</p>
</dd>


<dt><tt class="literal">-text</tt> =&gt; <tt><em class="replaceable"><tt>text</tt></em></tt></dt>
<dd>
<a name="INDEX-3270" />Text displayed above the buttons in the
Dialog.
</p>
</dd>


<dt><tt class="literal">-title</tt> =&gt; <tt><em class="replaceable"><tt>title</tt></em></tt></dt>
<dd>
<a name="INDEX-3271" />The title of the dialog box.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-23-SECT-3.2" /><div class="sect2">
<h3 class="sect2">23.3.2. The messageBox Method</h3>

<p><a name="INDEX-3272" />If you
need only a one-shot dialog, you can use the
<tt class="literal">messageBox</tt> method. The options are slightly
different, but the result looks almost the same, shown in <a href="ch23_03.htm">Figure 23-5</a>. Keep in mind that every time you call
<tt class="literal">messageBox</tt>, a new Dialog is created and there is
no <tt class="literal">Show</tt> method.
</p>

<a name="mastperltk-CHP-23-FIG-5" /><div class="figure"><img src="figs/mptk.2305.gif" alt="Figure 23-5" width="200" height="111" /></div><h4 class="objtitle">Figure 23-5.  Dialog created using messageBox</h4>

<p>Like a Dialog widget, <tt class="literal">messageBox</tt> returns the
selected Button's string, but its case may vary depending on
your operating system. Therefore, it's best to treat the
response in a case-insensitive manner.
</p>

<p>The <tt class="literal">messageBox</tt> Buttons are specified with the
<tt class="literal">-type</tt> option, so, for example, a
<tt class="literal">-type</tt> of <tt class="literal">AbortRetryIgnore</tt>
produces three Buttons with the labels <tt class="literal">Abort</tt>,
<tt class="literal">Retry</tt>, and <tt class="literal">Ignore</tt>. Any of these
Button labels can be specified as the default Button. Once again,
case issues are present; see <tt class="literal">-default</tt>. It's
anticipated that these case issues will be taken care of in Tk
800.024. 
</p>

<blockquote><pre class="code">   $answer =&gt; $mw-&gt;messageBox(-title =&gt; 'Please Reply', 
     -message =&gt; 'Would you like to continue?', 
     -type =&gt; 'YesNo', -icon =&gt; 'question', -default =&gt; 'yes');</pre></blockquote>

<p>The options used with <tt class="literal">messageBox</tt> are as follows:</p>

<dl>
<dt><tt class="literal">-default</tt> =&gt; <tt><em class="replaceable"><tt>string</tt></em></tt></dt>
<dd>
The string specified will be used as the default button. Depending on
the version of <tt class="literal">messageBox</tt> you have, the default
string needs to be all lowercase on a Win32 system, whereas on Unix
the first letter should be capitalized. Either way, if the string
doesn't match properly, you'll get an error.
</p>
</dd>


<dt><tt class="literal">-icon</tt> =&gt; <tt><em class="replaceable"><tt>bitmap</tt></em></tt></dt>
<dd>
<a name="INDEX-3273" />The bitmap to
display to the left of the message text. The bitmap displayed is
operating system dependent.
</p>
</dd>


<dt><tt class="literal">-message</tt> =&gt; <tt><em class="replaceable"><tt>message</tt></em></tt></dt>
<dd>
<a name="INDEX-3274" />The message
to display above the buttons on the dialog.
</p>
</dd>


<dt><tt class="literal">-title</tt> =&gt; <tt><em class="replaceable"><tt>title</tt></em></tt></dt>
<dd>
<a name="INDEX-3275" />The title for the dialog.
</p>
</dd>


<dt><tt class="literal">-type</tt> =&gt; <tt><em class="replaceable"><tt>buttontypes</tt></em></tt></dt>
<dd>
<a name="INDEX-3276" /><a name="INDEX-3277" />Specifies a predefined set of buttons to
be displayed. The following values are possible:
<tt class="literal">'AbortRetryIgnore'</tt>, <tt class="literal">'OK'</tt>,
<tt class="literal">'OKCancel'</tt>, <tt class="literal">'RetryCancel'</tt>,
<tt class="literal">'YesNo'</tt>, or <tt class="literal">'YesNoCancel'</tt>. An
invalid type will result in an error.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-23-SECT-3.3" /><div class="sect2">
<h3 class="sect2">23.3.3. The DialogBox Widget</h3>

<p><a name="INDEX-3278" />The
DialogBox widget is a more customizable version of Dialog. Instead of
just a text message above the buttons, you can put anything
you'd like in that area. There are only three options available
with DialogBox:
</p>

<dl>
<dt><tt class="literal">-buttons</tt> =&gt; <tt class="literal">[</tt> <tt><em class="replaceable"><tt>button list</tt></em></tt> <tt class="literal">]</tt></dt>
<dd>
<a name="INDEX-3279" />An anonymous list of buttons to
display on the dialog. Buttons will be displayed in the same order
they are listed.
</p>
</dd>


<dt><tt class="literal">-default_button</tt> =&gt; <tt><em class="replaceable"><tt>button text</tt></em></tt></dt>
<dd>
<a name="INDEX-3280" />Whichever button matches this string will
be highlighted as the default button for the Dialog. The string match
is case-sensitive, and if the string doesn't match anything,
there will be no default.
</p>
</dd>


<dt><tt class="literal">-title</tt> =&gt; <tt><em class="replaceable"><tt>title</tt></em></tt></dt>
<dd>
<a name="INDEX-3281" />The title of the dialog box.
</p>
</dd>

</dl>

<p><a name="INDEX-3282" />After creating the DialogBox, you can call
the <tt class="literal">add</tt> method to insert items, and
<tt class="literal">pack</tt> will display the widgets inside the dialog.
Here's an example of creating a login DialogBox:
</p>

<blockquote><pre class="code">require Tk::LabEntry;
   ...
$db = $mw-&gt;DialogBox(-title =&gt; 'Login', -buttons =&gt; ['Ok', 'Cancel'], 
                     -default_button =&gt; 'Ok');
$db-&gt;add('LabEntry', -textvariable =&gt; \$uname, -width =&gt; 20, 
         -label =&gt; 'Username', -labelPack =&gt; [-side =&gt; 'left'])-&gt;pack;
$db-&gt;add('LabEntry', -textvariable =&gt; \$pw, -width =&gt; 20, 
          -label =&gt; 'Password', -show =&gt; '*', 
          -labelPack =&gt; [-side =&gt; 'left'])-&gt;pack;
$answer = $db-&gt;Show( );

if ($answer eq "Ok") {
  print "Username = $uname, Password = $pw\n";
}</pre></blockquote>

<p><a href="ch23_03.htm">Figure 23-6</a> shows the outcome.</p>

<a name="mastperltk-CHP-23-FIG-6" /><div class="figure"><img src="figs/mptk.2306.gif" alt="Figure 23-6" width="185" height="93" /></div><h4 class="objtitle">Figure 23-6. A login dialog created using DialogBox</h4>

</div>
<a name="mastperltk-CHP-23-SECT-3.4" /><div class="sect2">
<h3 class="sect2">23.3.4. Using ErrorDialog</h3>

<p><a name="INDEX-3283" /><a name="INDEX-3284" /><a name="INDEX-3285" /><a name="INDEX-3286" />When
working with a graphical application, it makes sense to display
errors to your user in a graphical manner. Normally if something goes
wrong in your application, <tt class="literal">Tk::Error</tt> is called,
and the error message(s) is printed on the console where the program
was run from. This is a less-than user-friendly way to communicate to
your users that something is wrong. By including
<tt class="literal">use</tt> <tt class="literal">Tk::ErrorDialog</tt> in your
application, you will start getting error messages in dialog boxes.
</p>

<p>This magic happens because <tt class="literal">ErrorDialog</tt> overrides
<tt class="literal">Tk::Error</tt> with a version of its own. If
you're unsatisfied with either version of
<tt class="literal">Tk::Error</tt>, write your own. It's called with
three arguments:
</p>

<blockquote><pre class="code">my ($w, $error, @msgs) = @_;</pre></blockquote>

<p><tt class="literal">$w</tt> is a widget reference,
<tt class="literal">$error</tt> is the current error message, and
<tt class="literal">@msgs</tt> is an array of traceback messages.
</p>

<p><a href="ch23_03.htm">Figure 23-7</a> shows an example error dialog, when we
used the wrong default button to create another dialog.
</p>

<a name="mastperltk-CHP-23-FIG-7" /><div class="figure"><img src="figs/mptk.2307.gif" alt="Figure 23-7" width="253" height="113" /></div><h4 class="objtitle">Figure 23-7.  An error dialog</h4>

<p>Execution of your application doesn't halt when an error shows
up, but the user is required to click through any error messages that
are displayed.
</p>

</div>
<a name="mastperltk-CHP-23-SECT-3.5" /><div class="sect2">
<h3 class="sect2">23.3.5. chooseColor Dialog</h3>

<p><a name="INDEX-3287" /><a name="INDEX-3288" />There
are times you would like the user to select his own color, perhaps
when customizing the look of the application windows or when drawing
text in a Text or Canvas widget. Using
<tt class="literal">chooseColor</tt>, you can pop up a dialog box to select
a color name or hexadecimal color number. This returns the color or
<tt class="literal">undef</tt> to <tt class="literal">$color</tt>. On Win32
<tt class="literal">chooseColor</tt> calls a native dialog (<a href="ch23_03.htm">Figure 23-8</a>), and on Unix, it calls Tk::ColorEditor (<a href="ch23_03.htm">Figure 23-9</a>).
</p>

<blockquote><pre class="code">$color = $widget-&gt;chooseColor(-title =&gt; 'string', -initialcolor =&gt; color);  </pre></blockquote>

<a name="mastperltk-CHP-23-FIG-8" /><div class="figure"><img src="figs/mptk.2308.gif" alt="Figure 23-8" width="486" height="321" /></div><h4 class="objtitle">Figure 23-8. Version displayed when calling chooseColor on Win32</h4>

<a name="mastperltk-CHP-23-FIG-9" /><div class="figure"><img src="figs/mptk.2309.gif" alt="Figure 23-9" width="363" height="332" /></div><h4 class="objtitle">Figure 23-9. The Tk::ColorEditor dialog</h4>

<p>Valid options are:</p>

<dl>
<dt><tt class="literal">-initialcolor =&gt; 'color'</tt></dt>
<dd>
<a name="INDEX-3289" />Specifies the color to display in the
color dialog when it pops up. We talked about valid color values in
<a href="ch04_01.htm">Chapter 4, "
Button, Checkbutton, and Radiobutton Widgets"</a>.
</p>
</dd>


<dt><tt class="literal">-parent =&gt; $widget</tt></dt>
<dd>
<a name="INDEX-3290" />Makes
<tt class="literal">$widget</tt> the logical parent of the color dialog.
The color dialog is displayed on top of its parent window. This
option is not normally required.
</p>
</dd>


<dt><tt class="literal">-title =&gt; 'title'</tt></dt>
<dd>
<a name="INDEX-3291" />Specifies a string to display as the title
of the dialog box. If this option is not specified, a default title
is displayed.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-23-SECT-3.6" /><div class="sect2">
<h3 class="sect2">23.3.6. getOpenFile and getSaveFile Dialogs</h3>

<p><a name="INDEX-3292" /><a name="INDEX-3293" />Often you will want the user to locate an
existing file or the location for a new file on her filesystem. The
methods <tt class="literal">getOpenFile</tt> and
<tt class="literal">getSaveFile</tt> let you do this easily. <a href="ch23_03.htm">Figure 23-10</a> illustrates the <tt class="literal">getOpenFile</tt>
dialog.
</p>

<a name="mastperltk-CHP-23-FIG-10" /><div class="figure"><img src="figs/mptk.2310.gif" alt="Figure 23-10" width="459" height="168" /></div><h4 class="objtitle">Figure 23-10. Version of getOpenFile (getSaveFile looks the same except for the title)</h4>

<p>To give you a quick idea of how these are used,
<tt class="literal">getOpenFile</tt> is most commonly associated with the
"Open" command in the File menu, and
<tt class="literal">getSaveFile</tt> is usually associated with the
"Save as..." command in the File menu. In either case, if
the user selects a file, both methods return the full pathname of
this file. If the user cancels the operation, both methods return an
undefined value.
</p>

<p>The easiest way to invoke them both is: </p>

<blockquote><pre class="code">my $file = $mw-&gt;getOpenFile( );
&amp;do_something($file) if defined $file;

my $sfile = $mw-&gt;getSaveFile( );
&amp;do_somethingelse($sfile) if defined $sfile;</pre></blockquote>

<p><a name="INDEX-3294" />The only real
difference between the two methods is the error handling they
perform. For instance, if you try to select a preexisting file from
the Save dialog, you will be asked if you want to overwrite that
file. Your program is still required to actually create or open the
returned filename; these dialogs are just a consistent way of
requesting the information from the user.
</p>

<p>If you would like to customize your open or save dialog, use one or
more of the following optional arguments:
</p>

<dl>
<dt><tt class="literal">-defaultextension</tt> =&gt; <tt><em class="replaceable"><tt>string</tt></em></tt></dt>
<dd>
<a name="INDEX-3295" />Specifies a string that will be appended
to the filename if the user enters a filename without an extension.
</p>
</dd>


<dt><tt class="literal">-filetypes</tt> =&gt; <tt class="literal">[</tt> <tt><em class="replaceable"><tt>filePatternList</tt></em></tt> <tt class="literal">]</tt></dt>
<dd>
<a name="INDEX-3296" />You can
specify some predefined file patterns for the user to choose from (if
applicable on your platform). The
<em class="replaceable"><tt><tt>filePatternList</tt></tt></em> is a list itself, so you
end up with a list of lists. Each inner list should contain a file
type description, an extension (or list of extensions), and an
optional type. Here's an example to clarify:
</p>

<blockquote><pre class="code">my $types = [
  ['Text Files',       ['.txt', '.text']],
  ['Java Source Files', '.java'          ],
  ['C Source Files',   '.c',      'TEXT'],
  ['GIF Files',        '.gif',          ],
  ['All Files',        '*',             ],
];

my $filename = $mw-&gt;getOpenFile(-filetypes =&gt; $types);</pre></blockquote>
</dd>


<dt><tt class="literal">-initialdir</tt> =&gt; <tt><em class="replaceable"><tt>directory</tt></em></tt></dt>
<dd>
<a name="INDEX-3297" />The
starting directory for the user to browse from. If not specified, the
files in the current working directory are displayed.
</p>
</dd>


<dt><tt class="literal">-initialfile</tt> =&gt; <tt><em class="replaceable"><tt>filename</tt></em></tt></dt>
<dd>
<a name="INDEX-3298" />Default
filename to start with. This option is ignored by the
<tt class="literal">getOpenFile</tt> method.
</p>
</dd>


<dt><tt class="literal">-title</tt> =&gt; <tt><em class="replaceable"><tt>string</tt></em></tt></dt>
<dd>
<a name="INDEX-3299" />A title to use for the dialog. A
default title will be used if this isn't specified.<a name="INDEX-3300" /><a name="INDEX-3301" /><a name="INDEX-3302" />
</p>
</dd>

</dl>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch23_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">23.2. Manipulating the Cursor</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">23.4. The Adjuster Widget</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>