<html><head><title>Menubars and Pulldown Menus (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch12_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">12.2. Menubars and Pulldown Menus</h2>

<p>Perhaps the best way to learn about the menu system is to examine the
program that produced Figures <a href="ch12_01.htm">Figure 12-1</a> and <a href="ch12_01.htm">Figure 12-2</a>. We're going to show two ways to create
those menus, first using a straightforward strategy and then a more
elegant one.
</p>

<a name="mastperltk-CHP-12-SECT-2.1" /><div class="sect2">
<h3 class="sect2">12.2.1. Menubars the Clunky, Casual, Old-Fashioned Way</h3>

<p><a name="INDEX-1780" />Here's one way to do it using
Perl/Tk 8. We begin by creating a normal Menu and configuring it as
the MainWindow's menubar:
</p>

<blockquote><pre class="code">use Tk 800.000;

my $mw = MainWindow-&gt;new;
$mw-&gt;configure(-menu =&gt; my $menubar = $mw-&gt;Menu);</pre></blockquote>

<p><a name="INDEX-1781" />Now
create the cascade menubuttons. We save each menubutton's
reference&#x2014;an object of type Tk::Menu::Cascade&#x2014;so we can
add the requisite menu items later. (Note that unlike almost every
other Perl/Tk object, a Tk::Menu::Cascade object is built from an
array rather than a hash.) Each menubutton is assigned an identifying
label that's displayed on the menubutton. The tilde character
(<tt class="literal">~</tt>) represents the -<tt class="literal">underline</tt>
character and is merely a convenience feature.
</p>

<p>We already know the menu system handles a Toplevel menu specially.
Since we didn't specify -<tt class="literal">tearoff</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">0</tt> when the menu was
created, there's an implicit tearoff at index 0, meaning that
the File, Edit, and Help cascades are menu item indexes 1, 2, and 3,
respectively. Further, menubutton cascades are arranged from left to
right rather than from top to bottom.
</p>

<blockquote><pre class="code">my $file = $menubar-&gt;cascade(-label =&gt; '~File');
my $edit = $menubar-&gt;cascade(-label =&gt; '~Edit');
my $help = $menubar-&gt;cascade(-label =&gt; '~Help');</pre></blockquote>

<p><a name="INDEX-1782" /><a name="INDEX-1783" /><a name="INDEX-1784" />Now create the menu items for the File
menu. The New menu item, <tt class="literal">$new</tt>, is another cascade,
whose menu we'll populate in short order. It's visually
set apart from the other menu items by a separator: a thin horizontal
rule. Command menu items accept callbacks and act like Buttons.
Notice that for each label, we've explicitly used the
-<tt class="literal">underline</tt> option rather than a
<tt class="literal">~</tt>, just to show that they both work. The
-<tt class="literal">accelerator</tt> option displays a keyboard shortcut
designed to activate a menu item<em class="replaceable"><tt>.</tt></em> Note that we
are responsible for adding the proper binding (See <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a>).
</p>

<blockquote><pre class="code">my $new = $file-&gt;cascade(
    -label       =&gt; 'New',
    -accelerator =&gt; 'Ctrl-n',
    -underline   =&gt; 0,
);
$file-&gt;separator;
$file-&gt;command(
    -label       =&gt; 'Open',
    -accelerator =&gt; 'Ctrl-o',
    -underline   =&gt; 0,
);
$file-&gt;separator;
$file-&gt;command(
    -label       =&gt; 'Save',
    -accelerator =&gt; 'Ctrl-s',
    -underline   =&gt; 0,
);
$file-&gt;command(
    -label       =&gt; 'Save As ...',
    -accelerator =&gt; 'Ctrl-a',
    -underline   =&gt; 1,
);
$file-&gt;separator;
$file-&gt;command(
    -label       =&gt; "Close",
    -accelerator =&gt; 'Ctrl-w',
    -underline   =&gt; 0,
    -command     =&gt; \&amp;exit,
);
$file-&gt;separator;
$file-&gt;command(
    -label       =&gt; "Quit",
    -accelerator =&gt; 'Ctrl-q',
    -underline   =&gt; 0,
    -command     =&gt; \&amp;exit,
);</pre></blockquote>

<p>Similarly, let's create the menu items for the Edit and Help
menubuttons:
</p>

<blockquote><pre class="code">$edit-&gt;command(-label =&gt; 'Preferences ...');

$help-&gt;command(-label =&gt; 'Version', -command =&gt; sub {print "Version\n"});
$help-&gt;separator;
$help-&gt;command(-label =&gt; 'About',   -command =&gt; sub {print "About\n"});</pre></blockquote>

<p><a name="INDEX-1785" /><a name="INDEX-1786" /><a name="INDEX-1787" /><a name="INDEX-1788" />Now it's time to populate the
File/New cascade menu. The second and third menu items (the tearoff
is the first) are checkbuttons created by iterating over a list of
two-element anonymous arrays. Checkbuttons toggle between two values:
an -<tt class="literal">onvalue</tt> and an -<tt class="literal">offvalue</tt>,
which default to 1 and 0, respectively. We want each checkbutton in a
known state, so we supply our own initialized variables. If
-<tt class="literal">variable</tt> isn't specified, Perl/Tk uses a
hidden, uninitialized instance variable.
</p>

<blockquote><pre class="code">my($motif, $bisque) = (1, 0);

foreach (['Strict Motif', \$motif], ['Bisque', \$bisque]) {
   $new-&gt;checkbutton(
        -label    =&gt; $_-&gt;[0],
        -variable =&gt; $_-&gt;[1],
    );
}</pre></blockquote>

<p>To get to the actual checkbutton variable, we can do something like
this:
</p>

<blockquote><pre class="code">my $vr = $new-&gt;cget(-menu)-&gt;entrycget('Bisque', -variable);
$$vr = 1;</pre></blockquote>

<p>This statement says, get the Menu reference for
<tt class="literal">$new</tt> and, using that reference, get the
<tt class="literal">-variable</tt> option value for the menu item whose
label is <tt class="literal">Bisque</tt>. Now <tt class="literal">$vr</tt> is a
reference to <tt class="literal">$bisque</tt>, which we de-reference and
set "on."
</p>

<p>The fourth menu item is another command, and the fifth a separator:</p>

<blockquote><pre class="code">$new-&gt;command(-label =&gt; 'Widget');
$new-&gt;separator;</pre></blockquote>

<p>The sixth File/New menu item is yet another cascade, but this time we
explicitly create its menu without a tearoff. It's important to
note that the new menu must be a child of the current menu.
</p>

<p><a name="INDEX-1789" />This
highlights another special feature of the Perl/Tk menu system: we are
not forced to explicitly create menus; Perl/Tk does that
automatically when the first menu item is created. It's because
of this behavior that we are forced to create a menu manually:
</p>

<blockquote><pre class="code">my $new_image = $new-&gt;cascade(
    -label =&gt; 'Image',
    -menu  =&gt; $new-&gt;cget(-menu)-&gt;Menu(-tearoff =&gt; 0),
);</pre></blockquote>

<p>The File/New/Image menu item is a cascade, so populate its menu with
a radiobutton for each Photo image type (See <a href="ch17_01.htm">Chapter 17, "Images and Animations"</a>). Like with checkbuttons, Perl/Tk uses an
uninitialized instance variable if we don't supply one.
</p>

<blockquote><pre class="code">my $new_image_format = 'png';
foreach (qw/bmp ppm gif png jpg tif/) {
    $new_image-&gt;radiobutton(
        -label    =&gt; $_,
        -variable =&gt; \$new_image_format,
    );
}</pre></blockquote>

<p><a name="INDEX-1790" />Whew. That was a lot of work! If
you're wondering why there isn't an easier way to
manipulate such a common construct, then wonder no longer, because
there is, and it's quite elegant. Once again, Perl/Tk has
another unique option, -<tt class="literal">menuitems</tt>, which lets us
specify all our menu items with a data structure.<a name="INDEX-1791" />
</p>

</div>
<a name="mastperltk-CHP-12-SECT-2.2" /><div class="sect2">
<h3 class="sect2">12.2.2. Menubars the Slick, Sophisticated, New-Fashioned Way</h3>

<p><a name="INDEX-1792" />In the following code, we create a
menubar, add the menubutton cascades, and hide all the menu item
details in subroutines. This is simple, modular, concise, and
extremely cool.
</p>

<blockquote><pre class="code">use Tk 800.000;
use subs qw/edit_menuitems file_menuitems help_menuitems/;

my $mw = MainWindow-&gt;new;
$mw-&gt;configure(-menu =&gt; my $menubar = $mw-&gt;Menu);

my $file = $menubar-&gt;cascade(
    -label =&gt; '~File', -menuitems =&gt; file_menuitems);

my $edit = $menubar-&gt;cascade(
    -label =&gt; '~Edit', -menuitems =&gt; edit_menuitems);

my $help = $menubar-&gt;cascade(
    -label =&gt; '~Help', -menuitems =&gt; help_menuitems);</pre></blockquote>

<p><a name="INDEX-1793" /><a name="INDEX-1794" /><a name="INDEX-1795" /><a name="INDEX-1796" />If
you have lots of menubuttons, you might like this
<tt class="literal">map</tt> approach, which produces an identical result.
Here we feed <tt class="literal">map</tt> a code block and a list of
anonymous arrays to work with. The code block prepends a tilde to the
first element of each anonymous array and uses that as the menu
item's -<tt class="literal">label</tt> option. The second element of
each anonymous array is a subroutine call, which is invoked and
returns a value for -<tt class="literal">menuitems</tt>.
</p>

<blockquote><pre class="code">map {$menubar-&gt;cascade( -label =&gt; '~' . $_-&gt;[0], -menuitems =&gt; $_-&gt;[1] )}
    ['File', file_menuitems],
    ['Edit', edit_menuitems],
    ['Help', help_menuitems];</pre></blockquote>

<p><a name="INDEX-1797" />Regardless of how we do it, the
-<tt class="literal">menuitems</tt> option is key. Obviously, its value
must be a Perl scalar; in fact, -<tt class="literal">menuitems</tt> expects
an array reference and, within each element of the array, yet another
array reference to a list of options that describe one menu item. We
thus have a list of lists. For example, here's a definition for
one command menu item, with the label "Preferences ...":
</p>

<blockquote><pre class="code">sub edit_menuitems {
    [
      ['command', 'Preferences ...'],
    ];
}</pre></blockquote>

<p><a name="INDEX-1798" /><a name="INDEX-1799" /><a name="INDEX-1800" /><a name="INDEX-1801" />The first element of a menu item
definition is the <em class="emphasis">type</em> of menu item
(<tt class="literal">cascade</tt>, <tt class="literal">checkbutton</tt>,
<tt class="literal">command</tt>, or <tt class="literal">radiobutton</tt>), and
the second element is its -<tt class="literal">label</tt> value. These two
values are required, but any other valid menu item option(s) can
follow. In the case of a command menu item, we normally include a
-<tt class="literal">command</tt> callback option and sometimes
-<tt class="literal">underline</tt> (but that can be tilde-specified as
part of the label), -<tt class="literal">accelerator</tt>, and so on.
</p>

<p><a name="INDEX-1802" />Here are
the Help command menu item definitions, including their callbacks.
The null string between the Version and About menu items generates a
separator. (<tt class="literal">-menuitems</tt> treats any array element
that's not an array reference as a separator.)
</p>

<blockquote><pre class="code">sub help_menuitems {
    [
      ['command', 'Version', -command =&gt; sub {print "Version\n"}],
      '',
      ['command', 'About',   -command =&gt; sub {print "About\n"}],
    ];
}</pre></blockquote>

<p>Obviously, -<tt class="literal">menuitems</tt> must be powerful enough to
generate the complex File menu shown in <a href="ch12_01.htm">Figure 12-1</a>.
Let's examine the code:
</p>

<blockquote><pre class="code"> 1   sub file_menuitems {
 2
 3      # Create the menu items for the File menu.
 4  
 5      my($motif, $bisque) = (1, 0);
 6      my $new_image_format = 'png';
 7  
 8      [
 9        [qw/cascade ~New   -accelerator Ctrl-n -menuitems/ =&gt;
10         [
11           ['checkbutton', 'Strict Motif', -variable =&gt; \$motif],
12           ['checkbutton', 'Bisque',       -variable =&gt; \$bisque],
13           [qw/command Widget/], '',
14           [qw/cascade Image -tearoff 0 -menuitems/ =&gt;
15             [
16               map ['radiobutton', $_, -variable =&gt; \$new_image_format],
17                   qw/bmp ppm gif png jpg tif/,
18             ],
19           ],
20         ],
21       ],                                                      '',
22       [qw/command ~Open  -accelerator Ctrl-o/],               '',
23       [qw/command ~Save  -accelerator Ctrl-s/],
24       [qw/command/, 'S~ave As ...', qw/-accelerator Ctrl-a/], '',
25       [qw/command ~Close -accelerator Ctrl-w/],               '',
26       [qw/command ~Quit  -accelerator Ctrl-q -command/ =&gt; \&amp;exit],
27     ];
28 
29   } # end file_menuitems</pre></blockquote>

<p>First, lines 8 through 27 encompass the array reference passed to
-<tt class="literal">menuitems</tt>. Lines 22 through 26 define five
command menu items (Open, Save, Save As, Close, and Quit) and three
separators; we needn't go over this again. Lines 9 through 21
define the New menu item cascade and all its children. Let's
look at the code more closely.
</p>

<p>Line 5 declares and initializes the lexical variables used by the
checkbuttons. The variables manage to survive past the end of the
subroutine call because the checkbuttons keep references to them.
Indeed, they'll never be destroyed until the checkbuttons go
away and release the last reference.
</p>

<p>Similarly, line 6 declares and initializes the default image format
variables for the radiobuttons.
</p>

<p>Line 9 declares the New cascade, the second File menu item (the
tearoff is the first). Since cascades are menus that have their own
menu items, we nest another <tt class="literal">-menuitems</tt> option,
defined by lines 10 through 20.
</p>

<p>Lines 11 though 19 define the menu items for the File/New menu. The
first is the implicit tearoff, followed by the Strict Motif and
Bisque checkbuttons (lines 11 and 12), the Widget command menu item,
and a separator (line 13).
</p>

<p>Line 14 generates the <tt class="literal">Image</tt> cascade, but its menu
has no tearoff. Once again, we nest another
-<tt class="literal">menuitems</tt> option, and lines 15 through 18
populate the menu.
</p>

<p>Lines 16 and 17 define the radiobutton menu items for the
File/New/Image menu, using the cool and concise
<tt class="literal">map</tt> idiom.
</p>

<p>If you've been paying close attention, you might be wondering
if it's possible to specify a -<tt class="literal">menuitems</tt>
option for the menubar itself; after all, the menubar is really just
a menu filled with cascade menu items. As it happens, we can. First,
delete the previous File/Edit/Help creation code and make these
changes (shown here in bold) to our code:
</p>

<blockquote><pre class="code">use Tk 800.000;
use subs qw/edit_menuitems file_menuitems help_menuitems <tt class="userinput"><b>menubar_menuitems</b></tt>/;

my $mw = MainWindow-&gt;new;
$mw-&gt;configure(-menu =&gt; my $menubar = $mw-&gt;Menu<tt class="userinput"><b>(-menuitems =&gt; menubar_menuitems</b></tt>));</pre></blockquote>

<p>Then add subroutine <tt class="literal">menubar_menuitems</tt>, which
returns a list of menubar cascades:
</p>

<blockquote><pre class="code">sub menubar_menuitems {

    [
      map ['cascade',  $_-&gt;[0], -menuitems =&gt; $_-&gt;[1]],
          ['~File', file_menuitems],
          ['~Edit', edit_menuitems],
          ['~Help', help_menuitems],
    ];

}</pre></blockquote>

<p>We can even go one more potentially ludicrous step and generate
everything&#x2014;menubar, menus, and menu items&#x2014;from a single
data structure. In this new version, all we've done is take the
<tt class="literal">map</tt> construct and paste the File, Edit, and Help
-<tt class="literal">menuitems</tt> definitions in place of a subroutine
call. Gee, looks almost like assembly code.
</p>

<blockquote><pre class="code">use Tk 800.000;
use subs qw/menubar_etal/;
use strict;

my $mw = MainWindow-&gt;new;
$mw-&gt;configure(-menu =&gt; my $menubar = $mw-&gt;Menu(-menuitems =&gt; menubar_etal));

MainLoop;

sub menubar_etal {

    [
      map ['cascade',  $_-&gt;[0], -menuitems =&gt; $_-&gt;[1]],

          ['~File',
            [
              [qw/cascade ~New   -accelerator Ctrl-n -menuitems/ =&gt;
                [
                  ['checkbutton', 'Strict Motif'],
                  ['checkbutton', 'Bisque'],
                  [qw/command Widget/], '',
                  [qw/cascade Image -tearoff 0 -menuitems/ =&gt;
                    [
                      map ['radiobutton', $_],
                          qw/bmp ppm gif png jpg tif/,
                    ],
                  ],
                ],
              ],                                                      '',
              [qw/command ~Open  -accelerator Ctrl-o/],               '',
              [qw/command ~Save  -accelerator Ctrl-s/],
              [qw/command/, 'S~ave As ...', qw/-accelerator Ctrl-a/], '',
              [qw/command ~Close -accelerator Ctrl-w/],               '',
              [qw/command ~Quit  -accelerator Ctrl-q -command/ =&gt; \&amp;exit],
            ],
          ],

          ['~Edit',
            [
              ['command', 'Preferences ...'],
            ],
          ],


          ['~Help',
            [
              ['command', 'Version', -command =&gt; sub {print "Version\n"}],
              '',
              ['command', 'About',   -command =&gt; sub {print "About\n"}],
            ],
          ],


    ];

} # end menubar_etal</pre></blockquote>

<p><a name="INDEX-1803" /><a name="INDEX-1804" />The only things missing are the
variables specifying the initial checkbutton and radiobutton values.
We can make them file lexicals (globals) and include a
-<tt class="literal">variable</tt> option, as we did previously. Or maybe
limit their scope to some other block and pass references to them as
formal parameters when calling <tt class="literal">menubar_etal</tt>. Or we
can just use the default instance variables provided by Perl/Tk. All
we need to know is how to access them.
</p>

<p>It's easy because, once we have a reference to a Menu widget,
we can <tt class="literal">entrycget</tt> and
<tt class="literal">entryconfigure</tt> any menu item. Here we fetch the
File Menu from the menubar cascade, the New Menu from the File
cascade, and the Image Menu from the New cascade, and initialize the
variables:<a name="INDEX-1805" /><a name="INDEX-1806" /> 
</p>

<blockquote><pre class="code">my $file_menu = $menubar-&gt;entrycget('File', -menu);
my $new_menu = $file_menu-&gt;entrycget('New', -menu);
my $image_menu = $new_menu-&gt;entrycget('Image', -menu);

my $motif = $new_menu-&gt;entrycget('Strict Motif', -variable);
$$motif = 1;
my $bisque = $new_menu-&gt;entrycget('Bisque', -variable);
$$bisque = 0;
my $new_image_format = $image_menu-&gt;entrycget('png', -variable);
$$new_image_format = 'png';</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch12_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12. The Menu System</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">12.3. The Win32 System Menu Item</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>