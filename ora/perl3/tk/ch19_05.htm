<html><head><title>The IPADM Daemon, ipadmd (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch19_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">19.5. The IPADM Daemon, ipadmd</h2>

<p><a name="INDEX-2986" /><a name="INDEX-2987" />The daemon's duties consist of:
</p>

<ul><li>
<p>Creating the well-known server socket, then looping forever,
accepting client connect requests and forking a copy of itself to
handle them
</p>
</li><li>
<p>	Processing IPADM messages for the duration of the session</p>
</li><li>
<p>Employing advisory file locking so only one client has write access
to an SDB at any point in time, thus ensuring the integrity of the
SDB files
</p>
</li><li>
<p>Keeping the DHCP and DNS configuration files current by periodically
checking for modified SDB files, and running the filter as required
</p>
</li></ul>
<p>We'll look briefly at how these functions are handled, but only
briefly; we're beginning to stray far from the topic of choice.
</p>

<a name="mastperltk-CHP-19-SECT-5.1" /><div class="sect2">
<h3 class="sect2">19.5.1. The Forking Server</h3>

<p><a name="INDEX-2988" /><a name="INDEX-2989" /><a name="INDEX-2990" />We want a forking server, because each
connect typically takes many minutes to service; after all,
there's a human on the other end of the socket, slowly clicking
and typing away at the Tk client. With Perl and IO::Socket, writing
such a server is a piece of cake. First, <em class="emphasis">ipadmd</em>
creates its socket endpoint. The Listen parameter specifies the
maximum number of simultaneous open sockets and indicates that this
socket listens for connect attempts rather than attempting a connect
itself.
</p>

<p>The daemon main loop simply accepts connects as they arrive, storing
the network socket handle in <tt class="literal">$ns</tt>, which the child
inherits after the fork. While the child handles the current request,
the parent closes its copy of <tt class="literal">$ns</tt> and resumes
listening for network activity.
</p>

<blockquote><pre class="code">my $server = IO::Socket::INET-&gt;new
    Proto     =&gt; 'tcp',
    LocalHost =&gt; $DAEMON_HOST,
    LocalPort =&gt; $DAEMON_PORT,
    Listen    =&gt; SOMAXCONN,
    Reuse =&gt; 1,
);
die "Socket::INET::new failed: $!" unless defined $server;

while (my $ns = $server-&gt;accept) {

    my $pid = undef;
    if ($pid = fork) {
        close $ns or die "Client socket close failed: $!";
    } elsif (defined $pid) {
        $ns-&gt;autoflush(1);
        client_connect $ns;
    } else {
        die "fork error: $!";
    }

} # whilend forever network daemon</pre></blockquote>

</div>
<a name="mastperltk-CHP-19-SECT-5.2" /><div class="sect2">
<h3 class="sect2">19.5.2. IPADM Message Handling</h3>

<p><a name="INDEX-2991" /><a name="INDEX-2992" />The
child forked by <em class="emphasis">ipadmd</em> has yet another main
loop, which lasts as long as the Perl/Tk client keeps the socket
alive. The child reads the socket line by line until the
<tt class="literal">$EOF</tt> terminator arrives and dispatches the IPADM
message to the proper processing subroutine. This code also appends
the <tt class="literal">$EOF</tt> terminator to whatever data the command
processor might have returned, as required by the IPADM protocol.
</p>

<blockquote><pre class="code">CONNECTED:
  while (1) {
      my(@data) = ( );

    COMMAND:
      while (1) {
          $_ = &lt;$ns&gt;;
          last CONNECTED unless defined $_;
          last COMMAND if /^$EOF$/;
          push @data, $_;
      } # whilend COMMAND

      $_ = $data[0];

    CASE: 
      {
          /get_subnet_list/ and do { gsl $ns, @data; last CASE };
          /get_subnet_file/ and do { gsf $ns, @data; last CASE };
          /put_subnet_file/ and do { psf $ns, @data; last CASE };
          /unl_subnet_file/ and do { usf $ns, @data; last CASE };
          print $ns "1 Unknown command '$_'";
      } # casend

      print $ns "$EOF\n";
  } # whilend CONNECTED</pre></blockquote>

<p>Perhaps the simplest example of an IPADM command processor is the
subroutine <tt class="literal">gsl</tt>, the
<tt class="literal">get_subnet_list</tt> handler. Assuming it can open the
SDB directory, it creates an array of filenames ending in
<em class="emphasis">.sdb</em>, then reads the first line of each file,
and outputs the filename and title line on the network socket. Notice
<tt class="literal">gsl</tt> also provides status and/or error messages.
</p>

<blockquote><pre class="code">sub gsl {

    my($ns, @data) = @_;

    unless (opendir S, $SDB_PATH) {
        print $ns "1 Cannot Read SDB Directory $SDB_PATH: $!.\n";
        return;
    }
    my(@dirent) = grep /^.+\.sdb$/, sort(readdir S);
    closedir S;
    print $ns "0 OK\n";
 
    while ($_ = shift @dirent) {
        open S, "$SDB_PATH/$_" or die "Cannot open $_: $!";
        my $title = &lt;S&gt;;
        ($title) = $title =~ /^\s*Title\s*=\s*(.*)$/;
        print $ns "$_ $title\n";
        close S;
    }

} # end get_subnet_list</pre></blockquote>

</div>
<a name="mastperltk-CHP-19-SECT-5.3" /><div class="sect2">
<h3 class="sect2">19.5.3. Locking an SDB File</h3>

<p><a name="INDEX-2993" /><a name="INDEX-2994" /><a name="INDEX-2995" />Potentially, several network clients and
this daemon could be vying for a single SDB file, so it's
imperative that we provide a reliable locking mechanism. For example,
the Perl/Tk client <em class="emphasis">ipadm</em> wants exclusive access
so it can modify the SDB, while this daemon wants exclusive access so
it can read the SDB without fear of it changing under its nose.
</p>

<p><a name="INDEX-2996" />We have at
our disposal a cool module that implements advisory file locking
using <tt class="literal">LockFile</tt> objects. As the word advisory
suggests, this module only advises us if we have an exclusive lock on
a file; it can't actually enforce or guarantee exclusiveness.
The underlying locking mechanism is implemented via the Perl built-in
<tt class="literal">flock</tt> function, with all its caveats and
limitations, although in this mutually cooperative environment where
everyone uses <tt class="literal">LockFile</tt>, it works just fine.
</p>

<p>But <tt class="literal">LockFile</tt> doesn't lock the SDB files;
it's more clever than that. Instead, it locks access to an
entire lock directory, where it creates special symbolic links that
encode which SDBs are locked, who owns the locks, and when the locks
were created.
</p>

<p>An SDB is locked with a call like this:</p>

<blockquote><pre class="code">my $lock = LockFile-&gt;new($sdb, $id);</pre></blockquote>

<p>where <tt class="literal">$sdb</tt> is the SDB pathname and
<tt class="literal">$id</tt> is a unique user identifier composed of
username, hostname, and process ID. <tt class="literal">LockFile</tt>
interlocks the lock directory by <em class="emphasis">flock</em>ing a
special file named <em class="emphasis">single_thread.lock</em>, then
proceeds to create the specially coded symbolic link. Here's an
example of what the lock directory might look like:
</p>

<blockquote><pre class="code">lrwxr-xr-x Aug 11 23:33 Subnet_128B.sdb-lock -&gt; bug@Pandy:193041
-rw-r--r-- Jul 10 21:54 single_thread.lock</pre></blockquote>

<p>The symbolic link tells us what subnet is locked (subnet 128B, the
Rubber Band Development department), when it was locked, and what
username, computer, and process ID has the lock.
</p>

<p>Because we know the time a subnet was locked, it's possible to
implement <em class="emphasis">lock timeouts</em>. Once granted exclusive
access to an SDB, an administrator has a guaranteed minimum amount of
time to complete his work. Other lock requests arriving in this time
period are granted only concurrent read access. After the lock
timeout interval expires, someone else can grab the SDB, but if no
one does, the original person keeps the lock indefinitely.
<tt class="literal">LockFile</tt> objects have these methods at their
disposal:
</p>

<dl>
<dt><tt class="literal">check_my_lock</tt> </dt>
<dd>
<a name="INDEX-2997" />Returns
a true value if we still have an exclusive lock
</p>
</dd>


<dt><tt class="literal">extend_lock</tt></dt>
<dd>
<a name="INDEX-2998" />Attempts
to reacquire an exclusive lock on the current SDB
</p>
</dd>


<dt><tt class="literal">free</tt></dt>
<dd>
<a name="INDEX-2999" />Returns the
second of the epoch when the current lock expires
</p>
</dd>


<dt><tt class="literal">owner</tt> </dt>
<dd>
<a name="INDEX-3000" />Returns the
owner of an exclusive SDB lock
</p>
</dd>

</dl>

<p>The entire module is too long to show, but here's a small
section that interlocks the lock directory and recreates the symbolic
link:
</p>

<a name="INDEX-3001" /><a name="INDEX-3002" /><a name="INDEX-3003" /><blockquote><pre class="code">my $file = $self-&gt;{-file};
my $lockname = lockname $file;
my $lockstring = $self-&gt;{-user};

sysopen(LOCK, "$LOCK_PATH/single_thread.lock", O_RDWR|O_CREAT) or
    do {carp "Can't open single_thread.lock: $!"; return 0};
flock(LOCK, LOCK_EX) or
    do {carp "Can't flock single_thread.lock: $!"; return 0};

my (@ls) = lstat $lockname;
unless (@ls) {              # file not locked, grab it
    symlink $lockstring, $lockname or die $!;
    close LOCK;
    return 1;
} else {                    # file lock held
    my $expires = ($ls[10] ||= 0) + ($self-&gt;lock_time * 60); # seconds
    if ((time &gt; $expires) or $self-&gt;check_my_lock) {
        unlink $lockname or die $!;                   # lock's expired, or is mine,
        symlink $lockstring, $lockname or die $!;            # so recreate it
        close LOCK;
        return 1;
    } else {                # lock belongs to someone else
        close LOCK;
        my $free = localtime $expires;
        my $owner = readlink $lockname or die $!;
        $self-&gt;{free} = $free;
        $self-&gt;{owner} = $owner;
        return 0;
    }
}</pre></blockquote>

</div>
<a name="mastperltk-CHP-19-SECT-5.4" /><div class="sect2">
<h3 class="sect2">19.5.4. Updating the DHCP and DNS Configuration Files</h3>

<p><em class="emphasis">ipadmd</em><a name="INDEX-3004" /><a name="INDEX-3005" /><a name="INDEX-3006" /><a name="INDEX-3007" />
maintains a DBM file whose keys are SDB filenames and whose values
indicate when the SDB file was last filtered, i.e., when it was
incorporated in the DHCP and DNS configuration files. The following
statements bind the DBM file <tt class="literal">$MOD_DB_PATH</tt>
(creating it if needed) to the global hash
<tt class="literal">%MODTIMES</tt> and initialize an alarm handler that
calls <tt class="literal">update_network_dbs</tt> every minute.
</p>

<blockquote><pre class="code">tie %MODTIMES, 'SDBM_File', $MOD_DB_PATH, O_RDWR|O_CREAT, 0644;
$SIG{ALRM} = \&amp;update_network_dbs;
alarm 60;</pre></blockquote>

<p>This crude version of <tt class="literal">update_network_dbs</tt> compares
the DBM's last filter time with the SDB's last
modification time (second of the Unix epoch), gets an exclusive lock
on the SDB file, and updates the network configuration files and DBM
last filter time.
</p>

<p>However, a better approach might be to make a list of modified SDBs
and have the filter operate on all of them, so the configuration
files are updated only once. This minimizes DHCP and DNS query
delays, since the process of reinitializing these daemons can be
lengthy.
</p>

<blockquote><pre class="code">sub update_network_dbs {

    # Compare subnet database files and SDBM last modification
    # dates. Lock recently changed files and update dhcpd.conf
    # and the named zone files.

    opendir S, $SDB_PATH or warn "Cannot open $SDB_PATH: $!";
    my(@dirent) = grep /^.+\.sdb$/, readdir S;
    closedir S;

    while (my $subnet = shift @dirent) {
        $MODTIMES{$subnet} ||= 0;
        my $last_mod = (stat "$SDB_PATH/$subnet")[9];
        if ($last_mod &gt; $MODTIMES{$subnet}) {
            # Lock the subnet file, update DHCP/DNS config files. 
            $MODTIMES{$subnet} = $last_mod;
        }
    }

    $SIG{ALRM} = \&amp;update_network_dbs;
    alarm 60;

} # end update_network_dbs</pre></blockquote>

</div>
<a name="mastperltk-CHP-19-SECT-5.5" /><div class="sect2">
<h3 class="sect2">19.5.5. What About Security?</h3>

<p>That's beyond the scope of this book. Really. See <a href="../cookbook/ch17_08.htm">Recipe 17.7
in the <em class="citetitle">Perl Cookbook</em></a> (O'Reilly).<a name="INDEX-3008" /><a name="INDEX-3009" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch19_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">19.4. The IPADM Helper, ipadmh</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">19.6. Polling Win32 Sockets</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>
