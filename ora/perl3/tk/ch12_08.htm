<html><head><title>Pie Menus (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch13_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">12.8. Pie Menus</h2>

<p><a name="INDEX-1892" /><a name="INDEX-1893" /><a name="INDEX-1894" />We are accustomed to using
one-dimensional <em class="emphasis">linear</em> menus&#x2014;not
one-dimensional in appearance, but in usage. When a linear menu is
posted, the cursor is positioned at the top of the menu and we are
expected to move the cursor downward. If we overshoot the target menu
item, we can move the cursor upward, but we're still moving in
a single dimension. As the cursor moves over menu items, their
reliefs change (unless disabled) to raised, meaning they are
activated. To actually invoke a menu item we must release button 1
while the cursor is within the area defined by the menu item.
</p>

<p>In contrast, pie menus are two dimensional: the cursor is initially
positioned in the center of the pie, so all the wedge-shaped menu
items are the same distance from the cursor but in different
directions. Thus all menu items are equally accessible, spatially.
Each pie piece has a virtual section that extends from the
pie's perimeter to the edge of the display. To hit such a large
target requires a gross, gestural motor movement, which your muscles
easily learn and remember.
</p>

<p><a name="INDEX-1895" /><a name="INDEX-1896" /><a name="INDEX-1897" />Pie menus were invented by
Don Hopkins. For a history of Don's work, visit <a href="../../../../../../catalog.com/hopkins/piemenus/index.html">http://catalog.com/hopkins/piemenus/index.html</a>.
This experimental Perl/Tk pie menu implementation is based on a piece
of Don's early work, written in 1992 for an early version of
Tcl/Tk.
</p>

<p><a href="ch12_08.htm">Figure 12-11</a> illustrates what a File pie menu might
look like. The pie menu has six menu items, each occupying a 60
degree slice of the pie. To select an item, we just click anywhere on
the pie piece (or the virtual part that extends to the
display's edge). There's no need to be particularly
accurate; just make a fast, casual motion. Notice that this pie menu
has its menu items floating in space.
</p>

<a name="mastperltk-CHP-12-FIG-11" /><div class="figure"><img src="figs/mptk.1211.gif" alt="Figure 12-11" width="95" height="86" /></div><h4 class="objtitle">Figure 12-11.  A pie menu with -shaped =&gt; 1</h4>

<p><a href="ch12_08.htm">Figure 12-12</a> shows the same pie menu in a rectangular
window with wedge dividers. Now, imagine those wedge dividers
extending outwards to infinity (or as far as your arm is long or the
display is big!). That huge pie slice defines the (virtual) pie menu
item; you can click <em class="emphasis">anywhere</em> within that area!
</p>

<a name="mastperltk-CHP-12-FIG-12" /><div class="figure"><img src="figs/mptk.1212.gif" alt="Figure 12-12" width="98" height="92" /></div><h4 class="objtitle">Figure 12-12.  A pie menu with -shaped =&gt; 0</h4>

<p><a name="INDEX-1898" />A pie menu is ideally suited for
selecting two pieces of information simultaneously. Consider a word
processor where we want to select a font and its size. Each font can
be a pie piece, and its size is determined by how far from the center
of the pie we click. Or think of a color wheel, where hue is a pie
slice and its saturation varies from the pie's center to its
circumference. Unfortunately, the current version of the Perl/Tk pie
menu lacks this sophistication.
</p>

<a name="mastperltk-CHP-12-SECT-8.1" /><div class="sect2">
<h3 class="sect2">12.8.1. Fitts' Law</h3>

<p><a name="INDEX-1899" />Pie menus are
based on a model of human psychomotor behavior developed by
P. M. Fitts. In his 1954 work, Fitts studied the time required to hit
a target, based on target distance and size. Unsurprisingly, selecting
a large menu item close at hand (a virtual pie menu item) with a mouse
is faster than hunting for a small target far away (a tiny linear menu item).
</p>

<p>We can write a Perl/Tk program to test this hypothesis. The basic
idea is to start with the cursor at a known position, flash a target
of random size and position, measure how long it takes to hit the
target, and examine how this time depends on the target's
distance and area. See <a href="ch12_08.htm">Figure 12-13</a> for complete
usage information.
</p>

<a name="mastperltk-CHP-12-FIG-13" /><div class="figure"><img src="figs/mptk.1213.gif" alt="Figure 12-13" width="468" height="373" /></div><h4 class="objtitle">Figure 12-13.  Demonstrating Fitts' law</h4>

<p><a name="INDEX-1900" />The Fitts
simulator uses a Canvas for the playing field, with a Canvas
rectangle item as the target and an oval item as the starting point.
The start circle is actually a canvas group<a href="#FOOTNOTE-29">[29]</a> with a text item overlaid
on top of the oval item. The group we'll tag with the string
<tt class="literal">'start'</tt> and the rectangle with the string
<tt class="literal">'rectangle'</tt>, and we'll use those identifiers
when addressing the canvas items.
</p><blockquote class="footnote"> <a name="FOOTNOTE-29" /><p> [29] Tk
800.018 added the <tt class="literal">canvasGroup</tt> Canvas method. As
the name might imply, many individual canvas items can be logically
grouped together and referenced as a single entity, in a manner not
unlike a mega-widget. </p> </blockquote>

<blockquote><pre class="code">my $c = $mw-&gt;Canvas(qw/-width 500 -height 500/)-&gt;grid;

$c-&gt;createGroup(0, 0,
    -tags    =&gt; 'start',
    -members =&gt; [
        $c-&gt;createOval(qw/ 0  0 40 40 -fill blue/),
        $c-&gt;createText(qw/20 20 -text Start -fill white/),
    ],
);</pre></blockquote>

<p>These bindings give the simulation its proper behavior:</p>

<ul><li>
<p>When the cursor enters the blue start circle, create the green target.</p>
</li><li>
<p>When the cursor leaves the blue start circle, record the current time.</p>
</li><li>
<p>When the cursor enters the green target, compute and display the
elapsed time, and delete the target.
</p>

<blockquote><pre class="code">$c-&gt;bind('start',     '&lt;Enter&gt;' =&gt; \&amp;enter_start);
$c-&gt;bind('start',     '&lt;Leave&gt;' =&gt; \&amp;leave_start);
$c-&gt;bind('rectangle', '&lt;Enter&gt;' =&gt; \&amp;enter_rectangle);</pre></blockquote>
</li></ul>
<p><a name="INDEX-1901" />Prior
to entering the main loop, seed the random number generator, used to
generate random coordinates, and width and height values. The main
loop essentially fetches two random numbers and treats them as an (x,
y) pair specifying the start circle's top-left corner. The
<tt class="literal">coords</tt> method changes the
<tt class="literal">'start'</tt> item's coordinates, effectively and
instantaneously moving the item (group) to its new location. The
<tt class="literal">waitVariable</tt> command (described in <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a>) then logically suspends the program, but
still allows event processing, until the target receives an
<tt class="literal">&lt;Enter&gt;</tt> event.
</p>

<blockquote><pre class="code">srand( time ^ $$ );

while (1) {

    $rendezvous = 0;
    my($x, $y) = points 2;
    $c-&gt;coords('start', $x, $y);
    $mw-&gt;waitVariable(\$rendezvous);

}</pre></blockquote>

<p>Once the main loop has positioned the start circle, nothing happens
until the cursor enters the circle. Once that happens, any rectangle
is promptly deleted, which cures the pathological case of the user
rapidly moving the cursor back and forth over the circle (hence
generating multiple <tt class="literal">&lt;Enter&gt;</tt> events) and
creating tons of rectangles. A random coordinate for the top-left
corner of the rectangle is selected, as are random width/height
values in the range 5 to 180, inclusive. Then the target is created
and raised to ensure it's not obscured by the start circle.
</p>

<blockquote><pre class="code">sub enter_start {

    my($c) = @_;

    $c-&gt;delete('rectangle');
    my $w = int(rand 180) + 5;
    my $h = int(rand 180) + 5;
    my($x, $y) = points 2;
    $c-&gt;createRectangle($x, $y, $x+$w, $y+$h,
        -fill =&gt; 'green', -tags =&gt; 'rectangle',
    );
    $c-&gt;raise(qw/rectangle start/);
    $c-&gt;idletasks;

} # end enter_start</pre></blockquote>

<p><a name="INDEX-1902" />Now
the start circle and target rectangle are visible on the Canvas, yet
nothing further happens until we move the cursor out of the circle
(and generate a <tt class="literal">&lt;Leave&gt;</tt> event); only then
does timing commence. The <tt class="literal">Tk::timeofday</tt> function
returns the number of microseconds since the Tk program
started.<a href="#FOOTNOTE-30">[30]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-30" /><p> [30] That clock resolution may be a bit
optimistic, but you can probably count on at least millisecond
granularity.</p> </blockquote>

<blockquote><pre class="code">sub leave_start {
    $t0 = Tk::timeofday;
}</pre></blockquote>

<p>At this point, we move the cursor to the target rectangle, which
invokes the <tt class="literal">enter_rectangle</tt> callback. First, save
the current time of day so we can compute the elapsed time. For the
distance computation, we use the Pythagorean theorem that we all
learned in high school. Since the start circle and target rectangle
are both described by a bounding box, we can substitute the
coordinates of the top-left corner in the distance equation. We mark
this iteration of the simulation complete by modifying
<tt class="literal">$rendezvous</tt>, which jogs the main loop into another
iteration.<a name="INDEX-1903" /><a name="INDEX-1904" /><a name="INDEX-1905" />
</p>

<blockquote><pre class="code">sub enter_rectangle {

    my($c) = @_;

    $t1 = Tk::timeofday( );

    my(@rco) = $c-&gt;coords('rectangle');
    my(@sco) = $c-&gt;coords('start'); 
    my $dist = sqrt( ($sco[0] - $rco[0])**2 + ($sco[1] - $rco[1])**2  );

    my $w = $rco[2] - $rco[0];
    my $h = $rco[3] - $rco[1];

    $stat = sprintf "time %5.3f seconds, distance % 4.d, " .
        "area % 6.d, width %3.d, height %3.d = %10d",
        $t1 - $t0, $dist, $w * $h, $w, $h

    $rendezvous = 1;

} # end enter_rectangle</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch12_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch13_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">12.7. Menu Virtual Events</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">13. Miscellaneous Perl/Tk Methods</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>