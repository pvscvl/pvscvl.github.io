<html><head><title>Creating Items in a Canvas (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch09_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">9.6. Creating Items in a Canvas</h2>

<p>The whole point of having a Canvas is to put items in it. You can
create arcs, bitmaps, images, lines, rectangles, ovals (circles),
polygons, text, and widgets. Each has an associated
<tt class="literal">create</tt><em class="emphasis">XXX</em> method, where the
type of item you want to create replaces the
<em class="replaceable"><tt>XXX</tt></em>. Each of the <tt class="literal">create</tt>
methods returns a unique ID<tt class="literal">,</tt> which can be used to
refer to the item later. When you see a method that takes a tag or an
ID as an argument, the ID is the one returned from the
<tt class="literal">create</tt> method.
</p>

<a name="mastperltk-CHP-9-SECT-6.1" /><div class="sect2">
<h3 class="sect2">9.6.1. The Arc Item</h3>

<p>When you create an arc, you specify a bounding rectangle with two
sets of x and y coordinates. The arc is drawn within the confines of
the bounding box. The basic <tt class="literal">createArc</tt> statement is
as follows:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createArc(<em class="replaceable"><tt>x1</em>, <em class="replaceable">y1</em>, <em class="replaceable">x2</em>, <em class="replaceable">y2</tt></em>);</pre></blockquote>

<p>Any additional options used with <tt class="literal">createArc</tt> are
specified after the coordinates:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createArc(<em class="replaceable"><tt>x1, y1, x2, y2, option =&gt; value</tt></em>);</pre></blockquote>

<p><a name="INDEX-1354" /><a name="INDEX-1355" /><a name="INDEX-1356" />Each option for the arc item can be
used later with the <tt class="literal">itemcget</tt> and
<tt class="literal">itemconfigure</tt> Canvas methods. The options are:
</p>

<dl>
<dt><tt class="literal">-extent =&gt;</tt> <tt><em class="replaceable"><tt>degrees</tt></em></tt></dt>
<dd>
<a name="INDEX-1357" />The length of
the arc is specified in degrees by using the
<tt class="literal">-extent</tt> option. The default
<tt class="literal">-extent</tt> (or length) is 90 degrees. The arc is
drawn from the starting point (see <tt class="literal">-start</tt> option)
counterclockwise within the rectangle defined by
(<tt><em class="replaceable"><tt>x1</em></tt>, <tt><em class="replaceable">y1</tt></em></tt>) and
(<tt><em class="replaceable"><tt>x2</em></tt>, <tt><em class="replaceable">y2</tt></em></tt>). The
<tt><em class="replaceable"><tt>degrees</tt></em></tt> value should be between -360 and
360. If it is more or less, the value used is the specified number of
degrees modulo 360.
</p>


<p>Here are some examples of the <tt class="literal">-extent</tt> option:</p>

<blockquote><pre class="code"># This draws half of an oval
$canvas-&gt;createArc(0,0,100,150, -extent =&gt; 180);
# This will draw 3/4 of an oval
$canvas-&gt;createArc(0,0,100,150, -extent =&gt; 270);</pre></blockquote>
</dd>



<dt><tt class="literal">-fill =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1358" />To fill the arc with the specified
color<em class="replaceable"><tt><tt>.</tt></tt></em> By default, there is no fill color for an
arc.
</p>
</dd>


<dt><tt class="literal">-outline =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1359" />Normally the arc is drawn with a
black outline. To change the default, use the
<tt class="literal">-outline</tt> option. The outline color is separate
from the fill color, so to make it a completely solid object, make
the color for <tt class="literal">-outline</tt> and
<tt class="literal">-fill</tt> the same.
</p>
</dd>


<dt><tt class="literal">-outlinestipple =&gt;</tt> <tt><em class="replaceable"><tt>bitmap</tt></em></tt></dt>
<dd>
<a name="INDEX-1360" />To
use <tt class="literal">-outlinestipple</tt>, you must also use the
<tt class="literal">-outline</tt> option. Normally the outline of the arc
is drawn solid. Use a bitmap with <tt class="literal">-outlinestipple</tt>
to make the outline nonsolid; the specified bitmap pattern will be
used to draw the outline of the arc.
</p>
</dd>


<dt><tt class="literal">-start =&gt;</tt> <tt><em class="replaceable"><tt>degrees</tt></em></tt></dt>
<dd>
<a name="INDEX-1361" />The value
associated with the <tt class="literal">-start</tt> option determines where
Perl/Tk starts drawing the arc. The default start position is at
three o'clock (0 degrees). The specified degrees are added to
this position in a counterclockwise direction. Use <tt class="literal">-start
=&gt; 90</tt> to make the arc start at the twelve o'clock
position, use <tt class="literal">-start</tt> <tt class="literal">=&gt; 180</tt>
to make the arc start at the nine o'clock position, and so on.
</p>
</dd>


<dt><tt class="literal">-stipple =&gt;</tt> <tt><em class="replaceable"><tt>bitmap</tt></em></tt></dt>
<dd>
<a name="INDEX-1362" />The <tt class="literal">-stipple</tt>
option fills the arc with a bitmap pattern, but the
<tt class="literal">-fill</tt> option must be specified as well.
</p>
</dd>


<dt><tt class="literal">-style =&gt; "</tt><tt class="userinput"><b>pieslice</b></tt><tt class="literal">" | "chord" | "arc"</tt></dt>
<dd>
<a name="INDEX-1363" />The <tt class="literal">-style</tt> of
the arc determines how the arc is drawn. The default,
<tt class="literal">"pieslice"</tt>, draws the arc and two lines from the
center of the oval ends of the arc segment. The
<tt class="literal">"chord"</tt> value draws the arc and a line connecting
the two end points of the arc segment. The <tt class="literal">"arc"</tt>
value draws just the arc portion with no other lines. The
<tt class="literal">-fill</tt> and <tt class="literal">-stipple</tt> options are
ignored if <tt class="literal">"arc"</tt> is used.
</p>
</dd>


<dt><tt class="literal">-tags =&gt;</tt> <tt><em class="replaceable"><tt>taglist</tt></em></tt></dt>
<dd>
<a name="INDEX-1364" />When you create an arc, you use the
<tt class="literal">-tags</tt> option to assign tag names to it. The value
associated with <tt class="literal">-tags</tt> is an anonymous array of tag
names; for example:
</p>

<blockquote><pre class="code">$canvas-&gt;createArc(0,0,10,140,-tags =&gt; ["arc", "tall"]);</pre></blockquote>

<p><a name="INDEX-1365" />You don't need to use an anonymous
array if you are only specifying one tag name:
</p>

<blockquote><pre class="code">$canvas-&gt;createArc(0,0,10,140,-tags =&gt; "arc");</pre></blockquote>
</dd>


<dt><tt class="literal">-width =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-1366" />This specifies the width of the
outline. The default <tt class="literal">-width</tt> is 1.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-9-SECT-6.2" /><div class="sect2">
<h3 class="sect2">9.6.2. The Bitmap Item</h3>

<p><a name="INDEX-1367" /><a name="INDEX-1368" />A Canvas widget can display a
bitmap instead of text, just as a Button or Label can. You can use
<tt class="literal">createBitmap</tt> to insert a bitmap into your Canvas
widget:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createBitmap(<tt><em class="replaceable">x, y</em></tt>);</pre></blockquote>

<p><a name="INDEX-1369" />Of course, you must use the
<tt class="literal">-bitmap</tt> option to specify which bitmap to display
or you won't see anything. So we really create a bitmap like
this:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createBitmap(<tt><em class="replaceable">x, y</em></tt>, -bitmap =&gt; <tt><em class="replaceable">bitmap</em></tt>);</pre></blockquote>

<p><a name="INDEX-1370" />The other options available for
<tt class="literal">createBitmap</tt> are:
</p>

<dl>
<dt><tt class="literal">-anchor =&gt; "</tt><tt class="userinput"><b>center</b></tt><tt class="literal">" | "n" | "e" | "s" | "w" | "ne" | "nw" | "se" | "sw"</tt></dt>
<dd>
<a name="INDEX-1371" />The <tt class="literal">-anchor</tt>
option determines how the bitmap is placed on the Canvas relative to
the (x, y) coordinates indicated. The default for
<tt class="literal">-anchor</tt> is <tt class="literal">"center"</tt>, which puts
the center of the image at the (x, y) coordinates. Using a single
cardinal direction (for example, <tt class="literal">"e"</tt>) would place
the center of that edge at the (x, y) coordinates.
</p>
</dd>


<dt><tt class="literal">-background =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1372" />The <tt class="literal">-background</tt> option
specifies the color to use for all the 0 (zero) bitmap pixels. If you
don't specify a background color or use an empty string
(<tt class="literal">""</tt>), the 0 pixels will be transparent.
</p>
</dd>


<dt><tt class="literal">-bitmap =&gt;</tt> <tt><em class="replaceable"><tt>bitmapname</tt></em></tt></dt>
<dd>
<a name="INDEX-1373" /><a name="INDEX-1374" /><a name="INDEX-1375" /><a name="INDEX-1376" />You must
use the <tt class="literal">-bitmap</tt> option to tell the Canvas which
bitmap to display. You can use the built-in bitmaps (such as
<tt class="literal">'info'</tt> or <tt class="literal">'warning'</tt>) just as
you can with the Button widget, or you can specify a filename.
Remember, to specify a bitmap file, use an <tt class="literal">@</tt> sign
in front of the filename.
</p>
</dd>


<dt><tt class="literal">-foreground =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1377" />The foreground color of a bitmap is the
opposite of the background color. (By definition, bitmaps can have
only two colors.) The <tt class="literal">-foreground</tt> option will
color all the 1 pixels with this color. The default for
<tt class="literal">-foreground</tt> is black.
</p>
</dd>


<dt><tt class="literal">-tags =&gt;</tt> <tt><em class="replaceable"><tt>taglist</tt></em></tt></dt>
<dd>
<a name="INDEX-1378" />Use the <tt class="literal">-tags</tt>
option to assign tag names to a bitmap. The value associated with
<tt class="literal">-tags</tt> is an anonymous list of tag names; for
example:
</p>

<blockquote><pre class="code">$canvas-&gt;createBitmap(0,0, -bitmap =&gt; 'info', 
                      -tags =&gt; ["info", "bitmap"]);</pre></blockquote>

<p>You don't need to use the list if you are only specifying one
tag name:
</p>

<blockquote><pre class="code">$canvas-&gt;createBitmap(0,0, -bitmap =&gt; 'info', -tags =&gt; "bitmap");</pre></blockquote>

</dd>

</dl>

</div>
<a name="mastperltk-CHP-9-SECT-6.3" /><div class="sect2">
<h3 class="sect2">9.6.3. The Image Item</h3>

<p>If we can create a bitmap on a Canvas, it makes sense that we can
create an image as well. We can do so with the
<tt class="literal">createImage</tt> method:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createImage(<em class="replaceable"><tt>x, y</em>, -image =&gt; <em class="replaceable">image</tt></em>);</pre></blockquote>

<p><a name="INDEX-1379" />Again, you have to specify an image
to display or you won't see anything. The other options
available for <tt class="literal">createImage</tt> are:
</p>

<dl>
<dt><tt class="literal">-anchor =&gt; "</tt><tt class="userinput"><b>center</b></tt><tt class="literal">" | "n" | "e" | "s" | "w" | "ne" | "nw" | "se" | "sw"</tt></dt>
<dd>
<a name="INDEX-1380" />The <tt class="literal">-anchor</tt>
option for an image works the same as it does for a bitmap. The
<tt class="literal">-anchor</tt> option is how the image is positioned
around the (x, y) coordinates.
</p>
</dd>


<dt><tt class="literal">-image =&gt; $image</tt></dt>
<dd>
<a name="INDEX-1381" />The <tt class="literal">-image</tt>
option indicates which image to display. The image value is actually
a reference to an image created with the <tt class="literal">Photo</tt> or
<tt class="literal">Bitmap</tt> methods. (See <a href="ch03_01.htm">Chapter 3, "Fonts"</a>
for more information on how to specify an image file.)
</p>
</dd>


<dt><tt class="literal">-tags =&gt;</tt> <tt><em class="replaceable"><tt>taglist</tt></em></tt></dt>
<dd>
<a name="INDEX-1382" />Use the <tt class="literal">-tags</tt>
option to assign tag names to an image. The value associated with
<tt class="literal">-tags</tt> is an anonymous list of tag names; for
example:
</p>

<blockquote><pre class="code">$canvas-&gt;createImage(0,0, -image =&gt; $imgptr, 
                      -tags =&gt; ["image", "blue"]);</pre></blockquote>

<p>You don't need the list if you are specifying only one tag name:</p>

<blockquote><pre class="code">$canvas-&gt;createImage(0,0, -image =&gt; $imgptr, -tags =&gt; "image");</pre></blockquote>


</dd>

</dl>

</div>
<a name="mastperltk-CHP-9-SECT-6.4" /><div class="sect2">
<h3 class="sect2">9.6.4. The Line Item</h3>

<p><a name="INDEX-1383" /><a name="INDEX-1384" />The
<tt class="literal">createLine</tt> method can actually create multiple
connected lines, not just one. The first two coordinate sets you
supply create the first line, and any additional coordinates will
continue the line to that point:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createLine(0,0, 400,400);           # creates one line
$id = $canvas-&gt;createLine(0,0, 400,400, -50, 240); # creates two lines</pre></blockquote>

<p>After the coordinates, you can specify any options and values you
wish to configure the line(s); the options and values are as follows:
</p>

<dl>
<dt><tt class="literal">-arrow =&gt; "</tt><tt class="userinput"><b>none</b></tt><tt class="literal">" | "first" | "last" | "both"</tt></dt>
<dd>
<a name="INDEX-1385" />Use the
<tt class="literal">-arrow</tt> option to place arrowheads at either end of
the line (or both). If you have more than one line in your
<tt class="literal">createLine</tt> method, only the first and/or last
point can be made into an arrow. If you want each line to have an
arrowhead, use multiple <tt class="literal">createLine</tt> statements.
</p>
</dd>


<dt><tt class="literal">-arrowshape =&gt; [</tt> <tt><em class="replaceable"><tt>dist1</em></tt><tt class="literal">,</tt> <tt><em class="replaceable">dist2</em></tt><tt class="literal">,</tt> <tt><em class="replaceable">dist3</tt></em></tt> <tt class="literal">]</tt></dt>
<dd>
<a name="INDEX-1386" />The
<tt class="literal">-arrowshape</tt> option applies only if you use the
<tt class="literal">-arrow</tt> option as well.
</p>
</dd>

</dl>

<p>Specify the three distances by using an anonymous list such as this:</p>

<blockquote><pre class="code">$canvas-&gt;createLine(10, 10, 200, -40, -arrow =&gt; "both", 
                    -arrowshape =&gt; [ 20, 20, 20]);</pre></blockquote>

<p><a href="ch09_06.htm">Figure 9-4</a> shows what the
distance values mean.
</p>

<a name="mastperltk-CHP-9-FIG-4" /><div class="figure"><img src="figs/mptk.0904.gif" alt="Figure 9-4" width="155" height="130" /></div><h4 class="objtitle">Figure 9-4. Definition of arrowhead</h4>

<dl>
<dt><tt class="literal">-capstyle =&gt; "</tt><tt class="userinput"><b>butt</b></tt><tt class="literal">" | "projecting" | "round"</tt></dt>
<dd>
<a name="INDEX-1387" />Instead of
arrowheads, you can make the ends of the line have one of these
styles.
</p>
</dd>


<dt><tt class="literal">-fill =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1388" />The <tt class="literal">-fill</tt> option
is misnamed, because it isn't actually filling anything. The
line is simply drawn with this color instead of black.
</p>
</dd>


<dt><tt class="literal">-joinstyle =&gt; "bevel" | "</tt><tt class="userinput"><b>miter</b></tt><tt class="literal">" | "round"</tt></dt>
<dd>
<a name="INDEX-1389" />The
<tt class="literal">-joinstyle</tt> option affects how multiple lines are
joined together. If there is only one line created, this option has
no effect.
</p>
</dd>


<dt><tt class="literal">-smooth =&gt; 1 |</tt> <tt class="userinput"><b>0</b></tt></dt>
<dd>
<a name="INDEX-1390" />If
<tt class="literal">-smooth</tt> has a value of 1, then, using Bezier
spline(s), the line(s) will be drawn as a curve. The first two lines
make the first spline, the second and third line make up the second
spline, and so on. To make a straight line, repeat the end points of
the desired straight line (or use <tt class="literal">createLine</tt> again
to make a separate line).
</p>
</dd>


<dt><tt class="literal">-splinesteps =&gt;</tt> <tt><em class="replaceable"><tt>count</tt></em></tt></dt>
<dd>
<a name="INDEX-1391" />When you
use the <tt class="literal">-smooth</tt> option, the more
<tt class="literal">-splinesteps</tt> you use, the smoother the curve. To
find out how many steps create the desired effect, you'll have
to experiment with different values.
</p>
</dd>


<dt><tt class="literal">-stipple =&gt;</tt> <tt><em class="replaceable"><tt>bitmap</tt></em></tt></dt>
<dd>
<a name="INDEX-1392" />To have the line drawn with a
bitmap pattern (1 values in the bitmap have color; 0 values are
transparent), use the <tt class="literal">-stipple</tt> option. The bitmap
can be a default bitmap name or a filename. The wider the line (see
<tt class="literal">-width</tt>), the more the stipple design will show up.
</p>
</dd>


<dt><tt class="literal">-tags =&gt;</tt> <tt><em class="replaceable"><tt>taglist</tt></em></tt></dt>
<dd>
<a name="INDEX-1393" />When you create a line (or lines),
assign tag names to them using the <tt class="literal">-tags</tt> option.
The value associated with <tt class="literal">-tags</tt> is an anonymous
list of tag names; for example:
</p>

<blockquote><pre class="code">$canvas-&gt;createLine(0,0, 100,100, -tags =&gt; ["line", "blue"]);</pre></blockquote>

<p>You don't need to use a list if you are specifying only one tag
name:
</p>

<blockquote><pre class="code">$canvas-&gt;createLine(0,0, 100, 100, -tags =&gt;
"line");</pre></blockquote>

</dd>



<dt><tt class="literal">-width =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-1394" />You can use the
<tt class="literal">-width</tt> option to make the line(s) thicker.
Normally the line is drawn only 1 pixel wide. The amount can be any
valid screen distance (e.g., centimeters, inches).<a name="INDEX-1395" /><a name="INDEX-1396" />
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-9-SECT-6.5" /><div class="sect2">
<h3 class="sect2">9.6.5. The Oval Item</h3>

<p><a name="INDEX-1397" /><a name="INDEX-1398" />An
oval can be a circle if you draw it just right. To create a circle or
oval, use the <tt class="literal">createOval</tt> method and specify two
sets of points that indicate a rectangle (or square) in which to draw
the oval. Here is a simple example:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createOval(0,0, 50, 50);  # creates a circle
$id = $canvas-&gt;createOval(0,0, 50, 100); # creates an oval</pre></blockquote>

<p><a name="INDEX-1399" />The options for the
oval will be familiar, so we'll just cover them briefly:
</p>

<dl>
<dt><tt class="literal">-fill =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1400" />Fills in the oval with the
specified color. This color is different than the outline color. By
default, the oval is not filled.
</p>
</dd>


<dt><tt class="literal">-outline =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1401" />The outline is the line drawn
around the outside of the circle. Normally, the outline is black, but
you can use the <tt class="literal">-outline</tt> option to change it. If
you make the outline and the fill color the same, the oval appears
solid.
</p>
</dd>


<dt><tt class="literal">-stipple =&gt;</tt> <tt><em class="replaceable"><tt>bitmap</tt></em></tt></dt>
<dd>
<a name="INDEX-1402" />To fill the oval with a bitmap
pattern (1 values in the bitmap are colored; 0 values are
transparent), use the <tt class="literal">-stipple</tt> option. If the
<tt class="literal">-fill</tt> option isn't used,
<tt class="literal">-stipple</tt> has no effect.
<tt class="literal">-stipple</tt> takes a default bitmap name or a file
with a bitmap in it.
</p>
</dd>


<dt><tt class="literal">-tags =&gt;</tt> <tt><em class="replaceable"><tt>taglist</tt></em></tt></dt>
<dd>
<a name="INDEX-1403" />When you create an oval, use the
<tt class="literal">-tags</tt> option to assign tag names to it. The value
associated with <tt class="literal">-tags</tt> is an anonymous list of tag
names; for example:
</p>

<blockquote><pre class="code">$canvas-&gt;createOval(0,0, 100,100, -tags =&gt; ["oval", "blue"]);</pre></blockquote>

<p>You don't need to use a list if you are specifying only one tag
name:
</p>

<blockquote><pre class="code">$canvas-&gt;createOval(0,0, 100, 100, -tags =&gt; "oval");</pre></blockquote>
</dd>




<dt><tt class="literal">-width =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-1404" />The <tt class="literal">-width</tt>
option changes how wide the outline of the oval is drawn. The default
for <tt class="literal">-width</tt> is 1 pixel.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-9-SECT-6.6" /><div class="sect2">
<h3 class="sect2">9.6.6. The Polygon Item</h3>

<p><a name="INDEX-1405" /><a name="INDEX-1406" />A
polygon is merely a bunch of lines where the first point is connected
to the last point automatically to create an enclosed area. The
<tt class="literal">createPolygon</tt> method requires at least three (x,
y) coordinate pairs. For instance, the following piece of code will
create a three-sided polygon:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createPolygon(1000,1000, 850,950, 30,40);</pre></blockquote>

<p>Additional (x, y) coordinate pairs can be specified as well; for
example:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createPolygon(1000,1000, 850,950, 30,40, 500,500);</pre></blockquote>

<p>The options you can specify with <tt class="literal">createPolygon</tt> are
the same as those you use with <tt class="literal">createLine</tt>:
<tt class="literal">-fill</tt>, <tt class="literal">-outline</tt>,
<tt class="literal">-smooth</tt>, <tt class="literal">-splinesteps</tt>,
<tt class="literal">-stipple</tt>, <tt class="literal">-tags</tt>, and
<tt class="literal">-width</tt>. Just remember that
<tt class="literal">createPolygon</tt> connects the first point to the last
point to enclose the area.
</p>

</div>
<a name="mastperltk-CHP-9-SECT-6.7" /><div class="sect2">
<h3 class="sect2">9.6.7. The Rectangle Item</h3>

<p><a name="INDEX-1407" /><a name="INDEX-1408" />As
if being able to create a rectangle using
<tt class="literal">createLine</tt> or <tt class="literal">createPolygon</tt>
weren't enough, we also have the
<tt class="literal">createRectangle</tt> method. It only takes two (x, y)
coordinate sets, which are the opposite corners of the rectangular
area:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createRectangle(10, 10, 50, 150);</pre></blockquote>

<p><a name="INDEX-1409" /><a name="INDEX-1410" /><a name="INDEX-1411" /><a name="INDEX-1412" /><a name="INDEX-1413" />Again, we have seen the options available
for <tt class="literal">createRectangle</tt> with the other
<tt class="literal">create</tt> methods: <tt class="literal">-fill</tt>,
<tt class="literal">-outline</tt>, <tt class="literal">-stipple</tt>,
<tt class="literal">-tags</tt>, and <tt class="literal">-width</tt>. Although
we've covered these options already, here are a few examples:
</p>

<blockquote><pre class="code"># A blue rectangle with black outline:
$canvas-&gt;createRectangle(10,10, 50, 150, -fill =&gt; 'blue');
# A blue rectangle with a thicker outline:
$canvas-&gt;createRectangle(10,10, 50, 150, -fill =&gt; 'blue', -width =&gt; 10);</pre></blockquote>

</div>
<a name="mastperltk-CHP-9-SECT-6.8" /><div class="sect2">
<h3 class="sect2">9.6.8. The Text Item</h3>

<p>Finally, an item type that doesn't have lines in it! You can
use the <tt class="literal">createText</tt> method to add text to a Canvas
widget. It requires an (x, y) coordinate pair, which determines where
you place the text in the Canvas and the text to be displayed:
</p>

<blockquote><pre class="code">$id = $canvas-&gt;createText(0,0, -text =&gt; "origin");</pre></blockquote>

<p><a name="INDEX-1414" />The <tt class="literal">-text</tt> option
is actually optional, but then you wouldn't see any text on the
screen. Because there is no point in that, we will assume that you
will always specify <tt class="literal">-text</tt> with a text value to
display. The other options available for text items are as follows:
</p>

<dl>
<dt><tt class="literal">-anchor =&gt; "</tt><tt class="userinput"><b>center</b></tt><tt class="literal">" | "n" | "e" | "s" | "w" | "ne" | "nw" | "se" | "sw"</tt></dt>
<dd>
<a name="INDEX-1415" />The <tt class="literal">-anchor</tt>
option determines where the text is placed in relation to the (x, y)
coordinate. The default is centered: the text will be centered over
that point no matter how large the piece of text is.
</p>
</dd>


<dt><tt class="literal">-fill =&gt;</tt> <tt><em class="replaceable"><tt>color</tt></em></tt></dt>
<dd>
<a name="INDEX-1416" />The text is normally drawn in
black; you can use the <tt class="literal">-fill</tt> option to change
this. The name of this option doesn't make much sense when you
think about it in terms of text (normally our widgets use
<tt class="literal">-foreground</tt> to change the color of the text). For
example, <tt class="literal">-fill =&gt; 'blue'</tt> will draw blue text.
</p>
</dd>


<dt><tt class="literal">-font =&gt;</tt> <tt><em class="replaceable"><tt>fontname</tt></em></tt></dt>
<dd>
<a name="INDEX-1417" />You can change the font for the
displayed text by using the <tt class="literal">-font</tt> option.
</p>
</dd>


<dt><tt class="literal">-justify =&gt; "</tt><tt class="userinput"><b>left</b></tt><tt class="literal">" | "right" | "center"</tt></dt>
<dd>
<a name="INDEX-1418" />If the displayed text has more than
one line, the <tt class="literal">-justify</tt> option will cause it to be
justified as specified.
</p>
</dd>


<dt><tt class="literal">-stipple =&gt;</tt> <tt><em class="replaceable"><tt>bitmap</tt></em></tt></dt>
<dd>
<a name="INDEX-1419" />This option is a bit strange, but
here it is anyway. If you specify a bitmap name (or file) with the
<tt class="literal">-stipple</tt> option, the text will be drawn by using
the bitmap pattern. Most of the time, this will make the text
unreadable, so don't use it unless you're using a large
font.
</p>
</dd>


<dt><tt class="literal">-tags =&gt;</tt> <tt><em class="replaceable"><tt>taglist</tt></em></tt></dt>
<dd>
<a name="INDEX-1420" />The
<em class="replaceable"><tt><tt>taglist</tt></tt></em> is a single tag name or an
anonymous list of tag names to be assigned to the item.
</p>
</dd>


<dt><tt class="literal">-text =&gt;</tt> <tt><em class="replaceable"><tt>string</tt></em></tt></dt>
<dd>
<a name="INDEX-1421" />This is not optional. The specified
string is displayed in the Canvas widget at the (x, y) coordinate.
</p>
</dd>


<dt><tt class="literal">-width =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-1422" />This is another misnamed option,
because it does not change the width of each text character. It
determines the maximum length of each line of text. If the text is
longer than this length, the line will automatically wrap to a second
line. The default value for <em class="replaceable"><tt><tt><tt>amount</tt></tt></tt></em> is 0,
which will break lines only at newline characters. Lines are always
broken at spaces so words won't be cut in half.
</p>
</dd>

</dl>

<p><a name="INDEX-1423" /><a name="INDEX-1424" /><a name="INDEX-1425" /><a name="INDEX-1426" /><a name="INDEX-1427" /><a name="INDEX-1428" /><a name="INDEX-1429" /><a name="INDEX-1430" />The following options, discussed earlier,
work the same as they would for an Entry widget or a Text widget:
<tt class="literal">-insertbackground</tt>,
<tt class="literal">-insertborderwidth</tt>, <tt class="literal">-insertofftime</tt>,
<tt class="literal">-insertontime</tt>, <tt class="literal">-insertwidth</tt>,
<tt class="literal">-selectbackground</tt>,<tt class="literal">-selectborderwidth</tt>, and<tt class="literal">-selectforeground</tt>. See <a href="ch05_01.htm">Chapter 5, "Label and Entry Widgets"</a> and <a href="ch08_01.htm">Chapter 8, "The Text, TextUndo,and ROText Widgets"</a> for more
details.
</p>

<a name="mastperltk-CHP-9-SECT-6.8.1" /><div class="sect3">
<h3 class="sect3">9.6.8.1. Text item indexes</h3>

<p><a name="INDEX-1431" />Methods that affect text items will
sometimes ask for an index value. Text indexes for the regular Text
widget were covered in <a href="ch08_01.htm">Chapter 8, "The Text, TextUndo,and ROText Widgets"</a>, and the index
values for a Canvas text item are similar. The only difference is
that each item is considered only one line (even if it has
<tt class="literal">"\n"</tt> characters in it). Index values are as
follows:
</p>

<dl>
<dt><i><tt><em class="replaceable"><tt>n</tt></em></tt> </i></dt>
<dd>
A number value. For example, 0 or 12. 0 is the first character, 1 is
the second, and so on.
</p>
</dd>


<dt><tt class="literal">"end"</tt> </dt>
<dd>
The character directly after the last one. Often used with the
<tt class="literal">insert</tt> method to add to the end of the string.
</p>
</dd>


<dt><tt class="literal">"insert"</tt> </dt>
<dd>
The character directly before the insertion cursor.</p>
</dd>


<dt><tt class="literal">"sel.first"</tt></dt>
<dd>
The first character of the selected text. Only valid if there is a
selection.
</p>
</dd>


<dt><tt class="literal">"sel.last"</tt> </dt>
<dd>
The last character of the selected text. Only valid if there is a
selection.
</p>
</dd>


<dt><tt class="literal">"@</tt><tt><em class="replaceable"><tt>x</em></tt><tt class="literal">,</tt><tt><em class="replaceable">y</tt></em></tt><tt class="literal">"</tt></dt>
<dd>
The character closest to the point (<em class="replaceable"><tt><tt>x</tt></tt></em>,
<em class="replaceable"><tt><tt>y</tt></tt></em>) of the Canvas (not screen coordinates).
</p>
</dd>

</dl>

</div>

<a name="mastperltk-CHP-9-SECT-6.8.2" /><div class="sect3">
<h3 class="sect3">9.6.8.2. Deleting characters</h3>

<p><a name="INDEX-1432" /><a name="INDEX-1433" /><a name="INDEX-1434" />To
delete characters from within a text item, use the
<tt class="literal">dchars</tt> method:
<tt class="literal">$canvas-&gt;dchars(</tt><em class="replaceable"><tt>tag/id</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>first [</tt></em><tt class="literal">,</tt> <em class="replaceable">last
]</em><tt class="literal">)</tt>. Specify a tag or ID to match the
text item(s) and the index at which to start deleting. If the end
index isn't specified, all the characters to the end of the
string will be deleted (including any <tt class="literal">"\n"</tt>
characters).
</p>

</div>

<a name="mastperltk-CHP-9-SECT-6.8.3" /><div class="sect3">
<h3 class="sect3">9.6.8.3. Positioning the cursor</h3>

<p><a name="INDEX-1435" /><a name="INDEX-1436" />To
specifically place the blinking text cursor, use the
<tt class="literal">icursor</tt> method :
<tt class="literal">$canvas-&gt;icursor(</tt><em class="replaceable"><tt>tag/id</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>index</tt></em><tt class="literal">)</tt>. The cursor will only
show up immediately if the specified item has the current keyboard
focus. You can still set the position of the cursor if it
doesn't, it just won't display until the item does get
the keyboard focus.
</p>

</div>

<a name="mastperltk-CHP-9-SECT-6.8.4" /><div class="sect3">
<h3 class="sect3">9.6.8.4. Index information</h3>

<p><a name="INDEX-1437" /><a name="INDEX-1438" />To find an
index based on another index, use the <tt class="literal">index</tt>
method. Here's an example:
</p>

<blockquote><pre class="code">$index = $canvas-&gt;index("textitem", "sel.first");</pre></blockquote>

<p>This returns the numerical index associated with the first selected
character in the text item. If more than one item matches the tag or
ID indicated (in this case, it's a tag named
<tt class="literal">"textitem"</tt>), then the first one found is used.
</p>

</div>

<a name="mastperltk-CHP-9-SECT-6.8.5" /><div class="sect3">
<h3 class="sect3">9.6.8.5. Adding text</h3>

<p>To add more text to a text item, use the <tt class="literal">insert</tt>
method:
<tt class="literal">$canvas-&gt;insert(</tt><em class="replaceable"><tt>tag/id</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>index</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>string</tt></em><tt class="literal">)</tt>. The first argument
is the tag or ID, which can match multiple items. The second argument
is the index before which to insert the new string, and the last
argument is the actual string to insert into the text item.
</p>

</div>

<a name="mastperltk-CHP-9-SECT-6.8.6" /><div class="sect3">
<h3 class="sect3">9.6.8.6. Selecting text</h3>

<p>There are several methods you can use to programmatically select
portions of the text. To clear the selection (any selection; there
are no tags or IDs sent with this command), use
<tt class="literal">$canvas-&gt;selectClear</tt>. To select a portion of
text, use <tt class="literal">selectFrom</tt> and
<tt class="literal">selectTo</tt>. The following two lines of code select
the text from beginning to end for the first item that matches the
tag <tt class="literal">"texttag"</tt>:
</p>

<blockquote><pre class="code">$canvas-&gt;selectFrom("texttag", 0);
$canvas-&gt;selectTo("texttag", "end");</pre></blockquote>

<p><a name="INDEX-1439" />You can
use the <tt class="literal">selectAdjust</tt> method to add to the
selection: <tt class="literal">$canvas-&gt;selectAdjust("adjust",</tt>
<em class="replaceable"><tt>tag/id</tt></em><tt class="literal">,</tt>
<em class="replaceable"><tt>index</tt></em><tt class="literal">)</tt>. To get the ID
of the item that currently has the selection in it, use <tt class="literal">$id
= $canvas-&gt;selectItem</tt>.<a name="INDEX-1440" /> 
</p>

</div>
</div>
<a name="mastperltk-CHP-9-SECT-6.9" /><div class="sect2">
<h3 class="sect2">9.6.9. The Widget Item</h3>

<p><a name="INDEX-1441" /><a name="INDEX-1442" />You can put any type of widget inside a
Canvas&#x2014;Buttons, Checkbuttons, Text widgets, or even another
Canvas widget (if you are a little crazy)&#x2014;by using the
<tt class="literal">createWindow</tt> method. Before calling
<tt class="literal">createWindow</tt>, you must create the widget to put
into the Canvas. Here's an example:
</p>

<blockquote><pre class="code">$bttn = $canvas-&gt;Button(-text =&gt; "Button", 
                        -command =&gt; sub { print "Button in Canvas\n"; });
$id = $canvas-&gt;createWindow(0, 0, -window =&gt; $bttn);</pre></blockquote>

<p>There are a few things you should note about this example (which is
fairly typical, except the subroutine associated with the Button
doesn't do anything useful):
</p>

<ul><li>
<p>The Button is a child of the Canvas widget. The Button could be a
child of an ancestor of the Canvas (the Button could be a child of
the MainWindow if the Canvas is also a child of the MainWindow).
However, the Button should not be a child of a different Toplevel
widget that has nothing to with the Canvas.
</p>
</li><li>
<p>The <tt class="literal">createWindow</tt> method doesn't actually
create the widget; it just puts it in the Canvas. The Button is
placed at the specified coordinates inside the Canvas and has not
been placed on the screen with <tt class="literal">pack</tt>,
<tt class="literal">grid</tt>, or <tt class="literal">place</tt>.
</p>
</li><li>
<p>The widget must be created before you call
<tt class="literal">createWindow</tt>.
</p>
</li><li>
<p>You can click the Button and the callback associated with it will be
invoked, just as with any other Button.
</p>
</li><li>
<p>When you create the widget, you can use any of that widget's
options to configure it. To continue configuring the widget, use the
reference to it (e.g., <tt class="literal">$bttn</tt>).
</p>
</li></ul>
<p>The following options, which you can use when you call
<tt class="literal">createWindow</tt>, are more like options you use with
<tt class="literal">pack</tt> than widget options:
</p>

<dl>
<dt><tt class="literal">-anchor =&gt; "</tt><tt class="userinput"><b>center</b></tt><tt class="literal">" | "n" | "e" | "s" | "w" | "ne" | "nw" | "se" | "sw"</tt></dt>
<dd>
<a name="INDEX-1443" />The widget will be placed at the
(x, y) coordinates according to the <tt class="literal">-anchor</tt> value.
The default is <tt class="literal">"center"</tt>, which means that the
widget will have its center point placed on (x, y).
</p>
</dd>


<dt><tt class="literal">-height =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-1444" />The widget will be given this
height. If you don't use <tt class="literal">-height</tt>, the widget
will have the height it was created with (usually the natural size of
the widget).
</p>
</dd>


<dt><tt class="literal">-tags =&gt;</tt> <tt><em class="replaceable"><tt>taglist</tt></em></tt></dt>
<dd>
<a name="INDEX-1445" />The
<tt><em class="replaceable"><tt>taglist</tt></em></tt> associates a tag with the widget.
You can specify either a single tag string or an anonymous list of
tag names.
</p>
</dd>


<dt><tt class="literal">-width =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-1446" />The widget will be given this
width. If you don't use the <tt class="literal">-width</tt> option,
the widget will have the width it was created with (the natural size
of the widget).
</p>
</dd>


<dt><tt class="literal">-window =&gt; $widget</tt></dt>
<dd>
<a name="INDEX-1447" />This is a nonoptional option. If
you don't specify <tt class="literal">-window</tt>, there will be no
widget put in the Canvas. The <tt class="literal">$widget</tt> is a
reference to a widget item. You can create the widget beforehand or
inline as follows:
</p>

<blockquote><pre class="code">$canvas-&gt;createWindow(0,0, -window =&gt; $canvas-&gt;Button(-text =&gt; "Button", 
         -command =&gt; sub { print "Button!\"; }));</pre></blockquote>
</dd>

</dl>

<p>It makes sense to create the widget inline if you don't need to
do anything fancy with it.
</p>

</div>
<a name="mastperltk-CHP-9-SECT-6.10" /><div class="sect2">
<h3 class="sect2">9.6.10. The Grid Item</h3>

<p><a name="INDEX-1448" />Perl/Tk has an
experimental <tt><em class="replaceable">grid</em></tt> item type that displays
dotted, dashed, or solid lines, in both the x and y dimensions. The
effect is reminiscent of old-fashioned graph paper.
</p>

<p>Grid items cover the entire Canvas, but never enclose or overlap any
area and are not near any point, so you cannot search for them using
the <tt class="literal">closest</tt>, <tt class="literal">enclosed</tt>, or
<tt class="literal">overlapping</tt> attributes. In most other regards,
they behave like other Canvas item types. Currently, grids, like
window items, do not appear in PostScript output.
</p>

<p><a name="INDEX-1449" />Grid items
are created like this:
</p>

<blockquote><pre class="code"> $canvas-&gt;createGrid(x1, y1, x2, y2, ... );</pre></blockquote>

<p><tt><em class="replaceable">x1</em></tt> and <tt><em class="replaceable">y1</em></tt>
specify the origin of the basal grid <tt><em class="replaceable">cell</em></tt>, and
<tt><em class="replaceable">x2</em></tt> and <tt><em class="replaceable">y2</em></tt>
specify its width and height, respectively; the cell is replicated
over the entire surface of the Canvas widget. By default, dots are
drawn at every grid intersection, unless the
<tt class="literal">-lines</tt> option is set true. When drawing lines,
dash specifications are honored.
</p>

<p>This code generated <a href="ch09_06.htm">Figure 9-5</a>:</p>

<blockquote><pre class="code">my $c = $mw-&gt;Canvas(qw/-width 300 -height 200/)-&gt;grid;
$c-&gt;configure("-scrollregion" =&gt; [0,0, 300, 200]);

$c-&gt;createGrid(0, 0, 10, 10);
$c-&gt;createGrid(0, 0, 50, 50, -lines =&gt; 1, -dash =&gt; '-.');
$c-&gt;createGrid(0, 0, 100, 100, -width =&gt; 3, -lines =&gt; 1);</pre></blockquote>

<p><a name="INDEX-1450" /><a name="INDEX-1451" />One important note: <em class="emphasis">grid
items remain invisible unless a scroll region is defined</em></tt>.
This may be construed as a bug, which is one reason why grids are
deemed experimental.
</p>

<a name="mastperltk-CHP-9-FIG-5" /><div class="figure"><img src="figs/mptk.0905.gif" alt="Figure 9-5" width="243" height="163" /></div><h4 class="objtitle">Figure 9-5. A canvas with three grid items</h4>

</div>
<a name="mastperltk-CHP-9-SECT-6.11" /><div class="sect2">
<h3 class="sect2">9.6.11. The Group Item</h3>

<p><a name="INDEX-1452" /><a name="INDEX-1453" />Perl/Tk sports a new Canvas item called a
<em class="emphasis">group</em></tt>. A group item is actually a collection of
standard Canvas items that can be manipulated simultaneously. The
following code creates an oval and a rectangle, then groups them
together:
</p>

<blockquote><pre class="code">$one = $canvas-&gt;createOval(5,  0, 20, 30, -fill =&gt; 'blue');
$two = $canvas-&gt;createRectangle(0, 20, 50, 75, -fill =&gt; 'red');
$group = $canvas-&gt;createGroup([0, 0], -members =&gt; [$one, $two]);
$mw-&gt;update;
$mw-&gt;after(1000);
$canvas-&gt;move($group, 100, 100);</pre></blockquote>

<p><a href="ch09_06.htm">Figure 9-6</a> shows the outcome. </p>

<a name="mastperltk-CHP-9-FIG-6" /><div class="figure"><img src="figs/mptk.0906.gif" alt="Figure 9-6" width="178" height="198" /></div><h4 class="objtitle">Figure 9-6. Before move</h4>

<p>After a one-second delay, the group is moved to a new Canvas
coordinate, shown in <a href="ch09_06.htm">Figure 9-7</a>.
</p>

<a name="mastperltk-CHP-9-FIG-7" /><div class="figure"><img src="figs/mptk.0907.gif" alt="Figure 9-7" width="178" height="198" /></div><h4 class="objtitle">Figure 9-7. After move</h4>

<p>Of course, sometimes you want to get to individual items within the
group, perhaps to configure a special attribute. The current idiom is
to iterate through the members of the group, like this:
</p>

<blockquote><pre class="code">foreach my $member ($canvas-&gt;itemcget($group, -members)) {
    print "member=$member\n";
}</pre></blockquote>

<p>This example prints out the item ID for each member of the group, but
you can use the item IDs in an <tt class="literal">itemconfigure</tt> call.
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch09_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9.5. Canvas Options</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">9.7. Configuring the Canvas Widget</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>