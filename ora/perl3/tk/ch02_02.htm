<html><head><title>The grid Geometry Manager (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.2. The grid Geometry Manager</h2>

<p><a name="INDEX-251" />The
<tt class="literal">grid</tt> geometry manager divides the window into a
grid composed of columns and rows starting at (0, 0) in the
upper-left corner. <a href="ch02_02.htm">Figure 2-29</a> shows a sample grid.
</p>

<a name="mastperltk-CHP-2-FIG-29" /><div class="figure"><img src="figs/mptk.0229.gif" alt="Figure 2-29" width="366" height="109" /></div><h4 class="objtitle">Figure 2-29. A window divided into grids</h4>

<p><a name="INDEX-252" />Rather than using the sides of a
window as reference points, <tt class="literal">grid</tt> divides the
screen into columns and rows. It looks a lot like a spreadsheet,
doesn't it? Each widget is assigned a grid cell using the
options available to <tt class="literal">grid</tt>.
</p>

<p><a name="INDEX-253" />The
<tt class="literal">grid</tt> method takes a list of widgets instead of
operating on only one widget at a time.<a href="#FOOTNOTE-9">[9]</a> Here is the generic usage:
</p><blockquote class="footnote"> <a name="FOOTNOTE-9" /><p> [9] Several
people have mentioned that <tt class="literal">pack</tt> can also take a
list of widgets. We don't cover this because it is not how
<tt class="literal">pack</tt> is normally used<em class="emphasis">.</em></p>
</blockquote>

<blockquote><pre class="code">$widget1-&gt;grid( <em class="replaceable"><tt>[ $widget2, ... , ] [ option =&gt; value, ... ]</tt></em> );</pre></blockquote>

<p>A specific example is:</p>

<blockquote><pre class="code">$widget1-&gt;grid($widget2, $widget3);</pre></blockquote>

<p>Instead of using three separate calls, you can use one
<tt class="literal">grid</tt> call to display all three widgets. You can
also invoke <tt class="literal">grid</tt> on each widget independently,
just as you can <tt class="literal">pack</tt>. Each call to
<tt class="literal">grid</tt> will create another row in the window. So in
our example, <tt class="literal">$widget1</tt>,
<tt class="literal">$widget2</tt>, and<tt class="literal">$widget3</tt> will be placed in the first
row. Another call to <tt class="literal">grid</tt> creates a second row.
This is what happens when you do not specify any additional options
to the <tt class="literal">grid</tt> call.
</p>

<p>The previous example can be rewritten like this:</p>

<blockquote><pre class="code">Tk::grid($widget1, $widget2, $widget3);</pre></blockquote>

<p><a name="INDEX-254" />But beware, this is not necessarily
equivalent to the previous statement, due to
<em class="emphasis">inheritance</em>, an object-oriented concept. For
more information, please refer to <a href="ch14_01.htm">Chapter 14, "Creating Custom Widgets in Pure Perl/Tk"</a>.
Essentially, using <tt class="literal">Tk::grid</tt> is the same as calling
a subroutine directly, whereas the method call searches the
widget's class hierarchy for a subroutine
<tt class="literal">grid</tt>. It's certainly possible that
<tt class="literal">$widget1</tt> has its own special
<tt class="literal">grid</tt> method, which we would rudely bypass. Is this
a likely possibility? No. Just be aware when you make a procedural
versus a method call.
</p>

<p><a name="INDEX-255" /><a name="INDEX-256" />For
greater control, you can specify explicit <tt class="literal">-row</tt> and
<tt class="literal">-column</tt> options for each widget in the window.
We'll cover these options later.
</p>

<p>When additional options are not specified, the following assumptions
are made:
</p>

<ul><li>
<p>The first widget in the row (e.g., <tt class="literal">$widget1</tt> in the
preceding example) invokes the <tt class="literal">grid</tt> command.
</p>
</li><li>
<p>All remaining widgets for that row will be specified as arguments to
the <tt class="literal">grid</tt> command.
</p>
</li><li>
<p>Each additional call to <tt class="literal">grid</tt> will add another row to the display.
</p>
</li><li>
<p>Special characters can be used to change the
<tt class="literal">-columnspan</tt> and <tt class="literal">-rowspan</tt> of the
widget without using <tt class="literal">-columnspan</tt> or
<tt class="literal">-rowspan</tt> explicitly.
</p>
</li></ul>
<p>A few examples will help demonstrate. Each call to
<tt class="literal">grid</tt> creates another row, so in the following
example we have two rows:
</p>

<blockquote><pre class="code"># Create two rows, each with four widgets
$widget1-&gt;grid($widget2, $widget3, $widget4);
$widget5-&gt;grid($widget6, $widget7, $widget8);</pre></blockquote>

<p>In this example, we have created four rows and there is only one
widget in each row:
</p>

<blockquote><pre class="code"># Create four rows, each with one widget
$widget1-&gt;grid( );
$widget2-&gt;grid( );
$widget3-&gt;grid( );
$widget4-&gt;grid( );</pre></blockquote>

<p>We can also create widgets as we go:</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; 'Button1', -command =&gt; \&amp;call1)-&gt;grid(
            $mw-&gt;Button(-text =&gt; 'Button2', -command =&gt; \&amp;call2),
            $mw-&gt;Button(-text =&gt; 'Button3', -command =&gt; \&amp;call3),
            $mw-&gt;Button(-text =&gt; 'Button4', -command =&gt; \&amp;call4));</pre></blockquote>

<p>Pay careful attention, because the second, third, and fourth calls to
<tt class="literal">Button</tt> are inside the call to
<tt class="literal">grid</tt>. All four of the Buttons will be placed in
the first row. If we execute the same command again, the new widgets
are placed in the next row.
</p>

<a name="mastperltk-CHP-2-SECT-2.1" /><div class="sect2">
<h3 class="sect2">2.2.1. Special Characters</h3>

<p><a name="INDEX-257" />There are several special characters
that can be used to alter the way the widgets are gridded in the
window. Each special character serves as a type of placeholder that
indicates what to do with that position in the grid:
</p>

<dl>
<dt><tt class="literal">"-"</tt> (a minus sign)</dt>
<dd>
<a name="INDEX-258" /><a name="INDEX-259" />Tells grid that the widget specified just
before this one in the list should span this column as well. To span
more than one column, place a <tt class="literal">"-"</tt> in each widget
position to span. A <tt class="literal">"-"</tt> cannot follow a
<tt class="literal">"^"</tt> or an <tt class="literal">"x"</tt>.
</p>
</dd>


<dt><tt class="literal">"x"</tt></dt>
<dd>
<a name="INDEX-260" />Effectively leaves a blank space
where a widget would otherwise be placed.
</p>
</dd>


<dt><tt class="literal">"^"</tt></dt>
<dd>
<a name="INDEX-261" /><a name="INDEX-262" />A widget in row <em class="emphasis">x</em></tt>
will span row <em class="emphasis">x</em></tt> and <em class="emphasis">x</em></tt> + 1
when this character is placed in the <tt class="literal">grid</tt> command
for row <em class="emphasis">x</em></tt> + 1 in that row/column position. The
number of <tt class="literal">"^"</tt> characters must match the number of
columns the widget spans in row <em class="emphasis">x</em></tt>. Similar to
<tt class="literal">"-"</tt>, but goes down, not across.
</p>
</dd>

</dl>

<p>The following sections include some examples that illustrate what the
special characters do.
</p>

<a name="mastperltk-CHP-2-SECT-2.1.1" /><div class="sect3">
<h3 class="sect3">2.2.1.1. Spanning columns</h3>

<p><a name="INDEX-263" /><a name="INDEX-264" />The following bit of code creates three
rows of Buttons. The first two rows are normal and, in the third, the
second Button spans three columns. Each <tt class="literal">"-"</tt>
character adds one to the number of columns the Button uses, and the
default is one. So the original column and two hyphens
(<tt class="literal">"-"</tt>,<tt class="literal">"-"</tt>) indicate that there
are three columns to span. The <tt class="literal">-sticky</tt> option is
necessary for the widgets to stick to the sides of the cells they
span. If the <tt class="literal">-sticky</tt> option were left out, the
Button would be centered across the three cells it spans.
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit }));

$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button6", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button7", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button8", -command =&gt; sub { exit }));


$mw-&gt;Button(-text =&gt; "Button9", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button10", -command =&gt; sub { exit }),
   "-", "-",  -sticky =&gt; "nsew");</pre></blockquote>

<p><a href="ch02_02.htm">Figure 2-30</a> shows the resulting window.</p>

<a name="mastperltk-CHP-2-FIG-30" /><div class="figure"><img src="figs/mptk.0230.gif" alt="Figure 2-30" width="268" height="102" /></div><h4 class="objtitle">Figure 2-30. Example of column spanning using the "-" character</h4>

</div>

<a name="mastperltk-CHP-2-SECT-2.1.2" /><div class="sect3">
<h3 class="sect3">2.2.1.2. Empty cells</h3>

<p><a name="INDEX-265" /><a name="INDEX-266" /><a name="INDEX-267" />The <tt class="literal">"x"</tt>
character translates to "skip this space" and leaves a
hole in the grid. We removed the line that created Button6 and
replaced it with an <tt class="literal">"x"</tt> in the following code. The
cell is still there, it just doesn't contain a
widget.<a name="INDEX-268" />
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit }));
 
$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;grid
  ("x",
   $mw-&gt;Button(-text =&gt; "Button7", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button8", -command =&gt; sub { exit }));</pre></blockquote>

<p> <a href="ch02_02.htm">Figure 2-31</a> shows the resulting window.</p>

<a name="mastperltk-CHP-2-FIG-31" /><div class="figure"><img src="figs/mptk.0231.gif" alt="Figure 2-31" width="268" height="75" /></div><h4 class="objtitle">Figure 2-31. Leaving an empty cell between widgets</h4>

</div>
</div>
<a name="mastperltk-CHP-2-SECT-2.2" /><div class="sect2">
<h3 class="sect2">2.2.2. grid Options</h3>

<p><a name="INDEX-269" />The rest of the options are similar to
those used with <tt class="literal">pack</tt>:
</p>

<dl>
<dt><tt class="literal">"-"</tt></dt>
<dd>
A special character used in the <tt class="literal">grid</tt> widget list.
Increases <tt class="literal">columnspan</tt> of the prior widget in the
widget list.
</p>
</dd>


<dt><tt class="literal">"x"</tt></dt>
<dd>
A special character used in the <tt class="literal">grid</tt> widget list.
Leaves a blank space in the grid.
</p>
</dd>


<dt><tt class="literal">"^"</tt></dt>
<dd>
<a name="INDEX-270" /><a name="INDEX-271" />A special character used in the
<tt class="literal">grid</tt> widget list. Increases
<tt class="literal">rowspan</tt> of the widget in the grid directly above
it.
</p>
</dd>


<dt><tt class="literal">-column =&gt;</tt> <tt><em class="replaceable"><tt>n</tt></em></tt></dt>
<dd>
<a name="INDEX-272" />Sets the column to place the widget in
<tt class="literal">(</tt><tt><em class="replaceable"><tt>n</tt></em></tt> <tt class="literal">&gt;=
0)</tt>. 
</p>
</dd>


<dt><tt class="literal">-row =&gt;</tt> <tt><em class="replaceable"><tt>m</tt></em></tt></dt>
<dd>
<a name="INDEX-273" />Sets the row to place the widget in
<tt class="literal">(</tt><em class="replaceable"><tt><tt>m</tt></tt></em> <tt class="literal">&gt;=
0)</tt>. 
</p>
</dd>


<dt><tt class="literal">-columnspan =&gt;</tt> <tt><em class="replaceable"><tt>n</tt></em></tt></dt>
<dd>
<a name="INDEX-274" /><a name="INDEX-275" />Sets
the number of columns for the widget to span beginning with
<tt class="literal">-column</tt>.
</p>
</dd>


<dt><tt class="literal">-rowspan =&gt;</tt> <tt><em class="replaceable"><tt>m</tt></em></tt></dt>
<dd>
<a name="INDEX-276" />Sets the
number of rows for the widget to span beginning with
<tt class="literal">-row</tt>.
</p>
</dd>


<dt><tt class="literal">-sticky =&gt;</tt> <tt><em class="replaceable"><tt>string</tt></em></tt></dt>
<dd>
<a name="INDEX-277" />Sticks the widget to
<tt><em class="replaceable"><tt>string</tt></em></tt> sides. String contains characters
<tt class="literal">n</tt>, <tt class="literal">s</tt>, <tt class="literal">e</tt>, or
<tt class="literal">w</tt>.
</p>
</dd>


<dt><tt class="literal">-in =&gt; $otherwindow</tt></dt>
<dd>
<a name="INDEX-278" />Indicates the widget is gridded inside
<tt class="literal">$otherwindow</tt> instead the parent of
<tt class="literal">$widget</tt>.
</p>
</dd>


<dt><tt class="literal">-ipadx =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<tt class="literal">$widget</tt><a name="INDEX-279" />
becomes larger in x direction by <tt><em class="replaceable"><tt>amount</tt></em></tt>.
</p>
</dd>


<dt><tt class="literal">-ipady =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<tt class="literal">$widget</tt> becomes larger in y direction by
<tt><em class="replaceable"><tt>amount</tt></em></tt>.
</p>
</dd>


<dt><tt class="literal">-padx =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
Places buffer space equal to <tt><em class="replaceable"><tt>amount</tt></em></tt> to the
left and right of the widget.
</p>
</dd>


<dt><tt class="literal">-pady =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-280" /><a name="INDEX-281" />Places buffer space equal to
<em class="replaceable"><tt><tt><tt>amount</tt></tt></tt></em> on the top and bottom of the
widget.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-2-SECT-2.3" /><div class="sect2">
<h3 class="sect2">2.2.3. Specifying Rows and Columns Explicitly</h3>

<p><a name="INDEX-282" /><a name="INDEX-283" />Rather than
letting <tt class="literal">grid</tt> make assumptions, it is sometimes
necessary to explicitly state the row and column in which the widget
should be placed. This is done by using the <tt class="literal">-row</tt>
and <tt class="literal">-column</tt> options. Each option takes a
nonnegative integer as an argument:
</p>

<blockquote><pre class="code">-column =&gt; <em class="replaceable"><tt>n</em>, -row =&gt; <em class="replaceable">m</tt></em></pre></blockquote>

<p>When you use <tt class="literal">-row</tt> and <tt class="literal">-column</tt>,
it is not necessary to build or <tt class="literal">grid</tt> the widgets
in any sort of logical order (except for your own sanity when you are
debugging). You could place your first widget in column 10 and row 5
if you like. All the other cells with lower row and column values
will remain empty.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-2.4" /><div class="sect2">
<h3 class="sect2">2.2.4. Spanning Rows and Columns Explicitly</h3>

<p><a name="INDEX-284" /><a name="INDEX-285" /><a name="INDEX-286" />It
is also possible to indicate explicitly that a widget (or widgets)
should span some columns or rows. The option to span columns is
<tt class="literal">-columnspan</tt>. For spanning rows, the option is
<tt class="literal">-rowspan</tt><em class="emphasis">.</em> Both options take
an integer that is 1 or greater. The value indicates how many rows or
columns should be spanned, including the row or column in which the
widget is placed.
</p>

<p>For this example, we use the easy way to place widgets in columns and
rows by not explicitly specifying the <tt class="literal">-row</tt> and
<tt class="literal">-column</tt> options. Note that the second
<tt class="literal">grid</tt> command applies to two Button widgets, so the
single <tt class="literal">-columnspan</tt> option applies to
<em class="emphasis">both</em> Buttons created there.
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew");

# Button5 will span Columns 0-1 and Button6 will span 2-3
$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button6", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew", -columnspan =&gt; 2);</pre></blockquote>

<p>The resulting window is shown in <a href="ch02_02.htm">Figure 2-32</a>.</p>

<a name="mastperltk-CHP-2-FIG-32" /><div class="figure"><img src="figs/mptk.0232.gif" alt="Figure 2-32" width="268" height="75" /></div><h4 class="objtitle">Figure 2-32. Nonexplicit -columnspan example</h4>

<p>This window could also have been created using the
<tt class="literal">"-"</tt> special character to indicate column spanning,
like this:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew");

# Button5 will span Columns 0-1 and Button6 will span 2-3
$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;grid
  ("-", $mw-&gt;Button(-text =&gt; "Button6", -command =&gt; sub { exit }), "-"
   -sticky =&gt; "nsew");</pre></blockquote>

<p>This example illustrates how to explicitly use the
<tt class="literal">-row</tt> and <tt class="literal">-column</tt> options in
addition to the <tt class="literal">-rowspan</tt> option:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;
  grid(-row =&gt; 0, -column =&gt; 0, -rowspan =&gt; 2, -sticky =&gt; 'nsew');
$mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit })-&gt;
  grid(-row =&gt; 0, -column =&gt; 1);
$mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit })-&gt;
  grid(-row =&gt; 0, -column =&gt; 2);
$mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit })-&gt;
  grid(-row =&gt; 0, -column =&gt; 3);

$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;
  grid(-row =&gt; 1, -column =&gt; 1);
$mw-&gt;Button(-text =&gt; "Button6", -command =&gt; sub { exit })-&gt;
  grid(-row =&gt; 1, -column =&gt; 2);
$mw-&gt;Button(-text =&gt; "Button7", -command =&gt; sub { exit })-&gt;
  grid(-row =&gt; 1, -column =&gt; 3);</pre></blockquote>

<p>See <a href="ch02_02.htm">Figure 2-33</a> for the resulting window.</p>

<a name="mastperltk-CHP-2-FIG-33" /><div class="figure"><img src="figs/mptk.0233.gif" alt="Figure 2-33" width="268" height="75" /></div><h4 class="objtitle">Figure 2-33. Explicit -rowspan example</h4>

</div>
<a name="mastperltk-CHP-2-SECT-2.5" /><div class="sect2">
<h3 class="sect2">2.2.5. Forcing a Widget to Fill a Cell</h3>

<p><a name="INDEX-287" /><a name="INDEX-288" />When you use the
<tt class="literal">pack</tt> command, it is necessary to indicate both
<tt class="literal">-fill</tt> and <tt class="literal">-expand</tt> options to
get the widget to resize inside its allocation rectangle. The
<tt class="literal">grid</tt> command doesn't
have an allocation rectangle to fill, but it does have the cell
within the grid. Using the <tt class="literal">-sticky</tt> option with
<tt class="literal">grid</tt> is similar to using <tt class="literal">-fill</tt>
and <tt class="literal">-expand</tt> with <tt class="literal">pack</tt>.
</p>

<p><a name="INDEX-289" /><a name="INDEX-290" /><a name="INDEX-291" /><a name="INDEX-292" />The value associated with
<tt class="literal">-sticky</tt> is a string containing the compass points
to which the widget should "stick." If the widget should
always "stick" to the top of the cell, you would use
<tt class="literal">-sticky</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">"n"</tt>. To force the widget to fill the cell
completely, use <tt class="literal">-sticky</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">"nsew"</tt>. To make the widget as tall as the cell but
only as wide as it needs to be, use <tt class="literal">-sticky</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">"ns"</tt>. The string value
can contain commas and whitespace, but they will be ignored. These
two statements are equivalent:
</p>

<blockquote><pre class="code">-sticky =&gt; "nsew"
-sticky =&gt; "n, s, e, w"  # Same thing</pre></blockquote>

<p><a name="INDEX-293" /><a name="INDEX-294" />If you use
<tt class="literal">-sticky</tt> with your widgets and then resize the
window, you'll notice that the widgets don't resize as
you would expect. This is because resizing of the cells and the
widgets in them is taken care of with the
<tt class="literal">gridColumnconfigure</tt> and
<tt class="literal">gridRowconfigure</tt> methods, which are discussed
later in this chapter.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-2.6" /><div class="sect2">
<h3 class="sect2">2.2.6. Padding the Widget</h3>

<p><tt class="literal">grid</tt><a name="INDEX-295" />
also accepts these four options: <tt class="literal">-ipadx</tt>,
<tt class="literal">-ipady</tt>, <tt class="literal">-padx</tt>, and
<tt class="literal">-pady</tt>. They work exactly the same as they do in
<tt class="literal">pack</tt>, but instead of affecting the size of the
allocation rectangle, they affect the size of the cell in which the
widget is placed.
</p>

<p><a name="INDEX-296" /><a name="INDEX-297" />In
this example, the <tt class="literal">-ipady</tt> and
<tt class="literal">-ipadx</tt> options are applied to the top row of
Buttons and not the bottom row:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew", -ipadx =&gt; 10, -ipady =&gt; 10);

$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button6", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button7", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button8", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew");</pre></blockquote>

<p>Notice in <a href="ch02_02.htm">Figure 2-34</a> how Buttons 5 through 8 are
also wider than they really need to be. This is because we used the
<tt class="literal">-sticky</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">"nsew"</tt> option.
</p>

<a name="mastperltk-CHP-2-FIG-34" /><div class="figure"><img src="figs/mptk.0234.gif" alt="Figure 2-34" width="338" height="92" /></div><h4 class="objtitle">Figure 2-34. grid -ipadx and -ipady example</h4>

<p><a name="INDEX-298" /><a name="INDEX-299" />In
the following example, the <tt class="literal">-pady</tt> and
<tt class="literal">-padx</tt> options are applied to the top row of
Buttons and not the bottom row. <a href="ch02_02.htm">Figure 2-35</a> shows
the results.
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew", -padx =&gt; 10, -pady =&gt; 10);

$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button6", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button7", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button8", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew");</pre></blockquote>

<a name="mastperltk-CHP-2-FIG-35" /><div class="figure"><img src="figs/mptk.0235.gif" alt="Figure 2-35" width="338" height="92" /></div><h4 class="objtitle">Figure 2-35. grid -padx and -pady example</h4>

</div>
<a name="mastperltk-CHP-2-SECT-2.7" /><div class="sect2">
<h3 class="sect2">2.2.7. Specifying a Different Parent</h3>

<p><a name="INDEX-300" /><a name="INDEX-301" /><a name="INDEX-302" />The
<tt class="literal">-in</tt> option works the same way
in <tt class="literal">grid</tt> as it does in <tt class="literal">pack</tt>.
<tt class="literal">$widget</tt> will be placed in
<tt class="literal">$otherwindow</tt> and not in the default parent of
<tt class="literal">$widget</tt>.
</p>

<p>Here is the usage:</p>

<blockquote><pre class="code">-in =&gt; $otherwindow</pre></blockquote>

</div>
<a name="mastperltk-CHP-2-SECT-2.8" /><div class="sect2">
<h3 class="sect2">2.2.8. Configuring Columns and Rows</h3>

<p><a name="INDEX-303" /><a name="INDEX-304" /><a name="INDEX-305" />As with any of the geometry managers,
<tt class="literal">grid</tt> has a few methods associated with it. Each
method is invoked via a widget that has been placed on the screen by
using <tt class="literal">grid</tt>. Sometimes it is necessary to change
the options of the group of cells that makes up your grid.
</p>

<p><a name="INDEX-306" /><a name="INDEX-307" />You
can control resizing and the minimum size of a cell with the
<tt class="literal">gridColumnconfigure</tt> and
<tt class="literal">gridRowconfigure</tt> methods. Each takes a column or a
row number as its first argument and then takes some optional
arguments that will change the configuration of that column or row.
</p>

<p><a name="INDEX-308" /><a name="INDEX-309" /><a name="INDEX-310" /><a name="INDEX-311" /><a name="INDEX-312" />Both
<tt class="literal">gridColumnconfigure</tt> and
<tt class="literal">gridRowconfigure</tt> work similarly to the
<tt class="literal">configure</tt> method used with widgets; however, the
options you can specify with <tt class="literal">gridColumnconfigure</tt>
and <tt class="literal">gridRowconfigure</tt> cannot be used with the
<tt class="literal">grid</tt> command. The options you can use with
<tt class="literal">gridColumnconfigure</tt> and
<tt class="literal">gridRowconfigure</tt> are <tt class="literal">-weight</tt>,
<tt class="literal">-minsize</tt>, and <tt class="literal">-pad</tt>.
</p>

<p>If you send only a row or column number, a list of key/value pairs is
returned with the current options and their values for that method:
</p>

<blockquote><pre class="code">@column_configs = $mw-&gt;gridColumnconfigure(0);
@row_configs = $mw-&gt;gridRowconfigure(0);</pre></blockquote>

<p>Depending on your sensibilities, you may want to store the results in
a hash:
</p>

<blockquote><pre class="code">%column_configs = $mw-&gt;gridColumnconfigure(0);
%row_configs = $mw-&gt;gridRowconfigure(0);</pre></blockquote>

<p>In this example, we are getting the options and their values for the
first column and the first row. The results of using the default
values would look like this:
</p>

<blockquote><pre class="code">-minsize 0 -pad 0 -weight 0
-minsize 0 -pad 0 -weight 0</pre></blockquote>

<p>You can get the value of only one of the options by sending that
option as the second argument:
</p>

<blockquote><pre class="code">print $mw-&gt;gridColumnconfigure(0, -weight), "\n";
print $mw-&gt;gridRowconfigure(0, -weight), "\n";</pre></blockquote>

<p>The results would be:</p>

<blockquote><pre class="code">0
0</pre></blockquote>

<p>To change the value of the option, use the option followed
immediately by the value you want associated with it. For example:
</p>

<blockquote><pre class="code">$mw-&gt;gridColumnconfigure(0, -weight =&gt; 1);
$mw-&gt;gridRowconfigure(0, -weight =&gt; 1);</pre></blockquote>

<p>You can also specify multiple options in one call:</p>

<blockquote><pre class="code">$mw-&gt;gridColumnconfigure(0, -weight =&gt; 1, -pad =&gt; 10);
$mw-&gt;gridRowconfigure(0, -weight =&gt; 1, -pad =&gt; 10);</pre></blockquote>

<p>Now that we know how to call <tt class="literal">gridColumnconfigure</tt>
and <tt class="literal">gridRowconfigure</tt>, we need to know what the
three different options do.
</p>

<a name="mastperltk-CHP-2-SECT-2.8.1" /><div class="sect3">
<h3 class="sect3">2.2.8.1. Weight</h3>

<p><a name="INDEX-313" /><a name="INDEX-314" />The <tt class="literal">-weight</tt> option
sets the amount of space allocated to the column or row when the
window is divided into cells. Remember to use
<tt class="literal">-sticky</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">"nsew"</tt> in your <tt class="literal">grid</tt> command if
you want the widget to resize when the cell does. The default
<tt class="literal">-weight</tt> is 0, which causes the column width or row
height to be dictated by the largest widget in the column. Each
<tt class="literal">-weight</tt> value has a relationship to the other
<tt class="literal">-weight</tt> s in the rows or columns.
</p>

<p>If a column or row has a <tt class="literal">-weight</tt> of 2, it is twice
as big as a column or row that has a <tt class="literal">-weight</tt> of 1.
Columns or rows of <tt class="literal">-weight</tt> 0 don't get
resized at all. If you want all your widgets to resize in proportion
to the size of the window, add this to your code before you call
<tt class="literal">MainLoop</tt>:
</p>

<blockquote><pre class="code">($columns, $rows) = $mw-&gt;gridSize( );
for ($i = 0; $i &lt; $columns; $i++) {
  $mw-&gt;gridColumnconfigure($i, -weight =&gt; 1);
}
for ($i = 0; $i &lt; $rows; $i++) {
  $mw-&gt;gridRowconfigure($i, -weight =&gt; 1);
}</pre></blockquote>

<p>This code will assign the <tt class="literal">-weight</tt> of 1 to every
single row and column in the grid, no matter what size the grid is.
Of course, this example works only if you want to assign the same
size to each row and each column, but you get the idea.
</p>

<p>Here is an example of how the <tt class="literal">-weight</tt> option works
(<a href="ch02_02.htm">Figure 2-36</a> shows the result):
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Button1", -command =&gt; sub { exit })-&gt;grid
  ($mw-&gt;Button(-text =&gt; "Button2", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button3", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button4", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew");

$mw-&gt;Button(-text =&gt; "Button5", -command =&gt; sub { exit })-&gt;grid
  ("x",
   $mw-&gt;Button(-text =&gt; "Button7", -command =&gt; sub { exit }),
   $mw-&gt;Button(-text =&gt; "Button8", -command =&gt; sub { exit }),
   -sticky =&gt; "nsew");

$mw-&gt;gridColumnconfigure(1, -weight =&gt; 1);
$mw-&gt;gridRowconfigure(1, -weight =&gt; 1);</pre></blockquote>

<p>By giving row 1 and column 1 weights of 1 (whereas all other rows and
columns have 0 weights), they take over any extra available space
when the size of the window is increased. Notice that columns 0, 2,
and 3 are only as wide as is necessary to draw the Buttons and their
text, but column 1 has filled in the extra space. The same effect
happens for row 0 with a weight of 0 and row 1 with a new weight of
1. (The window has been resized larger to demonstrate the effects of
<tt class="literal">-weight</tt>.)
</p>

<a name="mastperltk-CHP-2-FIG-36" /><div class="figure"><img src="figs/mptk.0236.gif" alt="Figure 2-36" width="385" height="128" /></div><h4 class="objtitle">Figure 2-36. gridRowconfigure and gridColumnconfigure example</h4>

</div>

<a name="mastperltk-CHP-2-SECT-2.8.2" /><div class="sect3">
<h3 class="sect3">2.2.8.2. Minimum cell size</h3>

<p><a name="INDEX-315" /><a name="INDEX-316" />The option
<tt class="literal">-minsize</tt> sets the smallest width for the column or
the smallest height for each row. The <tt class="literal">-minsize</tt>
option takes a valid screen distance as a value. In this example, the
minimum size of the cells in row 0 and column 0 is set to 10 pixels:
</p>

<blockquote><pre class="code">$mw-&gt;gridColumnconfigure(0, -minsize =&gt; 10);
$mw-&gt;gridRowconfigure(0, -minsize =&gt; 10);</pre></blockquote>

<p>If the column or row was normally less than 10 pixels wide, it would
be forced to be at least that large.
</p>

</div>

<a name="mastperltk-CHP-2-SECT-2.8.3" /><div class="sect3">
<h3 class="sect3">2.2.8.3. Padding</h3>

<p>You can add padding around the widget and to the widget by using the
<tt class="literal">-padx/y</tt> and <tt class="literal">-ipadx/y</tt> options.
You can also add a similar type of padding by using the
<tt class="literal">-pad</tt> option with the
<tt class="literal">gridColumnconfigure</tt> and
<tt class="literal">gridRowconfigure</tt> methods. This padding is added
around the widget, not to the widget itself. When you call
<tt class="literal">gridColumnconfigure</tt>, the <tt class="literal">-pad</tt>
option will add padding to the left and right of the widget. Calling
<tt class="literal">gridRowconfigure</tt> with <tt class="literal">-pad</tt> will
add padding to the top and bottom of the widget. Here are two
examples:
</p>

<blockquote><pre class="code">$mw-&gt;gridColumnconfigure(0, -pad =&gt; 10);
$mw-&gt;gridRowconfigure(0, -pad =&gt; 10);</pre></blockquote>

</div>

<a name="mastperltk-CHP-2-SECT-2.8.4" /><div class="sect3">
<h3 class="sect3">2.2.8.4. Bounding box</h3>

<p>To find out how large a cell is, you can use the
<tt class="literal">gridBbox</tt> method:
</p>

<blockquote><pre class="code">($xoffset, $yoffset, $width, $height) = $master-&gt;gridBbox(0, 2);</pre></blockquote>

<p>This example gets the bounding box for column 0 and row 2. All the
values returned are in pixels. The bounding box will change as you
resize the window. The four values returned represent the x offset,
the y offset, the cell width, and the cell height (offsets are
relative to the window or Frame where the widget is gridded). The
bounding box dimensions include any and all padding specified by the
<tt class="literal">-padx</tt>, <tt class="literal">-pady</tt>,
<tt class="literal">-ipadx</tt>, and <tt class="literal">-ipady</tt>
options.<a name="INDEX-317" />
<a name="INDEX-318" />
<a name="INDEX-319" />
</p>

</div>
</div>
<a name="mastperltk-CHP-2-SECT-2.9" /><div class="sect2">
<h3 class="sect2">2.2.9. Removing a Widget</h3>

<p><a name="INDEX-320" /><a name="INDEX-321" />Like
<tt class="literal">packForget</tt>, <tt class="literal">gridForget</tt> removes
widgets from view on the screen. This may or may not cause the window
to resize itself; it depends on the size of
<tt class="literal">$widget</tt> and where it was on the window. Here are
some examples:
</p>

<blockquote><pre class="code">$mw-&gt;gridForget( );                # Nothing happens
$widget-&gt;gridForget( );            # $widget goes away
$widget-&gt;gridForget($widget1);    # $widget and $widget1 go away
$widget-&gt;gridForget($w1, $w3);    # $widget, $w1, $w3 go away</pre></blockquote>

<p>The widgets are undrawn from the screen, but the cells remain
logically filled.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-2.10" /><div class="sect2">
<h3 class="sect2">2.2.10. Getting Information</h3>

<p>The<tt class="literal">gridInfo</tt> method returns
information about the <tt class="literal">$widget</tt> in a list format.
Just as with <tt class="literal">packInfo</tt>, the first two elements
indicate where the widget was placed:
</p>

<blockquote><pre class="code">@list = $widget-&gt;gridInfo( );  # Easier to print
%gridInfo = $widget-&gt;gridInfo( );</pre></blockquote>

<p>Here are some sample results from <tt class="literal">gridInfo</tt>:</p>

<blockquote><pre class="code">-in Tk::Frame=HASH(0x81abc44) -column 0 -row 0 -columnspan 1 -rowspan 2 -ipadx 0 
-ipady 0 -padx 0 -pady 0  -sticky nesw</pre></blockquote>

</div>
<a name="mastperltk-CHP-2-SECT-2.11" /><div class="sect2">
<h3 class="sect2">2.2.11. Widget Location</h3>

<p>The <tt class="literal">gridLocation</tt> method returns the column and row
of the widget nearest the given (x, y) coordinates, relative to the
master:
</p>

<blockquote><pre class="code">($column, $row) = $master-&gt;gridLocation($x, $y);</pre></blockquote>

<p>Both <tt class="literal">$x</tt> and <tt class="literal">$y</tt> are in screen
units relative to the master window (in our examples,
<tt class="literal">$mw</tt>). For locations above or to the left of the
grid, -1 is returned.
</p>

<p>When given the arguments (0, 0), our application returns this: </p>

<blockquote><pre class="code">0 0</pre></blockquote>

<p>This indicates that the cell is at column 0 and row 0.</p>

<a name="mastperltk-CHP-2-SECT-2.11.1" /><div class="sect3">
<h3 class="sect3">2.2.11.1. Propagation</h3>

<p>There is a <tt class="literal">gridPropagate</tt> method that is similar to
<tt class="literal">packPropagate</tt>:
</p>

<blockquote><pre class="code">$master-&gt;gridPropagate( 0 );</pre></blockquote>

<p>When given a false value, <tt class="literal">gridPropagate</tt> turns off
geometry propagation, meaning size information is not sent upward to
the parent of <tt class="literal">$master</tt>. By default, propagation is
turned on. If <tt class="literal">gridPropagate</tt> is not given an
argument, the current value is returned.
</p>

</div>
</div>
<a name="mastperltk-CHP-2-SECT-2.12" /><div class="sect2">
<h3 class="sect2">2.2.12. How Many Columns and Rows?</h3>

<p>To find out how large the grid has become after placing numerous
widgets in it, you can use <tt class="literal">gridSize</tt> on the
container widget to get back the number of columns and the number of
rows:
</p>

<blockquote><pre class="code">($columns, $rows) = $master-&gt;gridSize( );</pre></blockquote>

<p>The list returned contains the number of columns followed by the
number of rows. In many of the earlier examples, we had a grid size
that was four columns by two rows.
</p>

<blockquote><pre class="code">($c, $r) = $f-&gt;gridSize( );    #$c = 4, $r = 2</pre></blockquote>

<p>It is not necessary for a widget to be placed in a column/row for it
to be considered a valid column/row. If you place a widget in column
4 and row 5 by using <tt class="literal">-row=&gt;5, -column=&gt;4</tt> and
the only other widget is in row 0 and column 0, then
<tt class="literal">gridSize</tt> will return 5 and 6.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-2.13" /><div class="sect2">
<h3 class="sect2">2.2.13. gridSlaves</h3>

<p>There are two ways to find out which widgets have been put in a
window or Frame: use <tt class="literal">gridSlaves</tt> without any
arguments to get the full list, or specify a row and column. Here are
examples of both:
</p>

<blockquote><pre class="code">@slaves = $mw-&gt;gridSlaves( );
print "@slaves\n";</pre></blockquote>

<p>The preceding code might have printed this:</p>

<blockquote><pre class="code">Tk::Button=HASH(0x81b6fb8) Tk::Button=HASH(0x81ba454) Tk::Button=HASH(0x81ba4cc) Tk::
Button=HASH(0x81ba538) Tk::Button=HASH(0x81b6fa0) Tk::Button=HASH(0x81ba5e0) Tk::
Button=HASH(0x81ba6dc) Tk::Button=HASH(0x81ba748)</pre></blockquote>

<p>We could have specified the widget in column 0, row 0:</p>

<blockquote><pre class="code">$widget = $mw-&gt;gridSlaves( -row =&gt; 0, -column =&gt; 0 );
print "$widget\n";
# Might print this: Tk::Button=HASH(0x81b6fb8)</pre></blockquote>

<p><a name="INDEX-322" /><a name="INDEX-323" />If you specify only the
<tt class="literal">-row</tt> option, you'll get a list containing
only the widgets in that row. The same goes for specifying only
<tt class="literal">-column</tt>; your list will contain only the widgets
in that column.<a name="INDEX-324" /> 
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2. Geometry Management</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.3. The place Geometry Manager</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>
