<html><head><title>User Customization (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 16. User Customization</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#mastperltk-CHP-16-SECT-1">Using the Command Line</a><br />
<a href="ch16_02.htm">Using the Option Database</a><br /></p></div>

<p><a name="INDEX-2527" /></a><a name="INDEX-2528" /></a>When
writing Perl/Tk applications, we can change the look of the
application dramatically by using different options when creating
widgets. We can give our users a similar type of control using the
<em class="emphasis">resource database</em> or <em class="emphasis">command-line
options</em>. The user has the ability to change the appearance
of almost anything, from the width of widget edges and the fonts used
to display text to the cursor shown as the mouse passes over a
widget. A change can be global to every application that honors the
option database or so specific that it changes a single option of a
single widget.
</p>

<p>In the first part of this chapter, we'll cover the ways users
can change these visual aspects from the command line. Later in the
chapter, we'll give you more ideas on how to utilize a resource
database.
</p>

<p><a name="INDEX-2529" /></a><a name="INDEX-2530" /></a><a name="INDEX-2531" /></a>The term resource database originated in
the X Window System. Essentially, the resource database provides
user-specified values for widget configuration options. When creating
a new widget, Tk queries the resource database for all options that
the programmer did not explicitly specify on the widget creation
command. If an option/value pair (sometimes called a
<em class="emphasis">resource</em>) isn't found in the resource
database, Tk uses the option's default value provided by the
widget's class.
</p>

<p><a name="INDEX-2532" /></a><a name="INDEX-2533" /></a><a name="INDEX-2534" /></a><a name="INDEX-2535" /></a>Actually, a
resource is a bit more complicated. Although the resource identifies
a single option/value pair, it may apply to more than a single
widget. Using class names and the wildcard character
(<tt class="literal">*</tt>), it's possible to pattern match multiple
widgets. Each of those widgets subsequently has that particular
option configured.
</p>

<p><a name="INDEX-2536" /></a>So, an option database resource is
really a pattern/value pair. Resources have this general syntax:
</p>

<blockquote><pre class="code"><em class="replaceable"><tt>pattern</tt></em><tt> : <em class="replaceable">value</em></tt></pre></blockquote>

<p><a name="INDEX-2537" /></a><a name="INDEX-2538" /></a><a name="INDEX-2539" /></a>where
<em class="replaceable"><tt>pattern</tt></em> identifies an option for one or
more widgets and <em class="replaceable"><tt>value</tt></em> is the value to
assign to all matches. The colon acts as a separator (with or without
whitespace). We'll see what all this means later.
</p>

<p><a name="INDEX-2540" /></a>Tk doesn't use the classical Unix
resource database, but its own implementation, called the
<em class="emphasis">option database</em>. Except for minor details, using
the option database is identical to the resource database; thus,
we'll use the two terms interchangeably.
</p>

<p><a name="INDEX-2541" /></a><a name="INDEX-2542" /></a><a name="INDEX-2543" /></a>Perl/Tk handles the option
database slightly differently than Tcl/Tk. Prior to MainWindow
creation, Perl/Tk calls the special command-line processing
subroutine <tt class="literal">Tk::CmdLine::SetArguments.</tt> This
subroutine extracts standard X11 options such as
<tt class="literal">-background</tt> and adds them to the option database.
Options that <tt class="literal">Tk::CmdLine::SetArguments</tt>
doesn't recognize are left in <tt class="literal">@ARGV</tt> for the
application to handle. We'll learn more about the
<tt class="literal">Tk::CmdLine</tt> subroutines later.
</p>

<p><a name="INDEX-2544" /></a><a name="INDEX-2545" /></a><a name="INDEX-2546" /></a>When
determining the value to assign to an option, Perl/Tk uses this order
of precedence:
</p>

<ul><li>
<p>If the programmer specified an option on a widget creation command,
that value is used. It cannot be overridden by the option database.
</p>
</li><li>
<p>For an unspecified option, the option database is consulted. If a
resource entry matches, the option database value is used for the
widget option. As mentioned previously, this value may have come from
the command line.
</p>
</li><li>
<p>Otherwise, Perl/Tk uses the default value supplied by the
widget's class.
</p>
</li><li>
<p>All other command-line options remain in <tt class="literal">@ARGV</tt>.</p>
</li></ul>
<div class="sect1"><a name="mastperltk-CHP-16-SECT-1" /></a>
<h2 class="sect1">16.1. Using the Command Line</h2>

<p><a name="INDEX-2547" /></a><a name="INDEX-2548" /></a>You need to leave a way open for
customization in your application. Mainly, this means you can take
the easy way out and not hardcode many option values. If you hardcode
too many configuration options, users cannot easily tailor your
application using one of the methods listed in this chapter. For
example, if you want to allow your users to change the font of all
the widgets in the application, don't use the
-<tt class="literal">font</tt> option when creating or configuring your
widgets. If you want to do something such as change the size of a
font, get the current font and then change the size.<a href="#FOOTNOTE-40">[40]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-40" /></a><p> [40] Sometimes your code might depend on the size of the font used
(see NavListbox in <a href="ch14_01.htm">Chapter 14, "Creating Custom Widgets in Pure Perl/Tk"</a>). Rather than
limiting your users or having your window look wrong, just determine
the current font and calculate from there.</p> </blockquote>

<p>Often the easiest thing for a user to do is specify a command-line
option when running the application. The options can be changed
quickly and allow users to have immediate and direct control over
their applications.
</p>

<p><a name="INDEX-2549" /></a><a name="INDEX-2550" /></a>There are several command-line
options that customize the way your application looks. When you run
your application, the command line looks something like
this:<a href="#FOOTNOTE-41">[41]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-41" /></a><p> [41] In real life, MS Windows users might
double-click on the <em class="filename">.pl</em> file or use a shortcut,
but let's assume for now that you're typing this at a DOS
prompt.</p> </blockquote>

<blockquote><pre class="code"># On MS Windows systems:
&gt; <tt class="userinput"><b>perl myScript.pl [ options... ]</b></tt>
# On Unix systems:
% <tt class="userinput"><b>myScript [ options... ]</b></tt></pre></blockquote>

<p>The supported options are standard X options that any user familiar
with X Windows will recognize. None of these options are required,
but they might be the simplest ways to do what you want (for example,
changing the background color of everything in the application). When
specifying a command-line list of options and values, do not use a
comma separator. If any of the options have bad values, you'll
get an immediate error, and the application won't run.
</p>

<p><a name="INDEX-2551" /></a><a name="INDEX-2552" /></a><a name="INDEX-2553" /></a><a name="INDEX-2554" /></a><a name="INDEX-2555" /></a><a name="INDEX-2556" /></a><a name="INDEX-2557" /></a><a name="INDEX-2558" /></a><a name="INDEX-2559" /></a><a name="INDEX-2560" /></a><a name="INDEX-2561" /></a><a name="INDEX-2562" /></a><a name="INDEX-2563" /></a><a name="INDEX-2564" /></a>Customizing using only command-line
options won't necessarily produce the most elegant-looking
applications, but for something simple, such as changing colors or
fonts, it's the quickest way to go. Also, remember that an
option can't be changed by the user if you have set it inside
the application. <a href="ch16_01.htm">Table 16-1</a> lists the options that
<tt class="literal">Tk::CmdLine::SetArguments</tt> recognizes.
</p>

<a name="mastperltk-CHP-16-TABLE-1" /></a><h4 class="objtitle">Table 16-1. Command-line options recognized by Tk::CmdLine::SetArguments </h4><table border="1">



<tr>
<th>
<p>Option</p>
</th>
<th>
<p>Description</p>
</th>
</tr>


<tr>
<td>
<p><tt class="literal">-background</tt>, <tt class="literal">-foreground</tt></p>
</td>
<td>
<p>Colors of nontext and text</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-class</tt></p>
</td>
<td>
<p>Class used for option DB lookups</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-display</tt>, <tt class="literal">-screen</tt></p>
</td>
<td>
<p>Display to use</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-font</tt></p>
</td>
<td>
<p>Default font of all text</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-iconic</tt>, <tt class="literal">-geometry</tt></p>
</td>
<td>
<p>Minimizes (or iconifies) size and position</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-motif</tt></p>
</td>
<td>
<p>Emulates look of Motif window manager</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-name</tt></p>
</td>
<td>
<p>Application name used for option DB lookups</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-synchronous</tt></p>
</td>
<td>
<p>Turn X buffering on or off</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-title</tt></p>
</td>
<td>
<p>Window title shown in decorative border</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">-xrm</tt></p>
</td>
<td>
<p>Used to specify any other options</p>
</td>
</tr>

</table><p>

<a name="mastperltk-CHP-16-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">16.1.1. Colors, Fonts, and Titles</h3>

<p><a name="INDEX-2565" /></a><a name="INDEX-2566" /></a><a name="INDEX-2567" /></a>Changing all colors in an
application is simplified by using the -<tt class="literal">background</tt>
and <tt class="literal">-foreground</tt> command-line options. Each takes a
color argument; it is wise to use contrasting colors since whatever
you use for -<tt class="literal">foreground</tt> will be the text color.
</p>

<p><a name="INDEX-2568" /></a>Here's an example that changes
your application to white on black:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>myScript.pl -foreground white -background black</b></tt></pre></blockquote>

<p>If you are fond of a particular color for the text, use just the
<tt class="literal">-foreground</tt> option:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>myScript.pl -foreground purple</b></tt></pre></blockquote>

<p><a name="INDEX-2569" /></a>To change the font of all widgets in
the application, use the <tt class="literal">-font</tt> command-line
option:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>myScript.pl -font "Arial 14"</b></tt></pre></blockquote>

<p>For more information on fonts, take a look at <a href="ch03_01.htm">Chapter 3, "Fonts"</a>. 
</p>

<p>Normally the title of a running Perl/Tk application is either its
filename (excluding any extension), the value associated with the
<tt class="literal">-title</tt> option when creating/configuring the
MainWindow, or the title established with the
<tt class="literal">title</tt> method. If the title isn't explicitly
set, a user can use the <tt class="literal">-title</tt> command-line
option:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>myScript.pl -title "This is my app!"</b></tt></pre></blockquote>

</div>
<a name="mastperltk-CHP-16-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">16.1.2. Initial MainWindow Placement</h3>

<p><a name="INDEX-2570" /></a><a name="INDEX-2571" /></a>When you run a Perl/Tk application, the
MainWindow immediately appears on the screen. If you would rather the
window manager not display the MainWindow, specify the
<tt class="literal">-iconic</tt> option on the command line:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>myScript.pl -iconic</b></tt></pre></blockquote>

<p>In Windows, you'll see an entry on the Taskbar. For a Unix
system, the icon is placed however your window manager normally does
these things (perhaps in an icon bay, as an icon on the desktop, or
not shown at all). This is a great way to start an application that
has a lot of tasks to do (similar to a batch job), but you still want
to be able to see the output in a nice format later. The program can
even be written to deiconify itself if something urgent happens while
it's running.
</p>

<p><a name="INDEX-2572" /></a>With the
<tt class="literal">-geometry</tt> option, you can change the initial size
and/or position of your application. To change the size of the
MainWindow, use the <tt class="literal">-geometry</tt> option:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>myScript.pl -geometry "100x300"</b></tt></pre></blockquote>

<p>The complete syntax for <tt class="literal">-geometry</tt> is:</p>

<blockquote><pre class="code"><em class="replaceable"><tt>widthxheight</tt></em><tt>{+-}<em class="replaceable">xoffset</em>{+-}<em class="replaceable">yoffset</em></tt></pre></blockquote>

<p>where <em class="replaceable"><tt>width</tt></em> and
<em class="replaceable"><tt>height</tt></em> are the window's x and y
dimensions. If an offset value is positive, it is measured from the
top or left edge of the display, and if negative, it is measured from
the bottom or right edge of the screen. For example, a specification
of <tt class="literal">-0-0</tt> would place an application in the
bottom-right corner of the display.
</p>

</div>
<a name="mastperltk-CHP-16-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">16.1.3. Choosing a Display</h3>

<p><a name="INDEX-2573" /></a><a name="INDEX-2574" /></a><a name="INDEX-2575" /></a>On Unix systems, you'll have to
specify the full display name (take a look at the
<tt class="literal">DISPLAY</tt> environment variable or look on the X
manpage under Display Names for a bit more information). See <a href="ch20_01.htm">Chapter 20, "IPC with send"</a> for complete details on
<tt class="literal">DISPLAY</tt> and friends. It's normally set up
automatically, although you can change it using the
<tt class="literal">-display</tt> or <tt class="literal">-screen</tt> options.
</p>

</div>
<a name="mastperltk-CHP-16-SECT-1.4" /></a><div class="sect2">
<h3 class="sect2">16.1.4. Option Database Lookups</h3>

<p><a name="INDEX-2576" /></a><a name="INDEX-2577" /></a><a name="INDEX-2578" /></a>When using the option database, a
resource pattern often contains class and application names. You can
change these values for your application via the command-line options
<tt class="literal">-class</tt> and <tt class="literal">-name</tt>. Using these
options makes sense if you want to run the application several times
simultaneously and easily distinguish between the different
applications at a glance. You can make the one that points to a
development server all blue and the production one red or green.
</p>

<p><a name="INDEX-2579" /></a>Further, you can
pre-populate the option database by using the <tt class="literal">-xrm</tt>
option with a value. The value is a standard
<em class="replaceable"><tt>pattern:value</tt></em> string. You can specify
multiple <tt class="literal">-xrm</tt> pattern/value pairs as well, making
this a very powerful command-line option. This option is particularly
useful for adding options that do not have command-line equivalents.
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>perl myScript.pl -xrm '*font: Arial 14' -xrm '*foreground: blue' -xrm '*pi: 3.14'</b></tt></pre></blockquote>

</div>
<a name="mastperltk-CHP-16-SECT-1.5" /></a><div class="sect2">
<h3 class="sect2">16.1.5. Synchronizing Window Messages</h3>

<p><a name="INDEX-2580" /></a><a name="INDEX-2581" /></a><a name="INDEX-2582" /></a><a name="INDEX-2583" /></a><a name="INDEX-2584" /></a>Normally your Perl/Tk application
runs asynchronously, which means X messages are buffered. To turn off
this buffering, use the <tt class="literal">-synchronous</tt> option. This
is mainly a debugging technique, but we Perl/Tk programmers should
never have to resort to it.<a name="INDEX-2585" /></a>
</p>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">15.9. Coexisting with Other GUI Main Loops</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16.2. Using the Option Database</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>