<html><head><title>Interfacing tkSquare.c with Perl/Tk (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch21_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch21_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">21.2. Interfacing tkSquare.c with Perl/Tk</h2>

<p><a name="INDEX-3126" />After creating
the <em class="emphasis">Tk-Square-1.0</em> directory structure depicted
in <a href="ch21_01.htm">Figure 21-2</a>, copy the hand-edited
<em class="emphasis">tkSquare.c</em> to
<em class="emphasis">pTk/mTk/generic</em>. Create the
<em class="filename">MANIFEST</em> file containing these lines:
</p>

<blockquote><pre class="code">MANIFEST
Makefile.PL
Square.pm
Square.xs
pTk/Makefile.PL
pTk/mTk/generic/tkSquare.c
t/square_demo.t</pre></blockquote>

<a name="mastperltk-CHP-21-SECT-2.1" /><div class="sect2">
<h3 class="sect2">21.2.1. Makefile.PL</h3>

<p><a name="INDEX-3127" />The topmost
<em class="emphasis">Makefile.PL</em> is a Perl program written in a
specialized MakeMaker language enhanced for generating Perl/Tk
Makefiles. The <tt class="literal">OBJECT</tt> attribute includes
<em class="emphasis">pTk/tkSquare.o</em> to satisfy the external
<tt class="literal">Tk_SquareCmd</tt>. For more information, read the
<em class="emphasis">ExtUtils::MakeMaker</em> documentation.
</p>

<blockquote><pre class="code">use Tk::MMutil;

Tk::MMutil::TkExtMakefile(
    'NAME'         =&gt; 'Tk::Square',
    'VERSION_FROM' =&gt; 'Square.pm',
    'OBJECT'       =&gt; '$(O_FILES) pTk/tkSquare.o',
);</pre></blockquote>

</div>
<a name="mastperltk-CHP-21-SECT-2.2" /><div class="sect2">
<h3 class="sect2">21.2.2. Square.xs</h3>

<p><a name="INDEX-3128" /><a name="INDEX-3129" /><a name="INDEX-3130" /><a name="INDEX-3131" /><a name="INDEX-3132" /><a name="INDEX-3133" /><a name="INDEX-3134" /><a name="INDEX-3135" /><a name="INDEX-3136" />This
extension subroutine, or XSUB, lets Perl call
<tt class="literal">Tk_SquareCmd</tt>. Of special note are Tk's
VTABLES (vector tables), which are structs with pointers to functions
as their members. The vector tables provide a modular, operating
system-independent means for dynamically loadable Tk modules
<em class="emphasis">(.so</em> for Unix, .<em class="emphasis">dll</em> for
Win32) to call externals in other loadables. The
<em class="emphasis">.m</em> files define macros that transform apparent
function calls into vector table lookups.
</p>

<blockquote><pre class="code">#include &lt;EXTERN.h&gt;          /* standard ... */
#include &lt;perl.h&gt;            /* ... XSUB ... */
#include &lt;XSUB.h&gt;            /* ... headers  */

#include "tkGlue.def"        /* map Tcl structs to Perl SV * etc. */

#include "pTk/tkPort.h"      /* OS dependant definitions */
#include "pTk/tkInt.h"       /* Tk widget internals */ 
#include "pTk/tkVMacro.h"    /* includes the *.m files etc. for you */
#include "tkGlue.h"          /* _The_ Perl &lt;-&gt; Tk glue header */
#include "tkGlue.m"          /* header functions as macros via table */

extern int Tk_SquareCmd _ANSI_ARGS_((ClientData, Tcl_Interp *, int, Arg *));

DECLARE_VTABLES;             /* declare the pointers to tables */

MODULE = Tk::Square PACKAGE = Tk

PROTOTYPES: DISABLE

void
square(...)
CODE: 
{
    XSRETURN(XSTkCommand(cv, Tk_SquareCmd, items, &amp;ST(0)));
}

BOOT: 
{
    IMPORT_VTABLES;
}</pre></blockquote>

</div>
<a name="mastperltk-CHP-21-SECT-2.3" /><div class="sect2">
<h3 class="sect2">21.2.3. Square.pm</h3>

<p><a name="INDEX-3137" /><a name="INDEX-3138" />This Perl module bootstraps the
Tk::Square loadable and defines class and instance methods and
definitions. The <em class="emphasis">Makefile.PL</em>
<tt class="literal">VERSION_FROM</tt> attribute directs
<em class="emphasis">MakeMaker</em> to get the module's version
number from this file. As with pure Perl mega-widgets,
<tt class="literal">Construct</tt> plugs a "Square" symbol in
Tk::Widget's symbol table, which is a code reference that
invokes Tk::Widget::new.
</p>

<blockquote><pre class="code">$Tk::Square::VERSION = '1.0';

package Tk::Square; 

use AutoLoader;
use Tk qw/Ev/;
use strict;

use base qw/Tk::Widget/;
Construct Tk::Widget 'Square';

bootstrap Tk::Square $Tk::VERSION; 
sub Tk_cmd {\&amp;Tk::square} 

Tk::Methods(qw/cget configure position size/);

1;</pre></blockquote>

<p><a name="INDEX-3139" />For better performance,
<em class="emphasis">make</em> autosplits subroutines after the <tt class="literal">_
_END__</tt> statement, writing each to a separate
<em class="emphasis">.al</em> file. Hopefully, the comments in each make
the code self-explanatory.
</p>

<blockquote><pre class="code">__END__

sub ClassInit {

    # Establish bindings for class Square.

    my ($class, $mw) = @_;

    $class-&gt;SUPER::ClassInit($mw);

    my $move = ['move' =&gt;, Ev('x'), Ev('y')];
    $mw-&gt;bind($class, '&lt;1&gt;'         =&gt; $move);
    $mw-&gt;bind($class, '&lt;B1-Motion&gt;' =&gt; $move);
    $mw-&gt;bind($class, '&lt;a&gt;'         =&gt; ['animate']);

} # end ClassInit

sub InitObject {

    # C widgets don't have a Populate( ) method (Tk::Derived
    # is not in their @ISA array). InitObject( ) performs per
    # instance Square initialization.

    my($self, $args) = @_;
    
    $self-&gt;SUPER::InitObject($args);
    $self-&gt;{-count} = 0;     # animation cycle count
    
} # end InitObject

sub animate  {

    # A &lt;KeyPress-a&gt; event invokes this callback to start or stop
    # a Square's animation.  Vary the size between 10 and 40 pixels.

    my $self = shift;

    if ($self-&gt;{-count} == 0) {
        $self-&gt;{-count} = 3;
        $self-&gt;{-tid} = $self-&gt;repeat(30 =&gt; [sub {
            my $self = shift;
            return if $self-&gt;{-count} == 0;
            my $s = $self-&gt;size;
            if ($s &gt;= 40) {$self-&gt;{-count} = -3}
            if ($s &lt;= 10) {$self-&gt;{-count} = +3}
            $self-&gt;size($s + $self-&gt;{-count});
        }, $self]);
    } else {
        $self-&gt;{-count} = 0;
        $self-&gt;afterCancel($self-&gt;{-tid});
    }

} # end animate

sub move {

    # Move a Square to the specified coordinate.

    my($self, $x, $y) = @_;

    my $s = $self-&gt;size;
    $self-&gt;position($x - ($s / 2), $y - ($s / 2));

} # end move</pre></blockquote>

<p><a name="INDEX-3140" />Finally,
we complete the module with POD documentation.
</p>

<blockquote><pre class="code">=head1 NAME

Tk::Square - Create a Tk::Square widget.

=for pm Tk/Square.pm

=for category Tk Widget Classes

=head1 SYNOPSIS

S&lt;    &gt;I&lt;$square&gt; = I&lt;$parent&gt;-E&lt;gt&gt;B&lt;Square&gt;(I&lt;-option&gt; =E&lt;gt&gt; I&lt;value&gt;, ... );

=head1 DESCRIPTION

Create a B&lt;Square&gt; widget.

=over 4

=item B&lt;-dbl&gt;

Double buffer iff true.

=back

=head1 METHODS

=over 4

=item C&lt;$square-E&lt;gt&gt;B&lt;size&gt;;&gt;

Change the size of the Square.

=item C&lt;$square-E&lt;gt&gt;B&lt;position&gt;(I&lt;x&gt;, I&lt;y&gt;);&gt;

Move the Square to coordinate (I&lt;x&gt;,I&lt;y&gt;).

=back

=head1 DEFAULT BINDINGS

Perl/Tk automatically creates class bindings for Square widgets
that give them the following behaviour. 

=over 4

=item B&lt;&lt;B1&gt;&gt;

Move Square's top-left corner to cursor position.

=item B&lt;&lt;B1-Motion&gt;&gt;

Continuously move Square's top-left corner to cursor position.

=item B&lt;&lt;a&gt;&gt;

Starts/stop the Square's animation mode.

=back

=head1 AUTHORS

The Tcl/Tk group, Nick Ing-Simmons and Steve Lidie.

=head1 EXAMPLE

I&lt;$square&gt; = I&lt;$mw&gt;-E&lt;gt&gt;B&lt;Square&gt;(-dbl =E&lt;gt&gt; 0);

=head1 KEYWORDS

square, widget

=cut</pre></blockquote>

</div>
<a name="mastperltk-CHP-21-SECT-2.4" /><div class="sect2">
<h3 class="sect2">21.2.4. pTk/Makefile.PL</h3>

<p><a name="INDEX-3141" />This special
<em class="filename">Makefile.PL</em> program serves two main purposes: it
determines the location of installation include and executable files,
and it munges all the hand-edited C files in
<em class="filename">pTk/mTk/generic</em>.
</p>

<blockquote><pre class="code">use File::Basename;
use Tk::MMutil;
use strict;

my $inst_tk = Tk::MMutil::installed_tk( );
my $inst_inc  = "$inst_tk/pTk";

Tk::MMutil::TkExtMakefile(
    'OBJECT' =&gt; '$(O_FILES)',
    'INC'    =&gt; " -I${inst_inc}",
    'clean'  =&gt; {'FILES' =&gt; 'tkSquare.c'},
);

sub MY::post_initialize {

    my $self = shift;

    my $perl = $self-&gt;{'PERL'};
    foreach my $tcl (&lt;mTk/generic/*.c&gt;) {
        my $ptk = basename $tcl;
        print "Munging $tcl -&gt; $ptk\n";
        system ($perl, "$inst_tk/pTk/Tcl-pTk", $tcl, $ptk );
    }

    push @{$self-&gt;{O_FILES}}, "\ttkSquare.o";

    '';
}</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch21_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch21_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">21. C Widget Internals</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">21.3. Building and Testing Tk::Square</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>