<html><head><title>The form Geometry Manager (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.4. The form Geometry Manager</h2>

<p><a name="INDEX-346" />The final geometry manager we
want to cover is <tt class="literal">form</tt>. Recently added into the
Perl/Tk distribution, <tt class="literal">form</tt> is a very different
geometry manager than those we've seen so far. To try and
compare it with what we already know, it behaves like a combination
of <tt class="literal">pack</tt> and <tt class="literal">place</tt>. Using
<tt class="literal">form</tt>, it is legal to overlap widgets (as you would
with <tt class="literal">place</tt>), but you can also display the widgets
relative to each other and stretch them out to fill the entire
available area and resize with the window (as you would with
<tt class="literal">pack</tt>). The combination of all these abilities
results in a powerful geometry manager.
</p>

<p><a name="INDEX-347" />When using <tt class="literal">form</tt>, each
edge of a widget can be attached to something: the container's
grid, another widget, or nothing at all. You can also use springs to
push your widgets around in the window based on the strength (or
weight) of the spring. As with the other geometry managers, you can
add padding to your widget.
</p>

<p>Let's look at the options briefly, then go into more detail on
how to use them.
</p>

<a name="mastperltk-CHP-2-SECT-4.1" /><div class="sect2">
<h3 class="sect2">2.4.1. Options for form</h3>

<p><a name="INDEX-348" />The following
are all the legal options for <tt class="literal">form</tt>. The following
sections show you how to use these options to the best effect.
</p>

<dl>
<dt><tt class="literal">-bottom =&gt;</tt> <tt><em class="replaceable"><tt>attachment</tt></em></tt></dt>
<dd>
<a name="INDEX-349" />Uses the
given attachment on the bottom side of the widget.
</p>
</dd>


<dt><tt class="literal">-bottomspring =&gt;</tt> <tt><em class="replaceable"><tt>weight</tt></em></tt></dt>
<dd>
<a name="INDEX-350" />Uses
the given weight for a spring on the bottom side of the widget.
</p>
</dd>


<dt><tt class="literal">-fill =&gt;</tt> <tt class="literal">'x' | 'y' | 'both' | 'none'</tt></dt>
<dd>
<a name="INDEX-351" />Specifies the direction in which to
fill when springs are used. There is no default value.
</p>
</dd>


<dt><tt class="literal">-in =&gt;</tt> <tt class="literal">$master</tt></dt>
<dd>
<a name="INDEX-352" />Uses <tt class="literal">$master</tt> as the
container to put the widget in. If used, the <tt class="literal">-in</tt>
option must be the first one specified.
</p>
</dd>


<dt><tt class="literal">-left =&gt;</tt> <tt><em class="replaceable"><tt>attachment</tt></em></tt></dt>
<dd>
<a name="INDEX-353" />Uses the given
attachment on the left side of the widget.
</p>
</dd>


<dt><tt class="literal">-leftspring =&gt;</tt> <tt><em class="replaceable"><tt>weight</tt></em></tt></dt>
<dd>
<a name="INDEX-354" />Uses the
given weight for a spring on the left side of the widget.
</p>
</dd>


<dt><tt class="literal">-padbottom =&gt;</tt> <tt><em class="replaceable"><tt>value</em></tt>, <tt class="literal">-padleft =&gt;</tt> <tt><em class="replaceable">value</em></tt>, <tt class="literal">-padright =&gt;</tt> <tt><em class="replaceable">value</em></tt>, <em class="emphasis">and</em></tt> <tt class="literal">-padtop =&gt;</tt> <tt><em class="replaceable">value</tt></em></tt></dt>
<dd>
<a name="INDEX-355" /><a name="INDEX-356" />Place padding on the given side of the
widget.
</p>
</dd>


<dt><tt class="literal">-padx =&gt;</tt> <tt><em class="replaceable"><tt>value</tt></em></tt></dt>
<dd>
<a name="INDEX-357" />Places padding on the left and right
sides of the widget.
</p>
</dd>


<dt><tt class="literal">-pady =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-358" />Places padding on the top and bottom of
the widget.
</p>
</dd>


<dt><tt class="literal">-right =&gt;</tt> <tt><em class="replaceable"><tt>attachment</tt></em></tt></dt>
<dd>
<a name="INDEX-359" />Uses the given
attachment on the right side of the widget.
</p>
</dd>


<dt><tt class="literal">-rightspring =&gt;</tt> <tt><em class="replaceable"><tt>weight</tt></em></tt></dt>
<dd>
<a name="INDEX-360" />Uses the
given weight for a spring on the right side of the widget.
</p>
</dd>


<dt><tt class="literal">-top =&gt;</tt> <tt><em class="replaceable"><tt>attachment</tt></em></tt></dt>
<dd>
<a name="INDEX-361" />Uses the given
attachment on the top side of the widget.
</p>
</dd>


<dt><tt class="literal">-topspring =&gt;</tt> <tt><em class="replaceable"><tt>weight</tt></em></tt></dt>
<dd>
<a name="INDEX-362" />Uses the
given weight for a spring on the top side of the widget.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-2-SECT-4.2" /><div class="sect2">
<h3 class="sect2">2.4.2. Attachments</h3>

<p><a name="INDEX-363" /><a name="INDEX-364" /><a name="INDEX-365" />The
edge (top, bottom, left, and right) of each widget can be attached to
something else in the container. The left side can be attached to the
grid (which we'll say more about in a minute), the right to
another widget, and the top and bottom might be attached to nothing
at all. In addition to an anchor point, you can specify a positive or
negative offset from that point. An offset is a number given in
screen units. A positive offset moves the widget to the right or down
from the anchor point. A negative offset moves the widget to the left
or up from the anchor point. An attachment is comprised of either an
anchor point or an anonymous array of <tt class="literal">[</tt>
<tt class="literal">anchor_point,</tt> <tt class="literal">offset</tt>
<tt class="literal">]</tt>. The examples we go through to demonstrate each
type will make this clear.
</p>

<a name="mastperltk-CHP-2-SECT-4.2.1" /><div class="sect3">
<h3 class="sect3">2.4.2.1. Attaching to the grid</h3>

<p><a name="INDEX-366" />There is an unseen grid in each container
widget that uses <tt class="literal">form</tt>. Don't confuse this
grid with the <tt class="literal">grid</tt> geometry manager. The default
size of <tt class="literal">form</tt>'s grid is 100 x 100, and
does not change even if the container size changes. Within the
container, the left and top are both at 0, the right and bottom are
at 100. Using these numbers, we can specify a spot to attach a widget
edge to. This is different from <tt class="literal">place</tt> because
instead of using pixel points that change as the window changes size,
the size of the grid remains static. To specify a grid attachment,
use the form <tt class="literal">'%xx'</tt> replacing <tt class="literal">xx</tt>
with the grid location. If you leave out the <tt class="literal">%</tt>,
you are specifying an offset only, rather than a grid location. This
example demonstrates using a grid attachment:
</p>

<blockquote><pre class="code">foreach (1..5) {
    # Create Buttons and attach them to grid at intervals of 5
    $mw-&gt;Button(-text =&gt; $_ * 5)-&gt;form(-left =&gt; '%' . $_ * 5, 
                                       -top =&gt; '%' . $_ * 5);
}</pre></blockquote>

<p>This code creates five widgets, putting them on the grid at (5, 5),
(10, 10), (15, 15), and so on. Take a look at <a href="ch02_04.htm">Figure 2-48</a> and you'll see what happens when we
resize this window. Notice that the widgets overlap each other and
move as the window is resized. This demonstrates that the grid size
stays the same as the window resizes, and the widgets move with the
grid. If you make the window large enough, the widgets no longer
overlap.
</p>

<a name="mastperltk-CHP-2-FIG-48" /><div class="figure"><img src="figs/mptk.0248.gif" alt="Figure 2-48" width="343" height="166" /></div><h4 class="objtitle">Figure 2-48. How the form grid works (both windows have grid sizes of 100x100)</h4>

<p><a name="INDEX-367" /><a name="INDEX-368" />For the previous example, we used the
<tt class="literal">-top</tt> and <tt class="literal">-left</tt> options to
specify where to locate the widgets in the window. If you call
<tt class="literal">form</tt> with no options at all, each widget is put at
(0, 0), piled one on top of the other. The order in which the widgets
are created is important in this case, because the last one created
is placed on top of the pile.
</p>

<p>You can change the size of the widget by attaching opposite sides to
different points in the grid. The widget will resize with the window
(see <a href="ch02_04.htm">Figure 2-49</a>):
</p>

<blockquote><pre class="code"># First Button is 'normal'
$b1 = $mw-&gt;Button(-text =&gt; "small")-&gt;form(-left =&gt; '%10');
# Second Button is attached to $b1 on left, and grid 70 on right
$mw-&gt;Button(-text =&gt; "BIG")-&gt;form(-left =&gt; $b1, -right =&gt; '%70',
                                  -top =&gt; '%0', -bottom =&gt; '%80');</pre></blockquote>

<a name="mastperltk-CHP-2-FIG-49" /><div class="figure"><img src="figs/mptk.0249.gif" alt="Figure 2-49" width="202" height="93" /></div><h4 class="objtitle">Figure 2-49. A widget attached to the grid on two sides stretches to stay attached</h4>

<p>There are a few things to note about the code associated with <a href="ch02_04.htm">Figure 2-49</a>. We didn't specify a
<tt class="literal">-top</tt> attachment point for the small Button. The
default is always going to be 0 if there isn't a top/bottom or
left/right attachment point explicitly used with
<tt class="literal">form</tt>. Also, the <tt class="literal">-left</tt>
attachment point for the BIG Button was another widget. That's
a widget-to-widget attachment, which we'll cover next.
</p>

<p>To shift your widget 10 pixels to the right of the grid coordinate
(5, 5), you would use an anonymous array to specify the whole
attachment:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "shifted right")-&gt;form(-left =&gt; ['%5', 10], 
                                            -top =&gt; '%5');</pre></blockquote>

<p>If the offset is 0, you don't need to specify it at all.</p>

</div>

<a name="mastperltk-CHP-2-SECT-4.2.2" /><div class="sect3">
<h3 class="sect3">2.4.2.2. Widget-to-widget attachments</h3>

<p><a name="INDEX-369" />There are two ways to attach one widget to
another: by using the same side (both top, both bottom, and so on),
or by using opposite sides. Any widgets attached to one another must
be managed by <tt class="literal">form</tt> in the same parent container.
</p>

<p>Here's an example of opposite side attachment:</p>

<blockquote><pre class="code">$thisbutton-&gt;form(-left =&gt; $b1);</pre></blockquote>

<p><a name="INDEX-370" /><a name="INDEX-371" />You would read that in English as
"Attach the left side of <tt class="literal">$thisbutton</tt> to the
opposite (right) side of <tt class="literal">$b1</tt>." Remember the
option name you are using (<tt class="literal">-left</tt>,
<tt class="literal">-right</tt>, <tt class="literal">-top</tt>, or
<tt class="literal">-bottom</tt>) applies to the widget on which you are
currently calling <tt class="literal">form</tt>. If you want a bit of space
between two widgets, add an offset to the <tt class="literal">-left</tt>
attachment point:
</p>

<blockquote><pre class="code">$b1 = $mw-&gt;Button(-text =&gt; "small")-&gt;form(-left =&gt; '%10');
# Second Button is attached to $b1 on left, and grid 70 on right
$mw-&gt;Button(-text =&gt; "BIG")-&gt;form(<tt class="userinput"><b>-left =&gt; [$b1, 5]</b></tt>, -right =&gt; '%70',
                                  -top =&gt; '%0', -bottom =&gt; '%80');</pre></blockquote>

<p>By changing the argument to <tt class="literal">-left</tt> (in bold), we
add a bit of space between the two widgets, as shown in <a href="ch02_04.htm">Figure 2-50</a>. 
</p>

<a name="mastperltk-CHP-2-FIG-50" /><div class="figure"><img src="figs/mptk.0250.gif" alt="Figure 2-50" width="193" height="99" /></div><h4 class="objtitle">Figure 2-50. Using an offset with a widget attachment</h4>

<p><a name="INDEX-372" /><a name="INDEX-373" />What if
we want to line up the left sides of a bunch of widgets? We use a
same-side attachment. (In the docs this is called Parallel Side
Attachment). To tell <tt class="literal">form</tt> you are using a
same-side attachment, add the <tt class="literal">'&amp;'</tt> character as
the first item in an anonymous array.
</p>

<blockquote><pre class="code">$b1 = $mw-&gt;Button(-text =&gt; 'top widget')-&gt;form(-left =&gt; '%10');
$b2 = $mw-&gt;Button(-text =&gt; 'bottom widget')-&gt;form(-left =&gt; ['&amp;', $b1], 
	-top =&gt; $b1);
$mw-&gt;Button(-text =&gt; 'bottom widget(2)')-&gt;form(-left =&gt; ['&amp;', $b1, ], 
	-top =&gt; [$b2, 10]);</pre></blockquote>

<p>This code creates three Buttons, all left aligned, with the third
Button 10 pixels from the bottom of the one above it. We are lining
up both the second and third Button to <tt class="literal">$b1</tt>. See
what this looks like in <a href="ch02_04.htm">Figure 2-51</a>.
</p>

<a name="mastperltk-CHP-2-FIG-51" /><div class="figure"><img src="figs/mptk.0251.gif" alt="Figure 2-51" width="113" height="109" /></div><h4 class="objtitle">Figure 2-51. Using same-side and opposite-side attachments together</h4>

<p>What if we want to stretch all three widgets to the same length? With
<tt class="literal">pack</tt> we'd just use <tt class="literal">-fill</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">'y'</tt> inside the container.
With <tt class="literal">form</tt>, we add <tt class="literal">-right</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">'%100'</tt> to the options of
each <tt class="literal">form</tt> call. This will stretch each widget all
the way to the right edge of the container, as shown in <a href="ch02_04.htm">Figure 2-52</a>. 
</p>

<a name="mastperltk-CHP-2-FIG-52" /><div class="figure"><img src="figs/mptk.0252.gif" alt="Figure 2-52" width="185" height="121" /></div><h4 class="objtitle">Figure 2-52. Stretching widgets to the same point in the container</h4>

<p>Using <tt class="literal">form</tt> this way has one disadvantage: if you
wanted to put something to the right of all those Buttons,
you'd be better off sticking all three widgets in a Frame and
treating them as one. A way around this is to use an attachment to
the grid of <tt class="literal">-right</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">'%80'</tt> on all three widgets, but crazy things can
happen if the window is sized smaller than you expect.
</p>

<p>Here's an example of centering a widget directly in the
container:
</p>

<blockquote><pre class="code"># Center a widget across the whole screen:
$w = -($a-&gt;reqwidth( )/2);
$h = -($a-&gt;reqheight( )/2);
print "W: $w, H: $h\n";
$a-&gt;form(-top =&gt; ['%50', $h], -left =&gt; ['%50', $w]);</pre></blockquote>

<p><a name="INDEX-374" /><a name="INDEX-375" />We use <tt class="literal">reqwidth</tt> and
<tt class="literal">reqheight</tt> to find out how large the widget should
be, then use those values as offsets to the center grid position
<tt class="literal">'%50'</tt> on both the top and left. In order to shift
the widget correctly, we make the offsets negative. It isn't
necessary to specify <tt class="literal">-right</tt> and
<tt class="literal">-bottom</tt> edges.
</p>

</div>

<a name="mastperltk-CHP-2-SECT-4.2.3" /><div class="sect3">
<h3 class="sect3">2.4.2.3. Attaching to nothing</h3>

<p>You can state that a widget is attached to nothing at all on the
specified side by using <tt class="literal">'none'</tt> as the attachment
value. Since this is the default for any side attachments that
aren't listed, it won't be necessary to use this very
often.<a name="INDEX-376" /><a name="INDEX-377" /> 
</p>

</div>
</div>
<a name="mastperltk-CHP-2-SECT-4.3" /><div class="sect2">
<h3 class="sect2">2.4.3. Springs</h3>

<p><a name="INDEX-378" />As this
book was being written, springs were not fully implemented.<a href="#FOOTNOTE-10">[10]</a> They are
supposed to act as forces on each side of the widget to adjust the
position of the widget within its container. If the widget is
attached to another widget, the result can be a widget that resizes
properly, but doesn't overlap as things move around.
</p><blockquote class="footnote">
<a name="FOOTNOTE-10" /><p> [10] It appears that top and bottom springs work, but left and right
don't. Hopefully this will be fixed soon, as springs make
<tt class="literal">form</tt> more powerful.</p> </blockquote>

<p><a name="INDEX-379" />If you
use a spring, it has a <em class="firstterm">weight</em></tt>. The weight
doesn't really matter except in relation to any other spring
weights you are using in your parent container. If each spring has a
weight of 1, they are all pushing with the same amount of force. The
same can be said if every spring has a weight of 2. If one spring has
a weight of 1, and another a weight of 2, then the second spring is
twice as powerful as the first spring.
</p>

<p>To discover what springs really do to your widgets, here's a
"Play with form" widget displaying program:
</p>

<blockquote><pre class="code">use Tk;

$mw = MainWindow-&gt;new(-title =&gt; 'Play w/form');


# Create a Frame at the bottom of the window to use 'form' in
$f = $mw-&gt;Frame(-borderwidth =&gt; 2, -relief =&gt; 'groove')
	-&gt;pack(-side =&gt; 'bottom', -expand =&gt; 1, -fill =&gt;'both');

# Display the Button in the default position to start
$button = $f-&gt;Button(-text =&gt; "Go!", -command =&gt; \&amp;reForm)-&gt;form;

# Use grid to create the Entry widgets to take our options:
$f1 = $mw-&gt;Frame-&gt;pack(-side =&gt; 'top', -fill =&gt; 'x');
$f1-&gt;Label(-text =&gt; '-top')-&gt;grid($f1-&gt;Entry(-textvariable =&gt; \$top),
	$f1-&gt;Label(-text =&gt; '-topspring'),  
	$f1-&gt;Entry(-textvariable =&gt; \$topspring), 
	-sticky =&gt; 'w', -padx =&gt; 2, -pady =&gt; 5);

$f1-&gt;Label(-text =&gt; '-bottom')-&gt;grid($f1-&gt;Entry(-textvariable =&gt; \$bottom), 
	$f1-&gt;Label(-text =&gt; '-bottomspring'), 
	$f1-&gt;Entry(-textvariable =&gt; \$bottomspring), 
	-sticky =&gt; 'w', -padx =&gt; 2, -pady =&gt; 5);

$f1-&gt;Label(-text =&gt; '-left')-&gt;grid($f1-&gt;Entry(-textvariable =&gt; \$left),
	$f1-&gt;Label(-text =&gt; '-leftspring'), 
	$f1-&gt;Entry(-textvariable =&gt; \$leftspring), 
	-sticky =&gt; 'w', -padx =&gt; 2, -pady =&gt; 5);

$f1-&gt;Label(-text =&gt; '-right')-&gt;grid($f1-&gt;Entry(-textvariable =&gt; \$right),
	$f1-&gt;Label(-text =&gt; '-rightspring'), 
	$f1-&gt;Entry(-textvariable =&gt; \$rightspring), 
	-sticky =&gt; 'w', -padx =&gt; 2, -pady =&gt; 5);

# Add this Button in case the options we put in causes the 'formed' Button 
# to go off screen somewhere.
$f1-&gt;Button(-text =&gt; "Go!", -command =&gt; \&amp;reForm)
	-&gt;grid('-', '-', '-', -pady =&gt; 5);

MainLoop;

sub reForm
{
	print "top =&gt; $top\t";
	print "topspring =&gt; $topspring\n";
	print "bottom =&gt; $bottom\t";
	print "bottomspring =&gt; $bottomspring\n";
	print "left =&gt; $left\t";
	print "leftspring =&gt; $leftspring\n";
	print "right =&gt; $right\t";
	print "rightspring =&gt; $rightspring\n";
	print "-----------------------------\n";
	
	# Remove Button from container for now
	$button-&gt;formForget;
	
	my @args = ( );

	if ($top ne '') { push (@args, ('-top', $top)); }
	if ($bottom ne '') { push (@args, ('-bottom', $bottom)); }
	if ($right ne '') { push (@args, ('-right', $right)); }
	if ($left ne '') { push (@args, ('-left', $left)); }
	if ($topspring ne '') { push (@args, ('-topspring', $topspring)); }
	if ($bottomspring ne ''){push (@args, ('-bottomspring', $bottomspring));}
	if ($rightspring ne '') { push (@args, ('-rightspring', $rightspring)); }
	if ($rightspring ne '') { push (@args, ('-rightspring', $rightspring)); }
	print "ARGS: @args\n";

	# Put Button back in container using new args
	$button-&gt;form(@args);

}</pre></blockquote>

<p>You can't enter anonymous arrays as values in this application,
but you can play with the basic way of attaching to a grid and with
the springs. Take a look at <a href="ch02_04.htm">Figure 2-53</a> to see what
the widget looks like after the options are changed.
</p>

<a name="mastperltk-CHP-2-FIG-53" /><div class="figure"><img src="figs/mptk.0253.gif" alt="Figure 2-53" width="386" height="246" /></div><h4 class="objtitle">Figure 2-53. Using the Play with form program to test options</h4>

<p>Using the top and bottom springs pushes the widget around a bit: if
you enter 1 for both <tt class="literal">-topspring</tt> and
<tt class="literal">-bottomspring</tt>, the height of the widget goes back
to its default size and becomes centered in the screen.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-4.4" /><div class="sect2">
<h3 class="sect2">2.4.4. form Methods</h3>

<p><a name="INDEX-380" />The following sections summarize
<tt class="literal">form</tt>'s methods.
</p>

<a name="mastperltk-CHP-2-SECT-4.4.1" /><div class="sect3">
<h3 class="sect3">2.4.4.1. Changing the grid size</h3>

<p><a name="INDEX-381" /><a name="INDEX-382" /><a name="INDEX-383" />You can change the grid at any time by
calling <tt class="literal">formGrid</tt> with new x and y sizes. You can
also determine the current size of the grid.
</p>

<blockquote><pre class="code">$parent-&gt;formGrid(200, 200);
($x, $y) = $parent-&gt;formGrid;</pre></blockquote>

</div>

<a name="mastperltk-CHP-2-SECT-4.4.2" /><div class="sect3">
<h3 class="sect3">2.4.4.2. Removing a widget from a container</h3>

<p><a name="INDEX-384" /><a name="INDEX-385" /><a name="INDEX-386" />To
take a widget out of its container, call
<tt class="literal">$widget-&gt;formForget</tt>. Any attachments defined
for this widget no longer apply.
</p>

</div>

<a name="mastperltk-CHP-2-SECT-4.4.3" /><div class="sect3">
<h3 class="sect3">2.4.4.3. Options info for form</h3>

<p><a name="INDEX-387" /><a name="INDEX-388" />Just like all the other geometry managers,
<tt class="literal">form</tt> has an <tt class="literal">Info</tt> method to get
detailed information about how a widget was put in its parent
container:
</p>

<blockquote><pre class="code">%forminfo = $widget-&gt;formInfo;
$top_value = $widget-&gt;formInfo(-top);</pre></blockquote>

</div>

<a name="mastperltk-CHP-2-SECT-4.4.4" /><div class="sect3">
<h3 class="sect3">2.4.4.4. What's managed by form?</h3>

<p><a name="INDEX-389" /><a name="INDEX-390" /><a name="INDEX-391" />To
get a list of all the widgets managed by a parent container using
<tt class="literal">form</tt>, call <tt class="literal">formSlaves</tt> on the
parent. The order in the list is the same as how the widgets were
added into the parent.
</p>

<blockquote><pre class="code">@widgets = $parent-&gt;formSlaves;
print "Widgets in $parent are @widgets\n";</pre></blockquote>

</div>

<a name="mastperltk-CHP-2-SECT-4.4.5" /><div class="sect3">
<h3 class="sect3">2.4.4.5. Circular dependency check</h3>

<p><a name="INDEX-392" /><a name="INDEX-393" />You need to be careful that you
don't end up with a circular reference when doing widget
attachments. To check your setup, you can call
<tt class="literal">$parent-&gt;formCheck</tt>. This will return true if it
finds a circular dependency and false if it doesn't.<a name="INDEX-394" />
</p>

</div>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.3. The place Geometry Manager</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.5. Geometry Management Summary</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>