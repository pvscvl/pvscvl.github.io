<html><head><title>Creating Custom Widgets in Pure Perl/Tk (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_24.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 14. Creating Custom Widgets in Pure Perl/Tk</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#mastperltk-CHP-14-SECT-1">A Mega-Widget Quick-Start</a><br />
<a href="ch14_02.htm">The Perl/Tk Class Hierarchy</a><br />
<a href="ch14_03.htm">Mega-Widget Implementation Details</a><br />
<a href="ch14_04.htm">Composite Mega-Widgets</a><br />
<a href="ch14_05.htm">Derived Mega-Widgets</a><br />
<a href="ch14_06.htm">Packaging a Mega-Widget for Public Distribution</a><br /></p></div>

<p>In this chapter, we become implementers and learn how to build
specialized <em class="emphasis">mega-widgets</em> using Perl, the
existing Tk widget set, and object-oriented (OO) techniques. We use
the term mega-widget because the net result is usually a bigger,
better, faster widget. There are two basic types of mega-widgets we
are going to cover: <em class="emphasis">composite</em> and
<em class="emphasis">derived</em>. They are very similar with only subtle
differences between them, and for this reason, we refer to them
collectively as mega-widgets.
</p>

<p><a name="INDEX-2166" /></a><a name="INDEX-2167" /></a>A composite widget is essentially one
widget that is composed of several other widgets contained in a Frame
or Toplevel, and maybe some methods, bindings, and configuration
options that perform specific functions. The widgets comprising a
composite are often called <em class="emphasis">subwidgets</em>. For
instance, a Dialog consists of two Label and several Button
subwidgets contained in a Toplevel, but it's neither Label-like
nor Button-like. It's in a class by itself, as it were.
</p>

<p><a name="INDEX-2168" /></a><a name="INDEX-2169" /></a>A derived widget is a
<em class="emphasis">subclass</em> of an existing widget, and differs from
the widget it's derived from by adding, changing, or
subtracting functionality. It might also have different methods,
bindings, and configuration options. For instance, ROText is a
version of the Text widget with altered bindings that make the widget
read-only (see <a href="ch08_01.htm">Chapter 8, "The Text, TextUndo,and ROText Widgets"</a>).
</p>

<p>But whether it is a composite or derived widget, our job as
mega-widget writers is to make our new widget behave just like any
other Tk widget, from how it's created, configured, and
managed, to how it's destroyed.
</p>
<div class="sect1"><a name="mastperltk-CHP-14-SECT-1" /></a>
<h2 class="sect1">14.1. A Mega-Widget Quick-Start</h2>

<p><a name="INDEX-2170" /></a><a name="INDEX-2171" /></a><a name="INDEX-2172" /></a>When first trying to decide if you need
to write your own mega-widget, you need to know what you want it to
do. What features should it have? Which features are absolutely
necessary, and which are extras? After creating this list, prioritize
the items according to necessity. At this point, you should have a
general idea of what types of widgets your mega-widget requires. The
next step is to take a look around at the various resources available
(CPAN,<a href="#FOOTNOTE-32">[32]</a> newsgroups, and this
book) to see if there is already a widget out there. There is no
sense in reinventing the wheel if a widget already exists. You might
find one that is close enough to do what you want. If you find what
you want, congratulations, you no longer need to keep reading this
chapter. Still curious, or didn't find what you needed? Keep
reading!
</p><blockquote class="footnote"> <a name="FOOTNOTE-32" /></a><p> [32] Visit <a href="../../../../../../www.Lehigh.EDU/sol0/ptk/modlist">http://www.Lehigh.EDU/sol0/ptk/modlist</a> for a
full list of Perl/Tk modules.</p> </blockquote>

<p><a name="INDEX-2173" /></a><a name="INDEX-2174" /></a>You won't learn object-oriented
programming here; at least, we don't intend to try to teach it,
as there are entire books devoted to the subject.<a href="#FOOTNOTE-33">[33]</a> The actual
techniques we use are pretty straightforward and are fully described
in the standard Perl documentation. For instance, this code should
make sense to you:
</p><blockquote class="footnote">
<a name="FOOTNOTE-33" /></a><p> [33] <em class="emphasis">Object Oriented Perl</em> by Damian Conway
(Manning) is an excellent read.</p> </blockquote>

<blockquote><pre class="code">package Frog;

sub new {
    my($class, %args) = @_;
    bless \%args, $class;
}

sub get {
    my($self, $attr) = @_;
    $self-&gt;{$attr};
}

package main;

my $frog = Frog-&gt;new(qw/-color blue -poisonous 1/);
print "$frog: color = ", $frog-&gt;get(-color), "\n";

Frog=HASH(0x80ccf7c): color = blue</pre></blockquote>

<p>If this code is unclear, or if terms like base class, subclass,
superclass, and <tt class="literal">@ISA</tt> are unfamiliar to you, then
please read the Perl documents <em class="filename">perlsub</em>,
<em class="filename">perlmod</em>, <em class="filename">perlmodlib</em>,
<em class="filename">perlref</em>, <em class="filename">perltoot</em>,
<em class="filename">perlobj</em>, and <em class="filename">perlbot</em> before
continuing.
</p>

<p><a name="INDEX-2175" /></a>The
class package Frog has a constructor (sometimes called a class
method) named <tt class="literal">new</tt> that returns a reference to an
anonymous hash, blessed into <tt class="literal">$class</tt>, which in this
case is Frog. It also has an object method, <tt class="literal">get</tt>,
which returns the value of any attribute of a Frog object. These
object attributes are also known as <em class="emphasis">instance
variables</em> and are stored in the object hash. All in all,
this is pretty much standard OO Perl. Perl/Tk widgets are also
modeled using an anonymous hash, exactly like the Frog object we just
encountered.
</p>

<p>You can create an entire mega-widget in fewer lines of code than
class Frog's constructor. Of course, this is only because
Perl/Tk does a lot of behind-the-scenes work.
</p>

<blockquote><pre class="code">package Tk::Nil;             # 1
use base qw/Tk::Toplevel/;   # 2
Construct Tk::Widget 'Nil';  # 3
package main;
use Tk;
use strict;

my $mw = MainWindow-&gt;new(-title =&gt; 'Nil MW');
my $nil = $mw-&gt;Nil(-title =&gt; 'Nil object');
$nil-&gt;configure(-background  =&gt; '#d9d9d9');
print '-background = ', $nil-&gt;cget(-background), "\n";
MainLoop;</pre></blockquote>

<p>Running this program creates a Nil widget and produces this output:</p>

<blockquote><pre class="code">-background = #d9d9d9</pre></blockquote>

<p>As <a href="ch14_01.htm">Figure 14-1</a> shows, three lines of code define a
Toplevel-based Nil widget class,<a href="#FOOTNOTE-34">[34]</a> including a constructor that can handle
widget options and methods such as <tt class="literal">configure</tt> and
<tt class="literal">cget</tt>. In short, Perl/Tk does everything for you
except give the widget an appearance and behavior. But it tries to,
even in this minimalist case. You see, as a Nil widget is created,
Perl/Tk calls out to well-known methods (i.e., tries to invoke
methods in class <tt class="literal">Nil</tt>) that we widget writers can
provide. These "gateways" allow us to create bindings and
arrange subwidgets within the Toplevel, thus breathing life into our
mega-widget. Any method we fail to provide, or override, in our new
widget class, Perl finds in one of our base classes by searching the
<tt class="literal">@ISA</tt> array in the standard manner.
</p><blockquote class="footnote"> <a name="FOOTNOTE-34" /></a><p> [34] This new widget,
unfortunately, doesn't do anything useful, hence its
name.</p> </blockquote>

<a name="mastperltk-CHP-14-FIG-1" /></a><div class="figure"><img src="figs/mptk.1401.gif" alt="Figure 14-1" width="285" height="231" /></div><h4 class="objtitle">Figure 14-1.  Nil, a (dis)functional, Toplevel-based mega-widget</h4>

<p><a name="INDEX-2176" /></a><a name="INDEX-2177" /></a>There are two primary gateway methods of
concern to us, <tt class="literal">ClassInit</tt> and
<tt class="literal">Populate</tt>. <tt class="literal">ClassInit</tt> is called
once to initialize the class, where it typically creates class
bindings. <tt class="literal">Populate</tt> is called for every new widget
instance, where, usually, it "populates" the mega-widget
with component subwidgets and defines configuration specifications.
The essence of making mega-widgets is learning how to effectively
write these two subroutines. With that in mind, let's make a
real mega-widget.
</p>

<p>Risking oversimplification and technical inaccuracy, the remainder of
this section gives a brief, to-the-point global view of mega-widget
use and construction. (Don't worry. Further sections remedy any
deficiencies.) The candidate mega-widget is a simple composite
consisting of two subwidgets enclosed in a container Frame, so
it's a Frame-based mega-widget. The Frame serves two functions.
First, it bundles all the individual subwidgets that comprise the
composite into a tidy package, which is then easily manipulated by a
geometry manager. Second, through the object-oriented mechanism of
inheritance, the Frame provides the widget's constructor and
routines that handle option specification and configuration, method
delegation, and other miscellaneous tasks.
</p>

<p>From a user's perspective, using a mega-widget should be
identical to using a coreTk widget. Given that, these statements
create and configure the labeled Optionmenu widget shown in <a href="ch14_01.htm">Figure 14-2</a>. The Label
is aligned across the top and the Optionmenu is activated, displaying
its list of choices.
</p>

<blockquote><pre class="code">my $mw = MainWindow-&gt;new;

use Tk::LabOptionmenu;
my $lo = $mw-&gt;LabOptionmenu(-label =&gt; 'Ranking', -options =&gt; [1..2]);
$lo-&gt;pack;
$lo-&gt;configure(-background =&gt; '#d9d9d9');
$lo-&gt;addOptions(3 .. 5);</pre></blockquote>

<p><a name="INDEX-2178" /></a><a name="INDEX-2179" /></a>This mega-widget has
<tt class="literal">-label</tt> and <tt class="literal">-options</tt> arguments
that apply to the Label and Optionmenu subwidgets, respectively.
That's nice. We don't have to worry about Tk trying to
apply <tt class="literal">-label</tt> to the Optionmenu or
<tt class="literal">-options</tt> to the Label. On the other hand, applying
a background color to <em class="emphasis">both</em> subwidgets is equally
logical, and that's just what Tk does. These actions are
described by a list of configuration specifications. Similarly,
method calls such as <tt class="literal">addOptions</tt> are directed, or
<em class="emphasis">delegated</em>, to one or more widgets. All of this
heavy magic is initiated when Perl processes the
<tt class="literal">use</tt> <tt class="literal">Tk::LabOptionmenu</tt>
statement, which reads the file <em class="filename">LabOptionmenu.pm</em>
from somewhere in the <em class="filename">@INC</em> directory list.
</p>

<a name="mastperltk-CHP-14-FIG-2" /></a><div class="figure"><img src="figs/mptk.1402.gif" alt="Figure 14-2" width="42" height="127" /></div><h4 class="objtitle">Figure 14-2.  LabOptionmenu, a Frame-based mega-widget</h4>

<p>This listing of <em class="filename">LabOptionmenu.pm</em> (including its
POD documentation, which we'll examine shortly) serves as a
good mega-widget template.
</p>

<blockquote><pre class="code"> 1  $Tk::LabOptionmenu::VERSION = '1.0';
 2
 3  package Tk::LabOptionmenu;
 4
 5  use Tk::widgets qw/Optionmenu/;
 6  use base qw/Tk::Frame/;
 7  use strict;
 8
 9  Construct Tk::Widget 'LabOptionmenu';
10
11  sub ClassInit {
12
13      my($class, $mw) = @_;
14      $class-&gt;SUPER::ClassInit($mw);
15
16  } # end ClassInit
17
18  sub Populate {
19
20      my($self, $args) = @_;
21
22      $self-&gt;SUPER::Populate($args);
23      my $o = $self-&gt;Optionmenu-&gt;pack;
24      $self-&gt;Advertise  ( 'optionmenu' =&gt;  $o  );
25      $self-&gt;ConfigSpecs( 'DEFAULT'    =&gt; [$o] );
26      $self-&gt;Delegates  ( 'DEFAULT'    =&gt;  $o  );
27
28  } # end Populate
29
30  1;</pre></blockquote>

<p><a name="INDEX-2180" /></a><a name="INDEX-2181" /></a><a name="INDEX-2182" /></a><a name="INDEX-2183" /></a>It's always good to maintain
version information with a module, and it's required if
it's distributed via the Comprehensive Perl Archive Network
(CPAN) or ActiveState's Perl Package Manager (PPM) archive. In
either case, this version information is used by MakeMaker, the
utility that reads <em class="filename">Makefile.PL</em> files and
installs Perl modules. There are several ways to define this version
information; line 1 shows a possibility. Typically, some other
program parses the module file and extracts this version information.
<a href="ch14_06.htm">Section 14.6, "Packaging a Mega-Widget for Public Distribution"</a>,
explores this and other distribution details.
</p>

<p>Lines 3 through 7 are pretty much boilerplate code and are found in
all well-behaved mega-widget modules.
</p>

<p>Line 3 defines the widget's class name, which must be unique
among all the Tk classes (unless you really know what you are doing).
Note that hierarchical class names (Tk::A::B) are also possible but
that the internal Tk class is always the leaf part (B). The internal
Tk class is used as the identifier for option database lookups, as
described in <a href="ch16_01.htm">Chapter 16, "User Customization"</a>.
</p>

<p>Line 5 imports widget definitions required by the new class, saving
us from having to <tt class="literal">use</tt> or
<tt class="literal">require</tt> them individually. (There is a reason we
don't bother including Label, as we'll see soon.)
</p>

<p>Line 6 initializes the class <tt class="literal">@ISA</tt> array by
declaring the object-oriented base class or classes that the
mega-widget is based upon. For composites, the choices are Tk::Frame
or Tk::Toplevel. For derived widgets, the list includes Tk::Derived
and the widget class being derived from. (Again, we'll clarify
all this shortly.) You might see some modules declare their base
classes by assigning directly to the <tt class="literal">@ISA</tt> array,
but this form is deprecated: <tt class="literal">@ISA =
qw/Tk::Frame/;</tt>.
</p>

<p>Line 7: just do it.</p>

<p>Line 9 is the magic line. Briefly, it adds a
<tt class="literal">&amp;LabOptionmenu</tt> symbol table entry that calls a
generic <tt class="literal">new</tt> constructor located in one of the base
classes. When a LabOptionmenu widget is created, the generic
<tt class="literal">new</tt> constructor creates the initial Frame widget,
blesses it into the proper class, and then invokes the class'
well-known subroutine, <tt class="literal">Populate</tt>, to create and
arrange the Frame's subwidgets and to define configuration
specifications and method delegation information. If this is the
first LabOptionmenu instance for a MainWindow,
<tt class="literal">ClassInit</tt> is called before
<tt class="literal">Populate</tt>.
</p>

<p>Lines 11 through 16 define subroutine
<tt class="literal">Tk::LabOptionmenu::ClassInit</tt>. This subroutine is
called once for each MainWindow and is commonly used to create class
bindings. <tt class="literal">ClassInit</tt> must return a true result.
This example depends on <tt class="literal">SUPER::ClassInit</tt> to do
that for us.
</p>

<p>Line 14 is obligatory. The statement invokes a
<tt class="literal">ClassInit</tt> method in one of the mega-widget's
base classes that may (or may not) perform a function on the behalf
of our class. For a composite widget based on a Frame or Toplevel,
this call currently does nothing, but that may change. However, a
derived widget's superclass almost always has required
initialization, so don't forget this statement.
</p>

<p>Lines 18 through 28 define subroutine
<tt class="literal">Tk::LabOptionmenu::Populate</tt>. This subroutine
creates and arranges the composite's remaining widgets,
advertises important subwidgets, defines configuration options, and
specifies how these options (as well as widget methods) are applied
to the various subwidgets. Generally, <tt class="literal">Populate</tt>
should not configure any of these internal widgets, because Perl/Tk
does that later. This is also the place to add subwidget bindings
and/or modify the <tt class="literal">bindtags</tt> list.
<tt class="literal">Populate</tt> is not expected to return a result.
</p>

<p>Line 20 defines <tt class="literal">Populate</tt>'s arguments.
<tt class="literal">$self</tt> is not a simple Tk::Frame object, but a
full-fledged Tk::LabOptionmenu object. <tt class="literal">$args</tt> is a
reference to the keyword/value argument hash (in our sample code
<tt class="literal">-label =&gt; 'Ranking', -options =&gt;</tt>
<tt class="literal">[1..5]</tt>). If you need to make changes to the
argument list, here's your chance.
</p>

<p>Line 22 is obligatory. The statement invokes a
<tt class="literal">Populate</tt> method in one of the mega-widget's
base classes that may (or may not) perform a function on the behalf
of our class. For a Frame-based composite such as LabOptionmenu this
call invokes <tt class="literal">Tk::Frame::Populate</tt>, which generates
additional configuration specifications that transparently handle
processing of the Label widget. Omitting this statement would break
the mega-widget, because the built-in Label support provided by the
Frame would be disabled. The LabEntry widget takes advantage of this
feature too. For an exhaustive list of these Label options, see <a href="ch14_03.htm">Section 14.3.9, "Mega-Widget Instance Variables"</a>.
</p>

<p>Line 23 creates the Optionmenu subwidget and uses the packer to
manage its geometry. The Label widget is created and packed
automatically by the base class Tk::Frame. (The implication here is
that Tk uses <tt class="literal">pack</tt> to manage the Label's
geometry, hence you must be wary if using <tt class="literal">grid</tt> in
the same program, it's possible that the different geometry
managers may enter a race condition as they compete with each other,
causing the application to hang.)
</p>

<p>Line 24 advertises the Optionmenu widget <tt class="literal">$o</tt> with
the name <tt class="literal">optionmenu</tt>. In object-oriented
programming, there's a de facto contract that forbids us from
meddling with the internals of an object. By advertising a subwidget,
it becomes part of the widget's public interface, and we can do
with it as we please. Given an advertised name, the
<tt class="literal">Subwidget</tt> method returns the corresponding widget
reference.
</p>

<p>Line 25 defines the mega-widget's configuration specifications.
For this simple widget with a single primary subwidget, all
<tt class="literal">configure</tt> and <tt class="literal">cget</tt> requests are
directed to it. <tt class="literal">ConfigSpecs</tt> is fully described in <a href="ch14_03.htm">Section 14.3.6, "Subroutine ConfigSpecs"</a>.
</p>

<p>Line 26 defines how methods targeted for the mega-widget are
redirected to subwidgets. Again, the Optionmenu is the primary
subwidget, so all mega-widget methods default to it.
<tt class="literal">Delegates</tt> is fully described in <a href="ch14_03.htm">Section 14.3.7, "Subroutine Delegates"</a>.
</p>

<p>Line 30 returns a true value and is the standard Perl way of
indicating that a module "loaded" successfully.
</p>

<p><a name="INDEX-2184" /></a>Finally, this POD defines the
mega-widget's public interface. It has many of the same
headings as the POD for the phone program from <a href="ch11_01.htm">Chapter 11, "
Frame, MainWindow,and Toplevel Widgets"</a>. Additionally, it itemizes the
mega-widget's new arguments and methods, lists advertised
subwidgets, and provides an example.
</p>

<a name="INDEX-2185" /></a><blockquote><pre class="code">__END__

=head1 NAME

Tk::LabOptionmenu - An Optionmenu with a descriptive label

=head1 SYNOPSIS

S&lt;    &gt;I&lt;$lo&gt; = I&lt;$parent&gt;-E&lt;gt&gt;B&lt;LabOptionmenu&gt;(I&lt;-option&gt; =E&lt;gt&gt; I&lt;value&gt;, ... );

=head1 DESCRIPTION

This widget is a standard Optionmenu with a descriptive label that can
appear on the top, left, right or bottom of the Optionmenu.   

The following additional option/value pairs are supported:

=over 4

=item B&lt;-label&gt;

Label text to appear next to the Optionmenu.  If I&lt;-labelVariable&gt; is
also specified, I&lt;-label&gt; takes precedence.

=item B&lt;-labelPack&gt;

Where to pack the label relative to the Optionmenu.  This parameter
is a reference to a list of B&lt;pack&gt; options. WARNING: The implication 
here is that Tk uses pack( ) to manage the Label's geometry, hence you
must be wary if using grid( ) in the same program - it's possible that
the different geometry managers may enter a race condition as they
compete with each other, causing the application to hang.

=item B&lt;-labelVariable&gt;

A reference to a Perl variable containing the label string.

=item B&lt;-labelXYZZY&gt;

The label attribute B&lt;XYZZY&gt;, where B&lt;XYZZY&gt; can be any valid Label 
option except -text and -textvariable, which, obviously, are
superseded by -label and -labelVariable.

=back

=head1 METHODS

None.

=head1 ADVERTISED WIDGETS

Component subwidgets can be accessed via the B&lt;Subwidget&gt; method.
Valid subwidget names are listed below.

=over 4

=item Name:  label, Class: Label

Widget reference of Label widget.

=item Name:  optionmenu, Class: Optionmenu

  Widget reference of Optionmenu widget.

=back

=head1 EXAMPLE

I&lt;$lo&gt; = I&lt;$mw&gt;-E&lt;gt&gt;B&lt;LabOptionmenu&gt;(-label =E&lt;gt&gt; 'Ranking:',
-options =E&lt;gt&gt; [1 .. 5], -labelPack =E&lt;gt&gt; [-side =&gt; 'left']);

I&lt;$lo&gt;-E&lt;gt&gt;configure(-labelFont =E&lt;gt&gt; [qw/Times 18 italic/]);

=head1 AUTHOR

JPolooka@xy.zz.y

Copyright (C) 2001, Joe Polooka. All rights reserved.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 KEYWORDS

Optionmenu

=cut</pre></blockquote>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch13_24.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">13.24. Really Miscellaneous Methods</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">14.2. The Perl/Tk Class Hierarchy</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>