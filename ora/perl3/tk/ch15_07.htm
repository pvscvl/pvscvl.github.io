<html><head><title>Splash Screens (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch15_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">15.7. Splash Screens</h2>

<p><a name="INDEX-2498" /><a name="INDEX-2499" />Splash
screens are those windows that pop up for the amusement of the user
while a long-loading program gets underway. Some folks display their
splash screens during program initialization sequentially, so that if
a splash screen stays on the display for three seconds, the program
takes three seconds longer to load. We, however, prefer that our
splash screens run in parallel with program initialization. One
approach might be:
</p>

<ol><li>
<p>Create a Toplevel splash screen.</p>
</li><li>
<p>Queue a timer event to set a variable after X seconds.</p>
</li><li>
<p>Initialize program.</p>
</li><li>
<p>Wait for splash timer to expire with <tt class="literal">waitVariable</tt>.</p>
</li><li>
<p>Destroy splash screen and enter <tt class="literal">MainLoop</tt>.</p>
</li></ol>
<p>There's a problem with this scheme: if initialization takes too
long and the splash timer expires, the
<tt class="literal">waitVariable</tt> will hang. This can also happen if
the splash delay is set too small. We <em class="emphasis">could</em> use
<tt class="literal">waitVariableX</tt> with a timeout, resulting in code
that might look like this:
</p>

<blockquote><pre class="code">    my $mw = MainWindow-&gt;new;
    $mw-&gt;withdraw;

    my ($splash_scr, $splash_tid, $splash_var) = splash 3000;

    # - program initialization.

    my $why = $mw-&gt;&amp;waitVariableX(3000, $splash_var);
    $splash_scr-&gt;afterCancel($splash_tid);
    $splash_scr-&gt;destroy;

    $mw-&gt;deiconify;</pre></blockquote>

<p>But this just doesn't feel right. First, having the splash
screen remain on the screen for X seconds one time, and X+3 seconds
at others, is an unsatisfactory hack. Second, too much of the work is
left to the application. We need to encapsulate things in a
mega-widget. Besides, there are some subtle details, as we are about
to see.
</p>

<a name="mastperltk-CHP-15-SECT-7.1" /><div class="sect2">
<h3 class="sect2">15.7.1. Tk::Splashscreen</h3>

<p>We've just written <i class="command">tkhp16c</i>, our version of
the venerable RPN programming calculator, shown in <a href="ch15_07.htm">Figure 15-6</a>. As Tk programs go, this application loads
slowly, because it's composed of so many widgets. So
we'll incorporate a splash screen.
</p>

<a name="mastperltk-CHP-15-FIG-6" /><div class="figure"><img src="figs/mptk.1506.gif" alt="Figure 15-6" width="411" height="300" /></div><h4 class="objtitle">Figure 15-6. An HP-16C RPN calculator</h4>

<p><a name="INDEX-2500" />Tk::Splashscreen is a Toplevel
mega-widget providing all the display, destroy, and timing events.
All we do is create the Splashscreen widget, populate it, then invoke
<tt class="literal">Splash</tt> to display it and
<tt class="literal">Destroy</tt> to tear it down. The plan for our splash
screen is that it contain a progress bar; we'll be sure to
sprinkle <tt class="literal">update</tt> calls throughout our
initialization code so that any Splashscreen events are handled.
</p>

<p>Here's the mega-widget preamble. If it's unfamiliar,
please read <a href="ch14_01.htm">Chapter 14, "Creating Custom Widgets in Pure Perl/Tk"</a> for complete details. Note
that for this mega-widget, we import the
<tt class="literal">DoOneEvent</tt> bit patterns.
</p>

<blockquote><pre class="code">$Tk::Splashscreen::VERSION = '1.0';

package Tk::Splashscreen;

use Tk qw/Ev/;
use Tk qw/:eventtypes/;
use Tk::waitVariableX;
use Tk::widgets qw/Toplevel/;
use base qw/Tk::Toplevel/;

Construct Tk::Widget 'Splashscreen';</pre></blockquote>

<p>Subroutine <tt class="literal">Populate</tt> immediately removes the empty
Toplevel from the display so <i class="command">tkhp16c</i> can fill it
at its leisure. Then <tt class="literal">overrideredirect</tt> removes the
window manager decorations. Of course, with the decorations gone, the
Toplevel can't be moved around by normal means, so we'll
have to create our own movement bindings. The widget uses mouse
button 3 for this purpose and keeps state information in the instance
variables <tt class="literal">$self-&gt;{ofx}</tt> and
<tt class="literal">$self-&gt;{ofy}</tt>, the x and y pixel offsets from
the Splashscreen's top-left corner to the cursor at the time
the button is pressed.
</p>

<p>The two button bindings use the special format where we explicitly
state the object to use, <tt class="literal">$self</tt> rather than letting
Tk supply us one indirectly. This forces Tk to look up the methods
<tt class="literal">b3prs</tt> and <tt class="literal">b3rls</tt> in the package
Tk::Splashscreen, which is where they are located. Otherwise, if for
instance the Splashscreen contained a Label and we clicked on it, Tk
would try to invoke <tt class="literal">Tk::Label::b3prs</tt>, and that
would fail. We also use the <tt class="literal">Ev</tt> subroutine to pass
event data to the callback.
</p>

<p>Lastly, instance variable <tt class="literal">$self-&gt;{tm0}</tt> stores
the time the Splashscreen is first shown.
</p>

<blockquote><pre class="code">sub Populate {
    my ($self, $args) = @_;

    $self-&gt;withdraw;
    $self-&gt;overrideredirect(1);

    $self-&gt;SUPER::Populate($args);

    $self-&gt;{ofx} = 0;           # X offset from top-left corner to cursor
    $self-&gt;{ofy} = 0;           # Y offset from top-left corner to cursor
    $self-&gt;{tm0} = 0;           # microseconds time widget was Shown

    $self-&gt;ConfigSpecs(
        -milliseconds =&gt; [qw/PASSIVE milliseconds Milliseconds 0/],
    );

    $self-&gt;bind('&lt;ButtonPress-3&gt;'   =&gt; [$self =&gt; 'b3prs', Ev('x'), Ev('y')]);
    $self-&gt;bind('&lt;ButtonRelease-3&gt;' =&gt; [$self =&gt; 'b3rls', Ev('X'), Ev('Y')]);

} # end Populate</pre></blockquote>

<p>At this point, we have an empty Splashscreen widget. Before we show
it, let's put something inside. We'll keep it simple,
with a MacProgressBar and a picture of an actual HP-16C calculator,
as shown in <a href="ch15_07.htm">Figure 15-7</a>.
</p>

<p>A MacProgressBar widget has a 3D look, exactly like the classic
Macintosh progress bar. We won't examine the code here, but
it's listed in <a href="appc_01.htm">Appendix C, "Complete Program Listings"</a>. It's a
versatile widget. Here's a pseudo-volume meter:
</p>

<blockquote><pre class="code">$pb = $mw-&gt;MacProgressBar(-width =&gt; 150, -bg =&gt; 'cyan')-&gt;pack;

while (1) {
    my $w = rand(100);
    $pb-&gt;set($w);
    $mw-&gt;update;
    $mw-&gt;after(250);
} </pre></blockquote>

<a name="mastperltk-CHP-15-FIG-7" /><div class="figure"><img src="figs/mptk.1507.gif" alt="Figure 15-7" width="257" height="153" /></div><h4 class="objtitle">Figure 15-7. tkhp16c initialization is 90% complete</h4>

<p>Anyway, we keep the MacProgressBar widget reference in the global
variable <tt class="literal">$MAC_PB</tt>, so we can access it throughout
the various initialization subroutines. For our Splashscreen,
we've use the <tt class="literal">-milliseconds</tt> option to
specify that the Splashscreen remain posted for a minimum of three
seconds.
</p>

<blockquote><pre class="code">$splash = $mw-&gt;Splashscreen(-milliseconds =&gt; 3000);
$splash-&gt;Label(-text =&gt; 'Building your HP 16C ...', -bg =&gt; $BLUE)-&gt;
    pack(qw/-fill both -expand 1/);
$MAC_PB = $splash-&gt;MacProgressBar(-width =&gt; 300);
$MAC_PB-&gt;pack(qw/-fill both -expand 1/);
$splash-&gt;Label(-image =&gt; $mw-&gt;Photo(-file =&gt; 'hp16c-splash.gif'))-&gt;pack;</pre></blockquote>

<p>Here's how we use the Splashscreen. First,
<tt class="literal">withdraw</tt> the MainWindow and show the Splashscreen.
Now perform program initialization. Note how we use the
<tt class="literal">set</tt> method to update the MacProgressBar to 100%
before destroying the Splashscreen. With the Splashscreen gone,
redisplay the MainWindow containing the completed calculator.
</p>

<blockquote><pre class="code">my $mw = MainWindow-&gt;new;
$mw-&gt;withdraw;
$splash-&gt;Splash;                     # show Splashscreen

build_help_window;
build_calculator;

$MAC_PB-&gt;set($MAC_PB_P = 100);
$splash-&gt;Destroy;                    # tear down Splashscreen

$mw-&gt;deiconify;                      # show calculator</pre></blockquote>

<p><a name="INDEX-2501" />The
<tt class="literal">Splash</tt> method serves to record the second of the
epoch that the Splashscreen is first displayed. This datum is used to
ensure that the Splashscreen remains visible for the specified
minimum amount of time. Then <tt class="literal">Splash</tt> maps the
widget in the center of the screen.
</p>

<blockquote><pre class="code">sub Splash {

    my ($self, $millis) = @_;

    $millis = $self-&gt;cget(-milliseconds) unless defined $millis;
    $self-&gt;{tm0} = Tk::timeofday;
    $self-&gt;configure(-milliseconds =&gt; $millis);
    $self-&gt;Popup;

} # end_splash</pre></blockquote>

<p><tt class="literal">Destroy</tt>'s first duty is to ensure that the
Splashcreen remains visible for its allotted minimum time. It does
this with a simple computation, which, if positive, gives the time to
delay. If the result is negative, we set it to zero so there is no
wait.
</p>

<p>We then create a generic completion callback that does one final
<tt class="literal">update</tt> call (to ensure all pending events are
completed) and destroys the Splashscreen.
</p>

<p>Now, if the program initialization has taken longer than the minimum
Splashscreen time, we call the completion callback and return.
Otherwise, we process all timer events, wait the requisite amount of
time, and destroy the Splashscreen.
</p>

<blockquote><pre class="code">sub Destroy {

    my ($self, $millis) = @_;

    $millis = $self-&gt;cget(-milliseconds) unless defined $millis;
    my $t = Tk::timeofday;
    $millis = $millis - ( ($t - $self-&gt;{tm0}) * 1000 );
    $millis = 0 if $millis &lt; 0;

    my $destroy_splashscreen = sub {
			$self-&gt;update;
			$self-&gt;after(100);			# ensure 100% of PB seen
			$self-&gt;destroy;
    };

    do { &amp;$destroy_splashscreen; return } if $millis == 0;

    while ( $self-&gt;DoOneEvent (DONT_WAIT | TIMER_EVENTS)) {}

    $self-&gt;waitVariableX( [$millis, $destroy_splashscreen] );

} # end Destroy</pre></blockquote>

<p>These are the private methods responsible for moving a Splashscreen
widget. On a button press, we record the cursor's x and y
coordinates relative to the Splashscreen's top-left corner.
When the button is released, we compute new x and y coordinates
relative to the display's top-left corner and use
<tt class="literal">geometry</tt> to move the Toplevel.
</p>

<blockquote><pre class="code">sub b3prs {
    my ($self, $x, $y) = @_;
    $self-&gt;{ofx} = $x;
    $self-&gt;{ofy} = $y;
} # end b3prs

sub b3rls {
    my($self, $X, $Y) = @_;
    $X -= $self-&gt;{ofx};
    $Y -= $self-&gt;{ofy};
    $self-&gt;geometry("+${X}+${Y}");
} # end b3rls</pre></blockquote>

<p><a name="INDEX-2502" />To complete our discussion on
Tk::Splashscreen, here is a <tt class="literal">bindDump</tt> output:
</p>

<a name="INDEX-2503" /><a name="INDEX-2504" /><blockquote><pre class="code">## Binding information for '.splashscreen', Tk::Splashscreen=HASH(0x83a6874) ##

1. Binding tag 'Tk::Splashscreen' has no bindings.

2. Binding tag '.splashscreen' has these bindings:
             &lt;ButtonRelease-3&gt; : Tk::Callback=ARRAY(0x83aaaf8)           
                                   Tk::Splashscreen=HASH(0x83a6874)
                                     'b3rls'
                                     Tk::Ev=SCALAR(0x83aab1c)               : 'X'
                                     Tk::Ev=SCALAR(0x83aab58)               : 'Y'
                    &lt;Button-3&gt; : Tk::Callback=ARRAY(0x83aaae0)           
                                   Tk::Splashscreen=HASH(0x83a6874)
                                     'b3prs'
                                     Tk::Ev=SCALAR(0x839a348)               : 'x'
                                     Tk::Ev=SCALAR(0x83aab04)               : 'y'

3. Binding tag 'all' has these bindings:
                     &lt;Key-F10&gt; : Tk::Callback=SCALAR(0x839a3fc)          
                                   'FirstMenu'
                     &lt;Alt-Key&gt; : Tk::Callback=ARRAY(0x839a390)           
                                   'TraverseToMenu'
                                     Tk::Ev=SCALAR(0x816e198)               : 'K'
                   &lt;&lt;LeftTab&gt;&gt; : Tk::Callback=SCALAR(0x839a360)          
                                   'focusPrev'
                     &lt;Key-Tab&gt; : Tk::Callback=SCALAR(0x839a264)          
                                   'focusNext'</pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch15_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">15.6. Nonblocking Wait Activities</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">15.8. Synthesizing Virtual Events</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>