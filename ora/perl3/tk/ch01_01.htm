<html><head><title>Hello, Perl/Tk (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 1. Hello, Perl/Tk</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#mastperltk-CHP-1-SECT-1">Perl/Tk Concepts</a><br />
<a href="ch01_02.htm">Some Perl/Tk History</a><br />
<a href="ch01_03.htm">Getting Started with Perl/Tk</a><br />
<a href="ch01_04.htm">Hello World Example</a><br />
<a href="ch01_05.htm">Unsolicited Advice</a><br />
<a href="ch01_06.htm">Debugging and PrototypingPerl/Tk Programs</a><br /></p></div>

<p><a name="INDEX-1" /></a>Tk is a
module that gives you the ability to create graphical interfaces with
Perl. Most Perl programs are written with command-line interfaces,
which can be cumbersome and intimidating to end users. Perl/Tk lets
you communicate with buttons, menus, dialog boxes, scrolled text
areas, and so on&#x2014;all the features you need to develop simple or
sophisticated GUI applications.
</p>

<p>Why use a graphical interface? In the course of your programming
experience, you've probably come across situations in which a
text-based interface was insufficient for your needs, if not
downright awkward. Certain applications can run with no input, but
others, such as installation scripts, require the user to feed
information to them constantly. They ask such questions as: Do you
want to install this file? Can I overwrite this DLL? Do you want to
create this directory? Do you want the help files?
</p>

<p>A graphical user interface (GUI) adds a little flair and
professionalism to an application. Here are some examples of good
uses for a GUI:
</p>

<ul><li>
<p>A mini web client that connects to a dictionary server</p>
</li><li>
<p>An application that displays a map in a scrollable window</p>
</li><li>
<p>A program that interfaces with a database and displays query results
in several widgets, with labels to describe the data
</p>
</li><li>
<p>A mail reader that interfaces with your inbox and can also send out
mail messages
</p>
</li></ul>
<p>A GUI can also be helpful when your boss just says "make it
easy to use!," which usually means either adding a wrapper
around a script or an interface that makes it easy for users to
understand the decisions they have to make.
</p>

<p>But don't take this to mean that you should start adding GUIs
to all your Perl scripts. There are times when it would be overkill
to add a GUI to a script. If all you are doing is reading one file,
munging a bit with no user input, and generating another file, a GUI
would be silly and unnecessary. GUIs work best when you require a lot
of decisions and input from the user, such as in the installation
scenario mentioned earlier.
</p>
<div class="sect1"><a name="mastperltk-CHP-1-SECT-1" /></a>
<h2 class="sect1">1.1. Perl/Tk Concepts</h2>

<p><a name="INDEX-2" /></a><a name="INDEX-3" /></a><a name="INDEX-4" /></a><a name="INDEX-5" /></a>Perl/Tk programs are written in an
object-oriented (OO) style, but you don't need previous Perl
object-oriented programming experience to code in Perl/Tk.
You'll pick it up easily enough after seeing the first few
examples. In a nutshell, Perl/Tk <em class="emphasis">widgets</em> (such
as Buttons and Listboxes) are <em class="emphasis">objects</em> that have
<em class="emphasis">methods</em> we invoke to control them. Besides
widgets, Perl/Tk has <em class="emphasis">images</em>, which are also
objects, and <em class="emphasis">fonts</em>, which can be objects or
simple strings.
</p>

<p><a name="INDEX-6" /></a><a name="INDEX-7" /></a><a name="INDEX-8" /></a>A
Perl/Tk program is composed of a <em class="emphasis">hierarchy</em> of
widgets. At the top of the hierarchy is the MainWindow, the parent
widget for all other widgets in the application. The MainWindow
widget acts as a container, within which we arrange child widgets
using a <em class="emphasis">geometry manager</em>. The widget hierarchy
is important for several reasons. Among other things, it's used
by geometry managers to control the screen layout and the menu system
to arrange menu items.
</p>

<p><a name="INDEX-9" /></a><a name="INDEX-10" /></a>Each
different widget belongs to a <em class="emphasis">class</em>. A
widget's class defines its initial appearance and behavior, but
individual widgets of the same class can be customized. As an
example, you might create two Buttons that have different textual
labels but are otherwise identical. Sometimes you'll read about
<em class="emphasis">instantiating</em> a widget. This is simply OO-speak
for creating a widget (a widget <em class="emphasis">instance)</em>. The
class <em class="emphasis">constructor</em> is responsible for creating
widget instances.
</p>

<p><a name="INDEX-11" /></a><a name="INDEX-12" /></a><a name="INDEX-13" /></a>The
class also defines a widget's initial behavior by creating
<em class="emphasis">bindings</em>. A binding associates an
<em class="emphasis">event</em> such as a button press with a
<em class="emphasis">callback</em>, which is a subroutine that handles the
event. You can add additional bindings (indeed, even change and
remove them) to alter a widget's standard behavior. Callbacks
have several formats, but we mostly use simple references to Perl
subroutines.
</p>

<p>You'll learn all about these topics as you continue reading.</p>

</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch00_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">0.7. Acknowledgments</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.2. Some Perl/Tk History</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>