<html><head><title>Creating Multiple MainWindows (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch11_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">11.6. Creating Multiple MainWindows</h2>

<p>Occasionally, you may need to create multiple MainWindows in the same
application. Typically, having two MainWindows in one application
isn't always a wise idea, since bitmaps and images aren't
shared between MainWindows, and some Tk modules are unreliable when
shared. But we're going to explore it anyway, because
it's an interesting exercise. To show how it's done,
we'll start with an advanced "Hello Worlds"
program, so named because it uses two MainWindows.
</p>

<p>You might be wondering what <em class="emphasis">useful</em> programs
might exist that take advantage of more than one screen. Nonlinear
digital video editing software is a great example. A fancy
high-resolution screen displays the movie in progress, and secondary
screens contain editing controls. Or, any application that requires
lots of screen real estate can spread its windows across multiple
screens. We won't be doing any of that fancy stuff, as
you'll see.
</p>

<p>Our little program begins typically enough, importing all the
required Tk symbols, subroutines, variables, classes, widgets, and
methods, then opening the first MainWindow, <tt class="literal">$mw1</tt>,
in the normal fashion.<a href="#FOOTNOTE-22">[22]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-22" /><p> [22] It runs
<tt class="literal">strict</tt> and with warnings enabled, as do most of
the programs in this book; all yours should too, at least during
development. If you fail to heed this warning, subtle (and sometimes
overt) bugs will bite you, sooner rather than later. </p>
</blockquote>

<blockquote><pre class="code">#!/usr/local/bin/perl -w
#
# Advanced Hello World program using two MainWindows.

use Tk;
use subs qw/beep/;
use strict;

my $mw1 = MainWindow-&gt;new;</pre></blockquote>

<p>By default, MainWindow opens its window on the display pointed to by
<tt class="literal">$ENV{DISPLAY}</tt>, which in Unix is normally
:<tt class="literal">0</tt> (assuming you haven't pointed it
elsewhere). Technically, a display specification consists of three
fields:
<tt class="literal">[</tt><em class="replaceable"><tt>host</em><tt class="literal">]:</tt><em class="replaceable">server</em><tt class="literal">[.</tt><em class="replaceable">screen</tt></em><tt class="literal">]</tt>,
where <em class="replaceable"><tt>host</tt></em> is the machine name and
<em class="replaceable"><tt>server</tt></em> and
<em class="replaceable"><tt>screen</tt></em> are usually zero.
</p>

<p>The screen number is interpreted in at least two different ways. If
there are multiple physical monitors that logically act as one, they
are addressed via screen number. The screens are treated as a
contiguous area, so if you want to move a window from one monitor to
another, just grab it and drag. Alternatively, the screen number may
specify special attributes of a single monitor. For instance, the
MacX server treats screen zero as a monochrome monitor and screen one
as color.
</p>

<p>We open the second MainWindow just like the first but provide a
command-line hook to send it elsewhere. (See <a href="ch16_01.htm">Chapter 16, "User Customization"</a> for details on command-line processing.)
</p>

<blockquote><pre class="code">my $mw2 = MainWindow-&gt;new(-screen =&gt; $ARGV[0] ||= $ENV{DISPLAY});
$mw1-&gt;Button(-text =&gt; 'MainWindow 1 Bell', -command =&gt; [\&amp;beep, $mw1])-&gt;pack;
$mw1-&gt;Button(-text =&gt; 'MainWindow 2 Bell', -command =&gt; [\&amp;beep, $mw2])-&gt;pack;
$mw1-&gt;Button(qw/-text Quit -command/ =&gt; \&amp;exit)-&gt;pack;

MainLoop;

sub beep {shift-&gt;bell}</pre></blockquote>

<p>Note that the parameter for MainWindow's constructor is
<tt class="literal">-screen</tt>, not <tt class="literal">-display</tt> as you
might imagine. If nothing is supplied on the command line, then both
MainWindows appear on the same display, as shown in <a href="ch11_06.htm">Figure 11-3</a>.
</p>

<p>Now pack three Buttons in the first MainWindow and set up simple
callbacks to ring the bell on either of the MainWindows. Notice that
each callback passes its MainWindow reference to the
<tt class="literal">beep</tt> subroutine, which <tt class="literal">shift</tt>
grabs from <tt class="literal">@_</tt>. (See <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a>
for more about callbacks.) As you'd expect, pressing either of
the Bell Buttons sounds the display's audible alert.
</p>

<p>This program is more interesting when <tt class="literal">$mw2</tt> is
redirected to another display,<a href="#FOOTNOTE-23">[23]</a> where pressing
its Bell Button causes the <em class="emphasis">remote</em> machine to
beep.
</p><blockquote class="footnote"> <a name="FOOTNOTE-23" /><p> [23] Before you can use
another display, its owner must give you permission. See the section
on <tt class="literal">xauth</tt> authentication in <a href="ch20_01.htm">Chapter 20, "IPC with send"</a> for details.</p> </blockquote>

<a name="mastperltk-CHP-11-FIG-3" /><div class="figure"><img src="figs/mptk.1103.gif" alt="Figure 11-3" /></div><h4 class="objtitle">Figure 11-3. Wallace phoning Gromit</h4>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch11_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.5. Toplevel Methods</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">11.7. Putting Two MainWindows to Work</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>