<html><head><title>The BrowseEntry Widget (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch23_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">23.6. The BrowseEntry Widget</h2>

<p><a name="INDEX-3317" />BrowseEntry is a composite widget created
to be like a combo box (also known as a drop-down listbox on some
platforms) using an Entry widget, a Listbox, and a small arrow
button. The combination of these three widgets in the BrowseEntry is
very powerful.
</p>

<p>Before we list the options and methods for a BrowseEntry, let's
look at an example:
</p>

<blockquote><pre class="code">use Tk;
use Tk::ROText;
use Tk::BrowseEntry;

$mw = MainWindow-&gt;new(-title =&gt; "Text search using BrowseEntry");

# Create Browse Entry to enter search text in, and save off 
# already entered text that you've searched for.
$f = $mw-&gt;Frame(-relief =&gt; 'ridge', -borderwidth =&gt; 2)
  -&gt;pack(-fill =&gt; 'x');
# Use ROText so user can't change speech
$t = $mw-&gt;Scrolled('ROText', -scrollbars =&gt; 'osoe')
  -&gt;pack(-expand =&gt; 1, -fill =&gt; 'both');

$t-&gt;insert('end', &lt;&lt;'EOD'
"Give Me Liberty or Give Me Death"
March 23, 1775
By Patrick Henry
No man thinks more highly than I do of the patriotism, as well as abilities, of the 
very worthy gentlemen who have just addressed the house. But different
&lt;snipped...&gt; I 
know not what course others may take; but as for me, give me liberty or give me death!

EOD
);

# define a new tag to use on selected text 
# (making it look just like normal selection)
# This way the Text widget doesn't need focus to show selection
$t-&gt;tagConfigure('curSel', -background =&gt; $t-&gt;cget(-selectbackground),
                  -borderwidth =&gt; $t-&gt;cget(-selectborderwidth),
                  -foreground =&gt; $t-&gt;cget(-selectforeground));

my $search_string = "";

# If user selects item from list manually, invoke do_search
$be = $f-&gt;BrowseEntry(-variable =&gt; \$search_string,
                      -browsecmd =&gt; \&amp;do_search)-&gt;pack(-side =&gt; 'left');
# If user types in word and hits return, invoke do_search
$be-&gt;bind("&lt;Return&gt;", \&amp;do_search);
$be-&gt;focus;  # Start w/focus on BrowseEntry

# Clicking the Search button will invoke do_search
$f-&gt;Button(-text =&gt; 'Search', -command =&gt; \&amp;do_search)
    -&gt;pack(-side =&gt; 'left');
$f-&gt;Button(-text =&gt; 'Exit', -command =&gt; \&amp;do_exit)
    -&gt;pack(-side =&gt; 'right');

sub do_search {
  # Add search string to list if it's not already there
  if (! exists $searches{$search_string}) {
    $be-&gt;insert('end', $search_string);
  }
  $searches{$search_string}++;
  
  # Calculate where to search from, and what to highlight next  
  my $startindex = 'insert';
  if (defined $t-&gt;tagRanges('curSel')) { 
    $startindex = 'curSel.first + 1 chars'; 
  }    
  my $index = $t-&gt;search('-nocase', $search_string, $startindex);
  if ($index ne '') {
    $t-&gt;tagRemove('curSel', '1.0', 'end');
    my $endindex = "$index + " .  (length $search_string) . " chars";
    $t-&gt;tagAdd('curSel', $index, $endindex);
    $t-&gt;see($index);
  } else { $mw-&gt;bell; }
  
  $be-&gt;selectionRange(0, 'end'); # Select word we just typed/selected
}

# print stats on searching before we exit.
sub do_exit {
  print "Count	Word\n";
  foreach (sort keys %searches) {
    print "$searches{$_}	$_\n";
  }  
  exit;
}

MainLoop;</pre></blockquote>

<p>Take a look at <a href="ch23_06.htm">Figure 23-13</a> to see the screenshot of
this application. The BrowseEntry is in the upper-left corner. We
have shown it with the list part of the BrowseEntry down (after the
down arrow button has been pressed).
</p>

<a name="mastperltk-CHP-23-FIG-13" /><div class="figure"><img src="figs/mptk.2313.gif" alt="Figure 23-13" width="481" height="217" /></div><h4 class="objtitle">Figure 23-13.  BrowseEntry used to perform searches in a Text widget</h4>

<p>In this example, we are using the BrowseEntry with mostly default
settings. We added a callback so that when the user selected an entry
from the list manually, the search subroutine was invoked as well.
The easiest way to know what the user has selected/typed is to use
the <tt class="literal">-variable</tt> option. Most of the code for this
example has to do with figuring out where the word is in the Text
widget.
</p>

<p><a name="INDEX-3318" />The BrowseEntry supports all the options a
LabEntry does (see <a href="ch05_01.htm">Chapter 5, "Label and Entry Widgets"</a>), except
<tt class="literal">-textvariable</tt>. Additional BrowseEntry options are:
</p>

<dl>
<dt><tt class="literal">-arrowimage</tt> =&gt; <tt><em class="replaceable"><tt>image</tt></em></tt></dt>
<dd>
<a name="INDEX-3319" />This
option changes the picture on the little button.
</p>
</dd>


<dt><tt class="literal">-browsecmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-3320" />This callback will be invoked
whenever the user selects something from the list. BrowseEntry
already performs the work to display the new selection in the edit
box.
</p>
</dd>


<dt><tt class="literal">-choices</tt> =&gt; <tt><em class="replaceable"><tt>list</tt></em></tt></dt>
<dd>
<a name="INDEX-3321" />You can put
choices in the list using this option. Examples are:
<tt class="literal">-choices</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">[</tt> <tt class="literal">qw/one two</tt>
<tt class="literal">three/</tt> <tt class="literal">]</tt> or
<tt class="literal">-choices</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">@init_choices</tt>. You can also add items to the list
using the <tt class="literal">insert</tt> method
(<tt class="literal">$be-&gt;insert('end',</tt>
<tt class="literal">'newchoice');</tt> ).
</p>
</dd>


<dt><tt class="literal">-listcmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-3322" />Specify a
callback to be invoked when the arrow button is pushed. This will be
called before the list is displayed, so if you need to change the
contents of the drop-down list, this is a great place to do so.
</p>
</dd>


<dt><tt class="literal">-listwidth</tt> =&gt; <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-3323" />The width
of the popup listbox. The listbox will not automatically grow to fit
your choices if you have long strings in it.
</p>
</dd>


<dt><tt class="literal">-variable</tt> =&gt; <tt class="literal">\$scalar</tt></dt>
<dd>
<a name="INDEX-3324" />Place the user's selection
in <tt class="literal">$scalar</tt>.
</p>
</dd>


<dt><tt class="literal">-state =&gt; 'normal' | 'readonly' | 'disabled'</tt></dt>
<dd>
<a name="INDEX-3325" />A state of
<tt class="literal">'normal'</tt> that the user can type in new entries and
select entries from the list. A <tt class="literal">'readonly'</tt> state
limits the user to only selecting items from the list. A state of
<tt class="literal">'disabled'</tt> will not allow any interaction with the
user at all.
</p>
</dd>

</dl>

<p><a name="INDEX-3326" /><a name="INDEX-3327" />In addition to all the methods of
Tk::Entry, the BrowseEntry widget supports its own
<tt class="literal">insert</tt> and <tt class="literal">delete</tt> methods:
</p>

<blockquote><pre class="code">$be-&gt;insert('index', 'string');
$be-&gt;delete('index1', 'index2');</pre></blockquote>

<p>The <tt class="literal">insert</tt> method adds a new item into the list at
the specified index. The <tt class="literal">delete</tt> method removes
list entries that are between the two indexes.<a name="INDEX-3328" />
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch23_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch23_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">23.5. The Balloon Widget</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">23.7. The LabFrame Widget</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>