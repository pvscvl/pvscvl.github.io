<html><head><title>The HList Family of Widgets (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch18_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">18.4. The HList Family of Widgets</h2>

<p><a name="INDEX-2812" />The HList
widget is the basis for the two other Tix widgets we are examining:
Tree and DirTree. The HList widget is a hierarchical list that uses
the idea of paths to create the hierarchy it displays. You could also
display a flat hierarchy and use HList as a type of Listbox that can
have columns and column headings. Tree and DirTree are specialized
versions of HList. DirTree is used to display a directory structure
from a given starting point. All three of the widgets use display
items.
</p>

<p><a name="INDEX-2813" />The simplest way to use the HList widget
is similar to a Listbox or TList. Create it and then add items to it:
</p>

<blockquote><pre class="code">use Tk;
use Tk::HList;
my $mw = MainWindow-&gt;new(-title =&gt; 'HList');

my $hlist = $mw-&gt;HList-&gt;pack;
foreach (qw/one two three four five/) {
  $hlist-&gt;add($_, -text =&gt; $_);
}
MainLoop;</pre></blockquote>

<p>Looking at this example, it isn't obvious at all that you can
have display items or styles with an HList. The only
non-self-explanatory item (given that you understand Listbox) is the
first argument to the <tt class="literal">add</tt> method, which is a path.
Since this example doesn't take advantage of any of the special
hierarchical features of the HList, we're not going to bother
showing a screenshot yet.
</p>

<p>Just like a Listbox, the HList contains a list of entries. Each time
you call the <tt class="literal">add</tt> method, you create another entry
in the list. Each entry can contain one or more display items. If you
want more than one display item with each entry, use the
<tt class="literal">-columns</tt> option. Unlike TList, which automatically
manages multiple columns based on its orientation, you need to manage
columns manually for the HList. A later example will make this clear.
</p>

<p><a name="INDEX-2814" />You need to give each
entry in the HList a <em class="emphasis">path</em> (the first argument to
the <tt class="literal">add</tt> method). The path for each entry must be
unique; if it isn't, an immediate error will result.
</p>

<p><a name="INDEX-2815" /><a name="INDEX-2816" />A hierarchy results when you use the
separator character in a path. Here is a simple hierarchy of colors
using the separator character of <tt class="literal">.</tt>:
</p>

<blockquote><pre class="code">orange
orange.red
orange.yellow
green
green.blue
green.yellow
purple
purple.red
purple.blue</pre></blockquote>

<p>Changing our previous code to use these paths instead of
<tt class="literal">one</tt> <tt class="literal">two</tt>
<tt class="literal">three</tt> <tt class="literal">four</tt>
<tt class="literal">five</tt>, we get the screen shown in <a href="ch18_04.htm">Figure 18-5</a>.
</p>

<a name="mastperltk-CHP-18-FIG-5" /><div class="figure"><img src="figs/mptk.1805.gif" alt="Figure 18-5" width="113" height="170" /></div><h4 class="objtitle">Figure 18-5. Simple hierarchy in an HList</h4>

<p>The branches drawn on the left indicate which entries are below the
others. <tt class="literal">orange</tt> is the parent of both
<tt class="literal">orange.red</tt> and <tt class="literal">orange.yellow</tt>.
If we tried to use a path of <tt class="literal">orange.green.blue</tt>,
the call to <tt class="literal">add</tt> would fail, because we
haven't set up the intermediate path of
<tt class="literal">orange.green</tt> yet.
</p>

<p><a name="INDEX-2817" />Another way to think
of paths is like directory paths. If you don't have the parent
directory of <em class="filename">/home</em> created, you can't
create<em class="filename"> /home/nwalsh</em>.
</p>

<p>If you don't like the branch lines drawn between each parent
and its children, you can always turn them off using the
<tt class="literal">-drawbranch</tt> option with a value of 0. An empty
space will be left in front of each child entry instead of the drawn
branch. The amount of space or branch shown in front of each child
entry is determined by the <tt class="literal">-indent</tt> option.
</p>

<p>One advantage HList offers over Listbox is that it simplifies
assigning a callback to be invoked when one of the entries in the
list is double-clicked or when the Return key is pressed while one of
the entries is active. To utilize this functionality, use the
<tt class="literal">-command</tt> option to the HList constructor.
</p>

<a name="mastperltk-CHP-18-SECT-4.1" /><div class="sect2">
<h3 class="sect2">18.4.1. Using Indicators with HList</h3>

<p><a name="INDEX-2818" />The information displayed in <a href="ch18_01.htm">Chapter 18, "
A Tk Interface Extension Tour"</a> is static, meaning you can't manipulate
the hierarchy (opening and closing various branches) without doing a
lot of coding first. The most common feature people want in a
hierarchical list is the ability to expand and collapse subtrees by
clicking an indicator in the parent item. We don't see the
indicators in <a href="ch18_01.htm">Chapter 18, "
A Tk Interface Extension Tour"</a> because we haven't
created any for the items in the list. The indicator can be any
display item, and it is displayed to the left of the entry, on top of
the branch line. Typical indicators are plus and minus signs, or open
and closed folders.
</p>

<p><a name="INDEX-2819" />The easiest way to create and use
indicators with an HList is to use the Tree widget, because
it's already coded internally in the widget. For example, if
you don't mind thumbing ahead a few pages, you'll see
that we used the Tree widget to create the screenshot shown in <a href="ch18_04.htm">Figure 18-7</a>. The indicators in the figure are the default
Tree indicators of plus and minus images, displayed only on the
entries that have children.
</p>

<p><a name="INDEX-2820" /><a name="INDEX-2821" /><a name="INDEX-2822" /><a name="INDEX-2823" />The work involved in setting up your own
indicators with HList goes like this: create your HList with the
<tt class="literal">-indicator</tt> option set to 1 and create an
<tt class="literal">-indicatorcmd</tt> callback. For each entry in the list
you want shown with an indicator, call
<tt class="literal">indicatorCreate</tt>. Later, to change the appearance
of the indicator inside the callback assigned to
<tt class="literal">-indicatorcmd</tt>, you can use
<tt class="literal">indicatorConfigure</tt>. Here's a version of our
example that creates and uses indicators on every entry in the list:
</p>

<blockquote><pre class="code">use Tk;
use Tk::HList;

sub icmd { 
  my ($path, $state) = @_;
  print "path is '$path', state is '$state'\n";
}

my $mw = MainWindow-&gt;new;
my $list = $mw-&gt;HList(-indicator =&gt; 1, -indicatorcmd =&gt; \&amp;icmd)
              -&gt;pack(qw/-fill both -expand yes/);

foreach (qw/orange orange.red orange.yellow 
            green green.blue green.yellow 
            purple purple.red purple.blue/) {
  $list-&gt;add($_, -text =&gt; $_);
  $list-&gt;indicator('create', $_, 
                   -itemtype =&gt; 'image', 
                   -image =&gt; $mw-&gt;Getimage('plus'));
}
MainLoop;</pre></blockquote>

<p>The best example of using indicators is in the source code for the
Tree widget, included with every distribution of the Tk module.
</p>

<p>So what else might you want to use a HList widget for? You can create
a list that has columns and column headings. Let's change our
initial code example to do just that:
</p>

<blockquote><pre class="code">my $hlist = $mw-&gt;HList(-columns =&gt; 4, -header =&gt; 1)
   -&gt;pack(-expand =&gt; 1, -fill =&gt; 'both');

$hlist-&gt;headerCreate(0, -text =&gt; "Color Name");
$hlist-&gt;headerCreate(1, -text =&gt; "Red value");
$hlist-&gt;headerCreate(2, -text =&gt; "Green value");
$hlist-&gt;headerCreate(3, -text =&gt; "Blue value");

foreach (qw/orange red green blue purple/) {
  my ($r, $g, $b) = $mw-&gt;rgb($_);
  $hlist-&gt;add($_);
  $hlist-&gt;itemCreate($_, 0, -text =&gt; $_);
  $hlist-&gt;itemCreate($_, 1, -text =&gt; sprintf "%#x", $r);
  $hlist-&gt;itemCreate($_, 2, -text =&gt; sprintf "%#x", $g);
  $hlist-&gt;itemCreate($_, 3, -text =&gt; sprintf "%#x", $b);
 
}</pre></blockquote>

<p><a name="INDEX-2824" /><a name="INDEX-2825" />We specified two options when creating
the HList, <tt class="literal">-columns</tt> and
<tt class="literal">-header</tt>. We want to display four columns, and
we'd like to be able to see the headings we give them as well.
After creating the HList, we create the headings, one for each
column. The columns are numbered starting at zero. We don't
create a hierarchy in this example, so none of our path entries
contain separator characters. (You can still create a hierarchy when
using columns. The branch lines are drawn to the left of everything
at that point.) We want to display the color name in the first column
and the RGB values in the subsequent columns.
</p>

<p><a name="INDEX-2826" />We still
have to call <tt class="literal">add</tt> to create the entry with a path.
After that, we can use the <tt class="literal">itemXXX</tt> methods to put
a text display item in each column. We call
<tt class="literal">itemCreate</tt> with the path to use, the column
number, and then the text to display. As you can see in <a href="ch18_04.htm">Figure 18-6</a>, a selection selects the whole entry, not just
an individual column. There is no way to select a single column entry
in an HList.
</p>

<p>Since we're using colors, we can change the background color of
the HList when double-clicking on an entry. We'll add the
<tt class="literal">-command</tt> option and a subroutine to our code:
</p>

<blockquote><pre class="code">my $hlist = $mw-&gt;HList(-columns =&gt; 4, -header =&gt; 1,
   -command =&gt; \&amp;change_background)
   -&gt;pack(-expand =&gt; 1, -fill =&gt; 'both');
   .
   .
   .
sub change_background {
  my ($path) = @_;
  print "color = $path\n";
  $hlist-&gt;configure(-background =&gt; $path);
} </pre></blockquote>

<a name="mastperltk-CHP-18-FIG-6" /><div class="figure"><img src="figs/mptk.1806.gif" alt="Figure 18-6" width="264" height="146" /></div><h4 class="objtitle">Figure 18-6. HList using columns and headings</h4>

<p><a name="INDEX-2827" />Since we are using the color name as the
path of the entry, we don't need to do any additional work,
because we are given the pathname as the first argument to the
callback. You could also get the text entered at one of the columns
by calling <tt class="literal">itemCget</tt>:
</p>

<blockquote><pre class="code">$col0 = $hlist-&gt;itemCget($path, 0, -text);  # Text at column 0</pre></blockquote>

<p>If the text being displayed isn't what you want to retrieve,
you can always store a piece of data using the
<tt class="literal">-data</tt> option with the entry itself:
</p>

<blockquote><pre class="code">$hlist-&gt;add($_, -data =&gt; 'something else..');
  ... 
$data = $hlist-&gt;infoData($path);</pre></blockquote>

<p>So now that we've seen some HList examples and how to use a few
of the options and methods, here's a list of all the options
and methods with short descriptions. HList uses these standard
options (which behave as expected): <tt class="literal">-command</tt>,
<tt class="literal">-foreground</tt>, <tt class="literal">-height</tt>,
<tt class="literal">-selectbackground</tt>,
<tt class="literal">-selectborderwidth</tt>,
<tt class="literal">-selectforeground</tt>, <tt class="literal">-selectmode</tt>,
and <tt class="literal">-width</tt>. The following options are specific to
the HList widget:
</p>

<dl>
<dt><tt class="literal">-browsecmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-2828" />The callback is called when the
user browses through the entries in the HList. Use
<tt class="literal">-command</tt> if you want to invoke a callback when a
user double-clicks (selects) an item in the HList.
</p>
</dd>


<dt><tt class="literal">-columns</tt> =&gt; <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-2829" />The number
of columns to use in the HList. Must be set when creating the HList.
</p>
</dd>


<dt><tt class="literal">-drawbranch</tt> =&gt; <tt class="literal">1 | 0</tt></dt>
<dd>
<a name="INDEX-2830" />Determines whether HList shows the branch
lines between parents and children.
</p>
</dd>


<dt><tt class="literal">-header =&gt; 1 | 0</tt></dt>
<dd>
<a name="INDEX-2831" />If set to 1,
headers will be shown when created. (See the
<tt class="literal">'header'</tt> method.)
</p>
</dd>


<dt><tt class="literal">-indent</tt> =&gt; <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-2832" />The amount of
screen space to indent a child entry from its parent. Default is 10.
</p>
</dd>


<dt><tt class="literal">-indicator =&gt; 1 | 0</tt></dt>
<dd>
<a name="INDEX-2833" />If true,
the indicator will be displayed for each item in the list.
</p>
</dd>


<dt><tt class="literal">-indicatorcmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-2834" /><a name="INDEX-2835" /><a name="INDEX-2836" /><a name="INDEX-2837" />A callback that is invoked whenever the
indicator associated with an entry is pressed. Two additional
arguments are passed to the callback: the entry path and a string
that will be one of <tt class="literal">&lt;Arm&gt;</tt>,
<tt class="literal">&lt;Disarm&gt;</tt>, or
<tt class="literal">&lt;Activate&gt;</tt>. Think of Arm as similar to a
Button Down event, except it is also sent to the callback when the
user moves the mouse over the indicator with the mouse button down.
If the user has the mouse button down and moves out of the indicator,
the callback is invoked with Disarm. Activate happens when the user
lets go of the mouse button while over the indicator. Typically,
you'll see multiple Arm and Disarm calls before you get an
Activate.
</p>


<p>If the HList entry doesn't have an indicator created by using
the indicator method, this callback will never be invoked for that
entry.
</p>
</dd>


<dt><tt class="literal">-itemtype</tt> =&gt; <tt class="literal">'text' | 'imagetext' | 'image' | 'window'</tt></dt>
<dd>
<a name="INDEX-2838" />The default type of a display
item. You can override the default item type when calling the
<tt class="literal">itemCreate</tt>, <tt class="literal">add</tt>, or
<tt class="literal">addchild</tt> methods.
</p>
</dd>


<dt><tt class="literal">-sizecmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-2839" />This
callback will be invoked whenever the HList size changes.
</p>
</dd>


<dt><tt class="literal">-separator</tt> =&gt; <tt><em class="replaceable"><tt>character</tt></em></tt></dt>
<dd>
<a name="INDEX-2840" />The
character used to separate pathnames of entries. Default value is
<tt class="literal">'.'</tt>.<a name="INDEX-2841" />
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-18-SECT-4.2" /><div class="sect2">
<h3 class="sect2">18.4.2. HList Methods</h3>

<p><a name="INDEX-2842" />The
following methods can be called on an HList:
</p>

<dl>
<dt><tt class="literal">$hlist-&gt;add($path,</tt> <tt><em class="replaceable"><tt>options ...</tt></em></tt><tt class="literal">);</tt></dt>
<dd>
<a name="INDEX-2843" />Adds a list item using one of the
following options:
</p>


<dl>
<dt><tt class="literal">-at</tt> =&gt; <tt><em class="replaceable"><tt>position</tt></em></tt> </dt>
<dd>
<a name="INDEX-2844" />Position is an
index starting at zero.
</p>
</dd>


<dt><tt class="literal">-after</tt> =&gt; <tt><em class="replaceable"><tt>entrypath</tt></em></tt> </dt>
<dd>
<a name="INDEX-2845" />Places the new entry after the given entry
path.
</p>
</dd>


<dt><tt class="literal">-before</tt> =&gt; <tt><em class="replaceable"><tt>entrypath</tt></em></tt> </dt>
<dd>
<a name="INDEX-2846" />Places the new entry before the given
entry path.
</p>
</dd>


<dt><tt class="literal">-data</tt> =&gt; <tt class="literal">$scalar</tt> </dt>
<dd>
<a name="INDEX-2847" />Associates this scalar as data for this
entry.
</p>
</dd>


<dt><tt class="literal">-itemtype</tt> =&gt; <tt><em class="replaceable"><tt>type</tt></em></tt> </dt>
<dd>
<a name="INDEX-2848" />Uses this type of display item.
</p>
</dd>


<dt><tt class="literal">-state</tt> =&gt; <tt class="literal">'normal'</tt> <tt class="literal">|</tt> <tt class="literal">'disabled'</tt> </dt>
<dd>
<a name="INDEX-2849" /><tt class="literal">'disabled'</tt> makes the
entry unselectable.
</p>
</dd>

</dl>

<p>You can also specify any options that are valid for the item type
this entry uses.
</p>
</dd>



<dt><tt class="literal">$hlist-&gt;addchild($parentpath,</tt> <tt><em class="replaceable">options ...</em></tt><tt class="literal">)</tt></dt>
<dd>
<a name="INDEX-2850" />Instead of
using separators in the path of each entry and calling
<tt class="literal">add</tt>, you can build your hierarchy using
<tt class="literal">addchild</tt> once the parent is created (the path of
<tt class="literal">''</tt> is the top-level path). All the option/value
pairs listed for <tt class="literal">add</tt> are valid with
<tt class="literal">addchild</tt> as well.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;columnWidth($col,</tt> <tt><em class="replaceable">options ...</em></tt><tt class="literal">)</tt></dt>
<dd>
<a name="INDEX-2851" />Specifies
the width of a column or, with no arguments, return the
column's current width. The following options are also
recognized:
</p>


<dl>
<dt><tt class="literal">''</tt> (empty string)</dt>
<dd>
Resets the column width so it is just wide enough for all text in
that column.
</p>
</dd>


<dt><i><tt><em class="replaceable"><tt>width</tt></em></tt> </i></dt>
<dd>
Specifies the screen distance for this column.</p>
</dd>


<dt><tt class="literal">-char</tt> =&gt; <tt><em class="replaceable"><tt>numchars</tt></em></tt> </dt>
<dd>
<a name="INDEX-2852" />Makes the
column <em class="replaceable"><tt><tt>numchars</tt></tt></em> wide.
</p>
</dd>

</dl>

</dd>


<dt><tt class="literal">$hlist-&gt;delete(</tt><tt><em class="replaceable">what</em></tt><tt class="literal">,</tt> <tt><em class="replaceable">$path</em></tt><tt class="literal">)</tt></dt>
<dd>
<a name="INDEX-2853" />Deletes some of the HList entries.
<tt><em class="replaceable">what</em></tt> must contain one of the following:
<tt class="literal">'all'</tt>, <tt class="literal">'entry'</tt>,
<tt class="literal">'offsprings'</tt>, or <tt class="literal">'siblings'</tt>. If
using <tt class="literal">'all'</tt>, <tt class="literal">$path</tt> is optional.
The entry at <tt class="literal">$path</tt> is not deleted if specifying
<tt class="literal">'offsprings'</tt> (all children of the entry at
<tt class="literal">$path</tt>) or <tt class="literal">'siblings'</tt> (all
entries that have the same parent as <tt class="literal">$path</tt>).
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;headerCreate($column, ...);</tt></dt>
<dd>
<a name="INDEX-2854" />Creates
the header for the <tt class="literal">$column</tt>. In addition to the
following option/value pairs, you can specify valid option/values for
the item type being created.
</p>

<dl>
<dt><tt class="literal">-itemtype</tt> =&gt; <tt><em class="replaceable"><tt>type</tt></em></tt> </dt>
<dd>
<a name="INDEX-2855" />Specifies what type of item to create.
</p>
</dd>


<dt><tt class="literal">-borderwidth</tt> =&gt; <tt><em class="replaceable"><tt>amount</tt></em></tt> </dt>
<dd>
<a name="INDEX-2856" />Specifies the width of the border all
around the header item.
</p>
</dd>


<dt><tt class="literal">-headerbackground</tt> =&gt; <tt><em class="replaceable"><tt>color</tt></em></tt> </dt>
<dd>
<a name="INDEX-2857" />Specifies the color behind the text of
the header item.
</p>
</dd>


<dt><tt class="literal">-relief</tt> =&gt; <tt><em class="replaceable"><tt>type</tt></em></tt> </dt>
<dd>
<a name="INDEX-2858" />Specifies the type of relief to use for
the edges of the header item.
</p>
</dd>

</dl>

</dd>


<dt><tt class="literal">$hlist-&gt;headerConfigure($column, ...)</tt></dt>
<dt><tt class="literal">$hlist-&gt;headerCget($column, ...)</tt> </dt>
<dd>
<a name="INDEX-2859" /><a name="INDEX-2860" />You can use
<tt class="literal">headerConfigure</tt> to change or query any option that
is valid with the <tt class="literal">headerCreate</tt> method and query
current settings using <tt class="literal">headerCget</tt>. These methods
work just like <tt class="literal">configure</tt> and
<tt class="literal">cget</tt>, except they take a
<tt class="literal">$column</tt> number as the first argument.
</p>
</dd>




<dt><tt class="literal">$hlist-&gt;headerDelete($column)</tt></dt>
<dd>
<a name="INDEX-2861" />Deletes
the header associated with <tt class="literal">$column</tt>.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;headerExists($column)</tt></dt>
<dd>
<a name="INDEX-2862" />Returns
1 if there is a header item for the <tt class="literal">$column</tt> and 0
if there isn't.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;headerSize($column)</tt></dt>
<dd>
<a name="INDEX-2863" />Returns a
list containing the width and height (in pixels) for that header
item.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;hide('entry' $path)</tt></dt>
<dd>
<a name="INDEX-2864" />Makes the entry
at <tt class="literal">$path</tt> invisible to the user. The
<tt class="literal">$path</tt> still exists and can be made visible with
the <tt class="literal">show</tt> method.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;indicatorCreate($path, ... )</tt></dt>
<dd>
<a name="INDEX-2865" />Creates an indicator and associates it
with the entry at <tt class="literal">$path</tt>. The indicator is also a
display item, so <tt class="literal">indicatorCreate</tt> accepts the
<tt class="literal">-itemtype</tt> option and all valid options for the
item type used.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;indicatorConfigure($path, ... )</tt></dt>
<dt><tt class="literal">$hlist-&gt;indicatorCget($path, ...)</tt></dt>
<dd>
<a name="INDEX-2866" /><a name="INDEX-2867" />These methods allow you to configure the
indicator at <tt class="literal">$path</tt>. Both of these methods work the
same as <tt class="literal">configure</tt> and <tt class="literal">cget</tt> and,
just like <tt class="literal">headerCget</tt> and
<tt class="literal">headerConfigure</tt>, they require a
<tt class="literal">$path</tt> as the first argument.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;indicatorDelete($path)</tt></dt>
<dd>
<a name="INDEX-2868" />Deletes the indicator associated with the
entry at <tt class="literal">$path</tt>.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;indicatorExists($path)</tt></dt>
<dd>
<a name="INDEX-2869" />Returns a 1 if an indicator exists at
<tt class="literal">$path</tt> and 0 if it doesn't.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;indicatorSize($path)</tt></dt>
<dd>
<a name="INDEX-2870" />Returns
a list with the width and height of the indicator at
<tt class="literal">$path</tt>.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoAnchor</tt></dt>
<dd>
<a name="INDEX-2871" />Returns
the path of the current anchor or an empty string if there is no
anchor set. The anchor is indicated visually by a dotted line. If
<tt class="literal">selectmode</tt> is set to <tt class="literal">'single'</tt>,
the anchor is always the same as the selection, but in
<tt class="literal">'multiple'</tt> <tt class="literal">selectmode</tt>, the
first item selected is the anchor.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoBbox($path)</tt></dt>
<dd>
<a name="INDEX-2872" />Returns a
list that gives the entry's bounding box coordinates. The list
is: <tt class="literal">$upperleft_x</tt>, <tt class="literal">$upperleft_y</tt>,
<tt class="literal">$lowerright_x</tt>, <tt class="literal">$lowerright_y</tt>,
all in pixels. Only the visible portion of the entry is given; if
nothing is visible, an empty string is returned.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoChildren($path)</tt></dt>
<dd>
<a name="INDEX-2873" />Returns
a path list for all children of the given <tt class="literal">$path</tt>.
To get a list of all the children, don't specify a
<tt class="literal">$path</tt> at all.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoData($path)</tt></dt>
<dd>
<a name="INDEX-2874" />Returns the
data associated with the entry at <tt class="literal">$path</tt>.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoDragsite</tt></dt>
<dt><tt class="literal">$hlist-&gt;infoDropsite</tt></dt>
<dd>
<a name="INDEX-2875" /><a name="INDEX-2876" />Returns the path of the entry at the
dragsite or dropsite, or an empty string if those don't exist.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoExists($path)</tt></dt>
<dd>
<a name="INDEX-2877" />Returns 1
if the entry at <tt class="literal">$path</tt> exists and 0 if it
doesn't.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoHidden($path)</tt></dt>
<dd>
<a name="INDEX-2878" />Returns 1
if the entry at <tt class="literal">$path</tt> is hidden and 0 if it
isn't.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoNext($path)</tt></dt>
<dd>
<a name="INDEX-2879" />Returns the
path of the entry immediately below the one at
<tt class="literal">$path</tt>. If <tt class="literal">$path</tt> is the last
entry in the list, <tt class="literal">infoNext</tt> returns an empty
string.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoParent($path)</tt></dt>
<dd>
<a name="INDEX-2880" />Returns
the parent's path, or an empty string if
<tt class="literal">$path</tt> is at the top level.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoPrev($path)</tt></dt>
<dd>
<a name="INDEX-2881" />Returns the
path of the entry immediately before the one at
<tt class="literal">$path</tt>, or an empty string if
<tt class="literal">$path</tt> is at the top of the list.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;infoSelection($path)</tt></dt>
<dd>
<a name="INDEX-2882" />Returns
a path list of selected entries, or an empty string if nothing is
selected.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;itemCreate($path, $column, ... )</tt></dt>
<dd>
<a name="INDEX-2883" />Creates an
entry at <tt class="literal">$path</tt> and <tt class="literal">$column</tt>. The
path must have already been created by a call to
<tt class="literal">add</tt> or <tt class="literal">addchild</tt>. You can use
the <tt class="literal">-itemtype</tt> option and any option/value pairs
that are valid for that option type.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;itemConfigure($path, $column, ...)</tt> </dt>
<dt><tt class="literal">$hlist-&gt;itemCget($path, $column, ...)</tt></dt>
<dd>
<a name="INDEX-2884" /><a name="INDEX-2885" />These methods allow you to configure the
entry at <tt class="literal">$path</tt> and <tt class="literal">$column</tt>.
Both of these methods work the same as <tt class="literal">configure</tt>
and <tt class="literal">cget</tt>, except they require
<tt class="literal">$path</tt> and <tt class="literal">$column</tt> as their
first arguments.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;itemDelete($path, $column)</tt></dt>
<dd>
<a name="INDEX-2886" />Deletes
the entry at <tt class="literal">$path</tt> and <tt class="literal">$column</tt>.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;itemExists($path, $column)</tt></dt>
<dd>
<a name="INDEX-2887" />Returns 1
if the entry at <tt class="literal">$path</tt> and
<tt class="literal">$column</tt> exists and 0 if it doesn't.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;nearest($y)</tt></dt>
<dd>
<a name="INDEX-2888" />Returns the
path of a visible entry that is nearest the y coordinate specified in
<tt class="literal">$y</tt> (a valid screen distance).
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;see($path)</tt></dt>
<dd>
<a name="INDEX-2889" />Changes the view of the HList so the entry
at <tt class="literal">$path</tt> is visible.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;selectionClear([from [$to]])</tt></dt>
<dd>
<a name="INDEX-2890" />Given
no arguments, <tt class="literal">selectionClear</tt> removes the selection
from the HList. Given a <tt class="literal">$from</tt> argument, only the
item at the path in <tt class="literal">$from</tt> is taken out. If given
<tt class="literal">$from</tt> and <tt class="literal">$to</tt> arguments, it
removes the selection from those two paths and anything in between.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;selectionGet</tt></dt>
<dd>
<a name="INDEX-2891" />Same as
<tt class="literal">$hlist-&gt;infoSelection</tt>; returns a list of
entries that are currently selected, or an empty string if nothing is
selected.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;selectionIncludes($path)</tt></dt>
<dd>
<a name="INDEX-2892" />Returns 1 if the entry at
<tt class="literal">$path</tt> is included in the selection and 0 if it
isn't.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;selectionSet([$from [, $to ]])</tt></dt>
<dd>
<a name="INDEX-2893" />Sets the
selection to either only the path in <tt class="literal">$from</tt>, or the
paths between <tt class="literal">$from</tt> and <tt class="literal">$to</tt>,
inclusively.
</p>
</dd>


<dt><tt class="literal">$hlist-&gt;show('entry', $path)</tt></dt>
<dd>
<a name="INDEX-2894" />Unhides the
entry at <tt class="literal">$path</tt>.<a name="INDEX-2895" />
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-18-SECT-4.3" /><div class="sect2">
<h3 class="sect2">18.4.3. The Tree Widget</h3>

<p><a name="INDEX-2896" />The Tree
widget is based on HList, but it has a lot more built-in
functionality. We mentioned earlier that if you want to be able to
open and close parts of the heirarchy, you might as well use the Tree
widget rather than recoding everything yourself. Here's our
color hierarchy example again, but using Tree:
</p>

<blockquote><pre class="code">use Tk;
use Tk::Tree;
my $mw = MainWindow-&gt;new(-title =&gt; 'Tree');

my $tree = $mw-&gt;Tree-&gt;pack(-fill =&gt; 'both', -expand =&gt; 1);

foreach (qw/orange orange.red orange.yellow green green.blue
  green.yellow purple purple.red purple.blue/) {
  $tree-&gt;add($_, -text =&gt; $_);
}

$tree-&gt;autosetmode( );
MainLoop;</pre></blockquote>

<p><a href="ch18_04.htm">Figure 18-7</a> illustrates this.  </p>

<a name="mastperltk-CHP-18-FIG-7" /><div class="figure"><img src="figs/mptk.1807.gif" alt="Figure 18-7" width="113" height="138" /></div><h4 class="objtitle">Figure 18-7. Tree using a hierarchy of colors</h4>

<p><a name="INDEX-2897" />The only
changes in our code are that we replaced HList with Tree and we made
an additional call to <tt class="literal">autosetmode</tt>. This call is
necessary for the widget to set up all its internal variables so it
knows which branches are open. If you forget to make this call, the
plus and minus indicators won't appear. Other than those small
changes, everything else about a Tree is the same as an HList. All
the HList methods and options apply to Trees as well. Here are a few
additional options and methods:
</p>

<dl>
<dt><tt class="literal">-closecmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-2898" />Called when
a branch is closed. Assigning this callback overrides the default
callback, so your branch won't actually close unless you add
code to facilitate that. If you need to retain the functionality
currently provided, save the reference to the callback first, then
invoke it in yours:
</p>

<blockquote><pre class="code">my $closecmd = [
     sub {
         print "args=@_!\n";
         my $tree = shift;
         my $closecmd_orig = $tree-&gt;{'closecmd_orig'};
         $tree-&gt;$closecmd_orig(@_);
     },
     $tree,
];

$tree-&gt;configure(-closecmd =&gt; $closecmd);</pre></blockquote>
</dd>


<dt><tt class="literal">-ignoreinvoke =&gt; 0 | 1</tt></dt>
<dd>
<a name="INDEX-2899" />If set
to false, the branch is opened or closed when the user selects the
entry (not just the indicator).
</p>
</dd>


<dt><tt class="literal">-opencmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-2900" />Called when
a branch is opened. If you assign this callback, you are overriding
the default callback, so your branch won't actually open unless
you add code to facilitate that.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-18-SECT-4.4" /><div class="sect2">
<h3 class="sect2">18.4.4. Tree Methods</h3>

<p>The following methods are available for the Tree widget:</p>

<dl>
<dt><tt class="literal">$tree-&gt;autosetmode</tt></dt>
<dd>
<a name="INDEX-2901" />For the
indicators to be created, you must call this after setting up all
your entries in the Tree .
</p>
</dd>


<dt><tt class="literal">$tree-&gt;open($path)</tt></dt>
<dd>
<a name="INDEX-2902" />Invokes the
callback associated with the <tt class="literal">-opencmd</tt> option.
</p>
</dd>


<dt><tt class="literal">$tree-&gt;close($path)</tt></dt>
<dd>
<a name="INDEX-2903" />Invokes the
callback associated with the <tt class="literal">-closecmd</tt> option.
</p>
</dd>


<dt><tt class="literal">$tree-&gt;setmode($path,</tt> <tt><em class="replaceable"><tt>mode</tt></em></tt><tt class="literal">)</tt></dt>
<dd>
<a name="INDEX-2904" />Sets the mode
on an individual path. The first argument is the
<tt class="literal">$path</tt> to use, and the second argument should be
<tt class="literal">'open'</tt>, <tt class="literal">'close'</tt>, or
<tt class="literal">'none'</tt>. A mode of <tt class="literal">'none'</tt> means
the user cannot open or close that branch; a mode of
<tt class="literal">'open'</tt> means the path is ready to be opened by the
user (all its children should currently be hidden), and a mode of
<tt class="literal">'close'</tt> means the path is ready to be closed by
the user (all its children are currently visible). The meaning of
each of these states is counterintuitive at first glance. In brief,
the mode you are using is what the path's going to be doing the
next time the user interacts with it.
</p>
</dd>


<dt><tt class="literal">$tree-&gt;getmode($path)</tt></dt>
<dd>
<a name="INDEX-2905" />Returns the
current mode of the given <tt class="literal">$path</tt>. The string
returned will be one of <tt class="literal">'open'</tt>,
<tt class="literal">'close'</tt>, or <tt class="literal">'none'</tt>.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-18-SECT-4.5" /><div class="sect2">
<h3 class="sect2">18.4.5. The DirTree Widget</h3>

<p><a name="INDEX-2906" />The DirTree
widget extends the Tree widget (which extends the HList widget) and
inherits all the methods and options from both Tree and HList. A
DirTree is designed to show directories from a given starting point
(similar to the lefthand side of an MS Windows Explorer window).
Here's a simple example showing DirTree reading the directories
off a CD-ROM drive:
</p>

<blockquote><pre class="code">use Tk;
use Tk::DirTree;
my $mw = MainWindow-&gt;new(-title =&gt; 'Tree');
$mw-&gt;DirTree(-directory =&gt; "D:/")-&gt;pack(-fill =&gt; 'both', -expand =&gt; 1);
MainLoop;</pre></blockquote>

<p><a href="ch18_04.htm">Figure 18-8</a> shows the outcome.</p>

<a name="mastperltk-CHP-18-FIG-8" /><div class="figure"><img src="figs/mptk.1808.gif" alt="Figure 18-8" width="143" height="148" /></div><h4 class="objtitle">Figure 18-8. The DirTree widget reading my CD-ROM drive</h4>

<p>The following options can be used with DirTree:</p>

<dl>
<dt><tt class="literal">-dircmd</tt> =&gt; <tt><em class="replaceable"><tt>callback</tt></em></tt></dt>
<dd>
<a name="INDEX-2907" />The callback
to use when DirTree attempts to read a directory. By default, the
DirTree assumes a Unix directory, which works most of the time.
</p>
</dd>


<dt><tt class="literal">-showhidden =&gt; 0 | 1</tt></dt>
<dd>
<a name="INDEX-2908" />If true,
hidden directories are shown (following the Unix convention, any
directory starting with a <tt class="literal">.</tt> is considered hidden).
</p>
</dd>


<dt><tt class="literal">-directory</tt> =&gt; <tt><em class="replaceable"><tt>directoryname</tt></em></tt></dt>
<dd>
<a name="INDEX-2909" />The
starting directory. For example, <em class="filename">C:/apps/perl</em></tt> or
<em class="filename">D:/</em></tt>.
</p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-18-SECT-4.6" /><div class="sect2">
<h3 class="sect2">18.4.6. Adding a Directory</h3>

<p><a name="INDEX-2910" />There is only
one method specific to a DirTree widget. You can call
<tt class="literal">chdir</tt> at any time to add to the directory listing:
</p>

<blockquote><pre class="code">$dirtree-&gt;chdir($directoryname);</pre></blockquote>

<p>If you take a peek at the actual code in
<em class="filename">DirTree.pm</em></tt>, you'll see that setting the
<tt class="literal">-directory</tt> option calls <tt class="literal">chdir</tt>
as well. When you call <tt class="literal">chdir</tt>, the widget
doesn't remove any of the previous directory entries. If you
want to remove other directories, you must use the
<tt class="literal">delete</tt> method first to avoid confusion.<a name="INDEX-2911" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch18_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch18_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">18.3. The TList Widget</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">18.5. Tix Images</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>