<html><head><title>Tk::ExecuteCommand (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appc_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appc_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">C.3. Tk::ExecuteCommand</h2>

<p>In <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a>, we discussed the Tk:ExecuteCommand
program. Here it is in its entirety; see <a href="ch15_04.htm">Figure 15-1</a>
for a demonstration.
</p>

<blockquote><pre class="code">$Tk::ExecuteCommand::VERSION = '1.1';

package Tk::ExecuteCommand;

use IO::Handle;
use Proc::Killfam;
#use Tk::widgets qw/LabEntry ROText/;
use Tk::widgets qw/ROText/;
use base qw/Tk::Frame/;
use strict;

Construct Tk::Widget 'ExecuteCommand';

sub Populate {

    my($self, $args) = @_;

    $self-&gt;SUPER::Populate($args);

    my $f1 = $self-&gt;Frame-&gt;pack;
    $f1-&gt;LabEntry(
        -label =&gt; 'Command to Execute',
        -labelPack =&gt; [qw/-side left/],
        -textvariable =&gt; \$self-&gt;{-command},
    )-&gt;pack(qw/-side left/);

    my $doit = $f1-&gt;Button(-text =&gt; 'Do It!')-&gt;pack(qw/-side left/);
    $self-&gt;Advertise('doit' =&gt; $doit);
    $self-&gt;_reset_doit_button;

    $self-&gt;Frame-&gt;pack(qw/pady 10/);
    $self-&gt;Label(-text =&gt; 'Command\'s stdout and stderr')-&gt;pack;

    my $text = $self-&gt;Scrolled('ROText', -wrap =&gt; 'none');
    $text-&gt;pack(qw/-expand 1 -fill both/); 
    $self-&gt;Advertise('text' =&gt; $text);
    $self-&gt;OnDestroy([$self =&gt; 'kill_command']);

    $self-&gt;{-finish} = 0;

    $self-&gt;ConfigSpecs(
        -command =&gt; [qw/METHOD command Command/, 'sleep 5; pwd'],
    );

} # end Populate

sub command {

    my($self, $command) = @_;
    $self-&gt;{-command} = $command;

} # end command

sub _flash_doit {

    # Flash "Do It" by alternating its background color.

    my($self, $option, $val1, $val2, $interval) = @_;

    if ($self-&gt;{-finish} == 0) {
        $self-&gt;Subwidget('doit')-&gt;configure($option =&gt; $val1);
        $self-&gt;idletasks;
        $self-&gt;after($interval, [\&amp;_flash_doit, $self, $option, $val2,
                $val1, $interval]);
    }

} # end _flash_doit

sub _read_stdout {

    # Called when input is available for the output window.  Also checks
    # to see if the user has clicked Cancel.

    my($self) = @_;

    if ($self-&gt;{-finish}) {
        $self-&gt;kill_command;
    } else {
        my $h = $self-&gt;{-handle};
        if ( sysread $h, $_, 4096 ) {
            my $t = $self-&gt;Subwidget('text');
            $t-&gt;insert('end', $_);
            $t-&gt;yview('end');
        } else {
            $self-&gt;{-finish} = 1;
        }
    }
	
} # end _read_stdout

sub _reset_doit_button {

    # Establish normal "Do It" button parameters.

    my($self) = @_;

    my $doit = $self-&gt;Subwidget('doit');
    my $doit_bg = ($doit-&gt;configure(-background))[3];
    $doit-&gt;configure(
        -text       =&gt; 'Do It',
        -relief     =&gt; 'raised',
        -background =&gt; $doit_bg,
        -state      =&gt; 'normal',
        -command    =&gt; [sub {
	    my($self) = @_;
            $self-&gt;{-finish} = 0;
            $self-&gt;Subwidget('doit')-&gt;configure(
                -text   =&gt; 'Working ...',
                -relief =&gt; 'sunken',
                -state  =&gt; 'disabled'
            );
            $self-&gt;execute_command;
        }, $self],
    );

} # end _reset_doit_button

# Public methods.

sub execute_command {

    # Execute the command and capture stdout/stderr.

    my($self) = @_;
    
    my $h = IO::Handle-&gt;new;
    die "IO::Handle-&gt;new failed." unless defined $h;
    $self-&gt;{-handle} = $h;

    $self-&gt;{-pid} = open $h, $self-&gt;{-command} . ' 2&gt;&amp;1 |';
    if (not defined $self-&gt;{-pid}) {
        $self-&gt;Subwidget('text')-&gt;insert('end',
                "'" . $self-&gt;{-command} . "' : $!\n");
        $self-&gt;kill_command;
        return;
    }
    $h-&gt;autoflush(1);
    $self-&gt;fileevent($h, 'readable' =&gt; [\&amp;_read_stdout, $self]);

    my $doit = $self-&gt;Subwidget('doit');
    $doit-&gt;configure(
        -text    =&gt; 'Cancel',
        -relief  =&gt; 'raised',
        -state   =&gt; 'normal',
        -command =&gt; [\&amp;kill_command, $self],
    );

    my $doit_bg = ($doit-&gt;configure(-background))[3];
    $self-&gt;_flash_doit(-background =&gt; $doit_bg, qw/cyan 500/);
    
} # end execute_command

sub kill_command {
    
    # A click on the blinking Cancel button resumes normal operations.

    my($self) = @_;

    $self-&gt;{-finish} = 1;
    my $h = $self-&gt;{-handle};
    return unless defined $h;
    $self-&gt;fileevent($h, 'readable' =&gt; ''); # clear handler
    killfam 'TERM', $self-&gt;{-pid} if defined $self-&gt;{-pid};
    close $h;
    $self-&gt;_reset_doit_button;

} # end kill_command

1;

__END__

=head1 NAME

Tk::ExecuteCommand - execute a command asynchronously (non-blocking).

=for pm Tk/ExecuteCommand.pm

=for category Widgets

=head1 SYNOPSIS

S&lt;    &gt;I&lt;$exec&gt; = I&lt;$parent&gt;-E&lt;gt&gt;B&lt;ExecuteCommand&gt;;

=head1 DESCRIPTION

Tk::ExecuteCommand runs a command yet still allows Tk events to flow.  All
command output and errors are displayed in a window.

This ExecuteCommand mega widget is composed of an LabEntry widget for
command entry, a "Do It" Button that initiates command execution, and
a ROText widget that collects command execution output.

While the command is executing, the "Do It" Button changes to a "Cancel"
Button that can prematurely kill the executing command. The B&lt;kill_command&gt;
method does the same thing programmatically.

=over 4

=item B&lt;-command&gt;

The command to execute asynchronously.

=back

=head1 METHODS

=over 4

=item C&lt;$exec-E&lt;gt&gt;B&lt;execute_command&gt;;&gt;

Initiates command execution.

=item C&lt;$exec-E&lt;gt&gt;B&lt;kill_command&gt;;&gt;

Terminates the command.  This subroutine is called automatically via an
OnDestroy handler when the ExecuteCommand widget goes away.

=back

=head1 EXAMPLE

I&lt;$exec&gt; = I&lt;$mw&gt;-E&lt;gt&gt;B&lt;ExecuteCommand&gt;;

=head1 KEYWORDS

exec, command, fork, asynchronous, non-blocking, widget

=head1 COPYRIGHT

Copyright (C) 1999 - 2001 Stephen O. Lidie. All rights reserved.

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut</pre></blockquote>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appc_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appc_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">C.2. Tk::MacCopy</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">C.4. Proc::Killfam</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>