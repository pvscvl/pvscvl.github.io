<html><head><title>Geometry Management (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 2. Geometry Management</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4>
  <p> <a href="#mastperltk-CHP-2-SECT-1">The pack Geometry Manager</a><br />
<a href="ch02_02.htm">The grid Geometry Manager</a><br />
<a href="ch02_03.htm">The place Geometry Manager</a><br />
<a href="ch02_04.htm">The form Geometry Manager</a><br />
<a href="ch02_05.htm">Geometry Management Summary</a><br /></p></div>

<p><a name="INDEX-123" /></a>To
display widgets on the screen, they must be passed to a
<em class="firstterm">geometry manager</em>. The geometry manager
controls the position and size of the widgets in the display window.
Several geometry managers are available with Perl/Tk:
<tt class="literal">pack</tt>, <tt class="literal">place</tt>,
<tt class="literal">grid</tt>, and <tt class="literal">form</tt>.
</p>

<p><a name="INDEX-124" /></a>All the geometry managers are invoked as
methods on the widget, but they all have their own methodologies and
arguments to change where and how the widgets are put on the screen:
</p>

<blockquote><pre class="code">$widget1-&gt;pack(); $widget2-&gt;place(); $widget3-&gt;grid(); $widget4-&gt;form( );</pre></blockquote>

<p><a name="INDEX-125" /></a><a name="INDEX-126" /></a>When you organize the widgets in
your window, it is often necessary to separate groups of widgets to
get a certain look and feel. For instance, when you use
<tt class="literal">pack</tt>, it is difficult to have widgets stacked both
horizontally and vertically without grouping them in some fashion. We
use a Frame widget or another window (a Toplevel widget) to group
widgets inside a window.
</p>

<p><a name="INDEX-127" /></a>We create our first window
by calling <tt class="literal">MainWindow</tt>. The MainWindow is a special
form of a Toplevel widget. For more detailed information on how to
create/configure Frame and Toplevel widgets, see <a href="ch11_01.htm">Chapter 11, "
Frame, MainWindow,and Toplevel Widgets"</a>.
</p>

<p><a name="INDEX-128" /></a>With the
exception of <tt class="literal">place</tt>, differences between the
geometry managers make it difficult (not entirely impossible, but
definitely not recommended) to use more than one geometry manager
within the same area. In
<tt class="literal">$mw</tt>, we can display many types of widgets, but if
we start using <tt class="literal">pack</tt>, we should continue to use
<tt class="literal">pack</tt> on all the widgets contained directly in
<tt class="literal">$mw</tt>. Don't switch to <tt class="literal">grid</tt>
in the middle, because the two geometry managers will get into a
<em class="emphasis">race</em> <em class="emphasis">condition</em>: one will
create its layout, which affects the geometry calculations of the
other, which affects the layout of the first, causing it to recompute
its geometries, ad infinitum. However, let's assume our
MainWindow contains a Frame, which in turn contains other widgets. We
could use <tt class="literal">pack</tt> to pack the Frame inside the
MainWindow and then we could use <tt class="literal">grid</tt> to manage
the widgets inside the Frame. See <a href="ch02_01.htm">Figure 2-1</a>.
</p>

<a name="mastperltk-CHP-2-FIG-1" /></a><div class="figure"><img src="figs/mptk.0201.gif" alt="Figure 2-1" width="257" height="181" /></div><h4 class="objtitle">Figure 2-1. Frame within a window that uses a different geometry manager</h4>

<p><a name="INDEX-129" /></a>Although the different geometry managers
have their own strengths and weaknesses, <tt class="literal">pack</tt> is
the most commonly used, so we'll discuss it first and in the
most detail. The <tt class="literal">grid</tt> geometry manager has been
improved greatly with the release of Tk 8.0 and subsequent porting to
Perl. The <tt class="literal">place</tt> geometry manager is the most
tedious to use, because you have to determine exact coordinates
(relative or absolute) for every single widget. Finally, the
<tt class="literal">form</tt> geometry manager is like a combination of
<tt class="literal">pack</tt> and <tt class="literal">place</tt>.
</p>
<div class="sect1"><a name="mastperltk-CHP-2-SECT-1" /></a>
<h2 class="sect1">2.1. The pack Geometry Manager</h2>

<p><a name="INDEX-130" /></a>Remember
when you were a child and you had those wooden puzzles to put
together? Each piece in the puzzle had exactly one place where it
could go and there weren't any overlaps allowed between pieces.
</p>

<p><a name="INDEX-131" /></a>With the <tt class="literal">pack</tt> geometry
manager, our windows are similar to the wooden puzzle, because
widgets cannot overlap or cover each other, partially or completely
(see <a href="ch02_01.htm">Figure 2-2</a>). If a Button is packed in a
certain space on the window, the next Button (or any widget) will
have to fit around the already packed Button. Luckily, our windows
will be dealing only with rectangular shapes instead of funny-shaped
puzzle pieces.
</p>

<a name="mastperltk-CHP-2-FIG-2" /></a><div class="figure"><img src="figs/mptk.0202.gif" alt="Figure 2-2" width="377" height="181" /></div><h4 class="objtitle">Figure 2-2. Overlap error</h4>

<p>The order in which you pack your widgets is very important because it
directly affects what you see on the screen. Each Frame or Toplevel
maintains a list of items that are displayed within it. This list has
an order to it: if widget A is packed before widget B, then widget A
will get preference if space becomes scarce. This will become clear
as we go through some examples. You will often get a different look
to your window just by packing the widgets in a different order.
</p>

<p>If you don't care what the window looks like and how the
widgets are put in it, you can use <tt class="literal">pack</tt> with no
arguments and skip the rest of this chapter. Here it is again:
</p>

<blockquote><pre class="code">$widget-&gt;pack( );</pre></blockquote>

<p><a name="INDEX-132" /></a>To make your
window look nicer and more manageable (and user friendly), there are
arguments that can be sent to the <tt class="literal">pack</tt> method that
will change the way the widgets and the window look. As with anything
in Perl/Tk, the arguments are arranged in key/value pairs. So the
more sophisticated usage would be:
</p>

<blockquote><pre class="code">$widget-&gt;pack( <em class="replaceable"><tt>[ option =&gt; value, ... ]</tt></em> );</pre></blockquote>

<p>Here is the code to create a window that doesn't use any
<tt class="literal">pack</tt> options. We haven't covered all the
widgets used in this example, but hang in there; it's pretty
simple.
</p>

<blockquote><pre class="code">#!/usr/bin/perl -w
use Tk;

my $mw = MainWindow-&gt;new;
$mw-&gt;title("Bad Window");
$mw-&gt;Label(-text =&gt; "This is an example of a window that looks bad\nwhen you don't
 send any options to pack")-&gt;pack;

$mw-&gt;Checkbutton(-text =&gt; "I like it!")-&gt;pack;
$mw-&gt;Checkbutton(-text =&gt; "I hate it!")-&gt;pack;
$mw-&gt;Checkbutton(-text =&gt; "I don't care")-&gt;pack;
$mw-&gt;Button(-text =&gt; "Exit",
            -command =&gt; sub { exit })-&gt;pack;
MainLoop;</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-3</a> shows the resulting window.  </p>

<a name="mastperltk-CHP-2-FIG-3" /></a><div class="figure"><img src="figs/mptk.0203.gif" alt="Figure 2-3" width="252" height="141" /></div><h4 class="objtitle">Figure 2-3. Window with widgets managed by pack</h4>

<p>We can alter the preceding code and add some options to the
<tt class="literal">pack</tt> calls that will make our window look much
nicer:
</p>

<blockquote><pre class="code">#!/usr/bin/perl -w
use Tk;

my $mw = MainWindow-&gt;new;
$mw-&gt;title("Good Window");
$mw-&gt;Label(-text =&gt; "This window looks much more organized, and less haphazard\n" .
    "because we used some options to make it look nice")-&gt;pack;

$mw-&gt;Button(-text =&gt; "Exit",
            -command =&gt; sub { exit })-&gt;pack(-side =&gt; 'bottom', 
                                            -expand =&gt; 1,
                                            -fill =&gt; 'x');
$mw-&gt;Checkbutton(-text =&gt; "I like it!")-&gt;pack(-side =&gt; 'left',
                                              -expand =&gt; 1);
$mw-&gt;Checkbutton(-text =&gt; "I hate it!")-&gt;pack(-side =&gt; 'left', 
                                              -expand =&gt; 1);
$mw-&gt;Checkbutton(-text =&gt; "I don't care")-&gt;pack(-side =&gt; 'left', 
                                                -expand =&gt; 1);
MainLoop; </pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-4</a> shows the much more organized window.</p>

<a name="mastperltk-CHP-2-FIG-4" /></a><div class="figure"><img src="figs/mptk.0204.gif" alt="Figure 2-4" width="327" height="99" /></div><h4 class="objtitle">Figure 2-4. Window with widgets managed by pack using some options</h4>

<p><a name="INDEX-133" /></a><a name="INDEX-134" /></a><a name="INDEX-135" /></a><a name="INDEX-136" /></a>Using
<tt class="literal">pack</tt> allows you to control the:
</p>

<ul><li>
<p>Position in the window relative to the window or Frame edges</p>
</li><li>
<p>Size of widgets, relative to other widgets or absolute</p>
</li><li>
<p>Spacing between widgets</p>
</li><li>
<p>Position in the window's or Frame's widget list</p>
</li></ul>
<p>The options, values, and defaults are listed and discussed in the
following section.
</p>

<a name="mastperltk-CHP-2-SECT-1.1" /></a><div class="sect2">
<h3 class="sect2">2.1.1. Options for pack</h3>

<p><a name="INDEX-137" /></a>This list shows all the options available
when you call <tt class="literal">pack</tt> (the default values are shown
in bold):
</p>

<dl>
<a name="INDEX-138" /></a><a name="INDEX-139" /></a><a name="INDEX-140" /></a><a name="INDEX-141" /></a><a name="INDEX-142" /></a><a name="INDEX-143" /></a><a name="INDEX-144" /></a><a name="INDEX-145" /></a><a name="INDEX-146" /></a><a name="INDEX-147" /></a><a name="INDEX-148" /></a><a name="INDEX-149" /></a><dt><tt class="literal">-side =&gt; 'left' | 'right' | '</tt><tt class="userinput"><b>top</b></tt><tt class="literal">' | 'bottom</tt></dt>
<dd>
<a name="INDEX-150" /></a><a name="INDEX-151" /></a><a name="INDEX-152" /></a><a name="INDEX-153" /></a><a name="INDEX-154" /></a><a name="INDEX-155" /></a><a name="INDEX-156" /></a><a name="INDEX-157" /></a><a name="INDEX-158" /></a>Puts
the widget against the specified side of the window or Frame
<p></p>
</dd>


<a name="INDEX-159" /></a><a name="INDEX-160" /></a><a name="INDEX-161" /></a><a name="INDEX-162" /></a><a name="INDEX-163" /></a><dt><tt class="literal">-fill =&gt; '</tt><tt class="userinput"><b>none</b></tt><tt class="literal">' | 'x' | 'y'| 'both'</tt></dt>
<dd>
<a name="INDEX-164" /></a><a name="INDEX-165" /></a><a name="INDEX-166" /></a>Causes the widget to fill the allocation
rectangle in the specified direction
<p></p>
</dd>


<a name="INDEX-167" /></a><a name="INDEX-168" /></a><a name="INDEX-169" /></a><dt><tt class="literal">-expand =&gt; 1 |</tt> <tt class="userinput"><b>0</b></tt></dt>
<dd>
<a name="INDEX-170" /></a><a name="INDEX-171" /></a><a name="INDEX-172" /></a>Causes the
allocation rectangle to fill the remaining space available in the
window or Frame
<p></p>
</dd>


<a name="INDEX-173" /></a><a name="INDEX-174" /></a><dt><tt class="literal">-anchor =&gt; 'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw' | '</tt><tt class="userinput"><b>center</b></tt><tt class="literal">'</tt></dt>
<dd>
<a name="INDEX-175" /></a><a name="INDEX-176" /></a>Anchors the widget inside the
allocation rectangle
<p></p>
</dd>


<dt><tt class="literal">-after =&gt; $otherwidget</tt></dt>
<dd>
<a name="INDEX-177" /></a>Puts <tt class="literal">$widget</tt> after
<tt class="literal">$otherwidget</tt> in packing order
<p></p>
</dd>


<dt><tt class="literal">-before =&gt; $otherwidget</tt></dt>
<dd>
<a name="INDEX-178" /></a>Puts <tt class="literal">$widget</tt> before
<tt class="literal">$otherwidget</tt> in packing order
<p></p>
</dd>


<dt><tt class="literal">-in =&gt; $otherwindow</tt></dt>
<dd>
<a name="INDEX-179" /></a>Packs <tt class="literal">$widget</tt> inside of
<tt class="literal">$otherwindow</tt> rather than the parent of
<tt class="literal">$widget</tt>, which is the default
<p></p>
</dd>


<a name="INDEX-180" /></a><dt><tt class="literal">-ipadx =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-181" /></a><a name="INDEX-182" /></a>Increases the size of the widget
horizontally by <tt><em class="replaceable"><tt>amount</tt></em></tt>
<p></p>
</dd>


<dt><tt class="literal">-ipady =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-183" /></a><a name="INDEX-184" /></a><a name="INDEX-185" /></a>Increases the size of the widget
vertically by <tt><em class="replaceable"><tt>amount</tt></em></tt>
<p></p>
</dd>


<dt><tt class="literal">-padx =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-186" /></a><a name="INDEX-187" /></a>Places
padding on the left and right of the widget
<p></p>
</dd>


<a name="INDEX-188" /></a><dt><tt class="literal">-pady =&gt;</tt> <tt><em class="replaceable"><tt>amount</tt></em></tt></dt>
<dd>
<a name="INDEX-189" /></a><a name="INDEX-190" /></a><a name="INDEX-191" /></a><a name="INDEX-192" /></a><a name="INDEX-193" /></a><a name="INDEX-194" /></a><a name="INDEX-195" /></a><a name="INDEX-196" /></a>Places padding on the top and bottom of
the widget
<p></p>
</dd>

</dl>

</div>
<a name="mastperltk-CHP-2-SECT-1.2" /></a><div class="sect2">
<h3 class="sect2">2.1.2. Positioning Widgets</h3>

<p><a name="INDEX-197" /></a><a name="INDEX-198" /></a><a name="INDEX-199" /></a><a name="INDEX-200" /></a>Each window (or Frame) has four
sides to it: top, bottom, left, and right. The packer uses these
sides as points of reference for widgets. By default,
<tt class="literal">pack</tt> places the widgets against the top of the
Toplevel or Frame.
</p>

<p><a name="INDEX-201" /></a>You can control
the side a widget is placed against with the <tt class="literal">-side</tt>
option:
</p>

<blockquote><pre class="code">-side =&gt;  'left' | 'right' | '<tt class="userinput"><b>top</b></tt>' | 'bottom' </pre></blockquote>

<p>For example, if we would like our Button against the left edge of the
window, we can specify <tt class="literal">-side =&gt;</tt>
<tt class="literal">'left'</tt>.
</p>

<p><a name="INDEX-202" /></a>Using
our Hello World example as a base, let's look at what happens
when we <tt class="literal">pack</tt> our Button against the different
sides. In <a href="ch02_01.htm">Figure 2-5</a>, the only lines we change are
the <tt class="literal">-&gt;pack</tt> part of the Button creation line and
the "Hello World" string in the
<tt class="literal">$mw-&gt;title</tt> command to easily show the new
options to <tt class="literal">pack</tt>.
</p>

<a name="mastperltk-CHP-2-FIG-5" /></a><div class="figure"><img src="figs/mptk.0205.gif" alt="Figure 2-5" width="482" height="478" /></div><h4 class="objtitle">Figure 2-5. Packing a button against different sides</h4>

<p>The windows in <a href="ch02_01.htm">Figure 2-5</a> have been made a bit
larger to emphasize the difference that using alternative values for
<tt class="literal">-side</tt> makes. Normally, the window will be only as
large as required to show the Button. When you are deciding how to
place widgets in a window, it is always a good idea to see what
happens when you make the window both larger and smaller. Make sure
the behavior you get is what you want.
</p>

<p>So far, <tt class="literal">pack</tt> seems pretty simple, but what if you
want to put more than one Button in your application? What happens
when we add more Buttons?
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; 'Done1', -command =&gt; sub { exit })-&gt;pack;
$mw-&gt;Button(-text =&gt; 'Done2', -command =&gt; sub { exit })-&gt;pack;
$mw-&gt;Button(-text =&gt; 'Done3', -command =&gt; sub { exit })-&gt;pack;
$mw-&gt;Button(-text =&gt; 'Done4', -command =&gt; sub { exit })-&gt;pack;</pre></blockquote>

<p>Since the default <tt class="literal">-side</tt> is <tt class="literal">top</tt>,
we would expect all the Buttons to be mushed up against the top of
the window, right? Sort of. The packer allocates space for each
widget, then manipulates the widget inside that space and the space
inside the window.
</p>

<p><a href="ch02_01.htm">Figure 2-6</a> shows what the window with the four Done
Buttons looks like; the next section explains why.
</p>

<a name="mastperltk-CHP-2-FIG-6" /></a><div class="figure"><img src="figs/mptk.0206.gif" alt="Figure 2-6" width="96" height="143" /></div><h4 class="objtitle">Figure 2-6. Four Buttons packed with default settings</h4>

</div>
<a name="mastperltk-CHP-2-SECT-1.3" /></a><div class="sect2">
<h3 class="sect2">2.1.3. Allocation Rectangles</h3>

<p><a name="INDEX-203" /></a>When
given an item to pack, the packer first looks to see which side (top,
bottom, right, or left) to use. It then sets aside an invisible
rectangular area across the length of that side for use only by that
widget.
</p>

<p><a name="INDEX-204" /></a>In <a href="ch02_01.htm">Figure 2-7</a>, the solid-line rectangle represents our empty
window (or Frame), and the dotted-line rectangle is the area the
packer sets aside for the first Button. It actually does go all the
way across the width or height of the window, but to make it easier
to see, it's shown indented slightly.
</p>

<a name="mastperltk-CHP-2-FIG-7" /></a><div class="figure"><img src="figs/mptk.0207.gif" alt="Figure 2-7" width="434" height="110" /></div><h4 class="objtitle">Figure 2-7. Rectangular areas set aside by the packer when using -side =&gt; 'top' and -side =&gt; 'left'</h4>

<p>The dimensions for the dotted-line box, which we'll call the
<em class="firstterm">allocation rectangle</em>, are calculated based on
the size of the requesting widget. For both the top and bottom sides,
the allocation rectangle is as wide as the window and only as tall as
the widget to be placed in it. For the right and left sides, the
allocation rectangle is as tall as the window but only as wide as
required to fit the widget.
</p>

<p>Our examples so far have used Buttons in which the text of the Button
determines its width. If we create a Button with the text
"Done" and one with the text "Done, Finished,
That's it," the second Button is going to be much wider
than the first. When these two Buttons are placed up against either
the right or left side of the window, the second Button has a wider
allocation rectangle than the first. If we place those same two
Buttons against the top and the bottom, the allocation rectangles are
the same height and width, because the window, not the widget,
determines the width.
</p>

<p>After the size of the allocation rectangle is determined, the widget
is placed within the allocation rectangle according to other options
passed and/or the default values of those options. We will go over
those options and how they can affect the allocation rectangle later.
</p>

<p>Once the first widget has been placed in the window, the amount of
area available for subsequent allocation rectangles is smaller,
because the first allocation rectangle has used some of the space
(see <a href="ch02_01.htm">Figure 2-8</a>).
</p>

<a name="mastperltk-CHP-2-FIG-8" /></a><div class="figure"><img src="figs/mptk.0208.gif" alt="Figure 2-8" width="257" height="135" /></div><h4 class="objtitle">Figure 2-8. Second allocation rectangle when default side 'top' is used</h4>

<p><a name="INDEX-205" /></a>When more Buttons are placed against
different sides in the same window, the results will vary depending
on the order.
</p>

<p>We'll start by placing one Button along the top, one along the
bottom, and then Buttons on the right and left:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "TOP", -command =&gt; sub { exit })
   -&gt;pack(-side =&gt; 'top');

$mw-&gt;Button(-text =&gt; "BOTTOM", -command =&gt; sub { exit })
   -&gt;pack(-side =&gt; 'bottom');

$mw-&gt;Button(-text =&gt; "RIGHT", -command =&gt; sub { exit })
   -&gt;pack(-side =&gt; 'right');

$mw-&gt;Button(-text =&gt; "LEFT", -command =&gt; sub { exit })
  -&gt;pack(-side =&gt; 'left');</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-9</a> shows the allocation rectangles for this
window.
</p>

<a name="mastperltk-CHP-2-FIG-9" /></a><div class="figure"><img src="figs/mptk.0209.gif" alt="Figure 2-9" width="395" height="150" /></div><h4 class="objtitle">Figure 2-9. Allocation rectangles for four Buttons</h4>

<p><a href="ch02_01.htm">Figure 2-10</a> shows what the actual window looks like,
both normal size and resized so it's a bit larger.
</p>

<a name="mastperltk-CHP-2-FIG-10" /></a><div class="figure"><img src="figs/mptk.0210.gif" alt="Figure 2-10" width="342" height="148" /></div><h4 class="objtitle">Figure 2-10. Four Buttons placed around the sides of the window</h4>

</div>
<a name="mastperltk-CHP-2-SECT-1.4" /></a><div class="sect2">
<h3 class="sect2">2.1.4. Filling the Allocation Rectangle</h3>

<p><a name="INDEX-206" /></a><a name="INDEX-207" /></a>Normally,
the widget is left at the default size, which is usually smaller than
the allocation rectangle created for it. If the
<tt class="literal">-fill</tt> option is used, the widget will resize
itself to fill the allocation rectangle according to the value given.
The possible values are:
</p>

<blockquote><pre class="code">-fill =&gt; '<tt class="userinput"><b>none</b></tt>' | 'x' | 'y' | 'both'</pre></blockquote>

<p>Using the value <tt class="literal">'x'</tt> will resize the widget in the
x direction. Likewise, <tt class="literal">'y'</tt> will cause the widget
to resize in the y direction. Using <tt class="literal">-fill</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">'both'</tt> is a good way to
see exactly what size and placement was given to the allocation
rectangle, because <tt class="literal">'both'</tt> resizes the widget in
both x and y directions. Using our four-Button example again,
we'll specify <tt class="literal">-fill</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">'both'</tt>:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "TOP", -command =&gt; sub { exit })
  -&gt;pack(-side =&gt; 'top', -fill =&gt; 'both');
 
$mw-&gt;Button(-text =&gt; "BOTTOM", -command =&gt; sub { exit })
  -&gt;pack(-side =&gt; 'bottom', -fill =&gt; 'both');

$mw-&gt;Button(-text =&gt; "RIGHT", -command =&gt; sub { exit })
  -&gt;pack(-side =&gt; 'right', -fill =&gt; 'both');

$mw-&gt;Button(-text =&gt; "LEFT", -command =&gt; sub { exit })
  -&gt;pack(-side =&gt; 'left', -fill =&gt; 'both');</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-11</a> shows the resulting window.</p>

<a name="mastperltk-CHP-2-FIG-11" /></a><div class="figure"><img src="figs/mptk.0211.gif" alt="Figure 2-11" width="181" height="110" /></div><h4 class="objtitle">Figure 2-11. Four Buttons packed to each side using -fill =&gt; 'both'</h4>

<p>If we switch the Button we create first, we get a different result.
The window in <a href="ch02_01.htm">Figure 2-12</a> was created by packing the
widgets in this order: left, right, top, bottom.
</p>

<a name="mastperltk-CHP-2-FIG-12" /></a><div class="figure"><img src="figs/mptk.0212.gif" alt="Figure 2-12" width="181" height="110" /></div><h4 class="objtitle">Figure 2-12. Four Buttons packed to each side in a different order using -fill =&gt; 'both'</h4>

<p><a href="ch02_01.htm">Figure 2-13</a> demonstrates yet another order, which
really shows that the allocation rectangles change size depending on
which is packed first.
</p>

<a name="mastperltk-CHP-2-FIG-13" /></a><div class="figure"><img src="figs/mptk.0213.gif" alt="Figure 2-13" width="166" height="155" /></div><h4 class="objtitle">Figure 2-13. Four Buttons packed in order of top, right, bottom, and left</h4>

<p><a name="INDEX-208" /></a><a name="INDEX-209" /></a>A
<a name="INDEX-210" /></a><a name="INDEX-211" /></a>common use of <tt class="literal">-fill</tt> is
on widgets with Scrollbars: Listbox, Canvas, and Text. Usually the
Scrollbars are along the edge of the window and you want the Listbox
to fill the remaining area. See <a href="ch06_01.htm">Chapter 6, "The Scrollbar Widget"</a>
and <a href="ch07_01.htm">Chapter 7, "The Listbox Widget"</a> for more information.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-1.5" /></a><div class="sect2">
<h3 class="sect2">2.1.5. Expanding the Allocation Rectangle</h3>

<p><a name="INDEX-212" /></a>
<a name="INDEX-213" /></a>The <tt class="literal">-expand</tt>
option manipulates the allocation rectangle and not the widget inside
it. The value associated with <tt class="literal">-expand</tt> is a Boolean
value.
</p>

<blockquote><pre class="code">-expand =&gt; 1 | <tt class="userinput"><b>0</b></tt></pre></blockquote>

<p>Given a true value, the allocation rectangle will expand into any
leftover space in the window, depending on which side the widget was
packed.
</p>

<p>Widgets packed with side <tt class="literal">'right'</tt> or
<tt class="literal">'left'</tt> will expand in the horizontal direction.
Widgets packed with side <tt class="literal">'top'</tt> or
<tt class="literal">'bottom'</tt> will expand in the vertical direction. If
more than one widget is packed with <tt class="literal">-expand</tt> turned
on, the extra space in the window is divided evenly among all the
allocation rectangles that want it.
</p>

<p>In <a href="ch02_01.htm">Figure 2-11</a> and <a href="ch02_01.htm">Figure 2-12</a>, you saw that there was some space left in the
center of the window that wasn't occupied by any widget. If we
change the code and add <tt class="literal">-expand =&gt;</tt>
<tt class="literal">1</tt> to the list of pack options for each Button, the
result is the window in <a href="ch02_01.htm">Figure 2-14</a>.
</p>

<a name="mastperltk-CHP-2-FIG-14" /></a><div class="figure"><img src="figs/mptk.0214.gif" alt="Figure 2-14" width="180" height="141" /></div><h4 class="objtitle">Figure 2-14. Four Buttons using the -expand =&gt; 1 and -fill =&gt; 'both' options</h4>

<p>Note that in <a href="ch02_01.htm">Figure 2-14</a>, <tt class="literal">fill</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">'both'</tt> is left in the
code. If we omit the <tt class="literal">-fill</tt> option, the Buttons
stay their original sizes, but the allocation rectangles (which are
invisible) take over the extra space in the window (see <a href="ch02_01.htm">Figure 2-15</a>). 
</p>

<a name="mastperltk-CHP-2-FIG-15" /></a><div class="figure"><img src="figs/mptk.0215.gif" alt="Figure 2-15" width="171" height="173" /></div><h4 class="objtitle">Figure 2-15. Four Buttons using -expand =&gt; 1 and -fill =&gt; 'none'</h4>

<p>In <a href="ch02_01.htm">Figure 2-15</a>, the Buttons are centered in their
allocation rectangles because of the default value of the
<tt class="literal">-anchor</tt> option, which is
<tt class="literal">'center'</tt>.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-1.6" /></a><div class="sect2">
<h3 class="sect2">2.1.6. Anchoring a Widget in Its Allocation Rectangle</h3>

<p><a name="INDEX-214" /></a><a name="INDEX-215" /></a>The
<tt class="literal">-anchor</tt> option manipulates the widget inside the
allocation rectangle by anchoring it to the place indicated by the
value passed in. It uses the points of a compass as references.
</p>

<blockquote><pre class="code">-anchor =&gt;  'e' | 'w' | 'n' | 's' | 'ne' | 'nw' | 'se' | 'sw' | '<tt class="userinput"><b>center</b></tt>'</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-16</a> shows those locations in an example
allocation rectangle.
</p>

<a name="mastperltk-CHP-2-FIG-16" /></a><div class="figure"><img src="figs/mptk.0216.gif" alt="Figure 2-16" width="180" height="123" /></div><h4 class="objtitle">Figure 2-16. Allocation rectangle with -anchor points labeled</h4>

<p>The default for <tt class="literal">-anchor</tt> is
<tt class="literal">'center'</tt>, which keeps the widget in the center of
its allocation rectangle. Unless the <tt class="literal">-expand</tt>
option is set to a true value, this won't seem to change much
of anything in the window. As seen in <a href="ch02_01.htm">Figure 2-17</a>,
which shows the result of using the <tt class="literal">-expand</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">1</tt> option, it is obvious
that the widget sticks to that center position when the window is
resized.
</p>

<a name="mastperltk-CHP-2-FIG-17" /></a><div class="figure"><img src="figs/mptk.0217.gif" alt="Figure 2-17" width="130" height="132" /></div><h4 class="objtitle">Figure 2-17. Default behavior of -anchor with -expand set to 1</h4>

<p>If all other defaults are used to pack the widget, <a href="ch02_01.htm">Figure 2-18</a> shows what <tt class="literal">-anchor =&gt;</tt>
<tt class="literal">'e'</tt> and <tt class="literal">-anchor =&gt; 'w'</tt> do.
</p>

<a name="mastperltk-CHP-2-FIG-18" /></a><div class="figure"><img src="figs/mptk.0218.gif" alt="Figure 2-18" width="421" height="110" /></div><h4 class="objtitle">Figure 2-18. Examples of -anchor =&gt; 'e' and -anchor =&gt; 'w'</h4>

<p><a name="INDEX-216" /></a>Remember that the allocation rectangle is
created based on which side the widget is packed against, so certain
combinations will appear not to have had any effect. For example:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Done", -command =&gt; sub { exit })
  -&gt;pack(-side =&gt; 'top', -anchor =&gt; 'n');</pre></blockquote>

<p><a name="INDEX-217" /></a>This code fragment will leave the widget
exactly where it was if the <tt class="literal">-anchor</tt> option had not
been specified, because the allocation rectangle does not change size
at all. If the <tt class="literal">-expand</tt> option is also specified,
when the window is resized, the widget sticks to the north side of
the window. If <tt class="literal">-anchor</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">'s'</tt> is specified, when the window is resized, the
widget sticks to the south side of the window.
</p>

<p>The <tt class="literal">-anchor</tt> option is more often used to line up
several widgets in a row. <a href="ch02_01.htm">Figure 2-19</a> and <a href="ch02_01.htm">Figure 2-20</a> show two common examples.
</p>

<a name="mastperltk-CHP-2-FIG-19" /></a><div class="figure"><img src="figs/mptk.0219.gif" alt="Figure 2-19" width="70" height="116" /></div><h4 class="objtitle">Figure 2-19. Window with three Buttons all packed with -side =&gt; 'top', -anchor =&gt; 'w'</h4>

<a name="mastperltk-CHP-2-FIG-20" /></a><div class="figure"><img src="figs/mptk.0220.gif" alt="Figure 2-20" width="186" height="64" /></div><h4 class="objtitle">Figure 2-20. Window with three Buttons all packed with -side =&gt; 'left', -anchor =&gt; 'n'</h4>

<p>Sometimes when <tt class="literal">-side</tt> and
<tt class="literal">-anchor</tt> are used together, the results don't
seem to be what you would expect at first glance. Always keep in mind
that invisible allocation rectangle and how it affects what you see
on the screen.<a name="INDEX-218" /></a><a name="INDEX-219" /></a> 
</p>

</div>
<a name="mastperltk-CHP-2-SECT-1.7" /></a><div class="sect2">
<h3 class="sect2">2.1.7. Widget Order in the Window</h3>

<p><a name="INDEX-220" /></a><a name="INDEX-221" /></a><a name="INDEX-222" /></a><a name="INDEX-223" /></a>Each window into which widgets are packed
keeps track of those widgets in an ordered list. The order of this
list is determined by the order in which the widgets were packed; the
last item packed is the last item in the list. Using the
<tt class="literal">-after</tt> option, you can change the default order by
specifying which widget should be placed after your new widget. On
the opposite end, if you use the <tt class="literal">-before</tt> option,
you can put the new widget before a previously packed widget:
</p>

<blockquote><pre class="code">-after =&gt; $otherwidget
-before =&gt; $otherwidget</pre></blockquote>

<p>As an example, let's create four Buttons
(<tt class="literal">$widget1</tt>, <tt class="literal">$widget2</tt>,
<tt class="literal">$widget3</tt>, and <tt class="literal">$widget4</tt>) and
only pack three to begin with. The <tt class="literal">pack</tt> command
for <tt class="literal">$widget4</tt> might then be:
</p>

<blockquote><pre class="code">$widget4-&gt;pack(-after =&gt; $widget1);</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-21</a> shows two windows: one before
<tt class="literal">$widget4</tt> is packed and one after
<tt class="literal">$widget4</tt> is packed.
</p>

<a name="mastperltk-CHP-2-FIG-21" /></a><div class="figure"><img src="figs/mptk.0221.gif" alt="Figure 2-21" width="446" height="49" /></div><h4 class="objtitle">Figure 2-21. The window on the right has the Done4 Button packed using -after =&gt; $widget1</h4>

<p>If we want to put <tt class="literal">$widget4</tt> in front of
<tt class="literal">$widget1</tt>, we use this command:
</p>

<blockquote><pre class="code">$widget4-&gt;pack(-before =&gt; $widget1);</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-22</a> shows the results. </p>

<a name="mastperltk-CHP-2-FIG-22" /></a><div class="figure"><img src="figs/mptk.0222.gif" alt="Figure 2-22" width="234" height="49" /></div><h4 class="objtitle">Figure 2-22. Button with Done4 label packed using -before =&gt; $done1</h4>

</div>
<a name="mastperltk-CHP-2-SECT-1.8" /></a><div class="sect2">
<h3 class="sect2">2.1.8. Padding the Size of the Widget</h3>

<p><a name="INDEX-224" /></a><a name="INDEX-225" /></a><a name="INDEX-226" /></a>The final way to force
<tt class="literal">pack</tt> to size the widget is to use the padding
options. The first set of padding options affects the widget itself
by adding to its default size. Different amounts can be added in the
x and y directions, or they can be the same. To specify how much
padding should occur in the x direction, use the
<tt class="literal">-ipadx</tt> option:
</p>

<blockquote><pre class="code">-ipadx =&gt; <tt><em class="replaceable">amount</em></tt></pre></blockquote>

<p>Specify padding for the y direction like this:</p>

<blockquote><pre class="code">-ipady =&gt; <tt><em class="replaceable">amount</em></tt></pre></blockquote>

<p>The <tt><em class="replaceable">amount</em></tt> is a
number that is a valid screen distance. We'll discuss the
definition of a valid screen distance in the next section.
</p>

<p>Both the <tt class="literal">-ipadx</tt> and <tt class="literal">-ipady</tt>
options change the size of the widget before the allocation rectangle
is calculated. <tt class="literal">-ipadx</tt> adds the amount specified to
both the right and left sides of the widget. The overall width of the
widget is increased by 2 x <tt><em class="replaceable">amount</em></tt>.
<tt class="literal">-ipady</tt> adds to the top and bottom of the widget,
causing the overall height of the widget to increase by 2x
<tt><em class="replaceable">amount</em></tt>. <a href="ch02_01.htm">Figure 2-23</a> shows how the <tt class="literal">-ipadx</tt> and
<tt class="literal">-ipady</tt> options affect a
Button.
</p>

<a name="mastperltk-CHP-2-FIG-23" /></a><div class="figure"><img src="figs/mptk.0223.gif" alt="Figure 2-23" width="195" height="67" /></div><h4 class="objtitle">Figure 2-23. The Done1 Button was created with options -ipadx =&gt; 10, -ipady =&gt; 10</h4>

<p>The other kind of padding is inserted between the edge of the widget
and the edge of the allocation rectangle and is done with the
<tt class="literal">-padx</tt> and <tt class="literal">-pady</tt> options:
</p>

<blockquote><pre class="code">-padx =&gt; <tt><em class="replaceable">amount</em></tt>
-pady =&gt; <tt><em class="replaceable">amount</em></tt></pre></blockquote>

<p>Using <tt class="literal">-padx</tt> and <tt class="literal">-pady</tt> does not
affect the size of the widget, but it does affect the size of the
allocation rectangle. It acts as a buffer around the widget,
protecting it from touching other widgets. <a href="ch02_01.htm">Figure 2-24</a> shows the effects of using
<tt class="literal">-padx</tt> and <tt class="literal">-pady</tt>.
</p>

<a name="mastperltk-CHP-2-FIG-24" /></a><div class="figure"><img src="figs/mptk.0224.gif" alt="Figure 2-24" width="195" height="67" /></div><h4 class="objtitle">Figure 2-24. The Done1 Button was created with options -padx =&gt; 10, -pady =&gt; 10</h4>

<p>A good way to remember the difference between
<tt class="literal">-ipadx/y</tt> and <tt class="literal">-padx/y</tt> is that
the "i" stands for "inside the widget" or
"internal padding."
</p>

<a name="mastperltk-CHP-2-SECT-1.8.1" /></a><div class="sect3">
<h3 class="sect3">2.1.8.1. Valid screen distances</h3>

<p><a name="INDEX-227" /></a><a name="INDEX-228" /></a>Many times you'll see options that
require values specified in screen units (or what is called a valid
screen distance). The options <tt class="literal">-ipadx</tt> and
<tt class="literal">-ipady</tt> are examples of this type of option. Always
check to see what value the option actually requires.
</p>

<p>A screen unit is a number followed by a designation for the unit to
use. If there is no designation, the units are in pixels. <a href="ch02_01.htm">Table 2-1</a> shows all the possibilities.
</p>

<a name="mastperltk-CHP-2-TABLE-1" /></a><h4 class="objtitle">Table 2-1. Valid screen units</h4><table border="1">




<tr>
<th>
<p>Designator</p>
</th>
<th>
<p>Meaning</p>
</th>
<th>
<p>Examples</p>
</th>
</tr>


<tr>
<td>
<p>(None)</p>
</td>
<td>
<p>Pixels (default)</p>
</td>
<td>
<p><tt class="literal">20</tt>, <tt class="literal">30</tt>,
<tt class="literal">"20"</tt>, <tt class="literal">"40"</tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">c</tt><a name="INDEX-229" /></a>
</p>
</td>
<td>
<p>Centimeters</p>
</td>
<td>
<p><tt class="literal">'3c'</tt>, <tt class="literal">'4c'</tt>,
<tt class="literal">"3c"</tt>
</p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">i</tt></p>
</td>
<td>
<p>Inches</p>
</td>
<td>
<p><tt class="literal">'2i'</tt>, <tt class="literal">"3i"</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">m</tt></p>
</td>
<td>
<p>Millimeters</p>
</td>
<td>
<p><tt class="literal">'4m'</tt>, <tt class="literal">"4m"</tt></p>
</td>
</tr>
<tr>
<td>
<p><tt class="literal">p</tt></p>
</td>
<td>
<p>Printer points (1/72 inch)</p>
</td>
<td>
<p><tt class="literal">"72p"</tt>, <tt class="literal">'40p'</tt></p>
</td>
</tr>

</table><p>

<p><a name="INDEX-230" /></a><a name="INDEX-231" /></a><a name="INDEX-232" /></a><a name="INDEX-233" /></a>To use these designators, it is necessary
to use quotes (either single or double) around the value. Here are
some examples:
</p>

<blockquote><pre class="code">$button-&gt;pack(-ipadx =&gt; 20);      # 20 pixels
$button-&gt;pack(-ipadx =&gt; '20');    # Also 20 pixels
$button-&gt;pack(-ipadx =&gt; "1i");    # 1 inch
$button-&gt;pack(-ipadx =&gt; '1m');    # 1 millimeter
$button-&gt;pack(-ipadx =&gt; 1);       # 1 pixel
$button-&gt;pack(-ipadx =&gt; "20p");   # 20 printer points</pre></blockquote>

<p>Remember that a <tt class="literal">p</tt> designator does not stand for
pixels, but printer points.
</p>

</div>
</div>
<a name="mastperltk-CHP-2-SECT-1.9" /></a><div class="sect2">
<h3 class="sect2">2.1.9. Displaying in a Parent Other Than Your Own</h3>

<p><a name="INDEX-234" /></a>By default,
when a widget is packed, it is packed inside the region that created
it. Sometimes it is necessary to display a widget inside a different
region. Use the <tt class="literal">-in</tt> option to do so:
</p>

<blockquote><pre class="code">-in =&gt; $otherwindow</pre></blockquote>

<p>It puts the new widget at the end of the packing order for
<tt class="literal">$otherwindow</tt> and displays it accordingly. All
other options specified in the <tt class="literal">pack</tt> call still
apply.
</p>

</div>
<a name="mastperltk-CHP-2-SECT-1.10" /></a><div class="sect2">
<h3 class="sect2">2.1.10. Methods Associated with pack</h3>

<p><a name="INDEX-235" /></a>There are a few methods that
are used in conjunction with the <tt class="literal">pack</tt> geometry
manager. They allow the programmer to get information about either
the widget that has been packed or the parent widget in which other
widgets are packed.
</p>

<a name="mastperltk-CHP-2-SECT-1.10.1" /></a><div class="sect3">
<h3 class="sect3">2.1.10.1. Unpacking a widget</h3>

<p><a name="INDEX-236" /></a><a name="INDEX-237" /></a><a name="INDEX-238" /></a>To unpack a widget from a window
or Frame, use the <tt class="literal">packForget</tt> method:
</p>

<blockquote><pre class="code">$widget-&gt;packForget( );</pre></blockquote>

<p><tt class="literal">packForget</tt> makes it look like the widget
disappears. The widget is not destroyed, but it is no longer managed
by <tt class="literal">pack</tt>. The widget is removed from the packing
order, so if it's repacked later, it appears at the end of the
packing order.
</p>

</div>

<a name="mastperltk-CHP-2-SECT-1.10.2" /></a><div class="sect3">
<h3 class="sect3">2.1.10.2. Retrieving pack information</h3>

<p>To return a list containing all the <tt class="literal">pack</tt>
configuration information about a widget, use
<tt class="literal">packInfo</tt>:
</p>

<blockquote><pre class="code">@list = $widget-&gt;packInfo( ); </pre></blockquote>

<p><a name="INDEX-239" /></a><a name="INDEX-240" /></a>The
format of the list is in option/value pairs. The first pair in the
list is <tt class="literal">-in</tt> and the current window that contains
<tt class="literal">$widget</tt> (usually also the parent). Here's an
example of the information returned from <tt class="literal">packInfo</tt>:
</p>


<blockquote><pre class="code">-in MainWindow=HASH(0x818dcf4) -anchor n -expand 0 -fill none -ipadx 0 -ipady 0 -padx 
10 -pady 10 -side left</pre></blockquote>

<p>From this we can tell that we packed our <tt class="literal">$widget</tt>
into the MainWindow rather than into a Frame. Since the list has a
"paired" quality to it, we could easily store the result
from <tt class="literal">packInfo</tt> in a hash and reference the
different option values by using a key to the hash:
</p>

<blockquote><pre class="code">%packinfo = $widget-&gt;packInfo;
print "Side used: ", $packinfo{-side}, "\n";</pre></blockquote>

</div>

<a name="mastperltk-CHP-2-SECT-1.10.3" /></a><div class="sect3">
<h3 class="sect3">2.1.10.3. Disabling and enabling automatic resizing</h3>

<p>Unless you've set a preferred window size via the
<tt class="literal">geometry</tt> method explicitly, when you put a widget
inside a window, the window (or Frame) will resize itself to
accommodate the widget. If you are placing widgets inside your window
dynamically while the program is running, the window will appear to
bounce from size to size. You can turn this behavior off by using
<tt class="literal">packPropagate</tt> on the Frame or
Toplevel widget:
</p>

<blockquote><pre class="code">$widget-&gt;packPropagate(0);</pre></blockquote>

<p>If set to <tt class="literal">0</tt> or <tt class="literal">'off'</tt>,
<tt class="literal">packPropagate</tt> changes the behavior of the widget
so it doesn't resize to accommodate items packed inside of it.
When a false value is sent to <tt class="literal">packPropagate</tt> before
widgets are placed inside it, this automatic resizing doesn't
happen, so you can't see any of the widgets placed inside the
parent until it is manually resized. If you call
<tt class="literal">packPropagate</tt> after the widgets have been placed
inside it, the widget will ignore any size changes from its child
widgets.
</p>

</div>

<a name="mastperltk-CHP-2-SECT-1.10.4" /></a><div class="sect3">
<h3 class="sect3">2.1.10.4. Listing widgets</h3>

<p><a name="INDEX-241" /></a><a name="INDEX-242" /></a><a name="INDEX-243" /></a><a name="INDEX-244" /></a>You
can determine the widgets your Frame or Toplevel holds with the
<tt class="literal">packSlaves</tt> method:
</p>

<blockquote><pre class="code">@list = $parentwidget-&gt;packSlaves( );</pre></blockquote>

<p><tt class="literal">packSlaves</tt> returns an ordered list of all the
widgets that were packed into <tt class="literal">$parentwidget</tt>. An
empty string (or empty list) is returned if no widgets were packed
into <tt class="literal">$parentwidget</tt>.
</p>

<p>The list returned from <tt class="literal">packSlaves</tt> looks like this:</p>

<blockquote><pre class="code">Tk::Button=HASH(0x81b2970) Tk::Button=HASH(0x8116ccc) Tk::Button=HASH(0x81bcdd4)</pre></blockquote>

<p><a name="INDEX-245" /></a>Each
item is a reference to a packed widget and can be used to configure
it. For example, you can increase the size of each widget by 20 in
both the x and y directions by looping through it and
"packing" it with new information. Using our good window
example in <a href="ch02_01.htm">Figure 2-4</a>, we can add a Button that
will contain a subroutine that uses <tt class="literal">packSlaves</tt>:
</p>

<blockquote><pre class="code">$mw-&gt;Button(-text =&gt; "Enlarge",
            -command =&gt; \&amp;repack_kids)-&gt;pack(-side =&gt; 'bottom',
                                             -anchor =&gt; 'center');
sub repack_kids {
  my @kids = $mw-&gt;packSlaves;
  foreach (@kids) {
    $_-&gt;pack(-ipadx =&gt; 20, -ipady =&gt; 20);
  }
}</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-25</a> shows the resulting window.</p>

<a name="mastperltk-CHP-2-FIG-25" /></a><div class="figure"><img src="figs/mptk.0225.gif" alt="Figure 2-25" width="327" height="125" /></div><h4 class="objtitle">Figure 2-25. Window before pressing Enlarge Button </h4>

<p>Let's look at what happens when we press the Enlarge Button. As
shown in <a href="ch02_01.htm">Figure 2-26</a>, all the widgets are now
repacked with additional parameters of <tt class="literal">-ipadx</tt>
<tt class="literal">=&gt;</tt> <tt class="literal">20,</tt>
<tt class="literal">-ipady</tt> <tt class="literal">=&gt;</tt>
<tt class="literal">20</tt>. These new options are in addition to any other
parameters with which the widgets were packed previously. If an
option is repeated, the last one specified overrides the previous
ones.
</p>

<a name="mastperltk-CHP-2-FIG-26" /></a><div class="figure"><img src="figs/mptk.0226.gif" alt="Figure 2-26" width="361" height="264" /></div><h4 class="objtitle">Figure 2-26. Window after pressing Enlarge Button</h4>

<p>The window is suddenly huge! Subsequent presses of the Enlarge Button
will do nothing more to the window, because each of the widgets
already has an <tt class="literal">-ipadx</tt> and
<tt class="literal">-ipady</tt> of 20. If we wanted to always add 20 to the
values of <tt class="literal">-ipadx</tt> and <tt class="literal">-ipady</tt>, we
would have to request the current values and add 20 to them:
</p>

<blockquote><pre class="code">sub repack_kids {
  my @kids = $mw-&gt;packSlaves;
  foreach (@kids) {
    %packinfo = $_-&gt;packInfo( );
    $_-&gt;pack(-ipadx =&gt; 20 + $packinfo{"-ipadx"}, 
             -ipady =&gt; 20 + $packinfo{"-ipady"});
  }
}</pre></blockquote>

<p>We use <tt class="literal">packInfo</tt> to get the current configuration
and add 20 to that value.
</p>

</div>
</div>
<a name="mastperltk-CHP-2-SECT-1.11" /></a><div class="sect2">
<h3 class="sect2">2.1.11. Demo Programs for pack</h3>

<p><a name="INDEX-246" /></a><a name="INDEX-247" /></a>Here are three little programs that let
you experiment with the packing options of an unspecified number of
widgets.
</p>

<p>As you can see in <a href="ch02_01.htm">Figure 2-27</a>, there is both a
console window and an "output" window that show what is
happening to widgets as you change their options. The complete code
follows shortly.
</p>

<a name="mastperltk-CHP-2-FIG-27" /></a><div class="figure"><img src="figs/mptk.0227.gif" alt="Figure 2-27" width="314" height="238" /></div><h4 class="objtitle">Figure 2-27. The output and console windows for our Play With pack example</h4>

<p>There are a lot of widgets and methods in the code that we
haven't covered yet. For now, it would be useful to download
the code, run it, and play around with the options.
</p>

<blockquote><pre class="code">use Tk;
require Tk::BrowseEntry;

if ($#ARGV &gt;= 0) { $numWidgets = $ARGV[0]; }
else { $numWidgets = 4; }

$mw = MainWindow-&gt;new(-title =&gt; "Play w/pack");
$f = $mw-&gt;Frame(-borderwidth =&gt; 2, -relief =&gt; 'groove')
	-&gt;pack(-side =&gt; 'top', -fill =&gt; 'x');
my (@packdirs) = ( );

$i = 0;
foreach (0..$numWidgets)
{
	$packdirs[$_] = 'top';
	my $be = $f-&gt;BrowseEntry(-label =&gt; "Widget $_:", 
		-choices =&gt; ["right", "left", "top", "bottom"], 
		-variable =&gt; \$packdirs[$_], -browsecmd =&gt; \&amp;repack)
		-&gt;pack(-ipady =&gt; 5);
}

$f-&gt;Button(-text =&gt; "Repack", -command =&gt; \&amp;repack )
	-&gt;pack(-anchor =&gt; 'center');

# use a separate window so we can see what the output 
# looks like without clutter.
$top = $mw-&gt;Toplevel(-title =&gt; "output window");
my $c;
foreach (@packdirs)
{
	my $b = $top-&gt;Button(-text =&gt; $c++ . ": $_", 
		-font =&gt; "Courier 20 bold")
		-&gt;pack(-side =&gt; $_, -fill =&gt; 'both', -expand =&gt; 1);
}

MainLoop;

sub repack
{
	@w = $top-&gt;packSlaves;
	foreach (@w) { $_-&gt;packForget; }
	my $e = 0;
	foreach (@w)
	{
		$_-&gt;configure(-text =&gt; "$e: $packdirs[$e]");
		$_-&gt;pack(-side =&gt; $packdirs[$e++], -fill =&gt; 'both', -expand =&gt; 1)	;
	}
}</pre></blockquote>

<p>A more complicated version of our <tt class="literal">pack</tt> demo lets
us alter not just the side the widget is packed against but the more
commonly used <tt class="literal">pack</tt> options:
</p>

<blockquote><pre class="code">use Tk;
require Tk::BrowseEntry;

if ($#ARGV &gt;= 0) { 	$numWidgets = $ARGV[0]; }
else { 	$numWidgets = 1; }

$mw = MainWindow-&gt;new(-title =&gt; "Play w/pack");

$f = $mw-&gt;Frame(-borderwidth =&gt; 2, -relief =&gt; 'groove')
	-&gt;pack(-side =&gt; 'top', -fill =&gt; 'x');

# Initialize the variables
my (@packdirs) = ( );
my (@anchordirs) = ( );
my (@fill) = ( );
my (@expand) = ( );

$i = 0;
$top = $mw-&gt;Toplevel(-title =&gt; "output window");
my $addbutton = $f-&gt;Button(-text =&gt; "Add Widget", 
	-command =&gt; \&amp;addwidget )-&gt;pack(-anchor =&gt; 'center');

foreach (0..$numWidgets) {
	my $b = $top-&gt;Button(-text =&gt; $_ . ": $packdirs[$_]")-&gt;pack;
	my %pinfo = $b-&gt;packInfo;
	$b-&gt;packForget;
	&amp;addwidget($_);	
}
MainLoop;

sub repack {
	print "Repacking...";
	@w = $top-&gt;packSlaves;
	foreach (@w) { $_-&gt;packForget; }
	my $e = 0;
	foreach (@w) 	{
		$_-&gt;configure(-text =&gt; "$e: $packdirs[$e]");
		print "Expand is : " . $expand[$e]. "\n";
		$_-&gt;pack(-side =&gt; $packdirs[$e], 
						 -fill =&gt; $fill[$e], 
						 -expand =&gt; $expand[$e], 
						 -anchor =&gt; $anchordirs[$e]);
		$e++;
	}
}

sub addwidget {
	my ($count) = @_;
	print "COUNT $count\n";
	if (! defined $count) 	{
		$numWidgets ++;
		$count = $numWidgets ;
	}
	
	$packdirs[$count] = 'top';
	$anchordirs[$count] = 'center';
	$fill[$count] = 'none';
	$expand[$count] = 0;
	
	my $f1 = $f-&gt;Frame-&gt;pack(-side =&gt; 'top', -expand =&gt; 1, 
		-fill =&gt;'y', -before =&gt; $addbutton);
	my $be = $f1-&gt;BrowseEntry(-label =&gt; "Widget $count:", 
		-choices =&gt; ["right", "left", "top", "bottom"], 
		-variable =&gt; \$packdirs[$count], -browsecmd =&gt; \&amp;repack)
		-&gt;pack(-ipady =&gt; 5, -side =&gt; 'left');

	$f1-&gt;BrowseEntry(-label =&gt; "-anchor", 
		-choices =&gt; [qw/center n s e w ne se nw sw/], 
		-variable =&gt; \$anchordirs[$count], -browsecmd =&gt; \&amp;repack)
		-&gt;pack(-ipady =&gt; 5, -side =&gt; 'left');

	$f1-&gt;BrowseEntry(-label =&gt; "-fill", -choices =&gt; [qw/none x y both/], 
		-variable =&gt; \$fill[$count], -browsecmd =&gt; \&amp;repack)
		-&gt;pack(-ipady =&gt; 5, -side =&gt; 'left');

	$f1-&gt;Checkbutton(-text =&gt; "-expand", -onvalue =&gt; 1, -offvalue =&gt; 0,
		-variable =&gt; \$expand[$count], -command =&gt; \&amp;repack)
		-&gt;pack(-ipady =&gt; 5, -side =&gt; 'left');

	$top-&gt;Button(-text =&gt; $count . ": $packdirs[$count]",
		-font =&gt; "Courier 20 bold")-&gt;pack(-side =&gt; $packdirs[$count], 
		-fill =&gt; $fill[$count], -expand =&gt; $expand[$count]);
}</pre></blockquote>

<p><a href="ch02_01.htm">Figure 2-28</a> shows what the new console looks like
(the output window looks the same until you vary the options).
</p>

<a name="mastperltk-CHP-2-FIG-28" /></a><div class="figure"><img src="figs/mptk.0228.gif" alt="Figure 2-28" width="481" height="123" /></div><h4 class="objtitle">Figure 2-28. The console for the more complicated version of Play With pack</h4>

<p>This sample switches packed widgets between a visible and invisible
state. As the widgets are created, save their references as the array
<tt class="literal">@w</tt>. The scalar <tt class="literal">$packed</tt> is
associated with the Checkbutton. Whenever we click the Checkbutton,
the value of <tt class="literal">$packed</tt> toggles between 1 and 0. The
first click of the Checkbutton sets <tt class="literal">$packed</tt> to 0
and invokes the <tt class="literal">-command</tt> callback. For more
information on callbacks, see <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a>.
</p>

<p>The callback then removes the widgets from the display, using
<tt class="literal">packInfo</tt> to fetch their <tt class="literal">pack</tt>
attributes, which are stored in an instance variable. Refer to <a href="ch14_01.htm">Chapter 14, "Creating Custom Widgets in Pure Perl/Tk"</a> for details on instance variables. When
restoring widgets, the callback uses the saved
<tt class="literal">pack</tt> information to exactly replicate the initial
packing configuration.<a name="INDEX-248" /></a><a name="INDEX-249" /></a><a name="INDEX-250" /></a> 
</p>

<blockquote><pre class="code">my $f = $mw-&gt;Frame-&gt;pack;
my $packed = 1;

push  my @w, $f-&gt;Label(-text =&gt; "l1")-&gt;pack(-side =&gt; "bottom"),
  $f-&gt;Button(-text =&gt; "l2")-&gt;pack(-side =&gt; "right"),
  $f-&gt;Label(-text =&gt; "l3")-&gt;pack(-side =&gt; "top"),
  $f-&gt;Button(-text =&gt; "l4")-&gt;pack(-side =&gt; "left"),
;
$mw-&gt;Checkbutton(-text =&gt; "Pack/Unpack",
		 -variable =&gt; \$packed,
		 -command =&gt; sub {
		     if ($packed) {
			 foreach (@w) {
			     $_-&gt;pack(@{ $_-&gt;{PackInfo} });
			 }
		     } else {
			 foreach (@w) {
			     $_-&gt;{PackInfo} = [ $_-&gt;packInfo ];
			     $_-&gt;packForget;
			 }
		     }
		 })-&gt;pack;</pre></blockquote>

</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.6. Debugging and PrototypingPerl/Tk Programs</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.2. The grid Geometry Manager</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>
