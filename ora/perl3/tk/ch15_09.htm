<html><head><title>Coexisting with Other GUI Main Loops (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">15.9. Coexisting with Other GUI Main Loops</h2>

<p><a name="INDEX-2511" />It's perfectly possible to have
more than one GUI main loop running concurrently. It's a simple
matter of cooperation and balance. By balance, we mean how the events
are portioned out. It's very easy for one main loop to
"take control" and "starve" the other loop of
processing time. In this section, we'll demonstrate how to use
both OpenGL and Tk widgets in the same application. We've found
that, generally, to keep Tk events flowing, it's sufficient to
call <tt class="literal">update</tt> once in a while. If
<tt class="literal">update</tt> starves OpenGL, we fall back to
<tt class="literal">DoOneEvent</tt>.
</p>

<p><tt class="literal">DoOneEvent</tt><a name="INDEX-2512" /><a name="INDEX-2513" /><a name="INDEX-2514" /><a name="INDEX-2515" /><a name="INDEX-2516" /><a name="INDEX-2517" /><a name="INDEX-2518" /> allows
us to fine tune a Tk event loop by processing only selected events,
which we specify by bit pattern. We can inclusively
<tt class="literal">OR</tt> the following symbols together and define the
desired bit pattern: <tt class="literal">WINDOW_EVENTS</tt>,
<tt class="literal">FILE_EVENTS</tt>, <tt class="literal">TIMER_EVENTS</tt>, and
<tt class="literal">IDLE_EVENTS</tt>. To specify all possible events, use
<tt class="literal">ALL_EVENTS</tt>, and to make the
<tt class="literal">DoOneEvent</tt> call nonblocking, add
<tt class="literal">DONT_WAIT</tt>.
</p>

<p>When passed <tt class="literal">ALL_EVENTS</tt>,
<tt class="literal">DoOneEvent</tt> processes events as they arise and puts
the application to sleep when no further events are outstanding.
<tt class="literal">DoOneEvent</tt> first looks for a window or I/O event
and, if found, calls the handler and returns. If there is no window
or I/O event, it looks for a single timer event, invokes the
callback, and returns. If no window, I/O, or timer event is ready,
all pending idle callbacks are executed, if any. In all cases,
<tt class="literal">DoOneEvent</tt> returns 1.
</p>

<p>When passed <tt class="literal">DONT_WAIT</tt>,
<tt class="literal">DoOneEvent</tt> works as described, except that, if
there are no events to process, it returns immediately with a value
of 0, indicating it didn't find any work to do.
</p>

<p>It's actually rather difficult to find a use for
<tt class="literal">DoOneEvent</tt>. One example is the bouncing ball
widget demonstration, although it might have been better written
using timer callbacks. But it <em class="emphasis">is</em> simulating a
simulation, and simulations typically want to run as fast as
possible, so we can't fault the implementation.
</p>

<p>Even games don't usually require <tt class="literal">DoOneEvent</tt>.
Here are two scenarios in which you might use it. Example one
probably never reaches the <tt class="literal">MainLoop</tt> statement. It
runs as fast as possible, consuming all available CPU time, and
depends on <tt class="literal">update</tt> to process events.
</p>

<blockquote><pre class="code">&amp;run;
MainLoop;

sub run {
    while (1) {
        &amp;dogame;
        $mw-&gt;update;
    }
}</pre></blockquote>

<p>Example two establishes a repeating timer event, then enters
<tt class="literal">MainLoop</tt> to process events. The game progresses at
a more or less stately speed, with an update occurring every 50
milliseconds. Unlike example one, this example does not consume all
available CPU time.
</p>

<blockquote><pre class="code">$mw-&gt;repeat(50 =&gt; \&amp;run);
MainLoop;

sub run {
    &amp;dogame;
    $mw-&gt;update;
}</pre></blockquote>

<a name="mastperltk-CHP-15-SECT-9.1" /><div class="sect2">
<h3 class="sect2">15.9.1. Embedding OpenGL in a Perl/Tk Window</h3>

<p><a name="INDEX-2519" /><a name="INDEX-2520" /><a name="INDEX-2521" /><a name="INDEX-2522" />Before we delve into the difficult
stuff, here's a really simple static OpenGL program that draws
into a Tk window. OpenGL's <tt class="literal">glpOpenWindow</tt>
command lets us specify a parent window. This example stuffs the
OpenGL window in a Tk Toplevel widget. We use
<tt class="literal">waitVisibility</tt> to ensure that the Toplevel is
mapped, so it has a valid window identifier.
</p>

<blockquote><pre class="code">use OpenGL;

$mw = MainWindow-&gt;new;
$mw-&gt;Button(-text =&gt; 'OpenGL Demo', -command =&gt; \&amp;opengl)-&gt;pack;
$mw-&gt;Button(-text =&gt; 'Quit', -command =&gt; \&amp;exit)-&gt;pack;

sub opengl {
    $top = $mw-&gt;Toplevel(qw/-width 500 -height 500 -background pink/);
    $top-&gt;title('OpenGL Demo');
    $top-&gt;waitVisibility;
    glpOpenWindow(parent=&gt; hex($top-&gt;id), width =&gt; 450, height =&gt; 450);
    glClearColor(0, 0, 1, 1);
    glClear(GL_COLOR_BUFFER_BIT);
    glOrtho(-1, 1, -1, 1, -1, 1);
    glColor3f(0, 1, 0);
    glBegin(GL_POLYGON);
   
    $pi =  3.141592654;
    $d2r = $pi / 180.0;
    $nvert = 8;
    $dangle = 360 / $nvert;
    for ($angle = 0; $angle &lt;= 359; $angle += $dangle) {
        $x = cos($angle * $d2r);
        $y = sin($angle * $d2r);
        glVertex2f($x, $y);
    }
    glEnd;
    glFlush;
}</pre></blockquote>

<p>The results are shown in <a href="ch15_09.htm">Figure 15-10</a>. </p>

<a name="mastperltk-CHP-15-FIG-10" /><div class="figure"><img src="figs/mptk.1510.gif" alt="Figure 15-10" width="427" height="528" /></div><h4 class="objtitle">Figure 15-10. Embedding OpenGL in a Tk window</h4>

</div>
<a name="mastperltk-CHP-15-SECT-9.2" /><div class="sect2">
<h3 class="sect2">15.9.2. Flying the Enterprise</h3>

<p><a name="INDEX-2523" /><a name="INDEX-2524" /><a name="INDEX-2525" />OpenGL is the de facto 3D graphics
package, created by SGI. Ports and look-alikes are widely available.
For Linux, install the MESA graphics library and install the Perl
interface from CPAN. Bundled with the Perl interface is an OpenGL
program that flies the Starship Enterprise in a 3D world.
</p>

<p>As with the previous example, we've embedded the flying
simulation in a Tk Toplevel widget. Then we enter the OpenGL main
loop, which processes all Tk events followed by all OpenGL events.
</p>

<blockquote><pre class="code">use Tk qw/:eventtypes/;

$mw = MainWindow-&gt;new;
$b = $mw-&gt;Button(-text =&gt; 'Quit', -command =&gt; \&amp;exit);
$b-&gt;pack;
$mw-&gt;waitVisibility;

$gl = $mw-&gt;Toplevel(-width =&gt; 400, -height =&gt; 400);
$gl-&gt;waitVisibility;
&amp;gl_init( hex($gl-&gt;id) );

while( 1 ){ # gl_MainLoop

    # ...

    while (my $stat = $mw-&gt;DoOneEvent( DONT_WAIT | ALL_EVENTS )){}

    while($p=XPending) {
			@e=&amp;glpXNextEvent;
			&amp;$s(@e) if($s=$cb{$e[0]});
    }

    # ...
    
} # end gl_mainLoop</pre></blockquote>

<p><a href="ch15_09.htm">Figure 15-11</a> shows the results.</p>

<a name="mastperltk-CHP-15-FIG-11" /><div class="figure"><img src="figs/mptk.1511.gif" alt="Figure 15-11" width="332" height="393" /></div><h4 class="objtitle">Figure 15-11. Perl/Tk and OpenGL main loops can coexist</h4>

<p>The <tt class="literal">DoOneEvent</tt> statement was an experiment in
which we tried various event masks, in an attempt to determine the
optimal combination. You see what we arrived at, which,
interestingly, is exactly equivalent to:<a name="INDEX-2526" />
</p>

<blockquote><pre class="code">$mw-&gt;update; </pre></blockquote>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch15_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch16_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">15.8. Synthesizing Virtual Events</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">16. User Customization</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>