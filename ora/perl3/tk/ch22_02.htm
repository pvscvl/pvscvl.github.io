<html><head><title>The PerlPlus Browser Plug-in (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch22_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch23_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">22.2. The PerlPlus Browser Plug-in</h2>

<p><a name="INDEX-3203" /><a name="INDEX-3204" /><a name="INDEX-3205" /><a name="INDEX-3206" /><a name="INDEX-3207" />Now we'll briefly examine Frank
Holtry's PerlPlus Plug-in, a loadable Netscape extension that
executes Perl programs on a client computer. The Perl programs
themselves can exist anywhere on the Net&#x2014;the mere act of
browsing a PerlPlus program (or any page with an HTML
<tt class="literal">&lt;EMBED&gt;</tt> tag pointing to a PerlPlus program)
may start it executing, subject to the result of an authentication
procedure.
</p>

<p><a name="INDEX-3208" /><a name="INDEX-3209" /><a name="INDEX-3210" /><a name="INDEX-3211" />Netscape publishes an API for C language
plug-ins that describes how to register a plug-in instance, read
streaming data from a browsed URL, access system services, and so on.
In 1996, Stan Melax used these specifications and developed the first
plug-in for the Perl world so he could run Perl OpenGL programs in a
browser. Basically, Stan's plug-in would read the browsed
OpenGL program, wrap it in a Safe module, and feed the result to
Perl. The Safe wrapper code provided security, and passed window
information to the OpenGL code so it could properly embed itself
within the browser.
</p>

<p>In 1999, Frank rewrote the plug-in with an eye toward enhanced
security. His idea was to use the <em class="filename">Opcode</em> module
and restrict the opcodes available to the browsed Perl program.
It's a multilevel scheme, from no security, in which all Perl
opcodes are legal, to high security, where so many opcodes are
forbidden that only the simplest Perl programs can run. Furthermore,
a CGI program must first validate the browsed URL and return its
opcode security level, a single digit from 0 through 5. The security
CGI might be as crude as this simple table lookup:
</p>

<blockquote><pre class="code">#!/usr/local/bin/perl -w
#
# perlplus-secure.cgi - lookup a script's security level and inform the plugin.

use CGI qw/header param/;
use strict;

my $url_root = 'http://www.lehigh.edu/~sol0/ptk/ppl';
my %urls = (
    "$url_root/clock-bezier.ppl" =&gt; 4,
    "$url_root/hw.ppl"           =&gt; 2,
    "$url_root/tkhanoi.ppl"      =&gt; 4,
);

my $url = lc param('URL');
my $sec_level = $urls{$url} || 0;

print header(-type =&gt; 'application/x-perlplus:.ppl:Perl'), "$sec_level\n";</pre></blockquote>

<p>Because the plug-in security model is under review, we won't
examine this subject further.
</p>

<p>As it happens, Perl/Tk programs generally have to run with most
opcodes enabled, so browsing untrusted PerlPlus/Tk programs is a
major security risk; imagine unleashing the full power of Perl inside
your browser!<a href="#FOOTNOTE-65">[65]</a> Nevertheless, it's easy to imagine a trusted
environment where you know that the served PerlPlus programs are
nonlethal.
</p><blockquote class="footnote"> <a name="FOOTNOTE-65" /><p> [65] Think carefully, too, before you enable
Java, or install your next plug-in and let boatloads of programs of
unknown quality and origin execute on your machine.</p>
</blockquote>

<a name="mastperltk-CHP-22-SECT-2.1" /><div class="sect2">
<h3 class="sect2">22.2.1. Embedding Perl/Tk in Other Windows</h3>

<p><a name="INDEX-3212" />Tk Toplevels, including the
MainWindow, have an optional -<tt class="literal">use</tt> argument that
indicates the window ID<a href="#FOOTNOTE-66">[66]</a> within which the Toplevel should be
embedded. (Normally a Toplevel appears inside the display's
root window.) Any window you know the window ID of will work, even an
<i class="command">xclock</i>. Try it! Use <i class="command">xwininfo</i> to
determine an arbitrary window ID.
</p><blockquote class="footnote"> <a name="FOOTNOTE-66" /><p> [66] Use the window information
command <tt class="literal">id</tt> to fetch the window ID of any Tk
widget.</p> </blockquote>

<p>In our case, the PerlPlus plug-in makes Netscape's window ID
available via a qualified Perl scalar,
<tt class="literal">$Plugin::brinfo{xwindow_id}</tt>. Here's a bit of
code that dumps the <tt class="literal">%brinfo</tt> hash key/value pairs
and embeds a MainWindow within Netscape:
</p>

<blockquote><pre class="code">open PPLLOG, '&gt;/tmp/ppl.log' or die $!;
foreach (sort keys %Plugin::brinfo) {
    print PPLLOG $_ . ' ' x (20 - length $_) . " : $Plugin::brinfo{$_}\n";
}
close PPLLOG;

my $mw = MainWindow-&gt;new(-use =&gt; $Plugin::brinfo{xwindow_id});</pre></blockquote>

<p>And here is what the file <em class="filename">/tmp/ppl.log</em> shows us:</p>

<blockquote><pre class="code">display              : 148717568
version              : 0.95.04
x_len                : 666
x_min                : 0
xwindow_id           : 88081995
y_len                : 272
y_min                : 0</pre></blockquote>

<p>The <tt class="literal">display</tt> hash key is the X display pointer,
which you might find useful when performing low-level X11 functions,
perhaps via X11::Protocol. <tt class="literal">x_min</tt> and
<tt class="literal">y_min</tt> are the pixel coordinates of the top-left
corner of the Netscape-provided window, and <tt class="literal">x_len</tt>
and <tt class="literal">y_len</tt> are the width and height of the window,
respectively.
</p>

</div>
<a name="mastperltk-CHP-22-SECT-2.2" /><div class="sect2">
<h3 class="sect2">22.2.2. Embedded Versus Full-Screen Mode</h3>

<p><a href="ch22_02.htm">Figure 22-5</a> depicts a full-screen Towers of
Hanoi<a href="#FOOTNOTE-67">[67]</a>
simulation. A PerlPlus/Tk program runs in full-screen mode when its
URL is browsed directly. In this case, your Tk program has an entire
window all to itself. <tt class="literal">$Plugin::brinfo{x_len}</tt> and
<tt class="literal">$Plugin::brinfo{y_len}</tt> define the window's
width and height, and <tt class="literal">$Plugin::brinfo{x_min)</tt> and
<tt class="literal">Plugin::brinfo{y_min)</tt> are both zero. If your
MainWindow is larger than the Netscape window, it's clipped on
the right and/or bottom.
</p><blockquote class="footnote"> <a name="FOOTNOTE-67" /><p> [67] See <a href="appc_01.htm">Appendix C, "Complete Program Listings"</a> for a complete
<i class="command">tkhanoi </i>program listing.</p> </blockquote>

<a name="mastperltk-CHP-22-FIG-5" /><div class="figure"><img src="figs/mptk.2205.gif" alt="Figure 22-5" width="481" height="302" /></div><h4 class="objtitle">Figure 22-5. Full-screen Towers of Hanoi program</h4>

<p>The other way to invoke a PerlPlus/Tk program is via an HTML
<tt class="literal">&lt;EMBED&gt;</tt> tag:
</p>

<blockquote><pre class="code">&lt;BODY&gt;
    Countdown to 2038, &lt;EMBED src="y2k.ppl" width=225 height=50&gt; although
    there's not much hope I'll be around for the event!
&lt;/BODY&gt;</pre></blockquote>

<p>This code produced <a href="ch22_02.htm">Figure 22-6</a>, a Perl/Tk program
constrained to a 225 x 50 window.
</p>

<a name="mastperltk-CHP-22-FIG-6" /><div class="figure"><img src="figs/mptk.2206.gif" alt="Figure 22-6" width="481" height="185" /></div><h4 class="objtitle">Figure 22-6.  A constrained, embedded Perl/Tk window</h4>

<p>For an embedded Perl/Tk window,
<tt class="literal">$Plugin::brinfo{x_min}</tt> and
<tt class="literal">$Plugin::brinfo{y_min}</tt> are the pixels offsets from
the top-left corner of the Netscape window, not necessarily zero. If
your code is flexible enough, it can use the following to resize
itself to the area supplied by Netscape:
</p>

<blockquote><pre class="code">my $geom = $Plugin::brinfo{x_len} . 'x' . $Plugin::brinfo{y_len};
$mw-&gt;geometry($geom);</pre></blockquote>

</div>
<a name="mastperltk-CHP-22-SECT-2.3" /><div class="sect2">
<h3 class="sect2">22.2.3. How You Can Contribute to the PerlPlus Plug-in Project</h3>

<p><a name="INDEX-3213" /><a name="INDEX-3214" />The
PerlPlus plug-in is available for public download and development at
<a href="../../../../../../sourceforge.net/projects/PerlPlusPlugin">http://sourceforge.net/projects/PerlPlusPlugin</a>.
Head to Sourceforge; get yourself a username and password; ensure you
have an environment that includes SSH, SSL, and CVS; and you're
all set to web-over to the CVS repository to examine the source and
get the entire source distribution or <i class="command">diff</i>s of
various versions, all from within your favorite browser.
</p>

<p><a name="INDEX-3215" /><a name="INDEX-3216" />If you want to work on the plug-in,
contact Frank Holtry via the Sourceforge page, and he'll add
you as a developer. Here's a sample CVS command to check out
the source distribution:
</p>

<blockquote><pre class="code">export CVS_RSH=/path-to/ssh
cvs -z3
-dYOURNAME@cvs.PerlPlusPlugin.sourceforge.net:/cvsroot/PerlPlusPlugin co 
PerlPlusPlugin</pre></blockquote>

<p>If you're behind a firewall, you'll need an SSH wrapper
such as this, or else your CVS commands will appear to hang:
</p>

<blockquote><pre class="code">#!/bin/bash
exec /usr/local/bin/ssh -P $*</pre></blockquote>

<p>The <tt class="literal">-P</tt> option tells <i class="command">ssh</i> to use
a nonprivileged port. You'll end up with a directory named
PerlPlusPlugin, a copy of the entire distribution.<a name="INDEX-3217" /><a name="INDEX-3218" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch22_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch23_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">22. Perl/Tk and the Web</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">23. Plethora of pTk Potpourri</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>