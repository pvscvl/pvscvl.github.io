<html><head><title>The Perl/Tk Class Hierarchy (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch14_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">14.2. The Perl/Tk Class Hierarchy</h2>

<p><a name="INDEX-2186" />Mega-widgets are hierarchical in
nature. Base classes are combined to create new classes of ever
greater functionality and sophistication.
</p>

<p>The following statement creates a Label widget as a child of the
MainWindow, <tt class="literal">$mw</tt>, and stores a reference to it in
the Perl variable <tt class="literal">$l</tt>:
</p>

<blockquote><pre class="code">my $l = $mw-&gt;Label;</pre></blockquote>

<p>In object-oriented lingo, it <em class="emphasis">instantiates</em> (makes
an instance of) an object of class Tk::Label. If we don't know
an object's class, we can determine it using the
<tt class="literal">ref</tt> function:
</p>

<blockquote><pre class="code">print "l = $l, class = ", ref $l, "\n";

l = Tk::Label=HASH(0x822b3d0), class = Tk::Label</pre></blockquote>

<p>We see that in reality, <tt class="literal">$l</tt> is a reference to a
hash that has been <tt class="literal">bless</tt> ed into the package
Tk::Label. What we don't know is where this class exists in the
overall Tk class hierarchy. This useful bit of information not only
tells us the path Perl follows when looking up object methods but
also a widget's class relationship with other widgets.
</p>

<p><a name="INDEX-2187" /><a name="INDEX-2188" />We can write a program that
uses an HList widget (fully described in <a href="ch18_01.htm">Chapter 18, "
A Tk Interface Extension Tour"</a>) to graph a depth-first traversal of any
widget's <tt class="literal">@ISA</tt> array. The program,
<i class="command">isa</i>, accepts a Tk class name as input via an Entry
widget, then recursively calls <tt class="literal">isa_tree</tt>. This
subroutine adds the class name to the HList tree, loads the module
file so the symbol table is available, determines the module's
base classes by evaluating the new module's
<tt class="literal">@ISA</tt> array, and calls itself recursively as
required.
</p>

<blockquote><pre class="code">use Tk;
use Tk::widgets qw/HList/;
use subs qw/isa_tree/;
use strict;

my $mw = MainWindow-&gt;new;
my $instance = 0;

my $hl = $mw-&gt;Scrolled(qw/HList
    -separator | -indent 35 -scrollbars sw/
)-&gt;pack(qw/-fill both -expand 1/);

my $m = 'Tk::Dialog';
my $e = $mw-&gt;Entry(-textvariable =&gt; \$m)-&gt;pack;
my $cb = sub {
    my $mod = shift-&gt;get;
    isa_tree $hl, $mod, $mod . $instance;
};
$e-&gt;bind('&lt;Return&gt;' =&gt; $cb);
$e-&gt;focus;

MainLoop;

sub isa_tree {
    my($h, $class, $path) = @_;

    $h-&gt;add($path, -text =&gt; $class);
    (my $file = $class) =~ s\::\/\g;
    require "$file.pm";

    foreach my $base_class (eval "\@${class}::ISA") {
        isa_tree $h, $base_class, "$path|$base_class";
    }
} # end isa_tree</pre></blockquote>

<p><a href="ch14_02.htm">Figure 14-3</a> shows the class tree for a Label widget,
which is typical of most core Perl/Tk widgets. Its immediate base
class is Tk::Widget, a class module that provides over a hundred
subroutines and methods common to all widgets, two of which are
<tt class="literal">ClassInit</tt> and <tt class="literal">Populate</tt>. Since
Tk::Widget is the "lowest base class,"
<tt class="literal">Tk::Widget::ClassInit</tt> and
<tt class="literal">Tk::Widget::Populate</tt>, both empty subroutines, are
invoked if and only if they are not overridden in a subclass. They
act as safety valves, ensuring that every Perl/Tk widget has
<tt class="literal">Populate</tt> and <tt class="literal">ClassInit</tt> methods.
</p>

<a name="mastperltk-CHP-14-FIG-3" /><div class="figure"><img src="figs/mptk.1403.gif" alt="Figure 14-3" width="256" height="134" /></div><h4 class="objtitle">Figure 14-3.  Class hierarchy for a Label widget</h4>

<p>For historical reasons, <em class="filename">Tk.pm</em> acts as a base
class for Tk::Widget and as an Exporter module, where it provides
over 60 subroutines and methods.
</p>

<p><a href="ch14_02.htm">Figure 14-4</a> shows the class hierarchy for our
Frame-based LabOptionmenu widget. When <tt class="literal">Populate</tt>
and <tt class="literal">ClassInit</tt> are called on a LabOptionmenu
widget, Perl first finds the methods in class Tk::LabOptionmenu. Each
of these methods then passes the call to a superclass. For
<tt class="literal">Populate</tt>, we know the call is satisfied by
<tt class="literal">Tk::Frame::Populate</tt>, where the Label configuration
specifications are generated. But Tk::Frame doesn't provide a
<tt class="literal">ClassInit</tt> subroutine, so Perl keeps traversing the
<tt class="literal">@ISA</tt> array until it finds the safety valve,
<tt class="literal">Tk::Widget::ClassInit</tt>.
</p>

<a name="mastperltk-CHP-14-FIG-4" /><div class="figure"><img src="figs/mptk.1404.gif" alt="Figure 14-4" width="256" height="168" /></div><h4 class="objtitle">Figure 14-4.  Class hierarchy for a LabOptionmenu widget</h4>

<p><a name="INDEX-2189" />Note the special class
Tk::Derived. It's an important base class for mega-widgets,
because it provides more than 15 methods, including
<tt class="literal">configure</tt> and <tt class="literal">cget</tt>, specially
designed to make mega-widgets behave like core Tk widgets.
Tk::Derived must be available, somewhere, in every
mega-widget's <tt class="literal">@ISA</tt> tree.
</p>

<p><a href="ch14_02.htm">Figure 14-5</a> shows that Dialog is a subclass of
DialogBox, a Toplevel-based composite. We see several familiar
classes it's based upon. We might even hazard to guess that a
Toplevel is basically a Frame with some window manager attributes
thrown in!<a name="INDEX-2190" />
</p>

<a name="mastperltk-CHP-14-FIG-5" /><div class="figure"><img src="figs/mptk.1405.gif" alt="Figure 14-5" width="256" height="213" /></div><h4 class="objtitle">Figure 14-5. Class hierarchy for a Dialog widget</h4>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch14_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch14_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">14. Creating Custom Widgets in Pure Perl/Tk</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">14.3. Mega-Widget Implementation Details</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>