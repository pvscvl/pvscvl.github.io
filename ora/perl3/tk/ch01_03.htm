<html><head><title>Getting Started with Perl/Tk (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">1.3. Getting Started with Perl/Tk</h2>

<p>Enough history. The remainder of this chapter is about the basics of
using Perl/Tk, including how to create simple widgets and display
them, a quick introduction to event-based programming, and an
obligatory "Hello World" example. Before we continue,
let's make sure you have everything installed properly.
</p>

<a name="mastperltk-CHP-1-SECT-3.1" /><div class="sect2">
<h3 class="sect2">1.3.1. Do You Need To Install Anything?</h3>

<p><a name="INDEX-32" />Since
the Tk extension to Perl doesn't come with the standard Perl
distribution, the first thing you should do is make sure you have a
working Perl/Tk distribution.
</p>

<p><a name="INDEX-33" /><a name="INDEX-34" /><a name="INDEX-35" /><a name="INDEX-36" /><a name="INDEX-37" /><a name="INDEX-38" /><a name="INDEX-39" />Whether you're running Unix or
Win32, the <em class="emphasis">perl</em> program should be in your path.
Type the following at a command prompt to make the determination:
</p>

<blockquote><pre class="code">%<i class="command"> </i><tt class="userinput"><b>perl -v</b></tt></pre></blockquote>

<p>If you receive a "command not found" error message, see
<a href="appa_01.htm">Appendix A, "Installing Perl/Tk"</a> and install Perl. If
<em class="emphasis">perl</em> is found, you'll see output similar
to this:
</p>

<blockquote><pre class="code">This is perl, v5.6.0 built for i686-linux

Copyright 1987-2000, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5.0 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using `man perl' or `perldoc perl'.  If you have access to the
Internet, point your browser at http://www.perl.com/, the Perl Home Page.</pre></blockquote>

<p>In particular, note the version number in the first line; anything
earlier than 5.6.0 may not produce the results depicted in this book.
Perl 5.005_03 <em class="emphasis">may</em> work, but nothing earlier
will, guaranteed.
</p>

<p>Now determine if the Tk module is available by using this command:</p>

<blockquote><pre class="code">% <tt class="userinput"><b>perl -e "use Tk"</b></tt></pre></blockquote>

<p>If you don't get the following error, you're ready to go:</p>

<blockquote><pre class="code">Can't locate Tk.pm in @INC (@INC contains: C:\PERL\lib\site ...</pre></blockquote>

<p>Once again, to install Tk refer to <a href="appa_01.htm">Appendix A, "Installing Perl/Tk"</a>.</p>

<p><a name="INDEX-40" />Assuming that
Perl/Tk is up and running, you can determine its version with this
command:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>perl -MTk -e 'print "$Tk::VERSION\n"'</b></tt>
800.022</pre></blockquote>

<p>Ideally, you want Version 800.022 or higher.</p>

<p><a name="INDEX-41" /><a name="INDEX-42" /><a name="INDEX-43" />The best way to verify that all is well is
to run the <em class="emphasis">widget</em> demonstration program.
<em class="emphasis">widget</em> should already be in your path, so just
invoke the command by typing <tt class="userinput"><b>widget</b></tt> at a
command prompt. This program demonstrates most of the Perl/Tk widget
set and lets you examine the Perl/Tk code, modify it, and rerun
individual demonstrations. Clicking on About shows you the installed
Perl and Tk versions.
</p>

<a name="mastperltk-CHP-1-SIDEBAR-2" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Perl/Tk Versions</h4>

<p>This book is based on the stable releases of Perl 5.6.0 and Tk
800.022. At the time of this writing, Perl 5.6.1 has been released,
yet Tk continues to work as before, and all examples are known to
work. Down the pipe is a major release of Tk, based on Tcl/Tk Version
8.3. Nick has seeded Tk 803.023 to a few Perl/Tk hackers, but the
code is still far from prime-time ready.
</p>

<p>When Perl/Tk 803.xxx becomes available, expect it to be thread-safe
and Unicode (UTF-8) aware, but beware that if your application uses
high-bit ISO-8859-1 characters, it will most likely break.
</p>
</td></tr></table><p></blockquote>

</div>
<a name="mastperltk-CHP-1-SECT-3.2" /><div class="sect2">
<h3 class="sect2">1.3.2. Creating Widgets</h3>

<p><a name="INDEX-44" /><a name="INDEX-45" />All widgets in Perl/Tk programs are
created in the same basic fashion, with a few exceptions. Each widget
must have a parent widget to watch over it as it is created and keep
track of it while it exists in the application. When you create an
application, you'll have a central window that will contain
other widgets. Usually that window will be the parent of all the
widgets inside it and of any other windows you create in your
application. You are creating an order to the widgets so that the
communication between child and parent widgets can happen
automatically without any intervention from you once you set it all
up.
</p>

<p><a name="INDEX-46" />Assuming
that the <tt class="literal">$parent</tt> widget already exists, the
generic usage when you create widget <tt class="literal">Widgettype</tt> is
as follows:
</p>

<blockquote><pre class="code">$child = $parent-&gt;Widgettype( <em class="replaceable"><tt>[ -option =&gt; value, . . . ]</tt></em> );</pre></blockquote>

<p><a name="INDEX-47" /><a name="INDEX-48" />Note
that the variables that store the widgets are scalars. (Actually,
they are references to widget objects, but you don't need to
know that right now.) If you aren't familiar with
object-oriented syntax in Perl, using the <tt class="literal">-&gt;</tt>
between <tt class="literal">$parent</tt> and <tt class="literal">Widgettype</tt>
invokes the method <tt class="literal">Widgettype</tt> from the
<tt class="literal">$parent</tt> object. It makes the
<tt class="literal">$parent</tt> related to the child
<tt class="literal">$child</tt>. As you might guess, the
<tt class="literal">$parent</tt> becomes the parent of the widget being
created. A parent can have many children, but a child can have only
one parent.
</p>

</div>
<a name="mastperltk-CHP-1-SECT-3.3" /><div class="sect2">
<h3 class="sect2">1.3.3. Specifying Options</h3>

<p><a name="INDEX-49" /><a name="INDEX-50" /><a name="INDEX-51" /><a name="INDEX-52" /><a name="INDEX-53" />When you invoke the
<tt class="literal">Widgettype</tt> method, you usually specify
configuration parameters to set up the widget and the interactions
within the application. The configuration parameters will occur in
pairs: an option (such as <tt class="literal">-text</tt>,
<tt class="literal">-state</tt>, or <tt class="literal">-variable)</tt> and its
associated value. Each option starts with a dash, but that's
only by convention; the options are just strings used to indicate how
to interpret their associated values.
</p>

<p><a name="INDEX-54" /><a name="INDEX-55" /><a name="INDEX-56" />Usually, it is not necessary to put
quotation marks around option names because Perl is smart enough to
recognize them as strings. However, if you are using the
<em class="emphasis">-w</em> switch, Perl may complain about an option
that it thinks is not text. You can stick quotes around all your
options all the time to avoid this, but it shouldn't be
necessary. The option names are all lowercase, except in a few rare
cases that we'll note as we cover them.
</p>

<p><a name="INDEX-57" /><a name="INDEX-58" /><a name="INDEX-59" />Options
are specified in list form:
</p>

<blockquote><pre class="code">(<em class="replaceable"><tt>-option</em> =&gt; <em class="replaceable">value</em>, <em class="replaceable">-option</em> =&gt; <em class="replaceable">value</em>, <em class="replaceable">-option</em> =&gt; <em class="replaceable">value</tt></em>)</pre></blockquote>

<p><a name="INDEX-60" /><a name="INDEX-61" /><a name="INDEX-62" />If you've never seen
<tt class="literal">=&gt;</tt> in Perl before, don't be thrown by it.
It's just a different way of saying "comma," except
that the <tt class="literal">=&gt;</tt> operator auto-quotes the word to
its left, eliminating possible ambiguities. For instance, the
following code works properly because the auto-quoting resolves
<tt class="literal">-text</tt> as a string:
</p>

<blockquote><pre class="code">sub text {}
$mw-&gt;Label(-text =&gt; 123);</pre></blockquote>

<p>With the comma syntax, however, <tt class="literal">-text</tt> resolves to
<tt class="literal">-&amp;text( )</tt>:
</p>

<blockquote><pre class="code">$mw-&gt;Label(-text, 123);</pre></blockquote>

<p>With this in mind, you can still use just the commas and not the
<tt class="literal">=&gt;</tt> notation, such as:
</p>

<blockquote><pre class="code">(<em class="replaceable"><tt>-option</em>, <em class="replaceable">value</em>, <em class="replaceable">-option</em>, <em class="replaceable">value</em>, <em class="replaceable">-option</em>, <em class="replaceable">value</tt></em>)</pre></blockquote>

<p>However, it's much harder to tell which are the option/value
pairs. Consider the following syntactically equal statements (each of
which create a Button widget that is 10 by 10 pixels, displays the
word "Exit," and performs the action of quitting the
application when pressed):
</p>

<blockquote><pre class="code">$bttn = $parent-&gt;Button(-text, "Exit", -command, sub { exit }, -width, 10, -height, 10);

$bttn = $parent-&gt;Button(-text =&gt; "Exit", -command =&gt; sub { exit }, -width =&gt; 10, -height =&gt; 10);</pre></blockquote>

<p>In the second line, it is much more obvious which arguments are
paired together. The option must be directly before the value
associated with it: <tt class="literal">-text</tt> is paired with
"Exit", <tt class="literal">-command</tt> has the value
<tt class="literal">sub</tt> <tt class="literal">{</tt> <tt class="literal">exit</tt>
<tt class="literal">}</tt>, and <tt class="literal">-width</tt> and
<tt class="literal">-height</tt> both have values of 10.
</p>

<p><a name="INDEX-63" /><a name="INDEX-64" />Another favorite option/value
specification syntax uses Perl's <tt class="literal">qw</tt>
operator, which treats its arguments as a list of strings:
</p>

<blockquote><pre class="code">$bttn = $parent-&gt;Button(qw/-text Exit -width 10 -height 10 -command/ =&gt; sub { exit }/);</pre></blockquote>

<p><a name="INDEX-65" /><a name="INDEX-66" /><a name="INDEX-67" /><a name="INDEX-68" /><a name="INDEX-69" /><a name="INDEX-70" /><a name="INDEX-71" /><a name="INDEX-72" />This style is more reminiscent of
Tcl's look, with whitespace-separated tokens. You tend to type
fewer characters too. The string delimiter is often <tt class="literal">(
)</tt> or <tt class="literal">{}</tt>, but <tt class="literal">//</tt> is
most popular since it doesn't require a shift. Note that
<tt class="literal">qw</tt> splits on simple words, so that option values
can be only simple words, not multiword quoted strings, code
references, and so on. That's why we moved the
<tt class="literal">-command</tt> option to the end of the
<tt class="literal">qw</tt> string.
</p>

</div>
<a name="mastperltk-CHP-1-SECT-3.4" /><div class="sect2">
<h3 class="sect2">1.3.4. Toplevel, MainWindow, and Frame Widgets</h3>

<p>Time for another detour. In the next few chapters we'll be
using widgets in our examples that we might not have covered yet. We
trust that you'll figure out what most of them mean from the
context in which they are presented, but a few require a short
introduction.
</p>

<p><a name="INDEX-73" /><a name="INDEX-74" /><a name="INDEX-75" />MainWindow
and Toplevel are the windows (or widgets&#x2014;we often interchange
the terms) that contain other widgets. MainWindow is a special
version of a Toplevel widget, in that the MainWindow is the first
window you create in your application.
</p>

<p><a name="INDEX-76" /><a name="INDEX-77" />The other type of widget you need
to know about is a Frame widget. A Frame is a container that can also
contain other widgets. It is usually invisible and is used just to
arrange the widgets as desired.
</p>

<p>Of course, there's more to it, but that's enough to know
for now. For more information, see <a href="ch11_01.htm">Chapter 11, "
Frame, MainWindow,and Toplevel Widgets"</a>.
</p>

</div>
<a name="mastperltk-CHP-1-SECT-3.5" /><div class="sect2">
<h3 class="sect2">1.3.5. Displaying a Widget</h3>

<p><a name="INDEX-78" /><a name="INDEX-79" /><a name="INDEX-80" /><a name="INDEX-81" />Creating a
widget isn't the same as displaying it in Perl/Tk. You need to
use two separate commands to create a widget and display it, although
sometimes they are combined into the same line and look like a single
command. In the examples so far, we've used the
<tt class="literal">Button</tt> method to create the Button, but nothing is
displayed by using that method alone. Instead you have to use a
geometry manager to cause the widget to be displayed in its parent
widget or in another widget. The most commonly used geometry manager
is <tt class="literal">pack</tt>. To use it, you simply call the
<tt class="literal">pack</tt> method on the widget object, as follows:
</p>

<blockquote><pre class="code">$widget-&gt;pack( );</pre></blockquote>

<p>For example:</p>

<blockquote><pre class="code">$button-&gt;pack( );</pre></blockquote>

<p>The arguments you can send to the <tt class="literal">pack</tt> method are
covered in <a href="ch02_01.htm">Chapter 2, "Geometry Management"</a>.
</p>

<p>It is not necessary to invoke the <tt class="literal">pack</tt> method on a
separate line. <tt class="literal">-&gt;pack</tt> can be added to the
creation of the widget:
</p>

<blockquote><pre class="code">$parent-&gt;Button(-text =&gt; "Bye!", -command =&gt; sub { exit })-&gt;pack( );</pre></blockquote>

<p><a name="INDEX-82" /><a name="INDEX-83" /><a name="INDEX-84" /><a name="INDEX-85" />The other geometry managers available
are <tt class="literal">grid</tt>, <tt class="literal">form</tt>, and
<tt class="literal">place</tt>. All four behave differently; use what works
best for your application. Again, look for information on the
geometry managers in <a href="ch02_01.htm">Chapter 2, "Geometry Management"</a>.
</p>

</div>
<a name="mastperltk-CHP-1-SECT-3.6" /><div class="sect2">
<h3 class="sect2">1.3.6. The Event Loop</h3>

<p><a name="INDEX-86" /><a name="INDEX-87" />When
programming an application that uses a graphical interface rather
than a textual interface, you need to rethink the way you approach
the flow of the application. In a text-based application, you can
read from standard input (STDIN), use command-line options, read
files, or prompt the user for specific information. The keyboard is
your main avenue of input from the user. In a GUI, input comes not
only from those places but also from the mouse and the window
manager.<a href="#FOOTNOTE-6">[6]</a> Although this extra input allows more
flexibility in our applications, it also makes our programming job
more difficult. As long as we tell it what to do, Perl/Tk helps us
handle all that extra input gracefully.
</p><blockquote class="footnote"> <a name="FOOTNOTE-6" /><p> [6] For example, a "close" directive
from a window manager such as <em class="emphasis">mwm</em> or MS
Windows.</p> </blockquote>

<p><a name="INDEX-88" />Input
in a GUI is defined by events. Events are typically different
combinations of using the keyboard and mouse at the same, or
different, times. If the user pushes the left mouse button on Button
"B," that is one type of event. Pushing the right mouse
button on Button "C" is another event. Typing the letter
"a" is another event. Holding down the Control key and
clicking with the middle mouse button is yet another event. Events
can also come from input and output operations or be generated
virtually under program control. For an in-depth examination of the
Tk event loop, see <a href="ch15_01.htm">Chapter 15, "Anatomy of the MainLoop"</a>.
</p>

<p><a name="INDEX-89" />Events are
processed during an <em class="firstterm">event loop</em>. The event
loop, as its name implies, handles events during a loop. It
determines what subroutines to call based on what type of event has
happened. Here is a pseudocode event loop:
</p>

<blockquote><pre class="code">while (1) {
  get_event_info

  if event is left-mouse-click call process_left_mouse_click
  else if event is right-mouse-click call process_right_mouse_click
  else if event is keyboard-input call type_it
  else handle events for redrawing, resizing etc
}</pre></blockquote>

<p>This is obviously a simplistic approach to an event loop, yet it
shows the basic idea. The event loop is a weeding-out process to
determine what type of input has been given to the application. For
example, the subroutine <tt class="literal">process_left_mouse_click</tt>
might determine where the pointer was when the mouseclick occurred
and then call other subroutines based on that information.
</p>

<p><a name="INDEX-90" />In Perl/Tk, the event loop is initiated
by calling a routine called <tt class="literal">MainLoop</tt>. Anything
prior to this statement is just setting up the interface. Any code
after this call will not execute until after the GUI has exited using
<tt class="literal">$mw-&gt;destroy</tt>.<a href="#FOOTNOTE-7">[7]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-7" /><p> [7] Throughout the
book, we use <tt class="literal">$mw</tt> to indicate the variable that
refers to the MainWindow created at the beginning of the
application.</p> </blockquote>

<p>If we forget to include the <tt class="literal">MainLoop</tt> statement,
the program will think about things for a while and then go right
back to the command prompt. None of the windows, Buttons, or widgets
will be drawn at all. The first things that occur after calling
<tt class="literal">MainLoop</tt> are the interface is drawn and the event
loop is started.
</p>

<p>Before we get too much further into the event loop and what it does
(and what you need to do so it works properly), let's look at a
working example program, Hello World. (You were expecting something
else?)
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.2. Some Perl/Tk History</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">1.4. Hello World Example</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>