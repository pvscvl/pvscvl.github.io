<html><head><title>Polling Win32 Sockets (Mastering Perl/Tk)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Steve Lidie and Nancy Walsh" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1565927168L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mastering Perl/Tk" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mastering Perl/Tk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch20_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">19.6. Polling Win32 Sockets</h2>

<p><a name="INDEX-3010" /><a name="INDEX-3011" /><a name="INDEX-3012" /><a name="INDEX-3013" />If <tt class="literal">fileevent</tt> fails us
in a Win32 environment, a simple and effective remedy, suggested by
Brand Hilton, is to poll the socket ourselves. Here we have a simple
<em class="emphasis">poll</em> daemon that works on Unix and Win32. It
waits for a connect on port 10254 and outputs 5 bytes on the socket
every five seconds. (Please excuse the lack of error processing.)
</p>

<blockquote><pre class="code">use IO::Socket;
use Tk;
use strict;

my $socket = IO::Socket::INET-&gt;new(
    Listen    =&gt; 5, 
    Reuse     =&gt; 1, 
    LocalPort =&gt; 10254, 
    Proto     =&gt; 'tcp',
) or die "Couldn't open socket: $!";

my $new_sock = $socket-&gt;accept( );
while (1) {
    syswrite $new_sock, "polld";
    sleep 5;
}</pre></blockquote>

<p>Given that, we'd expect the following Tk
<em class="emphasis">poll</em> client to work in both operating
environments. The client packs a Text widget, connects to the
<em class="emphasis">poll</em> daemon, and creates a
<tt class="literal">fileevent</tt> handler to read the incoming socket data
and append it to the Text widget. It works perfectly under Unix, but
alas, on Win32, the I/O handler is never called.
</p>

<blockquote><pre class="code">use IO::Socket;
use Tk;
use strict;

my $mw = MainWindow-&gt;new;
my $text = $mw-&gt;Text-&gt;pack;
my $sock = IO::Socket::INET-&gt;new(PeerAddr =&gt; 'localhost:10254');
die "Cannot connect" unless defined $sock;
$mw-&gt;fileevent($sock, 'readable' =&gt; \&amp;read_sock);
MainLoop;

sub read_sock {
    my $numbytes = 5;	
    my $line;
    while ($numbytes) {
        my $buf;
        my $num = sysread $sock, $buf, $numbytes;
        $numbytes -= $num;
        $line .= $buf;
    }
    $text-&gt;insert('end',"$line\n");
}</pre></blockquote>

<p>Here's a revised <em class="emphasis">poll</em> client that still
uses <tt class="literal">fileevent</tt> for Unix. But if it's running
under Win32, it creates a timer event that uses
<tt class="literal">select</tt> to poll the socket. You can use
<tt class="literal">select</tt> directly, but the IO::Select OO interface
is easier to use. So, <tt class="literal">$sel</tt> becomes our IO::Select
object, to which we add one handle to monitor, the read socket.
Subroutine <tt class="literal">read_sock</tt> uses the
<tt class="literal">can_read</tt> method to determine if the socket has
available data and, if so, sets <tt class="literal">$hand</tt> for
<tt class="literal">sysread</tt>.
</p>

<blockquote><pre class="code">use IO::Socket;
use Tk;
use subs qw/read_sock/;
use vars qw/$mw $sel $sock $text/;
use strict;

$mw = MainWindow-&gt;new;
$text = $mw-&gt;Text-&gt;pack;
$sock = IO::Socket::INET-&gt;new(PeerAddr =&gt; 'localhost:10254');
die "Cannot connect" unless defined $sock;

if ($^O eq 'MSWin32') {
    use IO::Select;
    $sel = IO::Select-&gt;new;
    $sel-&gt;add($sock);
    $mw-&gt;repeat(50 =&gt; \&amp;read_sock);
} else {
    $mw-&gt;fileevent($sock, 'readable' =&gt; \&amp;read_sock);
}

MainLoop;

sub read_sock {
    my $hand = $sock;
    if ($^O eq 'MSWin32') {
        my(@ready) = $sel-&gt;can_read(0);
        return if $#ready == -1;
        $hand = $ready[0];
    }
    my $numbytes = length 'polld';							
    my $line;
    while ($numbytes) {
        my $buf;
        my $num = sysread $hand, $buf, $numbytes;
        $numbytes -= $num;
        $line .= $buf;
    }
    $text-&gt;insert('end',"$line\n");
} # end read_sock</pre></blockquote>

<p>Be sure to check out <a href="ch22_01.htm">Chapter 22, "Perl/Tk and the Web"</a> and see how we can
employ a shared memory segment to bypass <tt class="literal">fileevent</tt>
on Win32.<a name="INDEX-3014" /><a name="INDEX-3015" /><a name="INDEX-3016" /> 
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch20_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">19.5. The IPADM Daemon, ipadmd</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">20. IPC with send</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="../prog/index.htm"><area shape="rect" coords="448,0,526,132" href="index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm"></map>

</body></html>