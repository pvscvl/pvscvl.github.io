<html>
<head>
<title>Hashes of Arrays (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Hashes of Arrays">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch09_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch09_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">9.2. Hashes of Arrays</h2>

<p>
<a name="INDEX-2113"></a><a name="INDEX-2114"></a><a name="INDEX-2115"></a><a name="INDEX-2116"></a>
Use a hash of arrays when you want to look up each array by a
particular string rather than merely by an index number.  In our
example of television characters, instead of looking up the list of
names by the zeroth show, the first show, and so on, we'll set it up
so we can look up the cast list given the name of the show.</p>

<p>Because our outer data structure is a hash, we can't order the
contents, but we can use the <tt class="literal">sort</tt> function to specify a particular
output order.</p>


<h3 class="sect2">9.2.1. Composition of a Hash of Arrays</h3>

<p>
<a name="INDEX-2117"></a>
You can create a hash of anonymous arrays as follows:
<blockquote>
<pre class="programlisting"># We customarily omit quotes when the keys are identifiers.
%HoA = (
    flintstones    =&gt; [ "fred", "barney" ],
    jetsons        =&gt; [ "george", "jane", "elroy" ],
    simpsons       =&gt; [ "homer", "marge", "bart" ],
);</pre>
</blockquote>
To add another array to the hash, you can simply say:
<blockquote>
<pre class="programlisting">$HoA{teletubbies} = [ "tinky winky", "dipsy", "laa-laa", "po" ];</pre>
</blockquote>
</p>






<h3 class="sect2">9.2.2. Generation of a Hash of Arrays</h3>

<p>
<a name="INDEX-2118"></a>
Here are some techniques for populating a hash of arrays.
To read from a file with the following format:
<blockquote>
<pre class="programlisting">flintstones: fred barney wilma dino
jetsons:     george jane elroy
simpsons:    homer marge bart</pre>
</blockquote>
you could use either of the following two loops:
<blockquote>
<pre class="programlisting">while ( &lt;&gt; ) {
    next unless s/^(.*?):\s*//;
    $HoA{$1} = [ split ];
}

while ( $line = &lt;&gt; ) {
    ($who, $rest) = split /:\s*/, $line, 2;
    @fields = split ' ', $rest;
    $HoA{$who} = [ @fields ];
}</pre>
</blockquote>
If you have a subroutine <tt class="literal">get_family</tt> that returns an array,
you can use it to stuff <tt class="literal">%HoA</tt> with either of these two loops:
<blockquote>
<pre class="programlisting">for $group ( "simpsons", "jetsons", "flintstones" ) {
    $HoA{$group} = [ get_family($group) ];
}

for $group ( "simpsons", "jetsons", "flintstones" ) {
    @members = get_family($group);
    $HoA{$group} = [ @members ];
}</pre>
</blockquote>
You can append new members to an existing array like so:
<blockquote>
<pre class="programlisting">push @{ $HoA{flintstones} }, "wilma", "pebbles";</pre>
</blockquote>
</p>






<h3 class="sect2">9.2.3. Access and Printing of a Hash of Arrays</h3>

<p>
<a name="INDEX-2119"></a><a name="INDEX-2120"></a><a name="INDEX-2121"></a>
You can set the first element of a particular array as follows:
<blockquote>
<pre class="programlisting">$HoA{flintstones}[0] = "Fred";</pre>
</blockquote>
To capitalize the second Simpson, apply a substitution to the
appropriate array

element:
<blockquote>
<pre class="programlisting">$HoA{simpsons}[1] =~ s/(\w)/\u$1/;</pre>
</blockquote>
You can print all of the families by looping through the keys of the
hash:
<blockquote>
<pre class="programlisting">for $family ( keys %HoA ) {
    print "$family: @{ $HoA{$family} }\n";
}</pre>
</blockquote>
<a name="INDEX-2122"></a>
With a little extra effort, you can add array indices as well:
<blockquote>
<pre class="programlisting">for $family ( keys %HoA ) {
    print "$family: ";
    for $i ( 0 .. $#{ $HoA{$family} } ) {
        print " $i = $HoA{$family}[$i]";
    }
    print "\n";
}</pre>
</blockquote>
<a name="INDEX-2123"></a>
Or sort the arrays by how many elements they have:
<blockquote>
<pre class="programlisting">for $family ( sort { @{$HoA{$b}} &lt;=&gt; @{$HoA{$a}} } keys %HoA ) {
    print "$family: @{ $HoA{$family} }\n"
}</pre>
</blockquote>

Or even sort the arrays by the number of elements and then order
the elements ASCIIbetically (or to be precise, utf8ically):
<blockquote>
<pre class="programlisting"># Print the whole thing sorted by number of members and name.
for $family ( sort { @{$HoA{$b}} &lt;=&gt; @{$HoA{$a}} } keys %HoA ) {
    print "$family: ", join(", ", sort @{ $HoA{$family} }), "\n";
}</pre>
</blockquote>
</p>

<a name="INDEX-2124"></a><a name="INDEX-2125"></a><a name="INDEX-2126"></a>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch09_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch09_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">9.1. Arrays of Arrays</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">9.3. Arrays of Hashes</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
