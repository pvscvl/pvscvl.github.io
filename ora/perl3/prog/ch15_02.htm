<html>
<head>
<title>Effects of Character Semantics (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Effects of Character Semantics">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch15_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">15.2. Effects of Character Semantics</h2>

<p>
<a name="INDEX-2823"></a><a name="INDEX-2824"></a><a name="INDEX-2825"></a>
The upshot of all this is that a typical built-in operator will
operate on characters unless it is in the scope of a <tt class="literal">use
bytes</tt> pragma.  However, even outside the scope of
<tt class="literal">use bytes</tt>, if all of the operands of the operator
are stored as 8-bit characters (that is, none of the operands are
stored in utf8), then character semantics are indistinguishable
from byte semantics, and the result of the operator will be stored
in 8-bit form internally.  This preserves backward compatibility as
long as you don't feed your program any characters wider than Latin-1.</p>

<p>
<a name="INDEX-2826"></a>
The <tt class="literal">utf8</tt> pragma is primarily a compatibility device that enables
recognition of UTF-8 in literals and identifiers encountered by the
parser.  It may also be used for enabling some of the more experimental
Unicode support features.  Our long-term goal is to turn the <tt class="literal">utf8</tt>
pragma into a no-op.</p>

<p>
<a name="INDEX-2827"></a><a name="INDEX-2828"></a>
The <tt class="literal">use bytes</tt> pragma will never turn into a no-op.  Not only is it
necessary for byte-oriented code, but it also has the side effect of
defining byte-oriented wrappers around certain functions for use
outside the scope of <tt class="literal">use bytes</tt>.  As of this writing, the only
defined wrapper is for <tt class="literal">length</tt>, but there are likely to be more as
time goes by.  To use such a wrapper, say:
<blockquote>
<pre class="programlisting">use bytes ();   # Load wrappers without importing byte semantics.
...
$charlen =        length("\x{ffff_ffff}");   # Returns 1.
$bytelen = bytes::length("\x{ffff_ffff}");   # Returns 7.</pre>
</blockquote>

Outside the scope of a <tt class="literal">use bytes</tt> declaration, Perl version 5.6 works (or
at least, is intended to work) like this:</p>

<ul>
<li>
<p>Strings and patterns may now contain characters that have an ordinal
value larger than 255:
<blockquote>
<pre class="programlisting">use utf8;
$convergence = "<img src="figs/righthand.gif">&nbsp;<img src="figs/lefthand.gif">";</pre>
</blockquote>
<a name="INDEX-2829"></a><a name="INDEX-2830"></a>
Presuming you have a Unicode-capable editor to edit your program, such
characters will typically occur directly within the literal strings as
UTF-8 characters.  For now, you have to declare a <tt class="literal">use
utf8</tt> at the top of your program to enable the use of UTF-8
in literals.</p>

<p>
<a name="INDEX-2831"></a>
If you don't have a Unicode editor, you can always specify a
particular character in ASCII with an extension of the
<tt class="literal">\x</tt> notation.  A character in the Latin-1 range may
be written either as <tt class="literal">\x{ab}</tt> or as
<tt class="literal">\xab</tt>, but if the number exceeds two hexidecimal
digits, you must use braces.  Unicode characters are specified by
putting the hexadecimal code within braces after the
<tt class="literal">\x</tt>.  For instance, a Unicode smiley face is
<tt class="literal">\x{263A}</tt>.  There is no syntactic construct in Perl
that assumes Unicode characters are exactly 16 bits, so you may not
use <tt class="literal">\u263A</tt> as you can in other languages;
<tt class="literal">\x{263A}</tt> is the closest equivalent.</p>

<p>
<a name="INDEX-2832"></a><a name="INDEX-2833"></a>
For inserting named characters via
<tt class="literal">\N{</tt><em class="replaceable">CHARNAME</em><tt class="literal">}</tt>,
see the <tt class="literal">use charnames</tt> pragma in <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.</p>
</li>
<li>
<p> Identifiers within the Perl script may contain
Unicode alphanumeric characters, including ideographs:
<a name="INDEX-2834"></a>
</p>

<p>
</p>

<p>
<blockquote>
<pre class="programlisting">use utf8;
$<img src="figs/ren2_bold.gif">&nbsp;++;        # A child is born.</pre>
</blockquote>

Again, <tt class="literal">use utf8</tt> is needed (for now) to recognize
UTF-8 in your script. You are currently on your own when it comes to
using the canonical forms of characters--Perl doesn't (yet) attempt to
canonicalize variable names for you.  We recommend that you
canonicalize your programs to Normalization Form C, since that's what
Perl will someday canonicalize to by default.  See
www.unicode.org for the latest technical report
on canonicalization.
<a name="INDEX-2835"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-2836"></a><a name="INDEX-2837"></a>
Regular expressions match characters instead of bytes.  For instance,
dot matches a character instead of a byte.  If the Unicode Consortium
ever gets around to approving the Tengwar script, then (despite the
fact that such characters are represented in four bytes of UTF-8), this
matches:
<blockquote>
<pre class="programlisting">"\N{TENGWAR LETTER SILME NUQUERNA}" =~ /^.$/</pre>
</blockquote>
<a name="INDEX-2838"></a>
The <tt class="literal">\C</tt> pattern is provided to force a match on a
single byte ("<tt class="literal">char</tt>" in C, hence
<tt class="literal">\C</tt>).  Use <tt class="literal">\C</tt> with care, since it
can put you out of sync with the character boundaries in your string,
and you may get "Malformed UTF-8 character" errors.  You may not use
<tt class="literal">\C</tt> in square brackets, since it doesn't represent
any particular character or set of characters.</p>
</li>
<li>
<p>
<a name="INDEX-2839"></a><a name="INDEX-2840"></a><a name="INDEX-2841"></a>
 Character classes in regular expressions match
characters instead of bytes and match against the character properties
specified in the Unicode properties database.  So
<tt class="literal">\w</tt> can be used to match an ideograph:
<blockquote>
<pre class="programlisting">"<img src="figs/ren2_bold.gif">&nbsp;" =~ /\w/</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-2842"></a><a name="INDEX-2843"></a><a name="INDEX-2844"></a>
Named Unicode properties and block ranges can be used as character
classes via the new <tt class="literal">\p</tt> (matches property) and
<tt class="literal">\P</tt> (doesn't match property) constructs.  For
instance, <tt class="literal">\p{Lu}</tt> matches any character with the
Unicode uppercase property, while <tt class="literal">\p{M}</tt> matches any
mark character.  Single-letter properties may omit the brackets, so

mark characters can be matched by <tt class="literal">\pM</tt> also.  Many

predefined

character classes are available, such as
<tt class="literal">\p{IsMirrored}</tt> and
<tt class="literal">\p{InTibetan}</tt>:
<blockquote>
<pre class="programlisting">"\N{greek:Iota}" =~ /\p{Lu}/</pre>
</blockquote>

You may also use <tt class="literal">\p</tt> and <tt class="literal">\P</tt>
within square bracket character classes. (In version 5.6.0 of Perl,
you need to <tt class="literal">use utf8</tt> for character properties to
work right.  This restriction will be lifted in the future.)  See
<a href="ch05_01.htm">Chapter 5, "Pattern Matching"</a>, for details of matching
on Unicode properties.
<a name="INDEX-2845"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-2846"></a><a name="INDEX-2847"></a>
The special pattern <tt class="literal">\X</tt> matches any extended Unicode
sequence (a "combining character sequence" in Standardese), where the
first character is a base character and subsequent characters are mark
characters that apply to the base character.  It is equivalent to
<tt class="literal">(?:\PM\pM*)</tt>:
<blockquote>
<pre class="programlisting">"o\N{COMBINING TILDE BELOW}" =~ /\X/</pre>
</blockquote>

You may not use <tt class="literal">\X</tt> in square brackets, because it
might match multiple characters and it doesn't match any
particular character or set of characters.</p>
</li>
<li>
<p>
<a name="INDEX-2848"></a>
The <tt class="literal">tr///</tt> operator transliterates characters
instead of bytes.  To turn all characters outside the Latin-1 range
into a question mark, you could say:
<blockquote>
<pre class="programlisting">tr/\0-\x{10ffff}/\0-\xff?/;       # utf8 to latin1 char</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-2849"></a><a name="INDEX-2850"></a><a name="INDEX-2851"></a><a name="INDEX-2852"></a><a name="INDEX-2853"></a>
Case translation operators use the Unicode case translation tables
when provided character input.  Note that <tt class="literal">uc</tt>
translates to uppercase, while <tt class="literal">ucfirst</tt> translates
to titlecase (for languages that make the distinction).  Naturally the
corresponding backslash sequences have the same semantics:
<blockquote>
<pre class="programlisting">$x = "\u$word";       # titlecase first letter of $word
$x = "\U$word";       # uppercase $word
$x = "\l$word";       # lowercase first letter of $word
$x = "\L$word";       # lowercase $word</pre>
</blockquote>
Be careful, because the Unicode case translation tables don't attempt
to provide round-trip mappings in every instance, particularly for
languages that use different numbers of characters for titlecase or
uppercase than they do for the equivalent lowercase letter.  As they
say in the standard, while the case properties themselves are
normative, the case mappings are only informational.
<a name="INDEX-2854"></a>
</p>
</li>
<li>
<p>
<a name="INDEX-2855"></a><a name="INDEX-2856"></a>
Most operators that deal with positions or lengths in the string will
automatically switch to using character positions, including
<tt class="literal">chop</tt>, <tt class="literal">substr</tt>,
<tt class="literal">pos</tt>, <tt class="literal">index</tt>,
<tt class="literal">rindex</tt>, <tt class="literal">sprintf</tt>,
<tt class="literal">write</tt>, and <tt class="literal">length</tt>.  Operators
that deliberately don't switch include <tt class="literal">vec</tt>,
<tt class="literal">pack</tt>, and <tt class="literal">unpack</tt>.  Operators
that really don't care include <tt class="literal">chomp</tt>, as well as
any other operator that treats a string as a bucket of bits, such as
the default <tt class="literal">sort</tt> and the operators dealing with
filenames.
</p>

<blockquote>
<pre class="programlisting">use bytes;
$bytelen = length("I do <img src="figs/he2.gif">&nbsp;<img src="figs/qi4.gif">&nbsp; <img src="figs/dao4.gif"> &nbsp;.");   # 15 bytes
no bytes;
$charlen = length("I do <img src="figs/he2.gif">&nbsp;<img src="figs/qi4.gif">&nbsp;<img src="figs/dao4.gif">&nbsp;.");   # but 9 characters</pre>
</blockquote>
</li>
<li>
<p>
<a name="INDEX-2857"></a><a name="INDEX-2858"></a><a name="INDEX-2859"></a><a name="INDEX-2860"></a>
The <tt class="literal">pack</tt>/<tt class="literal">unpack</tt> letters
"<tt class="literal">c</tt>" and "<tt class="literal">C</tt>" do
<em class="emphasis">not</em> change, since they're often used for
byte-oriented formats.  (Again, think "<tt class="literal">char</tt>" in the
C language.)  However, there is a new "<tt class="literal">U</tt>" specifier
that will convert between UTF-8 characters and integers:
<blockquote>
<pre class="programlisting">pack("U*", 1, 20, 300, 4000) eq v1.20.300.4000</pre>
</blockquote>
</p>
</li>
<li>
<p>
<a name="INDEX-2861"></a><a name="INDEX-2862"></a>
The <tt class="literal">chr</tt> and <tt class="literal">ord</tt> functions work
on characters:
<blockquote>
<pre class="programlisting">chr(1).chr(20).chr(300).chr(4000) eq v1.20.300.4000</pre>
</blockquote>

In other words, <tt class="literal">chr</tt> and <tt class="literal">ord</tt> are
like <tt class="literal">pack("U")</tt> and
<tt class="literal">unpack("U")</tt>, not like
<tt class="literal">pack("C")</tt> and
<tt class="literal">unpack("C")</tt>.  In fact, the latter two are how
you now emulate byte-oriented <tt class="literal">chr</tt> and
<tt class="literal">ord</tt> if you're too lazy to <tt class="literal">use
bytes</tt>.</p>
</li>
<li>
<p>
<a name="INDEX-2863"></a>
And finally, <tt class="literal">scalar reverse</tt> reverses by character
rather than by byte:</p>


<p>
<blockquote>
<pre class="programlisting">"<img src="figs/righthand.gif">&nbsp;<img src="figs/lefthand.gif">" eq reverse "<img src="figs/lefthand.gif">&nbsp;<img src="figs/righthand.gif">"</pre>
</blockquote>
</p>
</li>
</ul>
<p>
<a name="INDEX-2864"></a><a name="INDEX-2865"></a>
If you look in directory
<em class="replaceable">PATH_TO_PERLLIB/unicode</em>, you'll find a
number of files that have to do with defining the semantics above.
The Unicode properties database from the Unicode Consortium is in a
file called <em class="emphasis">Unicode.300</em> (for Unicode 3.0).  This
file has already been processed by <em class="emphasis">mktables.PL</em>
into lots of little <em class="emphasis">.pl</em> files in the same
directory (and in subdirectories <em class="emphasis">Is/</em>,
<em class="emphasis">In/</em>, and <em class="emphasis">To/</em>), some
of which are automatically slurped in by Perl to implement things like
<tt class="literal">\p</tt> (see the <em class="emphasis">Is/</em> and
<em class="emphasis">In/</em> directories) and <tt class="literal">uc</tt> (see
the <em class="emphasis">To/</em> directory).  Other files are slurped
in by modules like the <tt class="literal">use charnames</tt> pragma (see
<em class="emphasis">Name.pl</em>).  But as of this writing, there
are still a number of files that are just sitting there waiting for
you to write an access module for them:
<blockquote>
<pre class="programlisting">
<em class="emphasis">ArabLink.pl</em>
<em class="emphasis">ArabLnkGrp.pl</em>
<em class="emphasis">Bidirectional.pl</em>
<em class="emphasis">Block.pl</em>
<em class="emphasis">Category.pl</em>
<em class="emphasis">CombiningClass.pl</em>
<em class="emphasis">Decomposition.pl</em>
<em class="emphasis">JamoShort.pl</em>
<em class="emphasis">Number.pl</em>
<em class="emphasis">To/Digit.pl</em>
</pre>
</blockquote>
A much more readable summary of Unicode, with many hyperlinks, is in <em class="replaceable">PATH_TO_PERLLIB</em><em class="emphasis">/unicode/Unicode3.html</em>.
<a name="INDEX-2866"></a>
</p>

<p>Note that when the Unicode consortium comes out with a new version,
some of these filenames are likely to change, so you'll have to poke
around.  You can find <em class="replaceable">PATH_TO_PERLLIB</em> with
the following incantation:
<blockquote>
<pre class="programlisting">% <tt class="userinput"><b>perl -MConfig -le 'print $Config{privlib}'</b></tt>
</pre>
</blockquote>

To find out just about everything there is to find out about Unicode, you 
should check out <em class="emphasis">The Unicode Standard, Version 3.0</em>
(ISBN 0-201-61633-5). 
<a name="INDEX-2867"></a>
</p>




<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch15_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">15.1. Building Character</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">15.3. Caution, <img src="figs/ren2_bold.gif"> Working</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
