<html>
<head>
<title>Named Unary and File Test Operators (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Named Unary and File Test Operators">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch03_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch03_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch03_11.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">3.10. Named Unary and File Test Operators</h2>

<p>
<a name="INDEX-871"></a><a name="INDEX-872"></a><a name="INDEX-873"></a> Some of the "functions" described in
<a href="ch29_01.htm">Chapter 29, "Functions"</a> are really unary
operators. <a href="ch03_10.htm">Table 3-2</a> lists all the named
unary operators.
<a name="INDEX-874"></a><a name="INDEX-875"></a>
</p>

<a name="perl3-tab-uniops"></a>
<h4 class="objtitle">Table 3.2. Named Unary Operators</h4>
<table border="1">

<tr>
<td><tt class="literal">-</tt><em class="replaceable">X</em> (file tests)</td>
<td><tt class="literal">gethostbyname</tt></td>
<td><tt class="literal">localtime</tt></td>
<td><tt class="literal">return</tt></td>
</tr>

<tr>
<td><tt class="literal">alarm</tt></td>
<td><tt class="literal">getnetbyname</tt></td>
<td><tt class="literal">lock</tt></td>
<td><tt class="literal">rmdir</tt></td>
</tr>

<tr>
<td><tt class="literal">caller</tt></td>
<td><tt class="literal">getpgrp</tt></td>
<td><tt class="literal">log</tt></td>
<td><tt class="literal">scalar</tt></td>
</tr>

<tr>
<td><tt class="literal">chdir</tt></td>
<td><tt class="literal">getprotobyname</tt></td>
<td><tt class="literal">lstat</tt></td>
<td><tt class="literal">sin</tt></td>
</tr>

<tr>
<td><tt class="literal">chroot</tt></td>
<td><tt class="literal">glob</tt></td>
<td><tt class="literal">my</tt></td>
<td><tt class="literal">sleep</tt></td>
</tr>

<tr>
<td><tt class="literal">cos</tt></td>
<td><tt class="literal">gmtime</tt></td>
<td><tt class="literal">oct</tt></td>
<td><tt class="literal">sqrt</tt></td>
</tr>

<tr>
<td><tt class="literal">defined</tt></td>
<td><tt class="literal">goto</tt></td>
<td><tt class="literal">ord</tt></td>
<td><tt class="literal">srand</tt></td>
</tr>

<tr>
<td><tt class="literal">delete</tt></td>
<td><tt class="literal">hex</tt></td>
<td><tt class="literal">quotemeta</tt></td>
<td><tt class="literal">stat</tt></td>
</tr>

<tr>
<td><tt class="literal">do</tt></td>
<td><tt class="literal">int</tt></td>
<td><tt class="literal">rand</tt></td>
<td><tt class="literal">uc</tt></td>
</tr>

<tr>
<td><tt class="literal">eval</tt></td>
<td><tt class="literal">lc</tt></td>
<td><tt class="literal">readlink</tt></td>
<td><tt class="literal">ucfirst</tt></td>
</tr>

<tr>
<td><tt class="literal">exists</tt></td>
<td><tt class="literal">lcfirst</tt></td>
<td><tt class="literal">ref</tt></td>
<td><tt class="literal">umask</tt></td>
</tr>

<tr>
<td><tt class="literal">exit</tt></td>
<td><tt class="literal">length</tt></td>
<td><tt class="literal">require</tt></td>
<td><tt class="literal">undef</tt></td>
</tr>


</table>

<p>
<a name="INDEX-876"></a>
Unary operators have a higher precedence than some of the binary operators.  For example:
<blockquote>
<pre class="programlisting">sleep 4 | 3;</pre>
</blockquote>

does not sleep for 7 seconds; it sleeps for 4 seconds and then takes
the return value of <tt class="literal">sleep</tt> (typically zero) and bitwise ORs that with 3, as if
the expression were parenthesized as:
<blockquote>
<pre class="programlisting">(sleep 4) | 3;</pre>
</blockquote>

Compare this with:
<blockquote>
<pre class="programlisting">print 4 | 3;</pre>
</blockquote>

which <em class="emphasis">does</em> take the value of 4 ORed with 3 before printing it (7 in
this case), as if it were written:
<blockquote>
<pre class="programlisting">print (4 | 3);</pre>
</blockquote>

This is because <tt class="literal">print</tt> is a list operator, not a simple unary
operator.  Once you've learned which operators are list operators,
you'll have no trouble telling unary operators and list operators apart.  When in doubt, you can
always use parentheses to turn a named unary operator into a function.
Remember, if it looks like a function, it is a function.
<a name="INDEX-877"></a><a name="INDEX-878"></a>
</p>

<p>
<a name="INDEX-879"></a><a name="INDEX-880"></a><a name="INDEX-881"></a><a name="INDEX-882"></a><a name="INDEX-883"></a><a name="INDEX-884"></a><a name="INDEX-885"></a><a name="INDEX-886"></a>
 Another funny thing about named unary operators
is that many of them default to <tt class="literal">$_</tt> if you don't
supply an argument.  However, if you omit the argument but the token
following the named unary operator looks like it might be the start of
an argument, Perl will get confused because it's expecting a term.
Whenever the Perl tokener gets to one of the characters listed in
<a href="ch03_10.htm">Table 3-3</a>, the tokener returns different
token types depending on whether it expects a term or operator.
<a name="INDEX-887"></a>
</p>

<a name="perl3-tab-charopterm"></a>
<h4 class="objtitle">Table 3.3. Ambiguous Characters</h4>
<table border="1">

<tr>
<th>Character</th>
<th>Operator</th>
<th>Term</th>
</tr>




<tr>
<td><tt class="literal">+</tt></td>
<td>Addition</td>
<td>Unary plus</td>
</tr>

<tr>
<td><tt class="literal">-</tt></td>
<td>Subtraction</td>
<td>Unary minus</td>
</tr>

<tr>
<td><tt class="literal">*</tt></td>
<td>Multiplication</td>
<td><tt class="literal">*typeglob</tt></td>
</tr>

<tr>
<td><tt class="literal">/</tt></td>
<td>Division</td>
<td><tt class="literal">/pattern/</tt></td>
</tr>

<tr>
<td><tt class="literal">&lt;</tt></td>
<td>Less than, left shift</td>
<td><tt class="literal"> &lt;HANDLE&gt;, &lt;&lt;END</tt></td>
</tr>

<tr>
<td><tt class="literal">.</tt></td>
<td>Concatenation</td>
<td><tt class="literal">.3333</tt></td>
</tr>

<tr>
<td><tt class="literal">?</tt></td>
<td><tt class="literal">?:</tt></td>
<td><tt class="literal">?pattern?</tt></td>
</tr>

<tr>
<td><tt class="literal">%</tt></td>
<td>Modulo</td>
<td><tt class="literal">%assoc</tt></td>
</tr>

<tr>
<td><tt class="literal">&amp;</tt></td>
<td><tt class="literal">&amp;, &amp;&amp;</tt></td>
<td><tt class="literal">&amp;subroutine</tt></td>
</tr>


</table>

<p>So a typical boo-boo is:
<blockquote>
<pre class="programlisting">next if length &lt; 80;</pre>
</blockquote>

in which the <tt class="literal"> &lt;</tt>  looks to the parser like the beginning of the
<tt class="literal">&lt;&gt;</tt> input symbol (a term) instead of the "less than" (an
operator) you were thinking of.  There's really no way to fix this and
still keep Perl pathologically eclectic.  If you're so incredibly lazy
that you cannot bring yourself to type the two characters <tt class="literal">$_</tt>, then
use one of these instead:
<blockquote>
<pre class="programlisting">next if length() &lt; 80;
next if (length) &lt; 80;
next if 80 &gt; length;
next unless length &gt;= 80;</pre>
</blockquote>
<a name="INDEX-888"></a><a name="INDEX-889"></a><a name="INDEX-890"></a><a name="INDEX-891"></a><a name="INDEX-892"></a><a name="INDEX-893"></a><a name="INDEX-894"></a><a name="INDEX-895"></a><a name="INDEX-896"></a><a name="INDEX-897"></a><a name="INDEX-898"></a><a name="INDEX-899"></a><a name="INDEX-900"></a><a name="INDEX-901"></a><a name="INDEX-902"></a><a name="INDEX-903"></a><a name="INDEX-904"></a><a name="INDEX-905"></a><a name="INDEX-906"></a><a name="INDEX-907"></a><a name="INDEX-908"></a><a name="INDEX-909"></a><a name="INDEX-910"></a><a name="INDEX-911"></a><a name="INDEX-912"></a><a name="INDEX-913"></a><a name="INDEX-914"></a>
When a term is expected, a minus sign followed
by a single letter will always be interpreted as a <em class="emphasis">file
test</em> operator. A file test operator is a unary operator
that takes one argument, either a filename or a filehandle, and tests
the associated file to see whether something is true about it.  If the
argument is omitted, it tests <tt class="literal">$_</tt>, except for
<tt class="literal">-t</tt>, which tests <tt class="literal">STDIN</tt>.  Unless
otherwise documented, it returns <tt class="literal">1</tt> for true and
<tt class="literal">""</tt> for false, or the undefined value if the file
doesn't exist or is otherwise inaccessible. Currently implemented file
test operators are listed in <a href="ch03_10.htm">Table 3-4</a>.</p>

<a name="perl3-tab-filetest"></a>
<h4 class="objtitle">Table 3.4. File Test Operators</h4>
<table border="1">

<tr>
<th>Operator</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">-r</tt></td>
<td>File is readable by effective UID/GID.</td>
</tr>

<tr>
<td><tt class="literal">-w</tt></td>
<td>File is writable by effective UID/GID.</td>
</tr>

<tr>
<td><tt class="literal">-x</tt></td>
<td>File is executable by effective UID/GID.</td>
</tr>

<tr>
<td><tt class="literal">-o</tt></td>
<td>File is owned by effective UID.</td>
</tr>

<tr>
<td><tt class="literal">-R</tt></td>
<td>File is readable by real UID/GID.</td>
</tr>

<tr>
<td><tt class="literal">-W</tt></td>
<td>File is writable by real UID/GID.</td>
</tr>

<tr>
<td><tt class="literal">-X</tt></td>
<td>File is executable by real UID/GID.</td>
</tr>

<tr>
<td><tt class="literal">-O</tt></td>
<td>File is owned by real UID.</td>
</tr>

<tr>
<td><tt class="literal">-e</tt></td>
<td>File exists.</td>
</tr>

<tr>
<td><tt class="literal">-z</tt></td>
<td>File has zero size.</td>
</tr>

<tr>
<td><tt class="literal">-s</tt></td>
<td>File has nonzero size (returns size).</td>
</tr>

<tr>
<td><tt class="literal">-f</tt></td>
<td>File is a plain file.</td>
</tr>

<tr>
<td><tt class="literal">-d</tt></td>
<td>File is a directory.</td>
</tr>

<tr>
<td><tt class="literal">-l</tt></td>
<td>File is a symbolic link.</td>
</tr>

<tr>
<td><tt class="literal">-p</tt></td>
<td>File is a named pipe (FIFO).</td>
</tr>

<tr>
<td><tt class="literal">-S</tt></td>
<td>File is a socket.</td>
</tr>

<tr>
<td><tt class="literal">-b</tt></td>
<td>File is a block special file.</td>
</tr>

<tr>
<td><tt class="literal">-c</tt></td>
<td>File is a character special file.</td>
</tr>

<tr>
<td><tt class="literal">-t</tt></td>
<td>Filehandle is opened to a tty.</td>
</tr>

<tr>
<td><tt class="literal">-u</tt></td>
<td>File has setuid bit set.</td>
</tr>

<tr>
<td><tt class="literal">-g</tt></td>
<td>File has setgid bit set.</td>
</tr>

<tr>
<td><tt class="literal">-k</tt></td>
<td>File has sticky bit set.</td>
</tr>

<tr>
<td><tt class="literal">-T</tt></td>
<td>File is a text file.</td>
</tr>

<tr>
<td><tt class="literal">-B</tt></td>
<td>File is a binary file (opposite of <tt class="literal">-T</tt>).</td>
</tr>

<tr>
<td><tt class="literal">-M</tt></td>
<td>Age of file (at startup) in days since modification.</td>
</tr>

<tr>
<td><tt class="literal">-A</tt></td>
<td>Age of file (at startup) in days since last access.</td>
</tr>

<tr>
<td><tt class="literal">-C</tt></td>
<td>Age of file (at startup) in days since inode change.</td>
</tr>


</table>

<p>Note that <tt class="literal">-s/a/b/</tt> does not do a negated substitution.  Saying
<tt class="literal">-exp($foo)</tt> still works as expected, however--only single letters
following a minus are interpreted as file tests.</p>

<p>
<a name="INDEX-915"></a><a name="INDEX-916"></a>
The interpretation of the file permission operators
<tt class="literal">-r</tt>, <tt class="literal">-R</tt>, <tt class="literal">-w</tt>,
<tt class="literal">-W</tt>, <tt class="literal">-x</tt>, and
<tt class="literal">-X</tt> is based solely on the mode of the file and the
user and group IDs of the user.  There may be other reasons you can't
actually read, write, or execute the file, such as Andrew File System
(AFS) access control lists.<a href="#FOOTNOTE-3">[3]</a>
Also note
that for the superuser, <tt class="literal">-r</tt>, <tt class="literal">-R</tt>,
<tt class="literal">-w</tt>, and <tt class="literal">-W</tt> always return 1, and
<tt class="literal">-x</tt> and <tt class="literal">-X</tt> return 1 if any
execute bit is set in the mode.  Thus, scripts run by the superuser
may need to do a <tt class="literal">stat</tt> in order to determine the
actual mode of the file or temporarily set the UID to something else.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-3"></a>
<p>[3]You may, however, override
the built-in semantics with the <tt class="literal">use filetest</tt>
pragma. See <a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>.</p>

</blockquote>

<p>The other file test operators don't care who you are.  Anybody can use
the test for "regular" files:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    chomp;
    next unless -f $_;      # ignore "special" files
    ...
}</pre>
</blockquote>
<a name="INDEX-917"></a><a name="INDEX-918"></a>
</p>

<p>The <tt class="literal">-T</tt> and <tt class="literal">-B</tt> switches work as
follows.  The first block or so of the file is examined for strange
characters such as control codes or bytes with the high bit set (that
don't look like UTF-8).  If more than a third of the bytes appear to
be strange, it's a binary file; otherwise, it's a text file.  Also,
any file containing ASCII NUL (<tt class="literal">\0</tt>) in the first
block is considered a binary file.  If <tt class="literal">-T</tt> or
<tt class="literal">-B</tt> is used on a filehandle, the current input
(standard I/O or "stdio") buffer is examined rather than the first
block of the file.  Both <tt class="literal">-T</tt> and
<tt class="literal">-B</tt> return true on an empty file, or on a file at
EOF (end-of-file) when testing a filehandle.  Because Perl has to read
a file to do the <tt class="literal">-T</tt> test, you don't want to use
<tt class="literal">-T</tt> on special files that might hang or give you
other kinds of grief.  So on most occasions you'll want to test with a
<tt class="literal">-f</tt> first, as in:
<blockquote>
<pre class="programlisting">next unless -f $file &amp;&amp; -T $file;</pre>
</blockquote>

If any of the file tests (or either the <tt class="literal">stat</tt> or <tt class="literal">lstat</tt> operator)
are given the special filehandle consisting of a solitary underline,
then the <em class="emphasis">stat</em> structure of the previous file test (or <tt class="literal">stat</tt>
operator) is used, thereby saving a system call.  (This doesn't work
with <tt class="literal">-t</tt>, and you need to remember that <tt class="literal">lstat</tt> and <tt class="literal">-l</tt> will leave
values in the <em class="emphasis">stat</em> structure for the symbolic link, not the real
file.  Likewise, <tt class="literal">-l _</tt> will always be false after a normal
<tt class="literal">stat</tt>.)</p>

<p>Here are a couple of examples:
<blockquote>
<pre class="programlisting">print "Can do.\n" if -r $a || -w _ || -x _;

stat($filename);
print "Readable\n" if -r _;
print "Writable\n" if -w _;
print "Executable\n" if -x _;
print "Setuid\n" if -u _;
print "Setgid\n" if -g _;

print "Sticky\n" if -k _;
print "Text\n" if -T _;
print "Binary\n" if -B _;</pre>
</blockquote>
<a name="INDEX-919"></a><a name="INDEX-920"></a><a name="INDEX-921"></a><a name="INDEX-922"></a><a name="INDEX-923"></a><a name="INDEX-924"></a><a name="INDEX-925"></a><a name="INDEX-926"></a>
</p>

<p>File ages for <tt class="literal">-M</tt>, <tt class="literal">-A</tt>, and
<tt class="literal">-C</tt> are returned in days (including fractional days)
since the script started running. This time is stored in the special
variable <tt class="literal">$^T</tt> (<tt class="literal">$BASETIME</tt>).  Thus,
if the file changed after the script started, you would get a negative
time. Note that most time values (86,399 out of 86,400, on average)
are fractional, so testing for equality with an integer without using
the <tt class="literal">int</tt> function is usually futile.  Examples:
<blockquote>
<pre class="programlisting">next unless -M $file &gt; .5;      # files are older than 12 hours
&amp;newfile if -M $file &lt; 0;       # file is newer than process
&amp;mailwarning if int(-A) == 90;  # file ($_) was accessed 90 days ago today</pre>
</blockquote>

To reset the script's start time to the current time, say this:
<blockquote>
<pre class="programlisting">$^T = time;</pre>
</blockquote>
</p>

<a name="INDEX-927"></a>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch03_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch03_11.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">3.9. Shift Operators</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">3.11. Relational Operators</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
