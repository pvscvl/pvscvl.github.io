<html>
<head>
<title>Debugger Customization (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Debugger Customization">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch20_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch20_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch20_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">20.3. Debugger Customization</h2>

<p>
<a name="INDEX-3582"></a><a name="INDEX-3583"></a><a name="INDEX-3584"></a>
The debugger probably contains enough configuration hooks that you'll
never have to modify it yourself.  You may change the behavior
of debugger from within the debugger using its <tt class="literal">O</tt> command, from
the command line via the <tt class="literal">PERLDB_OPTS</tt> environment variable, and by running any preset commands stored in <em class="emphasis">rc</em> files.</p>


<h3 class="sect2">20.3.1. Editor Support for Debugging</h3>

<p>
<a name="INDEX-3585"></a><a name="INDEX-3586"></a><a name="INDEX-3587"></a><a name="INDEX-3588"></a>
The debugger's command-line history mechanism doesn't provide
command-line editing like many shells do: you can't retrieve previous
lines with <tt class="literal">^p</tt>, or move to the beginning of the line with <tt class="literal">^a</tt>,
although you can execute previous lines with using the exclamation
point syntax familiar to shell users.  However, if you install the
<tt class="literal">Term::ReadKey</tt> and <tt class="literal">Term::ReadLine</tt> modules from CPAN, you will have full
editing capabilities similar to what GNU <em class="emphasis">readline</em>(3) provides.</p>

<p>
<a name="INDEX-3589"></a><a name="INDEX-3590"></a>
If you have <em class="emphasis">emacs</em> installed on your system, it can interact with
the Perl debugger to provide an integrated software development
environment reminiscent of its interactions with C debuggers.  Perl
comes with a start file for making <em class="emphasis">emacs</em> act like a syntax-directed
editor that understands (some of) Perl's syntax.  Look in the <em class="emphasis">emacs</em>
directory of the Perl source distribution.  Users of <em class="emphasis">vi</em> should also
look into <em class="emphasis">vim</em> (and <em class="emphasis">gvim</em>, the mousey and windy version) for
coloring of Perl keywords.</p>

<p>A similar setup by one of us (Tom) for interacting with any
vendor-shipped <em class="emphasis">vi</em> and the X11 window system is also available.
This works similarly to the integrated multiwindow support that
<em class="emphasis">emacs</em> provides, where the debugger drives the editor.  However,
at the time of this writing, its eventual location in the Perl
distribution is uncertain.  But we thought you should know of the
possibility.</p>






<h3 class="sect2">20.3.2. Customizing with Init Files</h3>

<p>
<a name="INDEX-3591"></a><a name="INDEX-3592"></a>
You can do some customization by setting up either a <em class="emphasis">.perldb</em> or <em class="emphasis">perldb.ini</em> file (depending on your
operating system), which
contains initialization code.  This init file holds Perl code, not
debugger commands, and is processed before the <tt class="literal">PERLDB_OPTS</tt>
environment variable is looked at.  For instance, you could make
aliases by adding entries to the <tt class="literal">%DB::alias</tt> hash this way:
<blockquote>
<pre class="programlisting">$alias{len}  = 's/^len(.*)/p length($1)/';
$alias{stop} = 's/^stop (at|in)/b/';
$alias{ps}   = 's/^ps\b/p scalar /';
$alias{quit} = 's/^quit(\s*)/exit/';
$alias{help} = 's/^help\s*$/|h/';</pre>
</blockquote>

You can change options from within your init file using function
calls into the debugger's internal API:
<blockquote>
<pre class="programlisting">parse_options("NonStop=1 LineInfo=db.out AutoTrace=1 frame=2");</pre>
</blockquote>

If your init file defines the subroutine <tt class="literal">afterinit</tt>, that function is
called after debugger initialization ends.  The init file may be
located in the current directory or in the home directory.  Because
this file contains arbitrary Perl commands, for security reasons, it
must be owned by the superuser or the current user, and writable by no
one but its owner.</p>

<p>If you want to modify the debugger, copy <em class="emphasis">perl5db.pl</em> from the
Perl library to another name and hack it to your heart's content.
You'll then want to set your <tt class="literal">PERL5DB</tt> environment variable to say
something like this:
<blockquote>
<pre class="programlisting">BEGIN { require "myperl5db.pl" }</pre>
</blockquote>
<a name="INDEX-3593"></a><a name="INDEX-3594"></a><a name="INDEX-3595"></a>
As a last resort, you could also use <tt class="literal">PERL5DB</tt> to customize the
debugger by directly setting internal variables or calling internal
debugger functions.  Be aware, though, that any variables and
functions not documented either here or else in the online
<em class="emphasis">perldebug</em>, <em class="emphasis">perldebguts</em>, or <em class="emphasis">DB</em> manpages are considered
to be for internal use only and are subject to change without
notice.</p>





<a name="ch20-sect-do"></a>
<h3 class="sect2">20.3.3. Debugger Options</h3>

<p>
<a name="INDEX-3596"></a><a name="INDEX-3597"></a>
The debugger has numerous options that you can set with the <tt class="literal">O</tt>
command, either interactively or from the environment or from an
init file.</p>

<dl>
<dt>
<b><tt class="literal">recallCommand</tt>, <tt class="literal">ShellBang</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3598"></a><a name="INDEX-3599"></a><a name="INDEX-3600"></a>
The characters used to recall a command or spawn a shell.  By default,
both are set to <tt class="literal">!</tt>.</p>
</dd>


<dt>
<b><tt class="literal">pager</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3601"></a>
Program to use for output of pager-piped commands (those beginning
with a <tt class="literal">|</tt> character.)  By default, <tt class="literal">$ENV{PAGER}</tt> will be used.
Because the debugger uses your current terminal characteristics
for bold and underlining, if the chosen pager does not pass
escape sequences through unchanged, the output of some debugger
commands will not be readable when sent through the pager.</p>
</dd>


<dt>
<b><tt class="literal">tkRunning</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3602"></a>
Run under the <tt class="literal">Tk</tt> module while prompting (with <tt class="literal">ReadLine</tt>).</p>
</dd>


<dt>
<b><tt class="literal">signalLevel</tt>, <tt class="literal">warnLevel</tt>, <tt class="literal">dieLevel</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3603"></a><a name="INDEX-3604"></a><a name="INDEX-3605"></a>
Set the level of verbosity.  By default, the debugger leaves your exceptions
and warnings alone because altering them can break correctly running
programs.
<a name="INDEX-3606"></a>
</p>

<p>To disable this default safe mode, set these values to something
higher than 0.  At a level of 1, you get backtraces upon receiving any
kind of warning (this is often annoying) or exception (this is often
valuable).  Unfortunately, the debugger cannot distinguish fatal
exceptions from nonfatal ones.  If <tt class="literal">dieLevel</tt> is 1, then your
nonfatal exceptions are also traced and unceremoniously altered if
they came from <tt class="literal">eval</tt>ed strings or from any kind of <tt class="literal">eval</tt> within
modules you're attempting to load.  If <tt class="literal">dieLevel</tt> is 2, the debugger
doesn't care where they came from: it usurps your exception handler
and prints out a trace, and then modifies all exceptions with its own
embellishments.  This may perhaps be useful for some tracing purposes,
but it tends to hopelessly confuse any program that takes its exception
handling seriously.</p>

<p>The debugger will attempt to print a message when any uncaught <tt class="literal">INT</tt>,
<tt class="literal">BUS</tt>, or <tt class="literal">SEGV</tt> signal arrives.  If you're in a slow syscall (like
a <tt class="literal">wait</tt> or an <tt class="literal">accept</tt>, or a <tt class="literal">read</tt> from your keyboard or a
socket) and haven't set up your own <tt class="literal">$SIG{INT}</tt> handler, then you
won't be able to Control-C your way back to the debugger, because the
debugger's own <tt class="literal">$SIG{INT}</tt> handler doesn't understand that it needs
to raise an exception to <em class="emphasis">longjmp</em>(3) out of slow syscalls.</p>
</dd>


<dt>
<b><tt class="literal">AutoTrace</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3607"></a>
Set the trace mode (similar to <tt class="literal">t</tt> command, but can be put into
<tt class="literal">PERLDB_OPTS</tt>).</p>
</dd>


<dt>
<b><tt class="literal">LineInfo</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3608"></a>
Assign the file or pipe to print line number info to.  If it is a pipe (say,
<tt class="literal">|visual_perl_db</tt>), then a short message is used.  This is the
mechanism used to interact with a slave editor or visual debugger,
such as the special <em class="emphasis">vi</em> or <em class="emphasis">emacs</em> hooks, or the <em class="emphasis">ddd</em> graphical
debugger.</p>
</dd>


<dt>
<b><tt class="literal">inhibit_exit</tt></b>
</dt>
<dd>
<p>If 0, allows stepping off the end of the program.
<a name="INDEX-3609"></a><a name="INDEX-3610"></a>
</p>
</dd>


<dt>
<b><tt class="literal">PrintRet</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3611"></a>
Print return value after <tt class="literal">r</tt> command if set (default).</p>
</dd>


<dt>
<b><tt class="literal">ornaments</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3612"></a><a name="INDEX-3613"></a><a name="INDEX-3614"></a>
Affects screen appearance of the command line (see the online docs for
<tt class="literal">Term::ReadLine</tt>).  There is currently no way to disable ornaments, which
can render some output illegible on some displays or with some
pagers.  This is considered a bug.</p>
</dd>


<dt>
<b><tt class="literal">frame</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3615"></a><a name="INDEX-3616"></a>
Affects printing of messages on entry and exit from subroutines.  If
<tt class="literal">frame &amp; 2</tt> is false, messages are printed on entry only.  (Printing
on exit might be useful if interspersed with other messages.)</p>

<p>If <tt class="literal">frame &amp; 4</tt>, arguments to functions are printed, plus context
and caller info.  If <tt class="literal">frame &amp; 8</tt>, overloaded <tt class="literal">stringify</tt> and
<tt class="literal">tie</tt>d <tt class="literal">FETCH</tt> are enabled on the printed arguments.
If <tt class="literal">frame &amp; 16</tt>, the return value from the subroutine is printed.</p>

<p>The length at which the argument list is truncated is governed by the
next option.</p>
</dd>


<dt>
<b><tt class="literal">maxTraceLen</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3617"></a><a name="INDEX-3618"></a>
Length to truncate the argument list when the <tt class="literal">frame</tt> option's
bit 4 is set.</p>
</dd>

</dl>

<p>The following options affect what happens with the <tt class="literal">V</tt>, <tt class="literal">X</tt>, and <tt class="literal">x</tt>
commands:</p>

<dl>
<dt>
<b><tt class="literal">arrayDepth</tt>, <tt class="literal">hashDepth</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3619"></a><a name="INDEX-3620"></a>
Print only the first <em class="emphasis">n</em> elements.  If <em class="emphasis">n</em> is omitted, all of the elements will be printed.</p>
</dd>


<dt>
<b><tt class="literal">compactDump</tt>, <tt class="literal">veryCompact</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3621"></a><a name="INDEX-3622"></a><a name="INDEX-3623"></a>
Change the style of array and hash output.  If <tt class="literal">compactDump</tt> is
enabled, short arrays may be printed on one line.</p>
</dd>


<dt>
<b><tt class="literal">globPrint</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3624"></a><a name="INDEX-3625"></a>
Print contents of typeglobs.</p>
</dd>


<dt>
<b><tt class="literal">DumpDBFiles</tt></b>
</dt>
<dd>
<p>Display arrays holding debugged files.</p>
</dd>


<dt>
<b><tt class="literal">DumpPackages</tt></b>
</dt>
<dd>
<p>Display symbol tables of packages.
<a name="INDEX-3626"></a><a name="INDEX-3627"></a>
</p>
</dd>


<dt>
<b><tt class="literal">DumpReused</tt></b>
</dt>
<dd>
<p>Display contents of "reused" addresses.
<a name="INDEX-3628"></a><a name="INDEX-3629"></a>
</p>
</dd>


<dt>
<b><tt class="literal">quote</tt>, <tt class="literal">HighBit</tt>, <tt class="literal">undefPrint</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3630"></a><a name="INDEX-3631"></a>
Change the style of string display.  The default value for <tt class="literal">quote</tt>
is <tt class="literal">auto</tt>; you can enable double-quotish or single-quotish format
by setting it to <tt class="literal">"</tt> or <tt class="literal">'</tt>, respectively.  By default, characters
with their high bit set are printed verbatim.</p>
</dd>


<dt>
<b><tt class="literal">UsageOnly</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-3632"></a>
Instead of showing the contents of a package's variables, with this
option enabled, you get a rudimentary per-package memory usage dump
based on the total size of the strings found in package variables. Because the package symbol table is used, lexical variables are
ignored.</p>
</dd>

</dl>





<a name="INDEX-3633"></a><a name="INDEX-3634"></a><a name="INDEX-3635"></a><a name="INDEX-3636"></a>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch20_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch20_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">20.2. Debugger Commands</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">20.4. Unattended Execution</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
