<html>
<head>
<title>Positions (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Positions">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch05_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch05_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">5.6. Positions</h2>

<a name="INDEX-1602"></a>
<p>
<a name="INDEX-1603"></a><a name="INDEX-1604"></a><a name="INDEX-1605"></a><a name="INDEX-1606"></a>
Some regex constructs represent <em class="emphasis">positions</em> in the string to be
matched, which is a location just to the left or right of a real
character.  These metasymbols are examples of <em class="emphasis">zero-width</em> assertions
because they do not correspond to actual characters in the string.  We
often just call them "assertions".  (They're also known as "anchors"
because they tie some part of the pattern to a particular position.)</p>

<p>
<a name="INDEX-1607"></a><a name="INDEX-1608"></a>
You can always manipulate positions in a string without using
patterns.  The built-in <tt class="literal">substr</tt> function lets you
extract and assign to substrings, measured from the beginning of the
string, the end of the string, or from a particular numeric offset.
This might be all you need if you were working with fixed-length
records, for instance.  Patterns are only necessary when a numeric
offset isn't sufficient.  But most of the time, offsets aren't
sufficient--at least, not sufficiently convenient, compared to
patterns.</p>


<h3 class="sect2">5.6.1. Beginnings: The \A and ^ Assertions</h3>

<a name="INDEX-1609"></a><a name="INDEX-1610"></a>
<p>
<a name="INDEX-1611"></a><a name="INDEX-1612"></a><a name="INDEX-1613"></a><a name="INDEX-1614"></a><a name="INDEX-1615"></a>
The <tt class="literal">\A</tt> assertion matches only at the beginning of
the string, no matter what.  However, the <tt class="literal">^</tt>
assertion is the traditional beginning-of-line assertion as well as a
beginning-of-string assertion.  Therefore, if the pattern uses the
<tt class="literal">/m</tt> modifier<a href="#FOOTNOTE-8">[8]</a> and the string has
embedded newlines, <tt class="literal">^</tt> also matches anywhere inside
the string immediately following a newline character:
<blockquote>
<pre class="programlisting">/\Abar/      # Matches "bar" and "barstool"
/^bar/       # Matches "bar" and "barstool"
/^bar/m      # Matches "bar" and "barstool" and "sand\nbar"</pre>
</blockquote>

Used in conjunction with <tt class="literal">/g</tt>, the <tt class="literal">/m</tt> modifier lets
<tt class="literal">^</tt> match many times in the same string:
<blockquote>
<pre class="programlisting">s/^\s+//gm;             # Trim leading whitespace on each line
$total++ while /^./mg;  # Count nonblank lines</pre>
</blockquote>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-8"></a>
<p>[8] Or you've set the
deprecated <tt class="literal">$*</tt> variable to <tt class="literal">1</tt> and
you're not overriding <tt class="literal">$*</tt> with the
<tt class="literal">/s</tt> modifier.</p>

</blockquote>






<h3 class="sect2">5.6.2. Endings: The \z, \Z, and $ Assertions</h3>

<p>
<a name="INDEX-1616"></a><a name="INDEX-1617"></a><a name="INDEX-1618"></a><a name="INDEX-1619"></a><a name="INDEX-1620"></a><a name="INDEX-1621"></a>
</p>

<p>The <tt class="literal">\z</tt> metasymbol matches at the end of the string,
no matter what's inside.  <tt class="literal">\Z</tt> matches right before
the newline at the end of the string if there is a newline, or at the
end if there isn't.  The <tt class="literal">$</tt> metacharacter usually
means the same as <tt class="literal">\Z</tt>.  However, if the
<tt class="literal">/m</tt> modifier was specified and the string has
embedded newlines, then <tt class="literal">$</tt> can also match anywhere
inside the string right in front of a newline:
<blockquote>
<pre class="programlisting">/bot\z/      # Matches "robot"
/bot\Z/      # Matches "robot" and "abbot\n"
/bot$/       # Matches "robot" and "abbot\n"
/bot$/m      # Matches "robot" and "abbot\n" and "robot\nrules"

/^robot$/    # Matches "robot" and "robot\n"
/^robot$/m   # Matches "robot" and "robot\n" and "this\nrobot\n"
/\Arobot\Z/  # Matches "robot" and "robot\n"
/\Arobot\z/  # Matches only "robot" -- but why didn't you use eq?</pre>
</blockquote>

As with <tt class="literal">^</tt>, the <tt class="literal">/m</tt> modifier lets <tt class="literal">$</tt> match many times in the
same string when used with <tt class="literal">/g</tt>.  (These examples assume that you've read a
multiline record into <tt class="literal">$_</tt>, perhaps by setting <tt class="literal">$/</tt> to <tt class="literal">""</tt> before
reading.)
<blockquote>
<pre class="programlisting">s/\s*$//gm;   # Trim trailing whitespace on each line in paragraph

while (/^([^:]+):\s*(.*)/gm ) {  # get mail header
    $headers{$1} = $2;
}</pre>
</blockquote>

In "Variable Interpolation" later in this chapter, we'll discuss how you can
interpolate variables into patterns: if <tt class="literal">$foo</tt> is "<tt class="literal">bc</tt>", then
<tt class="literal">/a$foo/</tt> is equivalent to <tt class="literal">/abc/</tt>.  Here, the <tt class="literal">$</tt> does not match
the end of the string.  For a <tt class="literal">$</tt> to match the end of the string, it
must be at the end of the pattern or immediately be followed by a
vertical bar or closing parenthesis.</p>






<h3 class="sect2">5.6.3. Boundaries: The \b and \B  Assertions</h3>

<a name="INDEX-1622"></a><a name="INDEX-1623"></a>
<p>
<a name="INDEX-1624"></a><a name="INDEX-1625"></a><a name="INDEX-1626"></a>
The <tt class="literal">\b</tt> assertion matches at any word boundary, defined as the position
between a <tt class="literal">\w</tt> character and a <tt class="literal">\W</tt> character, in either order.  If
the order is <tt class="literal">\W\w</tt>, it's a beginning-of-word boundary, and if the
order is <tt class="literal">\w\W</tt>, it's an end-of-word boundary.  (The ends of the
string count as <tt class="literal">\W</tt> characters here.) The <tt class="literal">\B</tt> assertion matches
any position that is <em class="emphasis">not</em> a word boundary, that is, the middle of
either <tt class="literal">\w\w</tt> or <tt class="literal">\W\W</tt>.
<blockquote>
<pre class="programlisting">/\bis\b/   # matches "what it is" and "that is it"
/\Bis\B/   # matches "thistle" and "artist"
/\bis\B/   # matches "istanbul" and "so--isn't that butter?"
/\Bis\b/   # matches "confutatis" and "metropolis near you"</pre>
</blockquote>

Because <tt class="literal">\W</tt> includes all punctuation characters (except the
underscore), there are <tt class="literal">\b</tt> boundaries in the middle of strings like
"isn't", "booktech@oreilly.com", "M.I.T.", and "key/value".
<a name="INDEX-1627"></a>
</p>

<p>
<a name="INDEX-1628"></a>
Inside a character class (<tt class="literal">[\b]</tt>), a <tt class="literal">\b</tt> represents a backspace
rather than a word boundary.</p>






<h3 class="sect2">5.6.4. Progressive Matching</h3>

<p>
<a name="INDEX-1629"></a>
When used with the <tt class="literal">/g</tt> modifier, the <tt class="literal">pos</tt> function allows you to
read or set the offset where the next progressive match will start:
<blockquote>
<pre class="programlisting">$burglar = "Bilbo Baggins";
while ($burglar =~ /b/gi) {
    printf "Found a B at %d\n", pos($burglar)-1;
}</pre>
</blockquote>

(We subtract one from the position because that was the length of
the string we were looking for, and <tt class="literal">pos</tt> is always the position
just past the match.)</p>

<p>The code above prints:
<blockquote>
<pre class="programlisting">Found a B at 0
Found a B at 3
Found a B at 6</pre>
</blockquote>
<a name="INDEX-1630"></a><a name="INDEX-1631"></a>
After a failure, the match position normally resets back to the start.
If you also apply the <tt class="literal">/c</tt> (for "continue") modifier, then when the
<tt class="literal">/g</tt> runs out, the failed match doesn't reset the position pointer.
This lets you continue your search past that point without starting
over at the very beginning.
<blockquote>
<pre class="programlisting">$burglar = "Bilbo Baggins";
while ($burglar =~ /b/gci) {        # ADD /c
    printf "Found a B at %d\n", pos($burglar)-1;
}
while ($burglar =~ /i/gi) {
    printf "Found an I at %d\n", pos($burglar)-1;
}</pre>
</blockquote>

Besides the three <tt class="literal">B</tt>'s it found earlier, Perl now reports finding an
<tt class="literal">i</tt> at position 10.  Without the <tt class="literal">/c</tt>, the second loop's match would
have restarted from the beginning and found another <tt class="literal">i</tt> at position 6
first.</p>






<h3 class="sect2">5.6.5. Where You Left Off: The \G Assertion</h3>

<a name="INDEX-1632"></a><a name="INDEX-1633"></a><a name="INDEX-1634"></a><a name="INDEX-1635"></a><a name="INDEX-1636"></a>
<p>Whenever you start thinking in terms of the <tt class="literal">pos</tt> function, it's tempting
to start carving your string up with <tt class="literal">substr</tt>, but this is rarely
the right thing to do.  More often, if you started with pattern matching,
you should continue with pattern matching.  However, if you're looking
for a positional assertion, you're probably looking for <tt class="literal">\G</tt>.</p>

<p>The <tt class="literal">\G</tt> assertion represents within the pattern the same point
that <tt class="literal">pos</tt> represents outside of it.  When you're progressively
matching a string with the <tt class="literal">/g</tt> modifier (or you've used the <tt class="literal">pos</tt>
function to directly select the starting point), you can use <tt class="literal">\G</tt>
to specify the position just after the previous match.  That is,
it matches the location immediately before whatever character would
be identified by <tt class="literal">pos</tt>.  This allows you to remember where you
left off:
<blockquote>
<pre class="programlisting">($recipe = &lt;&lt;'DISH') =~ s/^\s+//gm;
    Preheat oven to 451 deg. fahrenheit.
    Mix 1 ml. dilithium with 3 oz. NaCl and
    stir in 4 anchovies.  Glaze with 1 g.
    mercury.  Heat for 4 hours and let cool
    for 3 seconds.  Serves 10 aliens.
DISH

$recipe =~ /\d+ /g;
$recipe =~ /\G(\w+)/;           # $1 is now "deg"
$recipe =~ /\d+ /g;
$recipe =~ /\G(\w+)/;           # $1 is now "ml"
$recipe =~ /\d+ /g;
$recipe =~ /\G(\w+)/;           # $1 is now "oz"</pre>
</blockquote>
<a name="INDEX-1637"></a>
The <tt class="literal">\G</tt> metasymbol is often used in a loop, as we
demonstrate in our next example.  We "pause" after every digit
sequence, and at that position, we test whether there's an
abbreviation.  If so, we grab the next two words.  Otherwise, we just
grab the next word:
<blockquote>
<pre class="programlisting">pos($recipe) = 0;                 # Just to be safe, reset \G to 0
while ( $recipe =~ /(\d+) /g ) {
    my $amount = $1;
    if ($recipe =~ / \G (\w{0,3}) \. \s+ (\w+) /x) {  # abbrev. + word
        print "$amount $1 of $2\n";
    } else {
        $recipe =~ / \G (\w+) /x;                     # just a word
        print "$amount $1\n";
    }
}</pre>
</blockquote>

That produces:
<blockquote>
<pre class="programlisting">451 deg of fahrenheit
1 ml of dilithium
3 oz of NaCl
4 anchovies
1 g of mercury
4 hours
3 seconds
10 aliens</pre>
</blockquote>
</p>

<a name="INDEX-1638"></a><a name="INDEX-1639"></a><a name="INDEX-1640"></a>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch05_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">5.5. Quantifiers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">5.7. Capturing and Clustering</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
