<html>
<head>
<title>Semantics (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Semantics">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch06_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">6.2. Semantics</h2>

<p>
<a name="INDEX-1803"></a><a name="INDEX-1804"></a>
Before you get too worked up over all that syntax, just remember
that the normal way to define a simple subroutine ends up looking
like this:
<blockquote>
<pre class="programlisting">sub razzle {
    print "Ok, you've been razzled.\n";
}</pre>
</blockquote>

and the normal way to call it is simply:
<blockquote>
<pre class="programlisting">razzle();</pre>
</blockquote>
<a name="INDEX-1805"></a><a name="INDEX-1806"></a><a name="INDEX-1807"></a>
In this case, we ignored inputs (arguments) and outputs
(return values).  But the Perl model for passing data into and out of
a subroutine is really quite simple: all function parameters are passed as one
single, flat list of scalars, and multiple return values are likewise
returned to the caller as one single, flat list of scalars.  As
with any <em class="replaceable">LIST</em>, any arrays or hashes passed in these lists will
interpolate their values into the flattened list, losing their
identities--but there are several ways to get around this, and the
automatic list interpolation is frequently quite useful.  Both
parameter lists and return lists may contain as many or as few
scalar elements as you'd like (though you may put constraints on
the parameter list by using prototypes).  Indeed, Perl is designed
around this notion of <em class="emphasis">variadic</em> functions (those taking any number
of arguments), unlike C, where they're sort of grudgingly kludged
in so that you can call <em class="emphasis">printf</em>(3).
<a name="INDEX-1808"></a>
</p>

<p>
<a name="INDEX-1809"></a><a name="INDEX-1810"></a><a name="INDEX-1811"></a>
Now, if you're going to design a language around the notion of passing
varying numbers of arbitrary arguments, you'd better make it easy to
process those arbitrary lists of arguments.  Any arguments passed to a
Perl routine come in as the array <tt class="literal">@_</tt>.  If you call a function with
two arguments, they are accessible inside the function as the first two
elements of that array: <tt class="literal">$_[0]</tt> and <tt class="literal">$_[1]</tt>. Since <tt class="literal">@_</tt> is a just a
regular array with an irregular name, you can do anything to it you'd
normally do to an array.<a href="#FOOTNOTE-2">[2]</a>
The array <tt class="literal">@_</tt> is a local array, but its values are aliases to the
actual scalar parameters.  (This is known as pass-by-reference
semantics.)  Thus you can modify the actual parameters if you modify
the corresponding element of <tt class="literal">@_</tt>.  (This is rarely done, however,
since it's so easy to return interesting values in Perl.)
<a name="INDEX-1812"></a><a name="INDEX-1813"></a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-2"></a>
<p>[2] This is an area where Perl is
<em class="emphasis">more</em> orthogonal than the typical programming language.</p>

</blockquote>

<p>
<a name="INDEX-1814"></a><a name="INDEX-1815"></a><a name="INDEX-1816"></a><a name="INDEX-1817"></a>
The return value of the subroutine (or of any other block, for that
matter) is the value of the last expression evaluated.  Or you may use
an explicit <tt class="literal">return</tt> statement to specify the return value and exit the
subroutine from any point in the subroutine.  Either way, as the
subroutine is called in a scalar or list context, so also is the final
expression of the routine evaluated in that same scalar or list context.</p>


<h3 class="sect2">6.2.1. Tricks with Parameter Lists</h3>

<p>
<a name="INDEX-1818"></a><a name="INDEX-1819"></a><a name="INDEX-1820"></a><a name="INDEX-1821"></a>
Perl does not yet have named formal parameters, but in practice all you
do is copy the values of <tt class="literal">@_</tt> to a <tt class="literal">my</tt> list, which serves nicely for
a list of formal parameters.  (Not coincidentally, copying the values
changes the pass-by-reference semantics into pass-by-value, which is
how people usually expect parameters to work anyway, even if they
don't know the fancy computer science terms for it.)  Here's a typical
example:
<blockquote>
<pre class="programlisting">sub maysetenv {
    my ($key, $value) = @_;
    $ENV{$key} = $value unless $ENV{$key};
}</pre>
</blockquote>
<a name="INDEX-1822"></a>
But you aren't required to name your parameters, which is the whole
point of the <tt class="literal">@_</tt> array.  For example, to calculate a maximum, you can
just iterate over <tt class="literal">@_</tt> directly:
<blockquote>
<pre class="programlisting">sub max {
    my $max = shift(@_);
    for my $item (@_) {
        $max = $item if $max &lt; $item;
    }
    return $max;
}

$bestday = max($mon,$tue,$wed,$thu,$fri);</pre>
</blockquote>

Or you can fill an entire hash at once:
<blockquote>
<pre class="programlisting">sub configuration {
    my %options = @_;
    print "Maximum verbosity.\n" if $options{VERBOSE} == 9;
}

configuration(PASSWORD =&gt; "xyzzy", VERBOSE =&gt; 9, SCORE =&gt; 0);</pre>
</blockquote>
<a name="INDEX-1823"></a>
Here's an example of not naming your formal arguments so that you
can modify your actual arguments:
<blockquote>
<pre class="programlisting">upcase_in($v1, $v2);  # this changes $v1 and $v2
sub upcase_in {
    for (@_) { tr/a-z/A-Z/ }
}</pre>
</blockquote>
<a name="INDEX-1824"></a>
You aren't allowed to modify constants in this way, of course.  If an
argument were actually a scalar literal like <tt class="literal">"hobbit"</tt> or read-only
scalar variable like <tt class="literal">$1</tt>, and you tried to change it, Perl would
raise an exception (presumably fatal, possibly career-threatening).
For example, this won't work:
<blockquote>
<pre class="programlisting">upcase_in("frederick");</pre>
</blockquote>

It would be much safer if the <tt class="literal">upcase_in</tt> function were written to
return a copy of its parameters instead of changing them in place:
<blockquote>
<pre class="programlisting">($v3, $v4) = upcase($v1, $v2);
sub upcase {
    my @parms = @_;
    for (@parms) { tr/a-z/A-Z/ }
    # Check whether we were called in list context.
    return wantarray ? @parms : $parms[0];
}</pre>
</blockquote>

Notice how this (unprototyped) function doesn't care whether it was
passed real scalars or arrays.  Perl will smash everything into one big,
long, flat <tt class="literal">@_</tt> parameter list.  This is one of the places where Perl's
simple argument-passing style shines.  The <tt class="literal">upcase</tt> function will work
perfectly well without changing the <tt class="literal">upcase</tt> definition even if we feed
it things like this:
<blockquote>
<pre class="programlisting">@newlist = upcase(@list1, @list2);
@newlist = upcase( split /:/, $var );</pre>
</blockquote>

Do not, however, be tempted to do this:
<blockquote>
<pre class="programlisting">(@a, @b) = upcase(@list1, @list2);   # WRONG</pre>
</blockquote>

Why not?  Because, like the flat incoming parameter list in <tt class="literal">@_</tt>, the
return list is also flat.  So this stores everything in <tt class="literal">@a</tt> and
empties out <tt class="literal">@b</tt> by storing the null list there.  See the later section <a href="ch06_03.htm">Section 6.3, "Passing References"</a> for alternatives.</p>






<h3 class="sect2">6.2.2. Error Indications</h3>

<p>
<a name="INDEX-1825"></a><a name="INDEX-1826"></a>
If you want your function to return in such a way that the caller will
realize there's been an error, the most natural way to do this in Perl
is to use a bare <tt class="literal">return</tt> statement without an argument.  That way
when the function is used in scalar context, the caller gets <tt class="literal">undef</tt>,
and when used in list context, the caller gets a null list.</p>

<p>
<a name="INDEX-1827"></a>
Under extraordinary circumstances, you might choose to raise an
exception to indicate an error.  Use this measure sparingly, though;
otherwise, your whole program will be littered with exception
handlers.  For example, failing to open a file in a generic
file-opening function is hardly an exceptional event.  However,
ignoring that failure might well be.  The <tt class="literal">wantarray</tt> built-in
returns <tt class="literal">undef</tt> if your function was called in void context, so you
can tell if you're being ignored:
<blockquote>
<pre class="programlisting">if ($something_went_awry) {
    return if defined wantarray;  # good, not void context.
    die "Pay attention to my error, you danglesocket!!!\n";
}</pre>
</blockquote>
</p>






<h3 class="sect2">6.2.3. Scoping Issues</h3>

<p>
<a name="INDEX-1828"></a><a name="INDEX-1829"></a><a name="INDEX-1830"></a>
Subroutines may be called recursively because each call gets its own
argument array, even when the routine calls itself.  If a subroutine
is called using the <tt class="literal">&amp;</tt> form, the argument list is optional.  If the
<tt class="literal">&amp;</tt> is used but the argument list is omitted, something special
happens: the <tt class="literal">@_</tt> array of the calling routine is supplied
implicitly.  This is an efficiency mechanism that new users may wish
to avoid.
<blockquote>
<pre class="programlisting">&amp;foo(1,2,3);    # pass three arguments
foo(1,2,3);     # the same

foo();          # pass a null list
&amp;foo();         # the same

&amp;foo;           # foo() gets current args, like foo(@_), but faster!
foo;            # like foo() if sub foo predeclared, else bareword "foo"</pre>
</blockquote>

Not only does the <tt class="literal">&amp;</tt> form make the argument list
optional, but it
also disables any prototype checking on the arguments you do provide.
This is partly for historical reasons and partly to provide a
convenient way to cheat if you know what you're doing.  See the section
<a href="ch06_04.htm">Section 6.4, "Prototypes"</a> later in this chapter.</p>

<p>
<a name="INDEX-1831"></a>
Variables you access from inside a function that haven't been declared
private to that function are not necessarily global variables; they
still follow the normal block-scoping rules of Perl.  As explained in <a href="ch02_05.htm">Section 6.5, "Names"</a> in <a href="ch02_01.htm">Chapter 2, "Bits and Pieces"</a>, this means they
look first in the surrounding lexical scope (or scopes) for resolution,
then on to the single package scope.  From the viewpoint of a
subroutine, then, any <tt class="literal">my</tt> variables from an enclosing lexical scope
are still perfectly visible.</p>

<p>For example, the <tt class="literal">bumpx</tt> function below has access to the file-scoped
<tt class="literal">$x</tt> lexical variable because the scope where the <tt class="literal">my</tt> was
declared--the file itself--hasn't been closed off before the
subroutine is defined:
<blockquote>
<pre class="programlisting"># top of file
my $x = 10;         # declare and initialize variable
sub bumpx { $x++ }  # function can see outer lexical variable</pre>
</blockquote>
<a name="INDEX-1832"></a>
</p>

<p>
<a name="INDEX-1833"></a>
C and C++ programmers would probably think of <tt class="literal">$x</tt> as a "file
static" variable.  It's private as far as functions in other files
are concerned, but global from the perspective of functions declared
after the <tt class="literal">my</tt>.  C programmers who come to Perl looking
for what
they would call "static variables" for files or functions find no
such keyword in Perl.  Perl programmers generally avoid the word
"static", because static systems are dead and boring, and because
the word is so muddled in historical usage.</p>

<p>Although Perl doesn't include the word "static" in its lexicon,
Perl programmers have no problem creating variables that are private to a
function and persist across function calls.  There's just no special
word for these.  Perl's richer scoping primitives combine with
automatic memory management in ways that someone looking for a
"static" keyword might never think of trying.</p>

<p>
<a name="INDEX-1834"></a>
Lexical variables don't get automatically garbage collected just
because their scope has exited; they wait to get recycled until they're no
longer <em class="emphasis">used</em>, which is much more important.  To create private
variables that aren't automatically reset across function calls,
enclose the whole function in an extra block and put both the <tt class="literal">my</tt>
declaration and the function definition within that block.  You can
even put more than one function there for shared access to an
otherwise private variable:
<blockquote>
<pre class="programlisting">{
    my $counter = 0;
    sub next_counter { return ++$counter }
    sub prev_counter { return --$counter }
}</pre>
</blockquote>

As always, access to the lexical variable is limited to code within
the same lexical scope.  The names of the two functions, on the other hand,
are globally accessible (within the package), and, since they were
defined inside <tt class="literal">$counter</tt>'s scope, they can still access that
variable even though no one else can.</p>

<p>
<a name="INDEX-1835"></a><a name="INDEX-1836"></a><a name="INDEX-1837"></a><a name="INDEX-1838"></a>
If this function is loaded via <tt class="literal">require</tt> or <tt class="literal">use</tt>, then this is
probably just fine.  If it's all in the main program, you'll need to
make sure any run-time assignment to <tt class="literal">my</tt> is executed early enough, either
by putting the whole block before your main program, or alternatively, by
placing a <tt class="literal">BEGIN</tt> or <tt class="literal">INIT</tt> block around it to make sure it gets
executed before your program starts:
<blockquote>
<pre class="programlisting">BEGIN {
    my @scale = ('A' .. 'G');
    my $note  = -1;
    sub next_pitch { return $scale[ ($note += 1) %= @scale ] };
}</pre>
</blockquote>

The <tt class="literal">BEGIN</tt> doesn't affect the subroutine definition, nor does it affect
the persistence of any lexicals used by the subroutine.  It's just
there to ensure the variables get initialized before the subroutine
is ever called.  For more on declaring private and global variables,
see <tt class="literal">my</tt> and <tt class="literal">our</tt> respectively in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.
The <tt class="literal">BEGIN</tt> and <tt class="literal">INIT</tt> constructs are explained in <a href="ch18_01.htm">Chapter 18, "Compiling"</a>.</p>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch06_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch06_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">6.1. Syntax</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">6.3. Passing References</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
