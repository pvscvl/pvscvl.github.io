<html>
<head>
<title>Names (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Names">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch02_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">2.5. Names</h2>

<p>
<a name="INDEX-459"></a><a name="INDEX-460"></a><a name="INDEX-461"></a><a name="INDEX-462"></a><a name="INDEX-463"></a><a name="INDEX-464"></a><a name="INDEX-465"></a><a name="INDEX-466"></a><a name="INDEX-467"></a><a name="INDEX-468"></a>
We've talked about storing values in variables, but the variables
themselves (their names and their associated definitions) also need to
be stored somewhere.  In the abstract, these places are known as
<em class="emphasis">namespaces</em>.  Perl provides two kinds of namespaces, which are often
called <em class="emphasis">symbol tables</em> and <em class="emphasis">lexical scopes</em>.<a href="#FOOTNOTE-6">[6]</a>  You
may have an arbitrary number of symbol tables or lexical scopes, but
every name you define gets stored in one or the other.  We'll explain
both kinds of namespaces as we go along.  For now we'll just say that
symbol tables are global hashes that happen to contain symbol table
entries for global variables (including the hashes for other symbol
tables).  In contrast, lexical scopes are <em class="emphasis">unnamed</em>
scratchpads that
don't live in any symbol table, but are attached to a block of code in
your program.  They contain variables that can only be seen by the
block.  (That's what we mean by a <em class="emphasis">scope</em>).  The <em class="emphasis">lexical</em> part just
means, "having to do with text", which is not at all what a
lexicographer would mean by it.  Don't blame us.)</p>
<blockquote class="footnote">

<a name="FOOTNOTE-6"></a>
<p>[6]  We also call
them <em class="emphasis">packages</em> and <em class="emphasis">pads</em> when we're talking about Perl's specific
implementations, but those longer monikers are the generic industry
terms, so we're pretty much stuck with them.  Sorry.</p>

</blockquote>

<p>
<a name="INDEX-469"></a>
Within any given namespace (whether global or lexical), every variable
type has its own subnamespace, determined by the funny character.  You
can, without fear of conflict, use the same name for a scalar variable,
an array, or a hash (or, for that matter, a filehandle, a subroutine
name, a label, or your pet llama).  This means that <tt class="literal">$foo</tt> and <tt class="literal">@foo</tt>
are two different variables.  Together with the previous rules, it also
means that <tt class="literal">$foo[1]</tt> is an element of <tt class="literal">@foo</tt> totally unrelated to the
scalar variable <tt class="literal">$foo</tt>.  This may seem a bit weird, but that's okay,
because it <em class="emphasis">is</em> weird.</p>

<p>
<a name="INDEX-470"></a><a name="INDEX-471"></a>
Subroutines may be named with an initial <tt class="literal">&amp;</tt>, although the funny
character is optional when calling the subroutine.  Subroutines aren't
generally considered lvalues, though recent versions of Perl allow you
to return an lvalue from a subroutine and assign to that, so it can
look as though you're assigning to the subroutine.</p>

<p>
<a name="INDEX-472"></a>
Sometimes you just want a name for "everything named foo" regardless of
its funny character.  So symbol table entries can be named with an
initial <tt class="literal">*</tt>, where the asterisk stands for all the other funny
characters.  These are called <em class="emphasis">typeglobs</em>, and they have several uses.
They can also function as lvalues.  Assignment to <em class="emphasis">typeglobs</em>
is how Perl implements importing of symbols from one symbol table to
another.  More about that later too.
<a name="INDEX-473"></a>
</p>

<p>
<a name="INDEX-474"></a><a name="INDEX-475"></a><a name="INDEX-476"></a><a name="INDEX-477"></a><a name="INDEX-478"></a><a name="INDEX-479"></a>
Like most computer languages, Perl has a list of reserved words that it
recognizes as special keywords.  However, because variable names always
start with a funny character, reserved words don't actually conflict
with variable names.  Certain other kinds of names don't have funny
characters, though, such as labels and filehandles.  With these, you do
have to worry (a little) about conflicting with reserved words.  Since
most reserved words are entirely lowercase, we recommend that you pick
label and filehandle names that contain uppercase letters.  For
example, if you say <tt class="literal">open(LOG, logfile)</tt> rather than the
regrettable <tt class="literal">open(log, "logfile")</tt>, you won't confuse
Perl into thinking you're talking about the built-in <tt class="literal">log</tt>
operator (which does logarithms, not tree trunks).  Using uppercase
filehandles also improves readability<a href="#FOOTNOTE-7">[7]</a>
and protects you from conflict with reserved
words we might add in the future.  For similar reasons, user-defined
modules are typically named with initial capitals so that they'll look
different from the built-in modules known as pragmas, which are named
in all lowercase.  And when we get to 

object-oriented programming,

you'll notice that class names are usually capitalized for the same
reason.
<a name="INDEX-480"></a><a name="INDEX-481"></a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-7"></a>
<p>[7] One of the
design principles of Perl is that different things should look
different.  Contrast this with languages that try to force different
things to look the same, to the detriment of readability.</p>

</blockquote>

<p>
<a name="INDEX-482"></a><a name="INDEX-483"></a><a name="INDEX-484"></a><a name="INDEX-485"></a><a name="INDEX-486"></a>
As you might deduce from the preceding paragraph, case is significant
in identifiers--<tt class="literal">FOO</tt>, <tt class="literal">Foo</tt>, and 
<tt class="literal">foo</tt> are all different names in
Perl.  Identifiers start with a letter or underscore and may be of any
length (for values of "any" ranging between 1 and 251, inclusive) and
may contain letters, digits, and underscores.  This includes Unicode
letters and digits.  Unicode ideographs also count as letters, but we
don't recommend you use them unless you can read them.  See
<a href="ch15_01.htm">Chapter 15, "Unicode"</a>.</p>

<p>Names that follow funny characters don't have to be identifiers, strictly
speaking.  They
can start with a digit, in which case they may only contain more
digits, as in <tt class="literal">$123</tt>.  Names that start with anything other than a
letter, digit, or underscore are (usually) limited to that one
character (like <tt class="literal">$?</tt> or <tt class="literal">$$</tt>), and generally have a predefined
significance to Perl.  For example, just as in the Bourne shell, <tt class="literal">$$</tt>
is the current process ID and <tt class="literal">$?</tt> the exit status of your last child
process.
<a name="INDEX-487"></a><a name="INDEX-488"></a>
</p>

<p>
<a name="INDEX-489"></a><a name="INDEX-490"></a>
As of version 5.6, Perl also has an extensible syntax for internal
variables names.  Any variable of the form
<tt class="literal">${^</tt><em class="replaceable">NAME</em><tt class="literal">}</tt>
is a special variable reserved for use by Perl.  All these
non-identifier names are forced to be in the main symbol table.  See
<a href="ch28_01.htm">Chapter 28, "Special Names"</a>, for some examples.</p>

<p>
<a name="INDEX-491"></a><a name="INDEX-492"></a><a name="INDEX-493"></a><a name="INDEX-494"></a><a name="INDEX-495"></a>
It's tempting to think of identifiers and names as the same thing,
but when we say <em class="emphasis">name</em>, we usually mean a fully qualified name,
that is, a name that says which symbol table it lives in.  Such
names may be formed of a sequence of identifiers separated by the <tt class="literal">::</tt>
token:
<blockquote>
<pre class="programlisting">$Santa::Helper::Reindeer::Rudolph::nose</pre>
</blockquote>

That works just like the directories and filenames in a pathname:
<blockquote>
<pre class="programlisting">/Santa/Helper/Reindeer/Rudolph/nose</pre>
</blockquote>

In the Perl version of that notion, all the leading identifiers are the
names of nested symbol tables, and the last identifier is the name of
the variable within the most deeply nested symbol table.  For
instance, in the variable above, the symbol table is named
<tt class="literal">Santa::Helper::Reindeer::Rudolph::</tt>, and the actual
variable within that symbol table is <tt class="literal">$nose</tt>.  (The
value of that variable is, of course, "<tt class="literal">red</tt>".)
<a name="INDEX-496"></a>
</p>

<p>
<a name="INDEX-497"></a><a name="INDEX-498"></a><a name="INDEX-499"></a><a name="INDEX-500"></a> A symbol table in
Perl is also known as a <em class="emphasis">package</em>, so these are
often called package variables.  Package variables are nominally
private to the package in which they exist, but are global in the
sense that the packages themselves are global.  That is, anyone can
name the package to get at the variable; it's just hard to do this by
accident.  For instance, any program that mentions
<tt class="literal">$Dog::bert</tt> is asking for the
<tt class="literal">$bert</tt> variable within the <tt class="literal">Dog::</tt>
package.  That is an entirely separate variable from
<tt class="literal">$Cat::bert</tt>.  See <a href="ch10_01.htm">Chapter 10, "Packages"</a>.</p>

<p>
<a name="INDEX-501"></a><a name="INDEX-502"></a><a name="INDEX-503"></a>
Variables attached to a lexical scope are not in any package,
so lexically scoped variable names may not contain the <tt class="literal">::</tt> sequence.
(Lexically scoped variables are declared with a <tt class="literal">my</tt> declaration.)</p>


<h3 class="sect2">2.5.1. Name Lookups</h3>

<p>
<a name="INDEX-504"></a><a name="INDEX-505"></a>
So the question is, what's in a name?  How does Perl figure out what
you mean if you just say <tt class="literal">$bert</tt>?  Glad you asked.  Here are the rules
the Perl parser uses while trying to understand an unqualified name in
context:</p>

<ol>
<li>
<p>
<a name="INDEX-506"></a><a name="INDEX-507"></a><a name="INDEX-508"></a>
First, Perl looks earlier in the immediately enclosing block to see
whether the variable is declared in that same block with a
<tt class="literal">my</tt> (or <tt class="literal">our</tt>) declaration (see
those entries in <a href="ch29_01.htm">Chapter 29, "Functions"</a>, as well as the
section <a href="ch04_08.htm">Section 2.8, "Scoped Declarations"</a> in <a href="ch04_01.htm">Chapter 4, "Statements and Declarations"</a>).  If there is a
<tt class="literal">my</tt> declaration, the variable is lexically scoped
and doesn't exist in any package--it exists only in that lexical scope
(that is, in the block's scratchpad).  Because lexical scopes are
unnamed, nobody outside that chunk of program can even name your
variable.<a href="#FOOTNOTE-8">[8]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-8"></a>
<p>[8]If you use an <tt class="literal">our</tt>
declaration instead of a <tt class="literal">my</tt> declaration, this only
declares a lexically scoped <em class="emphasis">alias</em> (a nickname)
for a package variable, rather than declaring a true lexically scoped
variable the way <tt class="literal">my</tt> does. Outside code can still
get at the real variable through its package, but in all other
respects an <tt class="literal">our</tt> declaration behaves like a
<tt class="literal">my</tt> declaration.  This is handy when you're trying
to limit your own use of globals with the <tt class="literal">use
strict</tt> pragma (see the <tt class="literal">strict</tt> pragma in
<a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a>).  But you should always
prefer <tt class="literal">my</tt> if you don't need a
global.</p>

</blockquote>
</li>
<li>
<p>If that doesn't work, Perl looks for the block enclosing that block
and tries again for a lexically scoped variable in the larger block.
Again, if Perl finds one, the variable belongs only to the lexical
scope from the point of declaration through the end of the block in
which it is declared--including any nested blocks, like the one we
just came from in step 1.  If Perl doesn't find a declaration, it
repeats step 2 until it runs out of enclosing blocks.</p>
</li>
<li>
<p>
<a name="INDEX-509"></a><a name="INDEX-510"></a><a name="INDEX-511"></a>
When Perl runs out of enclosing blocks, it examines the whole
compilation unit for declarations as if it were a block.  (A
<em class="emphasis">compilation unit</em> is just the entire current file, or the string
currently being compiled by an <tt class="literal">eval</tt><em class="replaceable">STRING</em>
operator.)  If the
compilation unit is a file, that's the largest possible lexical scope,
and Perl will look no further for lexically scoped variables, so we go
to step 4.  If the compilation unit is a string, however, things get
fancier.  A string compiled as Perl code at run time pretends that it's
a block within the lexical scope from which the <tt class="literal">eval</tt><em class="replaceable">STRING</em> is
running, even though the actual boundaries of the lexical scope are the
limits of the string containing the code rather than any real braces.
So if Perl doesn't find the variable in the lexical scope of the
string, we pretend that the <tt class="literal">eval</tt><em class="replaceable">STRING</em> is a block and go back to
step 2, only this time starting with the lexical scope of the <tt class="literal">eval</tt><em class="replaceable">STRING</em> operator instead of the lexical scope inside its string.</p>
</li>
<li>
<p>
<a name="INDEX-512"></a><a name="INDEX-513"></a>
If we get here, it means Perl didn't find any declaration (either
<tt class="literal">my</tt> or <tt class="literal">our</tt>) for your variable.
Perl now gives up on lexically scoped variables and assumes that your
variable is a package variable.  If the <tt class="literal">strict</tt>
pragma is in effect, you will now get an error, unless the variable is
one of Perl's predefined variables or has been imported into the
current package.  This is because that pragma disallows the use of
unqualified global names.  However, we aren't done with lexical scopes
just yet.  Perl does the same search of lexical scopes as it did in
steps 1 through 3, only this time it searches for
<tt class="literal">package</tt> declarations instead of variable
declarations.  If it finds such a package declaration, it knows that
the current code is being compiled for the package in question and
prepends the declared package name to the front of the variable.</p>
</li>
<li>
<p>
<a name="INDEX-514"></a><a name="INDEX-515"></a>
If there is no package declaration in any surrounding lexical scope,
Perl looks for the variable name in the unnamed top-level package,
which happens to have the name <tt class="literal">main</tt> when it isn't
going around without a name tag.  So in the absence of any
declarations to the contrary, <tt class="literal">$bert</tt> means the same
as <tt class="literal">$::bert</tt>, which means the same as
<tt class="literal">$main::bert</tt>.  (But because <tt class="literal">main</tt>
is just another package in the top-level unnamed package, it's also
<tt class="literal">$::main::bert</tt>, and
<tt class="literal">$main::main::bert</tt>,
<tt class="literal">$::main::main::bert</tt> and so on.  This could be
construed as a useless fact.  But see "Symbol Tables" in
<a href="ch10_01.htm">Chapter 10, "Packages"</a>.)</p>
</li>
</ol>
<p>
<a name="INDEX-516"></a>
There are several implications to these search rules that might not
be obvious, so we'll make them explicit.</p>

<ul>
<li>
<p>
<a name="INDEX-"></a>
Because the file is the largest possible lexical scope, a lexically
scoped variable can never be visible outside the file in which it's declared. File scopes do not nest.</p>
</li>
<li>
<p>Any particular bit of Perl is compiled in at least one lexical scope
and exactly one package scope.  The mandatory lexical scope is, of
course, the file itself.  Additional lexical scopes are provided by
each enclosing block.  All Perl code is also compiled in the scope of
exactly one package, and although the declaration of which package you're
in is lexically scoped, packages themselves are not lexically constrained.
That is, they're global.</p>
</li>
<li>
<p>An unqualified variable name may therefore be searched for in many
lexical scopes, but only one package scope, whichever one is currently in
effect (which is lexically determined).</p>
</li>
<li>
<p>A variable name may only attach to one scope.  Although at least two
different scopes (lexical and package) are active everywhere in your
program, a variable can only exist in one of those scopes.</p>
</li>
<li>
<p>An unqualified variable name can therefore resolve to only a single
storage location, either in the first enclosing lexical scope in
which it is declared, or else in the current package--but not both.
The search stops as soon as that storage location is resolved, and
any storage location that it would have found had the search continued
is effectively hidden.</p>
</li>
<li>
<p>The location of the typical variable name can be completely determined
at compile time.</p>
</li>
</ul>
<p>
</p>

<p>
<a name="INDEX-517"></a><a name="INDEX-518"></a>
Now that you know all about how the Perl compiler deals with names, you
sometimes have the problem that you don't <em class="emphasis">know</em> the name of what you
want at compile time.  Sometimes you want to name something indirectly;
we call this the problem of <em class="emphasis">indirection</em>.  So Perl provides a
mechanism: you can always replace an alphanumeric variable name with a
block containing an expression that returns a <em class="emphasis">reference</em> to the real
data.  For instance, instead of saying:
<blockquote>
<pre class="programlisting">$bert</pre>
</blockquote>

you might say:
<blockquote>
<pre class="programlisting">${ some_expression() }</pre>
</blockquote>

and if the <tt class="literal">some_expression()</tt> function returns a
reference to variable <tt class="literal">$bert</tt> (or even the string,
<tt class="literal">"bert"</tt>), it will work just as if you'd said
<tt class="literal">$bert</tt> in the first place.  On the other hand,
if the function returns a reference to <tt class="literal">$ernie</tt>,
you'll get his variable instead.  The syntax shown is the most general
(and least legible) form of indirection, but we'll cover several
convenient variations in <a href="ch08_01.htm">Chapter 8, "References"</a>.</p>

<a name="INDEX-519"></a><a name="INDEX-520"></a>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">2.4. Variables</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">2.6. Scalar Values</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
