<html>
<head>
<title>Creating Modules (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Creating Modules">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch11_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch11_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch11_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">11.2. Creating Modules</h2>

<p>
<a name="INDEX-2298"></a><a name="INDEX-2299"></a><a name="INDEX-2300"></a><a name="INDEX-2301"></a>
Earlier, we said that there are two ways for a module to make its
interface available to your program: by exporting symbols or by
allowing method calls.  We'll show you an example of the first style
here; the second style is for object-oriented modules and is described
in the next chapter.  (Object-oriented modules should export nothing,
since the whole idea of methods is that Perl finds them for you
automatically, based on the type of the object.)</p>

<p>To construct a module called <tt class="literal">Bestiary</tt>, create a file called
<em class="emphasis">Bestiary.pm</em> that looks like this:
<blockquote>
<pre class="programlisting">package      Bestiary;
require      Exporter;

our @ISA       = qw(Exporter);
our @EXPORT    = qw(camel);    # Symbols to be exported by default
our @EXPORT_OK = qw($weight);  # Symbols to be exported on request
our $VERSION   = 1.00;         # Version number

### Include your variables and functions here

sub camel { print "One-hump dromedary" }

$weight = 1024;

1;</pre>
</blockquote>

A program can now say <tt class="literal">use Bestiary</tt> to be able to
access the <tt class="literal">camel</tt> function (but not the
<tt class="literal">$weight</tt> variable), and <tt class="literal">use Bestiary
qw(camel $weight)</tt> to access both the function and the
variable.</p>

<p>You can also create modules that dynamically load code written in C.
See <a href="ch21_01.htm">Chapter 21, "Internals and Externals"</a>, for details.</p>


<h3 class="sect2">11.2.1. Module Privacy and the Exporter</h3>

<p>
<a name="INDEX-2302"></a><a name="INDEX-2303"></a><a name="INDEX-2304"></a>
Perl does not automatically patrol private/public borders within its
modules--unlike languages such as C++, Java, and Ada, Perl isn't
obsessed with enforced privacy.  A Perl module would prefer that you
stay out of its living room because you weren't invited, not because
it has a shotgun.</p>

<p>
<a name="INDEX-2305"></a><a name="INDEX-2306"></a>
The module and its user have a contract, part of which is common law
and part of which is written.  Part of the common law contract is that
a module refrain from changing any namespace it wasn't asked to
change.  The written contract for the module (that is, the
documentation) may make other provisions.  But then, having read the
contract, you presumably know that when you say <tt class="literal">use
RedefineTheWorld</tt> you're redefining the world, and you're
willing to risk the consequences. The most common way to redefine
worlds is to use the <tt class="literal">Exporter</tt> module. As we'll see
later in the chapter, you can even redefine built-ins with this
module.</p>

<p>
<a name="INDEX-2307"></a><a name="INDEX-2308"></a><a name="INDEX-2309"></a><a name="INDEX-2310"></a><a name="INDEX-2311"></a>
When you <tt class="literal">use</tt> a module, the module typically makes
some variables or functions available to your program, or more
specifically, to your program's current package. This act of exporting
symbols from the module (and thus importing them into your program) is
sometimes called <em class="emphasis">polluting</em> your namespace.  Most
modules use <tt class="literal">Exporter</tt> to do this; that's why
most modules say something like this near the top:
<blockquote>
<pre class="programlisting">require Exporter;
our @ISA = ("Exporter");</pre>
</blockquote>
<a name="INDEX-2312"></a>
These two lines make the module inherit from the
<tt class="literal">Exporter</tt> class.  Inheritance is described in the
next chapter, but all you need to know is our
<tt class="literal">Bestiary</tt> module can now export symbols into other
packages with lines like these:
<blockquote>
<pre class="programlisting">our @EXPORT    = qw($camel %wolf ram);              # Export by default
our @EXPORT_OK = qw(leopard @llama $emu);           # Export by request
our %EXPORT_TAGS = (                                # Export as group
                     camelids =&gt; [qw($camel @llama)],
                     critters =&gt; [qw(ram $camel %wolf)],
                   );</pre>
</blockquote>
</p>

<p>From the viewpoint of the exporting module, the <tt class="literal">@EXPORT</tt> array contains the names of variables and functions to
be exported by default: what your program gets when it says
<tt class="literal">use Bestiary</tt>.  Variables and functions in <tt class="literal">@EXPORT_OK</tt> are
exported only when the program specifically requests them in the
<tt class="literal">use</tt> statement.  Finally, the key/value pairs in <tt class="literal">%EXPORT_TAGS</tt>
allow the program to include particular groups of the symbols listed
in <tt class="literal">@EXPORT</tt> and <tt class="literal">@EXPORT_OK</tt>.</p>

<p>From the viewpoint of the importing package, the <tt class="literal">use</tt> statement specifies a list of symbols to import, a group
named in <tt class="literal">%EXPORT_TAGS</tt>, a pattern of symbols, or nothing at all, in
which case the symbols in <tt class="literal">@EXPORT</tt> would be imported from the module
into your program.</p>

<p>You can include any of these statements to import symbols from
the <tt class="literal">Bestiary</tt> module:
<blockquote>
<pre class="programlisting">use Bestiary;                    # Import @EXPORT symbols
use Bestiary ();                 # Import nothing
use Bestiary qw(ram @llama);     # Import the ram function and @llama array
use Bestiary qw(:camelids);      # Import $camel and @llama
use Bestiary qw(:DEFAULT);       # Import @EXPORT symbols
use Bestiary qw(/am/);           # Import $camel, @llama, and ram
use Bestiary qw(/^\$/);          # Import all scalars
use Bestiary qw(:critters !ram); # Import the critters, but exclude ram
use Bestiary qw(:critters !:camelids);
                                 # Import critters, but no camelids</pre>
</blockquote>
<a name="INDEX-2313"></a>
Leaving a symbol off the export lists (or removing it
explicitly from the import list with the exclamation point) does not render it inaccessible
to the program using the module.  The program will always be able to
access the contents of the module's package by fully qualifying the
package name, like <tt class="literal">%Bestiary::gecko</tt>.  (Since lexical variables do
not belong to packages, privacy is still possible: see "Private
Methods" in the next chapter.)</p>

<p>You can say <tt class="literal">BEGIN { $Exporter::Verbose=1 }</tt> to see
how the specifications are being processed and what is actually being
imported into your package.</p>

<p>The <tt class="literal">Exporter</tt> is itself a Perl module, and if you're
curious you can see the typeglob trickery it uses to export symbols
from one package into another.  Inside the <tt class="literal">Export</tt>
module, the key function is named <tt class="literal">import</tt>, which
performs the necessary aliasing to make a symbol in one package appear
to be in another.  In fact, a <tt class="literal">use Bestiary</tt><em class="replaceable">LIST</em> statement is exactly equivalent to:
<blockquote>
<pre class="programlisting">BEGIN {
    require Bestiary;
    import Bestiary <em class="replaceable">LIST</em>;
}</pre>
</blockquote>

This means that your modules don't have to use the
<tt class="literal">Exporter</tt>.  A module can do anything it jolly well
pleases when it's used, since <tt class="literal">use</tt> just calls the
ordinary <tt class="literal">import</tt> method for the module, and you can
define that method to do anything you like.</p>


<h3 class="sect3">11.2.1.1. Exporting without using Exporter's import method</h3>

<p>
<a name="INDEX-2314"></a><a name="INDEX-2315"></a><a name="INDEX-2316"></a>
The <tt class="literal">Exporter</tt> defines a method called
<tt class="literal">export_to_level</tt>, used for situations where (for
some reason) you can't directly call <tt class="literal">Exporter</tt>'s
<tt class="literal">import</tt> method. The
<tt class="literal">export_to_level</tt> method is invoked like this:
<blockquote>
<pre class="programlisting">
<em class="replaceable">MODULE</em>-&gt;export_to_level($where_to_export, @what_to_export);</pre>
</blockquote>

where <tt class="literal">$where_to_export</tt> is an integer indicating how
far up the calling stack to export your symbols, and
<tt class="literal">@what_to_export</tt> is an array listing the symbols to
export (usually <tt class="literal">@_</tt>).</p>

<p>For example, suppose our <tt class="literal">Bestiary</tt> had an
<tt class="literal">import</tt> function of its own:
<blockquote>
<pre class="programlisting">package Bestiary;
@ISA = qw(Exporter);
@EXPORT_OK = qw ($zoo);

sub import {
    $Bestiary::zoo = "menagerie";
}</pre>
</blockquote>

The presence of this <tt class="literal">import</tt> function prevents
<tt class="literal">Exporter</tt>'s <tt class="literal">import</tt> function from
being inherited.  If you want <tt class="literal">Bestiary</tt>'s
<tt class="literal">import</tt> function to behave just like
<tt class="literal">Exporter</tt>'s <tt class="literal">import</tt> function once
it sets <tt class="literal">$Bestiary::zoo</tt>, you'd define it as follows:
<blockquote>
<pre class="programlisting">sub import {
    $Bestiary::zoo = "menagerie";
    Bestiary-&gt;export_to_level(1, @_);
}</pre>
</blockquote>

This exports symbols to the package one level "above" the current
package.  That is, to whatever program or module is using the
<tt class="literal">Bestiary</tt>.</p>




<h3 class="sect3">11.2.1.2. Version checking</h3>

<p>
<a name="INDEX-2317"></a><a name="INDEX-2318"></a>
If your module defines a <tt class="literal">$VERSION</tt> variable, a
program using your module can ensure that the module is sufficiently
recent.  For example:
<blockquote>
<pre class="programlisting">use Bestiary 3.14;   # The Bestiary must be version 3.14 or later
use Bestiary v1.0.4; # The Bestiary must be version 1.0.4 or later</pre>
</blockquote>

These are converted into calls to
<tt class="literal">Bestiary-&gt;require_version</tt>, which your module
then inherits.</p>




<h3 class="sect3">11.2.1.3. Managing unknown symbols</h3>

<p>
<a name="INDEX-2319"></a><a name="INDEX-2320"></a>
In some situations, you may want to <em class="emphasis">prevent</em>
certain symbols from being exported. Typically, this applies to
modules that have functions or constants that might not make sense on
some systems.  You can prevent the <tt class="literal">Exporter</tt> from
exporting those symbols by placing them in the
<tt class="literal">@EXPORT_FAIL</tt> array.</p>

<p>
<a name="INDEX-2321"></a><a name="INDEX-2322"></a>
If a program attempts to import any of these symbols, the
<tt class="literal">Exporter</tt> gives the module an opportunity to handle
the situation before generating an error.  It does this by calling an
<tt class="literal">export_fail</tt> method with a list of the failed
symbols, which you might define as follows (assuming your module uses
the <tt class="literal">Carp</tt> module):
<blockquote>
<pre class="programlisting">sub export_fail {
    my $class = shift;
    carp "Sorry, these symbols are unavailable: @_";
    return @_;
}</pre>
</blockquote>

The <tt class="literal">Exporter</tt> provides a default
<tt class="literal">export_fail</tt> method, which simply returns the list
unchanged and makes the <tt class="literal">use</tt> fail with an exception
raised for each symbol.  If <tt class="literal">export_fail</tt> returns an
empty list, no error is recorded and all the requested symbols are
exported.</p>




<h3 class="sect3">11.2.1.4. Tag-handling utility functions</h3>

<p>
<a name="INDEX-2323"></a>
Since the symbols listed within <tt class="literal">%EXPORT_TAGS</tt> must
also appear in either <tt class="literal">@EXPORT</tt> or
<tt class="literal">@EXPORT_OK</tt>, the <tt class="literal">Exporter</tt>
provides two functions to let you add those tagged sets of symbols:
<blockquote>
<pre class="programlisting">%EXPORT_TAGS = (foo =&gt; [qw(aa bb cc)], bar =&gt; [qw(aa cc dd)]);

Exporter::export_tags('foo');     # add aa, bb and cc to @EXPORT
Exporter::export_ok_tags('bar');  # add aa, cc and dd to @EXPORT_OK</pre>
</blockquote>

Specifying names that are not tags is erroneous.</p>

<a name="INDEX-2324"></a><a name="INDEX-2325"></a><a name="INDEX-2326"></a><a name="INDEX-2327"></a>




<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch11_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch11_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">11.1. Using Modules</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">11.3. Overriding Built-in Functions</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
