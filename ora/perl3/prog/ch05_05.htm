<html>
<head>
<title>Quantifiers (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Quantifiers">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch05_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch05_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">5.5. Quantifiers</h2>

<p>
<a name="INDEX-1587"></a><a name="INDEX-1588"></a>
Unless you say otherwise, each item in a regular expression matches
just once.  With a pattern like <tt class="literal">/nop/</tt>, each of
those characters must match, each right after the other.  Words like
"panoply" or "xenophobia" are fine, because <em class="emphasis">where</em>
the match occurs doesn't matter.</p>

<p>If you wanted to match both "xenophobia" and "Snoopy", you couldn't
use the <tt class="literal">/nop/</tt> pattern, since that requires just one
"o" between the "n" and the "p", and Snoopy has two.  This is where
<em class="emphasis">quantifiers</em> come in handy: they say how many
times something may match, instead of the default of matching just
once.  Quantifiers in a regular expression are like loops in a
program; in fact, if you think of a regex as a program, then they
<em class="emphasis">are</em> loops.  Some loops are exact, like "repeat
this match five times only" (<tt class="literal">{5}</tt>).  Others give
both lower and upper bounds on the match count, like "repeat this
match at least twice but no more than four times"
(<tt class="literal">{2,4}</tt>).  Others have no closed upper bound at all,
like "match this at least twice, but as many times as you'd like"
(<tt class="literal">{2,}</tt>).</p>

<p>
<a href="ch05_05.htm">Table 5-12</a> shows the quantifiers that Perl
recognizes in a pattern.</p>

<a name="perl3-tab-quantifiers"></a>
<h4 class="objtitle">Table 5.12. Regex Quantifiers Compared</h4>
<table border="1">

<tr>
<th><b class="emphasis-bold">Maximal</b></th>
<th><b class="emphasis-bold">Minimal</b></th>
<th><b class="emphasis-bold">Allowed Range</b></th>
</tr>




<tr>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,</tt><em class="replaceable">MAX</em><tt class="literal">}</tt></td>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,</tt><em class="replaceable">MAX</em><tt class="literal">}?</tt></td>
<td>Must occur at least <em class="replaceable">MIN</em> times but no more than <em class="replaceable">MAX</em> times</td>
</tr>

<tr>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,}</tt></td>
<td><tt class="literal">{</tt><em class="replaceable">MIN</em><tt class="literal">,}?</tt></td>
<td>Must occur at least <em class="replaceable">MIN</em> times</td>
</tr>

<tr>
<td><tt class="literal">{</tt><em class="replaceable">COUNT</em><tt class="literal">}</tt></td>
<td><tt class="literal">{</tt><em class="replaceable">COUNT</em><tt class="literal">}?</tt></td>
<td>Must match exactly <em class="replaceable">COUNT</em> times</td>
</tr>

<tr>
<td><tt class="literal">*</tt></td>
<td><tt class="literal">*?</tt></td>
<td>
<p>0 or more times (same as <tt class="literal">{0,}</tt>)

<a name="INDEX-1589"></a>
</p>
</td>
</tr>

<tr>
<td><tt class="literal">+</tt></td>
<td><tt class="literal">+?</tt></td>
<td>1
or more times (same as <tt class="literal">{1,}</tt>)<a name="INDEX-1590"></a></td>
</tr>

<tr>
<td><tt class="literal">?</tt></td>
<td><tt class="literal">??</tt></td>
<td>0
or 1 time (same as <tt class="literal">{0,1}</tt>)<a name="INDEX-1591"></a></td>
</tr>


</table>

<p>Something
with a <tt class="literal">*</tt> or a <tt class="literal">?</tt> doesn't actually
have to match.

That's because they can match 0 times and still be considered a
success.  A <tt class="literal">+</tt> may often be a better fit, since it has to be there
at least once.</p>

<p>Don't be confused by the use of "exactly" in the previous table.  It
refers only to the repeat count, not the overall string.  For
example, <tt class="literal">$n =~ /\d{3}/</tt> doesn't say "is this string exactly three
digits long?"  It asks whether there's any point within <tt class="literal">$n</tt> at
which three digits occur in a row.   Strings like "101 Morris
Street" test true, but so do strings like "95472" or "1-800-555-1212".
All <em class="emphasis">contain</em> three digits at one or more points, which is all you
asked about.  See the section <a href="ch05_06.htm">Section 5.6, "Positions"</a> for how to use
positional assertions (as in <tt class="literal">/^\d{3}$/</tt>) to nail this down.</p>

<p>
<a name="INDEX-1592"></a>
Given the opportunity to match something a variable number of times,
maximal quantifiers will elect to maximize the repeat count.  So when
we say "as many times as you'd like", the greedy quantifier interprets
this to mean "as many times as you can possibly get away with",
constrained only by the requirement that this not cause specifications
later in the match to fail.  If a pattern contains two open-ended
quantifiers, then obviously both cannot consume the entire string:
characters used by one part of the match are no longer available
to a later part.  Each quantifier is greedy at the expense of those
that follow it, reading the pattern left to right.</p>

<p>
<a name="INDEX-1593"></a><a name="INDEX-1594"></a>
That's the traditional behavior of quantifiers in regular expressions.
However, Perl permits you to reform the behavior of its quantifiers: by
placing a <tt class="literal">?</tt> after that quantifier, you change it from maximal to
minimal.  That doesn't mean that a minimal quantifier will always
match the smallest number of repetitions allowed by its range, any
more than a maximal quantifier must always match the greatest number
allowed in its range.  The overall match must still succeed, and the
minimal match will take as much as it needs to succeed, and no more.
(Minimal quantifiers value contentment over greed.)</p>

<p>For example, in the match:
<blockquote>
<pre class="programlisting">"exasperate" =~ /e(.*)e/    #  $1 now "xasperat"</pre>
</blockquote>

the <tt class="literal">.*</tt> matches "<tt class="literal">xasperat</tt>", the longest possible string for it to
match.  (It also stores that value in <tt class="literal">$1</tt>, as described in
the section <a href="ch05_07.htm">Section 5.7, "Capturing and Clustering"</a> later in the chapter.)  Although a shorter match was
available, a greedy match doesn't care.  Given two choices at the
same starting point, it always returns the <em class="emphasis">longer</em> of the two.
<a name="INDEX-1595"></a>
</p>

<p>Contrast this with this:
<blockquote>
<pre class="programlisting">"exasperate" =~ /e(.*?)e/   #  $1 now "xasp"</pre>
</blockquote>

Here, the minimal matching version, <tt class="literal">.*?</tt>, is used.  Adding the
<tt class="literal">?</tt> to <tt class="literal">*</tt> makes <tt class="literal">*?</tt> take on the opposite behavior: now given
two choices at the same starting point, it always returns the
<em class="emphasis">shorter</em> of the two.</p>

<p>Although you could read <tt class="literal">*?</tt> as saying to match zero or more of
something but preferring zero, that doesn't mean it will always
match zero characters.  If it did so here, for example, and left
<tt class="literal">$1</tt> set to <tt class="literal">""</tt>, then the second "<tt class="literal">e</tt>" wouldn't be found, since
it doesn't immediately follow the first one.</p>

<p>
<a name="INDEX-1596"></a><a name="INDEX-1597"></a>
You might also wonder why, in minimally matching
<tt class="literal">/e(.*?)e/</tt>, Perl didn't stick
"<tt class="literal">rat</tt>" into <tt class="literal">$1</tt>.  After all,
"<tt class="literal">rat</tt>" also falls between two
<tt class="literal">e</tt>'s, and is shorter than "<tt class="literal">xasp</tt>".
In Perl, the minimal/maximal choice applies only when selecting the
shortest or longest from among several matches that all have the same
starting point.  If two possible matches exist, but these start at
different offsets in the string, then their lengths don't matter--nor
does it matter whether you've used a minimal quantifier or a maximal
one.  The earliest of several valid matches always wins out over all
latecomers.  It's only when multiple possible matches start at the
same point that you use minimal or maximal matching to break the tie.
If the starting points differ, there's no tie to break.  Perl's
matching is normally <em class="emphasis">leftmost longest</em>;
with minimal matching, it becomes <em class="emphasis">leftmost
shortest</em>.  But the "leftmost" part never varies and is the
dominant criterion.<a href="#FOOTNOTE-7">[7]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-7"></a>
<p>[7] Not all regex engines work this
way.  Some believe in overall greed, in which the longest match always
wins, even if it shows up later.  Perl isn't that way.  You might say
that eagerness holds priority over greed (or thrift).  For a more
formal discussion of this principle and many others, see the section
<a href="ch05_09.htm">Section 5.9.4, "The Little Engine That /Could(n't)?/"</a>.</p>

</blockquote>

<p>
<a name="INDEX-1598"></a><a name="INDEX-1599"></a>
There are two ways to defeat the leftward leanings of the pattern
matcher.  First, you can use an earlier greedy quantifier (typically
<tt class="literal">.*</tt>) to try to slurp earlier parts of the string.  In searching for a
match for a greedy quantifier, it tries for the longest match first,
which effectively searches the rest of the string right-to-left:
<blockquote>
<pre class="programlisting">"exasperate" =~ /.*e(.*?)e/   #  $1 now "rat"</pre>
</blockquote>

But be careful with that, since the overall match now includes the entire
string up to that point.</p>

<p>The second way to defeat leftmostness to use positional assertions,
discussed in the next section.</p>

<a name="INDEX-1600"></a><a name="INDEX-1601"></a>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch05_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">5.4. Character Classes</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">5.6. Positions</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
