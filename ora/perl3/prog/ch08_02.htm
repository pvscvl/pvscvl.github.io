<html>
<head>
<title>Creating References (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Creating References">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch08_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch08_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch08_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">8.2. Creating References</h2>

<p>
<a name="INDEX-1974"></a><a name="INDEX-1975"></a>
There are several ways to create references, most of which we will
describe before explaining how to use (dereference) the resulting
references.</p>

<a name="ch08-sect-bo"></a>
<h3 class="sect2">8.2.1. The Backslash Operator</h3>

<a name="INDEX-1976"></a>
<p>
<a name="INDEX-1977"></a>
You can create a reference to any named variable or subroutine with a
backslash.  (You may also use it on an anonymous scalar value like
<tt class="literal">7</tt> or <tt class="literal">"camel"</tt>, although you won't
often need to.)  This operator works like the <tt class="literal">&amp;</tt>
(address-of) operator in C--at least at first glance.</p>

<p>Here are some examples:
<blockquote>
<pre class="programlisting">$scalarref = \$foo;
$constref  = \186_282.42;
$arrayref  = \@ARGV;
$hashref   = \%ENV;
$coderef   = \&amp;handler;
$globref   = \*STDOUT;</pre>
</blockquote>

The backslash operator can do more than produce a single reference.
It will generate a whole list of references if applied to a list.
See the section <a href="ch08_03.htm">Section 8.3.6, "Other Tricks You Can Do with Hard References"</a> for details.</p>






<h3 class="sect2">8.2.2. Anonymous Data</h3>

<a name="INDEX-1978"></a><a name="INDEX-1979"></a>
<p>In the examples just shown, the backslash operator merely makes a
duplicate of a reference that is already held in a variable name--with
one exception.  The <tt class="literal">186_282.42</tt> isn't referenced by a named
variable--it's just a value.  It's one of those <em class="emphasis">anonymous</em> referents
we mentioned earlier.  Anonymous referents are accessed only through
references.  This one happens to be a number, but you can create
anonymous arrays, hashes, and subroutines as well.</p>


<h3 class="sect3">8.2.2.1. The anonymous array composer</h3>

<p>
<a name="INDEX-1980"></a><a name="INDEX-1981"></a><a name="INDEX-1982"></a>
You can create a reference to an anonymous array with square brackets:
<blockquote>
<pre class="programlisting">$arrayref = [1, 2, ['a', 'b', 'c', 'd']];</pre>
</blockquote>

Here we've composed an anonymous array of three
elements, whose final element is a reference to an anonymous array of
four elements (depicted in <a href="ch08_02.htm">Figure 8-2</a>).  (The multidimensional syntax
described later can be used to access this.  For example, <tt class="literal">$arrayref-&gt;[2][1]</tt> would have the value "<tt class="literal">b</tt>".)</p>

<a name="perl3-fig-array-of-arrays"></a>
<div class="figure">
</div>
<p>

<img src="figs/perl3_0802.gif">

<br>


<h4 class="objtitle">Figure 8.2. A reference to an array, whose third element is itself an array reference</h4>
<p>We now have one way to represent the table at the beginning of the
chapter:
<blockquote>
<pre class="programlisting">$table = [ [ "john", 47, "brown", 186],
           [ "mary", 23, "hazel", 128],
           [ "bill", 35, "blue",  157] ];</pre>
</blockquote>

Square brackets work like this only where the Perl parser is expecting
a term in an expression. They should not be confused with the brackets
in an expression like <tt class="literal">$array[6]</tt>--although the
mnemonic association with arrays is intentional.  Inside a quoted
string, square brackets don't compose anonymous arrays; instead, they
become literal characters in the string.  (Square brackets do still
work for subscripting in strings, or you wouldn't be able to print
string values like <tt class="literal">"VAL=$array[6]\n"</tt>.  And to be
totally honest, you can in fact sneak anonymous array composers into
strings, but only when embedded in a larger expression that is being
interpolated.  We'll talk about this cool feature later in the chapter
because it involves dereferencing as well as referencing.)</p>




<h3 class="sect3">8.2.2.2. The anonymous hash composer</h3>

<p>
<a name="INDEX-1983"></a><a name="INDEX-1984"></a><a name="INDEX-1985"></a>
You can create a reference to an anonymous hash with braces:
<blockquote>
<pre class="programlisting">$hashref = {
    'Adam'   =&gt; 'Eve',
    'Clyde'  =&gt; $bonnie,
    'Antony' =&gt; 'Cleo' . 'patra',
};</pre>
</blockquote>

For the values (but not the keys) of the hash, you can freely mix
other anonymous array, hash, and subroutine composers to produce as
complicated a structure as you like.</p>

<p>We now have another way to represent the table at the beginning
of the chapter:
<blockquote>
<pre class="programlisting">$table = {
            "john" =&gt; [ 47, "brown", 186 ],
            "mary" =&gt; [ 23, "hazel", 128 ],
            "bill" =&gt; [ 35, "blue",  157 ],
};</pre>
</blockquote>

That's a hash of arrays.  Choosing the best data structure is a tricky
business, and the next chapter is devoted to it.  But as a teaser, we
could even use a hash of hashes for our table:
<blockquote>
<pre class="programlisting">$table = {
           "john" =&gt; { age    =&gt; 47,
                       eyes   =&gt; "brown",
                       weight =&gt; 186,
                     },
           "mary" =&gt; { age    =&gt; 23,
                       eyes   =&gt; "hazel",
                       weight =&gt; 128,
                     },
           "bill" =&gt; { age    =&gt; 35,
                       eyes   =&gt; "blue",
                       weight =&gt; 157,
                     },
 };</pre>
</blockquote>

As with square brackets, braces work like this only where the Perl
parser is expecting a term in an expression. They should not be
confused with the braces in an expression like
<tt class="literal">$hash{key}</tt>--although the mnemonic association with
hashes is (again) intentional.  The same caveats apply to the
use of braces within strings.</p>

<p>There is one additional caveat which didn't apply to square brackets.
Since braces are also used for several other things (including blocks),
you may occasionally have to disambiguate braces at the beginning of a
statement by putting a <tt class="literal">+</tt> or a <tt class="literal">return</tt> in front, so that Perl realizes
the opening brace isn't starting a block.  For example, if you want
a function to make a new hash and return a reference to it, you have
these options:
<blockquote>
<pre class="programlisting">sub hashem {        { @_ } }   # Silently WRONG -- returns @_.
sub hashem {       +{ @_ } }   # Ok.
sub hashem { return { @_ } }   # Ok.</pre>
</blockquote>
</p>




<h3 class="sect3">8.2.2.3. The anonymous subroutine composer</h3>

<p>
<a name="INDEX-1986"></a><a name="INDEX-1987"></a><a name="INDEX-1988"></a>
You can create a reference to an anonymous subroutine by using <tt class="literal">sub</tt>
without a subroutine name:
<blockquote>
<pre class="programlisting">$coderef = sub { print "Boink!\n" };  # Now &amp;$coderef prints "Boink!"</pre>
</blockquote>
Note the presence of the semicolon, required here to
terminate the expression.  (It isn't required after the more common
usage of <tt class="literal">sub</tt><em class="replaceable">NAME</em><tt class="literal">{}</tt> that declares and defines a named subroutine.)
A nameless <tt class="literal">sub {}</tt> is not so much a declaration as
it is an operator--like <tt class="literal">do {}</tt> or <tt class="literal">eval
{}</tt>--except that the code inside isn't executed immediately.
Instead, it just generates a reference to the code, which in our
example is stored in <tt class="literal">$coderef</tt>.  However, no matter
how many times you execute the line shown above,
<tt class="literal">$coderef</tt> will still refer to the same anonymous
subroutine.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-2"></a>
<p>[2]But even though there's only one anonymous
subroutine, there may be several copies of the lexical variables in
use by the subroutine, depending on when the subroutine reference was
generated.  These are discussed later in the section <a href="ch08_03.htm">Section 8.3.7, "Closures"</a>.</p>

</blockquote>

<a name="INDEX-1989"></a>







<h3 class="sect2">8.2.3. Object Constructors</h3>

<a name="INDEX-1990"></a><a name="INDEX-1991"></a><a name="INDEX-1992"></a><a name="INDEX-1993"></a><a name="INDEX-1994"></a>
<p>Subroutines can also return references.  That may sound trite, but
sometimes you are <em class="emphasis">supposed</em> to use a subroutine to create a
reference rather than creating the reference yourself.  In particular,
special subroutines called <em class="emphasis">constructors</em> create and return references to
objects.  An object is simply a special kind of reference that happens
to know which class it's associated with, and constructors know how to
create that association.  They do so by taking an ordinary referent
and turning it into an object with the <tt class="literal">bless</tt> operator, so we can
speak of an object as a blessed reference.  There's nothing religious
going on here; since a class acts as a user-defined type, blessing
a referent simply makes it a user-defined type in addition to a built-in
one.  Constructors are often named <tt class="literal">new</tt>--especially by C++
programmers--but they can be named anything in Perl.</p>

<p>Constructors can be called in any of these ways:
<blockquote>
<pre class="programlisting">$objref = Doggie::-&gt;new(Tail =&gt; 'short', Ears =&gt; 'long');  #1
$objref = new Doggie:: Tail =&gt; 'short', Ears =&gt; 'long';    #2
$objref = Doggie-&gt;new(Tail =&gt; 'short', Ears =&gt; 'long');    #3
$objref = new Doggie Tail =&gt; 'short', Ears =&gt; 'long';      #4</pre>
</blockquote>

The first and second invocations are the same.  They both call a
function named <tt class="literal">new</tt> that is supplied by the <tt class="literal">Doggie</tt> module. The
third and fourth invocations are the same as the first two, but are
slightly more ambiguous: the parser will get confused if you define
your own subroutine named <tt class="literal">Doggie</tt>.  (Which is why people typically
stick with lowercase names for subroutines and uppercase for modules.)
The fourth invocation can also get confused if you've defined your own
<tt class="literal">new</tt> subroutine and don't happen to have done either a <tt class="literal">require</tt> or
a <tt class="literal">use</tt> of the <tt class="literal">Doggie</tt> module, either of which has the effect of
declaring the module.  Always declare your modules if you want to use #4.
(And watch out for stray <tt class="literal">Doggie</tt> subroutines.)</p>

<p>See <a href="ch12_01.htm">Chapter 12, "Objects"</a> for a discussion of Perl objects.</p>





<a name="ch08-sect-hr"></a>
<h3 class="sect2">8.2.4. Handle References</h3>

<a name="INDEX-1995"></a><a name="INDEX-1996"></a><a name="INDEX-1997"></a><a name="INDEX-1998"></a>
<p>References to filehandles or directory handles can be created by
referencing the typeglob of the same name:
<blockquote>
<pre class="programlisting">splutter(\*STDOUT);

sub splutter {
    my $fh = shift;
    print $fh "her um well a hmmm\n";
}

$rec = get_rec(\*STDIN);
sub get_rec {
    my $fh = shift;
    return scalar &lt;$fh&gt;;
}</pre>
</blockquote>

If you're passing around filehandles, you can also use the bare
typeglob to do so: in the example above, you could have used
<tt class="literal">*STDOUT</tt> or <tt class="literal">*STDIN</tt> instead of <tt class="literal">\*STDOUT</tt> and <tt class="literal">\*STDIN</tt>.</p>

<p>
<a name="INDEX-1999"></a>
Although you can usually use typeglob and references to typeglobs
interchangeably, there are a few places where you can't.  Simple typeglobs
can't be <tt class="literal">bless</tt>ed into objectdom, and typeglob references can't
be passed back out of the scope of a localized typeglob.</p>

<p>When generating new filehandles, older code would often do something
like this to open a list of files:
<blockquote>
<pre class="programlisting">for $file (@names) {
    local *FH;
    open(*FH, $file) || next;
    $handle{$file} = *FH;
}</pre>
</blockquote>
</p>

<p>
<a name="INDEX-2000"></a><a name="INDEX-2001"></a>
That still works, but now it's just as easy to let an undefined
variable autovivify an anonymous typeglob:
<blockquote>
<pre class="programlisting">for $file (@names) {
    my $fh;
    open($fh, $file) || next;
    $handle{$file} = $fh;
}</pre>
</blockquote>

With indirect filehandles, it doesn't matter whether you use use
typeglobs, references to typeglobs, or one of the more exotic I/O
objects.  You just use a scalar that--one way or another--gets
interpreted as a filehandle.  For most purposes, you can use either a
typeglob or a typeglob reference almost indiscriminately.  As we
admitted earlier, there is some implicit dereferencing magic going
on here.</p>





<a name="ch08-sect-str"></a>
<h3 class="sect2">8.2.5. Symbol Table References</h3>

<p>
<a name="INDEX-2002"></a><a name="INDEX-2003"></a>
In unusual circumstances, you might not know what type of reference
you need when your program is written.  A reference can be created by
using a special syntax, affectionately known as 
the <tt class="literal">*foo{</tt><em class="replaceable">THING</em><tt class="literal">}</tt>
syntax.  <tt class="literal">*foo{</tt><em class="replaceable">THING</em><tt class="literal">}</tt> 
returns a reference to the <em class="replaceable">THING</em> slot in
<tt class="literal">*foo</tt>, which is the symbol table entry holding the values of <tt class="literal">$foo</tt>,
<tt class="literal">@foo</tt>, <tt class="literal">%foo</tt>, and friends.
<blockquote>
<pre class="programlisting">$scalarref = *foo{SCALAR};   # Same as \$foo
$arrayref  = *ARGV{ARRAY};   # Same as \@ARGV
$hashref   = *ENV{HASH};     # Same as \%ENV
$coderef   = *handler{CODE}; # Same as \&amp;handler
$globref   = *foo{GLOB};     # Same as \*foo
$ioref     = *STDIN{IO};     # Er...</pre>
</blockquote>
<a name="INDEX-2004"></a>
All of these are self-explanatory except for <tt class="literal">*STDIN{IO}</tt>.  It yields
the actual internal <tt class="literal">IO::Handle</tt> object that the typeglob contains, that
is, the part of the typeglob that the various I/O functions are
actually interested in.  For compatibility with previous versions of
Perl, <tt class="literal">*foo{FILEHANDLE}</tt> is a synonym for the hipper <tt class="literal">*foo{IO}</tt>
notation.</p>

<p>In theory, you can use a <tt class="literal">*</tt><em class="replaceable">HANDLE</em><tt class="literal">{IO}</tt> anywhere you'd use a <tt class="literal">*</tt><em class="replaceable">HANDLE</em> or a <tt class="literal">\*</tt><em class="replaceable">HANDLE</em>, such as for passing handles
into or out of subroutines, or storing them in larger data structures.
(In practice, there are still some wrinkles to be ironed out.) The
advantage of them is that they access only the real I/O object you
want, not the whole typeglob, so you run no risk of clobbering more
than you want to through a typeglob assignment (although if you always
assign to a scalar variable instead of to a typeglob, you'll be okay).
One disadvantage is that there's no way to autovivify one as of
yet.<a href="#FOOTNOTE-3">[3]</a>
<blockquote>
<pre class="programlisting">splutter(*STDOUT);
splutter(*STDOUT{IO});

sub splutter {
    my $fh = shift;
    print $fh "her um well a hmmm\n";
}</pre>
</blockquote>

Both invocations of <tt class="literal">splutter()</tt> print "<tt class="literal">her um well a hmmm</tt>".</p>
<blockquote class="footnote">

<a name="FOOTNOTE-3"></a>
<p>[3] Currently, <tt class="literal">open my $fh</tt> autovivifies a typeglob instead
of an <tt class="literal">IO::Handle</tt> object, but someday we may fix that, so you
shouldn't rely on the typeglobbedess of what <tt class="literal">open</tt> currently
autovivifies.</p>

</blockquote>

<p>The <tt class="literal">*foo{</tt><em class="replaceable">THING</em><tt class="literal">}</tt> thing returns <tt class="literal">undef</tt> if that particular
<em class="replaceable">THING</em> hasn't been seen by the compiler yet, except when <em class="replaceable">THING</em> is
<tt class="literal">SCALAR</tt>.  It so happens that <tt class="literal">*foo{SCALAR}</tt> returns a reference to
an anonymous scalar even if <tt class="literal">$foo</tt> hasn't been seen yet.  (Perl always
adds a scalar to any typeglob as an optimization to save a bit of code
elsewhere.  But don't depend on it to stay that way in future releases.)</p>






<h3 class="sect2">8.2.6. Implicit Creation of References</h3>

<p>A final method for creating references is not really a method at all.
References of an appropriate type simply spring into existence if you
dereference them in an lvalue context that assumes they exist.  This is
extremely useful, and is also What You Expect.  This topic is covered
later in this chapter, where we'll discuss how to dereference all of the
references we've created so far.</p>

<a name="INDEX-2005"></a>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch08_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch08_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">8.1. What Is a Reference?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">8.3. Using Hard References</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
