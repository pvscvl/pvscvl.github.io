<html>
<head>
<title>Class::Struct (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Class::Struct">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch32_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch32_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch32_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">32.6. Class::Struct</h2>

<a name="INDEX-5809"></a>
<p>
<blockquote>
<pre class="programlisting">use Class::Struct;

struct Manager =&gt; {         # Creates a Manager-&gt;new() constructor.
    name    =&gt; '$',         # Now name() method accesses a scalar value.
    salary  =&gt; '$',         # And so does salary().
    started =&gt; '$',         # And so does started().
};

struct Shoppe =&gt; {          # Creates a Shoppe-&gt;new() constructor.
    owner   =&gt; '$',         # Now owner() method accesses a scalar.
    addrs   =&gt; '@',         # And addrs() method accesses an array.
    stock   =&gt; '%',         # And stock() method accesses a hash.
    boss    =&gt; 'Manager',   # Initializes with Manager-&gt;new().
};

$store = Shoppe-&gt;new();
$store-&gt;owner('Abdul Alhazred');
$store-&gt;addrs(0, 'Miskatonic University');
$store-&gt;addrs(1, 'Innsmouth, Mass.');
$store-&gt;stock("books", 208);
$store-&gt;stock("charms", 3);
$store-&gt;stock("potions", "none");
$store-&gt;boss-&gt;name('Prof L. P. Haitch');
$store-&gt;boss-&gt;salary('madness');
$store-&gt;boss-&gt;started(scalar localtime);</pre>
</blockquote>

The <tt class="literal">Class::Struct</tt> module provides a way to
"declare" a class as having objects whose fields are of a specific
type.  The function that does this is called
<tt class="literal">struct</tt>.  Because structures or records are not base
types in Perl, each time you want to create a class to provide a
record-like data object, you have to define a constructor method along
with accessor methods for each data field, sometimes called "wrapper"
methods.  The <tt class="literal">Class::Struct</tt> module's
<tt class="literal">struct</tt> function alleviates this tedium by creating
a class for you on the fly.  You just tell it what data members should
exist and their types.  The function creates a constructor method
named <tt class="literal">new</tt> in the package specified by the first
argument, plus an attribute accessor method for each member, as
specified by the second argument, which should be a hash reference.</p>

<p>Field types are specified as either a built-in type using the
customary "<tt class="literal">$</tt>", "<tt class="literal">@</tt>",
"<tt class="literal">%</tt>", and "<tt class="literal">&amp;</tt>" symbols, or as
another class using the class name.  The type of each field will be
enforced when you try to set the value.</p>

<p>
<a name="INDEX-5810"></a><a name="INDEX-5811"></a>
Many standard modules use <tt class="literal">Class::Struct</tt> to create
their objects and accessors, including <tt class="literal">Net::hostent</tt>
and <tt class="literal">User::pwent</tt>, whose source you can look at as a
model.  See also the CPAN modules <tt class="literal">Tie::SecureHash</tt>
and <tt class="literal">Class::Multimethods</tt> for more elaborate
approaches to autogeneration of classes and accessor methods. See the
section "Managing Instance Data" in <a href="ch12_01.htm">Chapter 12, "Objects"</a>.</p>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch32_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch32_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">32.5. CGI::Carp</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">32.7. Config</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
