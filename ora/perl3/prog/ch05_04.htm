<html>
<head>
<title>Character Classes (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Character Classes">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch05_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch05_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">5.4. Character Classes</h2>

<p>
<a name="INDEX-1525"></a><a name="INDEX-1526"></a><a name="INDEX-1527"></a><a name="INDEX-1528"></a><a name="INDEX-1529"></a><a name="INDEX-1530"></a>
In a pattern match, you may match any character that has--or that does
not have--a particular property.  There are four ways to specify
character classes. You may specify a character classes in the
traditional way using square brackets and enumerating the possible
characters, or you may use any of three mnemonic shortcuts: the
classic Perl classes, the new Perl Unicode properties, or the standard
POSIX classes.  Each of these shortcuts matches only one character
from its set.  Quantify them to match larger expanses, such as
<tt class="literal">\d+</tt> to match one or more digits.  (An easy mistake
is to think that <tt class="literal">\w</tt> matches a word.  Use
<tt class="literal">\w+</tt> to match a word.)</p>


<h3 class="sect2">5.4.1. Custom Character Classes</h3>

<p>
<a name="INDEX-1531"></a><a name="INDEX-1532"></a>
An enumerated list of characters in square brackets is called a
<em class="emphasis">character class</em> and matches any one of the
characters in the list.  For example, <tt class="literal">[aeiouy]</tt>
matches a letter that can be a vowel in English.  (For Welsh add a
"<tt class="literal">w</tt>", for Scottish an "<tt class="literal">r</tt>".)  To
match a right square bracket, either backslash it or place it first in
the list.</p>

<p>
<a name="INDEX-1533"></a><a name="INDEX-1534"></a>
Character ranges may be indicated using a hyphen and the
<tt class="literal">a-z</tt> notation.  Multiple ranges may be combined; for
example, <tt class="literal">[0-9a-fA-F]</tt> matches one hex "digit".  You
may use a backslash to protect a hyphen that would otherwise be
interpreted as a range delimiter, or just put it at the beginning or
end of the class (a practice which is arguably less readable but more
traditional).</p>

<p>
<a name="INDEX-1535"></a><a name="INDEX-1536"></a><a name="INDEX-1537"></a>
 A caret (or circumflex, or hat,
or up arrow) at the front of the character class inverts the class,
causing it to match any single character <em class="emphasis">not</em> in
the list.  (To match a caret, either <em class="emphasis">don't</em> put it
first, or better, escape it with a backslash.)  For example,
<tt class="literal">[^aeiouy]</tt> matches any character that isn't a vowel.
Be careful with character class negation, though, because the universe
of characters is expanding.  For example, that character class matches
consonants--and also matches spaces, newlines, and anything (including
vowels) in Cyrillic, Greek, or nearly any other script, not to mention
every idiograph in Chinese, Japanese, and Korean.  And someday maybe
even Cirth, Tengwar, and Klingon.  (Linear B and Etruscan, for sure.)
So it might be better to specify your consonants explicitly, such as
<tt class="literal">[cbdfghjklmnpqrstvwxyz]</tt>, or
<tt class="literal">[b-df-hj-np-tv-z]</tt> for short.  (This also solves the
issue of "y" needing to be in two places at once, which a set
complement would preclude.)</p>

<p>
<a name="INDEX-1538"></a><a name="INDEX-1539"></a><a name="INDEX-1540"></a>
Normal character metasymbols are supported inside a character class,
(see "Specific Characters"), such as <tt class="literal">\n</tt>,
<tt class="literal">\t</tt>,
<tt class="literal">\c</tt><em class="replaceable">X</em>,
<tt class="literal">\</tt><em class="replaceable">NNN</em>, and
<tt class="literal">\N{</tt><em class="replaceable">NAME</em><tt class="literal">}</tt>.
Additionally, you may use <tt class="literal">\b</tt> within a character
class to mean a backspace, just as it does in a double-quoted string.
Normally, in a pattern match, it means a word boundary.  But
zero-width assertions don't make any sense in character classes, so
here <tt class="literal">\b</tt> returns to its normal meaning in strings.
You may also use any predefined character class described later in the
chapter (classic, Unicode, or POSIX), but don't try to use them as
endpoints of a range--that doesn't make sense, so the
"<tt class="literal">-</tt>" will be interpreted literally.</p>

<p>
<a name="INDEX-1541"></a><a name="INDEX-1542"></a><a name="INDEX-1543"></a><a name="INDEX-1544"></a>
All other metasymbols lose their special meaning inside square
brackets.  In particular, you can't use any of the three generic
wildcards: "<tt class="literal">.</tt>", <tt class="literal">\X</tt>, or
<tt class="literal">\C</tt>.  The first often surprises people, but it
doesn't make much sense to use the universal character class within a
restricted one, and you often want to match a literal dot as part of a
character class--when you're matching filenames, for instance.  It's
also meaningless to specify quantifiers, assertions, or alternation
inside a character class, since the characters are interpreted
individually.  For example, <tt class="literal">[fee|fie|foe|foo]</tt> means
the same thing as <tt class="literal">[feio|]</tt>.</p>






<h3 class="sect2">5.4.2. Classic Perl Character Class Shortcuts</h3>

<p>
<a name="INDEX-1545"></a><a name="INDEX-1546"></a><a name="INDEX-1547"></a><a name="INDEX-1548"></a><a name="INDEX-1549"></a>
Since the beginning, Perl has provided a number of character class
shortcuts.  These are listed in <a href="ch05_04.htm">Table 5-8</a>.
All of them are backslashed alphabetic metasymbols, and in
each case, the uppercase version is the negation of the lowercase
version.  The meanings of these are not quite as fixed as you might
expect; the meanings can be influenced by locale settings.  Even if
you don't use locales, the meanings can change whenever a new Unicode
standard comes out, adding scripts with new digits and letters.  (To
keep the old byte meanings, you can always <tt class="literal">use
bytes</tt>.  For explanations of the utf8 meanings, see "Unicode
Properties" later in this chapter.  In any case, the utf8 meanings are
a superset of the byte meanings.)</p>

<a name="perl3-tab-classiccharclass"></a>
<h4 class="objtitle">Table 5.8. Classic Character Classes</h4>
<table border="1">

<tr>
<th>Symbol</th>
<th>Meaning</th>
<th>As Bytes</th>
<th>As utf8</th>
</tr>




<tr>
<td><tt class="literal">\d</tt></td>
<td>Digit</td>
<td><tt class="literal">[0-9]</tt></td>
<td><tt class="literal">\p{IsDigit}</tt></td>
</tr>

<tr>
<td><tt class="literal">\D</tt></td>
<td>Nondigit</td>
<td><tt class="literal">[^0-9]</tt></td>
<td><tt class="literal">\P{IsDigit}</tt></td>
</tr>

<tr>
<td><tt class="literal">\s</tt></td>
<td>Whitespace</td>
<td><tt class="literal">[ \t\n\r\f]</tt></td>
<td><tt class="literal">\p{IsSpace}</tt></td>
</tr>

<tr>
<td><tt class="literal">\S</tt></td>
<td>Nonwhitespace</td>
<td><tt class="literal">[^ \t\n\r\f]</tt></td>
<td><tt class="literal">\P{IsSpace}</tt></td>
</tr>

<tr>
<td><tt class="literal">\w</tt></td>
<td>Word character</td>
<td><tt class="literal">[a-zA-Z0-9_]</tt></td>
<td><tt class="literal">\p{IsWord}</tt></td>
</tr>

<tr>
<td><tt class="literal">\W</tt></td>
<td>Non-(word character)</td>
<td><tt class="literal">[^a-zA-Z0-9_]</tt></td>
<td><tt class="literal">\P{IsWord}</tt></td>
</tr>


</table>

<p>
(Yes, we know most words don't have numbers or underscores in them;
<tt class="literal">\w</tt> is for matching "words" in the sense of tokens in a typical programming
language.  Or Perl, for that matter.)</p>

<p>These metasymbols may be used either outside or inside square brackets,
that is, either standalone or as part of a constructed character class:
<blockquote>
<pre class="programlisting">if ($var =~ /\D/)        { warn "contains non-digit" }
if ($var =~ /[^\w\s.]/)  { warn "contains non-(word, space, dot)" }</pre>
</blockquote>
</p>






<h3 class="sect2">5.4.3. Unicode Properties</h3>

<p>
<a name="INDEX-1550"></a><a name="INDEX-1551"></a>
Unicode properties are available using <tt class="literal">\p{</tt><em class="replaceable">PROP</em><tt class="literal">}</tt> and its set
complement, <tt class="literal">\P{</tt><em class="replaceable">PROP</em><tt class="literal">}</tt>.  For the rare properties with one-character
names, braces are optional, as in <tt class="literal">\pN</tt> to indicate a numeric
character (not necessarily decimal--Roman numerals are numeric
characters too).  These property classes may be used by themselves or
combined in a constructed character class:
<blockquote>
<pre class="programlisting">if ($var =~ /^\p{IsAlpha}+$/)      { print "all alphabetic" }
if ($var =~ s/[\p{Zl}\p{Zp}]/\n/g) { print "fixed newline wannabes" }</pre>
</blockquote>

Some properties are directly defined in the Unicode standard, and some
properties are composites defined by Perl, based on the standard
properties.  <tt class="literal">Zl</tt> and <tt class="literal">Zp</tt> are
standard Unicode properties representing line separators and paragraph
separators, while <tt class="literal">IsAlpha</tt> is defined by Perl to be
a property class combining the standard properties
<tt class="literal">Ll</tt>, <tt class="literal">Lu</tt>, <tt class="literal">Lt</tt>,
and <tt class="literal">Lo</tt>, (that is, letters that are lowercase,
uppercase, titlecase, or other).  As of version 5.6.0 of Perl, you
need to <tt class="literal">use utf8</tt> for these properties to work.
This restriction will be relaxed in the future.</p>

<p>There are a great many properties.  We'll list the ones we know about,
but the list is necessarily incomplete.  New properties are likely to
be in new versions of Unicode, and you can even define your own
properties.  More about that later.</p>

<p>
<a name="INDEX-1552"></a>
The Unicode Consortium produces the online resources that turn into
the various files Perl uses in its Unicode implementation.  For more
about these files, see <a href="ch15_01.htm">Chapter 15, "Unicode"</a>.  You can get a nice
overview of Unicode in the document
<em class="replaceable">PATH_TO_PERLLIB</em><em class="emphasis">/unicode/Unicode3.html</em>
where <em class="replaceable">PATH_TO_PERLLIB</em> is what is printed out by:
<blockquote>
<pre class="programlisting">perl -MConfig -le 'print $Config{privlib}'</pre>
</blockquote>

Most Unicode properties are of the form <tt class="literal">\p{Is</tt><em class="replaceable">PROP</em><tt class="literal">}</tt>.  The <tt class="literal">Is</tt>
is optional, since it's so common, but you may prefer to leave it in for
readability.</p>


<h3 class="sect3">5.4.3.1. Perl's Unicode properties</h3>

<p>
<a name="INDEX-1553"></a><a name="INDEX-1554"></a>
First, <a href="ch05_04.htm">Table 5-9</a> lists Perl's
composite properties.  They're defined to be reasonably close to the
standard POSIX definitions for character classes.</p>

<a name="perl3-tab-prop-composite"></a>
<h4 class="objtitle">Table 5.9. Composite Unicode Properties</h4>
<table border="1">

<tr>
<th>Property</th>
<th>Equivalent</th>
</tr>




<tr>
<td><tt class="literal">IsASCII</tt></td>
<td><tt class="literal">[\x00-\x7f]</tt></td>
</tr>

<tr>
<td><tt class="literal">IsAlnum</tt></td>
<td><tt class="literal">[\p{IsLl}\p{IsLu}\p{IsLt}\p{IsLo}\p{IsNd}]</tt></td>
</tr>

<tr>
<td><tt class="literal">IsAlpha</tt></td>
<td><tt class="literal">[\p{IsLl}\p{IsLu}\p{IsLt}\p{IsLo}]</tt></td>
</tr>

<tr>
<td><tt class="literal">IsCntrl</tt></td>
<td><tt class="literal">\p{IsC}</tt></td>
</tr>

<tr>
<td><tt class="literal">IsDigit</tt></td>
<td><tt class="literal">\p{Nd}</tt></td>
</tr>

<tr>
<td><tt class="literal">IsGraph</tt></td>
<td><tt class="literal">[^\pC\p{IsSpace}]</tt></td>
</tr>

<tr>
<td><tt class="literal">IsLower</tt></td>
<td><tt class="literal">\p{IsLl}</tt></td>
</tr>

<tr>
<td><tt class="literal">IsPrint</tt></td>
<td><tt class="literal">\P{IsC}</tt></td>
</tr>

<tr>
<td><tt class="literal">IsPunct</tt></td>
<td><tt class="literal">\p{IsP}</tt></td>
</tr>

<tr>
<td><tt class="literal">IsSpace</tt></td>
<td><tt class="literal">[\t\n\f\r\p{IsZ}]</tt></td>
</tr>

<tr>
<td><tt class="literal">IsUpper</tt></td>
<td><tt class="literal">[\p{IsLu}\p{IsLt}]</tt></td>
</tr>

<tr>
<td><tt class="literal">IsWord</tt></td>
<td><tt class="literal">[_\p{IsLl}\p{IsLu}\p{IsLt}\p{IsLo}\p{IsNd}]</tt></td>
</tr>

<tr>
<td><tt class="literal">IsXDigit</tt></td>
<td><tt class="literal">[0-9a-fA-F]</tt></td>
</tr>


</table>

<p>Perl also provides the following composites for each of main categories
of standard Unicode properties (see the next section):</p>

<table border="1">

<tr>
<th>Property</th>
<th>Meaning</th>
<th>Normative</th>
</tr>




<tr>
<td><tt class="literal">IsC</tt></td>
<td>Crazy control codes and such</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsL</tt></td>
<td>Letters</td>
<td>Partly</td>
</tr>

<tr>
<td><tt class="literal">IsM</tt></td>
<td>Marks</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsN</tt></td>
<td>Numbers</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsP</tt></td>
<td>Punctuation</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsS</tt></td>
<td>Symbols</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsZ</tt></td>
<td>Separators (Zeparators?)</td>
<td>Yes</td>
</tr>


</table>




<h3 class="sect3">5.4.3.2. Standard Unicode properties</h3>

<p>
<a href="ch05_04.htm">Table 5-10</a> lists the most basic standard
Unicode properties, derived from each character's category.  No
character is a member of more than one category.  Some properties are
normative; others are merely informative.  See the Unicode Standard
for the standard spiel on just how normative the normative information
is, and just how informative the informative information isn't.
<a name="INDEX-1555"></a><a name="INDEX-1556"></a><a name="INDEX-1557"></a>
</p>

<a name="perl3-tab-prop-basic"></a>
<h4 class="objtitle">Table 5.10. Standard Unicode Properties</h4>
<table border="1">

<tr>
<th>Property</th>
<th>Meaning</th>
<th>Normative</th>
</tr>




<tr>
<td><tt class="literal">IsCc</tt></td>
<td>Other, Control</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsCf</tt></td>
<td>Other, Format</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsCn</tt></td>
<td>Other, Not assigned</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsCo</tt></td>
<td>Other, Private Use</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsCs</tt></td>
<td>Other, Surrogate</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsLl</tt></td>
<td>Letter, Lowercase</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsLm</tt></td>
<td>Letter, Modifier</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsLo</tt></td>
<td>Letter, Other</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsLt</tt></td>
<td>Letter, Titlecase</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsLu</tt></td>
<td>Letter, Uppercase</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsMc</tt></td>
<td>Mark, Combining</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsMe</tt></td>
<td>Mark, Enclosing</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsMn</tt></td>
<td>Mark, Nonspacing</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsNd</tt></td>
<td>Number, Decimal digit</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsNl</tt></td>
<td>Number, Letter</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsNo</tt></td>
<td>Number, Other</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsPc</tt></td>
<td>Punctuation, Connector</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsPd</tt></td>
<td>Punctuation, Dash</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsPe</tt></td>
<td>Punctuation, Close</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsPf</tt></td>
<td>Punctuation, Final quote</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsPi</tt></td>
<td>Punctuation, Initial quote</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsPo</tt></td>
<td>Punctuation, Other</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsPs</tt></td>
<td>Punctuation, Open</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsSc</tt></td>
<td>Symbol, Currency</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsSk</tt></td>
<td>Symbol, Modifier</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsSm</tt></td>
<td>Symbol, Math</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsSo</tt></td>
<td>Symbol, Other</td>
<td>No</td>
</tr>

<tr>
<td><tt class="literal">IsZl</tt></td>
<td>Separator, Line</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsZp</tt></td>
<td>Separator, Paragraph</td>
<td>Yes</td>
</tr>

<tr>
<td><tt class="literal">IsZs</tt></td>
<td>Separator, Space</td>
<td>Yes</td>
</tr>


</table>

<p>
<a name="INDEX-1558"></a><a name="INDEX-1559"></a><a name="INDEX-1560"></a><a name="INDEX-1561"></a><a name="INDEX-1562"></a>
Another useful set of properties has to do with whether a given character
can be decomposed (either canonically or compatibly) into other simpler
characters.  Canonical decomposition doesn't lose any formatting
information.  Compatibility decomposition may lose formatting
information such as whether a character is a superscript.</p>

<a name="perl3-tab-prop-comp"></a>
<table border="1">

<tr>
<th>Property</th>
<th>Information Lost</th>
</tr>




<tr>
<td><tt class="literal">IsDecoCanon</tt></td>
<td>Nothing</td>
</tr>

<tr>
<td><tt class="literal">IsDecoCompat</tt></td>
<td>
<p>Something (one of the following)</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCcircle</tt></td>
<td>
<p>Circle around character</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCfinal</tt></td>
<td>
<p>Final position preference (Arabic)</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCfont</tt></td>
<td>
<p>Variant font preference</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCfraction</tt></td>
<td>
<p>Vulgar fraction characteristic</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCinitial</tt></td>
<td>
<p>Initial position preference (Arabic)</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCisolated</tt></td>
<td>
<p>Isolated position preference (Arabic)</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCmedial</tt></td>
<td>
<p>Medial position preference (Arabic)</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCnarrow</tt></td>
<td>Narrow characteristic</td>
</tr>

<tr>
<td><tt class="literal">IsDCnoBreak</tt></td>
<td>Nonbreaking preference on space or hyphen</td>
</tr>

<tr>
<td><tt class="literal">IsDCsmall</tt></td>
<td>Small characteristic</td>
</tr>

<tr>
<td><tt class="literal">IsDCsquare</tt></td>
<td>
<p>Square around CJK character</p>
</td>
</tr>

<tr>
<td><tt class="literal">IsDCsub</tt></td>
<td>Subscription</td>
</tr>

<tr>
<td><tt class="literal">IsDCsuper</tt></td>
<td>Superscription</td>
</tr>

<tr>
<td><tt class="literal">IsDCvertical</tt></td>
<td>Rotation (horizontal to vertical)</td>
</tr>

<tr>
<td><tt class="literal">IsDCwide</tt></td>
<td>Wide characteristic</td>
</tr>

<tr>
<td><tt class="literal">IsDCcompat</tt></td>
<td>Identity (miscellaneous)</td>
</tr>


</table>
<p>
Here are some properties of interest to people doing bidirectional
rendering:
<a name="INDEX-1563"></a><a name="INDEX-1564"></a>
</p>

<a name="perl3-tab-prop-bidi"></a>
<table border="1">

<tr>
<th>Property</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">IsBidiL</tt></td>
<td>Left-to-right (Arabic, Hebrew)</td>
</tr>

<tr>
<td><tt class="literal">IsBidiLRE</tt></td>
<td>Left-to-right embedding</td>
</tr>

<tr>
<td><tt class="literal">IsBidiLRO</tt></td>
<td>Left-to-right override</td>
</tr>

<tr>
<td><tt class="literal">IsBidiR</tt></td>
<td>Right-to-left</td>
</tr>

<tr>
<td><tt class="literal">IsBidiAL</tt></td>
<td>Right-to-left Arabic</td>
</tr>

<tr>
<td><tt class="literal">IsBidiRLE</tt></td>
<td>Right-to-left embedding</td>
</tr>

<tr>
<td><tt class="literal">IsBidiRLO</tt></td>
<td>Right-to-left override</td>
</tr>

<tr>
<td><tt class="literal">IsBidiPDF</tt></td>
<td>Pop directional format</td>
</tr>

<tr>
<td><tt class="literal">IsBidiEN</tt></td>
<td>European number</td>
</tr>

<tr>
<td><tt class="literal">IsBidiES</tt></td>
<td>European number separator</td>
</tr>

<tr>
<td><tt class="literal">IsBidiET</tt></td>
<td>European number terminator</td>
</tr>

<tr>
<td><tt class="literal">IsBidiAN</tt></td>
<td>Arabic number</td>
</tr>

<tr>
<td><tt class="literal">IsBidiCS</tt></td>
<td>Common number separator</td>
</tr>

<tr>
<td><tt class="literal">IsBidiNSM</tt></td>
<td>Nonspacing mark</td>
</tr>

<tr>
<td><tt class="literal">IsBidiBN</tt></td>
<td>Boundary neutral</td>
</tr>

<tr>
<td><tt class="literal">IsBidiB</tt></td>
<td>Paragraph separator</td>
</tr>

<tr>
<td><tt class="literal">IsBidiS</tt></td>
<td>Segment separator</td>
</tr>

<tr>
<td><tt class="literal">IsBidiWS</tt></td>
<td>Whitespace</td>
</tr>

<tr>
<td><tt class="literal">IsBidiON</tt></td>
<td>Other Neutrals</td>
</tr>

<tr>
<td><tt class="literal">IsMirrored</tt></td>
<td>Reverse when used right-to-left</td>
</tr>


</table>
<p>
<a name="INDEX-1565"></a><a name="INDEX-1566"></a>
The following properties classify various syllabaries according to vowel
sounds:
<blockquote>
<pre class="programlisting">IsSylA         IsSylE         IsSylO         IsSylWAA       IsSylWII
IsSylAA        IsSylEE        IsSylOO        IsSylWC        IsSylWO
IsSylAAI       IsSylI         IsSylU         IsSylWE        IsSylWOO
IsSylAI        IsSylII        IsSylV         IsSylWEE       IsSylWU
IsSylC         IsSylN         IsSylWA        IsSylWI        IsSylWV</pre>
</blockquote>

For example, <tt class="literal">\p{IsSylA}</tt> would match <tt class="literal">\N{KATAKANA LETTER KA}</tt>
but not <tt class="literal">\N{KATAKANA LETTER KU}</tt>.</p>

<p>Now that we've basically told you all these Unicode 3.0 properties, we
should point out that a few of the more esoteric ones aren't
implemented in version 5.6.0 of Perl because its implementation was
based in part on Unicode 2.0, and things like the bidirectional algorithm
were still being worked out.  However, by the time you read this, the
missing properties may well be implemented, so we listed them anyway.</p>




<h3 class="sect3">5.4.3.3. Unicode block properties</h3>

<p>
<a name="INDEX-1567"></a><a name="INDEX-1568"></a><a name="INDEX-1569"></a><a name="INDEX-1570"></a>
Some Unicode properties are of the form
<tt class="literal">\p{In</tt><em class="replaceable">SCRIPT</em><tt class="literal">}</tt>.
(Note the distinction between <tt class="literal">Is</tt> and
<tt class="literal">In</tt>.)  The <tt class="literal">In</tt> properties are for
testing block ranges of a particular
<em class="replaceable">SCRIPT</em>.  If you have a character, and you
wonder whether it were written in Greek script, you could test with:
<blockquote>
<pre class="programlisting">print "It's Greek to me!\n" if chr(931) =~ /\p{InGreek}/;</pre>
</blockquote>

That works by checking whether a character is "in" the valid range of
that script type.  This may be negated with
<tt class="literal">\P{In</tt><em class="replaceable">SCRIPT</em><tt class="literal">}</tt>
to find out whether something <em class="emphasis">isn't</em> in a
particular script's block, such as <tt class="literal">\P{InDingbats}</tt>
to test whether a string contains a non-dingbat.  Block properties
include the following:
<blockquote>
<pre class="programlisting">InArabic       InCyrillic     InHangulJamo   InMalayalam    InSyriac
InArmenian     InDevanagari   InHebrew       InMongolian    InTamil
InArrows       InDingbats     InHiragana     InMyanmar      InTelugu
InBasicLatin   InEthiopic     InKanbun       InOgham        InThaana
InBengali      InGeorgian     InKannada      InOriya        InThai
InBopomofo     InGreek        InKatakana     InRunic        InTibetan
InBoxDrawing   InGujarati     InKhmer        InSinhala      InYiRadicals
InCherokee     InGurmukhi     InLao          InSpecials     InYiSyllables</pre>
</blockquote>

Not to mention jawbreakers like these:
<blockquote>
<pre class="programlisting">InAlphabeticPresentationForms         InHalfwidthandFullwidthForms
InArabicPresentationForms-A           InHangulCompatibilityJamo
InArabicPresentationForms-B           InHangulSyllables
InBlockElements                       InHighPrivateUseSurrogates
InBopomofoExtended                    InHighSurrogates
InBraillePatterns                     InIdeographicDescriptionCharacters
InCJKCompatibility                    InIPAExtensions
InCJKCompatibilityForms               InKangxiRadicals
InCJKCompatibilityIdeographs          InLatin-1Supplement
InCJKRadicalsSupplement               InLatinExtended-A
InCJKSymbolsandPunctuation            InLatinExtended-B
InCJKUnifiedIdeographs                InLatinExtendedAdditional
InCJKUnifiedIdeographsExtensionA      InLetterlikeSymbols
InCombiningDiacriticalMarks           InLowSurrogates
InCombiningHalfMarks                  InMathematicalOperators
InCombiningMarksforSymbols            InMiscellaneousSymbols
InControlPictures                     InMiscellaneousTechnical
InCurrencySymbols                     InNumberForms
InEnclosedAlphanumerics               InOpticalCharacterRecognition
InEnclosedCJKLettersandMonths         InPrivateUse
InGeneralPunctuation                  InSuperscriptsandSubscripts
InGeometricShapes                     InSmallFormVariants
InGreekExtended                       InSpacingModifierLetters</pre>
</blockquote>

And the winner is:
<blockquote>
<pre class="programlisting">InUnifiedCanadianAboriginalSyllabics</pre>
</blockquote>

See
<em class="replaceable">PATH_TO_PERLLIB</em><em class="emphasis">/unicode/In/*.pl</em>
to get an up-to-date listing of all of these character block
properties.  Note that these <tt class="literal">In</tt> properties are only
testing to see if the character is in the block of characters
allocated for that script.  There is no guarantee that all

characters in that range are defined; you also need to test
against one of the <tt class="literal">Is</tt> properties discussed earlier
to see if the character is defined.  There is also no guarantee that a
particular language doesn't use characters outside its assigned block.
In particular, many European languages mix extended Latin characters
with Latin-1 characters.</p>

<p>But hey, if you need a particular property that isn't provided, that's
not a big problem.  Read on.</p>




<h3 class="sect3">5.4.3.4. Defining your own character properties</h3>

<p>
<a name="INDEX-1571"></a><a name="INDEX-1572"></a>
To define your own property, you need to write a subroutine with the
name of the property you want (see <a href="ch06_01.htm">Chapter 6, "Subroutines"</a>).  The subroutine should be defined
in the package that needs the property (see <a href="ch10_01.htm">Chapter 10, "Packages"</a>), which means that if you want to use
it in multiple packages, you'll either have to import it from a module
(see <a href="ch11_01.htm">Chapter 11, "Modules"</a>), or inherit it as a class
method from the package in which it is defined (see
<a href="ch12_01.htm">Chapter 12, "Objects"</a>).</p>

<p>Once you've got that all settled, the subroutine should return data in
the same format as the files in <em class="replaceable">PATH_TO_PERLLIB</em><em class="emphasis">/unicode/Is</em>
directory.  That is, just return a list of characters or character ranges in
hexadecimal, one per line.  If there is a range, the two numbers are
separated by a tab.  Suppose you wanted a property that would be true
if your character is in the range of either of the Japanese
syllabaries, known as hiragana and katakana.  (Together they're known
as kana).  You can just put in the two ranges like this:
<blockquote>
<pre class="programlisting">sub InKana {
    return &lt;&lt;'END';
3040    309F
30A0    30FF
END
}</pre>
</blockquote>

Alternatively, you could define it in terms of existing property names:
<blockquote>
<pre class="programlisting">sub InKana {
    return &lt;&lt;'END';
+utf8::InHiragana
+utf8::InKatakana
END
}</pre>
</blockquote>
<a name="INDEX-1573"></a><a name="INDEX-1574"></a>
You can also do set subtraction using a "<tt class="literal">-</tt>" prefix.  Suppose you
only wanted the actual characters, not just the block ranges of characters.
You could weed out all the undefined ones like this:
<blockquote>
<pre class="programlisting">sub IsKana {
    return &lt;&lt;'END';
+utf8::InHiragana
+utf8::InKatakana
-utf8::IsCn
END
}</pre>
</blockquote>
<a name="INDEX-1575"></a>
You can also start with a complemented character set using the "<tt class="literal">!</tt>" prefix:
<blockquote>
<pre class="programlisting">sub IsNotKana {
    return &lt;&lt;'END';
!utf8::InHiragana
-utf8::InKatakana
+utf8::IsCn
END
}</pre>
</blockquote>
<a name="INDEX-1576"></a>
Perl itself uses exactly the same tricks to define the meanings of its
"classic" character classes (like <tt class="literal">\w</tt>) when you include them in your
own custom character classes (like <tt class="literal">[-.\w\s]</tt>).  You might think that
the more complicated you get with your rules, the slower they will run,
but in fact, once Perl has calculated the bit pattern for a particular
64-bit swatch of your property, it caches it so it never has to
recalculate the pattern again.  (It does it in 64-bit swatches so that it
doesn't even have to decode your utf8 to do its lookups.)  Thus, all
character classes, built-in or custom, run at essentially the same
speed (fast) once they get going.</p>

<a name="INDEX-1577"></a><a name="INDEX-1578"></a>







<h3 class="sect2">5.4.4. POSIX-Style Character Classes</h3>

<p>
<a name="INDEX-1579"></a><a name="INDEX-1580"></a>
Unlike Perl's other character class shortcuts, the POSIX-style
character-class syntax notation, <tt class="literal">[:</tt><em class="replaceable">CLASS</em><tt class="literal">:]</tt>, is available for use
<em class="emphasis">only</em> when constructing other character classes, that is, inside an
additional pair of square brackets.  For example,
<tt class="literal">/[.,[:alpha:][:digit:]]/</tt> will search for one character that is
either a literal dot (because it's in a character class), a comma, an
alphabetic character, or a digit.</p>

<p>The POSIX classes available as of revision 5.6 of Perl are shown in
<a href="ch05_04.htm">Table 5-11</a>.</p>

<a name="perl3-tab-posix-char-class"></a>
<h4 class="objtitle">Table 5.11. POSIX Character Classes</h4>
<table border="1">

<tr>
<th>Class</th>
<th>Meaning</th>
</tr>




<tr>
<td><tt class="literal">alnum</tt></td>
<td>
<p>Any alphanumeric, that is, an <tt class="literal">alpha</tt> or a <tt class="literal">digit</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">alpha</tt></td>
<td>
<p>Any letter.  (That's a lot more letters than you think, unless you're
thinking Unicode, in which case it's still a lot.)</p>
</td>
</tr>

<tr>
<td><tt class="literal">ascii</tt></td>
<td>Any character with an ordinal value between 0 and 127.</td>
</tr>

<tr>
<td><tt class="literal">cntrl</tt></td>
<td>
<p>Any control character.  Usually characters that don't produce output
as such, but instead control the terminal somehow; for example,
newline, form feed, and backspace are all control characters. Characters with an <tt class="literal">ord</tt> value less than 32 are most often classified
as control characters.</p>
</td>
</tr>

<tr>
<td><tt class="literal">digit</tt></td>
<td>
<p> A character
representing a decimal digit, such as <tt class="literal">0</tt> to
<tt class="literal">9</tt>.  (Includes other characters under Unicode.)
Equivalent to <tt class="literal">\d</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">graph</tt></td>
<td>
<p>Any alphanumeric or punctuation character.</p>
</td>
</tr>

<tr>
<td><tt class="literal">lower</tt></td>
<td>
<p>A lowercase letter.</p>
</td>
</tr>

<tr>
<td><tt class="literal">print</tt></td>
<td>
<p>Any alphanumeric or punctuation character or space.</p>
</td>
</tr>

<tr>
<td><tt class="literal">punct</tt></td>
<td>
<p>Any punctuation character.</p>
</td>
</tr>

<tr>
<td><tt class="literal">space</tt></td>
<td>
<p>Any space character.  Includes tab, newline, form feed, and carriage return
(and a lot more under Unicode.)  Equivalent to <tt class="literal">\s</tt>.</p>
</td>
</tr>

<tr>
<td><tt class="literal">upper</tt></td>
<td>
<p>Any uppercase (or titlecase) letter.</p>
</td>
</tr>

<tr>
<td><tt class="literal">word</tt></td>
<td>
<p>Any identifier character, either an <tt class="literal">alnum</tt> or underline.</p>
</td>
</tr>

<tr>
<td><tt class="literal">xdigit</tt></td>
<td>
<p>Any hexadecimal digit.  Though this may seem silly (<tt class="literal">[0-9a-fA-F]</tt>
works just fine), it is included for completeness.</p>
</td>
</tr>


</table>

<p>
<a name="INDEX-1581"></a>
You can negate the POSIX character classes by prefixing the class
name with a <tt class="literal">^</tt> following the <tt class="literal">[:</tt>.  (This is a Perl extension.)
For example:</p>

<a name="perl3-tab-posixtrad"></a>
<table border="1">

<tr>
<th>POSIX</th>
<th>Classic</th>
</tr>




<tr>
<td><tt class="literal">[:^digit:]</tt></td>
<td><tt class="literal">\D</tt></td>
</tr>

<tr>
<td><tt class="literal">[:^space:]</tt></td>
<td><tt class="literal">\S</tt></td>
</tr>

<tr>
<td><tt class="literal">[:^word:]</tt></td>
<td><tt class="literal">\W</tt></td>
</tr>


</table>
<p>If the <tt class="literal">use utf8</tt> pragma is not requested, but the
<tt class="literal">use locale</tt> pragma is, the classes correlate
directly with the equivalent functions in the C library's
<em class="emphasis">isalpha</em>(3) interface (except for
<tt class="literal">word</tt>, which is a Perl extension, mirroring
<tt class="literal">\w</tt>).
<a name="INDEX-1582"></a>
</p>

<p>If the <tt class="literal">utf8</tt> pragma is used, POSIX character classes
are exactly equivalent to the corresponding <tt class="literal">Is</tt>
properties listed in <a href="ch05_04.htm">Table 5-9</a>.  For
example <tt class="literal">[:lower:]</tt> and <tt class="literal">\p{Lower}</tt>
are equivalent, except that the POSIX classes may only be used within
constructed character classes, whereas Unicode properties have no such
restriction and may be used in patterns wherever Perl shortcuts like
<tt class="literal">\s</tt> and <tt class="literal">\w</tt> may be used.</p>

<p>The brackets are part of the POSIX-style <tt class="literal">[::]</tt> construct,
not part of the whole character class.  This leads to writing
patterns like <tt class="literal">/^[[:lower:][:digit:]]+$/</tt>, to match a string
consisting entirely of lowercase letters or digits (plus an
optional trailing newline).  In particular, this does not work:
<blockquote>
<pre class="programlisting">42 =~ /^[:digit:]$/         # WRONG</pre>
</blockquote>

That's because it's not inside a character class.  Rather, it <em class="emphasis">is</em> a
character class, the one representing the characters "<tt class="literal">:</tt>", "<tt class="literal">i</tt>",
"<tt class="literal">t</tt>", "<tt class="literal">g</tt>", and "<tt class="literal">d</tt>".  Perl doesn't care that you specified
"<tt class="literal">:</tt>" twice.</p>

<p>Here's what you need instead:
<blockquote>
<pre class="programlisting">42 =~ /^[[:digit:]]+$/</pre>
</blockquote>

The POSIX character classes <tt class="literal">[.cc.]</tt> and
<tt class="literal">[=cc=]</tt> are recognized but produce an error
indicating they are not supported.  Trying to use
<em class="emphasis">any</em> POSIX character class in older verions of
Perl is likely to fail miserably, and perhaps even silently.  If
you're going to use POSIX character classes, it's best to require a
new version of Perl by saying:
<blockquote>
<pre class="programlisting">use 5.6.0;</pre>
</blockquote>
</p>

<a name="INDEX-1583"></a><a name="INDEX-1584"></a>





<a name="INDEX-1585"></a><a name="INDEX-1586"></a>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch05_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">5.3. Metacharacters and Metasymbols</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">5.5. Quantifiers</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
