<html>
<head>
<title>Objects (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Objects">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch11_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="part2.htm"></a></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h1 class="chapter">Chapter 12.  Objects</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
  <p> <a href="#INDEX-2336">Brief Refresher on Object-Oriented Lingo</a> <br>
<a href="ch12_02.htm">Perl's Object System</a>
<br>
<a href="ch12_03.htm">Method Invocation</a>
<br>
<a href="ch12_04.htm">Object Construction</a>
<br>
<a href="ch12_05.htm">Class Inheritance</a>
<br>
<a href="ch12_06.htm">Instance Destructors</a>
<br>
<a href="ch12_07.htm">Managing Instance Data</a>
<br>
<a href="ch12_08.htm">Managing Class Data</a>
<br>
<a href="ch12_09.htm">Summary</a>
<br>
</p>
</div>

<a name="INDEX-2336"></a>
<p>First of all, you need to understand packages and modules; see <a href="ch10_01.htm">Chapter 10, "Packages"</a>, and <a href="ch11_01.htm">Chapter 11, "Modules"</a>.  You also need to know about references
and data structures; see <a href="ch08_01.htm">Chapter 8, "References"</a> and
<a href="ch09_01.htm">Chapter 9, "Data Structures"</a>.  It's also helpful to
understand a little about object-oriented programming (OOP), so in the
next section we'll give you a little course on OOL (object-oriented
lingo).</p>


<h2 class="sect1">12.1. Brief Refresher on Object-Oriented Lingo</h2>

<a name="INDEX-2337"></a><a name="INDEX-2338"></a>
<p>
<a name="INDEX-2339"></a>
An <em class="emphasis">object</em> is a data structure with a collection
of behaviors.  We generally speak of the behaviors as acted out by the
object directly, sometimes to the point of anthropomorphizing the
object.  For example, we might say that a rectangle "knows" how to
display itself on the screen, or that it "knows" how to compute its
own area.</p>

<p>
<a name="INDEX-2340"></a><a name="INDEX-2341"></a><a name="INDEX-2342"></a><a name="INDEX-2343"></a><a name="INDEX-2344"></a><a name="INDEX-2345"></a>
Every object gets its behaviors by virtue of being an
<em class="emphasis">instance</em> of a <em class="emphasis">class</em>.  The
class defines <em class="emphasis">methods</em>: behaviors that apply to
the class and its instances.  When the distinction matters, we refer
to methods that apply only to a particular object as
<em class="emphasis">instance methods</em> and those that apply to the
entire class as <em class="emphasis">class methods</em>.  But this is only
a convention--to Perl, a method is just a method, distinguished only
by the type of its first argument.</p>

<p>You can think of an instance method as some action performed by a particular
object, such as printing itself out, copying itself, or
altering one or more of its properties ("set this sword's name to
Anduril").  Class methods might perform operations on many objects
collectively ("display all swords") or provide other operations
that aren't dependent on any particular object ("from now on,
whenever a new sword is forged, register its owner in this
database").  Methods that generate instances (objects) of a class
are called <em class="emphasis">constructor methods</em> ("create a sword with a gem-studded
hilt and a secret inscription").  These are usually class methods
("make me a new sword") but can also be instance methods ("make
a copy just like this sword here").</p>

<p>
<a name="INDEX-2346"></a><a name="INDEX-2347"></a><a name="INDEX-2348"></a><a name="INDEX-2349"></a><a name="INDEX-2350"></a><a name="INDEX-2351"></a>
A class may <em class="emphasis">inherit</em> methods from <em class="emphasis">parent classes</em>, also known
as <em class="emphasis">base classes</em> or <em class="emphasis">superclasses</em>.  If it does, it's known as
a <em class="emphasis">derived class</em> or a <em class="emphasis">subclass</em>.  (Confusing the issue further,
some literature uses "base class" to mean a "most super" superclass.
That's not what we mean by it.)  Inheritance makes a new class that
behaves just like an existing one but also allows for altered or
added behaviors not found in its parents.  When you invoke a method
whose definition is not found in the class, Perl automatically
consults the parent classes for a definition.  For example, a sword
class might inherit its <tt class="literal">attack</tt> method from a generic blade
class.  Parents can themselves have parents, and Perl will search
those classes as well when it needs to.  The blade class might in turn
inherit its <tt class="literal">attack</tt> method from an even more generic weapon class.</p>

<p>
<a name="INDEX-2352"></a>
When the <tt class="literal">attack</tt> method is invoked on an object, the resulting
behavior may depend on whether that object is a sword or an arrow.
Perhaps there wouldn't be any difference at all, which would be the
case if both swords and arrows inherited their attacking behavior
from the generic weapon class.  But if there were a difference in
behaviors, the method dispatch mechanism would always select the
<tt class="literal">attack</tt> method suitable for the object in question.  The useful
property of always selecting the most appropriate behavior for a
particular type of object is known as <em class="emphasis">polymorphism</em>.  It's an
important form of not caring.</p>

<p>You have to care about the innards of your objects when you're
implementing a class, but when you <em class="emphasis">use</em> a class, you should be
thinking of its objects as black boxes.  You can't see what's inside,
you shouldn't need to know how it works, and you interact with the box
only on its terms: via the methods provided by the class.  Even if you
know what those methods do to the object, you should resist the urge to
fiddle around yourself.  It's like the remote control for your
television set: even if you know what's going on inside it, you
shouldn't monkey with its innards without good reason.</p>

<p>
<a name="INDEX-2353"></a><a name="INDEX-2354"></a><a name="INDEX-2355"></a>
Perl lets you peer inside the object from outside the class when you
need to.  But doing so breaks its <em class="emphasis">encapsulation</em>, the principle that
all access to an object should be through methods alone.  Encapsulation
decouples the published interface (how an object should be used) from
the implementation (how it actually works).  Perl does not have an
explicit interface facility apart from this unwritten contract between
designer and user.  Both parties are expected to exercise common sense
and common decency: the user by relying only upon the documented
interface, the designer by not breaking that interface.</p>

<p>Perl doesn't force a particular style of programming on you, and it
doesn't have the obsession with privacy that some other object-oriented
languages do.  Perl does have an obsession with freedom, however, and
one of the freedoms you have as a Perl programmer is the right to
select as much or as little privacy as you like.  In fact, Perl can
have stronger privacy in its classes and objects than C++.  That is,
Perl does not restrict you from anything, and in particular it doesn't
restrict you from restricting yourself, if you're into that kind of
thing.  The sections <a href="ch12_05.htm">Section 12.5.5, "Private Methods"</a> and <a href="ch12_07.htm">Section 12.7.5, "Using Closures for Private Objects"</a> later in this chapter demonstrate how you can increase your dosage of
discipline.</p>

<p>Admittedly, there's a lot more to objects than this, and a lot of ways
to find out more about object-oriented design.  But that's not our purpose here.  So, on we go.</p>

















































































<a name="INDEX-2599"></a>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch11_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">11.3. Overriding Built-in Functions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">12.2. Perl's Object System</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
