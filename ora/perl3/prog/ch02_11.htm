<html>
<head>
<title>Input Operators (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Input Operators">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch02_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">2.11. Input Operators</h2>

<a name="INDEX-733"></a><a name="INDEX-734"></a><a name="INDEX-735"></a>
<p>There are several input operators we'll discuss here because they parse
as terms.  Sometimes we call them pseudoliterals because they
act like quoted strings in many ways.  (Output operators like <tt class="literal">print</tt>
parse as list operators and are discussed in <a href="ch29_01.htm">Chapter 29, "Functions"</a>.)</p>


<h3 class="sect2">2.11.1. Command Input (Backtick) Operator</h3>

<a name="INDEX-736"></a><a name="INDEX-737"></a><a name="INDEX-738"></a>
<p>First of all, we have the command input operator, also known as the
backtick operator, because it looks like this:
<blockquote>
<pre class="programlisting">$info = `finger $user`;</pre>
</blockquote>

A string enclosed by backticks (grave accents, technically) first
undergoes variable interpolation just like a double-quoted string.
The result is then interpreted as a command line by the system, and
the output of that command becomes the value of the pseudoliteral.
(This is modeled after a similar operator in Unix shells.)  In scalar
context, a single string consisting of all the output is returned.  In
list context, a list of values is returned, one for each line of
output. (You can set <tt class="literal">$/</tt> to use a different line
terminator.)</p>

<p>
<a name="INDEX-739"></a>
The command is executed each time the pseudoliteral is evaluated. The numeric status value of
the command is saved in <tt class="literal">$?</tt> (see <a href="ch28_01.htm">Chapter 28, "Special Names"</a> for the interpretation of
<tt class="literal">$?</tt>, also known as <tt class="literal">$CHILD_ERROR</tt>).
Unlike the <em class="emphasis">csh</em> version of this command, no
translation is done on the return data--newlines remain newlines.
Unlike in any of the shells, single quotes in Perl do not hide
variable names in the command from interpretation. To pass a
<tt class="literal">$</tt> through to the shell you need to hide it with a
backslash.  The <tt class="literal">$user</tt> in our
<em class="emphasis">finger</em> example above is interpolated by Perl, not
by the shell.  (Because the command undergoes shell processing, see
<a href="ch23_01.htm">Chapter 23, "Security"</a>, for security concerns.)</p>

<p>
<a name="INDEX-740"></a><a name="INDEX-741"></a><a name="INDEX-742"></a>
The generalized form of backticks is <tt class="literal">qx//</tt> (for "quoted execution"),
but the operator works exactly the same way as ordinary backticks.
You just get to pick your quote characters.  As with similar quoting
pseudofunctions, if you happen to choose a single quote as your
delimiter, the command string doesn't undergo double-quote
interpolation;
<blockquote>
<pre class="programlisting">$perl_info  = qx(ps $$);            # that's Perl's $$
$shell_info = qx'ps $$';            # that's the shell's $$</pre>
</blockquote>
</p>





<a name="ch02-sect-li"></a>
<h3 class="sect2">2.11.2. Line Input (Angle) Operator</h3>

<a name="INDEX-743"></a><a name="INDEX-744"></a><a name="INDEX-745"></a><a name="INDEX-746"></a><a name="INDEX-747"></a><a name="INDEX-748"></a><a name="INDEX-749"></a><a name="INDEX-750"></a>
<p>The most heavily used input operator is the line input operator,
also known as the angle operator or the <tt class="literal">readline</tt> function (since
that's what it calls internally). Evaluating a filehandle in angle brackets
(<tt class="literal">STDIN</tt>, for example) yields the next line from the
associated filehandle.  (The newline is included, so according to Perl's
criteria for truth, a freshly input line is always true, up until
end-of-file, at which point an undefined value is returned, which
is conveniently false.)  Ordinarily, you would assign the input value
to a variable, but there is one situation where an automatic
assignment happens.  If and only if the line input operator is the
only thing inside the conditional of a <tt class="literal">while</tt> loop, the value is
automatically assigned to the special variable <tt class="literal">$_</tt>.  The assigned
value is then tested to see whether it is defined.  (This may seem
like an odd thing to you, but you'll use the construct frequently,
so it's worth learning.) Anyway, the following lines are equivalent:
<blockquote>
<pre class="programlisting">while (defined($_ = &lt;STDIN&gt;)) { print $_; }   # the longest way
while ($_ = &lt;STDIN&gt;) { print; }               # explicitly to $_
while (&lt;STDIN&gt;) { print; }                    # the short way
for (;&lt;STDIN&gt;;) { print; }                    # while loop in disguise
print $_ while defined($_ = &lt;STDIN&gt;);         # long statement modifier
print while $_ = &lt;STDIN&gt;;                     # explicitly to $_
print while &lt;STDIN&gt;;                          # short statement modifier</pre>
</blockquote>

Remember that this special magic requires a <tt class="literal">while</tt> loop.  If you use
the input operator anywhere else, you must assign the result explicitly
if you want to keep the value:
<blockquote>
<pre class="programlisting">while (&lt;FH1&gt; &amp;&amp; &lt;FH2&gt;) { ... }          # WRONG: discards both inputs
if (&lt;STDIN&gt;)      { print; }            # WRONG: prints old value of $_
if ($_ = &lt;STDIN&gt;) { print; }            # suboptimal: doesn't test defined
if (defined($_ = &lt;STDIN&gt;)) { print; }   # best</pre>
</blockquote>

When you're implicitly assigning to <tt class="literal">$_</tt> in a <tt class="literal">$_</tt> loop, this
is the global variable by that name, not one localized to the
<tt class="literal">while</tt> loop.  You can protect an existing value of <tt class="literal">$_</tt>
this way:
<blockquote>
<pre class="programlisting">while (local $_ = &lt;STDIN&gt;) { print; }   # use local $_</pre>
</blockquote>

Any previous value is restored when the loop is done.  <tt class="literal">$_</tt> 
is still a global variable, though, so functions called from inside that
loop could still access it, intentionally or otherwise.  You can
avoid this, too, by declaring a lexical variable:  
<blockquote>
<pre class="programlisting">while (my $line = &lt;STDIN&gt;) { print $line; } # now private</pre>
</blockquote>

(Both of these <tt class="literal">while</tt> loops still implicitly test
for whether the result of the assignment is
<tt class="literal">defined</tt>, because <tt class="literal">my</tt> and
<tt class="literal">local</tt> don't change how assignment is seen by the
parser.)  The filehandles <tt class="literal">STDIN</tt>,
<tt class="literal">STDOUT</tt>, and <tt class="literal">STDERR</tt> are
predefined and pre-opened.  Additional filehandles may be created with
the <tt class="literal">open</tt> or <tt class="literal">sysopen</tt> functions.
See those functions' documentation in <a href="ch29_01.htm">Chapter 29, "Functions"</a> for details on this.</p>

<p>
<a name="INDEX-751"></a>
In the <tt class="literal">while</tt> loops above, we were evaluating the line input operator
in a scalar context, so the operator returns each line separately.  However, if
you use the operator in a list context, a list consisting of all remaining
input lines is returned, one line per list element.  It's easy to make a
<em class="emphasis">large</em> data space this way, so use this feature with care:
<blockquote>
<pre class="programlisting">$one_line = &lt;MYFILE&gt;;   # Get first line.
@all_lines = &lt;MYFILE&gt;;  # Get the rest of the lines.</pre>
</blockquote>

There is no <tt class="literal">while</tt> magic associated with the list
form of the input operator, because the condition of a
<tt class="literal">while</tt> loop always provides a scalar context (as does
any conditional).</p>

<p>
<a name="INDEX-752"></a>
Using the null filehandle within the angle operator is special; it
emulates the command-line behavior of typical Unix filter
programs such as <em class="emphasis">sed</em> and <em class="emphasis">awk</em>.  When you read lines from
<tt class="literal">&lt;&gt;</tt>, it magically gives you all the lines from all the files
mentioned on the command line.  If no files were mentioned, it gives you
standard input instead, so your program is easy to insert into the
middle of a pipeline of processes.</p>

<p>
<a name="INDEX-753"></a>
Here's how it works: the first time <tt class="literal">&lt;&gt;</tt> is evaluated, the
<tt class="literal">@ARGV</tt> array is checked, and if it is null, <tt class="literal">$ARGV[0]</tt> is set to
"<tt class="literal">-</tt>", which when opened gives you standard input.  The <tt class="literal">@ARGV</tt> array
is then processed as a list of filenames.  More explicitly, the loop:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    ...                     # code for each line
}</pre>
</blockquote>

is equivalent to the following Perl-like pseudocode:
<blockquote>
<pre class="programlisting">@ARGV = ('-') unless @ARGV;     # assume STDIN iff empty
while (@ARGV) {
    $ARGV = shift @ARGV;        # shorten @ARGV each time
    if (!open(ARGV, $ARGV)) {
        warn "Can't open $ARGV: $!\n";
        next;
    }
    while (&lt;ARGV&gt;) {
        ...                     # code for each line
    }
}</pre>
</blockquote>

except that it isn't so cumbersome to say, and will actually work.
It really does shift array <tt class="literal">@ARGV</tt> and put the current filename
into the global variable <tt class="literal">$ARGV</tt>.  It also uses the special
filehandle <tt class="literal">ARGV</tt> internally--<tt class="literal">&lt;&gt;</tt>
is just a synonym for
the more explicitly written <tt class="literal">&lt;ARGV&gt;</tt>, which is a magical
filehandle.  (The pseudocode above doesn't work because it treats
<tt class="literal">&lt;ARGV&gt;</tt> as nonmagical.)</p>

<p>You can modify <tt class="literal">@ARGV</tt> before the first
<tt class="literal">&lt;&gt;</tt> as long as the array ends up containing
the list of filenames you really want.  Because Perl uses its normal
<tt class="literal">open</tt> function here, a filename of
"<tt class="literal">-</tt>" counts as standard input wherever it is
encountered, and the more esoteric features of <tt class="literal">open</tt>
are automatically available to you (such as opening a "file" named
"<tt class="literal">gzip -dc &lt; file.gz|</tt>").  Line numbers
(<tt class="literal">$.</tt>) continue as if the input were one big happy
file.  (But see the example under <tt class="literal">eof</tt> in
<a href="ch29_01.htm">Chapter 29, "Functions"</a> for how to
reset line numbers on each file.)</p>

<p>If you want to set <tt class="literal">@ARGV</tt> to your own list of files, go right ahead:
<blockquote>
<pre class="programlisting"># default to README file if no args given
@ARGV = ("README") unless @ARGV;</pre>
</blockquote>

If you want to pass switches into your script, you can use one of the
<tt class="literal">Getopt::*</tt> modules or put a loop on the front like this:
<blockquote>
<pre class="programlisting">while (@ARGV and $ARGV[0] =~ /^-/) {
    $_ = shift;
    last if /^--$/;
    if (/^-D(.*)/) { $debug = $1 }
    if (/^-v/)     { $verbose++  }
    ...             # other switches
}
while (&lt;&gt;) {
    ...             # code for each line
}</pre>
</blockquote>

The <tt class="literal">&lt;&gt;</tt> symbol will return false only once.  If you call it
again after this, it will assume you are processing another <tt class="literal">@ARGV</tt>
list, and if you haven't set <tt class="literal">@ARGV</tt>, it will input from <tt class="literal">STDIN</tt>.</p>

<p>
<a name="INDEX-754"></a>
If the string inside the angle brackets is a scalar variable (for
example, <tt class="literal">&lt;$foo&gt;</tt>), that variable contains an <em class="emphasis">indirect</em>
filehandle, either the name of the filehandle to input from or a
reference to such a filehandle.  For example:
<blockquote>
<pre class="programlisting">$fh = \*STDIN;
$line = &lt;$fh&gt;;</pre>
</blockquote>

or:
<blockquote>
<pre class="programlisting">open($fh, "&lt;data.txt");
$line = &lt;$fh&gt;;</pre>
</blockquote>
</p>






<h3 class="sect2">2.11.3. Filename Globbing Operator</h3>

<a name="INDEX-755"></a><a name="INDEX-756"></a><a name="INDEX-757"></a><a name="INDEX-758"></a><a name="INDEX-759"></a><a name="INDEX-760"></a>
<p>You might wonder what happens to a line input operator if you put
something fancier inside the angle brackets.  What happens is that it
mutates into a different operator.  If the string inside the angle
brackets is anything other than a filehandle name or a scalar variable
(even if there are just extra spaces), it is interpreted as a filename
pattern to be "globbed".<a href="#FOOTNOTE-19">[19]</a> The pattern is matched against the files in the
current directory (or the directory specified as part of the fileglob
pattern), and the filenames so matched are returned by the operator.  As
with line input, names are returned one at a time in scalar context,
or all at once in list context.  The latter usage is more
common; you often see things like:
<blockquote>
<pre class="programlisting">@files = &lt;*.xml&gt;;</pre>
</blockquote>

As with other kinds of pseudoliterals, one level of variable
interpolation is done first, but you can't say <tt class="literal">&lt;$foo&gt;</tt> because
that's an indirect filehandle as explained earlier.  In older versions of
Perl, programmers would insert braces to force interpretation as a
fileglob: <tt class="literal">&lt;${foo}&gt;</tt>.  These days, it's considered cleaner
to call the internal function directly as <tt class="literal">glob($foo)</tt>, which is
probably the right way to have invented it in the first place.
So instead you'd write
<blockquote>
<pre class="programlisting">@files = glob("*.xml");</pre>
</blockquote>

if you despise overloading the angle operator for this.
Which you're allowed to do.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-19"></a>
<p>[19]Fileglobs have nothing to do with the
previously mentioned typeglobs, other than that they both use the <tt class="literal">*</tt>
character in a wildcard fashion.  The <tt class="literal">*</tt> character has the nickname
"glob" when used like this.  With typeglobs, you're globbing symbols with
the same name from the symbol table.  With a fileglob, you're doing
wildcard matching on the filenames in a directory, just as the various
shells do.</p>

</blockquote>

<p>
<a name="INDEX-761"></a><a name="INDEX-762"></a> Whether you use the
<tt class="literal">glob</tt> function or the old angle-bracket form, the
fileglob operator also does <tt class="literal">while</tt> magic like the
line input operator, assigning the result to <tt class="literal">$_</tt>.
(That was the rationale for overloading the angle operator in the
first place.)  For example, if you wanted to change the permissions on
all your C code files, you might say:
<blockquote>
<pre class="programlisting">while (glob "*.c") {
    chmod 0644, $_;
}</pre>
</blockquote>

which is equivalent to:
<blockquote>
<pre class="programlisting">while (&lt;*.c&gt;) {
    chmod 0644, $_;
}</pre>
</blockquote>

The <tt class="literal">glob</tt> function was originally implemented as a
shell command in older versions of Perl (and in even older versions of
Unix), which meant it was comparatively expensive to execute and,
worse still, wouldn't work exactly the same everywhere.  Nowadays it's
a built-in, so it's more reliable and a lot faster.  See the
description of the <tt class="literal">File::Glob</tt> module in
<a href="ch32_01.htm">Chapter 32, "Standard Modules"</a> for how to alter the default
behavior of this operator, such as whether to treat spaces in its
operand (argument) as pathname separators, whether to expand tildes or
braces, whether to be case insensitive, and whether to sort the return
values--amongst other things.</p>

<p>Of course, the shortest and arguably the most readable way to do the
<tt class="literal">chmod</tt> command above is to use the fileglob as a list operator:
<blockquote>
<pre class="programlisting">chmod 0644, &lt;*.c&gt;;</pre>
</blockquote>

A fileglob evaluates its (embedded) operand only when starting a new
list.  All values must be read before the operator will start over.
In a list context, this isn't important because you automatically get
them all anyway.  In a scalar context, however, the operator returns
the next value each time it is called, or a false value if you've just
run out.  Again, false is returned only once.  So if you're expecting
a single value from a fileglob, it is much better to say:
<blockquote>
<pre class="programlisting">($file) = &lt;blurch*&gt;;  # list context</pre>
</blockquote>
than to say:
<blockquote>
<pre class="programlisting">$file = &lt;blurch*&gt;;    # scalar context</pre>
</blockquote>

because the former returns all matched filenames and resets the
operator, whereas the latter alternates between returning filenames
and returning false.</p>

<p>
<a name="INDEX-763"></a><a name="INDEX-764"></a>
If you're trying to do variable interpolation, it's definitely better
to use the <tt class="literal">glob</tt> operator because the older notation can cause
confusion with the indirect filehandle notation.
This is where it
becomes apparent that the borderline between terms and operators is a
bit mushy:
<blockquote>
<pre class="programlisting">@files = &lt;$dir/*.[ch]&gt;;         # Works, but avoid.
@files = glob("$dir/*.[ch]");   # Call glob as function.
@files = glob $some_pattern;    # Call glob as operator.</pre>
</blockquote>
<a name="INDEX-765"></a><a name="INDEX-766"></a>
</p>

<p>We left the parentheses off of the last example to illustrate that
<tt class="literal">glob</tt> can be used either as a function (a term) or as a <em class="emphasis">unary</em>
operator; that is, a prefix operator that takes a single argument.  The
<tt class="literal">glob</tt> operator is an example of a <em class="emphasis">named unary operator</em>, which is
just one kind of operator we'll talk about in the next chapter.  Later,
we'll talk about pattern-matching operators, which also parse like
terms but behave like operators.</p>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_10.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch03_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">2.10. Typeglobs and Filehandles</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">3. Unary and Binary Operators</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
