<html>
<head>
<title>Class Inheritance (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Class Inheritance">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch12_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch12_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch12_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">12.5. Class Inheritance</h2>

<a name="INDEX-2435"></a><a name="INDEX-2436"></a><a name="INDEX-2437"></a>
<p>
<a name="INDEX-2438"></a>
As with the rest of Perl's object system, inheritance of one class by
another requires no special syntax to be added to the language.  When you
invoke a method for which Perl finds no subroutine in the invocant's
package, that package's <tt class="literal">@ISA</tt> array<a href="#FOOTNOTE-5">[5]</a> is examined.  This is how Perl
implements inheritance: each element of a given package's <tt class="literal">@ISA</tt> array
holds the name of another package, which is searched when methods are missing.  For example, the following makes the <tt class="literal">Horse</tt> class a
subclass of the <tt class="literal">Critter</tt> class.  (We declare <tt class="literal">@ISA</tt> with <tt class="literal">our</tt>
because it has to be a package variable, not a lexical declared with
<tt class="literal">my</tt>.)
<blockquote>
<pre class="programlisting">package Horse;
our @ISA = "Critter";</pre>
</blockquote>
<a name="INDEX-2439"></a>
You should now be able to use a <tt class="literal">Horse</tt> class or object everywhere
that a <tt class="literal">Critter</tt> was previously used.  If your new class passes
this <em class="emphasis">empty subclass test</em>, you know that <tt class="literal">Critter</tt> is a proper
base class, fit for inheritance.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-5"></a>
<p>[5] Pronounced "is a", as
in "A horse is a critter."</p>

</blockquote>

<p>Suppose you have a <tt class="literal">Horse</tt> object in <tt class="literal">$steed</tt> and invoke a <tt class="literal">move</tt>
method on it:
<blockquote>
<pre class="programlisting">$steed-&gt;move(10);</pre>
</blockquote>

Because <tt class="literal">$steed</tt> is a <tt class="literal">Horse</tt>,
Perl's first choice for that method is the
<tt class="literal">Horse::move</tt> subroutine.  If there isn't one,
instead of raising a run-time exception, Perl consults the first
element of <tt class="literal">@Horse::ISA</tt>, which directs it to look in
the <tt class="literal">Critter</tt> package for
<tt class="literal">Critter::move</tt>.  If this subroutine isn't found
either, and <tt class="literal">Critter</tt> has <em class="emphasis">its</em>
own <tt class="literal">@Critter::ISA</tt> array, then that too will be
consulted for the name of an ancestral package that might supply a
<tt class="literal">move</tt> method, and so on back up the inheritance
hierarchy until we come to a package without an
<tt class="literal">@ISA</tt>.</p>

<p>
<a name="INDEX-2440"></a><a name="INDEX-2441"></a><a name="INDEX-2442"></a>
The situation we just described is <em class="emphasis">single inheritance</em>, where each
class has only one parent.  Such inheritance is like a linked list of
related packages.  Perl also supports <em class="emphasis">multiple inheritance</em>; just
add more packages to the class's <tt class="literal">@ISA</tt>.  This kind of inheritance
works more like a tree data structure, because every package can have
more than one immediate parent.  Some people find this to be sexier.</p>

<p>
<a name="INDEX-2443"></a><a name="INDEX-2444"></a>
When you invoke a method <em class="replaceable">methname</em> on an invocant of type
<em class="replaceable">classname</em>, Perl tries six different ways to find a subroutine to use:</p>

<ol>
<li>
<p>First, Perl looks in the invocant's own package for a subroutine named
<em class="replaceable">classname</em><tt class="literal">::</tt><em class="replaceable">methname</em>.  If that fails, inheritance kicks in, and
we go to step 2.</p>
</li>
<li>
<p>Next, Perl checks for methods inherited
from base classes by looking in all <em class="replaceable">parent</em> packages listed in
<tt class="literal">@</tt><em class="replaceable">classname</em><tt class="literal">::ISA</tt> for a <em class="replaceable">parent</em><tt class="literal">::</tt><em class="replaceable">methname</em> subroutine. The search is left-to-right, recursive, and depth-first.  The
recursion assures that grandparent classes, great-grandparent
classes, great-great-grandparent classes, and so on, are all searched.</p>
</li>
<li>
<p>If that fails, Perl looks for a subroutine named
<tt class="literal">UNIVERSAL::</tt><em class="replaceable">methname</em>.</p>
</li>
<li>
<p>At this point, Perl gives up on <em class="replaceable">methname</em> and starts looking for an
<tt class="literal">AUTOLOAD</tt>.  First, it looks for a subroutine named <em class="replaceable">classname</em><tt class="literal">::AUTOLOAD</tt>.</p>
</li>
<li>
<p>Failing that, Perl searches all <em class="replaceable">parent</em> packages listed in
<tt class="literal">@</tt><em class="replaceable">classname</em><tt class="literal">::ISA</tt>, for any <em class="replaceable">parent</em><tt class="literal">::AUTOLOAD</tt> subroutine. The search is again left-to-right, recursive, and depth-first.</p>
</li>
<li>
<p>Finally, Perl looks for a subroutine named <tt class="literal">UNIVERSAL::AUTOLOAD</tt>.</p>
</li>
</ol>
<p>Perl stops after the first successful attempt and invokes that
subroutine.  If no subroutine is found, an exception is raised, one
that you'll see frequently:
<blockquote>
<pre class="programlisting">Can't locate object method "<em class="replaceable">methname</em>" via package "<em class="replaceable">classname</em>"</pre>
</blockquote>
<a name="INDEX-2445"></a>
If you've built a debugging version of Perl using the
<span class="option">-DDEBUGGING</span> option to your C compiler, by using
Perl's <span class="option">-Do</span> switch, you can watch it go
through each of these steps when it resolves method invocation.</p>

<p>We will discuss the inheritance mechanism in more detail as we go along.</p>


<h3 class="sect2">12.5.1. Inheritance Through @ISA</h3>

<p>
<a name="INDEX-2446"></a><a name="INDEX-2447"></a><a name="INDEX-2448"></a><a name="INDEX-2449"></a><a name="INDEX-2450"></a>
If <tt class="literal">@ISA</tt> contains more than one package name, the 
packages are all searched
in left-to-right order.  The search is depth-first, so if you have a
<tt class="literal">Mule</tt> class set up for inheritance this way:
<blockquote>
<pre class="programlisting">package Mule;
our @ISA = ("Horse", "Donkey");</pre>
</blockquote>

Perl looks for any methods missing from <tt class="literal">Mule</tt> first in <tt class="literal">Horse</tt> (and
any of its ancestors, like <tt class="literal">Critter</tt>) before going on to search
through <tt class="literal">Donkey</tt> and its ancestors.</p>

<p>If a missing method is found in a base class, Perl internally caches
that location in the current class for efficiency, so the next time
it has to find the method, it doesn't have to look as far. 
Changing <tt class="literal">@ISA</tt> or defining new methods invalidates the
cache and causes Perl to perform the lookup again.</p>

<p>When Perl searches for a method, it makes sure that you haven't
created a circular inheritance hierarchy.  This could happen if
two classes inherit from one another, even indirectly through
other classes.  Trying to be your own great-grandfather is too
paradoxical even for Perl, so the attempt raises an exception.
However, Perl does not consider it an error to inherit from more
than one class sharing a common ancestry, which is rather like cousins
marrying.  Your inheritance hierarchy just stops looking like a
tree and starts to look like a directed acyclic graph.  This doesn't
bother Perl--so long as the graph really is acyclic.</p>

<p>
<a name="INDEX-2451"></a><a name="INDEX-2452"></a>
When you set <tt class="literal">@ISA</tt>, the assignment normally happens at run time,
so unless you take precautions, code in <tt class="literal">BEGIN</tt>, <tt class="literal">CHECK</tt>, or
<tt class="literal">INIT</tt> blocks won't be able to use the inheritance hierarchy.  One
precaution (or convenience) is the <tt class="literal">use base</tt> pragma, which lets
you <tt class="literal">require</tt> classes and add them to <tt class="literal">@ISA</tt> at compile time.
Here's how you might use it:
<blockquote>
<pre class="programlisting">package Mule;
use base ("Horse", "Donkey");   # declare superclasses</pre>
</blockquote>

This is a shorthand for:
<blockquote>
<pre class="programlisting">package Mule;
BEGIN {
    our @ISA = ("Horse", "Donkey");
    require Horse;
    require Donkey;
}</pre>
</blockquote>

except that <tt class="literal">use base</tt> also takes into account any <tt class="literal">use fields</tt>
declarations.
<a name="INDEX-2453"></a>
</p>

<p>
<a name="INDEX-2454"></a>
Sometimes folks are surprised that including a class in <tt class="literal">@ISA</tt>
doesn't <tt class="literal">require</tt> the appropriate module for you.  That's because
Perl's class system is largely orthogonal to its module system.  One
file can hold many classes (since they're just packages), and one
package may be mentioned in many files.  But in the most common
situation, where one package and one class and one module and one file
all end up being pretty interchangeable if you squint enough, the
<tt class="literal">use base</tt> pragma offers a declarative syntax that establishes
inheritance, loads in module files, and accommodates any declared
base class fields. It's one of those convenient diagonals we keep mentioning.</p>

<p>See the descriptions of <tt class="literal">use base</tt> and <tt class="literal">use fields</tt> in 
<a href="ch31_01.htm">Chapter 31, "Pragmatic Modules"</a> for further details.</p>






<h3 class="sect2">12.5.2. Accessing Overridden Methods</h3>

<a name="INDEX-2455"></a><a name="INDEX-2456"></a><a name="INDEX-2457"></a><a name="INDEX-2458"></a><a name="INDEX-2459"></a><a name="INDEX-2460"></a><a name="INDEX-2461"></a>
<p>When a class defines a method, that subroutine overrides methods of the
same name in any base classes.  Imagine that you've a <tt class="literal">Mule</tt> object
(which is derived from class <tt class="literal">Horse</tt> and class <tt class="literal">Donkey</tt>), and you decide
to invoke your object's <tt class="literal">breed</tt> method.  Although the parent classes
have their own <tt class="literal">breed</tt> methods, the designer of the <tt class="literal">Mule</tt> class
overrode those by supplying the <tt class="literal">Mule</tt> class with its own <tt class="literal">breed</tt>
method.  That means the following cross is unlikely to be productive:
<blockquote>
<pre class="programlisting">$stallion = Horse-&gt;new(gender =&gt; "male");
$molly = Mule-&gt;new(gender =&gt; "female");
$colt = $molly-&gt;breed($stallion);</pre>
</blockquote>

Now suppose that through the miracle of genetic engineering, you
find some way around a mule's notorious sterility problem, so you
want to skip over the nonviable <tt class="literal">Mule::breed</tt> method.  You
<em class="emphasis">could</em> call your method as an ordinary subroutine, being sure to
pass the invocant explicitly:
<blockquote>
<pre class="programlisting">$colt = Horse::breed($molly, $stallion);</pre>
</blockquote>

However, this sidesteps inheritance, which is nearly always the wrong
thing to do.  It's perfectly imaginable that no
<tt class="literal">Horse::breed</tt> subroutine exists because both <tt class="literal">Horse</tt>s and <tt class="literal">Donkey</tt>s derive that behavior from a common parent class called <tt class="literal">Equine</tt>.  If,
on the other hand, you want to specify that Perl should <em class="emphasis">start</em>
searching for a method in a particular class, just use ordinary method
invocation but qualify the method name with the class:
<blockquote>
<pre class="programlisting">$colt = $molly-&gt;Horse::breed($stallion);</pre>
</blockquote>
<a name="INDEX-2462"></a>
Occasionally, you'll want a method in a derived class to act as a wrapper
around some method in a base class.  The method in the derived class
can itself invoke the method in the base class, adding its own actions
before or after that invocation.  You <em class="emphasis">could</em> use the notation just
demonstrated to specify at which class to start the search.  But in
most cases of overridden methods, you don't want to have to know or
specify which parent class's overridden method to execute.</p>

<p>
<a name="INDEX-2463"></a><a name="INDEX-2464"></a><a name="INDEX-2465"></a>
That's where the <tt class="literal">SUPER</tt> pseudoclass comes in handy.  It lets you
invoke an overridden base class method without having to specify which
class defined that method.<a href="#FOOTNOTE-6">[6]</a> The following subroutine looks in the current package's <tt class="literal">@ISA</tt> without
making you specify particular classes:
<blockquote>
<pre class="programlisting">package Mule;
our @ISA = qw(Horse Donkey);
sub kick {
    my $self = shift;
    print "The mule kicks!\n";
    $self-&gt;SUPER::kick(@_);
}</pre>
</blockquote>

The <tt class="literal">SUPER</tt> pseudopackage is meaningful only when used <em class="emphasis">inside</em>
a method.  Although the implementer of a class can employ <tt class="literal">SUPER</tt>
in their own code, someone who merely uses a class's objects cannot.</p>
<blockquote class="footnote">

<a name="FOOTNOTE-6"></a>
<p>[6] This is not to be confused with
the mechanism mentioned in <a href="ch11_01.htm">Chapter 11, "Modules"</a> for overriding Perl's built-in
functions, which aren't object methods and so aren't overridden by
inheritance.  You call overridden built-ins via the <tt class="literal">CORE</tt>
pseudopackage, not the <tt class="literal">SUPER</tt> pseudopackage.</p>

</blockquote>

<p>
<a name="INDEX-2466"></a><tt class="literal">SUPER</tt> does not always work as you might like when multiple
inheritance is involved.  As you'd expect, it follows <tt class="literal">@ISA</tt> just as
the regular inheritance mechanism does: in left-to-right, recursive,
depth-first order.  If both <tt class="literal">Horse</tt> and <tt class="literal">Donkey</tt> had a <tt class="literal">speak</tt>
method, and you preferred the <tt class="literal">Donkey</tt> method, you'd have to name
that parent class explicitly:
<blockquote>
<pre class="programlisting">sub speak {
    my $self = shift;
    print "The mule speaks!\n";
    $self-&gt;Donkey::speak(@_);
}</pre>
</blockquote>

More elaborate approaches to multiple inheritance situations can
be crafted using the <tt class="literal">UNIVERSAL::can</tt> method described in the next
section.   Or you can grab the <tt class="literal">Class::Multimethods</tt>
module from CPAN, which provides many elaborate solutions, including
finding the closest match instead of leftmost one.
<a name="INDEX-2467"></a>
</p>

<p>Every bit of code in Perl knows what its current package is, as
determined by the last <tt class="literal">package</tt> statement.  A <tt class="literal">SUPER</tt> method
consults the <tt class="literal">@ISA</tt> only of the package into which the call 
to <tt class="literal">SUPER</tt> was compiled.  It does not care about the class of the invocant, nor
about the package of the subroutine that was called.  This can cause
problems if you try to define methods in another class by merely
playing tricks with the method name:
<blockquote>
<pre class="programlisting">package Bird;
use Dragonfly;
sub Dragonfly::divebomb { shift-&gt;SUPER::divebomb(@_) }</pre>
</blockquote>
<a name="INDEX-2468"></a>
</p>

<p>Unfortunately, this invokes <tt class="literal">Bird</tt>'s superclass, not <tt class="literal">Dragonfly</tt>'s.
To do what you're trying to do, you need to explicitly switch into the
appropriate package for the compilation of <tt class="literal">SUPER</tt> as well:
<blockquote>
<pre class="programlisting">package Bird;
use Dragonfly;
{
    package Dragonfly;
    sub divebomb { shift-&gt;SUPER::divebomb(@_) }
}</pre>
</blockquote>
<a name="INDEX-2469"></a>
As this example illustrates, you never need to edit a module file just to add
methods to an existing class.  Since a class is just a package, and a
method just a subroutine, all you have to do is define a function in
that package as we've done here, and the class suddenly has a new
method.  No inheritance required.  Only the package matters, and since
packages are global, any package can be accessed from anywhere in the
program.  (Did we mention we're going to install a jacuzzi in your living
room next week?)</p>





<a name="ch12-sect-uni"></a>
<h3 class="sect2">12.5.3. UNIVERSAL: The Ultimate Ancestor Class</h3>

<p>
<a name="INDEX-2470"></a><a name="INDEX-2471"></a>
If no method definition with the right name is found after searching the invocant's class
and all its ancestor classes recursively, one more check for a method
of that name is made in the special predefined class called
<tt class="literal">UNIVERSAL</tt>.  This package never appears in an <tt class="literal">@ISA</tt>, but is always
consulted when an <tt class="literal">@ISA</tt> check fails.  You can think of <tt class="literal">UNIVERSAL</tt>
as the ultimate ancestor from which all classes implicitly derive.</p>

<p>The following predefined methods are available in class
<tt class="literal">UNIVERSAL</tt>, and thus in all classes.  These all work
regardless of whether they are invoked as class methods or object
methods.
<a name="INDEX-2472"></a>
</p>

<dl>
<dt>
<b><em class="replaceable">INVOCANT</em><tt class="literal">-&gt;isa(</tt><em class="replaceable">CLASS</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-2473"></a>
The <tt class="literal">isa</tt> method returns true if
<em class="replaceable">INVOCANT</em>'s class is
<em class="replaceable">CLASS</em> or any class inheriting from
<em class="replaceable">CLASS</em>.  Instead of a package name,
<em class="replaceable">CLASS</em> may also be one of the built-in
types, such as "<tt class="literal">HASH</tt>" or
"<tt class="literal">ARRAY</tt>".  (Checking for an exact type does not bode
well for encapsulation or polymorphism, though.  You should be relying
on method dispatch to give you the right method.)
<blockquote>
<pre class="programlisting">use FileHandle;
if (FileHandle-&gt;isa("Exporter")) {
    print "FileHandle is an Exporter.\n";
}

$fh = FileHandle-&gt;new();
if ($fh-&gt;isa("IO::Handle")) {
    print "\$fh is some sort of IOish object.\n";
}
if ($fh-&gt;isa("GLOB")) {
    print "\$fh is really a GLOB reference.\n";
}</pre>
</blockquote>
</p>
</dd>


<dt>
<b><em class="replaceable">INVOCANT</em><tt class="literal">-&gt;can(</tt><em class="replaceable">METHOD</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-2474"></a>
The <tt class="literal">can</tt> method returns a reference to the
subroutine that would be called if <em class="replaceable">METHOD</em>
were applied to <em class="replaceable">INVOCANT</em>.  If no such
subroutine is found, <tt class="literal">can</tt> returns
<tt class="literal">undef</tt>.
<blockquote>
<pre class="programlisting">if ($invocant-&gt;can("copy")) {
    print "Our invocant can copy.\n";
}</pre>
</blockquote>

This could be used to conditionally invoke a method only if one exists:
<blockquote>
<pre class="programlisting">$obj-&gt;snarl if $obj-&gt;can("snarl");</pre>
</blockquote>
<a name="INDEX-2475"></a><a name="INDEX-2476"></a><a name="INDEX-2477"></a>
Under multiple inheritance, this allows a method to invoke all
overridden base class methods, not just the leftmost one:
<blockquote>
<pre class="programlisting">sub snarl {
    my $self = shift;
    print "Snarling: @_\n";
    my %seen;
    for my $parent (@ISA) {
        if (my $code = $parent-&gt;can("snarl")) {
            $self-&gt;$code(@_) unless $seen{$code}++;
        }
    }
}</pre>
</blockquote>

We use the <tt class="literal">%seen</tt> hash to keep track of which subroutines we've
already called, so we can avoid calling the same subroutine more than
once.  This could happen if several parent classes shared a common
ancestor.</p>

<p>Methods that would trigger an <tt class="literal">AUTOLOAD</tt> (described in the next section) will
not be accurately reported unless the package has declared (but not
defined) the subroutines it wishes to have autoloaded.</p>
</dd>


<dt>
<b><em class="replaceable">INVOCANT</em><tt class="literal">-&gt;VERSION(</tt><em class="replaceable">NEED</em><tt class="literal">)</tt></b>
</dt>
<dd>
<p>
<a name="INDEX-2478"></a><a name="INDEX-2479"></a>
The <tt class="literal">VERSION</tt> method returns the version number of
<em class="replaceable">INVOCANT</em>'s class, as stored in the
package's <tt class="literal">$VERSION</tt> variable.  If the
<em class="replaceable">NEED</em> argument is provided, it verifies that
the current version isn't less than <em class="replaceable">NEED</em>
and raises an exception if it is.  This is the method that
<tt class="literal">use</tt> invokes to determine whether a module is
sufficiently recent.
<blockquote>
<pre class="programlisting">use Thread 1.0;   # calls Thread-&gt;VERSION(1.0)
print "Running version ", Thread-&gt;VERSION, " of Thread.\n";</pre>
</blockquote>

You may supply your own <tt class="literal">VERSION</tt> method to override the method in
<tt class="literal">UNIVERSAL</tt>.  However, this will cause any classes derived from your class to use the overridden method, too. If you don't want that to happen, you
should design your method to delegate other classes' version requests
back up to <tt class="literal">UNIVERSAL</tt>.</p>
</dd>

</dl>

<p>The methods in <tt class="literal">UNIVERSAL</tt> are built-in Perl subroutines, which you
may call if you fully qualify them and pass two arguments, as in
<tt class="literal">UNIVERSAL::isa($formobj, "HASH")</tt>.  (This is not recommended,
though, because <tt class="literal">can</tt> usually has the answer you're really looking for.)</p>

<p>
<a name="INDEX-2480"></a><a name="INDEX-2481"></a>
You're free to add your own methods to class
<tt class="literal">UNIVERSAL</tt>.  (You should be careful, of course; you
could really mess someone up who is expecting <em class="emphasis">not</em>
to find the method name you're defining, perhaps so that they can
autoload it from somewhere else.)  Here we create a
<tt class="literal">copy</tt> method that objects of all classes can use if
they've not defined their own.  (We fail spectacularly if invoked on a
class instead of an object.)
<blockquote>
<pre class="programlisting">use Data::Dumper;   
use Carp;
sub UNIVERSAL::copy {
    my $self = shift;
    if (ref $self) {
        return eval Dumper($self);  # no CODE refs
    } else {
        confess "UNIVERSAL::copy can't copy class $self";
    }
}</pre>
</blockquote>
 This <tt class="literal">Data::Dumper</tt> strategy doesn't
work if the object contains any references to subroutines, because
they cannot be properly reproduced.  Even if the source were
available, the lexical bindings would be lost.</p>

<a name="INDEX-2482"></a><a name="INDEX-2483"></a>






<h3 class="sect2">12.5.4. Method Autoloading</h3>

<a name="INDEX-2484"></a><a name="INDEX-2485"></a><a name="INDEX-2486"></a><a name="INDEX-2487"></a><a name="INDEX-2488"></a>
<p>
<a name="INDEX-2489"></a>
Normally, when you call an undefined subroutine in a package that
defines an <tt class="literal">AUTOLOAD</tt> subroutine, the
<tt class="literal">AUTOLOAD</tt> subroutine is called in lieu of raising an
exception (see the section <a href="ch10_02.htm#ch10-sect-auto">Section 12.2, "Autoloading"</a> in <a href="ch10_01.htm">Chapter 10, "Packages"</a>).  With methods, this works a little
differently.  If the regular method search (through the class, its
ancestors, and finally <tt class="literal">UNIVERSAL</tt>) fails to find a
match, the same sequence is run again, this time looking for an
<tt class="literal">AUTOLOAD</tt> subroutine.  If found, this subroutine is
called as a method, with the package's <tt class="literal">$AUTOLOAD</tt>
variable set to the fully qualified name of the subroutine on whose
behalf <tt class="literal">AUTOLOAD</tt> was called.</p>

<p>You need to be a bit cautious when autoloading methods.  First, the
<tt class="literal">AUTOLOAD</tt> subroutine should return immediately if
it's being called on behalf of a method named
<tt class="literal">DESTROY</tt>, unless your goal was to simulate
<tt class="literal">DESTROY</tt>, which has a special meaning to Perl
described in the section <a href="ch12_06.htm">Section 12.6, "Instance Destructors"</a> later in this chapter.
<blockquote>
<pre class="programlisting">sub AUTOLOAD {
    return if our $AUTOLOAD =~ /::DESTROY$/;
    ...
}</pre>
</blockquote>
Second, if the class is providing an <tt class="literal">AUTOLOAD</tt>
safety net, you won't be able to use <tt class="literal">UNIVERAL::can</tt>
on a method name to check whether it's safe to invoke. You have to
check for <tt class="literal">AUTOLOAD</tt> separately:
<blockquote>
<pre class="programlisting">if ($obj-&gt;can("methname") || $obj-&gt;can("AUTOLOAD")) {
    $obj-&gt;methname();
}</pre>
</blockquote>
Finally, under multiple inheritance, if a class inherits from two or
more classes each of which has an <tt class="literal">AUTOLOAD</tt>, only
the leftmost will ever be triggered, since Perl stops as soon as it
finds the first <tt class="literal">AUTOLOAD</tt>.
<a name="INDEX-2490"></a>
</p>

<p>
<a name="INDEX-2491"></a><a name="INDEX-2492"></a>
The last two quirks are easily circumvented by declaring the
subroutines in the package whose <tt class="literal">AUTOLOAD</tt> is
supposed to manage those methods.  You can do this either with
individual declarations:
<blockquote>
<pre class="programlisting">package Goblin;
sub kick;
sub bite;
sub scratch;</pre>
</blockquote>
<a name="INDEX-2493"></a>
or with the <tt class="literal">use subs</tt> pragma, which is more convenient if you have
many methods to declare:
<blockquote>
<pre class="programlisting">package Goblin;
use subs qw(kick bite scratch);</pre>
</blockquote>

Even though you've only declared these subroutines and not defined them, this is enough for the system to think they're real.  They
show up in a <tt class="literal">UNIVERAL::can</tt> check, and, more importantly, they show up
in step 2 of the search for a method, which will never progress to step 3,
let alone step 4.</p>

<p>"But, but," you exclaim, "they invoke <tt class="literal">AUTOLOAD</tt>, don't they?"  Well,
yes, they do eventually, but the mechanism is different.  Having found
the method stub via step 2, Perl tries to call it.  When it is
discovered that the method isn't all it was cracked up to be, the
<tt class="literal">AUTOLOAD</tt> method search kicks in again, but this time, it starts its
search in the class containing the stub, which restricts the method
search to that class and its ancestors (and <tt class="literal">UNIVERSAL</tt>).  That's how Perl finds the correct <tt class="literal">AUTOLOAD</tt> to run and knows 
to ignore <tt class="literal">AUTOLOAD</tt>s from
the wrong part of the original inheritance tree.</p>





<a name="ch12-sect-pm"></a>
<h3 class="sect2">12.5.5. Private Methods</h3>

<p>
<a name="INDEX-2494"></a><a name="INDEX-2495"></a><a name="INDEX-2496"></a>
There is one way to invoke a method so that Perl ignores inheritance
altogether.  If instead of a literal method name, you specify a simple
scalar variable containing a reference to a subroutine, then the
subroutine is called immediately.  In the description of 
<tt class="literal">UNIVERSAL-&gt;can</tt> in the previous section, the last example invokes all overridden
methods using the subroutine's reference, not its name.</p>

<p>
<a name="INDEX-2497"></a><a name="INDEX-2498"></a>
An intriguing aspect of this behavior is that it can be used to
implement private method calls.  If you put your class in a module,
you can make use of the file's lexical scope for privacy.  First,
store an anonymous subroutine in a file-scoped lexical:
<blockquote>
<pre class="programlisting"># declare private method
my $secret_door = sub {
    my $self = shift;
    ...
};</pre>
</blockquote>

Later on in the file, you can use that variable as though it held a
method name.  The closure will be called directly, without regard to
inheritance.  As with any other method, the invocant is passed as an
extra argument.
<blockquote>
<pre class="programlisting">sub knock {
    my $self = shift;
    if ($self-&gt;{knocked}++ &gt; 5) {
        $self-&gt;$secret_door();
    }
}</pre>
</blockquote>

This enables the file's own subroutines (the class methods) to invoke
a method that code outside that lexical scope cannot access.</p>

<a name="INDEX-2499"></a><a name="INDEX-2500"></a><a name="INDEX-2501"></a>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch12_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch12_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">12.4. Object Construction</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">12.6. Instance Destructors</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
