<html>
<head>
<title>Molecules (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Molecules">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch02_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">2.2. Molecules</h2>

<p>
<a name="INDEX-407"></a>
Perl is a <em class="emphasis">free-form</em> language, but that doesn't mean that Perl is
totally free of form.   As computer folks usually use the term, a
free-form language is one in which you can put spaces, tabs, and
newlines anywhere you like--except where you can't.</p>

<p>
<a name="INDEX-408"></a><a name="INDEX-409"></a> One obvious
place you can't put a whitespace character is in the middle of a
token.  A <em class="emphasis">token</em> is what we call a sequence of
characters with a unit of meaning, much like a simple word in natural
language.  But unlike the typical word, a token might contain other
characters besides letters, just as long as they hang together to form a
unit of meaning.  (In that sense, they're more like molecules, which
don't have to be composed of only one particular kind of atom.)  For
example, numbers and mathematical operators are considered tokens.  An
<em class="emphasis">identifier</em> is a token that starts with a letter
or underscore and contains only letters, digits, and underscores.  A
token may not contain whitespace characters because this would split
the token into two tokens, just as a space in an English word turns it
into two words.<a href="#FOOTNOTE-2">[2]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-2"></a>
<p>[2] The astute reader will point out that
literal strings may contain whitespace characters.  But strings can
get away with it only because they have quotes on both ends to keep
the spaces from leaking out.</p>

</blockquote>

<p>
<a name="INDEX-410"></a><a name="INDEX-411"></a><a name="INDEX-412"></a><a name="INDEX-413"></a><a name="INDEX-414"></a>
Although whitespace is allowed between any two tokens, whitespace is
<em class="emphasis">required</em> only between tokens that would otherwise be confused as a
single token.  All whitespace is equivalent for this purpose.  Newlines
are distinguished from spaces and tabs only within quoted strings,
formats, and certain line-oriented forms of quoting.  Specifically,
newlines do not terminate statements as they do in certain other
languages (such as FORTRAN or Python).  Statements in Perl are terminated
with semicolons, just as they are in C and its various derivatives.</p>

<p>
<a name="INDEX-415"></a><a name="INDEX-416"></a><a name="INDEX-417"></a><a name="INDEX-418"></a><a name="INDEX-419"></a>
Unicode whitespace characters are allowed in a Unicode Perl program,
but you need to be careful.  If you use the special Unicode paragraph
and line separators, be aware that Perl may count line numbers
differently than your text editor does, so error messages may be more
difficult to interpret.  It's best to stick with good old-fashioned
newlines.</p>

<p>
<a name="INDEX-420"></a>
Tokens are recognized greedily; if at a particular point the Perl
parser has a choice between recognizing a short token or a long token,
it will choose the long one.  If you meant it to be two tokens, just
insert some whitespace between the tokens.  (We tend to put extra
space around most operators anyway, just for readability.)</p>

<p>
<a name="INDEX-421"></a><a name="INDEX-422"></a> Comments are indicated by the
<tt class="literal">#</tt> character and extend from there through the end
of the line.  A comment counts as whitespace for separating tokens.
The Perl language attaches no special meaning to anything you might
put into a comment.<a href="#FOOTNOTE-3">[3]</a>
</p>
<blockquote class="footnote">

<a name="FOOTNOTE-3"></a>
<p>[3] Actually, that's a small fib.  The
Perl parser does look for command-line switches on an initial
<tt class="literal">#!</tt> line (see
<a href="ch19_01.htm">Chapter 19, "The Command-Line Interface"</a>).  It can also interpret
the line number directives that various preprocessors produce (see the
section <a href="ch24_05.htm#ch24-sect-gen">Section 2.5.2, "Generating Perl in Other Languages"</a> in <a href="ch24_01.htm">Chapter 24, "Common Practices"</a>).</p>

</blockquote>

<p>
<a name="INDEX-423"></a><a name="INDEX-424"></a>
One other oddity is that if a line begins with <tt class="literal">=</tt>
anywhere a statement would be legal,
Perl ignores everything from that line down to the next line that
begins with <tt class="literal">=cut</tt>.  The ignored text is assumed to
be <em class="emphasis">pod</em>, or "plain old documentation".  The Perl
distribution has programs that will extract pod commentary from Perl
modules and turn it into flat text, manpages, [LaTeX], HTML, or (someday
soon) XML
documents.  In a complementary fashion, the Perl parser extracts the
Perl code from Perl modules and ignores the pod.  So you may consider
this an alternate, multiline form of commenting.  You may also
consider it completely nuts, but Perl modules documented this way
never lose track of their documentation.  See <a href="ch26_01.htm">Chapter 26, "Plain Old Documentation"</a>, for details on pod,
including a description of how to effect multiline comments in Perl.</p>

<p>But don't look down on the normal comment character.  There's something
comforting about the visual effect of a nice row of <tt class="literal">#</tt> characters
down the left side of a multiline comment.  It immediately tells your
eyes: "This is not code."  You'll note that even in languages with a
multiline quoting mechanisms like C, people often put a row of <tt class="literal">*</tt>
characters down the left side of their comments anyway.  Appearances are
often more important than they appear.</p>

<p>
<a name="INDEX-425"></a>
In Perl, just as in chemistry and in language, you can build larger
and larger structures out of the smaller ones.  We already mentioned
the <em class="emphasis">statement</em>; it's just a sequence of tokens
that make up a command, that is, a sentence in the imperative mood.
You can combine a sequence of statements into a
<em class="emphasis">block</em> that is delimited by braces (also known
affectionately as "curlies" by people who confuse braces with
suspenders.)  Blocks can in turn be combined into larger blocks.  Some
blocks function as <em class="emphasis">subroutines</em>, which can be
combined into <em class="emphasis">modules</em>, which can be combined into
<em class="emphasis">programs</em>.  But we're getting ahead of
ourselves--those are subjects for coming chapters.  Let's build some
more tokens out of characters.</p>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">2.1. Atoms</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">2.3. Built-in Data Types</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
