<html>
<head>
<title>Capturing and Clustering (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Capturing and Clustering">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="ch05_01.htm"></a></td><td align="right" valign="top" width="228"><a href="ch05_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h2 class="sect1">5.7. Capturing and Clustering</h2>

<p>
<a name="INDEX-1641"></a>
Patterns allow you to group portions of your pattern together into
subpatterns and to remember the strings matched by those subpatterns.  We
call the first behavior <em class="emphasis">clustering</em> and the second one <em class="emphasis">capturing</em>.</p>


<h3 class="sect2">5.7.1. Capturing</h3>

<a name="INDEX-1642"></a><a name="INDEX-1643"></a><a name="INDEX-1644"></a>
<p>
<a name="INDEX-1645"></a>
To capture a substring for later use, put parentheses around the
subpattern that matches it.  The first pair of parentheses stores its
substring in <tt class="literal">$1</tt>, the second pair in <tt class="literal">$2</tt>, and so on.  You may use
as many parentheses as you like; Perl just keeps defining more numbered
variables for you to represent these captured strings.</p>

<p>Some examples:
<blockquote>
<pre class="programlisting">/(\d)(\d)/  # Match two digits, capturing them into $1 and $2
/(\d+)/     # Match one or more digits, capturing them all into $1
/(\d)+/     # Match a digit one or more times, capturing the last into $1</pre>
</blockquote>

Note the difference between the second and third patterns.  The second
form is usually what you want.  The third form does <em class="emphasis">not</em> create multiple
variables for multiple digits.  Parentheses are numbered when the pattern
is compiled, not when it is matched.</p>

<p>
<a name="INDEX-1646"></a>
Captured strings are often called <em class="emphasis">backreferences</em>
because they refer back to parts of the captured text.  There are
actually two ways to get at these backreferences.  The numbered
variables you've seen are how you get at backreferences outside of a
pattern, but inside the pattern, that doesn't work.  You have to use
<tt class="literal">\1</tt>, <tt class="literal">\2</tt>, etc.<a href="#FOOTNOTE-9">[9]</a> So to find doubled words like
"<tt class="literal">the the</tt>" or "<tt class="literal">had had</tt>", you
might use this pattern:
<blockquote>
<pre class="programlisting">/\b(\w+) \1\b/i</pre>
</blockquote>

But most often, you'll be using the <tt class="literal">$1</tt> form, because you'll usually
apply a pattern and then do something with the substrings.  Suppose you
have some text (a mail header) that looks like this:
<blockquote>
<pre class="programlisting">From: gnat@perl.com
To: camelot@oreilly.com
Date: Mon, 17 Jul 2000 09:00:00 -1000
Subject: Eye of the needle</pre>
</blockquote>

and you want to construct a hash that maps the text before each colon
to the text afterward.  If you were looping through this text line by
line (say, because you were reading it from a file) you could do that
as follows:
<blockquote>
<pre class="programlisting">while (&lt;&gt;) {
    /^(.*?): (.*)$/;    # Pre-colon text into $1, post-colon into $2
    $fields{$1} = $2;
}</pre>
</blockquote>

Like <tt class="literal">$`</tt>, <tt class="literal">$&amp;</tt>, and
<tt class="literal">$'</tt>, these numbered variables are dynamically scoped
through the end of the enclosing block or <tt class="literal">eval</tt>
string, or to the next successful pattern match, whichever comes
first.  You can use them in the righthand side (the replacement part)
of a substitute, too:
<blockquote>
<pre class="programlisting">s/^(\S+) (\S+)/$2 $1/;  # Swap first two words</pre>
</blockquote>
<a name="INDEX-1647"></a>
Groupings can nest, and when they do, the groupings are counted by the
location of the left parenthesis.  So given the string "Primula
Brandybuck", the pattern:</p>
<blockquote class="footnote">

<a name="FOOTNOTE-9"></a>
<p>[9] You
can't use <tt class="literal">$1</tt> for a backreference within the pattern
because that would already have been interpolated as an ordinary
variable back when the regex was compiled.  So we use the traditional
<tt class="literal">\1</tt> backreference notation inside patterns.  For
two- and three-digit backreference numbers, there is some ambiguity
with octal character notation, but that is neatly solved by
considering how many captured patterns are available.  For instance,
if Perl sees a <tt class="literal">\11</tt> metasymbol, it's equivalent to
<tt class="literal">$11</tt> only if there are at least 11 substrings
captured earlier in the pattern. Otherwise, it's equivalent to
<tt class="literal">\011</tt>, that is, a tab
character.</p>

</blockquote>

<blockquote>
<pre class="programlisting">/^((\w+) (\w+))$/</pre>
</blockquote>

<p>would capture "<tt class="literal">Primula Brandybuck</tt>" into <tt class="literal">$1</tt>, "<tt class="literal">Primula</tt>" into <tt class="literal">$2</tt>,
and "<tt class="literal">Brandybuck</tt>" into <tt class="literal">$3</tt>.  This is depicted in <a href="ch05_07.htm">Figure 5-1</a>.</p>

<a name="perl3-backrefs"></a>
<div class="figure">
</div>
<p>

<img src="figs/perl3_0501.gif">

<br>


<h4 class="objtitle">Figure 5.1. Creating backreferences with parentheses</h4>


<p>
<a name="INDEX-1648"></a><a name="INDEX-1649"></a>
Patterns with captures are often used in list context to populate a list of
values, since the pattern is smart enough to return the captured substrings
as a list:
<blockquote>
<pre class="programlisting">($first, $last)        =  /^(\w+) (\w+)$/;
($full, $first, $last) =  /^((\w+) (\w+))$/;</pre>
</blockquote>

With the <tt class="literal">/g</tt> modifier, a pattern can return multiple substrings from multiple
matches, all in one list.  Suppose you had the mail header we saw earlier
all in one string (in <tt class="literal">$_</tt>, say).  You could do the same thing as our
line-by-line loop, but with one statement:
<blockquote>
<pre class="programlisting">%fields = /^(.*?): (.*)$/gm;</pre>
</blockquote>

The pattern matches four times, and each time it matches, it finds two
substrings.  The <tt class="literal">/gm</tt> match returns all of these as a flat list of eight
strings, which the list assignment to <tt class="literal">%fields</tt> will conveniently
interpret as four key/value pairs, thus restoring harmony to the universe.</p>

<p>
<a name="INDEX-1650"></a><a name="INDEX-1651"></a><a name="INDEX-1652"></a><a name="INDEX-1653"></a>
Several other special variables deal with text captured in pattern
matches.  <tt class="literal">$&amp;</tt> contains the entire matched string, <tt class="literal">$`</tt> everything
to the left of the match, <tt class="literal">$'</tt> everything to the right.  <tt class="literal">$+</tt>
contains the contents of the last backreference.
<blockquote>
<pre class="programlisting">$_ = "Speak, &lt;EM&gt;friend&lt;/EM&gt;, and enter.";
m[ (&lt;.*?&gt;) (.*?) (&lt;/.*?&gt;) ]x;     # A tag, then chars, then an end tag
print "prematch: $`\n";           # Speak,
print "match: $&amp;\n";              # &lt;EM&gt;friend&lt;/EM&gt;
print "postmatch: $'\n";          # , and enter.
print "lastmatch: $+\n";          # &lt;/EM&gt;</pre>
</blockquote>

For more explanation of these magical Elvish variables (and for a way
to write them in English), see
<a href="ch28_01.htm">Chapter 28, "Special Names"</a>.</p>

<p>
<a name="INDEX-1654"></a><a name="INDEX-1655"></a>
The <tt class="literal">@-</tt> (<tt class="literal">@LAST_MATCH_START</tt>) array holds the offsets of the
beginnings of any submatches, and <tt class="literal">@+</tt> (<tt class="literal">@LAST_MATCH_END</tt>) holds the
offsets of the ends:
<blockquote>
<pre class="programlisting">#!/usr/bin/perl
$alphabet = "abcdefghijklmnopqrstuvwxyz";
$alphabet =~ /(hi).*(stu)/;

print "The entire match began at $-[0] and ended at $+[0]\n";
print "The first  match began at $-[1] and ended at $+[1]\n";
print "The second match began at $-[2] and ended at $+[2]\n";</pre>
</blockquote>
</p>

<p>If you really want to match a literal parenthesis character instead of having
it interpreted as a metacharacter, backslash it:
<blockquote>
<pre class="programlisting">/\(e.g., .*?\)/</pre>
</blockquote>

This matches a parenthesized example (e.g., this statement).  But since dot
is a wildcard, this also matches any parenthetical statement with the
first letter <tt class="literal">e</tt> and third letter <tt class="literal">g</tt> (ergo, this statement too).</p>

<a name="INDEX-1656"></a><a name="INDEX-1657"></a>






<h3 class="sect2">5.7.2. Clustering</h3>

<a name="INDEX-1658"></a><a name="INDEX-1659"></a>
<p>
<a name="INDEX-1660"></a><a name="INDEX-1661"></a>
Bare parentheses both cluster and capture.  But sometimes you don't
want that.  Sometimes you just want to group portions of the pattern
without creating a backreference.  You can use an extended form of
parentheses to suppress capturing: the <tt class="literal">(?:</tt><em class="replaceable">PATTERN</em><tt class="literal">)</tt> notation
will <em class="emphasis">cluster</em> without capturing.</p>

<p>
<a name="INDEX-1662"></a>
There are at least three reasons you might want to cluster without
capturing:</p>

<ol>
<li>
<p>To quantify something.</p>
</li>
<li>
<p>
<a name="INDEX-1663"></a>
To limit the scope of interior alternation; for example,
<tt class="literal">/^cat|cow|dog$/</tt> needs to be <tt class="literal">/^(?:cat|cow|dog)$/</tt> so that the
cat doesn't run away with the <tt class="literal">^</tt>.</p>
</li>
<li>
<p>To limit the scope of an embedded pattern modifier to a particular
subpattern, such as in <tt class="literal">/foo(?-i:Case_Matters)bar/i</tt>.
(See the next section, <a href="ch05_07.htm">Section 5.7.3, "Cloistered Pattern Modifiers"</a>)</p>
</li>
</ol>
<p>In addition, it's more efficient to suppress the capture of something
you're not going to use.  On the minus side, the notation is a little
noisier, visually speaking.</p>

<p>
<a name="INDEX-1664"></a>
In a pattern,
a left parenthesis immediately followed by a question mark denotes a
regex <em class="emphasis">extension</em>.  The current regular expression
bestiary is relatively fixed--we don't dare create a new
metacharacter, for fear of breaking old Perl programs.  Instead, the
extension syntax is used to add new features to the bestiary.</p>

<p>In the remainder of the chapter, we'll see many
more regex extensions, all of which cluster without capturing, as well
as doing something else.  The
<tt class="literal">(?:</tt><em class="replaceable">PATTERN</em><tt class="literal">)</tt>
extension is just special in that it does nothing else.  So if you
say:
<blockquote>
<pre class="programlisting">@fields = split(/\b(?:a|b|c)\b/)</pre>
</blockquote>
it's like:
<blockquote>
<pre class="programlisting">@fields = split(/\b(a|b|c)\b/)</pre>
</blockquote>
<a name="INDEX-1665"></a>
but doesn't spit out extra fields.  (The <tt class="literal">split</tt> operator is a bit
like <tt class="literal">m//g</tt> in that it will emit extra fields for all the captured
substrings within the pattern.  Ordinarily, <tt class="literal">split</tt> only returns what it
<em class="emphasis">didn't</em> match.  For more on <tt class="literal">split</tt> see <a href="ch29_01.htm">Chapter 29, "Functions"</a>.)</p>





<a name="ch05-sect-cloist"></a>
<h3 class="sect2">5.7.3. Cloistered Pattern Modifiers</h3>

<p>
<a name="INDEX-1666"></a><a name="INDEX-1667"></a><a name="INDEX-1668"></a>
You may <em class="emphasis">cloister</em> the <tt class="literal">/i</tt>, <tt class="literal">/m</tt>, <tt class="literal">/s</tt>, and <tt class="literal">/x</tt> modifiers
within a portion of your pattern by inserting them (without the
slash) between the <tt class="literal">?</tt> and <tt class="literal">:</tt> of the clustering notation.  If you say:
<blockquote>
<pre class="programlisting">/Harry (?i:s) Truman/</pre>
</blockquote>

it matches both "<tt class="literal">Harry S Truman</tt>" and
"<tt class="literal">Harry s Truman</tt>", whereas:
<blockquote>
<pre class="programlisting">/Harry (?x: [A-Z] \.? \s )?Truman/</pre>
</blockquote>

matches both "<tt class="literal">Harry S Truman</tt>" and "<tt class="literal">Harry
S. Truman</tt>", as well as "<tt class="literal">Harry Truman</tt>", and:
<blockquote>
<pre class="programlisting">/Harry (?ix: [A-Z] \.? \s )?Truman/</pre>
</blockquote>

matches all five, by combining the <tt class="literal">/i</tt> and
<tt class="literal">/x</tt> modifiers within the cloister.</p>

<p>
<a name="INDEX-1669"></a>
You can also subtract modifiers from a cloister with a minus sign:
<blockquote>
<pre class="programlisting">/Harry (?x-i: [A-Z] \.? \s )?Truman/i</pre>
</blockquote>

This matches any capitalization of the name--but if the middle initial
is provided, it must be capitalized, since the <tt class="literal">/i</tt>
applied to the overall pattern is suspended inside the cloister.</p>

<p>By omitting the colon and <em class="replaceable">PATTERN</em>, you can export modifier settings
to an outer cluster, turning it into a cloister.  That is, you can
selectively turn modifiers on and off for the cluster one level outside
the modifiers' parentheses, like so:
<blockquote>
<pre class="programlisting">/(?i)foo/            # Equivalent to /foo/i
/foo((?-i)bar)/i     # "bar" must be lower case
/foo((?x-i) bar)/    # Enables /x and disables /i for "bar"</pre>
</blockquote>

Note that the second and third examples create backreferences.
If that wasn't what you wanted, then you should have been using
<tt class="literal">(?-i:bar)</tt> and <tt class="literal">(?x-i: bar)</tt>, respectively.</p>

<p>Setting modifiers on a portion of your pattern is particularly useful
when you want "<tt class="literal">.</tt>" to match newlines in part of your pattern but
not in the rest of it.  Setting <tt class="literal">/s</tt> on the whole pattern doesn't help
you there.</p>



<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch05_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch05_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">5.6. Positions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">5.8. Alternation</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
