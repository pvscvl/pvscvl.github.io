<html>
<head>
<title>Unary and Binary Operators (Programming Perl)</title>

<!-- STYLESHEET -->

<link rel="stylesheet" type="text/css" href="../style/style1.css">

<!-- METADATA -->



<!--Dublin Core Metadata-->

<meta name="DC.Creator" content="">
<meta name="DC.Date" content="">
<meta name="DC.Format" content="text/xml" scheme="MIME">
<meta name="DC.Generator" content="XSLT stylesheet, xt by James Clark">
<meta name="DC.Identifier" content="">
<meta name="DC.Language" content="en-US">
<meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="DC.Source" content="" scheme="ISBN">
<meta name="DC.Subject.Keyword" content="">
<meta name="DC.Title" content="Unary and Binary Operators">
<meta name="DC.Type" content="Text.Monograph">

</head>

<body>

<!-- START OF BODY -->



<!-- TOP BANNER -->

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home">
<map name="banner-map"><AREA SHAPE="rect" coords="1,-2,616,66" HREF="index.htm" ALT="Programming Perl"><AREA SHAPE="rect" coords="629,-11,726,25" HREF="jobjects/fsearch.htm" ALT="Search this book">
</map>

<!-- TOP NAV BAR -->

<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="part2.htm"></a></td><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
</table>
</div>



<h1 class="chapter">Chapter 3.  Unary and Binary Operators</h1>
<div class="htmltoc">
<h4 class="tochead">Contents:</h4>
  <p> <a href="#INDEX-795">Terms and List Operators (Leftward)</a> <br>
<a href="ch03_02.htm">The Arrow Operator</a>
<br>
<a href="ch03_03.htm">Autoincrement and Autodecrement</a>
<br>
<a href="ch03_04.htm">Exponentiation</a>
<br>
<a href="ch03_05.htm">Ideographic Unary Operators</a>
<br>
<a href="ch03_06.htm">Binding Operators</a>
<br>
<a href="ch03_07.htm">Multiplicative Operators</a>
<br>
<a href="ch03_08.htm">Additive Operators</a>
<br>
<a href="ch03_09.htm">Shift Operators</a>
<br>
<a href="ch03_10.htm">Named Unary and File Test Operators</a>
<br>
<a href="ch03_11.htm">Relational Operators</a>
<br>
<a href="ch03_12.htm">Equality Operators</a>
<br>
<a href="ch03_13.htm">Bitwise Operators</a>
<br>
<a href="ch03_14.htm">C-Style Logical (Short-Circuit) Operators</a>
<br>
<a href="ch03_15.htm">Range Operator</a>
<br>
<a href="ch03_16.htm">Conditional Operator</a>
<br>
<a href="ch03_17.htm">Assignment Operators</a>
<br>
<a href="ch03_18.htm">Comma Operators</a>
<br>
<a href="ch03_19.htm">List Operators (Rightward)</a>
<br>
<a href="ch03_20.htm">Logical and, or, not, and xor</a>
<br>
<a href="ch03_21.htm">C Operators Missing from Perl</a>
<br>
</p>
</div>

<a name="INDEX-767"></a><a name="INDEX-768"></a><a name="INDEX-769"></a><a name="INDEX-770"></a>
<p>
<a name="INDEX-771"></a><a name="INDEX-772"></a><a name="INDEX-773"></a>
In the last chapter, we talked about the various kinds of
terms you might use in an expression, but to be honest, isolated terms
are a bit boring.  Many terms are party animals.  They like to have
relationships with each other.  The typical young term feels strong
urges to identify with and influence other terms in various ways, but
there are many different kinds of social interaction and many
different levels of commitment.  In Perl, these relationships are
expressed using operators.</p>

<p>Sociology has to be good for something.</p>

<p>
<a name="INDEX-774"></a><a name="INDEX-775"></a>
From a mathematical perspective, operators are just ordinary functions
with special syntax.  From a linguistic perspective, operators are just
irregular verbs.  But as any linguist will tell you, the irregular
verbs in a language tend to be the ones you use most often.  And that's
important from an information theory perspective because the irregular
verbs tend to be shorter and more efficient in both production and
recognition.</p>

<p>In practical terms, operators are handy.</p>

<p>
<a name="INDEX-776"></a>
Operators come in various flavors, depending on their
<em class="emphasis">arity</em> (how many operands they take), their
<em class="emphasis">precedence</em> (how hard they try to take those
operands away from surrounding operators), and their
<em class="emphasis">associativity</em> (whether they prefer to do things
right to left or left to right when associated with operators of the
same precedence).</p>

<p>
<a name="INDEX-777"></a><a name="INDEX-778"></a><a name="INDEX-779"></a><a name="INDEX-780"></a><a name="INDEX-781"></a><a name="INDEX-782"></a><a name="INDEX-783"></a><a name="INDEX-784"></a>
Perl operators come in three arities: <em class="emphasis">unary</em>,
<em class="emphasis">binary</em>, and <em class="emphasis">trinary</em> (or
<em class="emphasis">ternary</em>, if your native tongue is Shibboleth).
Unary operators are always prefix operators (except for the
postincrement and postdecrement operators).<a href="#FOOTNOTE-1">[1]</a> The others are all infix
operators--unless you count the list operators, which can prefix any
number of arguments.  But most people just think of list operators as
normal functions that you can forget to put parentheses around.  Here
are some examples:
<blockquote>
<pre class="programlisting">! $x                # a unary operator
$x * $y             # a binary operator
$x ? $y : $z        # a trinary operator
print $x, $y, $z    # a list operator</pre>
</blockquote>

An operator's precedence controls how tightly it binds. Operators with
higher precedence grab the arguments around them before operators with
lower precedence.  The archetypal example is straight out of
elementary math, where multiplication takes precedence over addition:
<blockquote>
<pre class="programlisting">2 + 3 * 4          # yields 14, not 20</pre>
</blockquote>

The order in which two operators of the same precedence are executed depends
on their associativity.  These rules also follow math conventions to some
extent:
<blockquote>
<pre class="programlisting">2 * 3 * 4          # means (2 * 3) * 4, left associative
2 ** 3 ** 4        # means 2 ** (3 ** 4), right associative
2 != 3 != 4        # illegal, nonassociative</pre>
</blockquote>
<a href="ch03_01.htm">Table 3-1</a> lists the associativity and arity
of the Perl operators from highest
precedence to lowest.
<a name="INDEX-785"></a>
<p></p>
<blockquote class="footnote">

<a name="FOOTNOTE-1"></a>
<p>[1]Though you
can think of various quotes and brackets as circumfix operators that
delimit terms.</p>

</blockquote>

<a name="table-perl3-tab-precedence"></a>
<h4 class="objtitle">Table 3.1. Operator Precedence</h4>
<table border="1">

<tr>
<th>Associativity</th>
<th>Arity</th>
<th>Precedence Class</th>
</tr>




<tr>
<td>None</td>
<td>0</td>
<td>Terms, and list operators (leftward)</td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">-&gt;</tt></td>
</tr>

<tr>
<td>None</td>
<td>1</td>
<td><tt class="literal">++ --</tt></td>
</tr>

<tr>
<td>Right</td>
<td>2</td>
<td><tt class="literal">**</tt></td>
</tr>

<tr>
<td>Right</td>
<td>1</td>
<td><tt class="literal">! ~ &gt;</tt> and unary <tt class="literal">+</tt> and <tt class="literal">-</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">=~ !~</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">* / % x</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">+ - .</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">&lt;&lt; &gt;&gt;</tt></td>
</tr>

<tr>
<td>Right</td>
<td>0,1</td>
<td>Named unary operators</td>
</tr>

<tr>
<td>None</td>
<td>2</td>
<td><tt class="literal">&lt; &gt; &lt;= &gt;= lt gt le ge</tt></td>
</tr>

<tr>
<td>None</td>
<td>2</td>
<td><tt class="literal">== != &lt;=&gt; eq ne cmp</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">&amp;</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">| ^</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">&amp;&amp;</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">||</tt></td>
</tr>

<tr>
<td>None</td>
<td>2</td>
<td><tt class="literal">..</tt> <tt class="literal">...</tt></td>
</tr>

<tr>
<td>Right</td>
<td>3</td>
<td><tt class="literal">?:</tt></td>
</tr>

<tr>
<td>Right</td>
<td>2</td>
<td><tt class="literal">= += -= *=</tt> and so on</td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">, =&gt;</tt></td>
</tr>

<tr>
<td>Right</td>
<td>0+</td>
<td>List operators (rightward)</td>
</tr>

<tr>
<td>Right</td>
<td>1</td>
<td><tt class="literal">not</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">and</tt></td>
</tr>

<tr>
<td>Left</td>
<td>2</td>
<td><tt class="literal">or xor</tt></td>
</tr>


</table>

<a name="INDEX-786"></a><a name="INDEX-787"></a>
<p>It may seem to you that there are too many precedence levels to
remember.  Well, you're right, there are.  Fortunately, you've got two
things going for you here.  First, the precedence levels as they're
defined usually follow your intuition, presuming you're not psychotic.
And second, if you're merely neurotic, you can always put in extra
parentheses to relieve your anxiety.</p>

<p>
<a name="INDEX-788"></a><a name="INDEX-789"></a>
Another helpful hint is that any operators borrowed from C keep the
same precedence relationship with each other, even where C's precedence
is slightly screwy. (This makes learning Perl easier for C folks and
C++ folks.  Maybe even Java folks.)</p>

<p>
<a name="INDEX-790"></a>
The following sections cover these operators in precedence
order.  With very few exceptions, these all operate on scalar values
only, not list values.  We'll mention the exceptions as they come up.</p>

<p>
<a name="INDEX-791"></a><a name="INDEX-792"></a>
Although references are scalar values, using most of these operators
on references doesn't make much sense, because the numeric value of
a reference is only meaningful to the internals of Perl.  Nevertheless,
if a reference points to an object of a class that allows overloading,
you can call these operators on such objects, and if the class has
defined an overloading for that particular operator, it will define
how the object is to be treated under that operator.  This is how
complex numbers are implemented in Perl, for instance.  For more on
overloading, see <a href="ch13_01.htm">Chapter 13, "Overloading"</a>.</p>


<h2 class="sect1">3.1. Terms and List Operators (Leftward)</h2>

<a name="INDEX-793"></a><a name="INDEX-794"></a><a name="INDEX-795"></a><a name="INDEX-796"></a><a name="INDEX-797"></a><a name="INDEX-798"></a><a name="INDEX-799"></a><a name="INDEX-800"></a>
<p>Any <em class="emphasis">term</em> is of highest precedence in Perl.  Terms
include variables, quote and quotelike operators, most expressions in
parentheses, or brackets or braces, and any function whose arguments
are parenthesized.  Actually, there aren't really any functions in
this sense, just list operators and unary operators behaving as
functions because you put parentheses around their
arguments. Nevertheless, the name of Chapter 29 is
<em class="emphasis">Functions</em>.</p>

<p>
<a name="INDEX-801"></a>
Now listen carefully.  Here are a couple of rules that are very
important and simplify things greatly, but may occasionally produce
counterintuitive results for the unwary.  If any list operator (such
as <tt class="literal">print</tt>) or any named unary operator (such as
<tt class="literal">chdir</tt>) is followed by a left parenthesis as the
next token (ignoring whitespace), the operator and its parenthesized
arguments are given highest precedence, as if it were a normal
function call.  The rule is this: If it <em class="emphasis">looks</em>
like a function call, it <em class="emphasis">is</em> a function call. You
can make it look like a nonfunction by prefixing the parentheses with
a unary plus, which does absolutely nothing, semantically speaking--it
doesn't even coerce the argument to be numeric.
<a name="INDEX-802"></a>
</p>

<p>
<a name="INDEX-803"></a><a name="INDEX-804"></a><a name="INDEX-805"></a><a name="INDEX-806"></a><a name="INDEX-807"></a>
For example, since || has lower precedence than <tt class="literal">chdir</tt>, we get:
<blockquote>
<pre class="programlisting">chdir $foo    || die;       # (chdir $foo) || die
chdir($foo)   || die;       # (chdir $foo) || die
chdir ($foo)  || die;       # (chdir $foo) || die
chdir +($foo) || die;       # (chdir $foo) || die</pre>
</blockquote>

but, because <tt class="literal">*</tt> has higher precedence than <tt class="literal">chdir</tt>, we get:
<blockquote>
<pre class="programlisting">chdir $foo * 20;            # chdir ($foo * 20)
chdir($foo) * 20;           # (chdir $foo) * 20
chdir ($foo) * 20;          # (chdir $foo) * 20
chdir +($foo) * 20;         # chdir ($foo * 20)</pre>
</blockquote>

Likewise for any numeric operator that happens to be a named unary operator,
such as <tt class="literal">rand</tt>:
<blockquote>
<pre class="programlisting">rand 10 * 20;               # rand (10 * 20)
rand(10) * 20;              # (rand 10) * 20
rand (10) * 20;             # (rand 10) * 20
rand +(10) * 20;            # rand (10 * 20)</pre>
</blockquote>

In the absence of parentheses, the precedence of list operators such as
<tt class="literal">print</tt>, <tt class="literal">sort</tt>, or <tt class="literal">chmod</tt> is either very high or very low depending
on whether you look at the left side or the right side of the operator.
(That's what the "Leftward" is doing in the title of this
section.)  For example, in:
<blockquote>
<pre class="programlisting">@ary = (1, 3, sort 4, 2);
print @ary;         # prints 1324</pre>
</blockquote>
the commas on the right of the <tt class="literal">sort</tt> are evaluated
before the <tt class="literal">sort</tt>, but the commas on the left are
evaluated after.  In other words, a list operator tends to gobble up
all the arguments that follow it, and then act like a simple term with
regard to the preceding expression.  You still have to be careful with
parentheses:
<blockquote>
<pre class="programlisting"># These evaluate exit before doing the print:
print($foo, exit);  # Obviously not what you want.
print $foo, exit;   # Nor this.

# These do the print before evaluating exit:
(print $foo), exit; # This is what you want.
print($foo), exit;  # Or this.
print ($foo), exit; # Or even this.</pre>
</blockquote>

The easiest place to get burned is where you're using parentheses to
group mathematical arguments, and you forget that parentheses are also
used to group function arguments:
<blockquote>
<pre class="programlisting">print ($foo &amp; 255) + 1, "\n";   # prints ($foo &amp; 255)</pre>
</blockquote>

That probably doesn't do what you expect at first glance.  Fortunately,
mistakes of this nature generally produce warnings like "<tt class="literal">Useless use of addition in a void context</tt>" when warnings are enabled.<p></p>

<p>
<a name="INDEX-808"></a><a name="INDEX-809"></a>

Also parsed as terms are the <tt class="literal">do {}</tt> and <tt class="literal">eval {}</tt> constructs, as well
as subroutine and method calls, the anonymous array and hash composers
<tt class="literal">[]</tt> and <tt class="literal">{}</tt>, and the anonymous subroutine composer <tt class="literal">sub {}</tt>.</p>





























































































































































































<a name="INDEX-1027"></a><a name="INDEX-1028"></a><a name="INDEX-1029"></a>


<!-- BOTTOM NAV BAR -->

<hr width="684" align="left">
<div class="navbar">
<table width="684" border="0">
<tr>
<td align="left" valign="top" width="228"><a href="ch02_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0"></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0"></a></td><td align="right" valign="top" width="228"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0"></a></td>
</tr>
<tr>
<td align="left" valign="top" width="228">2.11. Input Operators</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0"></a></td><td align="right" valign="top" width="228">3.2. The Arrow Operator</td>
</tr>
</table>
</div>
<hr width="684" align="left">

<!-- LIBRARY NAV BAR -->

<img src="../gifs/smnavbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links"><p>
<font size="-1"><a href="copyrght.htm">Copyright &copy; 2002</a> O'Reilly &amp; Associates. All rights reserved.</font>
</p>
<map name="library-map"> <area shape="rect" coords="1,0,85,94" href="../index.htm"><area shape="rect" coords="86,1,178,103" href="../lwp/index.htm"><area shape="rect" coords="180,0,265,103" href="../lperl/index.htm"><area shape="rect" coords="267,0,353,105" href="../perlnut/index.htm"><area shape="rect" coords="354,1,446,115" href="index.htm"><area shape="rect" coords="448,0,526,132" href="../tk/index.htm"><area shape="rect" coords="528,1,615,119" href="../cookbook/index.htm"><area shape="rect" coords="617,0,690,135" href="../pxml/index.htm">
</map>

<!-- END OF BODY -->

</body>
</html>
