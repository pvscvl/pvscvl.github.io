<?label 7.7. Built-in Commands?><html><head><title>Built-in Commands (Linux in a Nutshell, 3rd Edition)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ellen Siever, Stephen Spainhour, Stephen Figgins and Jessica P. Hekman" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="0596000251L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Linux in a Nutshell, 3rd Edition" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Linux in a Nutshell" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Linux in a Nutshell, 3rd Edition</a></td><td width="172" valign="top" align="right"><a href="ch07_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">7.7. Built-in Commands</h2>


<p><a name="INDEX-1406" /><a name="INDEX-1407" />Examples to be entered as a command line
are shown with the <b class="emphasis-bold">$</b> prompt. Otherwise,
examples should be treated as code fragments
that might be included in a shell script.
For convenience, some of the reserved words used by multiline commands
also are included.</p>


<table cellpadding="5" border="1"><tr><td valign="top">#</td><td><p><b class="emphasis-bold">#</b></p><a name="INDEX-1408" /><p>Ignore all text that follows on the same line. # is used in shell
scripts as the comment character and is not really a command.</p>


</td></tr><tr><td valign="top">#!</td><td><p><b class="emphasis-bold">#!</b><em class="emphasis">shell</em></p><a name="INDEX-1409" /><p>Used as the first line of a script to
invoke the named <em class="emphasis">shell</em> (with optional arguments).
Some older, non-Linux systems do not support scripts starting with
this line. For example:</p>


<blockquote><pre class="code"><tt class="userinput"><b>#!/bin/bash</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">:</td><td><p><b class="emphasis-bold">:</b></p><a name="INDEX-1410" /><p>Null command. Returns an exit status of 0.
Sometimes used as the first character in a file to denote a <b class="emphasis-bold">bash</b> script.
Shell variables can be placed after the <b class="emphasis-bold">:</b>
to expand them to their values.</p>


<?troff .rm CURRENT?><h4 class="refsect2">Example</h4>


<p>Check whether someone is logged in:</p>


<blockquote><pre class="code"><tt class="userinput"><b>if who | grep $1 &gt; /dev/null</b></tt>
<tt class="userinput"><b>then :     # do nothing</b></tt>
<tt class="userinput"><b>     # if pattern is found</b></tt>
<tt class="userinput"><b>else echo "User $1 is not logged in"</b></tt>
<tt class="userinput"><b>fi</b></tt></pre></blockquote>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">.</td><td><p><b class="emphasis-bold">.</b> <em class="emphasis">file</em> [<em class="emphasis">arguments</em>]</p><a name="INDEX-1411" /><p>Same as <b class="emphasis-bold">source</b>.</p>


</td></tr><tr><td valign="top">alias</td><td><p><b class="emphasis-bold">alias</b> [<b class="emphasis-bold">-p</b>] [<em class="emphasis">name</em>[<b class="emphasis-bold">=</b><tt class="literal">'</tt><em class="emphasis">cmd<tt class="literal">'</tt></em>]]</p><a name="INDEX-1412" /><a name="INDEX-1413" /><p>Assign a shorthand <em class="emphasis">name</em> as a synonym for <em class="emphasis">cmd</em>.
If <b class="emphasis-bold">=</b><tt class="literal">'</tt><em class="emphasis">cmd</em><tt class="literal">'</tt> is omitted, print the alias for <em class="emphasis">name</em>;
if <em class="emphasis">name</em> also is omitted or if [<b class="emphasis-bold">-p</b>] is specified, print all aliases.
See also <b class="emphasis-bold">unalias</b>.</p>


</td></tr><tr><td valign="top">bg</td><td><p><b class="emphasis-bold">bg</b> [<em class="emphasis">jobIDs</em>]</p><a name="INDEX-1414" /><a name="INDEX-1415" /><a name="INDEX-1416" /><p>Put current job or <em class="emphasis">jobIDs</em> in the background.
See <a href="ch07_08.htm">Section 7.8, "Job Control"</a> later in this chapter.</p>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">bind</td><td><p><b class="emphasis-bold">bind</b> [<em class="emphasis">options</em>]</p><p><b class="emphasis-bold">bind</b> [<em class="emphasis">options</em>] <em class="emphasis">key</em>:<em class="emphasis">function</em></p><a name="INDEX-1417" /><a name="INDEX-1418" /><a name="INDEX-1419" /><p>Print or set the bindings that allow keys to invoke functions
such as cursor movement and line editing. Typical syntax choices for
<em class="emphasis">keys</em> are <b class="emphasis-bold">"\C-t"</b>
for Ctrl-T and <b class="emphasis-bold">"\M-t"</b> or <b class="emphasis-bold">"\et"</b> for Esc T (quoting is needed to escape
the sequences from the shell). Function names can be seen though the
<b class="emphasis-bold">-l</b> option.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-f</b> <em class="emphasis">filename</em></b></dt><dd><p>Consult <em class="emphasis">filename</em> for bindings, which should
be in the same format as on the <b class="emphasis-bold">bind</b>
command line.</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>Print all Readline functions, which are functions that can be
bound to keys.</p></dd>



<dt><b><b class="emphasis-bold">-m</b> <em class="emphasis">keymap</em></b></dt><dd><p>Specify a keymap for this and further bindings. Possible keymaps are
<b class="emphasis-bold">emacs</b>, <b class="emphasis-bold">emacs-standard</b>, <b class="emphasis-bold">emacs-meta</b>,
<b class="emphasis-bold">emacs-ctlx</b>, <b class="emphasis-bold">vi</b>, <b class="emphasis-bold">vi-move</b>,
<b class="emphasis-bold">vi-command</b>, and <b class="emphasis-bold">vi-insert</b>.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Display all functions and the keys that invoke them, in the
format by which keys can be set.
</p></dd>



<dt><b><b class="emphasis-bold">-q</b> <em class="emphasis">function</em></b></dt><dd><p>Display the key bindings that invoke <em class="emphasis">function</em>.
</p></dd>



<dt><b><b class="emphasis-bold">-r</b> <em class="emphasis">key</em></b></dt><dd><p>Remove the binding attached to <em class="emphasis">key</em>, so it
no longer works.</p></dd>



<dt><b><b class="emphasis-bold">-s</b></b></dt><dd><p>Display all macros and the keys that invoke them, in the format
by which keys can be set.
</p></dd>



<dt><b><b class="emphasis-bold">-u</b> <em class="emphasis">function</em></b></dt><dd><p>Remove all the bindings attached to
<em class="emphasis">function</em>, so no keys will invoke it.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Display all Readline variables (settings that affect history and
line editing) and their current settings, in the format by which
variables can be set.</p></dd>



<dt><b><b class="emphasis-bold">-x</b> <em class="emphasis">key</em>:<em class="emphasis">command</em></b></dt><dd><p>Bind key to a shell command (recent; not in all <b class="emphasis-bold">bash</b> versions in common use).</p></dd>



<dt><b><b class="emphasis-bold">-P</b></b></dt><dd><p>Display all bound keys and the functions they invoke.
</p></dd>



<dt><b><b class="emphasis-bold">-S</b></b></dt><dd><p>Display all macros and the keys that invoke them.
</p></dd>



<dt><b><b class="emphasis-bold">-V</b></b></dt><dd><p>Display all Readline variables (settings that affect history and
line editing) and their current settings.</p></dd>

</dl>


<h4 class="refsect2">Example</h4>


<p>Bind Ctrl-T to <b class="emphasis-bold">copy-forward-word</b>,
the function that copies the part of the word following the cursor so
it can be repasted:</p>


<blockquote><pre class="code">$ <tt class="userinput"><b>bind "\C-t":copy-forward-word</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">break</td><td><p><b class="emphasis-bold">break</b> [<em class="emphasis">n</em>]</p><a name="INDEX-1420" /><a name="INDEX-1421" /><p>Exit from the innermost (most deeply nested)
<b class="emphasis-bold">for</b>, <b class="emphasis-bold">while</b>, or <b class="emphasis-bold">until</b> loop,
or from the <em class="emphasis">n</em> innermost levels of the loop.
Also exits from a <b class="emphasis-bold">select</b> list.</p>


</td></tr><tr><td valign="top">builtin</td><td><p><b class="emphasis-bold">builtin</b> <em class="emphasis">command</em> [<em class="emphasis">arguments</em>]</p><a name="INDEX-1422" /><p>Execute <em class="emphasis">command</em>, which must be a shell built-in. Useful
for invoking built-ins within scripts of the same name.</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 20?><tr><td valign="top">case</td><td><p><b class="emphasis-bold">case</b> <em class="emphasis">string</em></p><p>  <b class="emphasis-bold">in</b></p><p>    <em class="emphasis">regex</em>)</p><p>       <em class="emphasis">commands</em></p><p>       ;;</p><p>       ...</p><p>    <b class="emphasis-bold">esac</b></p><p>If <em class="emphasis">string</em> matches regular expression <em class="emphasis">regex</em>,
perform the following <em class="emphasis">commands</em>.  Proceed down the list of
regular expressions until one is found (to catch all
remaining strings, use * as <em class="emphasis">regex</em> at the end).</p>


</td></tr><tr><td valign="top">cd</td><td><p><b class="emphasis-bold">cd</b> [<em class="emphasis">dir&amp;</em>]</p><a name="INDEX-1423" /><a name="INDEX-1424" /><p>With no arguments, change to home directory of user.
Otherwise, change working directory to <em class="emphasis">dir</em>. If <em class="emphasis">dir</em> is a
relative pathname but is not in the current directory, then the CDPATH
variable is searched.</p>


</td></tr><tr><td valign="top">command</td><td><p><b class="emphasis-bold">command</b> [<em class="emphasis">options</em>]<em class="emphasis"> command</em> [<em class="emphasis">arguments</em>]</p><a name="INDEX-1425" /><p>Execute <em class="emphasis">command</em>; do not perform function look-up (i.e.,
refuse to run any command that is neither in PATH nor a
built-in). Set exit status to that returned by <em class="emphasis">command</em>, unless
<em class="emphasis">command</em> cannot be found, in which case exit with a status of
127.</p>


<dl>
<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Search default path, ignoring the PATH variable's value.</p></dd>



<dt><b><b class="emphasis-bold">--</b></b></dt><dd><p>Treat everything that follows as an argument, not an option.</p></dd>

</dl>


</td></tr><tr><td valign="top">continue</td><td><p><b class="emphasis-bold">continue</b> [<em class="emphasis">n</em>]</p><a name="INDEX-1426" /><p>Skip remaining commands in a <b class="emphasis-bold">for</b>, <b class="emphasis-bold">while</b>, or <b class="emphasis-bold">until</b> loop,
resuming with the next iteration of the loop
(or skipping <em class="emphasis">n</em> loops).</p>


</td></tr><tr><td valign="top">declare</td><td><p><b class="emphasis-bold">declare</b> [<em class="emphasis">options</em>] [<em class="emphasis">name</em><b class="emphasis-bold">[=</b><em class="emphasis">value</em>]]</p><p><b class="emphasis-bold">typeset</b> [<em class="emphasis">options</em>] [<em class="emphasis">name</em><b class="emphasis-bold">[=</b><em class="emphasis">value</em>]]</p><a name="INDEX-1427" /><p>Print or set variables. Options prefaced by + instead of -
are inverted in meaning.</p>


<dl>
<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>Treat the following names as array variables.</p></dd>



<dt><b><b class="emphasis-bold">-f</b></b></dt><dd><p>Treat the following names as functions.</p></dd>



<dt><b><b class="emphasis-bold">-i</b></b></dt><dd><p>Expect variable to be an integer, and evaluate its assigned value.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Print names and settings of all shell variables and functions;
take no other action.</p></dd>



<dt><b><b class="emphasis-bold">-r</b></b></dt><dd><p>Do not allow variables to be reset later.</p></dd>



<dt><b><b class="emphasis-bold">-x</b></b></dt><dd><p>Mark variables for subsequent export.</p></dd>



<dt><b><b class="emphasis-bold">-F</b></b></dt><dd><p>Print names of all shell functions; take no other action.</p></dd>

</dl>


</td></tr><tr><td valign="top">dirs</td><td><p><b class="emphasis-bold">dirs</b> [<em class="emphasis">options</em>]</p><a name="INDEX-1428" /><a name="INDEX-1429" /><a name="INDEX-1430" /><p>Print directories currently remembered for <b class="emphasis-bold">pushd</b>/<b class="emphasis-bold">popd</b> operations.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">+</b><em class="emphasis">entry</em></b></dt><dd><p>Print <em class="emphasis">entry</em>th entry (list starts at 0).</p></dd>



<dt><b><b class="emphasis-bold">-</b><em class="emphasis">entry</em></b></dt><dd><p>Print <em class="emphasis">entry</em>th entry from end of list.</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>Long listing.</p></dd>

</dl>


</td></tr><tr><td valign="top">disown</td><td><p><b class="emphasis-bold">disown</b> [<em class="emphasis">options</em>] [<em class="emphasis">jobIDs</em>]</p><a name="INDEX-1431" /><p>Let job run, but disassociate it from the shell. By default, do
not even list the job as an active job; commands like <b class="emphasis-bold">jobs</b> and <b class="emphasis-bold">fg</b> will
no longer recognize it.  When <b class="emphasis-bold">-h</b>
is specified, the job is recognized but simply is kept from being
killed when the shell dies.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>Act on all jobs.</p></dd>



<dt><b><b class="emphasis-bold">-h</b></b></dt><dd><p>Do not pass a SIGHUP signal received by the shell on to the job.</p></dd>




</dl>


</td></tr><tr><td valign="top">echo</td><td><p><b class="emphasis-bold">echo</b> [<em class="emphasis">options</em>] [<em class="emphasis">string</em>]</p><a name="INDEX-1432" /><a name="INDEX-1433" /><p>Write <em class="emphasis">string</em> to standard output, terminated by a newline.
If no <em class="emphasis">string</em> is supplied, echo a newline.
In <b class="emphasis-bold">bash</b>, <b class="emphasis-bold">echo</b> is just an alias for <b class="emphasis-bold">print -</b>.
(See also <b class="emphasis-bold">echo</b> in <a href="ch03_01.htm">Chapter 3, "Linux Commands"</a>).</p>


<?troff .Nd 10?><dl>
<dt><b><b class="emphasis-bold">-e</b></b></dt><dd><p>Enable interpretation of escape characters:</p>


<dl>
<dt><b><b class="emphasis-bold">\a</b></b></dt><dd><p>Audible alert</p></dd>



<dt><b><b class="emphasis-bold">\b</b></b></dt><dd><p>Backspace</p></dd>



<dt><b><b class="emphasis-bold">\c</b></b></dt><dd><p>Suppress the terminating newline (same as <b class="emphasis-bold">-n</b>)</p></dd>



<dt><b><b class="emphasis-bold">\f</b></b></dt><dd><p>Form feed</p></dd>



<dt><b><b class="emphasis-bold">\n</b></b></dt><dd><p>Newline</p></dd>



<dt><b><b class="emphasis-bold">\r</b></b></dt><dd><p>Carriage return</p></dd>



<dt><b><b class="emphasis-bold">\t</b></b></dt><dd><p>Horizontal tab</p></dd>



<dt><b><b class="emphasis-bold">\v</b></b></dt><dd><p>Vertical tab
</p></dd>



<dt><b><b class="emphasis-bold">\\</b></b></dt><dd><p>Backslash</p></dd>



<dt><b><b class="emphasis-bold">\</b><em class="emphasis">nnn</em></b></dt><dd><p>The character in the ASCII set corresponding to the octal number <em class="emphasis">nnn</em>.</p></dd>



<dt><b><b class="emphasis-bold">\x</b><em class="emphasis">nnn</em></b></dt><dd><p>The character in the ASCII set corresponding to the hexadecimal number <em class="emphasis">nnn</em>.</p></dd>

</dl></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>Do not append a newline to the output.</p></dd>



<dt><b><b class="emphasis-bold">-E</b></b></dt><dd><p>Disable interpretation of escape characters.</p></dd>

</dl>


</td></tr><tr><td valign="top">enable</td><td><p><b class="emphasis-bold">enable</b> [<em class="emphasis">options</em>] [<em class="emphasis">built-in ...</em>]</p><p>Enable (or when <b class="emphasis-bold">-n</b> is specified, disable) built-in
shell commands.  Without <em class="emphasis">built-in</em> argument or
with <b class="emphasis-bold">-p</b> option, print enabled
built-ins. With <b class="emphasis-bold">-a</b>, print the status of
all built-ins.  You can disable shell commands in order to
define your own functions with the same names.</p>


<?troff .rm CURRENT?><h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>Display all built-ins, both enabled and disabled.</p></dd>



<dt><b><b class="emphasis-bold">-n</b> <em class="emphasis">builtin</em></b></dt><dd><p>Disable <em class="emphasis">builtin</em>.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Display enabled built-ins.</p></dd>



<dt><b><b class="emphasis-bold">-s</b></b></dt><dd><p>Restrict display to special built-ins defined by POSIX standard.</p></dd>

</dl>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">eval</td><td><p><b class="emphasis-bold">eval</b> [<em class="emphasis">command args...</em>]</p><p>Perform <em class="emphasis">command</em>, passing <em class="emphasis">args</em>.</p>


</td></tr><tr><td valign="top">exec</td><td><p><b class="emphasis-bold">exec</b> [<em class="emphasis">options</em>] [<em class="emphasis">command</em>]</p><a name="INDEX-1434" /><a name="INDEX-1435" /><p>Execute <em class="emphasis">command</em> in place of the current process
(instead of creating a new process). <b class="emphasis-bold">exec</b> also is useful for
opening, closing, or copying file descriptors.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b> <em class="emphasis">name</em></b></dt><dd><p>Tell <em class="emphasis">command</em> that it was invoked as
<em class="emphasis">name</em>.</p></dd>



<dt><b><b class="emphasis-bold">-c</b></b></dt><dd><p>Remove all environment variables from the process when the new command
runs.</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>Treat the new process as if the user were logging in.</p></dd>

</dl>


<h4 class="refsect2">Examples</h4>


<blockquote><pre class="code">$ <tt class="userinput"><b>trap 'exec 2&gt;&amp;-' 0</b></tt>     Close standard error when
     shell script exits (signal 0)
$ <tt class="userinput"><b>exec /bin/tcsh</b></tt>         Replace current shell with extended C shell
$ <tt class="userinput"><b>exec &lt; infile</b></tt>          Reassign standard input to infile</pre></blockquote>


</td></tr><tr><td valign="top">exit</td><td><p><b class="emphasis-bold">exit</b> [<em class="emphasis">n</em>]</p><a name="INDEX-1436" /><a name="INDEX-1437" /><p>Exit a shell script with status <em class="emphasis">n</em> (e.g., <b class="emphasis-bold">exit 1</b>).
<em class="emphasis">n</em> can be zero (success) or nonzero (failure).
If <em class="emphasis">n</em> is not given, exit status will be that of the most recent command.
<b class="emphasis-bold">exit</b> can be issued at the command line to close a window (log out).</p>


<h4 class="refsect2">Example</h4>


<blockquote><pre class="code"><tt class="userinput"><b>if [ $# -eq 0 ]; then
   echo "Usage:  $0 [-c] [-d] file(s)"
   exit 1     # Error status
fi</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">export</td><td><p><b class="emphasis-bold">export</b> [<em class="emphasis">options</em>] [<em class="emphasis">variables</em>]</p><p><b class="emphasis-bold">export</b> [<em class="emphasis">options</em>] [<em class="emphasis">name</em><b class="emphasis-bold">=</b>[<em class="emphasis">value</em>]]<em class="emphasis">...</em></p><a name="INDEX-1438" /><a name="INDEX-1439" /><p>Pass (export) the value of one or more shell <em class="emphasis">variables</em>,
giving global meaning to the variables (which are local by default).
For example, a variable defined in one shell script must be
exported if its value will be used in other programs
called by the script. If no <em class="emphasis">variables</em> are given,
<b class="emphasis-bold">export</b> lists the variables exported by the current shell. If
<em class="emphasis">name</em> and <em class="emphasis">value</em> are specified, assign <em class="emphasis">value</em> to a
variable <em class="emphasis">name</em>.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">--</b></b></dt><dd><p>Treat all subsequent strings as arguments, not options.</p></dd>



<dt><b><b class="emphasis-bold">-f</b></b></dt><dd><p>Expect <em class="emphasis">variables</em> to be functions.</p></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>Unexport variable.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>List variables exported by current shell.</p></dd>

</dl>


</td></tr><tr><td valign="top">fc</td><td><p><b class="emphasis-bold">fc</b> [<em class="emphasis">options</em>] [<em class="emphasis">first</em>] [<em class="emphasis">last</em>]</p><p><b class="emphasis-bold">fc  -e  -</b> [<em class="emphasis">old=</em><em class="emphasis">new</em>] [<em class="emphasis">command</em>]</p><a name="INDEX-1440" /><a name="INDEX-1441" /><p>Display or edit commands in the history list.
(Use only one of <b class="emphasis-bold">-l</b> or <b class="emphasis-bold">-e</b>.)
<b class="emphasis-bold">fc</b> provides capabilities similar to the C shell's <b class="emphasis-bold">history</b> and
<b class="emphasis-bold">!</b> syntax. <em class="emphasis">first</em> and <em class="emphasis">last</em> are numbers or
strings specifying the range of commands to display or edit.
If <em class="emphasis">last</em> is omitted, <b class="emphasis-bold">fc</b> applies to a single command (specified
by <em class="emphasis">first</em>). If both <em class="emphasis">first</em> and <em class="emphasis">last</em> are omitted,
<b class="emphasis-bold">fc</b> edits the previous command or lists the last 16.
The second form of <b class="emphasis-bold">fc</b> takes a history <em class="emphasis">command</em>,
replaces <em class="emphasis">old</em> string with <em class="emphasis">new</em> string,
and executes the modified command. If no strings are
specified, <em class="emphasis">command</em> is just reexecuted. If no <em class="emphasis">command</em>
is given either, the previous command is reexecuted.
<em class="emphasis">command</em> is a number or string like <em class="emphasis">first</em>.
See examples under <a href="ch07_06.htm">Section 7.6, "Command History"</a>.</p>


<?troff .rm CURRENT?><h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-e</b> [<em class="emphasis">editor</em>]</b></dt><dd><p>Invoke <em class="emphasis">editor</em> to edit the specified history commands.
The default <em class="emphasis">editor</em> is set by the shell variable FCEDIT.</p></dd>



<dt><b><b class="emphasis-bold">-l</b> [<em class="emphasis">first last</em>]</b></dt><dd><p>List the specified command or range of commands, or list the last 16.</p></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>Suppress command numbering from the <b class="emphasis-bold">-l</b> listing.</p></dd>



<dt><b><b class="emphasis-bold">-r</b></b></dt><dd><p>Reverse the order of the <b class="emphasis-bold">-l</b> listing.</p></dd>



<dt><b><b class="emphasis-bold">-s</b> <em class="emphasis">pattern<b class="emphasis-bold">=</b>newpattern</em></b></dt><dd><p>Edit command(s), replacing all occurrences of <em class="emphasis">pattern</em>
with <em class="emphasis">newpattern</em>. Then reexecute.</p></dd>

</dl>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">fg</td><td><p><b class="emphasis-bold">fg</b> [<em class="emphasis">jobIDs</em>]</p><a name="INDEX-1442" /><a name="INDEX-1443" /><a name="INDEX-1444" /><p>Bring current job or <em class="emphasis">jobIDs</em> to the foreground.
See <a href="ch07_08.htm">Section 7.8, "Job Control"</a>.</p>


</td></tr><tr><td valign="top">for</td><td><p><b class="emphasis-bold">for</b> <em class="emphasis">x</em> [<b class="emphasis-bold">in</b> <em class="emphasis">list</em>]</p><p>  <b class="emphasis-bold">do</b></p><p>     <em class="emphasis">commands</em></p><p>  <b class="emphasis-bold">done</b></p><a name="INDEX-1445" /><a name="INDEX-1446" /><p>Assign each word in list to <em class="emphasis">x</em> in turn and execute commands.
If <em class="emphasis">list</em> is omitted, <b class="emphasis-bold">$@</b> (positional parameters) is assumed.</p>


<h4 class="refsect2">Examples</h4>


<p>Paginate all files in the current directory; save each result:</p>


<blockquote><pre class="code"><tt class="userinput"><b>for file in *
do
     pr $file &gt; $file.tmp
done</b></tt></pre></blockquote>


<p>Search chapters for a list of words (like <b class="emphasis-bold">fgrep -f</b>):</p>


<blockquote><pre class="code"><tt class="userinput"><b>for item in <literal>`</literal>cat program_list`
do
     echo "Checking chapters for"
     echo "references to program $item..."
     grep -c "$item.[co]" chap*
done</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">function</td><td><p><b class="emphasis-bold">function</b> <em class="emphasis">command</em></p><p><b class="emphasis-bold">{</b></p><p>  <b class="emphasis-bold">...</b></p><p><b class="emphasis-bold">}</b></p><p>Define a function.  Refer to arguments the same way as
positional parameters in a shell script (<b class="emphasis-bold">$1</b>, etc.) and
terminate with <b class="emphasis-bold">}</b>.</p>


</td></tr><tr><td valign="top">getopts</td><td><p><b class="emphasis-bold">getopts</b> <em class="emphasis">string name</em> [<em class="emphasis">args</em>]</p><a name="INDEX-1447" /><a name="INDEX-1448" /><p>Process command-line arguments (or <em class="emphasis">args</em>, if specified) and check
for legal options. <b class="emphasis-bold">getopts</b>
is used in shell script loops and is intended to ensure standard syntax for
command-line options. <em class="emphasis">string</em> contains the option letters
to be recognized by <b class="emphasis-bold">getopts</b> when running the shell script. 
<?troff .ne 10?>Valid
options are processed in turn and stored in the shell variable <em class="emphasis">name</em>.
If an option letter is followed by a
colon, the option must be followed by one or more arguments.</p>


</td></tr><tr><td valign="top">hash</td><td><p><b class="emphasis-bold">hash</b> [<b class="emphasis-bold">-r</b>] [<em class="emphasis">commands</em>]</p><a name="INDEX-1449" /><a name="INDEX-1450" /><a name="INDEX-1451" /><p>Search for <em class="emphasis">commands</em> and remember the
directory in which each command resides. Hashing causes the shell to
remember the association between a "name" and the absolute pathname of
an executable, so that future executions don't require a search of
PATH. With no arguments, <b class="emphasis-bold">hash</b> lists the current hashed
commands. The display shows <em class="emphasis">hits</em> (the number of times the
command is called by the shell) and <em class="emphasis">command</em> (the full pathname).</p>


</td></tr><tr><td valign="top">help</td><td><p><b class="emphasis-bold">help</b> [<b class="emphasis-bold">-s</b>] [<em class="emphasis">string</em>]</p><p>Print help text on all built-in commands or those matching
<em class="emphasis">string</em>. With <b class="emphasis-bold">-s</b>, display only brief syntax, otherwise
display summary paragraph also.</p>


</td></tr><tr><td valign="top">history</td><td><p><b class="emphasis-bold">history</b> [<em class="emphasis">options</em>]</p><p><b class="emphasis-bold">history</b> [<em class="emphasis">lines</em>]</p><p>Print a numbered command history, denoting modified commands with a *.
Include commands from previous sessions.
You may specify how many lines of history to print.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b> [<em class="emphasis">file</em>]</b></dt><dd><p><b class="emphasis-bold">bash</b> maintains a file called <em class="emphasis">.bash_history</em> in the user's home
directory, a record of previous sessions' commands.
Ask <b class="emphasis-bold">bash</b> to append the current
session's commands to <em class="emphasis">.bash_history</em> or to
<em class="emphasis">file</em>.</p></dd>



<dt><b><b class="emphasis-bold">-c</b></b></dt><dd><p>Clear history list: remove all previously entered commands from
the list remembered by the shell.</p></dd>




<dt><b><b class="emphasis-bold">-n</b> [<em class="emphasis">file</em>]</b></dt><dd><p>Append to the history list those lines in the
<em class="emphasis">.bash_history</em> file or in <em class="emphasis">file</em>
that have not yet been included.</p></dd>



<dt><b><b class="emphasis-bold">-r</b> [<em class="emphasis">file</em>]</b></dt><dd><p>Use <em class="emphasis">.bash_history</em> or
<em class="emphasis">file</em> as the history list, instead of the working
history list.</p></dd>



<dt><b><b class="emphasis-bold">-s</b> <em class="emphasis">command</em></b></dt><dd><p>Add <em class="emphasis">command</em> to working history list
without executing it.</p></dd>



<dt><b><b class="emphasis-bold">-w</b> [<em class="emphasis">file</em>]</b></dt><dd><p>Overwrite <em class="emphasis">.bash_history</em> or
<em class="emphasis">file</em> with working history list.</p></dd>

</dl>


</td></tr><tr><td valign="top">if</td><td><p><b class="emphasis-bold">if</b> <em class="emphasis">test-cmds</em></p><a name="INDEX-1452" /><p>Begin a conditional statement.  Possible formats are:</p>


<blockquote><pre class="code">if <em class="replaceable">test-cmds</em>    if <em class="replaceable">test-cmds</em>      if <em class="replaceable">test-cmds</em>
then          then             then
   <em class="replaceable">cmds1</em>        <em class="replaceable">cmds1</em>             <em class="replaceable">cmds1</em>
fi            else             elif <em class="replaceable">test-cmds</em>
                <em class="replaceable">cmds2</em>          then
              fi                  <em class="replaceable">cmds2</em>
                              ...
                               else
                                  <em class="replaceable">cmdsn</em>
                               fi</pre></blockquote>


<p>Usually, the initial <b class="emphasis-bold">if</b> and any <b class="emphasis-bold">elif</b> lines execute one
<b class="emphasis-bold">test</b> or <b class="emphasis-bold">[]</b> command (although any series of commands is
permitted).  When <b class="emphasis-bold">if</b> succeeds (that is, the last of its
<em class="emphasis">test-cmds</em> returns 0), <em class="emphasis">cmds1</em> are performed;
otherwise each succeeding <b class="emphasis-bold">elif</b> or <b class="emphasis-bold">else</b> line is tried.</p>


</td></tr></table><table cellpadding="5" border="1"><tr><td valign="top">jobs</td><td><p><b class="emphasis-bold">jobs</b> [<em class="emphasis">options</em>] [<em class="emphasis">jobIDs</em>]</p><p><a name="INDEX-1453" />List all running or stopped jobs, or those specified by
<em class="emphasis">jobIDs</em>. For example, you can check whether a long
compilation or text format is still running. Also useful before
logging out.  See also <a href="ch07_08.htm">Section 7.8, "Job Control"</a> later in this chapter.</p>



<?troff .rm CURRENT?><h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>List job IDs and process group IDs.</p></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>List only jobs whose status changed since last notification.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>List process group IDs only.</p></dd>



<dt><b><b class="emphasis-bold">-r</b></b></dt><dd><p>List active, running jobs only.</p></dd>



<dt><b><b class="emphasis-bold">-s</b></b></dt><dd><p>List stopped jobs only.</p></dd>



<dt><b><b class="emphasis-bold">-x</b> <em class="emphasis">command</em> [<em class="emphasis">arguments</em>]</b></dt><dd><p>Execute <em class="emphasis">command</em>. If <em class="emphasis">jobIDs</em> are specified, replace them with
<em class="emphasis">command</em>.</p></dd>

</dl>


</td></tr><tr><td valign="top">kill</td><td><p><b class="emphasis-bold">kill</b> [<em class="emphasis">options</em>] <em class="emphasis">IDs</em></p><p><a name="INDEX-1454" />Terminate each specified process <em class="emphasis">ID</em> or job
<em class="emphasis">ID</em>. You must own the process or be a privileged
user. See also <a href="ch07_08.htm">Section 7.8, "Job Control"</a>.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-</b><em class="emphasis">signal</em></b></dt><dd><p>The signal number (from <b class="emphasis-bold">ps -f</b>) or name (from <b class="emphasis-bold">kill -l</b>).
With a signal number of 9, the kill cannot be caught. The default is TERM.</p></dd>



<dt><b><b class="emphasis-bold">--</b></b></dt><dd><p>Consider all subsequent strings to be arguments, not options.</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>List the signal names. (Used by itself.)</p></dd>



<dt><b><b class="emphasis-bold">-s</b> <em class="emphasis">signal</em></b></dt><dd><p>Specify <em class="emphasis">signal</em>. May be a name.</p></dd>

</dl>


</td></tr><tr><td valign="top">let</td><td><p><b class="emphasis-bold">let</b> <em class="emphasis">expressions</em></p><p><a name="INDEX-1455" />Perform arithmetic as specified by one or more integer
<em class="emphasis">expressions</em>. <em class="emphasis">expressions</em>
consist of numbers, operators, and shell variables (which don't need a
preceding <b class="emphasis-bold">$</b>). Expressions must be
quoted if they contain spaces or other special characters. For more
information and examples, see <a href="ch07_05.htm">Section 7.5, "Arithmetic Expressions"</a> earlier in this
chapter. See also <b class="emphasis-bold">expr</b> in <a href="ch03_01.htm">Chapter 3, "Linux Commands"</a>.</p>


<h4 class="refsect2">Examples</h4>


<p>Both of the following examples add 1 to variable <b class="emphasis-bold">i</b>:</p>


<blockquote><pre class="code">let i=i+1
let "i = i + 1"</pre></blockquote>


</td></tr><tr><td valign="top">local</td><td><p><b class="emphasis-bold">local</b> [<em class="emphasis">options</em>] [<em class="emphasis">variable</em>[<b class="emphasis-bold">=</b><em class="emphasis">value</em>]] [<em class="emphasis">variable2</em>[<b class="emphasis-bold">=</b><em class="emphasis">value</em>]] <em class="emphasis">...</em></p><p><a name="INDEX-1456" />Without arguments, print all local variables.
Otherwise, create (and set, if specified) one or more local variables.
See the <b class="emphasis-bold">declare</b> built-in
command for options.</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 10?><tr><td valign="top">logout</td><td><p><b class="emphasis-bold">logout</b> [<em class="emphasis">status</em>]</p><p><a name="INDEX-1457" />Exit the shell, returning <em class="emphasis">status</em> as exit
status to invoking program if specified. Can be used only in a login
shell. Otherwise, use <b class="emphasis-bold">exit</b>.</p>


</td></tr><tr><td valign="top">popd</td><td><p><b class="emphasis-bold">popd</b> [<em class="emphasis">options</em>]</p><p><a name="INDEX-1458" />Manipulate the directory stack. By default, remove the top directory
and <b class="emphasis-bold">cd</b> to it.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">+</b><em class="emphasis">n</em></b></dt><dd><p>Remove the <em class="emphasis">n</em>th directory in the stack, counting from 0.</p></dd>



<dt><b><b class="emphasis-bold">-</b><em class="emphasis">n</em></b></dt><dd><p>Remove <em class="emphasis">n</em>th entry from the bottom of the stack, counting
from 0.</p></dd>

</dl>


</td></tr><tr><td valign="top">printf</td><td><p><b class="emphasis-bold">printf</b> <em class="emphasis">string</em> [<em class="emphasis">arguments</em>]</p><p><a name="INDEX-1459" />Format a string like the C library <b class="emphasis-bold">printf</b> function. Standard percent-sign formats
are recognized in <em class="emphasis">string</em>, such as <b class="emphasis-bold">%i</b> for integer. Escape sequences such as
<b class="emphasis-bold">\n</b> can be included in
<em class="emphasis">string</em> and are automatically recognized; if you
want to include them in <em class="emphasis">arguments</em>, specify a
<em class="emphasis">string</em> of <b class="emphasis-bold">%b</b>. You
can escape characters in <em class="emphasis">arguments</em> to output a
string suitable for input to other commands by specifying a
<em class="emphasis">string</em> of <b class="emphasis-bold">%q</b>.</p>


<h4 class="refsect2">Examples</h4>


<blockquote><pre class="code">$ <tt class="userinput"><b>printf "Previous command: %i\n" "$(($HISTCMD-1))"</b></tt>
Previous command: 534
$ <tt class="userinput"><b>echo $PAGER</b></tt>
less -E
$ <tt class="userinput"><b>printf "%q\n" "\t$PAGER"</b></tt>
\\tless\ -E</pre></blockquote>


<p>The last command probably would be used to record a setting in a file
where it could be read and assigned by another shell script.</p>


</td></tr><tr><td valign="top">pushd</td><td><p><b class="emphasis-bold">pushd</b> <em class="emphasis">directory</em></p><p><b class="emphasis-bold">pushd</b> [<em class="emphasis">options</em>]</p><p><a name="INDEX-1460" />By default, switch top two directories on stack. If specified, add
a new directory to the top of the stack instead, and <b class="emphasis-bold">cd</b> to it.</p>


<?troff .Nd 10?><h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">+</b><em class="emphasis">n</em></b></dt><dd><p>Rotate the stack to place the <em class="emphasis">n</em>th (counting from 0)
directory at the top.</p></dd>



<dt><b><b class="emphasis-bold">-</b><em class="emphasis">n</em></b></dt><dd><p>Rotate the stack to place the <em class="emphasis">n</em>th directory from the bottom
of the stack at the top.</p></dd>

</dl>


</td></tr><tr><td valign="top">pwd</td><td><p><b class="emphasis-bold">pwd</b> [<b class="emphasis-bold">-P</b>]</p><p><a name="INDEX-1461" />Display the current working directory's absolute pathname. By
default, any symbolic directories used when reaching the current
directory are displayed, but with the <b class="emphasis-bold">-P</b> option the real names are displayed
instead.</p>


</td></tr><tr><td valign="top">read</td><td><p><b class="emphasis-bold">read</b> [<em class="emphasis">options</em>] <em class="emphasis">variable1</em> [<em class="emphasis">variable2</em> <em class="emphasis">...</em>]</p><p><a name="INDEX-1462" />Read one line of standard input, and assign each word (as
defined by IFS) to the corresponding <em class="emphasis">variable</em>,
with all leftover words assigned to the last variable. If only one
variable is specified, the entire line will be assigned to that
variable.  The return status is 0 unless <em class="emphasis">EOF</em> is
reached, a distinction that is useful for running loops over input
files. If no variable names are provided, read the entire string into
the environment variable REPLY.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b> <em class="emphasis">var</em></b></dt><dd><p>Read each word into an element of <em class="emphasis">var</em>,
which is treated as an array variable.</p></dd>



<dt><b><b class="emphasis-bold">-d</b> <em class="emphasis">char</em></b></dt><dd><p>Stop reading the line at <em class="emphasis">char</em> instead of at
the newline.</p></dd>



<dt><b><b class="emphasis-bold">-e</b></b></dt><dd><p>Line editing and command history are enabled during input.</p></dd>



<dt><b><b class="emphasis-bold">-n</b> <em class="emphasis">num</em> </b></dt><dd><p>Read only <em class="emphasis">num</em> characters from the line.</p></dd>



<dt><b><b class="emphasis-bold">-p</b> <em class="emphasis">string</em> </b></dt><dd><p>Display the prompt <em class="emphasis">string</em> to the user
before reading each line, if input is interactive.</p></dd>



<dt><b><b class="emphasis-bold">-r</b></b></dt><dd><p>Raw mode; ignore \ as a line continuation character.</p></dd>



<dt><b><b class="emphasis-bold">-s</b></b></dt><dd><p>Do not echo the characters entered by the user (useful for
reading a password).</p></dd>



<dt><b><b class="emphasis-bold">-t</b> <em class="emphasis">seconds</em></b></dt><dd><p>Time out and return without setting any variables if input is
interactive and no input has been entered for
<em class="emphasis">seconds</em> seconds.</p></dd>

</dl>


<h4 class="refsect2">Examples</h4>


<blockquote><pre class="code">$ <tt class="userinput"><b>read first last address</b></tt>
Sarah Caldwell 123 Main Street
$ <tt class="userinput"><b>echo "$last, $first\n$address"</b></tt>
Caldwell, Sarah
123 Main Street</pre></blockquote>


<p>The following commands, which read a password into the variable
<b class="emphasis-bold">$user_pw</b> and then display its value,
use recently added options that are not in all versions of <b class="emphasis-bold">bash</b> in current use.</p>


<blockquote><pre class="code">$ <tt class="userinput"><b>read -sp "Enter password (will not appear on screen)" user_pw</b></tt>
Enter password (will not appear on screen)
$ <tt class="userinput"><b>echo $user_pw</b></tt>
You weren't supposed to know!</pre></blockquote>


<p>The following script reads input from the system's password file,
which uses colons to delimit fields (making it a popular subject for
examples of input parsing).</p>


<blockquote><pre class="code">IFS=:
cat /etc/passwd |
while
read account pw user group gecos home shell
do
echo "Account name $account has user info: $gecos"
done</pre></blockquote>


</td></tr><tr><td valign="top">readonly</td><td><p><b class="emphasis-bold">readonly</b> [<em class="emphasis">options</em>] [<em class="emphasis">variable1</em> <em class="emphasis">variable2</em> <em class="emphasis">...</em>]</p><p><a name="INDEX-1463" />Prevent the specified shell variables from being assigned new values.
Variables can be accessed (read) but not overwritten. In <b class="emphasis-bold">bash</b>, the syntax
<em class="emphasis">variable</em><b class="emphasis-bold">=</b><em class="emphasis">value</em> can be used
to assign a new value that cannot be changed.</p>


<?troff .rm CURRENT?><h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>Treat the following names as array variables.</p></dd>



<dt><b><b class="emphasis-bold">-f</b></b></dt><dd><p>Treat the following names as functions, and set them read-only
so that they cannot be changed.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Display all read-only variables (default).</p></dd>

</dl>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">return</td><td><p><b class="emphasis-bold">return</b> [<em class="emphasis">n</em>]</p><p><a name="INDEX-1464" />Used inside a function definition. Exit the function with status
<em class="emphasis">n</em> or with the exit status of the previously executed command.</p>


</td></tr><tr><td valign="top">select</td><td><p><b class="emphasis-bold">select</b> <em class="emphasis">name</em> [ <b class="emphasis-bold">in</b> <em class="emphasis">wordlist</em> <b class="emphasis-bold">;</b> ]</p><p>  <b class="emphasis-bold">do</b></p><p>    <em class="emphasis">commands</em></p><p>  <b class="emphasis-bold">done</b></p><p><a name="INDEX-1465" />Choose a value for <em class="emphasis">name</em> by displaying the words in
<em class="emphasis">wordlist</em> to the user and prompting for a choice.  Store
user input in the variable REPLY and the chosen word in
<em class="emphasis">name</em>. Then execute <em class="emphasis">commands</em> repeatedly until they
execute a <b class="emphasis-bold">break</b> or <b class="emphasis-bold">return</b>. Default prompt can be changed by
setting the PS3 shell variable.</p>


</td></tr><tr><td valign="top">set</td><td><p><b class="emphasis-bold">set</b> [<em class="emphasis">options</em>] [<em class="emphasis">arg1</em> <em class="emphasis">arg2</em> <em class="emphasis">...</em>]</p><p><a name="INDEX-1466" />With no arguments, <b class="emphasis-bold">set</b> prints the
values of all variables known to the current shell. Options can be
enabled (-<em class="emphasis">option</em>) or disabled
(+<em class="emphasis">option</em>).  Options also can be set when the
shell is invoked, via <b class="emphasis-bold">bash</b>.  Arguments
are assigned in order to <b class="emphasis-bold">$1</b>, <b class="emphasis-bold">$2</b>, and so on.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-</b></b></dt><dd><p>Turn off <b class="emphasis-bold">-v</b> and <b class="emphasis-bold">-x</b>, and turn off option processing.</p></dd>



<dt><b><b class="emphasis-bold">--</b></b></dt><dd><p>Used as the last option; <b class="emphasis-bold">--</b> turns off option processing
so that arguments beginning with - are not misinterpreted as options.
(For example, you can set <b class="emphasis-bold">$1</b> to -1.)  If no arguments are given
after <b class="emphasis-bold">--</b>, unset the positional parameters.</p></dd>



<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>From now on, automatically mark variables for export
after defining or changing them.</p></dd>



<dt><b><b class="emphasis-bold">-b</b></b></dt><dd><p>Report background job status at termination, instead of waiting for next
shell prompt.</p></dd>



<dt><b><b class="emphasis-bold">-e</b></b></dt><dd><p>Exit if a command yields a nonzero exit status.</p></dd>



<dt><b><b class="emphasis-bold">-f</b></b></dt><dd><p>Do not expand filename metacharacters 
(e.g., <b class="emphasis-bold">* ? [ ]</b>). Wildcard expansion
is sometimes called <em class="emphasis">globbing</em>.</p></dd>



<dt><b><b class="emphasis-bold">-h</b></b></dt><dd><p>Locate commands as they are defined, and remember them.</p></dd>



<dt><b><b class="emphasis-bold">-k</b></b></dt><dd><p>Assignment of environment variables (<em class="emphasis">var</em><b class="emphasis-bold">=</b><em class="emphasis">value</em>)
will take effect regardless of where they appear on the command line. Normally, assignments must precede the command name.</p></dd>



<dt><b><b class="emphasis-bold">-m</b></b></dt><dd><p>Monitor mode.
Enable job control; background jobs executes in a separate process
group. <b class="emphasis-bold">-m</b> usually is set automatically.</p></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>Read commands, but don't execute. Useful for checking errors, particularly for shell scripts.</p></dd>



<dt><b><b class="emphasis-bold">-o</b> [<em class="emphasis">m</em>]</b></dt><dd><p>List shell modes, or turn on mode <em class="emphasis">m</em>.
Many modes can be set by other options. The modes can be turned off
through the <b class="emphasis-bold">+o</b> option. Modes are:</p>


<dl>
<dt><b><b class="emphasis-bold">allexport</b></b></dt><dd><p>Same as <b class="emphasis-bold">-a</b>.</p></dd>



<dt><b><b class="emphasis-bold">braceexpand</b></b></dt><dd><p>Same as <b class="emphasis-bold">-B</b>.</p></dd>



<dt><b><b class="emphasis-bold">emacs</b></b></dt><dd><p>Enter Emacs editing mode (on by default).</p></dd>



<dt><b><b class="emphasis-bold">errexit</b></b></dt><dd><p>Same as <b class="emphasis-bold">-e</b>.</p></dd>



<dt><b><b class="emphasis-bold">hashall</b></b></dt><dd><p>Same as <b class="emphasis-bold">-h</b>.</p></dd>



<dt><b><b class="emphasis-bold">histexpand</b></b></dt><dd><p>Same as <b class="emphasis-bold">-H</b>.</p></dd>



<dt><b><b class="emphasis-bold">history</b></b></dt><dd><p>Default. Preserve command history.</p></dd>



<dt><b><b class="emphasis-bold">ignoreeof</b></b></dt><dd><p>Don't allow use of a single <b class="emphasis-bold">Ctrl-D</b> (the end-of-file or EOF character) to log off; use the <b class="emphasis-bold">exit</b> command to log off. This has the same
effect as setting the shell variable IGNOREEOF=1.</p></dd>



<dt><b><b class="emphasis-bold">interactive-comments</b></b></dt><dd><p>Treat all words beginning with #, and all
subsequent words, as comments.</p></dd>



<dt><b><b class="emphasis-bold">keyword</b></b></dt><dd><p>Same as <b class="emphasis-bold">-k</b>.</p></dd>



<dt><b><b class="emphasis-bold">monitor</b></b></dt><dd><p>Same as <b class="emphasis-bold">-m</b>.</p></dd>



<dt><b><b class="emphasis-bold">noclobber</b></b></dt><dd><p>Same as <b class="emphasis-bold">-C</b>.</p></dd>



<dt><b><b class="emphasis-bold">noexec</b></b></dt><dd><p>Same as <b class="emphasis-bold">-n</b>.</p></dd>



<dt><b><b class="emphasis-bold">noglob</b></b></dt><dd><p>Same as <b class="emphasis-bold">-f</b>.</p></dd>



<dt><b><b class="emphasis-bold">notify</b></b></dt><dd><p>Same as <b class="emphasis-bold">-b</b>.</p></dd>



<dt><b><b class="emphasis-bold">nounset</b></b></dt><dd><p>Same as <b class="emphasis-bold">-u</b>.</p></dd>



<dt><b><b class="emphasis-bold">onecmd</b></b></dt><dd><p>Same as <b class="emphasis-bold">-t</b>.</p></dd>



<dt><b><b class="emphasis-bold">physical</b></b></dt><dd><p>Same as <b class="emphasis-bold">-P</b>.</p></dd>



<dt><b><b class="emphasis-bold">posix</b></b></dt><dd><p>Match POSIX standard.</p></dd>



<dt><b><b class="emphasis-bold">privileged</b></b></dt><dd><p>Same as <b class="emphasis-bold">-p</b>.</p></dd>



<dt><b><b class="emphasis-bold">verbose</b></b></dt><dd><p>Same as <b class="emphasis-bold">-v</b>.</p></dd>



<dt><b><b class="emphasis-bold">vi</b></b></dt><dd><p>Enable <b class="emphasis-bold">vi</b>-style command-line editing.</p></dd>



<dt><b><b class="emphasis-bold">xtrace</b></b></dt><dd><p>Same as <b class="emphasis-bold">-x</b>.</p></dd>

</dl></dd>



<dt><b><b class="emphasis-bold">+o</b> [<em class="emphasis">m</em>]</b></dt><dd><p>Display modes or turn off mode <em class="emphasis">m</em>. See the
<b class="emphasis-bold">-o</b> option for a list of modes.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Start up as a privileged user; don't process <em class="emphasis">$HOME/.profile</em>.</p></dd>



<dt><b><b class="emphasis-bold">-t</b></b></dt><dd><p>Exit after one command is executed.</p></dd>



<dt><b><b class="emphasis-bold">-u</b></b></dt><dd><p>Indicate an error when user tries to use a variable that is undefined.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Show each shell command line when read.</p></dd>



<dt><b><b class="emphasis-bold">-x</b></b></dt><dd><p>Show commands and arguments when executed, preceded by a
<b class="emphasis-bold">+</b> or the prompt defined by the PS4
shell variable. This provides step-by-step debugging of shell scripts.
(Same as <b class="emphasis-bold">-o xtrace</b>.)</p></dd>



<dt><b><b class="emphasis-bold">-B</b></b></dt><dd><p>Default. Enable brace expansion.</p></dd>



<dt><b><b class="emphasis-bold">-C</b></b></dt><dd><p>Don't allow output redirection (<b class="emphasis-bold">&gt;</b>) to overwrite an existing file.</p></dd>



<dt><b><b class="emphasis-bold">-H</b></b></dt><dd><p>Default. Enable <b class="emphasis-bold">!</b> and <b class="emphasis-bold">!!</b> commands.</p></dd>



<dt><b><b class="emphasis-bold">-P</b></b></dt><dd><p>Print absolute pathnames in response to
<b class="emphasis-bold">pwd</b>. By default, <b class="emphasis-bold">bash</b>
includes symbolic links in its response to <b class="emphasis-bold">pwd</b>.</p></dd>

</dl>


<h4 class="refsect2">Examples</h4>


<blockquote><pre class="code"><tt class="userinput"><b>set -- "$num" -20 -30</b></tt>  Set $1 to $num, $2 to -20, $3 to -30
<tt class="userinput"><b>set -vx</b></tt>                Read each command line; show it;
                                              execute it; show it again (with arguments)
<tt class="userinput"><b>set +x</b></tt>                 Stop command tracing
<tt class="userinput"><b>set -o noclobber</b></tt>       Prevent file overwriting
<tt class="userinput"><b>set +o noclobber</b></tt>       Allow file overwriting again</pre></blockquote>


</td></tr><tr><td valign="top">shift</td><td><p><b class="emphasis-bold">shift</b> [<em class="emphasis">n</em>]</p><p><a name="INDEX-1467" /><a name="INDEX-1468" />Shift positional arguments (e.g., <b class="emphasis-bold">$2</b>
becomes <b class="emphasis-bold">$1</b>).  If <em class="emphasis">n</em>
is given, shift to the left <em class="emphasis">n</em> places.</p>




</td></tr><tr><td valign="top">source</td><td><p><b class="emphasis-bold">source</b> <em class="emphasis">file</em> [<em class="emphasis">arguments</em>]</p><p><a name="INDEX-1469" />Read and execute lines in
<em class="emphasis">file</em>. <em class="emphasis">file</em> does not have to
be executable but must reside in a directory searched by PATH.</p>


</td></tr><tr><td valign="top">suspend</td><td><p><b class="emphasis-bold">suspend</b> [<b class="emphasis-bold">-f</b>]</p><p><a name="INDEX-1470" />Same as <b class="emphasis-bold">Ctrl-Z</b>. Often used to stop an
<b class="emphasis-bold">su</b> command.</p>


<h4 class="refsect2">Option</h4>


<dl>
<dt><b><b class="emphasis-bold">-f</b></b></dt><dd><p>Force suspend, even if shell is a login shell.</p></dd>

</dl>


</td></tr><tr><td valign="top">test</td><td><p><b class="emphasis-bold">test</b> <em class="emphasis">condition</em></p><p>or</p><p><b class="emphasis-bold">[</b> <em class="emphasis">condition</em> <b class="emphasis-bold">]</b></p><p><a name="INDEX-1471" />Evaluate a <em class="emphasis">condition</em> and, if its value is true,
return a zero exit status; otherwise, return a nonzero exit status. An
alternate form of the command uses <b class="emphasis-bold">[]</b> rather than the word
<em class="emphasis">test</em>.  <em class="emphasis">condition</em> is
constructed using the following expressions. Conditions are true if
the description holds true.</p>


<h4 class="refsect2">File conditions</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> exists.</p></dd>



<dt><b><b class="emphasis-bold">-b</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a block special file.</p></dd>



<dt><b><b class="emphasis-bold">-c</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a character special file.</p></dd>



<dt><b><b class="emphasis-bold">-d</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a directory.</p></dd>



<dt><b><b class="emphasis-bold">-e</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> exists.</p></dd>



<dt><b><b class="emphasis-bold">-f</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a regular file.</p></dd>



<dt><b><b class="emphasis-bold">-g</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> has the set-group-ID bit set.</p></dd>



<dt><b><b class="emphasis-bold">-h</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a symbolic link.</p></dd>



<dt><b><b class="emphasis-bold">-k</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> has its sticky bit
(no longer used) set.</p></dd>



<dt><b><b class="emphasis-bold">-p</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a named pipe (FIFO).</p></dd>



<dt><b><b class="emphasis-bold">-r</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is readable.</p></dd>



<dt><b><b class="emphasis-bold">-s</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> has a size greater than 0.</p></dd>



<dt><b><b class="emphasis-bold">-t</b> [<em class="emphasis">n</em>]</b></dt><dd><p>The open file descriptor <em class="emphasis">n</em> is associated with a terminal device;
default <em class="emphasis">n</em> is 1.</p></dd>



<dt><b><b class="emphasis-bold">-u</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> has its set-user-ID bit set.</p></dd>



<dt><b><b class="emphasis-bold">-w</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is writable.</p></dd>



<dt><b><b class="emphasis-bold">-x</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is executable.</p></dd>



<dt><b><b class="emphasis-bold">-G</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em>'s group is the process's effective group ID.</p></dd>



<dt><b><b class="emphasis-bold">-L</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a symbolic link.</p></dd>



<dt><b><b class="emphasis-bold">-N</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> has been modified since its last time of access.</p></dd>



<dt><b><b class="emphasis-bold">-O</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em>'s owner is the process's effective user ID.</p></dd>



<dt><b><b class="emphasis-bold">-S</b> <em class="emphasis">file</em></b></dt><dd><p><em class="emphasis">file</em> is a socket.</p></dd>



<dt><b><em class="emphasis">f1</em>  <b class="emphasis-bold">-ef</b> <em class="emphasis">f2</em></b></dt><dd><p>Files <em class="emphasis">f1</em> and <em class="emphasis">f2</em> are
linked (refer to same file through a hard link).</p></dd>



<dt><b><em class="emphasis">f1</em>  <b class="emphasis-bold">-nt</b> <em class="emphasis">f2</em></b></dt><dd><p>File <em class="emphasis">f1</em> is newer than <em class="emphasis">f2</em>.</p></dd>



<dt><b><em class="emphasis">f1</em>  <b class="emphasis-bold">-ot</b> <em class="emphasis">f2</em></b></dt><dd><p>File <em class="emphasis">f1</em> is older than <em class="emphasis">f2</em>.</p></dd>

</dl>


<h4 class="refsect2">String conditions</h4>


<dl>
<dt><b><b class="emphasis-bold">-n</b> <em class="emphasis">s1</em></b></dt><dd><p>String <em class="emphasis">s1</em> has nonzero length.</p></dd>



<dt><b><b class="emphasis-bold">-o</b> <em class="emphasis">s1</em></b></dt><dd><p>Shell option <em class="emphasis">s1</em> is set. Shell options are
described under the <b class="emphasis-bold">set</b> built-in
command.</p></dd>



<dt><b><b class="emphasis-bold">-z</b> <em class="emphasis">s1</em></b></dt><dd><p>String <em class="emphasis">s1</em> has 0 length.</p></dd>



<dt><b><em class="emphasis">s1</em> <b class="emphasis-bold">=</b> <em class="emphasis">s2</em></b></dt><dd><p>Strings <em class="emphasis">s1</em> and <em class="emphasis">s2</em> are identical.</p></dd>



<dt><b><em class="emphasis">s1</em> <b class="emphasis-bold">==</b> <em class="emphasis">s2</em></b></dt><dd><p>Strings <em class="emphasis">s1</em> and <em class="emphasis">s2</em> are identical.</p></dd>



<dt><b><em class="emphasis">s1</em> <b class="emphasis-bold">!=</b> <em class="emphasis">s2</em></b></dt><dd><p>Strings <em class="emphasis">s1</em> and <em class="emphasis">s2</em> are not identical.</p></dd>



<dt><b><em class="emphasis">s1</em> <b class="emphasis-bold">&lt;</b> <em class="emphasis">s2</em></b></dt><dd><p>String <em class="emphasis">s1</em> is lower in the alphabet (or
other sort in use) than <em class="emphasis">s2</em>. By default, the check
is performed character-by-character against the ASCII character set.</p></dd>



<dt><b><em class="emphasis">s1</em> <b class="emphasis-bold">&gt;</b> <em class="emphasis">s2</em></b></dt><dd><p>String <em class="emphasis">s1</em> is higher in the alphabet (or
other sort in use) than <em class="emphasis">s2</em>.</p></dd>



<dt><b><em class="emphasis">string</em></b></dt><dd><p><em class="emphasis">string</em> is not null.</p></dd>

</dl>


<h4 class="refsect2">Integer comparisons</h4>


<dl>
<dt><b><em class="emphasis">n1</em>  <b class="emphasis-bold">-eq</b> <em class="emphasis">n2</em></b></dt><dd><p><em class="emphasis">n1</em> equals <em class="emphasis">n2</em>.</p></dd>



<dt><b><em class="emphasis">n1</em>  <b class="emphasis-bold">-ge</b> <em class="emphasis">n2</em></b></dt><dd><p><em class="emphasis">n1</em> is greater than or equal to <em class="emphasis">n2</em>.</p></dd>



<dt><b><em class="emphasis">n1</em>  <b class="emphasis-bold">-gt</b> <em class="emphasis">n2</em></b></dt><dd><p><em class="emphasis">n1</em> is greater than <em class="emphasis">n2</em>.</p></dd>



<dt><b><em class="emphasis">n1</em>  <b class="emphasis-bold">-le</b> <em class="emphasis">n2</em></b></dt><dd><p><em class="emphasis">n1</em> is less than or equal to <em class="emphasis">n2</em>.</p></dd>



<dt><b><em class="emphasis">n1</em>  <b class="emphasis-bold">-lt</b> <em class="emphasis">n2</em></b></dt><dd><p><em class="emphasis">n1</em> is less than <em class="emphasis">n2</em>.</p></dd>



<dt><b><em class="emphasis">n1</em>  <b class="emphasis-bold">-ne</b> <em class="emphasis">n2</em></b></dt><dd><p><em class="emphasis">n1</em> does not equal <em class="emphasis">n2</em>.</p></dd>

</dl>


<h4 class="refsect2">Combined forms</h4>


<dl>
<dt><b><b class="emphasis-bold">!</b> <em class="emphasis">condition</em></b></dt><dd><p>True if <em class="emphasis">condition</em> is false.</p></dd>



<dt><b><em class="emphasis">condition1</em> <b class="emphasis-bold">-a</b> <em class="emphasis">condition2</em></b></dt><dd><p>True if both conditions are true.</p></dd>



<dt><b><em class="emphasis">condition1</em> <b class="emphasis-bold">-o</b> <em class="emphasis">condition2</em></b></dt><dd><p>True if either condition is true.</p></dd>

</dl>


<h4 class="refsect2">Examples</h4>


<p>Each of the following examples shows the first line of various statements
that might use a test condition:</p>


<blockquote><pre class="code"><tt class="userinput"><b>while test $# -gt 0</b></tt>            While there are arguments . . .
<tt class="userinput"><b>while [ -n "$1" ]</b></tt>              While the first argument is nonempty . . .
<tt class="userinput"><b>if [ $count -lt 10 ]</b></tt>           If $count is less than 10 . . .
<tt class="userinput"><b>if [ -d RCS ]</b></tt>                  If the RCS directory exists . . .
<tt class="userinput"><b>if [ "$answer" != "y" ]</b></tt>        If the answer is not y . . .
<tt class="userinput"><b>if [ ! -r "$1" -o ! -f "$1" ]</b></tt>  If the first argument is not a
               readable file or a regular file . . .</pre></blockquote>


<a name="INDEX-1472" /></td></tr><tr><td valign="top">times</td><td><p><b class="emphasis-bold">times</b></p><p><a name="INDEX-1473" />Print accumulated process times for user and system.</p>


</td></tr><tr><td valign="top">trap</td><td><p><b class="emphasis-bold">trap</b> [<em class="emphasis">-</em><b class="emphasis-bold">l</b>] [ [<em class="emphasis">commands</em>]<em class="emphasis"> signals</em>]</p><p><a name="INDEX-1474" />Execute <em class="emphasis">commands</em> if any of
<em class="emphasis">signals</em> is received.  Common signals include 0,
1, 2, and 15.  Multiple commands should be quoted as a group and
separated by semicolons internally.  If <em class="emphasis">commands</em>
is the null string (i.e., <b class="emphasis-bold">trap</b> <tt class="literal">"</tt><tt class="literal">"</tt><em class="emphasis">signals</em>), then
<em class="emphasis">signals</em> will be ignored by the shell.  If
<em class="emphasis">commands</em> is omitted entirely, reset processing of
specified signals to the default action.  If both
<em class="emphasis">commands</em> and <em class="emphasis">signals</em> are
omitted, list current trap assignments. See examples at the end of
this entry and under <b class="emphasis-bold">exec</b>.</p>


<h4 class="refsect2">Option</h4>


<dl>
<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>List signals.</p></dd>

</dl>


<h4 class="refsect2">Signals</h4>


<p>Signals are listed along with what triggers them.</p>


<dl>
<dt><b>0</b></dt><dd><p>

Exit from shell (usually when shell script finishes).</p></dd>



<dt><b>1</b></dt><dd><p>Hang up (usually logout).</p></dd>



<dt><b>2</b></dt><dd><p>Interrupt (usually through <b class="emphasis-bold">Ctrl-C</b>).</p></dd>



<dt><b>3</b></dt><dd><p>Quit.</p></dd>



<dt><b>4</b></dt><dd><p>Illegal instruction.</p></dd>



<dt><b>5</b></dt><dd><p>Trace trap.</p></dd>



<dt><b>6</b></dt><dd><p>Abort.</p></dd>



<dt><b>7</b></dt><dd><p>Unused.</p></dd>



<dt><b>8</b></dt><dd><p>Floating-point exception.</p></dd>



<dt><b>9</b></dt><dd><p>Termination.</p></dd>



<dt><b>10</b></dt><dd><p>User-defined.</p></dd>



<dt><b>11</b></dt><dd><p>Reference to invalid memory.</p></dd>



<dt><b>12</b></dt><dd><p>User-defined.</p></dd>



<dt><b>13</b></dt><dd><p>Write to a pipe without a process to read it.</p></dd>



<dt><b>14</b></dt><dd><p>Alarm timeout.</p></dd>



<dt><b>15</b></dt><dd><p>Software termination (usually via <b class="emphasis-bold">kill</b>).</p></dd>



<dt><b>16</b></dt><dd><p>Unused.</p></dd>



<dt><b>17</b></dt><dd><p>Termination of child process.</p></dd>



<dt><b>18</b></dt><dd><p>Continue (if stopped).</p></dd>



<dt><b>19</b></dt><dd><p>Stop process.</p></dd>



<dt><b>20</b></dt><dd><p>

Process suspended (usually through <b class="emphasis-bold">Ctrl-Z</b>).</p></dd>



<dt><b>21</b></dt><dd><p>Background process has tty input.</p></dd>



<dt><b>22</b></dt><dd><p>Background process has tty output.</p></dd>



<dt><b>23</b></dt><dd>
<p>Unused.</p></dd>



<dt><b>24</b></dt><dd>
<p>Unused.</p></dd>



<dt><b>25</b></dt><dd>
<p>Unused.</p></dd>



<dt><b>26</b></dt><dd>
<p>Unused.</p></dd>



<dt><b>27</b></dt>

<dd><p>Unused.</p></dd>



<dt><b>28</b></dt><dd>
<p>Unused.</p></dd>



<dt><b>29</b></dt><dd><p>I/O possible on a channel.</p></dd>

</dl>


<h4 class="refsect2">Examples</h4>


<blockquote><pre class="code"><tt class="userinput"><b>trap "" 2</b></tt>     Ignore signal 2 (interrupts)
<tt class="userinput"><b>trap 2</b></tt>        Obey interrupts again</pre></blockquote>


<p>Remove a <b class="emphasis-bold">$tmp</b> file when the shell program exits or if the user
logs out, presses <b class="emphasis-bold">Ctrl-C</b>, or does a <b class="emphasis-bold">kill</b>:<a name="INDEX-1475" /></p>


<blockquote><pre class="code"><tt class="userinput"><b>trap "rm -f $tmp; exit" 0 1 2 15</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">type</td><td><p><b class="emphasis-bold">type</b> [<em class="emphasis">options</em>] <em class="emphasis">commands</em></p><p><a name="INDEX-1476" />Report absolute pathname of programs invoked for
<em class="emphasis">commands</em> and whether or not they are hashed.</p>


<dl>
<dt><b><b class="emphasis-bold">--</b></b></dt><dd><p>Consider all subsequent strings to be arguments, not options.</p></dd>



<dt><b><b class="emphasis-bold">-a</b>, <b class="emphasis-bold">-all</b></b></dt><dd><p>Print all occurrences of <em class="emphasis">command</em>, not just that which would be
invoked.</p></dd>



<dt><b><b class="emphasis-bold">-p</b>, <b class="emphasis-bold">-path</b></b></dt><dd><p>Print the hashed value of <em class="emphasis">command</em>, which may differ from
the first appearance of <em class="emphasis">command</em> in the PATH.</p></dd>



<dt><b><b class="emphasis-bold">-t</b>, <b class="emphasis-bold">-type</b></b></dt><dd><p>Determine and state if <em class="emphasis">command</em> is an alias, keyword, function,
built-in, or file.</p></dd>

</dl>


<h4 class="refsect2">Example</h4>


<blockquote><pre class="code">$ <tt class="userinput"><b>type mv read</b></tt>
mv is /bin/mv
read is a shell built-in</pre></blockquote>


</td></tr><tr><td valign="top">typeset</td><td><p><b class="emphasis-bold">typeset</b></p><p><a name="INDEX-1477" />See <b class="emphasis-bold">declare</b>.</p>


</td></tr><tr><td valign="top">ulimit</td><td><p><b class="emphasis-bold">ulimit</b> [<em class="emphasis">options</em>] [<em class="emphasis">n</em>]</p><p><a name="INDEX-1478" />Print the value of one or more resource limits, or, if
<em class="emphasis">n</em> is specified, set a resource limit to
<em class="emphasis">n</em>. Resource limits can be either hard (<b class="emphasis-bold">-H</b>) or soft (<b class="emphasis-bold">-S</b>). By default, <b class="emphasis-bold">ulimit</b> sets both limits or prints the soft
limit. The options determine which resource is acted on.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">--</b></b></dt><dd><p>Consider all subsequent strings to be arguments, not options.</p></dd>



<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>Print all current limits.</p></dd>



<dt><b><b class="emphasis-bold">-H</b></b></dt><dd><p>Hard resource limit.</p></dd>



<dt><b><b class="emphasis-bold">-S</b></b></dt><dd><p>Soft resource limit.</p></dd>

</dl>


<h4 class="refsect2">Specific limits</h4>


<p>These options limit specific resource sizes.</p>


<dl>
<dt><b><b class="emphasis-bold">-c</b></b></dt><dd><p>Core files.</p></dd>



<dt><b><b class="emphasis-bold">-d</b></b></dt><dd><p>Size of processes' data segments.</p></dd>



<dt><b><b class="emphasis-bold">-f</b></b></dt><dd><p>Size of shell-created files.</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>Size of memory that the process can lock.</p></dd>



<dt><b><b class="emphasis-bold">-m</b></b></dt><dd><p>Resident set size.</p></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>Number of file descriptors. On many systems, this cannot
be set.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Pipe size, measured in blocks of 512 bytes.</p></dd>



<dt><b><b class="emphasis-bold">-s</b></b></dt><dd><p>Stack size.</p></dd>



<dt><b><b class="emphasis-bold">-t</b></b></dt><dd><p>Amount of CPU time, counted in seconds.</p></dd>



<dt><b><b class="emphasis-bold">-u</b></b></dt><dd><p>Number of processes per user.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Virtual memory used by shell.</p></dd>

</dl>


</td></tr><tr><td valign="top">umask</td><td><p><b class="emphasis-bold">umask</b> [<em class="emphasis">nnn</em>]</p><p><b class="emphasis-bold">umask</b> [<b class="emphasis-bold">-p</b>] [<b class="emphasis-bold">-S</b>]</p><p><a name="INDEX-1479" />Display file creation mask or set file creation mask to octal value
<em class="emphasis">nnn</em>. The file creation mask determines which
permission bits are turned off (e.g., <b class="emphasis-bold">umask
002</b> produces <b class="emphasis-bold">rw-rw-r--</b>).</p>


<?troff .rm CURRENT?><h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Display mask within an <b class="emphasis-bold">umask</b>
command so that a caller can read and execute it.</p></dd>



<dt><b><b class="emphasis-bold">-S</b></b></dt><dd><p>Display <b class="emphasis-bold">umask</b> symbolically, rather than in octal.</p></dd>

</dl>


</td></tr><tr><td valign="top">unalias</td><td><p><b class="emphasis-bold">unalias</b> [<b class="emphasis-bold">-a</b>] <em class="emphasis">names</em></p><p><a name="INDEX-1480" />Remove <em class="emphasis">names</em> from the alias list. See also
<b class="emphasis-bold">alias</b>.</p>


<h4 class="refsect2">Option</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>Remove all aliases.</p></dd>

</dl>


</td></tr><tr><td valign="top">unset</td><td><p><b class="emphasis-bold">unset</b> [<em class="emphasis">options</em>] <em class="emphasis">names</em></p><p><a name="INDEX-1481" />Erase definitions of functions or variables listed in
<em class="emphasis">names</em>.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-f</b></b></dt><dd><p>Expect <em class="emphasis">name</em> to refer to a function.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Expect <em class="emphasis">name</em> to refer to a variable (default).</p></dd>

</dl>


</td></tr><tr><td valign="top">until</td><td><p><b class="emphasis-bold">until</b></p><p>    <em class="emphasis">test-commands</em></p><p>  <b class="emphasis-bold">do</b></p><p>    <em class="emphasis">commands</em></p><p>  <b class="emphasis-bold">done</b></p><p><a name="INDEX-1482" />Execute <em class="emphasis">test-commands</em>
(usually a <b class="emphasis-bold">test</b> or <b class="emphasis-bold">[ ]</b>
command), and if the exit status is nonzero (that is, the test fails),
perform <em class="emphasis">commands</em>; repeat.</p>


</td></tr><tr><td valign="top">wait</td><td><p><b class="emphasis-bold">wait</b> [<em class="emphasis">ID</em>]</p><p><a name="INDEX-1483" />Pause in execution until all background jobs complete (exit status 0
will be returned), or pause until the specified background process
<em class="emphasis">ID</em> or job <em class="emphasis">ID</em> completes (exit
status of <em class="emphasis">ID</em> is returned). Note that the shell
variable $! contains the process ID of the most recent background
process. If job control is not in effect, <em class="emphasis">ID</em> can
be only a process ID number. See <a href="ch07_08.htm">Section 7.8, "Job Control"</a>.</p>


<h4 class="refsect2">Example</h4>


<blockquote><pre class="code">wait $! Wait for last background process to finish</pre></blockquote>


</td></tr><tr><td valign="top">while</td><td><p><b class="emphasis-bold">while</b></p><p>    <em class="emphasis">test-commands</em></p><p>  <b class="emphasis-bold">do</b></p><p>    <em class="emphasis">commands</em></p><p>  <b class="emphasis-bold">done</b></p><p><a name="INDEX-1484" />Execute <em class="emphasis">test-commands</em> (usually a <b class="emphasis-bold">test</b> or <b class="emphasis-bold">[]</b>
command) and if the exit status is 0, perform
<em class="emphasis">commands</em>; repeat.</p>


</td></tr></table>

<p><a name="INDEX-1485" /><a name="INDEX-1486" /></p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch07_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">7.6. Command History</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">7.8. Job Control</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>