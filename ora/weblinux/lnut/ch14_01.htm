<?label 14. CVS and RCS?><html><head><title>CVS and RCS (Linux in a Nutshell, 3rd Edition)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ellen Siever, Stephen Spainhour, Stephen Figgins and Jessica P. Hekman" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="0596000251L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Linux in a Nutshell, 3rd Edition" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Linux in a Nutshell" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Linux in a Nutshell, 3rd Edition</a></td><td width="172" valign="top" align="right"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h1 class="chapter">Chapter 14. CVS and RCS</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch14_01.htm">Basic Concepts</a><br>
<a href="ch14_02.htm">The CVS Utility</a><br>
<a href="ch14_03.htm">CVS Administrator Reference</a><br>
<a href="ch14_04.htm">CVS User Reference</a><br>
<a href="ch14_05.htm">The RCS Utility</a><br>
<a href="ch14_06.htm">Overview of RCS Commands</a><br>
<a href="ch14_07.htm">Basic RCS Operations</a><br>
<a href="ch14_08.htm">General RCS Specifications</a><br>
<a href="ch14_09.htm">Alphabetical Summary of RCS Commands</a></p></div>


<?troff .Pt "CVS and" "RCS" 4 9?>


<p><a name="INDEX-1951" /><a name="INDEX-1952" />

<a name="INDEX-1953" /><a name="INDEX-1954" />

CVS, and the older RCS, offer <em class="firstterm">version control</em> (or <em class="firstterm">revision control</em>), the
practice of maintaining information about a project's evolution so
that prior versions may be retrieved, changes tracked, and, most
importantly, the efforts of a team of developers coordinated.</p>

















<div class="sect1">
<h2 class="sect1">14.1. Basic Concepts</h2>


<p><a name="INDEX-1955" /><a name="INDEX-1956" /><a name="INDEX-1957" />RCS (Revision Control System) works within a single directory. To
accommodate large projects using a hierarchy of several directories,
CVS creates two new concepts called the
<em class="firstterm">repository</em> and the
<em class="firstterm">sandbox</em>.</p>


<p><a name="INDEX-1958" /><a name="INDEX-1959" />The repository (also called an <em class="firstterm">archive</em>) is the
centralized storage area, managed by the version control system and
the repository administrator, which stores the projects' files. The
repository contains information required to reconstruct historical
versions of the files in a project. An administrator sets up and
controls the repository using the procedures and commands later in <a href="ch14_03.htm">Section 14.3, "CVS Administrator Reference"</a>.</p>


<p><a name="INDEX-1960" /><a name="INDEX-1961" />A <em class="firstterm">sandbox</em> (also called a <em class="firstterm">working
directory</em>) contains copies of versions of files from the
repository. New development occurs in sandboxes, and any number of
sandboxes may be created from a single repository. The sandboxes are
independent of one another and may contain files from different
stages of the development of the same project.  Users set up and
control sandboxes using the procedures and commands found in <a href="ch14_04.htm">Section 14.4, "CVS User Reference"</a>, later in this chapter.</p>


<p>In a typical interaction with the version control system, a developer checks
out the most current code from the repository, makes changes,
tests the results, and then commits those changes back to the
repository when they are deemed satisfactory.</p>



<a name="cvspr-primer-lock-and-merge" /><div class="sect2">
<h3 class="sect2">14.1.1. Locking and Merging</h3>


<p><a name="INDEX-1962" /><a name="INDEX-1963" /><a name="INDEX-1964" />Some systems, including RCS, use a <em class="firstterm">locking
model</em> to coordinate the efforts of multiple developers by
serializing file modifications. Before making changes to a file, a
developer must not only obtain a copy of it, but he must also request
and obtain a lock on it from the system. This lock serves to prevent
(really dissuade) multiple developers from working on the same file at
the same time. When the changes are committed, the developer unlocks
the file, permitting other developers to gain access to it.</p>


<p>The locking model is pessimistic: it assumes that conflicts
<em class="emphasis">must</em> be avoided. Serialization of
file modifications through locks prevents conflicts. But it is
cumbersome to have to lock files for editing when bug-hunting. Often,
developers will circumvent the lock mechanism to keep working, which
is an invitation to trouble.</p>


<p><a name="INDEX-1965" /><a name="INDEX-1966" />Unlike RCS and SCCS, CVS uses a <em class="firstterm">merging model</em>
which allows everyone to have access to the files at all times and
supports concurrent development. The merging model is optimistic: it
assumes that conflicts are not common and that when they do occur, it
<em class="emphasis">usually</em> isn't difficult to resolve them.</p>


<p>CVS is capable of operating under a locking model via the
<b class="emphasis-bold">-L</b> and <b class="emphasis-bold">-l</b> options to the
<b class="emphasis-bold">admin</b> command. Also, CVS has special commands
(<b class="emphasis-bold">edit</b> and <b class="emphasis-bold">watch</b>) for those who
want additional development coordination support. CVS uses locks
internally to prevent corruption when multiple people are accessing
the repository simultaneously, but this is different from the
user-visible locks of the locking model discussed here.</p>
</div>









<a name="cvspr-primer-conflicts" /><div class="sect2">
<h3 class="sect2">14.1.2. Conflicts and Merging</h3>


<p><a name="INDEX-1967" /><a name="INDEX-1968" />In the event that two developers commit changes to the same version
of a file, CVS automatically defers the commit of the second
committer's file. The second developer then issues the
<b class="emphasis-bold">cvs update</b> command, which merges the first developer's
changes into the local file. In many cases, the changes will be in different
areas of the file, and the merge is successful. However, if both
developers have made changes to the same area of the file, the second
to commit will have to resolve the conflict. This involves examination of
the problematic area(s) of the file and selection among the multiple
versions or making changes that resolve the conflict.</p>


<p>CVS only detects textual conflicts, but conflict resolution is
concerned with keeping the project as a whole logically
consistent. Therefore, conflict resolution sometimes involves changing
files other than the one about which CVS complained.</p>


<p>For example, if one developer adds a parameter to a function definition,
it may be necessary for all the calls to that function to be modified
to pass the additional parameter. This is a logical conflict, so its
detection and resolution is the job of the developers (with support from
tools like compilers and debuggers); CVS won't notice the problem.</p>


<p>In any merge situation, whether or not there was a conflict,
the second developer to commit will often want to retest the resulting
version of the project because it has changed since the original commit.
Once it passes, the developer will need to recommit the file.</p>
</div>









<a name="cvspr-primer-tagging" /><div class="sect2">
<h3 class="sect2">14.1.3. Tagging</h3>


<p><a name="INDEX-1969" /><a name="INDEX-1970" /><a name="INDEX-1971" />CVS tracks file versions by revision number, which can be used to retrieve
a particular revision from the repository. In addition, it is possible to
create symbolic tags so that a group of files (or an entire project) can be
referred to by a single identifier even when the revision numbers of the files
are not the same (which is most often the case). This capability is often used
to keep track of released versions or other important project milestones.</p>


<p>For example, the symbolic tag <tt class="literal">hello-1_0</tt> might refer
to revision number 1.3 of <em class="filename">hello.c</em> and revision number
1.1 of <em class="filename">Makefile</em> (symbolic tags are created with the
<b class="emphasis-bold">tag</b> and <b class="emphasis-bold">rtag</b> commands).</p>
</div>









<a name="cvspr-primer-branching" /><div class="sect2">
<h3 class="sect2">14.1.4. Branching</h3>


<p><a name="INDEX-1972" /><a name="INDEX-1973" /><a name="INDEX-1974" />The simplest form of development is <em class="firstterm">linear</em>, in
which there is a succession of revisions to a file, each derived from
the prior revision. Many projects can get by with a completely linear
development process, but larger projects (as measured by number of
files, number of developers, and/or the size of the user community)
often run into maintenance issues that require additional
capabilities. Sometimes, it is desirable to do some speculative
development while the main line of development continues
uninterrupted. Other times, bugs in the currently released version
must be fixed while work on the next version is underway. In both of
these cases, the solution is to create a branch
(<em class="firstterm">fork</em>) from an appropriate point in the
development of the project. If at a future point some or all of the
changes on the branch are needed back on the main line of development
(or elsewhere), they can be merged in
(<em class="firstterm">joined</em>).</p>


<p>Branches are forked with the <b class="emphasis-bold">tag -b</b> command;
they are joined with the <b class="emphasis-bold">update -j</b> command.</p>
</div>








<a name="INDEX-1975" /><a name="INDEX-1976" />
</div>
























































































































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.8. Alphabetical Summary of Commands</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">14.2. The CVS Utility</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
