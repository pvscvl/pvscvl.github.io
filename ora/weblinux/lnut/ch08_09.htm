<?label 8.9. Built-in csh and tcsh Commands?><html><head><title>Built-in csh and tcsh Commands (Linux in a Nutshell, 3rd Edition)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ellen Siever, Stephen Spainhour, Stephen Figgins and Jessica P. Hekman" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="0596000251L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Linux in a Nutshell, 3rd Edition" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Linux in a Nutshell" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Linux in a Nutshell, 3rd Edition</a></td><td width="172" valign="top" align="right"><a href="ch09_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">8.9. Built-in csh and tcsh Commands</h2>


<p><a name="INDEX-1587" />
</p>


<table cellpadding="5" border="1"><tr><td valign="top">@</td><td><p><b class="emphasis-bold">@</b> [<em class="emphasis">variable</em>[<em class="emphasis">n</em>]<b class="emphasis-bold">=</b><em class="emphasis">expression</em>]</p><a name="INDEX-1588" /><p>Assign the value of the arithmetic <em class="emphasis">expression</em> to <em class="emphasis">variable</em> 
or to the <em class="emphasis">n</em>th element of <em class="emphasis">variable</em> if the index <em class="emphasis">n</em> 
is specified. With no <em class="emphasis">variable</em> or <em class="emphasis">expression</em>
specified, print the values of all shell variables (same as <b class="emphasis-bold">set</b>).
Expression 
operators as well as examples are listed under <a href="ch08_05.htm">Section 8.5, "Expressions"</a>
earlier in this chapter. Two special forms also are valid:</p>


<dl>
<dt><b>@ <em class="emphasis">variable</em><b class="emphasis-bold">++</b></b></dt>
<dd><p>Increment <em class="emphasis">variable</em> by 1.</p></dd>



<dt><b>@ <em class="emphasis">variable</em><b class="emphasis-bold">--</b></b></dt> 
<dd><p>Decrement <em class="emphasis">variable</em> by 1.</p></dd>

</dl>


</td></tr><tr><td valign="top">#</td><td><p><b class="emphasis-bold">#</b></p><a name="INDEX-1589" /><p>Ignore all text that follows on the same line. <b class="emphasis-bold">#</b> is used in shell
scripts as the comment character and is not really a command.</p>


</td></tr><tr><td valign="top">#!</td><td><p><b class="emphasis-bold">#!</b><em class="emphasis">shell</em></p><a name="INDEX-1590" /><p>Used as the first line of a script to
invoke the named <em class="emphasis">shell</em> (with optional arguments). Not supported
in all shells. For example:</p>


<blockquote><pre class="code"><tt class="userinput"><b>#!/bin/csh -f</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">:</td><td><p><b class="emphasis-bold">:</b></p><a name="INDEX-1591" /><p>Null command. Returns an exit status of 0.
The colon command often is put as the first character of a Bourne-
or Korn-shell script to act as a place-holder to keep a
# (hash) from accidentally becoming the first character.</p>


</td></tr><tr><td valign="top">alias</td><td><p><b class="emphasis-bold">alias</b> [<em class="emphasis">name</em> [<em class="emphasis">command</em>]]</p><a name="INDEX-1592" /><p>Assign <em class="emphasis">name</em> as the shorthand name, or alias, for <em class="emphasis">command</em>.
If <em class="emphasis">command</em> is omitted, print the alias for <em class="emphasis">name</em>; if
<em class="emphasis">name</em> also is omitted, print all aliases. Aliases can be defined
on the command line, but more often they are stored in <em class="emphasis">.cshrc</em>
so that they take effect upon logging in.
(See the sample <em class="emphasis">.cshrc</em> file earlier in this chapter.)
Alias definitions can
reference command-line arguments, much like the history list. Use
<b class="emphasis-bold">\!*</b> to refer to all command-line arguments, <b class="emphasis-bold">\!^</b> for
the first argument, <b class="emphasis-bold">\!\!:2</b> for the second, <b class="emphasis-bold">\!$</b> for the last, and so on. An alias
<em class="emphasis">name</em> can be any valid Unix command; however, you lose the
original command's meaning unless you type \<em class="emphasis">name</em>. See also
<b class="emphasis-bold">unalias</b> and the "Special Aliases in tcsh" section.</p>


<h4 class="refsect2">Examples</h4>


<p>Set the size for <b class="emphasis-bold">xterm</b> windows under the X Window System:</p>


<blockquote><pre class="code"><tt class="userinput"><b>alias R 'set noglob; eval <literal>`</literal>resize` unset noglob'</b></tt></pre></blockquote>


<p>Show aliases that contain the string <b class="emphasis-bold">ls</b>:</p>


<blockquote><pre class="code"><tt class="userinput"><b>alias | grep ls</b></tt></pre></blockquote>


<p>Run <b class="emphasis-bold">nroff</b> on all command-line arguments:</p>


<blockquote><pre class="code"><tt class="userinput"><b>alias ms 'nroff -ms \!*'</b></tt></pre></blockquote>


<p>Copy the file that is named as the first argument:</p>


<blockquote><pre class="code"><tt class="userinput"><b>alias back 'cp \!^ \!^.old'</b></tt></pre></blockquote>


<p>Use the regular <b class="emphasis-bold">ls</b>, not its alias:</p>


<blockquote><pre class="code">% <tt class="userinput"><b>\ls</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">alloc</td><td><p><b class="emphasis-bold">alloc</b></p><a name="INDEX-1593" /><p>Print totals of used and free memory.</p>


</td></tr><tr><td valign="top">bg</td><td><p><b class="emphasis-bold">bg</b> [<em class="emphasis">jobIDs</em>]</p><a name="INDEX-1594" /><p>Put the current job or the <em class="emphasis">jobIDs</em> in the background.</p>


<h4 class="refsect2">Example</h4>


<p>To place a time-consuming process in the background, you might begin
with:</p>


<blockquote><pre class="code">4% <tt class="userinput"><b>nroff -ms report</b></tt> <tt class="userinput"><b>Ctrl-Z</b></tt></pre></blockquote>


<p>and then issue any one of the following:</p>


<blockquote><pre class="code">5% <tt class="userinput"><b>bg</b></tt>
5% <tt class="userinput"><b>bg %</b></tt>       Current job
5% <tt class="userinput"><b>bg %1</b></tt>      Job number 1
5% <tt class="userinput"><b>bg %nr</b></tt>     Match initial string nroff
5% <tt class="userinput"><b>% &amp;</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">bindkey</td><td><p><b class="emphasis-bold">bindkey</b> [<em class="emphasis">options</em>] [<em class="emphasis">key</em>] [<em class="emphasis">command</em>]</p><a name="INDEX-1595" /><p><b class="emphasis-bold">tcsh</b> only.
Display all key bindings, or bind a key to a command.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-a</b></b></dt><dd><p>List standard and alternate key bindings.</p></dd>



<dt><b><b class="emphasis-bold">-b</b> <em class="emphasis">key</em></b></dt><dd><p>Expect <em class="emphasis">key</em> to be one of the following: a control character
(in hat notation -- e.g., ^B -- or C notation -- e.g., C-B); a metacharacter
(e.g., M-B); a function key (e.g., F-<em class="emphasis">string</em>); or 
an extended prefix key (e.g., X-B).</p></dd>



<dt><b><b class="emphasis-bold">-c</b> <em class="emphasis">command</em></b></dt><dd><p>Interpret <em class="emphasis">command</em> as a shell, not editor, command.</p></dd>



<dt><b><b class="emphasis-bold">-d</b> <em class="emphasis">key</em></b></dt><dd><p>Bind key to its original binding.</p></dd>



<dt><b><b class="emphasis-bold">-e</b></b></dt><dd><p>Bind to standard Emacs bindings.</p></dd>



<dt><b><b class="emphasis-bold">-k</b> <em class="emphasis">key</em></b></dt><dd><p>Expect <em class="emphasis">key</em> to refer to an arrow (<b class="emphasis-bold">left</b>, <b class="emphasis-bold">right</b>,
<b class="emphasis-bold">up</b>, or <b class="emphasis-bold">down</b>).</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>List and describe all editor commands.</p></dd>



<dt><b><b class="emphasis-bold">-r</b> <em class="emphasis">key</em></b></dt><dd><p>Completely unbind <em class="emphasis">key</em>.</p></dd>



<dt><b><b class="emphasis-bold">-s</b></b></dt><dd><p>Interpret <em class="emphasis">command</em> as a literal string 
and treat as terminal input.</p></dd>



<dt><b><b class="emphasis-bold">-u</b></b></dt><dd><p>Print usage message.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Bind to standard <b class="emphasis-bold">vi</b> bindings.</p></dd>

</dl>


</td></tr><tr><td valign="top">break</td><td><p><b class="emphasis-bold">break</b></p><a name="INDEX-1596" /><p>Resume execution following the <b class="emphasis-bold">end</b> command of the nearest
enclosing <b class="emphasis-bold">while</b> or <b class="emphasis-bold">foreach</b>.</p>


</td></tr><tr><td valign="top">breaksw</td><td><p><b class="emphasis-bold">breaksw</b></p><a name="INDEX-1597" /><p>Break from a <b class="emphasis-bold">switch</b>; continue execution after the <b class="emphasis-bold">endsw</b>.</p>


</td></tr><tr><td valign="top">built-ins</td><td><p><b class="emphasis-bold">built-ins</b></p><a name="INDEX-1598" /><p><b class="emphasis-bold">tcsh</b> only.
Print all built-in shell commands.</p>


</td></tr><tr><td valign="top">bye</td><td><p><b class="emphasis-bold">bye</b></p><a name="INDEX-1599" /><p><b class="emphasis-bold">tcsh</b> only. Same as <b class="emphasis-bold">logout</b>.</p>


</td></tr><tr><td valign="top">case</td><td><p><b class="emphasis-bold">case</b> <em class="emphasis">pattern</em> <b class="emphasis-bold">:</b></p><a name="INDEX-1600" /><p>Identify a <em class="emphasis">pattern</em> in a <b class="emphasis-bold">switch</b>.</p>


</td></tr><tr><td valign="top">cd</td><td><p><b class="emphasis-bold">cd</b> [<em class="emphasis">dir</em>]</p><a name="INDEX-1601" /><p>Change working directory to <em class="emphasis">dir</em>. Default is
user's home directory. If <em class="emphasis">dir</em> is a relative pathname but
is not in the current
directory, the <b class="emphasis-bold">cdpath</b> variable is searched.
See the sample <em class="emphasis">.cshrc</em> file earlier in this chapter.
<b class="emphasis-bold">tcsh</b> includes some options
for <b class="emphasis-bold">cd</b>:</p>


<h4 class="refsect2">tcsh options</h4>


<dl>
<dt><b><b class="emphasis-bold">-</b></b></dt><dd><p>Change to previous directory.</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>Explicitly expand <b class="emphasis-bold">~</b> notation.</p></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>Wrap entries before end-of-line; implies
<b class="emphasis-bold">-p</b>.</p></dd>



<dt><b><b class="emphasis-bold">-p</b></b></dt><dd><p>Print directory stack.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Print entries one per line; implies
<b class="emphasis-bold">-p</b>.</p></dd>

</dl>


</td></tr><tr><td valign="top">chdir</td><td><p><b class="emphasis-bold">chdir</b> [<em class="emphasis">dir</em>]</p><a name="INDEX-1602" /><p>Same as <b class="emphasis-bold">cd</b>. Useful if you are redefining <b class="emphasis-bold">cd</b>.</p>


</td></tr><tr><td valign="top">complete</td><td><p><b class="emphasis-bold">complete</b> [<em class="emphasis">string</em> [<em class="emphasis">word</em><em class="emphasis">/</em><em class="emphasis">pattern</em><em class="emphasis">/</em><em class="emphasis">list</em>[<b class="emphasis-bold">:</b><em class="emphasis">select</em>]<em class="emphasis">/</em>[<em class="emphasis">suffix</em>]]]</p><a name="INDEX-1603" /><p><b class="emphasis-bold">tcsh</b> only.
List all completions, or, if specified, all completions for
<em class="emphasis">string</em> (which may be a pattern). Further options
can be
<?troff /p?>specified.</p>


<h4 class="refsect2">Options for word</h4>


<dl>
<dt><b><b class="emphasis-bold">c</b></b></dt><dd><p>Complete current word only and without referring to
<?troff \p?><em class="emphasis">pattern</em>.</p></dd>



<dt><b><b class="emphasis-bold">C</b></b></dt><dd><p>Complete current word only, referring to <em class="emphasis">pattern</em>.</p></dd>



<dt><b><b class="emphasis-bold">n</b></b></dt><dd><p>Complete previous word.</p></dd>



<dt><b><b class="emphasis-bold">N</b></b></dt><dd><p>Complete word before previous word.</p></dd>



<dt><b><b class="emphasis-bold">p</b></b></dt><dd><p>Expect <em class="emphasis">pattern</em> to be a range of numbers. Perform 
completion within that range.</p></dd>

</dl>


<h4 class="refsect2">Options for list</h4>


<p>Various <em class="emphasis">list</em>s of strings can be searched
for possible completions. Some <em class="emphasis">list</em> options include:</p>


<dl>
<dt><b><b class="emphasis-bold">(</b><em class="emphasis">string</em><b class="emphasis-bold">)</b></b></dt><dd><p>Members of the list <em class="emphasis">string</em></p></dd>



<dt><b><em class="emphasis">$variable</em></b></dt><dd><p>Words from <em class="emphasis">variable</em></p></dd>



<dt><b><tt class="literal">`</tt><em class="emphasis">command</em><tt class="literal">`</tt></b></dt><dd><p>Output from <em class="emphasis">command</em></p></dd>



<dt><b><b class="emphasis-bold">a</b></b></dt><dd><p>Aliases</p></dd>



<dt><b><b class="emphasis-bold">b</b></b></dt><dd><p>Bindings</p></dd>



<dt><b><b class="emphasis-bold">c</b></b></dt><dd><p>Commands</p></dd>



<dt><b><b class="emphasis-bold">C</b></b></dt><dd><p>External (not built-in) commands</p></dd>



<dt><b><b class="emphasis-bold">d</b></b></dt><dd><p>Directories</p></dd>



<dt><b><b class="emphasis-bold">D</b></b></dt><dd><p>Directories whose names begin with <em class="emphasis">string</em></p></dd>



<dt><b><b class="emphasis-bold">e</b></b></dt><dd><p>Environment variables</p></dd>



<dt><b><b class="emphasis-bold">f</b></b></dt><dd><p>Filenames</p></dd>



<dt><b><b class="emphasis-bold">F</b></b></dt><dd><p>Filenames that begin with <em class="emphasis">string</em></p></dd>



<dt><b><b class="emphasis-bold">g</b></b></dt><dd><p>Groups</p></dd>



<dt><b><b class="emphasis-bold">j</b></b></dt><dd><p>Jobs</p></dd>



<dt><b><b class="emphasis-bold">l</b></b></dt><dd><p>Limits</p></dd>



<dt><b><b class="emphasis-bold">n</b></b></dt><dd><p>Nothing</p></dd>



<dt><b><b class="emphasis-bold">s</b></b></dt><dd><p>Shell variables</p></dd>



<dt><b><b class="emphasis-bold">S</b></b></dt><dd><p>Signals</p></dd>



<dt><b><b class="emphasis-bold">t</b></b></dt><dd><p>Text files</p></dd>



<dt><b><b class="emphasis-bold">T</b></b></dt><dd><p>Text files whose names begin with <em class="emphasis">string</em></p></dd>



<dt><b><b class="emphasis-bold">u</b></b></dt><dd><p>Users</p></dd>



<dt><b><b class="emphasis-bold">v</b></b></dt><dd><p>Any variables</p></dd>



<dt><b><b class="emphasis-bold">x</b></b></dt><dd><p>Like <b class="emphasis-bold">n</b> but
prints <em class="emphasis">select</em> as an explanation with the editor
command <b class="emphasis-bold">list-choices</b></p></dd>



<dt><b><b class="emphasis-bold">X</b></b></dt><dd><p>Completions</p></dd>

</dl>


<h4 class="refsect2">select</h4>


<p><em class="emphasis">select</em> should be a glob pattern. Completions are
limited to words that match this pattern. <em class="emphasis">suffix</em> is
appended to all completions.
</p>


</td></tr><tr><td valign="top">continue</td><td><p><b class="emphasis-bold">continue</b></p><a name="INDEX-1604" /><p>Resume execution of nearest enclosing <b class="emphasis-bold">while</b> or <b class="emphasis-bold">foreach</b>.</p>


</td></tr><tr><td valign="top">default</td><td><p><b class="emphasis-bold">default</b> <b class="emphasis-bold">:</b></p><a name="INDEX-1605" />
<?troff .rm CURRENT?><p>Label the default case (typically last) in a <b class="emphasis-bold">switch</b>.</p>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">dirs</td><td><p><b class="emphasis-bold">dirs</b> [<em class="emphasis">options</em>]</p><a name="INDEX-1606" /><p>Print the directory stack, showing the current directory first.
See also <b class="emphasis-bold">popd</b> and <b class="emphasis-bold">pushd</b>. All options except <b class="emphasis-bold">-l</b>, 
<b class="emphasis-bold">-n</b>, and
<b class="emphasis-bold">-v</b> are 
<b class="emphasis-bold">tcsh</b> extensions.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-c</b></b></dt><dd><p>Clear the directory stack.</p></dd>



<dt><b><b class="emphasis-bold">-l</b></b></dt><dd><p>Expand the home directory symbol (<b class="emphasis-bold">~</b>) to the
actual directory name.</p></dd>



<dt><b><b class="emphasis-bold">-n</b></b></dt><dd><p>Wrap output.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Print one directory per line.</p></dd>



<dt><b><b class="emphasis-bold">-L</b> <em class="emphasis">file</em></b></dt><dd><p>Re-create stack from <em class="emphasis">file</em>, which should have been created by
<b class="emphasis-bold">dirs -S</b> <em class="emphasis">file</em>.</p></dd>



<dt><b><b class="emphasis-bold">-S</b> <em class="emphasis">file</em></b></dt><dd><p>Print to <em class="emphasis">file</em> a series of <b class="emphasis-bold">pushd</b> and <b class="emphasis-bold">popd</b> commands, that can be invoked to replicate the
stack.</p></dd>

</dl>


</td></tr><tr><td valign="top">echo</td><td><p><b class="emphasis-bold">echo</b> [<b class="emphasis-bold">-n</b>] <em class="emphasis">string</em></p><a name="INDEX-1607" /><p>Write <em class="emphasis">string</em> to standard output; if <b class="emphasis-bold">-n</b> is specified, the
output is not terminated by a newline. Unlike the Unix version
(<em class="emphasis">/bin/echo</em>) and the Bourne-shell version, the C shell's
<b class="emphasis-bold">echo</b> doesn't support escape characters. See also <b class="emphasis-bold">echo</b> in
<a href="ch03_01.htm">Chapter 3, "Linux Commands"</a>, and <a href="ch07_01.htm">Chapter 7, "bash: The Bourne-Again Shell"</a>.</p>


</td></tr><tr><td valign="top">echotc</td><td><p><b class="emphasis-bold">echotc</b> [<em class="emphasis">options</em>] <em class="emphasis">arguments</em></p><a name="INDEX-1608" /><p><b class="emphasis-bold">tcsh</b> only. 
Display terminal capabilities, or move cursor on screen, depending on the 
argument.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b><b class="emphasis-bold">-s</b></b></dt><dd><p>Return empty string, not error, if capability
doesn't exist.</p></dd>



<dt><b><b class="emphasis-bold">-v</b></b></dt><dd><p>Display verbose messages.</p></dd>

</dl>


<h4 class="refsect2">Arguments</h4>


<dl>
<dt><b>baud</b></dt><dd><p>Display current baud.</p></dd>



<dt><b>cols</b></dt><dd><p>Display current column.</p></dd>



<dt><b>cm <em class="emphasis">column</em> <em class="emphasis">row</em></b></dt><dd><p>Move cursor to specified coordinates.</p></dd>



<dt><b>home</b></dt><dd><p>Move cursor to home position.</p></dd>



<dt><b>lines</b></dt><dd><p>Print number of lines per screen.</p></dd>



<dt><b>meta</b></dt><dd><p>Does this terminal have meta capacity (usually the Alt key)?</p></dd>



<dt><b>tabs</b></dt><dd><p>Does this terminal have tab capacity?</p></dd>

</dl>


</td></tr><tr><td valign="top">else</td><td><p><b class="emphasis-bold">else</b></p><p>Reserved word for interior of <b class="emphasis-bold">if ... endif</b> statement.</p>


</td></tr><tr><td valign="top">end</td><td><p><b class="emphasis-bold">end</b></p><p>Reserved word that ends a <b class="emphasis-bold">foreach</b> or <b class="emphasis-bold">switch</b> statement.</p>


</td></tr><tr><td valign="top">endif</td><td><p><b class="emphasis-bold">endif</b></p><p>Reserved word that ends an <b class="emphasis-bold">if</b> statement.</p>


</td></tr><tr><td valign="top">endsw</td><td><p><b class="emphasis-bold">endsw</b></p><p>Reserved word that ends a <b class="emphasis-bold">switch</b> statement.</p>


</td></tr><tr><td valign="top">eval</td><td><p> <b class="emphasis-bold">eval</b> <em class="emphasis">args</em></p><a name="INDEX-1609" /><p>Typically, <b class="emphasis-bold">eval</b> is used in shell scripts, and <em class="emphasis">args</em> is a
line of code that may contain shell variables. <b class="emphasis-bold">eval</b> forces variable
expansion to happen first and then runs the resulting command. This
"double scanning" is useful any time shell variables contain
input/output redirection symbols, aliases, or other shell variables.
(For example, redirection normally happens before variable expansion,
so a variable containing redirection symbols must be expanded first
using <b class="emphasis-bold">eval</b>; otherwise, the redirection symbols remain
uninterpreted.)</p>


<h4 class="refsect2">Examples</h4>


<p>The following line can be placed in the <b class="emphasis-bold">.login</b> file to set up
terminal characteristics:</p>


<blockquote><pre class="code">set noglob eval <literal>`</literal>tset -s xterm` unset noglob</pre></blockquote>


<p>The following commands show the effect of <b class="emphasis-bold">eval</b>:</p>


<blockquote><pre class="code">% <tt class="userinput"><b>set b='$a'</b></tt>
% <tt class="userinput"><b>set a=hello</b></tt>
% <tt class="userinput"><b>echo $b</b></tt>          Read the command line once
$a
% <tt class="userinput"><b>eval echo $b</b></tt>     Read the command line twice
hello</pre></blockquote>


<p>Another example of <b class="emphasis-bold">eval</b> can be found under <b class="emphasis-bold">alias</b>.</p>


</td></tr><tr><td valign="top">exec</td><td><p>
<b class="emphasis-bold">exec</b> <em class="emphasis">command</em></p><a name="INDEX-1610" /><p>Execute <em class="emphasis">command</em> in place of current shell.
This terminates the current shell, rather than create
a new process under it.</p>


</td></tr><tr><td valign="top">exit</td><td><p><b class="emphasis-bold">exit</b> [<b class="emphasis-bold">(</b><em class="emphasis">expr</em><b class="emphasis-bold">)</b>]</p><a name="INDEX-1611" /><p>Exit a shell script with the status given by <em class="emphasis">expr</em>. A status of zero
means success; nonzero means failure. If <em class="emphasis">expr</em> is not specified,
the exit value is that of the <b class="emphasis-bold">status</b> variable.
<b class="emphasis-bold">exit</b> can be issued at the command line to close a window (log out).</p>


</td></tr><tr><td valign="top">fg</td><td><p><b class="emphasis-bold">fg</b> [<em class="emphasis">jobIDs</em>]</p><a name="INDEX-1612" /><p>Bring the current job or the <em class="emphasis">jobIDs</em> to the foreground.
<em class="emphasis">jobID</em> can be <b class="emphasis-bold">%</b><em class="emphasis">job-number</em>.</p>



<?troff .rm CURRENT?><h4 class="refsect2">Example</h4>


<p>If you suspend a <b class="emphasis-bold">vi</b> editing session (by pressing <b class="emphasis-bold">Ctrl-Z</b>),
you might resume <b class="emphasis-bold">vi</b> using any of these commands:</p>


<blockquote><pre class="code">

% <tt class="userinput"><b>%</b></tt>
% <tt class="userinput"><b>fg</b></tt>
% <tt class="userinput"><b>fg %</b></tt>
% <tt class="userinput"><b>fg %vi</b></tt>     Match initial string</pre></blockquote>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">filetest</td><td><p> <b class="emphasis-bold">filetest</b> <em class="emphasis">-op files</em></p><a name="INDEX-1613" /><p><b class="emphasis-bold">tcsh</b> only.
Apply <em class="emphasis">op</em> file-test operator 
to <em class="emphasis">files</em>. Print results in a list.
See <a href="ch08_05.htm">Section 8.5.1.5, "File inquiry operators"</a> for the list of file-test operators.</p>


</td></tr><tr><td valign="top">foreach</td><td><p> <b class="emphasis-bold">foreach</b> <em class="emphasis">name</em> <b class="emphasis-bold">(</b><em class="emphasis">wordlist</em><b class="emphasis-bold">)</b></p><p>    <em class="emphasis">commands</em></p><p><b class="emphasis-bold">end</b></p><a name="INDEX-1614" /><p>Assign variable <em class="emphasis">name</em> to each value in <em class="emphasis">wordlist</em> and
execute <em class="emphasis">commands</em> between <b class="emphasis-bold">foreach</b> and <b class="emphasis-bold">end</b>.
You can use <b class="emphasis-bold">foreach</b> as a multiline command
issued at the C-shell prompt (first of the following examples),
or you can use it in a shell script (second example).</p>


<h4 class="refsect2">Examples</h4>


<p>Rename all files that begin with a capital letter:</p>


<blockquote><pre class="code">% <tt class="userinput"><b>foreach i ([A-Z]*)</b></tt>
? <tt class="userinput"><b>mv $i $i.new</b></tt>
? <tt class="userinput"><b>end</b></tt></pre></blockquote>


<p>Check whether each command-line argument is an option or not:</p>


<blockquote><pre class="code"><tt class="userinput"><b>foreach arg ($argv)
   # does it begin with - ?
   if ("$arg" =~ -*) then
      echo "Argument is an option"
   else
      echo "Argument is a filename"
   endif
end</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">glob</td><td><p>
<b class="emphasis-bold">glob</b> <em class="emphasis">wordlist</em></p><a name="INDEX-1615" /><p>Do filename, variable, and history substitutions on <em class="emphasis">wordlist</em>.
No \ escapes are recognized in its expansion,
and words are delimited by null characters.
<b class="emphasis-bold">glob</b> typically is used in shell scripts to hardcode a value
so that it remains the same for the rest of the script.</p>


</td></tr><tr><td valign="top">goto</td><td><p><b class="emphasis-bold">goto</b> <em class="emphasis">string</em></p><a name="INDEX-1616" />
<?troff .rm CURRENT?><p>Skip to a line whose first nonblank character is <em class="emphasis">string</em>
followed by a colon and continue execution below that line.
On the <b class="emphasis-bold">goto</b> 
line, <em class="emphasis">string</em> can be a variable or filename pattern,
but the label branched to must be a literal, expanded value
and must not occur within a <b class="emphasis-bold">foreach</b> or <b class="emphasis-bold">while</b>.</p>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">hashstat</td><td><p><b class="emphasis-bold">hashstat</b></p><a name="INDEX-1617" /><p>Display statistics that show the hash table's level of success at locating
commands via the <b class="emphasis-bold">path</b> variable.</p>


</td></tr><tr><td valign="top">history</td><td><p><b class="emphasis-bold">history</b> [<em class="emphasis">options</em>]</p><a name="INDEX-1618" /><p>Display the list of history events. (History syntax is discussed
earlier, in "Command History.")</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b>-c</b></dt><dd><p><b class="emphasis-bold">tcsh</b> only. Clear history list.</p></dd>



<dt><b>-h</b></dt><dd><p>Print history list without event numbers.</p></dd>



<dt><b>-r</b></dt><dd><p>Print in reverse order; show oldest commands last.</p></dd>



<dt><b><em class="emphasis">n</em></b></dt><dd><p>Display only the last <em class="emphasis">n</em> history commands, instead
of the number set by the <b class="emphasis-bold">history</b> shell variable.</p></dd>



<dt><b>-L <em class="emphasis">file</em></b></dt><dd><p><b class="emphasis-bold">tcsh</b> only. Load series of <b class="emphasis-bold">pushd</b> and <b class="emphasis-bold">popd</b> commands from <em class="emphasis">file</em>
in order to re-create a saved stack.</p></dd>



<dt><b>-M <em class="emphasis">file</em></b></dt><dd><p><b class="emphasis-bold">tcsh</b> only. Merge the current directory stack and the stack saved in <em class="emphasis">file</em>. Save both, sorted by time, in <em class="emphasis">file</em>, as a series of <b class="emphasis-bold">pushd</b>
and <b class="emphasis-bold">popd</b> commands.</p></dd>



<dt><b>-S <em class="emphasis">file</em></b></dt><dd><p><b class="emphasis-bold">tcsh</b> only. Print to <em class="emphasis">file</em> a series of <b class="emphasis-bold">pushd</b> and <b class="emphasis-bold">popd</b> commands that can be invoked to replicate the
stack.</p></dd>

</dl>


<h4 class="refsect2">Example</h4>


<p>To save and execute the last five commands:</p>


<blockquote><pre class="code"><b class="emphasis-bold">history -h 5 &gt; do_it
source do_it</b></pre></blockquote>


</td></tr><tr><td valign="top">hup</td><td><p><b class="emphasis-bold">hup</b> [<em class="emphasis">command</em>]</p><a name="INDEX-1619" />
<?troff .rm CURRENT?><p><b class="emphasis-bold">tcsh</b> only. Start <em class="emphasis">command</em> but make it exit when sent a hangup signal,
which is sent when shell exits. By default, configure shell script 
to exit on hangup signal.</p>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">if</td><td><p><b class="emphasis-bold">if</b></p><a name="INDEX-1620" /><p>Begin a conditional statement. The simple format is:</p>


<blockquote><pre class="code">if (<em class="replaceable">expr</em>) <em class="replaceable">cmd</em></pre></blockquote>


<p>There are three other possible formats, shown side-by-side:</p>


<blockquote><pre class="code">if (<em class="replaceable">expr</em>) then   if (<em class="replaceable">expr</em>) then   if (<em class="replaceable">expr</em>) then
   <em class="replaceable">cmds</em>             <em class="replaceable">cmds1</em>             <em class="replaceable">cmds1</em>
endif            else             else if (<em class="replaceable">expr</em>) then
                    <em class="replaceable">cmds2</em>             <em class="replaceable">cmds2</em>
                 endif            else
                                      <em class="replaceable">cmds3</em>
                                  endif</pre></blockquote>


<p>In the simplest form, execute <em class="emphasis">cmd</em> if <em class="emphasis">expr</em> is true;
otherwise do nothing (redirection still occurs; this is a bug). In 
the other forms, execute one or more commands.
If <em class="emphasis">expr</em> is true, continue with the commands after <b class="emphasis-bold">then</b>;
if <em class="emphasis">expr</em> is false, branch to the commands after <b class="emphasis-bold">else</b>
(or branch to after the <b class="emphasis-bold">else if</b> and continue checking).
For more examples, see <a href="ch08_05.htm">Section 8.5, "Expressions"</a> earlier in this chapter,
<b class="emphasis-bold">shift</b>, or <b class="emphasis-bold">while</b>.</p>


<h4 class="refsect2">Example</h4>


<p>Take a default action if no command-line arguments are given:</p>


<blockquote><pre class="code"><tt class="userinput"><b>if ($#argv == 0) then
   echo "No filename given. Sending to Report."
   set outfile = Report
else
   set outfile = $argv[1]
endif</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">jobs</td><td><p><b class="emphasis-bold">jobs</b> [<b class="emphasis-bold">-l</b>]</p><a name="INDEX-1621" /><p>List all running or stopped jobs; <b class="emphasis-bold">-l</b> includes process IDs.
For example, you can check whether a long compilation or text format
is still running. Also useful before logging out.</p>


</td></tr><tr><td valign="top">kill</td><td><p><b class="emphasis-bold">kill</b> [<em class="emphasis">options</em>] <em class="emphasis">ID</em></p><a name="INDEX-1622" /><p>Terminate each specified process <em class="emphasis">ID</em> or job <em class="emphasis">ID</em>.
You must own the process or be a privileged user.
This built-in is similar to <em class="emphasis">/bin/kill</em>
described in <a href="ch03_01.htm">Chapter 3, "Linux Commands"</a> but also allows symbolic job names.
Stubborn processes can be killed using signal 9.</p>


<?troff .Nd 10?><h4 class="refsect2">Options</h4>


<dl>
<dt><b>-l</b></dt><dd><p>List the signal names. (Used by itself.)</p></dd>



<dt><b>-<em class="emphasis">signal</em></b></dt><dd><p>The signal number or name, without the SIG prefix (e.g., HUP, not SIGHUP).
The command <b class="emphasis-bold">kill -l</b> prints a list of
the available signal names.  The list varies by system architecture; for
a PC-based system, it looks like this:
<blockquote><pre class="code">% <tt class="userinput"><b>kill -l</b></tt>
HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2
PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG 
XCPU XFSZ VTALRM PROF WINCH POLL PWR UNUSED</pre></blockquote>


The signals and their numbers are defined in 
<em class="emphasis">/usr/include/asm/signal.h</em>; look in that file to
find the signals that apply to your system.</p></dd>

</dl>


<h4 class="refsect2">Examples</h4>


<p>If you've issued the following command:</p>


<blockquote><pre class="code">44% <tt class="userinput"><b>nroff -ms report &amp;</b></tt></pre></blockquote>


<p>you can terminate it in any of the following ways:</p>


<blockquote><pre class="code">

45% <tt class="userinput"><b>kill 19536</b></tt>     Process ID
45% <tt class="userinput"><b>kill %</b></tt>         Current job
45% <tt class="userinput"><b>kill %1</b></tt>        Job number 1
45% <tt class="userinput"><b>kill %nr</b></tt>       Initial string
45% <tt class="userinput"><b>kill %?report</b></tt>  Matching string</pre></blockquote>


</td></tr><tr><td valign="top">limit</td><td><p><b class="emphasis-bold">limit</b> [<b class="emphasis-bold">-h</b>] [<em class="emphasis">resource</em> [<em class="emphasis">limit</em>]]</p><a name="INDEX-1623" /><p>Display limits or set a <em class="emphasis">limit</em> on resources 
used by the current process and by each
process it creates. If no <em class="emphasis">limit</em> is given, the current limit is printed for
<em class="emphasis">resource</em>. If <em class="emphasis">resource</em> also is omitted, all limits are printed.
By default, the current limits are shown or set; with <b class="emphasis-bold">-h</b>, 
hard limits are used. A hard limit imposes an absolute limit that can't
be exceeded. Only a privileged user may raise it.
See also <b class="emphasis-bold">unlimit</b>.</p>


<h4 class="refsect2">Option</h4>


<dl>
<dt><b>-h</b></dt><dd><p>Use hard, not current, limits.</p></dd>

</dl>


<h4 class="refsect2">Resource</h4>


<dl>
<dt><b>cputime</b></dt><dd><p>Maximum number of seconds the CPU can spend;
can be abbreviated as <b class="emphasis-bold">cpu</b>.</p></dd>



<dt><b>filesize</b></dt><dd><p>Maximum size of any one file.</p></dd>



<dt><b>datasize</b></dt><dd><p>Maximum size of data (including stack).</p></dd>



<dt><b>stacksize</b></dt><dd><p>Maximum size of stack.</p></dd>



<dt><b>coredumpsize</b></dt><dd><p>Maximum size of a core dump file.</p></dd>

</dl>


<h4 class="refsect2">Limit</h4>


<p>A number followed by an optional character (a unit specifier).</p>


<table cellpadding="4" border="1">

<tr>
<td>For <b class="emphasis-bold">cputime</b>:</td>
<td><em class="emphasis">n</em><b class="emphasis-bold">h</b> (for <em class="emphasis">n</em> hours)</td>
</tr>


<tr>
<td />
<td><em class="emphasis">n</em><b class="emphasis-bold">m</b> (for <em class="emphasis">n</em> minutes)</td>
</tr>


<tr>
<td />
<td><em class="emphasis">mm</em><b class="emphasis-bold">:</b><em class="emphasis">ss</em> (minutes and seconds)</td>
</tr>


<tr>
<td>For others:</td>
<td><em class="emphasis">n</em><b class="emphasis-bold">k</b> (for <em class="emphasis">n</em> kilobytes, the default)</td>
</tr>


<tr>
<td />
<td><em class="emphasis">n</em><b class="emphasis-bold">m</b> (for <em class="emphasis">n</em> megabytes)</td>
</tr>



</table></td></tr><tr><td valign="top">log</td><td><p><b class="emphasis-bold">log</b></p><a name="INDEX-1624" /><p><b class="emphasis-bold">tcsh</b> only.
Consult the <b class="emphasis-bold">watch</b> variable for list of users being watched. Print list of those who are presently logged in. If <b class="emphasis-bold"> -</b> is entered as an option, reset environment as if user had logged in with new group.</p>


</td></tr><tr><td valign="top">login</td><td><p><b class="emphasis-bold">login</b> [<em class="emphasis">user</em>|<b class="emphasis-bold">-p</b>]</p><a name="INDEX-1625" /><p>Replace <em class="emphasis">user</em>'s login shell with <em class="emphasis">/bin/login</em>.
<b class="emphasis-bold">-p</b> is used to preserve environment variables.</p>


</td></tr><tr><td valign="top">logout</td><td><p><b class="emphasis-bold">logout</b></p><a name="INDEX-1626" /><p>Terminate the login shell.</p>


</td></tr><tr><td valign="top">ls-F</td><td><p><b class="emphasis-bold">ls-F</b> [<em class="emphasis">options</em>] [<em class="emphasis">files</em>]</p><a name="INDEX-1627" /><p><b class="emphasis-bold">tcsh</b> only.
Faster alternative to <b class="emphasis-bold">ls -F</b>. If given any options, invokes
<b class="emphasis-bold">ls</b>.</p>


</td></tr><tr><td valign="top">newgrp</td><td><p><b class="emphasis-bold">newgrp</b> [<b class="emphasis-bold">-</b>] [<em class="emphasis">group</em>]</p><a name="INDEX-1628" /><p><b class="emphasis-bold">tcsh</b> only.
Change user's group ID to specified group ID, or, if none is specified, to original group ID. If - is entered as an option, reset environment as if user had
logged in with new group. Must have been compiled into the shell; see the <b class="emphasis-bold">version</b>
variable.</p>


</td></tr><tr><td valign="top">nice</td><td><p><b class="emphasis-bold">nice</b> [<b class="emphasis-bold">+</b><em class="emphasis">n</em>] <em class="emphasis">command</em></p><a name="INDEX-1629" /><p>Change the execution priority for <em class="emphasis">command</em>, or, if
none is given, change priority for the current shell.
(See also <b class="emphasis-bold">nice</b> in <a href="ch03_01.htm">Chapter 3, "Linux Commands"</a>.)
The priority range is -20 to 20, with a default of 4.
The range seems backward: -20 gives the highest priority
(fastest execution); 20 gives the lowest. Only a privileged user may specify
a negative number.</p>


<dl>
<dt><b>+<em class="emphasis">n</em></b></dt><dd><p>Add <em class="emphasis">n</em> to the priority value (lower job priority).</p></dd>



<dt><b>-<em class="emphasis">n</em></b></dt><dd><p>Subtract <em class="emphasis">n</em> from the priority value (raise job priority).
Privileged users only.</p></dd>

</dl>


</td></tr><tr><td valign="top">nohup</td><td><p><b class="emphasis-bold">nohup</b> [<em class="emphasis">command</em>]</p><a name="INDEX-1630" /><p>"No hangup signals."
Do not terminate <em class="emphasis">command</em> after terminal line is
closed (i.e., when you hang up from a phone or log out). 
Use without <em class="emphasis">command</em> in shell scripts to keep script from
being terminated.
(See also <b class="emphasis-bold">nohup</b> in <a href="ch03_01.htm">Chapter 3, "Linux Commands"</a>.)</p>


</td></tr><tr><td valign="top">notify</td><td><p><b class="emphasis-bold">notify</b> [<em class="emphasis">jobID</em>]</p><a name="INDEX-1631" /><p>Report immediately when a background job finishes
(instead of waiting for you to exit a long editing session,
for example). If no <em class="emphasis">jobID</em> is given, the current background
job is assumed.</p>


</td></tr><tr><td valign="top">onintr</td><td><p><b class="emphasis-bold">onintr</b> <em class="emphasis">label</em></p><p><b class="emphasis-bold">onintr -</b></p><p><b class="emphasis-bold">onintr</b></p><a name="INDEX-1632" /><p>"On interrupt."  Used in shell scripts to handle interrupt signals
(similar to <b class="emphasis-bold">bash</b>'s <b class="emphasis-bold">trap 2</b> and <b class="emphasis-bold">trap <tt class="literal">""</tt> 2</b> commands).
The first form is like a <b class="emphasis-bold">goto</b> <em class="emphasis">label</em>. The script will
branch to <em class="emphasis">label</em><b class="emphasis-bold">:</b> if it catches an interrupt signal (e.g., <b class="emphasis-bold">Ctrl-C</b>).
The second form lets the script ignore interrupts. This is useful
at the beginning of a script or before any code segment that needs
to run unhindered (e.g., when moving files).
The third form restores interrupt handling that was previously disabled
with <b class="emphasis-bold">onintr -</b>.</p>


<h4 class="refsect2">Example</h4>


<blockquote><pre class="code"><tt class="userinput"><b>onintr cleanup</b></tt>     <em class="emphasis">Go to "cleanup" on interrupt</em>
<tt class="userinput"><b> .</b></tt>
<tt class="userinput"><b> .</b></tt>                 <em class="emphasis">Shell</em> script commands
<tt class="userinput"><b> .</b></tt>
<tt class="userinput"><b>cleanup:</b></tt>           <em class="emphasis">Label for interrupts</em>
  <tt class="userinput"><b>onintr -</b></tt>         <em class="emphasis">Ignore additional interrupts</em>
  <tt class="userinput"><b>rm -f $tmpfiles</b></tt>  <em class="emphasis">Remove any files created</em>
  <tt class="userinput"><b>exit 2</b></tt>           <em class="emphasis">Exit with an error status</em></pre></blockquote>


</td></tr><tr><td valign="top">popd</td><td><p><b class="emphasis-bold">popd</b> [<em class="emphasis">options</em>]</p><a name="INDEX-1633" /><p>Remove the current entry from the directory stack,
or remove the <em class="emphasis">n</em>th entry from the stack
and print the stack that remains. The current
entry has number 0 and appears on the left.
See also <b class="emphasis-bold">dirs</b> and <b class="emphasis-bold">pushd</b>.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b>+<em class="emphasis">n</em></b></dt><dd><p>Specify <em class="emphasis">n</em>th entry.</p></dd>



<dt><b>-l</b></dt><dd><p>Expand <b class="emphasis-bold">~</b> notation.</p></dd>



<dt><b>-n</b></dt><dd><p>Wrap long lines.</p></dd>



<?troff .Nd 10?><dt><b>-p</b></dt><dd><p>Override the <b class="emphasis-bold">pushdsilent</b> shell variable,
which otherwise prevents the printing of the final stack.</p></dd>



<dt><b>-v</b></dt><dd><p>Print precisely one directory per line.</p></dd>

</dl>


</td></tr><tr><td valign="top">printenv</td><td><p><b class="emphasis-bold">printenv</b> [<em class="emphasis">variable</em>]</p><a name="INDEX-1634" /><p>Print all (or one specified) environment variables and their
<?troff \p?>values.</p>


</td></tr><tr><td valign="top">pushd</td><td><p><b class="emphasis-bold">pushd</b> <em class="emphasis">name</em></p><p><b class="emphasis-bold">pushd</b> [<em class="emphasis">options</em>]</p><p><b class="emphasis-bold">pushd</b></p><a name="INDEX-1635" /><p>The first form changes the working directory to <em class="emphasis">name</em> and adds it
to the directory stack. The second form rotates the <em class="emphasis">n</em>th entry to the
beginning, making it the working directory. (Entry numbers begin at 0.)
With no arguments, <b class="emphasis-bold">pushd</b> switches the first two entries
and changes to the new current directory. The +<em class="emphasis">n</em>, <b class="emphasis-bold">-l</b>,
<b class="emphasis-bold">-n</b>, and <b class="emphasis-bold">-v</b> options behave the same as in <b class="emphasis-bold">popd</b>.
See also <b class="emphasis-bold">dirs</b> and <b class="emphasis-bold">popd</b>.</p>


<h4 class="refsect2">Examples</h4>


<blockquote><pre class="code">% <tt class="userinput"><b>dirs</b></tt>
/home/bob /usr
% <tt class="userinput"><b>pushd /etc</b></tt>           Add /etc to directory stack
/etc /home/bob /usr
% <tt class="userinput"><b>pushd +2</b></tt>             Switch to third directory
/usr /etc /home/bob
% <tt class="userinput"><b>pushd</b></tt>                Switch top two directories
/etc /usr /home/bob
% <tt class="userinput"><b>popd</b></tt>                 Discard current entry; go to next
/usr /home/bob</pre></blockquote>


</td></tr><tr><td valign="top">rehash</td><td><p><b class="emphasis-bold">rehash</b></p><a name="INDEX-1636" /><p>Recompute the internal hash table for the PATH variable. 
Use <b class="emphasis-bold">rehash</b> whenever a new command is created during the current session.
This allows the PATH variable to locate and execute the command.
(If the new command resides in a directory not listed in PATH,
add this directory to PATH before rehashing.)
See also <b class="emphasis-bold">unhash</b>.</p>


</td></tr><tr><td valign="top">repeat</td><td><p><b class="emphasis-bold">repeat</b> <em class="emphasis">n command</em></p><a name="INDEX-1637" /><p>Execute <em class="emphasis">n</em> instances of <em class="emphasis">command</em>.</p>


<h4 class="refsect2">Examples</h4>


<p>Print three copies of <b class="emphasis-bold">memo</b>:</p>


<blockquote><pre class="code">% <tt class="userinput"><b>repeat 3 pr memo | lp</b></tt></pre></blockquote>


<p>Read 10 lines from the terminal and store in <b class="emphasis-bold">item_list</b>:</p>


<blockquote><pre class="code">% <tt class="userinput"><b>repeat 10 line &gt; item_list</b></tt></pre></blockquote>


<p>Append 50 boilerplate files to <b class="emphasis-bold">report</b>:</p>


<blockquote><pre class="code">% <tt class="userinput"><b>repeat 50 cat template &gt;&gt; report</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">sched</td><td><p><b class="emphasis-bold">sched</b> [<em class="emphasis">options</em>]</p><p><b class="emphasis-bold">sched</b> <em class="emphasis">time command</em></p><a name="INDEX-1638" /><p><b class="emphasis-bold">tcsh</b> only.
Without options, print all scheduled events. The second form schedules an
event.</p>


<p><em class="emphasis">time</em> should be specified in <em class="emphasis">hh:mm</em> form (e.g., 13:00).</p>


<?troff .Nd 10?><h4 class="refsect2">Options</h4>


<dl>
<dt><b>+<em class="emphasis">hh:mm</em></b></dt><dd><p>Schedule event to take place <em class="emphasis">hh:mm</em> from now.</p></dd>



<dt><b>-<em class="emphasis">n</em></b></dt><dd><p>Remove <em class="emphasis">n</em>th item from schedule.</p></dd>

</dl>


</td></tr><tr><td valign="top">set</td><td><p><b class="emphasis-bold">set</b> <em class="emphasis">variable</em><b class="emphasis-bold">=</b><em class="emphasis">value</em></p><p><b class="emphasis-bold">set</b> [<em class="emphasis">option</em>] <em class="emphasis">variable</em>[<em class="emphasis">n</em>]<b class="emphasis-bold">=</b><em class="emphasis">value</em></p><p><b class="emphasis-bold">set</b></p><a name="INDEX-1639" /><p>Set <em class="emphasis">variable</em> to <em class="emphasis">value</em>, or if multiple
values are specified, set the
variable to the list of words in the value list. If an index <em class="emphasis">n</em>
is specified, set the <em class="emphasis">n</em>th word in the variable to <em class="emphasis">value</em>.
(The variable must already contain at least that number of words.)
With no arguments, display the names and values of all set variables.
See also "Predefined Shell Variables" earlier in this chapter.</p>


<h4 class="refsect2">Option</h4>


<dl>
<dt><b>-r</b></dt><dd><p><b class="emphasis-bold">tcsh</b> only. List only read-only variables, or set specified variable to read-only.</p></dd>

</dl>


<h4 class="refsect2">Examples</h4>


<blockquote><pre class="code">% <tt class="userinput"><b>set list=(yes no maybe)</b></tt>     Assign a wordlist
% <tt class="userinput"><b>set list[3]=maybe</b></tt>           Assign an item in existing wordlist
% <tt class="userinput"><b>set quote="Make my day" </b></tt>     Assign a variable
% <tt class="userinput"><b>set x=5 y=10 history=100</b></tt>    Assign several variables
% <tt class="userinput"><b>set blank</b></tt>                   Assign a null value to blank</pre></blockquote>


</td></tr><tr><td valign="top">setenv</td><td><p><b class="emphasis-bold">setenv</b> [<em class="emphasis">name</em> [<em class="emphasis">value</em>]]</p><a name="INDEX-1640" /><p>Assign a <em class="emphasis">value</em> to an environment variable <em class="emphasis">name</em>.
By convention, <em class="emphasis">name</em> is uppercase.
<em class="emphasis">value</em> can be a single word or a quoted string.
If no <em class="emphasis">value</em> is given, the null value is assigned.
With no arguments, display the names and values of all 
environment variables. <b class="emphasis-bold">setenv</b> is not necessary for the
PATH variable, which is automatically exported from <b class="emphasis-bold">path</b>.</p>


</td></tr><tr><td valign="top">settc</td><td><p><b class="emphasis-bold">settc</b> <em class="emphasis">capability value</em></p><a name="INDEX-1641" /><p><b class="emphasis-bold">tcsh</b> only. Set terminal <em class="emphasis">capability</em> to 
<em class="emphasis">value</em>.</p>


</td></tr><tr><td valign="top">setty</td><td><p><b class="emphasis-bold">setty</b> [<em class="emphasis">options</em>] [<b class="emphasis-bold">+</b>|<b class="emphasis-bold">-</b><em class="emphasis">mode</em>]</p><a name="INDEX-1642" /><p><b class="emphasis-bold">tcsh</b> only.
Do not allow shell to change specified tty modes. By default, act
on the execute set.</p>


<h4 class="refsect2">Options</h4>


<dl>
<dt><b>+<em class="emphasis">mode</em></b></dt><dd><p>Without arguments, list all modes in specified set that are on. Otherwise, set specified mode to on.</p></dd>



<dt><b>-<em class="emphasis">mode</em></b></dt><dd><p>Without arguments, list all modes in specified set that are off. Otherwise, set specified mode to on.</p></dd>



<dt><b>-a</b></dt><dd><p>List all modes in specified set.</p></dd>



<dt><b>-d</b></dt><dd><p>Act on the edit set of modes (used when editing commands).</p></dd>



<dt><b>-q</b></dt><dd><p>Act on the quote set of modes (used when entering characters verbatim).</p></dd>



<dt><b>-x</b></dt><dd><p>Act on the execute set of modes (default) (used when executing examples).</p></dd>

</dl>


</td></tr><tr><td valign="top">shift</td><td><p><b class="emphasis-bold">shift</b> [<em class="emphasis">variable</em>]</p><a name="INDEX-1643" /><p>If <em class="emphasis">variable</em> is given, shift the words in a wordlist variable (i.e., <em class="emphasis">name</em><b class="emphasis-bold">[2]</b> becomes <em class="emphasis">name</em><b class="emphasis-bold">[1]</b>). With no argument,
shift the positional parameters (command-line arguments) (i.e.,
<b class="emphasis-bold">$2</b> becomes <b class="emphasis-bold">$1</b>). <b class="emphasis-bold">shift</b> is typically used in a <b class="emphasis-bold">while</b> loop.
See additional example under <b class="emphasis-bold">while</b>.</p>


<h4 class="refsect2">Example</h4>


<blockquote><pre class="code"><tt class="userinput"><b>while ($#argv)</b></tt>      While there are arguments
    <tt class="userinput"><b>if (-f $argv[1])  
       wc -l $argv[1]
    else
       echo "$argv[1] is not a regular file"
    endif
    shift</b></tt>           Get the next argument
<tt class="userinput"><b>end</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">source</td><td><p><b class="emphasis-bold">source</b> [<b class="emphasis-bold">-h</b>] <em class="emphasis">script</em> [<em class="emphasis">args</em>]</p><a name="INDEX-1644" />
<?troff .rm CURRENT?><p>Read and execute commands from a C-shell script. 
With <b class="emphasis-bold">-h</b>, the commands are
added to the history list but aren't executed.  For <b class="emphasis-bold">tcsh</b> only,
arguments can be passed to the script and are put in <b class="emphasis-bold">argv</b>.</p>


<h4 class="refsect2">Example</h4>


<blockquote><pre class="code"><tt class="userinput"><b>source ~/.cshrc</b></tt></pre></blockquote>


</td></tr><tr><td valign="top">stop</td><td><p><b class="emphasis-bold">stop</b> [<em class="emphasis">jobIDs</em>]</p><a name="INDEX-1645" /><p>Suspend the current background jobs or the
background jobs specified by <em class="emphasis">jobIDs</em>; this is
the complement of <b class="emphasis-bold">Ctrl-Z</b> or <b class="emphasis-bold">suspend</b>.</p>


</td></tr><tr><td valign="top">suspend</td><td><p><b class="emphasis-bold">suspend</b></p><a name="INDEX-1646" /><p>Suspend the current foreground job; same as <b class="emphasis-bold">Ctrl-Z</b>.
Often used to stop an <b class="emphasis-bold">su</b> command.</p>


</td></tr><tr><td valign="top">switch</td><td><p><b class="emphasis-bold">switch</b></p><a name="INDEX-1647" /><p>Process commands depending on the value of a variable.
When you need to handle more than three choices, <b class="emphasis-bold">switch</b>
is a useful alternative to an <b class="emphasis-bold">if-then-else</b> statement.
If the <em class="emphasis">string</em> variable matches <em class="emphasis">pattern1</em>,
the first set of <em class="emphasis">commands</em> is executed; if <em class="emphasis">string</em> 
matches <em class="emphasis">pattern2</em>, the second set of <em class="emphasis">commands</em> is executed;
and so on. If no patterns match, execute commands under the
<b class="emphasis-bold">default</b> case.
<em class="emphasis">string</em> can be specified using command substitution, 
variable substitution, or filename expansion.
Patterns can be specified using the pattern-matching symbols <b class="emphasis-bold">*</b>, 
<b class="emphasis-bold">?</b>, and <b class="emphasis-bold">[</b><b class="emphasis-bold">]</b>. <b class="emphasis-bold">breaksw</b> is used to exit the <b class="emphasis-bold">switch</b>. 
If <b class="emphasis-bold">breaksw</b> is omitted (which is rarely done), 
the <b class="emphasis-bold">switch</b> continues to execute another set of commands until
it reaches a <b class="emphasis-bold">breaksw</b> or <b class="emphasis-bold">endsw</b>.
<?troff .ne 10?>Following is the general syntax of <b class="emphasis-bold">switch</b>, side-by-side with an example
that processes the first command-line argument:</p>


<?troff .rm CURRENT?><blockquote><pre class="code">switch (<em class="replaceable">string</em>)       <tt class="userinput"><b>switch ($argv[1])</b></tt>
  case <em class="replaceable">pattern1</em>:      <tt class="userinput"><b>case -[nN]:</b></tt>
      <em class="replaceable">commands</em>        <tt class="userinput"><b>nroff $file | lp</b></tt>
      breaksw         <tt class="userinput"><b>breaksw</b></tt>
  case <em class="replaceable">pattern2</em>:      <tt class="userinput"><b>case -[Pp]:</b></tt>
      <em class="replaceable">commands</em>        <tt class="userinput"><b>pr $file | lp</b></tt>
      breaksw         <tt class="userinput"><b>breaksw</b></tt>
  case <em class="replaceable">pattern3</em>:      <tt class="userinput"><b>case -[Mm]:</b></tt>
      <em class="replaceable">commands</em>        <tt class="userinput"><b>more $file</b></tt>
      breaksw         <tt class="userinput"><b>breaksw</b></tt>
      .               <tt class="userinput"><b>case -[Ss]:</b></tt>
      .               <tt class="userinput"><b>sort $file</b></tt>
      .               <tt class="userinput"><b>breaksw</b></tt>
  default:            <tt class="userinput"><b>default:</b></tt>
      <em class="replaceable">commands</em>        <tt class="userinput"><b>echo "Error -- no such option"</b></tt>
                      <tt class="userinput"><b>exit 1</b></tt>
      breaksw         <tt class="userinput"><b>breaksw</b></tt>
endsw                 <tt class="userinput"><b>endsw</b></tt></pre></blockquote>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">telltc</td><td><p><b class="emphasis-bold">telltc</b></p><a name="INDEX-1648" /><p><b class="emphasis-bold">tcsh</b> only. Print all terminal capabilities and their values.</p>


</td></tr><tr><td valign="top">time</td><td><p><b class="emphasis-bold">time</b> [<em class="emphasis">command</em>]</p><a name="INDEX-1649" /><p>Execute a <em class="emphasis">command</em> and show how much time it uses.
With no argument, <b class="emphasis-bold">time</b> can be used in a shell script to time the script.</p>


</td></tr><tr><td valign="top">umask</td><td><p><b class="emphasis-bold">umask</b> [<em class="emphasis">nnn</em>]</p><a name="INDEX-1650" /><p>Display file creation mask or set file creation mask to octal
<em class="emphasis">nnn</em>. The file creation mask determines which permission bits
are turned off. With no <em class="emphasis">nnn</em>, print the current mask.</p>


</td></tr><tr><td valign="top">unalias</td><td><p><b class="emphasis-bold">unalias</b> <em class="emphasis">pattern</em></p><a name="INDEX-1651" /><p>Remove all aliases whose names match
<em class="emphasis">pattern</em> from the alias list. See 
<b class="emphasis-bold">alias</b> for more information.</p>


</td></tr><tr><td valign="top">uncomplete</td><td><p><b class="emphasis-bold">uncomplete</b> <em class="emphasis">pattern</em></p><a name="INDEX-1652" /><p><b class="emphasis-bold">tcsh</b> only.
Remove completions (specified by <b class="emphasis-bold">complete</b>) whose names
match <em class="emphasis">pattern</em>.</p>


</td></tr><tr><td valign="top">unhash</td><td><p><b class="emphasis-bold">unhash</b></p><a name="INDEX-1653" /><p>Remove internal hash table. The shell stops using hashed values
and searches the <b class="emphasis-bold">path</b> directories to locate a
command. See also <b class="emphasis-bold">rehash</b>.</p>


</td></tr><tr><td valign="top">unlimit</td><td><p><b class="emphasis-bold">unlimit</b> [<b class="emphasis-bold">-h</b>] [<em class="emphasis">resource</em>]</p><a name="INDEX-1654" /><p>Remove the allocation limits on <em class="emphasis">resource</em>. If <em class="emphasis">resource</em> is not
specified, remove limits for all resources. See <b class="emphasis-bold">limit</b> for more
information. With <b class="emphasis-bold">-h</b>, remove hard
limits. This command can be run only by a privileged user.</p>


</td></tr><tr><td valign="top">unset</td><td><p><b class="emphasis-bold">unset</b> <em class="emphasis">variables</em></p><a name="INDEX-1655" /><p>Remove one or more <em class="emphasis">variables</em>. Variable names may be specified
as a pattern, using filename metacharacters. Does
not remove read-only variables. See <b class="emphasis-bold">set</b>.</p>


</td></tr><tr><td valign="top">unsetenv</td><td><p><b class="emphasis-bold">unsetenv</b> <em class="emphasis">variable</em></p><a name="INDEX-1656" /><p>Remove an environment variable. Filename matching is not valid.
See <b class="emphasis-bold">setenv</b>.</p>


</td></tr><tr><td valign="top">wait</td><td><p><b class="emphasis-bold">wait</b></p><a name="INDEX-1657" /><p>Pause in execution until all child processes complete,
or until an interrupt signal is received.</p>


</td></tr><tr><td valign="top">watchlog</td><td><p><b class="emphasis-bold">watchlog</b></p><a name="INDEX-1658" /><p><b class="emphasis-bold">tcsh</b> only. Same as <b class="emphasis-bold">log</b>.
Must have been compiled into the shell; see the <b class="emphasis-bold">version</b> shell variable.</p>


</td></tr><tr><td valign="top">where</td><td><p><b class="emphasis-bold">where</b> <em class="emphasis">command</em></p><a name="INDEX-1659" /><p><b class="emphasis-bold">tcsh</b> only.
Display all aliases, built-ins, and executables named <em class="emphasis">command</em>.</p>


</td></tr><tr><td valign="top">which</td><td><p><b class="emphasis-bold">which</b> <em class="emphasis">command</em></p><a name="INDEX-1660" /><p><b class="emphasis-bold">tcsh</b> only. Report which version of command will be executed.
Same as the executable <b class="emphasis-bold">which</b>, but faster, and checks <b class="emphasis-bold">tcsh</b>
built-ins.</p>


</td></tr><tr><td valign="top">while</td><td><p><b class="emphasis-bold">while</b> <b class="emphasis-bold">(</b><em class="emphasis">expression</em><b class="emphasis-bold">)</b></p><p>    <em class="emphasis">commands</em></p><p><b class="emphasis-bold">end</b></p><a name="INDEX-1661" /><p>As long as <em class="emphasis">expression</em> is true
(evaluates to nonzero),
evaluate <em class="emphasis">commands</em> 
between <b class="emphasis-bold">while</b> and <b class="emphasis-bold">end</b>. <b class="emphasis-bold">break</b> and <b class="emphasis-bold">continue</b> can
be used to terminate or continue the loop.</p>


<?troff .rm CURRENT?><h4 class="refsect2">Example</h4>


<?troff .sp -3p?><blockquote><pre class="code"><tt class="userinput"><b>set user = (alice bob carol ted)
while ($argv[1] != $user[1])</b></tt>   Cycle through each user, checking for a match
   <tt class="userinput"><b>shift user</b></tt>                  If we cycled through with no match...
   <tt class="userinput"><b>if ($#user == 0) then
     echo "$argv[1] is not on the list of users"
     exit 1
   endif
end</b></tt></pre></blockquote>


<?troff .sp -3p?><a name="INDEX-1662" /></td></tr></table>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch09_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">8.8. Job Control</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">9. Pattern Matching</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>