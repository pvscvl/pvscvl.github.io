<?label 7.4. Variables?><html><head><title>Variables (Linux in a Nutshell, 3rd Edition)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ellen Siever, Stephen Spainhour, Stephen Figgins and Jessica P. Hekman" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="0596000251L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Linux in a Nutshell, 3rd Edition" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Linux in a Nutshell" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Linux in a Nutshell, 3rd Edition</a></td><td width="172" valign="top" align="right"><a href="ch07_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">7.4. Variables</h2>


<p><a name="INDEX-1379" /><a name="INDEX-1380" />Variables are prefaced by a dollar sign (<b class="emphasis-bold">$</b>) and optionally enclosed in braces (<b class="emphasis-bold">{}</b>). You can assign a value to a
variable through an equals sign (<b class="emphasis-bold">=</b>); no whitespace can appear on either side of
the equals sign:
<blockquote><pre class="code">$ <tt class="userinput"><b>TMP=temp.file</b></tt></pre></blockquote>


By default, variables are seen only within the shell itself; to pass
variables to other programs invoked within the shell, see the
<b class="emphasis-bold">export</b> built-in command.</p>


<p>If subscripted by brackets (<b class="emphasis-bold">[]</b>), the variable is considered an
array variable. For instance:
<blockquote><pre class="code">$ <tt class="userinput"><b>DIR_LIST[0]=src</b></tt>
$ <tt class="userinput"><b>DIR_LIST[1]=headers</b></tt>
$ <tt class="userinput"><b>ls ${DIR_LIST[1]}</b></tt></pre></blockquote>


The contents of <em class="emphasis">headers</em> are listed. Many
substitutions and commands in this chapter handle arrays by operating
on each element separately.</p>


<p>This subsection describes:</p>


<ul><li><p>Variable substitution</p></li><li><p>Built-in shell variables</p></li></ul><a name="ln.ch04.div.18" /><div class="sect2">
<h3 class="sect2">7.4.1. Variable Substitution</h3>


<a name="INDEX-1381" /><a name="INDEX-1382" /><p>In the following substitutions,
braces (<b class="emphasis-bold">{ }</b>) are optional,
except when needed to separate a variable name from following characters
that would otherwise be considered part of the name.
</p>


<a name="ln.ch04.tbl.varsub" /><table cellpadding="4" border="1">




<tr>
<th><b class="emphasis-bold">Variable</b></th>
<th><b class="emphasis-bold">Meaning</b></th>
</tr>






<tr>
<td>

<tt class="literal">${</tt><em class="replaceable">var</em><tt class="literal">}</tt></td>
<td>The value of variable <em class="replaceable">var</em>.</td>
</tr>



<tr>
<td>

<tt class="literal">$0</tt></td>
<td>Name of the program.</td>
</tr>



<tr>
<td>

<tt class="literal">${</tt><em class="replaceable">n</em><tt class="literal">}</tt></td>
<td><p>Individual arguments on command line (positional parameters); 1 <img src='figs/U2264.gif' align='absmiddle'></graphic> <em class="emphasis">n</em> <img src='figs/U2264.gif' align='absmiddle'></graphic> 9.
</p></td>
</tr>


<tr>
<td>

<tt class="literal">$#</tt></td>
<td>Number of arguments on command line.
</td>
</tr>


<tr>
<td>

<tt class="literal">$*</tt></td>
<td>All arguments on command line.</td>
</tr>



<tr>
<td>

<tt class="literal">$@</tt></td>
<td><p>Same as <tt class="literal">$*</tt> but contents are split into words when the variable is enclosed in double quotes.</p></td>
</tr>



<tr>
<td>

<tt class="literal">$$</tt></td>
<td><p>Process number of current shell; useful as part of a filename for creating temporary files with unique names.
</p></td>
</tr>


<tr>
<td>

<tt class="literal">$?</tt></td>
<td>Exit status of last command (normally 0 for success).</td>
</tr>



<tr>
<td>

<tt class="literal">$!</tt></td>
<td>Process number of most recently issued background command.</td>
</tr>



<tr>
<td>

<tt class="literal">$-</tt></td>
<td><p>Current execution options (see the <b class="emphasis-bold">set</b> built-in command). By default, <b class="emphasis-bold">hB</b> for scripts and <b class="emphasis-bold">himBH</b> for interactive shells.</p></td>
</tr>


<tr>
<td>

<tt class="literal">$_</tt></td>
<td><p>Initially set to name of file invoked for this shell, then set for each command to the last word of the previous command.</p></td>
</tr>




</table><p><a href="ch07_04.htm">Table 7-16</a> through
<a href="ch07_04.htm">Table 7-18</a> show various types of operators that
can be used with <b class="emphasis-bold">bash</b> variables.</p>


<a name="ln.ch04.tbl.23" /><h4 class="objtitle">Table 7-16. Substitution Operators</h4><table cellpadding="4" border="1">




<tr>
<th><b class="emphasis-bold">Operator</b></th>
<th><p><b class="emphasis-bold">Substitution

</b></p></th>
</tr>






<tr>
<td><b class="emphasis-bold">$</b><b class="emphasis-bold">{</b><em class="emphasis">varname</em><b class="emphasis-bold">:-</b><em class="emphasis">word</em><b class="emphasis-bold">}</b></td>
<td><p>If <em class="emphasis">varname</em> exists and isn't null, return its value;
otherwise, return <em class="emphasis">word</em>.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Purpose</b>:</td>
<td><p>Returning a default value if the variable is undefined.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Example</b>:</td>
<td><p><b class="emphasis-bold">${count:-0}</b> evaluates to 0 if <b class="emphasis-bold">count</b> is undefined.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">$</b><b class="emphasis-bold">{</b><em class="emphasis">varname</em><b class="emphasis-bold">:=</b><em class="emphasis">word</em>}</td>
<td><p>If <em class="emphasis">varname</em> exists and isn't null, return its value;
otherwise set it to <em class="emphasis">word</em> and then return its value.
Positional and special parameters cannot be assigned this way.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Purpose</b>:</td>
<td><p>Setting a variable to a default value if it is undefined.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Example</b>:</td>
<td><p><b class="emphasis-bold">$</b><b class="emphasis-bold">{count</b><b class="emphasis-bold">:=</b><b class="emphasis-bold">0}</b> sets <b class="emphasis-bold">count</b> to 0 if it is undefined.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">$</b><b class="emphasis-bold">{</b><em class="emphasis">varname</em><b class="emphasis-bold">:?</b><em class="emphasis">message</em><b class="emphasis-bold">}</b></td>
<td><p>If <em class="emphasis">varname</em> exists and isn't null, return its value;
otherwise, print <em class="emphasis">varname</em><b class="emphasis-bold">:</b> followed by <em class="emphasis">message</em>,
and abort the current command or script (noninteractive shells
only). Omitting <em class="emphasis">message</em> produces the default message
"parameter null or not set."</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Purpose</b>:</td>
<td><p>Catching errors that result from variables being undefined.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Example</b>:</td>
<td><p><b class="emphasis-bold">{count:?"undefined!"}</b> prints ``count: undefined!'' and exits if <b class="emphasis-bold">count</b> is undefined.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">$</b><b class="emphasis-bold">{</b><em class="emphasis">varname</em><b class="emphasis-bold">:+</b><em class="emphasis">word</em><b class="emphasis-bold">}</b></td>
<td><p>If <em class="emphasis">varname</em> exists and isn't null, return <em class="emphasis">word</em>;
otherwise, return null.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Purpose</b>:</td>
<td><p>Testing for the existence of a variable.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Example</b>:</td>
<td><p><b class="emphasis-bold">$</b><b class="emphasis-bold">{count</b><b class="emphasis-bold">:+</b><b class="emphasis-bold">1}</b>
returns 1 (which could mean <b class="emphasis-bold">true</b>) if <b class="emphasis-bold">count</b> is defined.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${#</b><em class="emphasis">varname</em><b class="emphasis-bold">}</b></td>
<td><p>Return the number of characters in <em class="emphasis">varname</em>.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Purpose</b>:</td>
<td><p>Preparing for substitution or extraction of substrings.</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">  Example</b>:</td>
<td><p>If <b class="emphasis-bold">${USER}</b> currently expands to
<b class="emphasis-bold">root</b>, <b class="emphasis-bold">${#USER}</b> expands to 4.</p></td>
</tr>



</table>


<a name="INDEX-1383" /><a name="INDEX-1384" /><a name="INDEX-1385" /><a name="ln.ch04.tbl.24" /><h4 class="objtitle">Table 7-17. Pattern-Matching Operators</h4><table cellpadding="4" border="1">




<tr>
<th><b class="emphasis-bold">Operator</b></th>
<th><b class="emphasis-bold">Meaning

</b></th>
</tr>






<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">variable</em><b class="emphasis-bold">#</b><em class="emphasis">pattern}</em></td>
<td><p>If the pattern matches the beginning of the variable's value,
delete the shortest part that matches and return the rest.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">variable</em><b class="emphasis-bold">##</b><em class="emphasis">pattern}</em></td>
<td><p>If the pattern matches the beginning of the variable's value,
delete the longest part that matches and return the rest.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">variable</em><b class="emphasis-bold">%</b><em class="emphasis">pattern}</em></td>
<td><p>If the pattern matches the end of the variable's value,
delete the shortest part that matches and return the rest.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">variable</em><b class="emphasis-bold">%%</b><em class="emphasis">pattern}</em></td>
<td><p>If the pattern matches the end of the variable's value,
delete the longest part that matches and return the rest.
</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">var</em><b class="emphasis-bold">/</b><em class="emphasis">pat</em><b class="emphasis-bold">/</b><em class="emphasis">sub}</em></td>
<td><p>Return <em class="emphasis">var</em> with the first occurrence of
<em class="emphasis">pat</em> replaced by <em class="emphasis">sub</em>.  Can be
applied to <b class="emphasis-bold">$*</b> or <b class="emphasis-bold">$@</b>, in which case each word is treated
separately. If <em class="emphasis">pat</em> starts with <b class="emphasis-bold">#</b> it can match only the start of
<em class="emphasis">var</em>; if <em class="emphasis">pat</em> ends with
<b class="emphasis-bold">%</b> it can match only the end of
<em class="emphasis">var</em>.
</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">var</em><b class="emphasis-bold">//</b><em class="emphasis">pat</em><b class="emphasis-bold">/</b><em class="emphasis">sub}</em></td>
<td><p>Return <em class="emphasis">var</em> with the every occurrence of
<em class="emphasis">pat</em> replaced by <em class="emphasis">sub</em>.
</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">variable</em><b class="emphasis-bold">:</b><em class="emphasis">n}</em></td>
<td><p>Truncate the beginning of the variable and return the part starting
with character number <em class="emphasis">n</em>, where the first
character is 0.
</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">${</b><em class="emphasis">variable</em><b class="emphasis-bold">:</b><em class="emphasis">n</em><b class="emphasis-bold">:</b><em class="emphasis">l}</em></td>
<td><p>Starting with character number <em class="emphasis">n</em>, where the first
character is 0, return a substring of length <em class="emphasis">l</em>
from the variable.
</p></td>
</tr>



</table>


<p><a name="INDEX-1386" /></p>


<a name="INDEX-1387" /><a name="INDEX-1388" /><a name="INDEX-1389" /><a name="ln.ch04.tbl.expr" /><h4 class="objtitle">Table 7-18. Expression Evaluation</h4><table cellpadding="4" border="1">




<tr>
<th><b class="emphasis-bold">Operator</b></th>
<th><b class="emphasis-bold">Meaning

</b></th>
</tr>






<tr>
<td><b class="emphasis-bold">$((</b><em class="emphasis">arithmetic-expression</em><b class="emphasis-bold">))</b></td>
<td><p>Return the result of the expression. Arithmetic operators are
described under "Arithmetic Expressions."</p></td>
</tr>


<tr>
<td>  <b class="emphasis-bold">Example</b>:</td>
<td><p><b class="emphasis-bold">TODAY=</b><tt class="literal">'</tt><b class="emphasis-bold">date +%-d</b><tt class="literal">'</tt><b class="emphasis-bold"> ; echo $(($TODAY+7))</b>
stores the number of the current day in <b class="emphasis-bold">$TODAY</b> and then prints that number plus 7 (the
number of the same day next week).</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">[[$</b><em class="emphasis">condition</em><b class="emphasis-bold">]]</b></td>
<td><p>Return 1 if <em class="emphasis">condition</em> is true and 0 if it is
false.  Conditions are described under the <b class="emphasis-bold">test</b> built-in command.</p></td>
</tr>



</table>
</div>








<a name="ln.ch04.div.19" /><div class="sect2">
<h3 class="sect2">7.4.2. Built-in Shell Variables</h3>


<p><a name="INDEX-1390" />
Built-in variables are set automatically by the shell and
typically are used inside shell scripts. Built-in variables can make use
of the variable substitution patterns already shown earlier. When
setting variables, you do not include dollar signs, but when
referencing their values later, the dollar signs are necessary.</p>


<p>Tables <a href="ch07_04.htm">Table 7-19</a> through <a href="ch07_04.htm">Table 7-22</a> show the commonly used built-in variables in
<b class="emphasis-bold">bash</b>.</p>


<a name="ln.ch04.tbl.beh" /><h4 class="objtitle">Table 7-19. Behavior-Altering Variables</h4><table cellpadding="4" border="1">




<tr>
<td><b class="emphasis-bold">Variable</b></td>
<td><b class="emphasis-bold">Meaning

</b></td>
</tr>



<tr>
<td><b class="emphasis-bold">auto_resume</b></td>
<td><p>Allows a background job to be brought to the foreground
simply by entering a substring of the job's command line; values can
be <b class="emphasis-bold">substring</b> (resume if the user's
string matches part of the command); <b class="emphasis-bold">exact</b> (string must exactly match command); or
another value (string must match at beginning of command).</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">BASH_ENV</b></td>
<td><p>Startup file of commands to execute, if <b class="emphasis-bold">bash</b> is invoked to run a script.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">CDPATH</b></td>
<td><p>Colon-separated list of directories to search for the directory
passed in a <b class="emphasis-bold">cd</b> command.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">EDITOR</b></p></td>
<td><p>Pathname of your preferred text editor.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">IFS</b></td>
<td><p>Word separator; used by shell to parse commands into
their elements.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">IGNOREEOF</b></td>
<td><p>If nonzero, don't allow use of a single
<b class="emphasis-bold">Ctrl-D</b> (the end-of-file or
EOF character) to log off; use the 
<b class="emphasis-bold">exit</b> command to log off.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">PATH</b></p></td>
<td><p>Colon-separated list of directories to search for each command.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">PROMPT_COMMAND</b></p></td>
<td><p>Command that <b class="emphasis-bold">bash</b>
executes before issuing a prompt for a new command.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">PS1</b></p></td>
<td><p>Prompt displayed before each new command; see the later section <a href="ch07_06.htm">Section 7.6.4, "Variables in Prompt"</a> for ways to introduce dynamically changing information such
as the current working directory or command history number into the
prompt.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">PS2</b></p></td>
<td><p>Prompt displayed before a new line if a command is not finished.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">PS3</b></p></td>
<td><p>Prompt displayed by <b class="emphasis-bold">select</b> built-in command.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">PS4</b></p></td>
<td><p>Prompt displayed by <b class="emphasis-bold">-x</b> debugging (see <a href="ch07_02.htm">Section 7.2, "Invoking the Shell"</a>).
and the <b class="emphasis-bold">set</b> built-in
command).</p></td>
</tr>




</table>


<a name="INDEX-1391" /><a name="ln.ch04.tbl.27" /><h4 class="objtitle">Table 7-20. History Variables</h4><table cellpadding="4" border="1">




<tr>
<th><b class="emphasis-bold">Variable</b></th>
<th><b class="emphasis-bold">Meaning

</b></th>
</tr>






<tr>
<td><b class="emphasis-bold">FCEDIT</b></td>
<td>Pathname of editor to use with the <b class="emphasis-bold">fc</b> command.</td>
</tr>


<tr>
<td><b class="emphasis-bold">HISTCMD</b></td>
<td><p>The history number of the current command.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">HISTCONTROL</b></td>
<td><p>If HISTCONTROL is set to the value of <b class="emphasis-bold">ignorespace</b>, lines beginning with a
space are not entered into the history list. If set to <b class="emphasis-bold">ignoredups</b>,
lines matching the last history line are not entered. Setting it
to <b class="emphasis-bold">ignoreboth</b> enables both options.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">HISTFILE</b></td>
<td>Name of history file, on which the editing modes operate.</td>
</tr>


<tr>
<td><b class="emphasis-bold">HISTFILESIZE</b></td>
<td><p>The maximum number of lines to store in the history file. The
default is 500.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">HISTSIZE</b></td>
<td><p>The maximum number of commands to remember in the command history. The
default is 500.</p></td>
</tr>




</table>


<a name="INDEX-1392" /><a name="ln.ch04.tbl.28" /><h4 class="objtitle">Table 7-21. Mail Variables</h4><table cellpadding="4" border="1">




<tr>
<td><b class="emphasis-bold">Variable</b></td>
<td><b class="emphasis-bold">Meaning



</b></td>
</tr>


<tr>
<td><b class="emphasis-bold">MAIL</b></td>
<td>Name of file to check for incoming mail.</td>
</tr>


<tr>
<td><b class="emphasis-bold">MAILCHECK</b></td>
<td><p>How often, in seconds, to check for new mail (default is 60 seconds).</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">MAILPATH</b></td>
<td><p>List of filenames, separated by colons (<b class="emphasis-bold">:</b>), to check for incoming
mail.
</p></td>
</tr>



</table>


<a name="INDEX-1393" /><a name="INDEX-1394" /><a name="ln.ch04.tbl.29" /><h4 class="objtitle">Table 7-22. Status Variables</h4><table cellpadding="4" border="1">




<tr>
<td><b class="emphasis-bold">Variable</b></td>
<td><b class="emphasis-bold">Meaning

</b></td>
</tr>


<tr>
<td><b class="emphasis-bold">BASH</b></td>
<td>Pathname of this instance of the shell you are running.</td>
</tr>


<tr>
<td><b class="emphasis-bold">BASH_VERSION</b></td>
<td>The version number of the shell you are running.</td>
</tr>


<tr>
<td><p><b class="emphasis-bold">COLUMNS</b></p></td>
<td><p>The number of columns your display has.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">DIRSTACK</b></p></td>
<td><p>List of directories manipulated by 
<b class="emphasis-bold">pushd</b> and
<b class="emphasis-bold">popd</b>
commands.</p></td>
</tr>



<tr>
<td><p><b class="emphasis-bold">EUID</b></p></td>
<td><p>Effective user ID of process running this shell, in the
form of the number recognized by the system.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">GROUPS</b></p></td>
<td><p>Groups to which user belongs, in the form of the numbers
recognized by the system.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">HOME</b></td>
<td>Name of your home (login) directory.</td>
</tr>


<tr>
<td><b class="emphasis-bold">HOSTNAME</b></td>
<td>Host the shell is running on.</td>
</tr>


<tr>
<td><b class="emphasis-bold">HOSTTYPE</b></td>
<td><p>Short name indicating the type of machine the shell is running
on; for instance, i486.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">LINES</b></p></td>
<td><p>The number of lines your display has.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">MACHTYPE</b></td>
<td><p>Long string indicating the machine the shell is running on; for
instance, <b class="emphasis-bold">i486-pc-linux-gnu.</b></p></td>
</tr>


<tr>
<td><b class="emphasis-bold">OLDPWD</b></td>
<td><p>Previous directory before the last <b class="emphasis-bold">cd</b> command.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">OSTYPE</b></td>
<td><p>Short string indicating the operating system; for
instance, "linux-gnu."</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">PPID</b></td>
<td><p>Process ID of parent process that invoked this shell.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">PWD</b></td>
<td><p>Current directory.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">SECONDS</b></td>
<td><p>Number of seconds since the shell was invoked.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">SHELL</b></p></td>
<td><p>Pathname of the shell you are running.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">SHLVL</b></p></td>
<td><p>Depth to which running shells are nested.</p></td>
</tr>


<tr>
<td><b class="emphasis-bold">TERM</b></td>
<td><p>The type of terminal that you are using.</p></td>
</tr>


<tr>
<td><p><b class="emphasis-bold">UID</b></p></td>
<td><p>Real user ID of process running this shell, in the form
of the number recognized by the system.</p></td>
</tr>




</table>


<p><a name="INDEX-1395" /><a name="INDEX-1396" /></p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch07_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">7.3. Syntax</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">7.5. Arithmetic Expressions</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>