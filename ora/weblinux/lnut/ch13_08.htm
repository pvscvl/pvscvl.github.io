<?label 13.8. Alphabetical Summary of Commands?><html><head><title>Alphabetical Summary of Commands (Linux in a Nutshell, 3rd Edition)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ellen Siever, Stephen Spainhour, Stephen Figgins and Jessica P. Hekman" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="0596000251L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Linux in a Nutshell, 3rd Edition" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Linux in a Nutshell" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Linux in a Nutshell, 3rd Edition</a></td><td width="172" valign="top" align="right"><a href="ch14_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">13.8. Alphabetical Summary of Commands</h2>


<p>The following alphabetical list of statements and functions
includes all that are available in <b class="emphasis-bold">gawk</b> in Linux.</p>


<table cellpadding="5" border="1"><tr><td valign="top">atan2</td><td><p><b class="emphasis-bold">atan2(</b><em class="emphasis">y</em><b class="emphasis-bold">,</b><em class="emphasis">x</em><b class="emphasis-bold">)</b></p><a name="INDEX-1909" /><p>Return the arctangent of <em class="emphasis">y</em>/<em class="emphasis">x</em> in radians.</p>


</td></tr><tr><td valign="top">break</td><td><p><b class="emphasis-bold">break</b></p><a name="INDEX-1910" /><p>Exit from a <b class="emphasis-bold">while</b> or <b class="emphasis-bold">for</b> loop.</p>


</td></tr><tr><td valign="top">close</td><td><p><b class="emphasis-bold">close(</b><em class="emphasis">filename-expr</em><b class="emphasis-bold">)</b></p><p><b class="emphasis-bold">close(</b><em class="emphasis">command-expr</em><b class="emphasis-bold">)</b></p><a name="INDEX-1911" /><p>Close a file read by a <b class="emphasis-bold">getline</b> command or a pipe; takes as an
argument the same expression that opened the pipe or file.</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 10?><tr><td valign="top">continue</td><td><p><b class="emphasis-bold">continue</b></p><a name="INDEX-1912" /><p>Begin next iteration of <b class="emphasis-bold">while</b> or <b class="emphasis-bold">for</b> loop without reaching the
<?troff \p?>bottom.</p>


</td></tr><tr><td valign="top">cos</td><td><p><b class="emphasis-bold">cos(</b><em class="emphasis">x</em><b class="emphasis-bold">)</b></p><a name="INDEX-1913" /><p>Return the cosine of <em class="emphasis">x</em>, an angle in radians.</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 10?><tr><td valign="top">delete</td><td><p><b class="emphasis-bold">delete</b> <em class="emphasis">array</em>[<em class="emphasis">element</em>]</p><p><b class="emphasis-bold">delete</b> <em class="emphasis">array</em></p><a name="INDEX-1914" /><p>Delete <em class="emphasis">element</em> of <em class="emphasis">array</em>.
If no element is specified, all elements are deleted.</p>


</td></tr><tr><td valign="top">do</td><td><p><b class="emphasis-bold">do</b></p><p>    <em class="emphasis">body</em></p><p><b class="emphasis-bold">while(</b><em class="emphasis">expr</em><b class="emphasis-bold">)</b></p><a name="INDEX-1915" /><p>Looping statement.
Execute statements in <em class="emphasis">body</em>, then evaluate <em class="emphasis">expr</em>.
If <em class="emphasis">expr</em> is true, execute <em class="emphasis">body</em> again.</p>


</td></tr><tr><td valign="top">exit</td><td><p><b class="emphasis-bold">exit</b></p><a name="INDEX-1916" /><p>Do not execute remaining instruction, and read no new input. <b class="emphasis-bold">END</b>
procedures will be executed.</p>


</td></tr><tr><td valign="top">exp</td><td><p><b class="emphasis-bold">exp(</b><em class="emphasis">arg</em><b class="emphasis-bold">)</b></p><a name="INDEX-1917" /><p>Return the natural exponent of <em class="emphasis">arg</em> (the inverse of <b class="emphasis-bold">log</b>).</p>


</td></tr><tr><td valign="top">fflush</td><td><p><b class="emphasis-bold">fflush(</b><em class="emphasis">filename</em><b class="emphasis-bold">)</b></p><a name="INDEX-1918" /><p>Flushes output to <em class="emphasis">filename</em>; default is the standard output.</p>


</td></tr><tr><td valign="top">for</td><td><p><b class="emphasis-bold">for(</b><em class="emphasis">i</em><b class="emphasis-bold">=</b><em class="emphasis">lower</em> <b class="emphasis-bold">;</b> <em class="emphasis">i</em><b class="emphasis-bold">&lt;=</b><em class="emphasis">upper</em> <b class="emphasis-bold">;</b> <em class="emphasis">i</em><b class="emphasis-bold">++)</b></p><p>    <em class="emphasis">command</em></p><a name="INDEX-1919" /><p>While the value of variable <em class="emphasis">i</em> is in the range between
<em class="emphasis">lower</em> and <em class="emphasis">upper</em>, do <em class="emphasis">command</em>. 
A series of commands must be put within braces. &lt;= or any 
<?troff .ne 10?>relational operator can be
used; ++ or -- can be used to increment or decrement the variable.</p>


</td></tr><tr><td valign="top">for</td><td><p><b class="emphasis-bold">for(</b><em class="emphasis">item</em> <b class="emphasis-bold"> in</b> <em class="emphasis">array</em><b class="emphasis-bold">)</b></p><p>     <em class="emphasis">command</em></p><p>For each <em class="emphasis">item</em> in an associative <em class="emphasis">array</em>, do
<em class="emphasis">command</em>. Multiple commands must be put inside braces.
Refer to each element of the array as <em class="emphasis">array</em><b class="emphasis-bold">[</b><em class="emphasis">item</em><b class="emphasis-bold">]</b>.
Elements of <b class="emphasis-bold">gawk</b> arrays are stored in 
an order that enables access
of any element in essentially equivalent time. This order may 
<?troff .ne 10?>appear
to be indiscriminate; if the output is desired in sorted order, you
must pipe it through the <b class="emphasis-bold">sort</b> command.</p>


</td></tr><tr><td valign="top">function</td><td><p><b class="emphasis-bold">function</b> <em class="emphasis">name</em><b class="emphasis-bold">(</b><em class="emphasis">parameter-list</em><b class="emphasis-bold">) {</b></p><p>     <em class="emphasis">statements</em></p><p><b class="emphasis-bold">}</b></p><a name="INDEX-1920" /><p>Create <em class="emphasis">name</em> as a user-defined function consisting of <b class="emphasis-bold">gawk</b>
<em class="emphasis">statements</em> that apply to the specified list of parameters.</p>


</td></tr><tr><td valign="top">gensub</td><td><p><b class="emphasis-bold">gensub(</b><em class="emphasis">r,s,n,t</em><b class="emphasis-bold">)</b></p><a name="INDEX-1921" /><p>Substitute <em class="emphasis">s</em> for the <em class="emphasis">n</em>th match of
regular expression <em class="emphasis">r</em> in the string <em class="emphasis">t</em>.
Leave <em class="emphasis">t</em> unchanged, but return new string as the result.
If <em class="emphasis">n</em> is "g" or "G" change all matches.
If <em class="emphasis">t</em> is not supplied, it defaults to <b class="emphasis-bold">$0</b>.</p>


</td></tr><tr><td valign="top">getline</td><td><p><b class="emphasis-bold">getline</b> [<em class="emphasis">var</em>hairsp;] [<b class="emphasis-bold">&lt;</b><em class="emphasis">file</em>]</p><p><em class="emphasis">command</em> <b class="emphasis-bold">| getline</b> [<em class="emphasis">var</em>]</p><a name="INDEX-1922" /><p>The first form reads input from <em class="emphasis">file</em> or the next file on the
command line,
and the second form reads the output of <em class="emphasis">command</em>.
Both forms read one line at a time, and each time
the statement is executed it gets the next line
of input. The line of input is assigned to <b class="emphasis-bold">$0</b>
and is parsed into fields, setting <b class="emphasis-bold">NF</b>,
<b class="emphasis-bold">NR</b>, and <b class="emphasis-bold">FNR</b>.
If <em class="emphasis">var</em> is specified, the result is assigned
to <em class="emphasis">var</em>, and neither <b class="emphasis-bold">$0</b> nor <b class="emphasis-bold">NF</b> is changed. Thus, if
the result is assigned to a variable, the
current line does not change.
<b class="emphasis-bold">getline</b> is actually a function, and it returns 1 if it
reads a record successfully, 0 at <em class="emphasis">EOF</em>, and -1 if for some reason it is
otherwise unsuccessful.</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 10?><tr><td valign="top">gsub</td><td><p><b class="emphasis-bold">gsub(</b><em class="emphasis">r,s,t</em><b class="emphasis-bold">)</b></p><a name="INDEX-1923" /><p>Globally substitute <em class="emphasis">s</em> for each match of the
regular expression <em class="emphasis">r</em> in the string <em class="emphasis">t</em>. Return
the number of substitutions. If <em class="emphasis">t</em> is not supplied,
it defaults to <b class="emphasis-bold">$0</b>.</p>


</td></tr><tr><td valign="top">if</td><td><p><b class="emphasis-bold">if</b> <b class="emphasis-bold">(</b><em class="emphasis">condition</em><b class="emphasis-bold">)</b></p><p>    <em class="emphasis">command1</em></p><p>[<b class="emphasis-bold">else</b></p><p>    <em class="emphasis">command2</em>]</p><a name="INDEX-1924" /><p>If <em class="emphasis">condition</em> is true, do <em class="emphasis">command1</em>; otherwise, do
<em class="emphasis">command2</em>. Condition can be an expression using
any of the relational operators &lt;, &lt;=, ==, !=, &gt;=, or &gt;, as well as
the pattern-matching operator <b class="emphasis-bold">~</b>.
A series of commands must be put within braces.</p>


<h4 class="refsect2">Example</h4>


<p>The following lines determine whether the first word in each line starts
with A, uppercase or lowercase:</p>


<blockquote><pre class="code">if ($1 ~ /[Aa]*/)
    ...Begins with A or a</pre></blockquote>


</td></tr><tr><td valign="top">index</td><td><p><b class="emphasis-bold">index(</b><em class="emphasis">substr</em><b class="emphasis-bold">,</b><em class="emphasis">str</em><b class="emphasis-bold">)</b></p><a name="INDEX-1925" /><p>Return the position of a substring in a string. Returns 0 if
<em class="emphasis">substr</em> is not contained in <em class="emphasis">str</em>.</p>


</td></tr><tr><td valign="top">int</td><td><p><b class="emphasis-bold">int(</b><em class="emphasis">arg</em><b class="emphasis-bold">)</b></p><a name="INDEX-1926" /><p>Return the integer part of <em class="emphasis">arg</em>.</p>


</td></tr><tr><td valign="top">length</td><td><p><b class="emphasis-bold">length(</b><em class="emphasis">arg</em><b class="emphasis-bold">)</b></p><a name="INDEX-1927" /><p>Return the length of <em class="emphasis">arg</em>. If <em class="emphasis">arg</em> is not supplied, <b class="emphasis-bold">$0</b> is
assumed.</p>


</td></tr><tr><td valign="top">log</td><td><p><b class="emphasis-bold">log(</b><em class="emphasis">arg</em><b class="emphasis-bold">)</b></p><a name="INDEX-1928" /><p>Return the natural logarithm of <em class="emphasis">arg</em> (the inverse of <b class="emphasis-bold">exp</b>).</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 10?><tr><td valign="top">match</td><td><p><b class="emphasis-bold">match(</b><em class="emphasis">s</em><b class="emphasis-bold">,</b><em class="emphasis">r</em><b class="emphasis-bold">)</b></p><a name="INDEX-1929" /><p>Return position in <em class="emphasis">s</em> where regular expression <em class="emphasis">r</em> first matches 
or 0 if no occurrences are found. Sets the value
of <b class="emphasis-bold">RSTART</b> and <b class="emphasis-bold">RLENGTH</b>.</p>


</td></tr><tr><td valign="top">next</td><td><p><b class="emphasis-bold">next</b></p><a name="INDEX-1930" /><p>Read next input line and start new cycle through pattern/procedures
statements.</p>


</td></tr><tr><td valign="top">nextfile</td><td><p><b class="emphasis-bold">nextfile</b></p><a name="INDEX-1931" /><p>Skip to the next file on the <b class="emphasis-bold">gawk</b> command line and start new
cycle through pattern/procedures statements.</p>


</td></tr><tr><td valign="top">print</td><td><p><b class="emphasis-bold">print</b> [<em class="emphasis">args</em>] [<em class="emphasis">destination</em>]</p><a name="INDEX-1932" /><p>Print <em class="emphasis">args</em> on output. 
Literal strings must be quoted. Fields are
printed in the order they are listed. If separated by commas in the
argument list, they are separated in the output by the character
specified by <b class="emphasis-bold">OFS</b>. If separated by spaces, they are
concatenated in the output. <em class="emphasis">destination</em> is a shell redirection or
pipe expression (e.g., <b class="emphasis-bold">&gt;</b> <em class="emphasis">file</em>) that redirects the 
default output.</p>


</td></tr><tr><td valign="top">printf</td><td><p><b class="emphasis-bold">printf</b> [<em class="emphasis">format</em> [<b class="emphasis-bold">,</b> <em class="emphasis">expressions</em>]]</p><a name="INDEX-1933" /><p>Formatted <b class="emphasis-bold">print</b> statement. Expressions or variables can be
formatted according to instructions in the <em class="emphasis">format</em> argument. 
The number of <em class="emphasis">expressions</em> must correspond to the number
specified in the format sections.</p>


<p><em class="emphasis">format</em> follows the conventions of the C-language <b class="emphasis-bold">printf</b>
statement. Here are a few of the most common formats:</p>


<dl>
<dt><b><b class="emphasis-bold">%s</b></b></dt><dd><p>A string.</p></dd>



<dt><b><b class="emphasis-bold">%d</b></b></dt><dd><p>A decimal number.</p></dd>



<dt><b><b class="emphasis-bold">%</b><em class="emphasis">n</em><b class="emphasis-bold">.</b><em class="emphasis">m</em><b class="emphasis-bold">f</b></b></dt><dd><p>A floating point number. <em class="emphasis">n</em> = total number of digits; <em class="emphasis">m</em> =
number of digits after decimal point.</p></dd>



<dt><b><b class="emphasis-bold">%[-]</b><em class="emphasis">nc</em></b></dt><dd><p><em class="emphasis">n</em> specifies minimum field length for format type <em class="emphasis">c</em>, while
<em class="emphasis">-</em> left-justifies value in field; otherwise, value is right-justified.</p></dd>

</dl>


<p>Field widths are adjustable. For example, <b class="emphasis-bold">%3.2f</b> limits a floating-point number to a total
width of three digits, with two digits after the decimal point.</p>


<p><em class="emphasis">format</em> also can contain embedded escape sequences,
<b class="emphasis-bold">\n</b> (newline) and <b class="emphasis-bold">\t</b> (tab)
being the most common.
Spaces and literal text can be placed in the <em class="emphasis">format</em> argument
by quoting the entire argument.
If there are multiple expressions to be printed, multiple formats
should be specified.</p>


<?troff .rm CURRENT?><h4 class="refsect2">Example</h4>


<p>Using the script:</p>


<blockquote><pre class="code"><tt class="userinput"><b>{printf ("The sum on line %s is %d.\n", NR, $1+$2)}</b></tt></pre></blockquote>


<p>the following input line:</p>


<blockquote><pre class="code"><tt class="userinput"><b>5   5</b></tt></pre></blockquote>


<p>produces this output, followed by a newline:</p>


<blockquote><pre class="code">The sum on line 1 is 10.</pre></blockquote>


</td></tr>
<?troff .Nd 10?><tr><td valign="top">rand</td><td><p><b class="emphasis-bold">rand( )</b></p><a name="INDEX-1934" /><p>Generate a random number between 0 and 1. This function returns the
same series of numbers each time the script is executed, unless the random
number generator is seeded using the <b class="emphasis-bold">srand</b> function.</p>


</td></tr><tr><td valign="top">return</td><td><p><b class="emphasis-bold">return</b> [<em class="emphasis">expr</em>]</p><a name="INDEX-1935" /><p>Used at end of user-defined functions to exit function,
returning the value of <em class="emphasis">expr</em>.</p>


</td></tr><tr><td valign="top">sin</td><td><p><b class="emphasis-bold">sin(</b><em class="emphasis">x</em><b class="emphasis-bold">)</b></p><a name="INDEX-1936" /><p>Return the sine of <em class="emphasis">x</em>, an angle in radians.</p>


</td></tr><tr><td valign="top">split</td><td><p><b class="emphasis-bold">split(</b><em class="emphasis">string</em><b class="emphasis-bold">,</b><em class="emphasis">array</em>[<b class="emphasis-bold">,</b><em class="emphasis">sep</em>]<b class="emphasis-bold">)</b></p><a name="INDEX-1937" /><p>Split <em class="emphasis">string</em> into elements of 
array <em class="emphasis">array</em><b class="emphasis-bold">[1]</b>,...,<em class="emphasis">array</em><b class="emphasis-bold">[</b><em class="emphasis">n</em><b class="emphasis-bold">]</b>. The string
is split at each occurrence of separator <em class="emphasis">sep</em>. If <em class="emphasis">sep</em> is
not specified, <b class="emphasis-bold">FS</b> is used. If <em class="emphasis">sep</em> is a null string, a
split is performed on every character.
The number of array elements created is returned.</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 10?><tr><td valign="top">sprintf</td><td><p><b class="emphasis-bold">sprintf</b> [<em class="emphasis">format</em> [<b class="emphasis-bold">,</b> <em class="emphasis">expression(s)</em>]]</p><a name="INDEX-1938" /><p>Return the value of one or more <em class="emphasis">expressions</em>, 
using the specified <em class="emphasis">format</em>
(see <b class="emphasis-bold">printf</b>). Data is formatted but not printed.</p>


</td></tr><tr><td valign="top">sqrt</td><td><p><b class="emphasis-bold">sqrt(</b><em class="emphasis">arg</em><b class="emphasis-bold">)</b></p><a name="INDEX-1939" /><p>Return square root of <em class="emphasis">arg</em>.</p>


</td></tr><tr><td valign="top">srand</td><td><p><b class="emphasis-bold">srand(</b><em class="emphasis">expr</em><b class="emphasis-bold">)</b></p><a name="INDEX-1940" /><p>Use <em class="emphasis">expr</em> to set a new seed for random number generator.
Default is time of day.</p>


</td></tr><tr><td valign="top">strftime</td><td><p><b class="emphasis-bold">strftime(</b>[<em class="emphasis">format</em> [<b class="emphasis-bold">,</b><em class="emphasis">timestamp</em>]]<b class="emphasis-bold">)</b></p><p><a name="INDEX-1941" />Format <em class="emphasis">timestamp</em> according to <em class="emphasis">format</em>.
Return the formatted string.
The <em class="emphasis">timestamp</em> is a time-of-day value in
seconds since midnight, January 1, 1970, UTC.
The <em class="emphasis">format</em> string is similar to that of
<b class="emphasis-bold">sprintf</b>.
(See the example for <b class="emphasis-bold">systime</b>.)
If <em class="emphasis">timestamp</em> is omitted, it defaults to the
<?troff .ne 10?>current time.
If <em class="emphasis">format</em> is omitted, it defaults to a value
that produces output similar to that of <b class="emphasis-bold">date</b>.</p>


</td></tr><tr><td valign="top">sub</td><td><p><b class="emphasis-bold">sub(</b><em class="emphasis">r</em><b class="emphasis-bold">,</b><em class="emphasis">s</em><b class="emphasis-bold">,</b><em class="emphasis">t</em><b class="emphasis-bold">)</b></p><a name="INDEX-1942" /><p>Substitute <em class="emphasis">s</em> for first match of the
regular expression <em class="emphasis">r</em> in the string <em class="emphasis">t</em>. Return
1 if successful; 0 otherwise. If <em class="emphasis">t</em> is not supplied,
the default is $0.</p>


</td></tr><tr><td valign="top">substr</td><td><p><b class="emphasis-bold">substr(</b><em class="emphasis">string</em><b class="emphasis-bold">,</b><em class="emphasis">m</em>[<b class="emphasis-bold">,</b><em class="emphasis">n</em>]<b class="emphasis-bold">)</b></p><a name="INDEX-1943" /><p>Return substring of <em class="emphasis">string</em> beginning at character position
<em class="emphasis">m</em> and consisting of the next <em class="emphasis">n</em> characters. If <em class="emphasis">n</em> is
omitted, include all characters to the end of string.</p>


</td></tr><tr><td valign="top">system</td><td><p><b class="emphasis-bold">system(</b><em class="emphasis">command</em><b class="emphasis-bold">)</b></p><a name="INDEX-1944" /><p>Execute the specified shell
<em class="emphasis">command</em> and return its status.
The status of the command that is executed typically
indicates its success (1), completion (0), or unexpected
error (-1).
The output of the command is not available for processing
within the <b class="emphasis-bold">gawk</b> script.</p>


<?troff .rm CURRENT?></td></tr>
<?troff .Nd 10?><tr><td valign="top">systime</td><td><p><b class="emphasis-bold">systime()</b></p><a name="INDEX-1945" /><p>Return number of seconds since midnight UTC, January 1, 1970.</p>


<h4 class="refsect2">Example</h4>


<p>Log the start and end times of a data-processing program:</p>


<blockquote><pre class="code">BEGIN {
	now = systime()
	mesg = strftime("Started at %m/%d/%Y %H:%M:%S", now)
	print mesg
}
<em class="replaceable">process data ...</em>
END {
	now = systime()
	mesg = strftime("Ended at %m/%d/%Y %H:%M:%S", now)
	print mesg
}</pre></blockquote>


</td></tr><tr><td valign="top">tolower</td><td><p><b class="emphasis-bold">tolower(</b><em class="emphasis">str</em><b class="emphasis-bold">)</b></p><a name="INDEX-1946" /><p>Translate all uppercase characters
in <em class="emphasis">str</em> to lowercase and return the new string.</p>


</td></tr><tr><td valign="top">toupper</td><td><p><b class="emphasis-bold">toupper(</b><em class="emphasis">str</em><b class="emphasis-bold">)</b></p><a name="INDEX-1947" /><p>Translate all lowercase characters
in <em class="emphasis">str</em> to uppercase and return the new string.</p>


</td></tr><tr><td valign="top">while</td><td><p><b class="emphasis-bold">while</b> <b class="emphasis-bold">(</b><em class="emphasis">condition</em><b class="emphasis-bold">)</b></p><p>  <em class="emphasis">command</em></p><a name="INDEX-1948" /><p>Do <em class="emphasis">command</em> while <em class="emphasis">condition</em> is true (see <b class="emphasis-bold">if</b> for a
description of allowable conditions).
A series of commands must be put within braces.</p>


</td></tr></table><p><a name="INDEX-1949" /><a name="INDEX-1950" /></p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch14_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.7. Group Listing of gawk Commands</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">14. CVS and RCS</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>