<?label 8. Other
 Administrative
 Tasks?><html><head><title>Other
 Administrative
 Tasks (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h1 class="chapter">Chapter 8. Other
 Administrative
 Tasks</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch08_01.htm">Making Backups</a><br />
<a href="ch08_02.htm">Scheduling Jobs Using cron</a><br />
<a href="ch08_03.htm">Managing System Logs</a><br />
<a href="ch08_04.htm">Managing Print Services</a><br />
<a href="ch08_05.htm">Setting Terminal Attributes</a><br />
<a href="ch08_06.htm">What to Do in an Emergency</a><br /></p></div>

<p>After reading the previous three chapters, you now have all the skills
you need to start using your system.  But don't ignore this chapter
for long.  Some of the activities, such as making backup tapes, are
important habits to develop.  You may also find it useful to have access to
files and programs on <span class="acronym">MS-DOS</span> and Windows.  Finally, we'll help you
handle events that you hope will never happen, but sometimes
do--system panics and corruption.</p>

<div class="sect1"><a name="x-100-3-sec-sysadm-backups" />
<h2 class="sect1">8.1. Making Backups</h2>

<p><a name="INDEX-1716" />
<a name="INDEX-1717" />
Making backups of your system is an important way to protect
yourself from data corruption or loss in case you have problems
with your hardware, or you make a mistake such as deleting important
files inadvertently. During your experiences with Linux, you're
likely to make quite a few customizations to the system that can't
be restored by simply reinstalling from your original installation
media. However, if you happen to have your original Linux floppies
or <span class="acronym">CD-ROM</span> handy, it may not be necessary to back up your entire
system. Your original installation media already serves as an excellent 
backup.</p>

<p><a name="INDEX-1718" />

Under Linux, as with any Unix-like system, you can
make mistakes while logged in as root that would make it impossible to boot
the system or log in. Many newcomers approach such a problem by
reinstalling the system entirely from backup, or worse, from
scratch. This is seldom, if ever, necessary. In the section
"<a href="ch08_06.htm">Section 8.6, "What to Do in an Emergency"</a>," we'll talk
about what to do in these cases.</p>

<p><a name="INDEX-1719" />
<a name="INDEX-1720" />
<a name="INDEX-1721" />
<a name="INDEX-1722" />

If you do experience data loss, it is sometimes possible to recover
that data using the filesystem maintenance tools described in the

section "<a href="ch06_01.htm">Section 6.1.5, "Checking and Repairing Filesystems"</a>" in <a href="ch06_01.htm">Chapter 6, "Managing
 Filesystems, Swap,
 and Devices"</a>. Unlike some other
operating systems, however, it's generally not possible to
"undelete" a file that has been removed by
<tt class="command">rm</tt> or overwritten by a careless
<tt class="command">cp</tt> or <tt class="command">mv</tt> command (for example,
copying one file over another destroys the file you're copying to).  In
these extreme cases, backups are key to recovering from problems.</p>

<p>Backups are usually made to tape or floppy. Neither medium is
100 percent reliable, although tape is more dependable than 
floppy in the long term. There are many tools available that
help you to make backups. In the simplest case, you can use a 
combination of <tt class="command">gzip</tt> and <tt class="command">tar</tt> to back up files from your
hard drive to floppy or tape. This is the best method to use when
you make only occasional backups, no more often than, say, once 
a month.</p>

<p><a name="INDEX-1723" />
<a name="INDEX-1724" />
If you have numerous users on your system or you make frequent
changes to the system configuration, it makes more sense
to employ an incremental backup scheme. Under such a scheme, you
would take a "full backup" of the system only about once a month.
Then, every week, you would back up only those files that changed 
in the last week. Likewise, each night, you could back up just those
files that changed over the previous 24 hours. There are several
tools to aid you in this type of backup.</p>

<p>The idea behind an incremental backup is that it is more
efficient to take backups in small steps; you use fewer floppies
or tapes, and the weekly and nightly backups are shorter
and easier to run. With this method, you have
a backup that is at most a day old. If you were to, say, accidentally
delete your entire system, you would restore it from backup in the
following manner:</p>

<ol><li><p> Restore from the most recent monthly backup. Say, if you wiped
the system on July 17th, you would restore the July 1 full backup. Your system now reflects the state of files when the July 1 backup
was made.</p></li><li><p>Restore from each of the weekly backups made so far this month. In our case, we could restore from the two weekly backups from
July 7th and 14th. Restoring each weekly backup updates all of the
files that changed during that week.</p></li><li><p> Restore from each of the daily backups during the last week,
that is, since the last weekly backup. In this case, we would 
restore the daily backups from July 15th and 16th. The system now
looks as it did when the daily backup was taken on July 16th; no
more than a day's worth of files have been lost.</p></li></ol><p />

<p><a name="INDEX-1725" />
Depending on the size of your system, the full monthly backup might
require 2 GB or more of backup storage--often not more than one tape
using today's tape media, but quite a few ZIP disks. However, the 
weekly and daily backups would generally require much less storage
space. Depending on how your system is used, you might decide to
take the weekly backup on Sunday night and not bother with daily backups
for the weekend.</p>

<p>One important characteristic that backups should (usually) have
is the ability to select individual files from the backup for
restoration. This way, if you accidentally delete a single
file or group of files, you can simply restore those files
without having to do a full system restoration. Depending on how
you take backups, however, this task will be either very easy or
painfully difficult.</p>

<p>In this section, we're going to talk about the use of <tt class="command">tar</tt>, 
<tt class="command">gzip</tt>, and a few related tools for making backups to floppy
and tape. We'll even cover the use of floppy and tape drives in the
bargain. These tools allow you to take backups more or less
"by hand"; you can automate the process by writing shell
scripts and even schedule your backups to run automatically
during the night using <tt class="command">cron</tt>. All you have to do is 
flip tapes. There are other software packages that
provide a nice menu-driven interface for creating backups,
restoring specific files from backup, and so forth. Many of these
packages are, in fact, nice frontends to <tt class="command">tar</tt> and <tt class="command">gzip</tt>. 
You can decide for yourself what kind of backup system suits you
best.</p>

<div class="sect2">
<h3 class="sect2">8.1.1. Simple Backups</h3>

<p><a name="INDEX-1726" />
The simplest means of taking a backup is to use <tt class="command">tar</tt> to archive
all the files on the system or only those files in a set of specific 
directories. Before you do this, however, you need
to decide what files to back up. Do you need to back up every file on
the system? This is rarely necessary, especially if you have your
original installation disks or <span class="acronym">CD-ROM</span>. If you have made important 
changes to the system, but everything else is as just the way it was
found on your installation
media, you could get by only archiving those files you have made
changes to. Over time, however, it is difficult to keep track of
such changes.</p>

<p><a name="INDEX-1727" />
<a name="INDEX-1728" />
In general, you will be making changes to the system configuration files
in <em class="filename">/etc</em>. There are other configuration files as well, and it
can't hurt to archive directories, such as <em class="filename">/usr/lib</em>, 

<em class="filename">/usr/X11R6/lib/X11</em> (which contains the XFree86 configuration
files, as we'll see in the section "<a href="ch10_03.htm">Section 10.3, "Installing XFree86"</a>" in
<a href="ch10_01.htm">Chapter 10, "Installing the X
 Window System"</a>).
<a name="INDEX-1729" /></p>

<p><a name="INDEX-1730" />
<a name="INDEX-1731" />
You should also back up your kernel sources (if you have upgraded
or built your own kernel); these are found in <em class="filename">/usr/src/linux</em>.</p>

<p>During your Linux adventures it's a good idea to keep notes on what
features of the system you've made changes to so you can make
intelligent choices when taking backups. If you're truly paranoid,
go ahead and back up the whole system: that can't hurt, but the cost
of backup media might.</p>

<p><a name="INDEX-1732" />
<a name="INDEX-1733" />

Of course, you should also back up the home directories for each user
on the system; these are generally found in
<em class="filename">/home</em>. If you have your system configured to
receive electronic mail (see

the section "<a href="ch16_02.htm">Section 16.2.1, "The smail Mail Transport Agent"</a>" in
<a href="ch16_01.htm">Chapter 16, "The World Wide Web and
 Electronic Mail"</a> ), you might want to back
up the incoming mail files for each user. Many people tend to keep old
and "important" electronic mail in their incoming mail
spool, and it's not difficult to accidentally corrupt one of these
files through a mailer error or other mistake. These files are usually
found in <em class="filename">/var/spool/mail</em>.

<a name="INDEX-1734" /></p>

<div class="sect3">
<h3 class="sect3">8.1.1.1. Backing up to tape</h3>

<p><a name="INDEX-1735" />
<a name="INDEX-1736" />
Assuming you know what files or directories to back up, you're
ready to roll. The <tt class="command">tar</tt> command can be used directly, as
we saw in the section "<a href="ch07_01.htm">Section 7.1.2, "Using tar"</a>" in

<a href="ch07_01.htm">Chapter 7, "Upgrading Software and the Kernel"</a>, to make
a backup. For example, the command:
<?troff-ps_indent0?>
<blockquote><pre class="code">tar cvf /dev/rft0 /usr/src /etc /home</pre></blockquote>

 
<a name="INDEX-1737" />
<a name="INDEX-1738" />
archives all of the files from <em class="filename">/usr/src</em>,
<em class="filename">/etc</em>, and <em class="filename">/home</em> to
<em class="filename">/dev/rft0</em>. <em class="filename">/dev/rft0</em> is the
first "floppy-tape" device--that is, for the type of
tape drive that hangs off of
the floppy controller. Many popular tape drives for the PC use this
interface. If you have a SCSI tape drive, the device names are
<a name="INDEX-1739" />
<a name="INDEX-1740" />
<em class="filename">/dev/st0</em>, <em class="filename">/dev/st1</em>, and so on, based on the drive
number. Those tape drives with another type of interface have their
own device names; 
you can determine these by looking at the documentation
for the device driver in the kernel.</p>

<p>You can then read the archive back from the tape using a command such as:
<blockquote><pre class="code">tar xvf /dev/rft0</pre></blockquote>

This is exactly as if you were dealing with a tar file on disk, as
seen in the section "<a href="ch07_01.htm">Section 7.1, "Archive and Compression Utilities"</a>" 
in <a href="ch07_01.htm">Chapter 7, "Upgrading Software and the Kernel"</a>.</p>

<p>When you use the tape drive, the tape is seen as a 
stream that may be read from or written to in one direction only.
Once <tt class="command">tar</tt> is done, the tape device will be closed, and the
tape will rewind. You don't create a filesystem on a tape, nor do you
mount it or attempt to access the data on it as files. You simply 
treat the tape device itself as a single "file" to create or extract 
archives from.</p>

<p><a name="INDEX-1741" />
Be sure your tapes are formatted before you use them. This ensures 
that the beginning-of-tape marker and bad-blocks information has been written 
to the tape. At the time of this writing, no tools exist for formatting
<span class="acronym">QIC</span>-80 tapes (those used with floppy tape drivers) under Linux; you'll
have to format tapes under <span class="acronym">MS-DOS</span> or use preformatted tapes.</p>

<p>Creating one tar file per tape might be wasteful if the archive requires
but a fraction of the capacity of the tape. In order to place more than
one file on a tape, you must first prevent the tape from rewinding after
each use, and you must have a way to position the tape to the next 
"file marker," both for tar file creation and for extraction.</p>

<p><a name="INDEX-1742" />
<a name="INDEX-1743" />
<a name="INDEX-1744" />
<a name="INDEX-1745" />
The way to do this is to use the nonrewinding tape devices, which are named
<em class="filename">/dev/nrft0</em>, <em class="filename">/dev/nrft1</em>, and so on for floppy-tape drivers, and
<em class="filename">/dev/nrst0</em>, <em class="filename">/dev/nrst1</em>, and so on for SCSI tapes. When this device
is used for reading or writing, the tape will not be rewound when the 
device is closed (that is, once <tt class="command">tar</tt> has completed). You can then
use <tt class="command">tar</tt> again to add another archive to the tape. The two tar files
on the tape won't have anything to do with each other. Of course, if you
later overwrite the first tar file, you may overwrite the second file 
or leave an undesirable gap between the first and second files (which
may be interpreted as garbage). In general, don't attempt to replace
just one file on a tape that has multiple files on it.</p>

<p>Using the nonrewinding tape device, you can add as many files to the
tape as space permits. In order to rewind the tape after use, use the
<tt class="command">mt</tt> command. <tt class="command">mt</tt> is a general-purpose command that
performs a number of functions with the tape drive.</p>

<p>For example, the command:
<blockquote><pre class="code">mt /dev/nrft0 rewind</pre></blockquote>

rewinds the tape in the first floppy-tape device. (In this case, you can 
use the corresponding rewinding tape device as well; however, the
tape will rewind just as a side effect of the tape device being closed.)</p>

<p>Similarly, the command:
<blockquote><pre class="code">mt /dev/nrft0 reten</pre></blockquote>

retensions the tape by winding it to the end and then rewinding it.</p>

<p><a name="INDEX-1746" />
When reading files on a multiple-file tape, you must use the nonrewinding
tape device with <tt class="command">tar</tt> and the <tt class="command">mt</tt> command to position the
tape to the appropriate file.</p>

<p>For example, to skip to the next file on the tape, use the command:
 
<blockquote><pre class="code">mt /dev/nrft0 fsf 1</pre></blockquote>

This skips over one file on the tape. Similarly, to skip over two files,
use:
<blockquote><pre class="code">mt /dev/nrft0 fsf 2</pre></blockquote>

Be sure to use the appropriate nonrewinding tape device with <tt class="command">mt</tt>. 
Note that this command does not move to "file number two" on the
tape; it skips over the next two files based on the current tape 
position. Just use <tt class="command">mt</tt> to rewind the tape if you're not sure where

the tape is currently positioned. You can also skip back; see the
<tt class="command">mt</tt> manual page for a complete list of options.</p>

<p>You need to use <tt class="command">mt</tt> every time you read a multifile tape. 
Using <tt class="command">tar</tt> twice in succession to read two archive files
usually won't work; this is because <tt class="command">tar</tt> doesn't recognize
the file marker placed on the tape between files. Once the first
<tt class="command">tar</tt> finishes, the tape is positioned at the beginning of the
file marker. Using <tt class="command">tar</tt> immediately will give you an error 
message, because <tt class="command">tar</tt> will attempt to read the file marker.
After reading one file from a tape, just use:

<blockquote><pre class="code">mt <em class="replaceable">device</em> fsf 1</pre></blockquote>


to move to the next file.</p>
</div>


<div class="sect3">
<h3 class="sect3">8.1.1.2. Backing up to floppy</h3>

<p><a name="INDEX-1747" />
<a name="INDEX-1748" />
<a name="INDEX-1749" />
Just as we saw in the last section, the command:
<blockquote><pre class="code">tar cvf /dev/fd0 /usr/src /etc /home</pre></blockquote>

makes a backup of <em class="filename">/usr/src</em>, <em class="filename">/etc</em>, and <em class="filename">/home</em> to 
<em class="filename">/dev/fd0</em>, the first floppy device. You can then read the backup 
using a command such as:
 
 
<blockquote><pre class="code">tar xvf /dev/fd0</pre></blockquote>

Because floppies have a rather limited storage capacity, <span class="acronym">GNU</span> <tt class="command">tar</tt>
allows you to create a "multivolume" archive. (This feature applies to
tapes, as well, but is far more useful in the case of floppies.) 
With this feature, <tt class="command">tar</tt> prompts you to insert a new volume
after reading or writing each floppy. To use this feature, simply
provide the <tt class="literal">M</tt> option to <tt class="command">tar</tt>, as in:
 
<blockquote><pre class="code">tar cvMf /dev/fd0 /usr/src /etc /home</pre></blockquote>

Be sure to label your floppies well, and don't get them out of order when
attempting to restore the archive.</p>

<p><a name="INDEX-1750" />
One caveat of this feature is that it doesn't support the automatic
<tt class="command">gzip</tt> compression provided by the <tt class="command">z</tt> option (as seen in the
previous section). However, there are various reasons why you may not
want to compress your backups created with <tt class="command">tar</tt>, as discussed
later. At any rate, you can create your own multivolume backups using
<tt class="command">tar</tt> and <tt class="command">gzip</tt> in conjunction with a program that
reads and writes data to a sequence of floppies (or tapes),
 
prompting for each in succession. One such program is <tt class="command">backflops</tt>,
available on several Linux distributions and on the <span class="acronym">FTP</span> archive sites.
A do-it-yourself way to accomplish the same thing would be to write the
backup archive to a disk file and use <tt class="command">dd</tt> or a similar command to
write the archive as individual chunks to each floppy. If you're brave
enough to try this, you can figure it out for yourself.</p>
</div>


<div class="sect3">
<h3 class="sect3">8.1.1.3. To gzip, or not to gzip?</h3>

<p><a name="INDEX-1751" />
<a name="INDEX-1752" />
<a name="INDEX-1753" />
<a name="INDEX-1754" />
There are good arguments both for and against compression of <tt class="command">tar</tt>
archives when making backups. The overall problem is that
neither <tt class="command">tar</tt> nor <tt class="command">gzip</tt> is particularly fault-tolerant, no
matter how convenient they are. Although compression using <tt class="command">gzip</tt>
can greatly reduce the amount of backup media required to store an
archive, compressing entire <tt class="command">tar</tt> files as they are written to floppy
or tape makes the backup prone to complete loss if one block of
the archive is corrupted, say, through a media error (not uncommon
in the case of floppies and tapes). Most compression algorithms, 
<tt class="command">gzip</tt> included, depend on the coherency of data across many bytes
in order to achieve compression. If any data within a compressed
archive is corrupt, <tt class="command">gunzip</tt> may not be able to uncompress
the file at all, making it completely unreadable to <tt class="command">tar</tt>.</p>

<p>This is much worse than if the tar file were uncompressed on the tape.
Although <tt class="command">tar</tt> doesn't provide much protection against data 
corruption within an archive, if there is minimal corruption within
a tar file, you can usually recover most of the archived
files with little trouble, or at least those files up until the 
corruption occurs. Although far from perfect, it's better than
losing your entire backup.</p>

<p>A better solution would be to use an archiving tool other than 
<tt class="command">tar</tt> to make backups. There are several options available. 
<a name="INDEX-1755" />
<tt class="command">cpio</tt> is an archiving utility that packs files together,
similar in fashion to <tt class="command">tar</tt>. However, because of the
simpler storage method used by <tt class="command">cpio</tt>, it recovers
cleanly from data corruption
in an archive. (It still doesn't handle errors well on gzipped files.)</p>

<p><a name="INDEX-1756" />
The best solution may be to use a tool such as
<tt class="command">afio</tt>. <tt class="command">afio</tt> supports multivolume backups and is similar
in some respects to <tt class="command">cpio</tt>. However, <tt class="command">afio</tt> includes compression
and is more reliable because each individual file is compressed.
This means that if data 
on an archive is corrupted, the damage can
be isolated to individual files, instead of to the entire backup.</p>

<p>These tools should be available with your Linux distribution, as well
as from all of the Internet-based Linux archives. A number of other
backup utilities, with varying degrees of popularity and usability,
have been developed or ported for Linux. If you're serious about backups,
you should look into them.<a href="#FOOTNOTE-32">[32]</a> Among
those programs are the freely available are <tt class="command">taper</tt> and
<tt class="command">tob</tt>, as well as commercial programs like
<em class="application">ARKEIA</em> and <em class="application">Perfect
Backup</em>.</p><blockquote>

<a name="FOOTNOTE-32" /><p>[32]Of course,
this section was written after the author took the first backup of his
Linux system in nearly four years of use!</p>

</blockquote>
</div>
</div>




<?troff .sp -.1?><a name="x-100-3-sysadm-backup-incremental" /><div class="sect2">
<h3 class="sect2">8.1.2. Incremental Backups</h3>

<p><a name="INDEX-1757" />
<a name="INDEX-1758" />
Incremental backups, as described earlier in this chapter, are a 
good way to keep your system backups up to date. For example, you can take
nightly backups of only those files that changed in the last
24 hours, weekly backups of all files that changed in the last week,
and monthly backups of the entire system.</p>

<p>You can create incremental backups using the tools mentioned above:
<tt class="command">tar</tt>, <tt class="command">gzip</tt>,
<tt class="command">cpio</tt>, and so on. The first step in creating an
incremental backup is to produce a list of files that changed since a
certain amount of time ago. This is easily done with the
<a name="INDEX-1759" />
<tt class="command">find</tt> command.<a href="#FOOTNOTE-33">[33]</a>
If you use a special backup program, you will most likely not have to
do this, but set some option somewhere that you want to do an
incremental backup.</p><blockquote>

<a name="FOOTNOTE-33" /><p>[33]If you're not familiar with <tt class="command">find</tt>, become so
soon. <tt class="command">find</tt> is a great way to
locate files across many directories that have certain filenames,
permissions, or modification times. <tt class="command">find</tt> can even
execute a program for each file that it locates. In short,
<tt class="command">find</tt> is your friend, and all good system
administrators know how to use it well.</p>

</blockquote>

<?troff .Nd 10?><p>For example, to produce a list of all files that were modified in the
last 24 hours, we can use the command:

<blockquote><pre class="code">find / -mtime -1 \! -type d -print &gt; /tmp/filelist.daily</pre></blockquote>


The first argument to <tt class="command">find</tt> is the directory to start from--here,
<em class="filename">/</em>, the root directory. The <span class="option">-mtime -1</span> 
option tells <tt class="command">find</tt> 
to locate all files that changed in the last 24 hours.</p>

<p>The <span class="option">\! -type d</span> is complicated (and optional),
but it cuts some unnecessary stuff from your output.  It tells
<tt class="command">find</tt> to exclude directories from the resulting file
list.  The ! is a negation operator (meaning here, "exclude files of
type d"), but put a backslash in front of it because
otherwise the shell interprets it as a special character.</p>

<p>The <span class="option">-print</span>
causes all filenames matching the search to be printed to standard
output.
We redirect standard output to a file for later use. Likewise, to locate all files that changed in the last week, use:
 
<blockquote><pre class="code">find / -mtime -7 -print &gt; /tmp/filelist.weekly</pre></blockquote></p>

<p>Note that if you use <tt class="command">find</tt> in this way, it traverses all mounted
filesystems. If you have a <span class="acronym">CD-ROM</span> mounted, for example, <tt class="command">find</tt>
attempts to locate all files on the <span class="acronym">CD-ROM</span> as well (which you probably
do not wish to backup). The <span class="option">-prune</span> option can be used to exclude
certain directories from the walk performed by <tt class="command">find</tt> across the system; or, you
can use <tt class="command">find</tt> multiple times with a first argument other than

<tt class="literal">/</tt>. See the manual page for <tt class="command">find</tt> for details.</p>

<p>Now you have produced a list of files to back up. Previously, when using
<tt class="command">tar</tt>, we have specified the files to archive on the command line. 
However, this list of files may be too long for a single command line
(which is usually limited to around 2048 characters), and the list itself
is contained within a file.</p>

<p>You can use the <span class="option">-T</span> option with <tt class="command">tar</tt> to specify a file
containing a list of files for <tt class="command">tar</tt> to back up. In order to use
this option, you have to use an alternate syntax to <tt class="command">tar</tt>
in which all options are specified explicitly with dashes. For example,
to back up the files listed in <em class="filename">/tmp/filelist.daily</em> to the device
<em class="filename">/dev/rft0</em>, use the command:
 
<blockquote><pre class="code">tar -cv -T /tmp/filelist.daily -f /dev/rft0</pre></blockquote></p>

<p>You can now write a short shell script that automatically produces 
the list of files and backs them up using <tt class="command">tar</tt>. You can use 
<tt class="command">cron</tt> to execute the script nightly at a certain time;
all you have to do is make sure there's a tape in the drive. You can
write similar scripts for your weekly and monthly backups.
<tt class="command">cron</tt> is covered in the next section.</p>

<a name="INDEX-1760" /><a name="INDEX-1761" /><a name="INDEX-1762" /><a name="INDEX-1763" />
</div>
</div>








<?troff .sp -.1?>






































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">7.6. Loading Modules Automatically</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">8.2. Scheduling Jobs Using cron</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>