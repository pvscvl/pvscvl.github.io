<?label 4.4. Popular Commands?><html><head><title>Popular Commands (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">4.4. Popular Commands</h2>

<p><a name="INDEX-997" />

 
The number of commands on a typical Unix system is enough to fill a
few hundred reference pages.  And you can add new commands too.
The commands we'll tell you about here are just enough to navigate and
to see what you have on the system.</p>

<div class="sect2">
<h3 class="sect2">4.4.1. Directories</h3>

<p><a name="INDEX-998" />
<a name="INDEX-999" />
 
Like <span class="acronym">MS-DOS</span>, and virtually every modern computer system, Unix files
are organized into a hierarchical directory structure.  Unix imposes
no rules about where files have to be, but conventions have grown up
over the years.  Thus, on Linux you'll find a directory called
 
 
 
<em class="filename">/home</em> where each user's files are placed.  Each user has a
subdirectory under <em class="filename">/home</em>.  So if your login name is mdw,
your personal files are located in <em class="filename">/home/mdw</em>. This is called
your home directory.  You can, of course, create more subdirectories
under it.</p>

<p>As you can see, the components of a directory are separated by
 
slashes.  The term <em class="emphasis">pathname</em> is often used to refer to this
slash-separated list.</p>

<p>What directory is <em class="filename">/home</em> in?  The
directory named
 
 
 
<em class="filename">/</em> of course.  This is called the root directory.  We have
already mentioned it when setting up file systems.</p>

<p>When you log in, the system puts you in your home directory.  To
verify this, use the "print working directory" or <tt class="command">pwd</tt>
command:
 
<blockquote><pre class="code">$ <tt class="userinput"><b>pwd</b></tt> 
/home/mdw</pre></blockquote></p>

<p>The system confirms that you're in <em class="filename">/home/mdw</em>.</p>

<p><a name="INDEX-1000" />
 
You certainly won't have much fun if you have to stay in one directory
all the time.  Now try using another command, <tt class="command">cd</tt>, to move to
another directory:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>cd /usr/bin</b></tt> 
$ <tt class="userinput"><b>pwd</b></tt> 
/usr/bin 
$ <tt class="userinput"><b>cd</b></tt></pre></blockquote>

<p><a name="INDEX-1001" />
<a name="INDEX-1002" />
 
 
 
 
 
Where are we now?  A <tt class="command">cd</tt> with no arguments returns us to our
home directory.  By the way, the home directory is often represented
by a tilde (<tt class="literal">~</tt>).  So the string <em class="filename">~/programs</em> means that
<em class="filename">programs</em> is located right under your home directory.</p>

<p><a name="INDEX-1003" />
While we're thinking about it, let's make a directory called
<em class="filename">~/programs</em>.  From your home directory, you can enter either:</p>

<p> 
<blockquote><pre class="code">$ <tt class="userinput"><b>mkdir programs</b></tt></pre></blockquote></p>

<p>or the full pathname:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>mkdir /home/mdw/programs</b></tt></pre></blockquote>

<p>Now change to that directory:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>cd programs</b></tt> 
$ <tt class="userinput"><b>pwd</b></tt>
/home/mdw/programs</pre></blockquote>

<p><a name="INDEX-1004" />
<a name="INDEX-1005" />
<a name="INDEX-1006" />
The special character sequence <tt class="literal">..</tt> refers to "the directory just
above the current one."  So you can move back up to your home
directory by typing the following:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>cd ..</b></tt></pre></blockquote>

<?troff .Nd 10?><p><a name="INDEX-1007" />
 
 
The opposite of <tt class="command">mkdir</tt> is <tt class="command">rmdir</tt>, which removes
directories:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>rmdir programs</b></tt></pre></blockquote>

<p><a name="INDEX-1008" />
 
 
Similarly, the <tt class="command">rm</tt> command deletes files.  We won't show it
here, because we haven't yet shown how to create a file.  You
generally use the <tt class="command">vi</tt> or Emacs editor for that (see

<a href="ch09_01.htm">Chapter 9, "Editors, Text Tools,
 Graphics,
 and Printing"</a>), but some of the
commands later in this chapter will create files too.
With the <span class="option">-r</span> (recursive) option, <tt class="command">rm</tt>
deletes a whole directory and all its contents.  (Use with care!)</p>
</div>




<a name="x-100-3-basic-ls" /><div class="sect2">
<h3 class="sect2">4.4.2. Listing Files</h3>

<p><a name="INDEX-1009" />
<a name="INDEX-1010" />
<a name="INDEX-1011" />
 
Enter <tt class="command">ls</tt> to see what is in a directory.  Issued without an
argument, the <tt class="command">ls</tt> command shows the contents of the current directory.  You can
include an argument to see a different directory:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>ls /home</b></tt></pre></blockquote>

<p><a name="INDEX-1012" />
<a name="INDEX-1013" />
Some systems have a fancy <tt class="command">ls</tt> that displays special
files--such as directories and executable files--in bold, or even in
different colors.  If you want to change the default colors, edit the
file <em class="filename">/etc/DIR_COLORS</em>, or create a copy of it in your home
directory named <em class="filename">.dir_colors</em> and edit that.</p>

<p><a name="INDEX-1014" />
<a name="INDEX-1015" />
Like most Unix commands, <tt class="command">ls</tt> can be controlled with options that
start with a hyphen (<tt class="literal">-</tt>).  Make sure you type a space before
the hyphen.  One useful option for <tt class="command">ls</tt> is <span class="option">-a</span> for "all,"
which will reveal to you riches that you never imagined in your home
directory:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>cd</b></tt> 
$ <tt class="userinput"><b>ls -a</b></tt> 
.                        .bashrc                  .fvwmrc 
..                       .emacs                   .xinitrc 
.bash_history            .exrc</pre></blockquote>

<p><a name="INDEX-1016" />
<a name="INDEX-1017" />
<a name="INDEX-1018" />
<a name="INDEX-1019" />
<a name="INDEX-1020" />
The single dot refers to the current directory, and the double dot
refers to the directory right above it.  But what are those other files beginning with a dot?
 
They are called hidden files.  Putting a dot in front of their names keeps them from being
shown during a normal <tt class="command">ls</tt> command.  Many programs employ hidden
files for user options--things about their default behavior that you
want to change.  For instance, you can put commands in the file
<em class="filename">.Xdefaults</em> to alter how programs using the X Window System
operate.  So most of the time you can forget these files exist, but
when you're configuring your system you'll find them very important.
We'll list some of them later.</p>

<p>Another useful <tt class="command">ls</tt> option is <span class="option">-l</span> for "long."  It shows
extra information about the files. <a href="ch04_04.htm">Figure 4-1</a> shows typical
output and what each field means.</p>

<a name="x-100-3-ls-l-output" /><div class="figure"><img src="figs/rl3_0401.gif" alt="Figure 4-1" /></div><h4 class="objtitle">Figure 4-1. Output of ls -l</h4><p> 
<?troff .ne 10?>
We'll discuss the permissions, owner, and group fields later in this
chapter, in the section "<a href="ch04_13.htm">Section 4.13, "File Ownership and Permissions"</a>." The
<tt class="command">ls</tt> command also
shows the size of each file and when it was last modified.</p>
</div>




<div class="sect2">
<h3 class="sect2">4.4.3. Viewing Files, More or Less</h3>

<p>One way to look at a file is to invoke an editor, such as:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>emacs .bashrc</b></tt></pre></blockquote>

<p><a name="INDEX-1021" />
But if you just want to scan a file quickly, rather than edit it, other
commands are quicker.  The simplest is the strangely named
<tt class="command">cat</tt> 
command (named after the verb <em class="emphasis">concatenate</em>,
because you can also use it to concatenate several files into one):
 
<blockquote><pre class="code">$ <tt class="userinput"><b>cat .bashrc</b></tt></pre></blockquote></p>

<p> <a name="INDEX-1022" />
But a long file will scroll by too fast for you to see it, so most people
use the <tt class="command">more</tt> command instead:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>more .bashrc</b></tt></pre></blockquote>

<p>This prints a screenfull at a time and waits for you to press the
space bar before printing more.  <tt class="command">more</tt> has a lot of powerful
options.  For instance, you can search for a string in the file:
press the slash key (<tt class="literal">/</tt>), type the string, and press Return.</p>

<p> 
<a name="INDEX-1023" /> 
A popular variation on the <tt class="command">more</tt> command is called
<tt class="command">less</tt>. It has even more powerful features; for
instance, you can mark a particular place in a file and return there later.</p>
</div>




<a name="x-100-3-basic-symlink" /><div class="sect2">
<h3 class="sect2">4.4.4. Symbolic Links</h3>

<p><a name="INDEX-1024" />
<a name="INDEX-1025" />
<a name="INDEX-1026" />
Sometimes you want to keep a file in one place and pretend it is
in another.  This is done most often by a system administrator, not a
user.  For instance, you might keep several versions of a program
around, called <em class="filename">prog.0.9</em>, <em class="filename">prog.1.1</em>, and so on, but use
the name <em class="filename">prog</em> to refer to the version you're currently using.
Or you may have a file installed in one partition because you have
disk space for it there, but the program that uses the file needs it
to be in a different partition because the pathname is hard-coded into
the program.</p>

<p> 
 
 
Unix provides <em class="emphasis">links</em> to handle these situations.  In this
section, we'll examine the <em class="emphasis">symbolic link</em>, which is the most
flexible and popular type.  A symbolic link is a kind of dummy file
that just points to another file.  If you edit or read or execute the
symbolic link, the system is smart enough to give you the real file
instead. Symbolic links work a lot like shortcuts under Windows 95/98, 
but are much more powerful.</p>

<p>Let's take the <em class="filename">prog</em> example.  You want to create a link named
<em class="filename">prog</em> that points to the actual file, which is named
<em class="filename">prog.1.1</em>.  Enter the command:</p>

<a name="INDEX-1027" /><blockquote><pre class="code">$ <tt class="userinput"><b>ln -s prog.1.1 prog</b></tt></pre></blockquote>

<p> 
Now you've created a new file named <em class="filename">prog</em> that is kind of a
dummy file; if you run it, you're really running <em class="filename">prog.1.1</em>.
Let's look at what <tt class="command">ls -l</tt> has to say about the file:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>ls -l prog</b></tt>
lrwxrwxrwx   2 mdw      users           8 Nov 17 14:35 prog -&gt; prog.1.1</pre></blockquote>

<p>The <tt class="literal">l</tt> at the beginning of the line shows that the file is a
link, and the little <tt class="literal">-&gt;</tt> indicates the real file the link
points to.</p>

<p>Symbolic links are really simple, once you get used to the idea of one
file pointing to another.  You'll encounter links all the time when
installing software packages.
<a name="INDEX-1028" /></p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">4.3. Virtual Consoles</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">4.5. Shells</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>