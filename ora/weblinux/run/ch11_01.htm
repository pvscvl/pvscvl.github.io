<?label 11. Customizing Your X Environment?><html><head><title>Customizing Your X Environment (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch10_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch11_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h1 class="chapter">Chapter 11. Customizing Your X Environment</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch11_01.htm">Basics of X Customization</a><br />
<a href="ch11_02.htm">The fvwm Window Manager</a><br />
<a href="ch11_03.htm">The K Desktop Environment</a><br />
<a href="ch11_04.htm">X Applications</a><br /></p></div>

<p>In the last chapter, you learned how to set up the X
	Window System so that it recognizes your graphics board and your
	monitor. While this is clearly necessary, it is
	of course only one half of the story. In this chapter, we will
	tell you the other half: customizing your X environment. Unlike
	the hardware setup that you normally do only once for a particular
	computer, you might want to change your work environment from time
	to time because your work habits have changed, because new and
	better environments are available, or simply because the old one
	has become boring for you. Some of these environments are quite
	sophisticated. For examples they let you start up a program with
	all the options you want at the press of a key or the click of a
	mouse, they let you drag file icons onto a printer to have text
	printed, and they can do lots of other fancy things.
<a name="INDEX-2253" />
<a name="INDEX-2254" /></p>

<p>Today, many distributions more or less automatically configure your X
server for you and put you into a graphical environment from the
start. However, if things go wrong during installation and you want to
fine-tune your X server (in order to achieve a higher resolution, for
example) or if you simply want to use another windowing environment than
the one your distribution vendor has selected as the default, we'll tell
you what to do.</p>

<p>We will first tell you the basics of configuring X,
	including what happens at startup, what X resources are, and how
	you can use them. In principle, this is already enough to
	configure X for use, but if you are anything more than a
	Spartan, you demand more from your work environment. We will
	therefore tell you how to configure a work environment based on
	the <tt class="command">fvwm</tt> window manager first. For a long
<a name="INDEX-2255" />
	time, <tt class="command">fvwm</tt> was the favorite window
	manager among Linux users, and only recently other window managers
	and desktop environments have taken the lead.</p>

<p>Until recently, the problem with using X on Unix systems in
	general and Linux in particular was that nothing was
	integrated. You would use a window manager and a number of X
	applications, but they would all look different, behave
	differently, and operate in a manner that was not integrated. For example, drag-and-drop--
	ubiquitous on Windows or the Macintosh--was hardly heard of on
	Linux, and if it was, it was difficult to find two applications
	that could interact together with drag-and-drop.</p>

<p>A relatively new category of software, the so-called
<a name="INDEX-2256" />
	<em class="firstterm">desktop environments</em>, has accepted the
	challenge to produce a state-of-the-art Unix GUI and tries to provide an integrated, consistent desktop
	where all programs have the same look-and-feel, behave the same, and
	even provide the same menus in all applications
	(to the extent where this is possible).</p>

<p>Currently, there are two main desktop environments available
<a name="INDEX-2257" />
<a name="INDEX-2258" />
<a name="INDEX-2259" />
	for Linux, the K Desktop Environment and GNOME. KDE is a
	little bit older and much more advanced with respect to
	functionality and stability. It aims at making people coming from
	other computing environments feel at home, as well as providing
	long-term Unix users a more productive and friendly
	work-environment. GNOME, on the other hand, has put a lot of work
	into the visual aspects of a desktop environment with colorful
	icons and the like, but it is still lacking stability and a number of
	features. Therefore, we will
	cover KDE here.</p>

<p>The Red Hat, SuSE, and Caldera releases include both KDE
	and GNOME, while Debian includes only GNOME. You can also find more
	about GNOME at <a href="../../../../../../www.gnome.org/">http://www.gnome.org</a>. Appendix B reprints an article describing the design of that desktop.</p>

<div class="sect1"><a name="x-100-3-tools-x-customization" />
<h2 class="sect1">11.1. Basics of X Customization</h2>

<p>Before running X applications,
it's a good idea to learn the rudiments of X customization, so that
you're not forced to live with the (often unappealing) default
configuration used on many systems.</p>

<a name="x-100-3-tools-x-xinit" /><div class="sect2">
<h3 class="sect2">11.1.1. xinit</h3>

<p><a name="INDEX-2260" />
You run X with the <tt class="command">startx</tt> command. This is a
frontend (passing in reasonable options) for <tt class="command">xinit</tt>,
the program responsible for
starting the X server and running various X
clients that you specify. <tt class="command">xinit</tt> (via
<tt class="command">startx</tt>) executes the shell script
<em class="filename">.xinitrc</em> in your home directory. This script
merely contains commands that you wish to run when starting X, such as
<tt class="command">xterm</tt>, <tt class="command">xclock</tt>, and so on. If you
don't have a <em class="filename">.xinitrc</em> file, the system default
<em class="filename">/usr/lib/X11/xinit/xinitrc</em> is used instead.</p>

<p>Here, we'll present a sample <em class="filename">.xinitrc</em> file and explain what it
does. You could use this as your own <em class="filename">.xinitrc</em> or copy the
system default <em class="filename">xinitrc</em> as a starting point:</p>

<?troff-ps_indent0?><blockquote><pre class="code">1  #!/bin/sh
2  # Sample .xinitrc shell script
3
4  # Start xterms
5  xterm -geometry 80x40+10+100 -fg black -bg white &amp;
6  xterm -geometry -20+10 -fn 7x13bold -fg darkslategray -bg white &amp;
7  xterm -geometry -20-30 -fn 7x13bold -fg black -bg white &amp;
8
9  # Other useful X clients
10 oclock -geometry 70x70+5+5 &amp;
11 xload -geometry 85x60+85+5 &amp;
12 xbiff -geometry +200+5 &amp;
13 xsetroot -solid darkslateblue &amp;
14
15 # Start the window manager
16 exec fvwm2</pre></blockquote>

<p><a name="INDEX-2261" />
This should be quite straightforward, even if you're not familiar with X.
The first two lines simply identify the shell script. Lines 5-7 start
up three <tt class="command">xterm</tt> clients (recall that
<tt class="command">xterm</tt> is a terminal-emulator client). Other clients
are started on lines 10-13, and on line
16 the window manager, <tt class="command">fvwm</tt>, is started.</p>

<p>Running <tt class="command">startx</tt> with this particular
<em class="filename">.xinitrc</em> in place
gives you something that looks like
<a href="ch11_01.htm">Figure 11-1</a>.<a href="#FOOTNOTE-43">[43]</a></p><blockquote>

<a name="FOOTNOTE-43" /><p>[43]All right, so it's not a work of art,
but we needed something simple that would work correctly on most displays!</p>

</blockquote>

<a name="x-100-3-fig-xinit" /><div class="figure"><img src="figs/rl3_1101.gif" alt="Figure 11-1" /></div><h4 class="objtitle">Figure 11-1. Screen created by sample .xinitrc file</h4><p>Let's look at this in more detail. On line 5, we see that
<tt class="command">xterm</tt> is started with several options,
<span class="option">-geometry</span>, <span class="option">-fg</span>, and
<span class="option">-bg</span>. Most X clients support these standard options, among others.</p>

<?troff .Nd 10?><p><a name="INDEX-2262" />
The
<span class="option">-geometry</span> option allows you to specify the size
and position of the window on the display. The geometry specification
has the format:

<blockquote><pre class="code"><em class="replaceable">xsize</em>x<em class="replaceable">ysize</em>+<em class="replaceable">xoffset</em>+<em class="replaceable">yoffset</em></pre></blockquote>


In this case, the option <span class="option">-geometry 80x40+10+100</span>
puts the window at the location (10,100) on the screen
(where (0,0) is the top-left corner), making it 80 characters wide by
40 characters high. Note that <tt class="command">xterm</tt> measures the
size of the window in <em class="emphasis">characters</em>, not pixels. The
actual

size of the window in pixels is determined by the font that is
used.</p>

<p><a name="INDEX-2263" />
<a name="INDEX-2264" />
<a name="INDEX-2265" />
The <span class="option">-fg</span> and <span class="option">-bg</span>
arguments allow you to specify the foreground (text) and background
colors for the <tt class="command">xterm</tt> window, respectively. The
colors used here are a rather boring black and
white, but this should work on color and monochrome
displays alike. Under X, colors are usually specified by name,
although you can provide your own <span class="acronym">RGB</span> values if you
prefer. The list of color names (and corresponding
<span class="acronym">RGB</span> values) is given in the file
<em class="filename">/usr/lib/X11/rgb.txt</em>. Running
<tt class="command">xcolors</tt> will display these colors, along with their
names.</p>

<p>Line 6 runs another <tt class="command">xterm</tt>, although the arguments are slightly
different:
<blockquote><pre class="code">xterm -geometry -20+10 -fn 7x13bold -fg darkslategray -bg white &amp;</pre></blockquote>


First of all, the geometry specification is just <tt class="literal">-20+10</tt>. Without
size parameters, <tt class="command">xterm</tt> will use the default, which is usually
<tt class="literal">80x25</tt>. Also, we see that the <em class="replaceable">xoffset</em> is prefixed with
a <tt class="literal">-</tt>, instead of <tt class="literal">+</tt>. This places the window 20 pixels
from the <em class="emphasis">right</em> edge of the screen.  Likewise, a
geometry specification of <tt class="literal">-20-30</tt> (as used on line 7) means
to place the window 20 pixels from the right edge of the screen
and 30 pixels from the bottom. In this way, the placement of windows is
less dependent on the particular resolution you're using.</p>

<p><a name="INDEX-2266" />
The <span class="option">-fn</span> option on lines 6 and 7 specifies that the font used by
<tt class="command">xterm</tt> should be <tt class="literal">7x13bold</tt>. Using the command <tt class="command">xlsfonts</tt>
displays a complete list of fonts on your system; the X client
<tt class="command">xfontsel</tt> allows you to select fonts interactively--more about
fonts later.</p>

<p>On line 10 we start an <tt class="command">oclock</tt> client, which is a simple analog
clock. Line 11 starts <tt class="command">xload</tt>, which displays a graph of the
system <em class="emphasis">load average</em> (number of running processes) that changes
with time. Line 12 starts <tt class="command">xbiff</tt>, which just lets you know
when mail is waiting to be read. Finally, on line 13 we do away with the
bland grey X background and replace it with a flashy darkslateblue.
(Fear not; there is more fun to be had with X decor than this example shows.)</p>

<p>You'll notice that each of the X clients started on lines 6-13
is executed in the background (the ampersand on the end of each line
forces this). If you forget to put each client in the background, <tt class="command">xinit</tt>
executes the first <tt class="command">xterm</tt>, waits for it to exit (usually,
after you log out), executes the next <tt class="command">xterm</tt>, and so
on. The ampersands cause each client to start up concurrently.</p>

<p><a name="INDEX-2267" />
<a name="INDEX-2268" />
What about line 16? Here, we start <tt class="command">fvwm</tt> (Version 2), a window
manager used on
many Linux systems.
As mentioned before, the window manager is responsible for
decorating the windows, allowing you to place them with the mouse,
and so forth. However, it is started with the command:

<blockquote><pre class="code">exec fvwm2</pre></blockquote>


This causes the <tt class="command">fvwm2</tt> process to replace
the <tt class="command">xinit</tt> process. This way, once you kill
<tt class="command">fvwm</tt>,<a href="#FOOTNOTE-44">[44]</a>
the X server shuts down.
This is equivalent to, but more succinct than, using the Ctrl-Alt-Backspace
key combination.</p><blockquote>

<a name="FOOTNOTE-44" /><p>[44]If you have
experimented with <tt class="command">fvwm</tt>, you'll notice
that pressing the first mouse button while the cursor is on the background
causes a menu to pop up. Selecting the Quit fvwm option
from this menu causes <tt class="command">fvwm</tt> to exit.</p>

</blockquote>

<p><a name="INDEX-2269" />
<a name="INDEX-2270" />
<a name="INDEX-2271" />
In general, you should put an ampersand after each X client started from <em class="filename">.xinitrc</em>,
and <tt class="command">exec</tt> the window manager at the end of the file. Of course,
there are other ways of doing this, but many users employ this technique.</p>

<p>If you read the manual pages for <tt class="command">xterm</tt> and the other X clients, you'll
see many more command-line options than those described here. As we said,
virtually everything about X is configurable. <tt class="command">fvwm</tt>
(Version 2) uses a configuration
file of its own, <em class="filename">.fvwm2rc</em>, described in its manual page. (If you have no
<em class="filename">.fvwm2rc</em> file, the system default <em class="filename">/usr/lib/X11/fvwm2/system.fvwmrc</em>

is used instead.) The manual pages, as well as books on using X (such as
<em class="emphasis">X Window System User's Guide</em> by Valerie Quercia and Tim O'Reilly), provide more information
on configuring individual clients.</p>

<a name="INDEX-2272" />
</div>




<a name="x-100-3-tools-x-customization-xdefaults" /><div class="sect2">
<h3 class="sect2">11.1.2. The X Resource Database</h3>

<p><a name="INDEX-2273" />
<a name="INDEX-2274" />
Depending on which environment you use, you can't use X for long
without running into X resources; they are mentioned
in virtually every manual page. X resources provide a more flexible and
powerful way to configure X clients than using command-line options such
as <span class="option">-geometry</span> and
<span class="option">-fg</span>. They allow you to specify defaults for
entire classes of clients; for example, we could set the default font for
all invocations of <tt class="command">xterm</tt> to
<tt class="literal">7x13bold</tt>, instead of specifying it on each command
line.</p>

<p>Recently, X resources have fallen out of favor with X
		developers. While they are really very flexible, they are not
		particularly easy to work with and feel more like a relic
		of ancient times. A growing number of programs are therefore
		customized not by X resources but instead via comfortable
		configuration dialog boxes. However, it still pays to know about X
		resources because you will come across them for a long time to
		come.</p>

<p>Using X resources requires two steps. First, you must create a file containing
your X resource defaults. Typically, this file is called <em class="filename">.Xdefaults</em>
and lives in your home directory.
<?troff .ne 10?>
Second, you need to use <tt class="command">xrdb</tt> to load the X resources into the server,
which makes them available for use. In general, you run <tt class="command">xrdb</tt> from your
<em class="filename">.xinitrc</em> before starting any clients.</p>

<p>As a simple example, let's take the various command-line options used by
the clients in the earlier sample <em class="filename">.xinitrc</em> and specify them as
X resources instead. Afterwards, we'll show you what kinds of changes
need to be made to <em class="filename">.xinitrc</em> to make use of the resources.</p>

<p>First a few words about resources and how they work.
<a name="INDEX-2275" />
Each X application is part of a certain <em class="emphasis">application
class</em>. For example,
<tt class="command">xterm</tt> is a member of the <tt class="literal">XTerm</tt>
class. <tt class="command">xclock</tt> and
<tt class="command">oclock</tt> are both members of the
<tt class="literal">Clock</tt> class. Setting
resources for the <tt class="literal">Clock</tt> class affects all
applications that are part of
that class; because <tt class="command">xclock</tt> (a square analog clock)
and <tt class="command">oclock</tt>
(an oval analog clock) are similar, they belong to the same class and
share the same resources.
Most applications are members of their own exclusive class;
<tt class="command">xload</tt> is
the only member of the <tt class="literal">XLoad</tt> class. However, if
another <tt class="command">xload</tt>-like
application were to be written, it might be part of the
<tt class="literal">XLoad</tt> class as
well. Placing X clients into application classes allows you to set resources
for all applications in that class. (The manual page for each X client
specifies the application class the client belongs to.)</p>

<p><a name="INDEX-2276" />
<a name="INDEX-2277" />
<a name="INDEX-2278" />
<a name="INDEX-2279" />
Standard
X clients employ resources such as <tt class="literal">foreground</tt>, <tt class="literal">background</tt>,
<tt class="literal">geometry</tt>, and <tt class="literal">font</tt>. Also, many X clients have specific resources
of their own; for example, <tt class="command">xterm</tt> defines the resource
<tt class="literal">logFile</tt>, which allows you to specify a file in which to log the
terminal session. Again, the manual pages for X clients specify which
resources are available.</p>

<p><a name="INDEX-2280" />
Moreover, resources themselves are arranged into a hierarchy of classes.
For instance, the <tt class="literal">background</tt> resource is a member of the
<tt class="literal">Background</tt> class. Resource classes allow many separate resources
to be members of the same class, for which you can set resource values
for the class as a whole. For example, the <tt class="literal">background</tt> resource
<a name="INDEX-2281" />
usually determines the primary background color of a window. However,
if an application window has several panels or regions, you may wish
to set the background for each panel separately. There might be
resources such as <tt class="literal">background1</tt>, <tt class="literal">background2</tt>, and so on, for
each panel, but they would all be members of the <tt class="literal">Background</tt> resource
class. Setting the resource value for the <tt class="literal">Background</tt> class sets the
value for all resources in that class.</p>

<p>In general, you won't need to concern yourself with the differences between
resource classes and the resources within that class. In most cases, it's
easier to set resource values for an entire class (such as <tt class="literal">Background</tt>)
instead of individual resources in that class.</p>

<?troff .Nd 10?><p>Now, let's look at how resource values are set in the X resource database.
A complete resource specification is of the form:<a href="#FOOTNOTE-45">[45]</a>
<blockquote><pre class="code">(<em class="replaceable">ApplicationClass</em>|<em class="replaceable">applicationName</em>)*(<em class="replaceable">ResourceClass</em>|<em class="replaceable">resourceName</em>) : <em class="replaceable">value</em></pre></blockquote>

The vertical bar means "choose one or the other."
Let's say you want to set the background color of an <tt class="command">xterm</tt>
window. The <em class="emphasis">complete</em> resource specification might be:
<blockquote><pre class="code">xterm*background: darkslategray</pre></blockquote>

However, this sets only a particular background resource (not all of
the resources that might be in the <tt class="literal">Background</tt> class) and
only for the <tt class="command">xterm</tt> client when it is invoked as <tt class="command">xterm</tt> (more
on this later). Therefore, we might want to use resource classes
instead:
<blockquote><pre class="code">XTerm*Background: darkslategray</pre></blockquote>

This resource specification will apply to <em class="emphasis">all</em> <tt class="command">xterm</tt>
clients, and all <tt class="literal">Background</tt>-class resources used by <tt class="command">xterm</tt>.</p><blockquote>

<a name="FOOTNOTE-45" /><p>[45]Actually,
resource specifications have a more complex syntax than this, and the
rules used to determine resource and value bindings are somewhat involved.
For simplification, we are presenting a reasonable model for application
resource settings--and we direct curious readers to a good book on
using X like the <em class="emphasis">X Window System User's Guide</em>.</p>

</blockquote>

<p>

Now, let's look at translating the options given in the earlier
<em class="filename">.xinitrc</em> file into application resources.
Create a file in your home directory, called <em class="filename">.Xdefaults</em>.
For the previous sample <em class="filename">.xinitrc</em>, it should contain:
<blockquote><pre class="code">1  Clock*Geometry:         70x70+5+5
2  XLoad*Geometry:         85x50+85+5
3  XBiff*Geometry:          +200+5
4
5  ! Defaults for all xterm clients
6  XTerm*Foreground:       white
7  XTerm*Background:       black
8
9  ! Specific xterms
10 xterm-1*Geometry:       80x40+10+110
11
12 xterm-2*Geometry:       -20+10
13 xterm-2*Font:           7x13bold
14 xterm-2*Background:     darkslategray
15
16 xterm-3*Geometry:       80x25-20-30
17 xterm-3*Font:           7x13bold</pre></blockquote>

Lines 1-3 set the <tt class="literal">Geometry</tt> resource class for the
<tt class="literal">Clock</tt>, <tt class="literal">XLoad</tt>, and <tt class="literal">XBiff</tt> application classes.
On lines 6-7, we set the <tt class="literal">Foreground</tt> and <tt class="literal">Background</tt>
resource classes for the <tt class="literal">XTerm</tt> class as whole. All
<tt class="command">xterm</tt> clients will use these values for <tt class="literal">Foreground</tt>
and <tt class="literal">Background</tt> by default.</p>

<p>
On lines 10-17, we set resources specific to each invocation of <tt class="command">xterm</tt>.
This is necessary because not all of the <tt class="command">xterm</tt>s are alike; they each
have different geometry specifications, for example.
In this case, we have named the individual <tt class="command">xterm</tt> invocations
<tt class="literal">xterm-1</tt>, <tt class="literal">xterm-2</tt>, and <tt class="literal">xterm-3</tt>. As you can see, we set
the <tt class="literal">Geometry</tt> resource for each on lines 10, 12, and 16.
Also, we set the
<tt class="literal">Font</tt> class for <tt class="literal">xterm-2</tt> and <tt class="literal">xterm-3</tt>. And we set the
<tt class="literal">Background</tt> class to <tt class="literal">darkslategray</tt> for <tt class="literal">xterm-2</tt>.</p>

<p><a name="INDEX-2282" />
X resource binding rules work so that certain bindings have precedence
over others. In this case, setting a resource for a specific invocation
of <tt class="command">xterm</tt> (as in <tt class="literal">xterm-2*Background</tt> on line 14) has precedence
over the resource setting for the <tt class="literal">XTerm</tt> class as a whole
(<tt class="literal">XTerm*Background</tt> on line 7). In general, bindings
for an application or resource class have <em class="emphasis">lower</em>
precedence than
bindings for particular instances of that class. In this way, you can set
defaults for the class as a whole but override those defaults for
particular instances of the class.</p>

<p><a name="INDEX-2283" />
Now, let's look at the changes required to <em class="filename">.xinitrc</em> to use the
X resources defined here. First, we need to add an <tt class="command">xrdb</tt> command,
which loads the application resources into the server. And, we can
get rid of the various command-line options that the resources have
replaced. To wit:

<blockquote><pre class="code">#!/bin/sh
# Sample .xinitrc shell script

# Load resources
xrdb -load $HOME/.Xdefaults

# Start xterms
xterm -name "xterm-1" &amp;
xterm -name "xterm-2" &amp;
xterm -name "xterm-3" &amp;

# Other useful X clients
oclock &amp;
xload &amp;
xbiff &amp;
xsetroot -solid darkslateblue &amp;

# Start the window manager
exec fvwm2</pre></blockquote>


As you see, the <span class="option">-name</span> argument given to the three instances of
<tt class="command">xterm</tt> lets us specify the application name that <tt class="command">xterm</tt>
uses for locating X resources. Most X clients don't support a
<span class="option">-name</span> argument; the name used is usually the one which it was
invoked with. However, because many users run several <tt class="command">xterm</tt>s
at once, it is helpful to distinguish between them when setting
resources.</p>

<?troff .Nd 10?><p>Now, you should be able to modify your X environment to some degree.
Of course, knowing how to configure X depends partly on being familiar
with the many X clients out there, as well as the window manager
(and how to configure it). The rest of this section will present various
X applications for Linux. We'll also look at a particular window manager,
<tt class="command">fvwm</tt>, in detail.</p>

<a name="INDEX-2284" /><a name="INDEX-2285" /><a name="INDEX-2286" /><a name="INDEX-2287" />
</div>
</div>





























<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch10_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch11_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">10.7. Running Into Trouble</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">11.2. The fvwm Window Manager</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>