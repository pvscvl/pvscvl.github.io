<?label 5. Essential System Management?><html><head><title>Essential System Management (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_18.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch05_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h1 class="chapter">Chapter 5. Essential System Management</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch05_01.htm">Running the System</a><br />
<a href="ch05_02.htm">Booting the System</a><br />
<a href="ch05_03.htm">System Startup and Initialization</a><br />
<a href="ch05_04.htm">Single-User Mode</a><br />
<a href="ch05_05.htm">Shutting Down the System</a><br />
<a href="ch05_06.htm">The /proc filesystem</a><br />
<a href="ch05_07.htm">Managing User Accounts</a><br /></p></div>

<p>If you're running your own Linux system, one of the first tasks at
<a name="INDEX-1190" />
<a name="INDEX-1191" />
hand is to learn the ropes of system administration. You won't be able
to get by for long without having to perform some kind of system
maintenance, software upgrade, or mere tweaking necessary to keep
things in running order.</p>

<p>Running a Linux system is not unlike riding and taking care of a
motorcycle.<a href="#FOOTNOTE-21">[21]</a>

Many motorcycle hobbyists prefer caring for their own
equipment--routinely cleaning the points, replacing worn-out
parts, and so forth. Linux gives you the opportunity to experience the
same kind of "hands-on" maintenance with a complex
operating system.</p><blockquote>

<a name="FOOTNOTE-21" /><p>[21]At least one author attests a strong correspondence between
Linux system administration and Robert Pirsig's <em class="emphasis">Zen and the
Art of Motorcycle Maintenance</em>. Does Linux have the Buddha
nature?</p>

</blockquote>

<p>While a passionate administrator can spend any amount of time tuning
it for performance, you really have to perform administration only
when a major change occurs: you install a new disk, a new user comes
on the system, or a power failure causes the system to go down
unexpectedly. We discuss all these situations over the next four
chapters.</p>

<p>Linux is surprisingly accessible, in all respects--from the more
mundane tasks of upgrading shared libraries to the more esoteric, such
as mucking about with the kernel. Because all the source code is
available, and the body of Linux developers and users has
traditionally been of the hackish breed, systems maintenance is not
only a part of daily life but also a great learning experience. Trust
us: there's nothing like telling your friends how you upgraded from
X11R6.1 to X11R6.3 in less than half an hour, and all the while you were
recompiling the kernel to support the ISO 9660
filesystem.
<?troff .ne 10?>
 (They may have no idea what you're talking about, in which
case you can give them a copy of this book.)</p>

<p>In the next few chapters, we explore your Linux system from the
mechanic's point of view--showing you what's under the hood, as
it were--and explain how to take care of it all, including
software upgrades, managing users, filesystems, and other resources,
taking backups, and what to do in emergencies. If you've never used a
Unix system before, we'll also take you for a test
drive and show you the basics of running and using the system.</p>

<p>Once you put the right entries in startup files, your Linux system
will, for the most part, run itself. As long as you're happy with the
system configuration and the software that's running on it, very
little work will be necessary on your part. However, we'd like to
encourage Linux users to experiment with their system and customize it
to taste. Very little about Linux is carved in stone, and if
something doesn't work the way that you'd like it to, you should be
able to change that. For instance, if you'd rather read blinking
green text on a cyan background, rather than the traditional
white-on-black, we'll show you how to configure that. (As long as you
promise not to let anyone know who told you.)</p>

<p>It should be noted that many Linux systems include fancy tools to
simplify many system administration tasks. These include YaST on SuSE
systems, LISA on Caldera systems, and the
<tt class="command">control-panel</tt> or <tt class="command">linuxconf</tt> on
Red Hat systems. These tools can do
everything from managing user accounts to creating filesystems to
doing your laundry. These utilities can either make your life easier
or more difficult, depending on how you look at them. In these
chapters, we present the "guts" of system administration,
demonstrating the tools that should be available on any Linux system
and indeed nearly all Unix systems. These are the
core of the system administrator's toolbox: the metaphorical hammer,
screwdriver, and socket wrench that you can rely on to get the job
done. If you'd rather use the 40-hp circular saw, feel free, but it's
always nice to know how to use the hand tools in case the power goes
out.

Good follow-up books, should you wish to investigate more topics in
Unix system administration, include the
<em class="emphasis">Unix System Administration
Handbook</em> and <em class="emphasis">Essential System
Administration</em>.</p>

<div class="sect1"><a name="x-100-3-sec-sysadm-hats" />
<h2 class="sect1">5.1. Running the System</h2>

<p>Being the system administrator for any Unix system
requires a certain degree of responsibility and care. This is equally
true for Linux, even if you're the only user on your system.</p>

<p><a name="INDEX-1192" />
<a name="INDEX-1193" />

Many of the system administrator's tasks are done by logging into the
root account. This account has
special properties on Unix systems; specifically,
the usual file permissions and other security mechanisms simply don't
apply to root. That is,
root can access and modify any
file on the system--no matter who it belongs to. Whereas normal
users can't damage the system (say, by corrupting filesystems or
touching other users' files), root has no such restrictions.</p>

<p><a name="INDEX-1194" />
Why does the Unix system have security in the first
place? The most obvious reason for this is to allow users to choose
how they wish their own files to be accessed. By changing
file-permission bits (with the <tt class="command">chmod</tt> command),
users can specify that certain files should only be readable,
writable, or executable by certain groups of other users or no other
users at all. Permissions help ensure privacy and integrity of data; you
wouldn't want other users to read your personal mailbox, for example,
or to edit the source code for an important program behind your back.</p>

<p><a name="INDEX-1195" />
<a name="INDEX-1196" />
The Unix security mechanisms also prevent users
from damaging the system. The system restricts access to many of the
raw device files (accessed via <em class="filename">/dev</em>--more
on this in the section "<a href="ch06_03.htm">Section 6.3, "Device Files"</a>" in

<a href="ch06_01.htm">Chapter 6, "Managing
 Filesystems, Swap,
 and Devices"</a>) corresponding to hardware,
such as your hard drives. If normal users could read and write
directly to the disk-drive device, they could wreak all kinds of
havoc: say, completely overwriting the contents of the drive. Instead,
the system requires normal users to access the drives via the
filesystem--where security is enforced via the file permission
bits described previously.</p>

<p>It is important to note that not all kinds of "damage"
that can be caused are necessarily malevolent. System security is more
a means to protect users from their own natural mistakes and
misunderstandings rather than to enforce a police state on the
system. And, in fact, on many systems security is rather lax;
Unix security is designed to foster the sharing of
data between groups of users who may be, say, cooperating on a
project. The system allows users to be assigned to groups, and file
permissions may be set for an entire group. For instance, one
development project might have free read and write permission to a
series of files, while at the same time other users are prevented from
modifying those files. With your own personal files, you get to decide
how public or private the access permissions should be.</p>

<p><a name="INDEX-1197" />
<a name="INDEX-1198" />
The Unix security mechanism also prevents normal
users from performing certain actions, such as calling certain system
calls within a program. For example, there is a system call that
causes the system to halt, called by programs such as
<tt class="command">shutdown</tt> (more on this later in the chapter) to
reboot the system. If normal users could call this function within
their programs, they could accidentally (or purposefully) halt the
system at any time.</p>

<p>In many cases, you have to bypass Unix security
mechanisms in order to perform system maintenance or upgrades. This is
what the root account is
for. Because no such restrictions apply to root, it is easy for a knowledgeable system
administrator to get work done without worrying about the usual file
permissions or other limitations.
<a name="INDEX-1199" />
The usual way to log in as root
is with the <tt class="command">su</tt> command. <tt class="command">su</tt>
allows you to assume the identification of another user--for
example:
<?troff-ps_indent0?>
<blockquote><pre class="code">su andy</pre></blockquote>

<?troff .ne 10?>
will prompt you for the password for andy, and if it is correct will set your user
ID to that of andy. A superuser
often wants to temporarily assume a regular user's identity to correct
a problem with that user's files or some similar reason. Without a
username argument, <tt class="command">su</tt> will prompt you for the
root password, validating your
user ID as root. Once you are
finished using the root account,
you log out in the usual way and return to your own mortal identity.</p>

<p>Why not simply log in as root
from the usual login prompt?  As we'll see, this is desirable in some
instances, but most of the time it's best to use <tt class="command">su</tt>
after logging in as yourself. On a system with many users, use of
<tt class="command">su</tt> records a message such as:


<blockquote><pre class="code">Nov  1 19:28:50 loomer su: mdw on /dev/ttyp1</pre></blockquote>


in the system logs, such as <em class="filename">/var/log/messages</em>
(we'll talk more about these files later). This message indicates that
the user mdw successfully issued
a <tt class="command">su</tt> command, in this case for root. If you were to log in directly as root, no such message would appear in the
logs; you wouldn't be able to tell which user was mucking about with
the root account. This is
important if there are multiple administrators on the machine: it is
often desirable to find out who used <tt class="command">su</tt> and when.</p>

<p>
<a name="INDEX-1200" />
The root account can be
considered a magic wand--both a useful and potentially dangerous
tool. Fumbling the magic words you invoke while holding this wand can
wreak unspeakable damage on your system. For example, the simple
eight-character sequence <tt class="literal">rm -rf /</tt> will
delete every file on your system, if executed as root, and if you're not paying attention.
Does this problem seem far-fetched?  Not at all. You might be trying
to delete an old directory, such as
<em class="filename">/usr/src/oldp</em>, and accidently slip in a space
after the first slash, producing the following:</p>

<blockquote><pre class="code">rm -rf / usr/src/oldp</pre></blockquote>

<p><a name="INDEX-1201" />
Another common mistake is to confuse the
arguments for commands such as <tt class="command">dd</tt>, a command often
used to copy large chunks of data from one place to another. For
instance, in order to save the first 1024 bytes of data from the
device <em class="filename">/dev/hda</em> (which contains the boot record
and partition table for that drive), one might use the command:
<blockquote><pre class="code">dd if=/dev/hda of=/tmp/stuff bs=1k count=1</pre></blockquote>


However, if we reverse <tt class="literal">if</tt> and <tt class="literal">of</tt>
in this command, something quite different happens: the contents
of <em class="filename">/tmp/stuff</em> are written to the top of
<em class="filename">/dev/hda</em>. If <em class="filename">/tmp/stuff</em>
contains garbage or incorrect data, you've just succeeded in hosing
your partition table and possibly a filesystem superblock. Welcome to
the wonderful world of system administration!</p>

<p>The point here is that you should sit on your hands before executing
any command as root. Stare at the
command for a minute before pressing Enter and make sure it makes
sense. If you're not sure of the arguments and syntax of the command,
quickly check the manual pages or try the command in a safe
environment before firing it off. Otherwise you'll learn these
lessons the hard way; mistakes made as root can be disastrous.</p>

<p><a name="INDEX-1202" />
<a name="INDEX-1203" />
<a name="INDEX-1204" />
In many cases, the prompt for the root account differs from that for normal
users. Classically, the root
prompt contains a hash mark (<tt class="literal">#</tt>), while normal user
prompts contain <tt class="literal">$</tt> or <tt class="literal">%</tt>. (Of
course, use of this convention is up to you; it is utilized on many
Unix systems, however.) Although the prompt may
remind you that you are wielding the root magic wand, it is not uncommon for users
to forget this or accidentally enter a command in the wrong window or
virtual console.</p>

<p><a name="INDEX-1205" />
Like any powerful tool, the root
account can also be abused. It is important, as the system
administrator, to protect the root password, and if you give it out at
all, to give it only to those users whom you trust (or who can be held
responsible for their actions on the system). If you're the only user
of your Linux system, this certainly doesn't apply--unless, of
course, your system is connected to a network or allows dial-in login
access.</p>

<p>The primary benefit of not sharing the root account with other users
is not so much that the potential for abuse is diminished, although
this is certainly the case. Even more important is that if you're
the one person with the ability to use the root account, you have
complete knowledge of how the system is configured. If anyone were
able to, say, modify important system files (as we'll talk about in this
chapter), the system configuration could be changed behind your
back, and your assumptions about how things work would be incorrect.
Having one system administrator act as the arbiter for the system
configuration means that one person always knows what's going on.</p>

<p>Also, allowing other people to have the root password means that it's
more likely someone will eventually make a mistake using the
root account. Although each
person with knowledge of the root password may be trusted, anybody can
make mistakes. If you're the only system administrator, you have only
yourself to blame for making the inevitable human mistakes as
root.</p>

<p>That being said, let's dive into the actual tasks of system administration
under Linux. Buckle your seatbelt.
<a name="INDEX-1206" />
<a name="INDEX-1207" />
<a name="INDEX-1208" /></p>
</div>
























































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_18.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch05_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">4.18. Processes</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">5.2. Booting the System</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>