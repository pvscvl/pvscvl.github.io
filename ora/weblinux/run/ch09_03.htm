<?label 9.3. Text and Document Processing?><html><head><title>Text and Document Processing (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch09_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">9.3. Text and Document Processing</h2>

<p><a name="INDEX-2068" />
<a name="INDEX-2069" />
In the first chapter, we briefly mentioned various text processing
systems available for Linux and how they differ from word processing systems
that you may be familiar with. While most word processors allow the user to
enter text in a <span class="acronym">WYSISYG</span> environment,
text processing
systems have the user enter source text using a text-formatting language,
which can be modified with any text editor. (In fact, Emacs provides special
modes for editing various types of text-formatting languages.) Then, the 
source is processed into a printable (or viewable) document using the 
text processor itself.
Finally, you process the output and send it to a file or to a viewer
application for display, or you hand it off to a printer daemon to queue
for printing to a local or remote device.</p>

<p>In this section, we'll talk first about three of the most popular text
processing 
systems for Linux: TeX, <tt class="command">groff</tt>, and Texinfo. At
the end, we include a discussion about the available options if you
would rather like to use a WYSIMWYG
(what-you-see-is-maybe-what-you-get) word processor like those
that predominate on Windows and Macintosh.</p>

<a name="x-100-3-sec-tools-latex" /><div class="sect2">
<h3 class="sect2">9.3.1. TeX and LaTeX</h3>

<p><a name="INDEX-2070" />
TeX is a professional text-processing
system for all kinds of documents, articles, and books--especially those
that contain a great deal of mathematics. 
It is a somewhat "low-level" text-processing language, because it 
describes to the system how to lay out text on the page, how it should be
spaced, and so on. TeX doesn't concern itself directly with higher-level
elements of text such as chapters, sections, footnotes, and so forth (those
things that you, the writer, care about the most). 
For this reason, TeX
is known as a functional text-formatting language (referring to the 
actual physical layout of text on a page) rather than a logical one 
(referring to logical elements, such as chapters and sections).  
TeX was designed by Donald E. Knuth, one of the world's foremost
experts in programming. One of Knuth's motives for developing TeX
was to produce a typesetting system powerful enough to handle the
mathematics formatting needs for his series of computer science textbooks.
Knuth ended up taking an eight-year detour to finish TeX; most
would agree the result was well worth the wait.</p>

<p>Of course, TeX is very extensible, and it is possible to write macros for
TeX that allow writers to concern themselves primarily with 
the logical, rather then the physical, format of the document. In fact,
a number of such macro packages have been developed--the most popular
of which is LaTeX, a set of extensions for TeX designed by Leslie
Lamport. LaTeX commands are concerned mostly with logical structure,
but because LaTeX is just a set of macros on top of TeX, you
can use plain TeX commands as well. LaTeX greatly simplifies the use
of TeX, hiding most of the low-level functional features from the writer.</p>

<p>In order to write well-structured documents using TeX, you would either have
to decide on a prebuilt macro package, such as LaTeX, or develop your
own (or use a combination of the two). In <em class="emphasis">The TeXbook</em>, Knuth
presents his own set of macros that he used for production of the book.
As you might expect, they include commands for beginning new chapters,
sections, and the like--somewhat similar to their LaTeX counterparts.
In this section, we'll concentrate on the use of LaTeX, which provides
support for many types of documents: technical articles, manuals, 
books, letters, and so on. As with plain TeX, LaTeX is extensible as well.</p>

<div class="sect3">
<h3 class="sect3">9.3.1.1. Learning the ropes</h3>

<p>If you're never used a text-formatting system before, there are a number of
new concepts you should be aware of. As we said, text processing systems
start with a source document, which you enter with a plain-text editor, such
as Emacs. The source is written in a text-formatting language, which includes
the text you wish to appear in your document, as well as commands
that tell the text processor how to format it. In the first chapter we 
gave a simple example of what the LaTeX language looks like and what kind
of output it produces.</p>

<p>So, without further ado, let's dive in and see how to write a simple
document, and format it, from start to finish. As a demonstration, we'll
show how to use LaTeX to write a short business letter.
Sit down at your favorite
text editor, and enter the following text into a file (without
the line numbers, of course). Call it <em class="filename">letter.tex</em>:
 
<blockquote><pre class="code">1  \documentclass{letter} 
2  \address{755 Chmod Way \\ Apt 0x7F \\ 
3           Pipeline, N.M. 09915} 
4  \signature{Boomer Petway} 
5   
6  \begin{document} 
7  \begin{letter}{O'Reilly and Associates, Inc. \\ 
8                 103 Morris Street Suite A \\  
9                 Sebastopol, C.A. 95472} 
10  
11 \opening{Dear Mr. O'Reilly,} 
12  
13 I would like to comment on the \LaTeX\ example as presented in
14 Chapter~9 of {\em Running Linux}. Although it was a valiant effort,
15 I find that the example falls somewhat short of what
16 one might expect in a discussion of text-formatting systems.
17 In a future edition of the book, I suggest that you replace
18 the example with one that is more instructive. 
19
20 \closing{Thank you,} 
21  
22 \end{letter} 
23 \end{document}</pre></blockquote>

This is a complete LaTeX document for the business letter that we
wish to send. As you can see, it contains the actual text of the letter,
with a number of commands (using backslashes and braces) thrown in.
Let's walk through it.</p>

<p>Line 1 uses the <tt class="literal">documentclass</tt> command to specify the class of document
that we're producing (which is a <tt class="literal">letter</tt>). Commands in LaTeX begin
with a backslash and are followed by the actual command name, which is in
this case <tt class="literal">documentclass</tt>. Following the command name are any arguments,
enclosed in braces. LaTeX supports several 
document classes, such as <tt class="literal">article</tt>, <tt class="literal">report</tt>, and <tt class="literal">book</tt>, and
you can define your own. Specifying the document class defines global 
macros for use within the TeX document, such as the
<tt class="literal">address</tt> and <tt class="literal">signature</tt>
commands used on lines 2-4. As you might guess, the <tt class="literal">address</tt> and 
<tt class="literal">signature</tt> commands specify your own address and name
in the letter. The double-backslashes 
(<tt class="literal">\\</tt>) that appear in the <tt class="literal">address</tt> generate
line breaks in the resulting output of the address.</p>

<p><a name="INDEX-2071" />
<a name="INDEX-2072" />
A word about how LaTeX processes input: as with most text formatting
systems, whitespace, line breaks, and other such features in the input
source are not passed literally into the output. Therefore, you can 
break lines more or less wherever you please; when formatting paragraphs,
LaTeX will fit the lines back together again. Of course, there are 
exceptions: blank lines in the input begin new paragraphs, and
there are commands to force LaTeX to treat the source text literally.</p>

<p>On line 6, the command <tt class="literal">\begin{document}</tt> is used to signify the
beginning of the document as a whole. Everything enclosed within the
<tt class="literal">\begin{document}</tt> and <tt class="literal">\end{document}</tt> on line 22
is considered part of the text to be formatted; anything before
<tt class="literal">\begin{document}</tt> is called the
<em class="emphasis">preamble</em> and defines formatting parameters before
the actual body.</p>

<p>On lines 7-9, <tt class="literal">\begin{letter}</tt> begins the actual letter.
This is required because you may have many letters within a single source
file, and a <tt class="literal">\begin{letter}</tt> is needed for each. This command
takes as an argument the address of the intended recipient; as with the
<tt class="literal">address</tt> command, double-backslashes signify line breaks
in the address.</p>

<p>Line 11 uses the <tt class="literal">opening</tt> command to open the letter. Following on
lines 12-18 is the actual body of the letter. As straightforward as it
may seem, there are a few tricks hidden in the body as well. On line 13
the <tt class="literal">LaTeX</tt> command generates the LaTeX logo. You'll
notice that a backslash follows the <tt class="literal">LaTeX</tt> command as well as 
preceding it; the trailing backslash is used to force a space after the
word "LaTeX." This is because TeX ignores spaces after command
invocations; the command must be followed by a backslash and a space. (Otherwise, "LaTeX is fun" would appear as
"LaTeXis fun.")</p>

<p>There are two quirks of note on line 14. First of all, there is a tilde
(<tt class="literal">~</tt>) present between <tt class="literal">Chapter</tt> and <tt class="literal">9</tt>, which
causes a space to appear between the two words, but prevents a line break
between them in the output (that is, to prevent <tt class="literal">Chapter</tt> from being
on the end of a line, and <tt class="literal">9</tt> to be on the beginning of the next). 
You need only use the tilde to generate a space between two words that 
should be stuck together on the same line, as in <tt class="literal">Chapter~9</tt> 
and <tt class="literal">Mr.~Jones</tt>. (In retrospect, we could have used the tilde
in the <tt class="literal">\begin{letter}</tt> and <tt class="literal">opening</tt> commands, although
it's doubtful TeX would break a line anywhere within the address
or the opening.)</p>

<p>The second thing to take note of on line 14 is the use of 
<tt class="literal">\em</tt> to generate <em class="emphasis">emphasized text</em> in 
the output. LaTeX supports various other fonts, including
<b class="emphasis-bold">boldface</b> <tt class="literal">(\bf)</tt>,
and <tt class="literal">typewriter</tt> <tt class="literal">(\tt)</tt>.</p>

<p>Line 19 uses the <tt class="literal">closing</tt> command to close off the letter. This also
has the effect of appending the signature used on line 4 after the closing
in the output. Lines
21-22 use the commands <tt class="literal">\end{letter}</tt> and 
<tt class="literal">\end{document}</tt> to end the <tt class="literal">letter</tt> and <tt class="literal">document</tt>
environments begun on lines 6 and 7.</p>

<p>You'll notice that none of the commands in the LaTeX source has
anything to do with setting up margins, line spacing, or other 
functional issues of text formatting. That's all taken care of by the
LaTeX macros on top of the TeX engine. LaTeX provides reasonable
defaults for these parameters; if you wanted to change any of these 
formatting options, you could use other LaTeX commands (or lower-level 
TeX commands) to modify them.</p>

<p>We don't expect you to understand all of the intricacies of using
LaTeX from such a limited example, although this should give you an
idea of how a living, breathing LaTeX document looks. Now, let's format
the document in order to print it out.</p>
</div>


<div class="sect3">
<h3 class="sect3">9.3.1.2. Formatting and printing</h3>

<p><a name="INDEX-2073" />
<a name="INDEX-2074" />
Believe it or not, the command used to format LaTeX source files
into something printable is <tt class="command">latex</tt>. After editing
and saving the previous example, 
<em class="filename">letter.tex</em>, you should be able to use the command:

<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>latex letter</b></tt> 
This is TeX, Version 3.14159 (C version 6.1)
(letter.tex
LaTeX2e &lt;1996/12/01&gt;
Babel &lt;v3.6h&gt; and hyphenation patterns for american, german, loaded.
(/usr/lib/teTeX/texmf/tex/latex/base/letter.cls
Document Class: letter 1997/01/07 v1.2w Standard LaTeX document class
(/usr/lib/teTeX/texmf/tex/latex/base/size10.clo))
No file letter.aux.
[1] (letter.aux) )
Output written on letter.dvi (1 page, 1128 bytes).
Transcript written on letter.log.
eggplant$</pre></blockquote>

<a name="INDEX-2075" />
<a name="INDEX-2076" />
<tt class="command">latex</tt> assumes the extension <em class="filename">.tex</em> for source files. 
Here, LaTeX has processed the source <em class="filename">letter.tex</em> and saved
the results in the file <em class="filename">letter.dvi</em>. This is a "device-independent"
file that generates printable output on a variety of
printers. Various tools exist for converting <em class="filename">.dvi</em> files to
PostScript, HP LaserJet, and other formats, as we'll see shortly.</p>

<?troff .wcon_off?><p><a name="INDEX-2077" />
Instead of immediately printing your letter, you may wish to preview it
to be sure that everything looks right. If you're running 
the X Window System, you 
can use the <tt class="command">xdvi</tt> command to preview <em class="filename">.dvi</em> files on your screen.
What about printing the letter? First, you need to convert the 
<em class="filename">.dvi</em> to something your printer can handle. <span class="acronym">dvi</span> 
drivers exist for many printer types.
Almost all the program names begin with
the three characters <em class="filename">dvi</em>, as in 
<tt class="command">dvips</tt>, <tt class="command">dvilj</tt>, and
so forth.
If your system doesn't have
one you need, you have to get the appropriate driver from the TeX
archives if you have Internet access. See the FAQ for comp.text.tex for details.</p>

<?troff .Nd 10?><p><a name="INDEX-2078" />If you're lucky enough to have a PostScript printer, you can use <tt class="command">dvips</tt>
to generate PostScript from the <em class="filename">.dvi</em>:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>dvips -o letter.ps letter.dvi</b></tt></pre></blockquote>

You can then print the PostScript using <tt class="command">lpr</tt>. Or, to do this in 
one step:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>dvips letter.dvi | lpr</b></tt></pre></blockquote></p>

<p>In addition, <tt class="command">dvilj</tt> will print
<em class="filename">.dvi</em> files on HP LaserJet printers, and
<tt class="command">eps</tt> will print <em class="filename">.dvi</em> files on
Epson-compatible printers.</p>

<p>If you can't find a <span class="acronym">DVI</span> driver for your printer, you might
be able to use Ghostscript to convert PostScript (produced by <tt class="command">dvips</tt>)
into something you can print. Although some of Ghostscript's fonts are 
less than optimal, it does allow you to use Adobe fonts (which you can 
obtain for <span class="acronym">MS-DOS</span> and use with Ghostscript under Linux). Ghostscript also
provides an <span class="acronym">SVGA</span> preview mode you can use if you're not running X. At any rate, after you manage to format and print the example letter,
it should end up looking something like that in <a href="ch09_03.htm">Figure 9-1</a>.</p>

<a name="x-100-3-fig-sampletter" /><div class="figure"><img src="figs/rl3_0901.gif" alt="Figure 9-1" /></div>
<h4 class="objtitle">Figure 9-1. Sample output from a LaTeX file</h4>
</div>


<div class="sect3">
<h3 class="sect3">9.3.1.3. Further reading</h3>

<p><a name="INDEX-2079" />

If LaTeX seems right for your document-processing needs, and you
have been able to get at least this initial example working and
printed out, we suggest checking into Leslie Lamport's
<em class="emphasis">LaTeX User's Guide and Reference Manual</em>, which
includes everything you need to know about LaTeX for formatting
letters, articles, books, and more. If you're interested in hacking
or want to know more about the underlying workings of TeX (which can
be invaluable), Donald Knuth's <em class="emphasis">The TeXbook</em> is
the definitive guide to the system.</p>

<p>comp.text.tex is the Usenet
newsgroup for questions and information about these systems, although
information found there assumes you have access to TeX and LaTeX
documentation of some kind, such as the manuals mentioned earlier.</p>

<a name="INDEX-2080" />
</div>
</div>




<div class="sect2">
<h3 class="sect2">9.3.2. groff</h3>

<p><a name="INDEX-2081" />
<a name="INDEX-2082" />
<a name="INDEX-2083" />
Parallel to TeX, growing independently, were
<tt class="command">troff</tt> and <tt class="command">nroff</tt>, two text processing systems
developed at Bell Labs for the original implementation of Unix (in fact,
the development of Unix was spurred, in part, to support such a
text-processing system). The first version of this text processor was
called <tt class="command">roff</tt> (for "runoff"); later came <tt class="command">nroff</tt> and <tt class="command">troff</tt>, which 
generated output for a particular typesetter in use at the time (<tt class="command">nroff</tt> 
was written for fixed-pitch printers (such as dot matrix printers),
<tt class="command">troff</tt> for proportional space devices--initially typesetters). 
Later versions of <tt class="command">nroff</tt> and <tt class="command">troff</tt> became the standard text processor
on Unix systems everywhere. <tt class="command">groff</tt> is <span class="acronym">GNU</span>'s implementation of
<tt class="command">nroff</tt> and <tt class="command">troff</tt> that is used on Linux systems. It includes
several extended features and drivers for a number of printing devices.</p>

<p><tt class="command">groff</tt> is capable of producing documents, articles, and books, 
much in the same vein as TeX. However, <tt class="command">groff</tt> (as well as 
the original <tt class="command">nroff</tt> ) has one intrinsic feature that is absent from
TeX and variants: the ability to produce plain-<span class="acronym">ASCII</span> output. While
TeX is great for producing documents to be printed, <tt class="command">groff</tt>
is able to produce plain ASCII to be viewed online (or printed directly
as plain text on even the simplest of printers). If you're going to be
producing documentation to be viewed online as well as in printed form,
<tt class="command">groff</tt> may be the way to go (although there are other alternatives
as well--Texinfo, which is discussed later, is one).</p>

<p><tt class="command">groff</tt> also has the benefit of being much smaller than TeX; it 
requires fewer support files and executables than even a 
minimal TeX distribution.</p>

<p><a name="INDEX-2084" />
One special application of <tt class="command">groff</tt> is to format Unix manual pages. 
If you're a Unix programmer, you'll
eventually need to write and produce manual pages of some kind. In this section,
we'll introduce the use of <tt class="command">groff</tt> through the writing of a short
manual page.</p>

<p>As with TeX, <tt class="command">groff</tt> uses a particular text-formatting language to
describe how to process the text. This language is slightly more cryptic
than TeX but is also less verbose. In addition, <tt class="command">groff</tt> provides
several macro packages that are used on top of the basic <tt class="command">groff</tt> 
formatter; these macro packages are tailored to a particular type of 
document. For example, the <tt class="literal">mgs</tt> macros are an ideal choice for writing
articles and papers, while the <tt class="literal">man</tt> macros are used for manual pages.</p>

<div class="sect3">
<h3 class="sect3">9.3.2.1. Writing a manual page</h3>

<p><a name="INDEX-2085" />
<a name="INDEX-2086" />
Writing manual pages with <tt class="command">groff</tt> is actually quite simple. In order
for your manual page to look like other manual pages, you need to follow several
conventions in the source, which are presented in the following example. In this example,
we'll write a manual page for a mythical command <tt class="command">coffee</tt>, which controls
your networked coffee machine in various ways.</p>

<p>Enter the following source with your text editor, and save the result
as <em class="filename">coffee.man</em>:

<blockquote><pre class="code">1  .TH COFFEE 1 "23 March 94"  
2  .SH NAME 
3  coffee \- Control remote coffee machine 
4  .SH SYNOPSIS 
5  \fBcoffee\fP [ -h | -b ] [ -t \fItype\fP ] \fIamount\fP 
6  .SH DESCRIPTION 
7  \fIcoffee\fP queues a request to the remote coffee machine at the 
8  device \fB/dev/cf0\fR. The required \fIamount\fP argument specifies 
9  the number of cups, generally between 0 and 15 on ISO standard 
10 coffee machines.  
11 .SS Options 
12 .TP 
13 \fB-h\fP 
14 Brew hot coffee. Cold is the default. 
15 .TP 
16 \fB-b\fP 
17 Burn coffee. Especially useful when executing \fIcoffee\fP on behalf 
18 of your boss. 
19 .TP 
20 \fB-t \fItype\fR 
21 Specify the type of coffee to brew, where \fItype\fP is one of 
22 \fBcolombian\fP, \fBregular\fP, or \fBdecaf\fP.  
23 .SH FILES 
24 .TP 
25 \fI/dev/cf0\fR 
26 The remote coffee machine device 
27 .SH "SEE ALSO" 
28 milk(5), sugar(5) 
29 .SH BUGS 
30 May require human intervention if coffee supply is exhausted.</pre></blockquote>


Don't let the amount of obscurity in this source file frighten you. It
helps to know that the character sequences <tt class="literal">\fB</tt>,
<tt class="literal">\fI</tt>, and <tt class="literal">\fR</tt> are used to change
the font to boldface, italics, and roman type,
respectively. <tt class="literal">\fP</tt> resets the font to the one
previously selected.</p>

<p>Other <tt class="command">groff</tt> requests appear on lines beginning with
a dot (<tt class="literal">.</tt>).  On line 1, we see that the
<tt class="literal">.TH</tt> request sets the title of the manual page to
<tt class="literal">COFFEE</tt> and the manual section to
1. (Manual section 1 is used for user commands,
section 2 for system calls, and so forth.) The <tt class="literal">.TH</tt>
request also sets the date of the last manual page revision.</p>

<p>On line 2, the <tt class="literal">.SH</tt> request starts a section
entitled <tt class="literal">NAME</tt>.  Note that almost all
Unix manual pages use the section progression
<tt class="literal">NAME</tt>, <tt class="literal">SYNOPSIS</tt>,
<tt class="literal">DESCRIPTION</tt>, <tt class="literal">FILES</tt>, <tt class="literal">SEE
ALSO</tt>, <tt class="literal">NOTES</tt>, <tt class="literal">AUTHOR</tt>,
and <tt class="literal">BUGS</tt>, with extra optional sections as
needed. This is just a convention used when writing manual pages and
isn't enforced by the software at all.</p>

<p>Line 3 gives the name of the command and a short description, after a
dash (<tt class="literal">\-</tt>). You should use this format for the
<tt class="literal">NAME</tt> section so that your manual page can be added
to the <tt class="command">whatis</tt> database used by the <tt class="command">man
-k</tt> and <tt class="command">apropos</tt> commands.</p>

<p>On lines 4-5, we give the synopsis of the command syntax for
<tt class="command">coffee</tt>.  Note that italic type
<tt class="literal">\fI&#133;\fP</tt> is used to denote parameters on the
command line, and that optional arguments are enclosed in square
brackets.</p>

<p>Lines 6-10 give a brief description of the command. Italic type
generally denotes commands, filenames, and user options. On line 11, a
subsection named <tt class="literal">Options</tt> is started with the
<tt class="literal">.SS</tt> request. Following this on lines 11-22 is a
list of options, presented using a tagged list.  Each item in the
tagged list is marked with the <tt class="literal">.TP</tt> request; the
line <em class="emphasis">after</em> <tt class="literal">.TP</tt> is the tag,
after which follows the item text itself. For example, the source on
lines 12-14:
<blockquote><pre class="code">.TP  
\fB-h\fP 
Brew hot coffee. Cold is the default.</pre></blockquote>

will appear as the following in the output:
<blockquote><pre class="code"><tt class="userinput"><b>-h</b></tt>      Brew hot coffee. Cold is the default.</pre></blockquote>

You should document each command-line option for your program in this way.</p>

<p>Lines 23-26 make up the <tt class="literal">FILES</tt> section of the
manual page, which describes any files the command might use to do its
work. A tagged list using the <tt class="literal">.TP</tt> request is used
for this as well.</p>

<p>On lines 27-28, the <tt class="literal">SEE ALSO</tt> section is
given, which provides cross references to other manual pages of
note. Notice that the string <tt class="literal">"SEE ALSO"</tt> following
the <tt class="literal">.SH</tt> request on line 27 is in quotation marks; this is
because <tt class="literal">.SH</tt> uses the first whitespace-delimited
argument as the section title. Therefore any section titles that are
more than one word need to be enclosed in quotation marks to make up a single
argument. Finally, on lines 29-30, the <tt class="literal">BUGS</tt>
section is presented.</p>
</div>


<div class="sect3">
<h3 class="sect3">9.3.2.2. Formatting and installing the manual page</h3>

<p><a name="INDEX-2087" />
<a name="INDEX-2088" />
In order to format this manual page and view it on your screen, use
the command:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>groff -Tascii -man coffee.man | more</b></tt></pre></blockquote>

The <span class="option">-Tascii</span> option tells
<tt class="command">groff</tt> to produce plain-<span class="acronym">ASCII</span> output;
<span class="option">-man</span> tells <tt class="command">groff</tt> to use the
manual-page macro set. If all goes
well, the manual page should be displayed as: 
<blockquote><pre class="code">COFFEE(1)                                               COFFEE(1) 
 
 
NAME 
       coffee - Control remote coffee machine 
 
SYNOPSIS 
       coffee [ -h | -b ] [ -t type ] amount 
 
DESCRIPTION 
       coffee  queues  a  request to the remote coffee machine at 
       the device /dev/cf0. The required amount  argument  speci- 
       fies the number of cups, generally between 0 and 12 on ISO 
       standard coffee machines. 
 
   Options 
       -h     Brew hot coffee. Cold is the default. 
 
       -b     Burn coffee. Especially useful when executing  cof- 
              fee on behalf of your boss. 
 
       -t type 
              Specify  the  type of coffee to brew, where type is 
              one of colombian, regular, or decaf. 
 
FILES 
       /dev/cf0 
              The remote coffee machine device 
 
SEE ALSO 
       milk(5), sugar(5) 
 
BUGS 
       May  require  human  intervention  if  coffee  supply   is 
       exhausted.</pre></blockquote></p>

<p>As mentioned before, <tt class="command">groff</tt> is capable of producing
other types of output. Using the <span class="option">-Tps</span> option in
place of <span class="option">-Tascii</span> produces PostScript output
that you can save to a file, view with Ghostview, or print on a
PostScript printer. <span class="option">-Tdvi</span> produces
device-independent <em class="filename">.dvi</em> output similar to that
produced by TeX.</p>

<?troff .Nd 10?><p><a name="INDEX-2089" />
<a name="INDEX-2090" />

If you wish to make the manual page available for others to view on
your system, you need to install the <tt class="command">groff</tt> source
in a directory that is present on the users'
<tt class="literal">MANPATH</tt>. The location for standard manual pages is
<em class="filename">/usr/man</em>. The source for section 1 manual pages
should therefore go in <em class="filename">/usr/man/man1</em>. The command:

<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>cp coffee.man /usr/man/man1/coffee.1</b></tt></pre></blockquote>


installs this manual page in <em class="filename">/usr/man</em> for all to
use (note the use of the <em class="filename">.1</em> filename extension,
instead of <em class="filename">.man</em>). When <tt class="command">man
coffee</tt> is subsequently invoked, the manual page will be
automatically reformatted, and the viewable text saved in
<em class="filename">/usr/man/cat1/coffee.1.gz</em>.</p>

<p>If you can't copy manual page sources
directly to <em class="filename">/usr/man</em>, you can create your own manual page directory 

tree and add it to your <tt class="literal">MANPATH</tt>.  See 
the section "<a href="ch04_12.htm">Section 4.12, "Manual Pages"</a>" in <a href="ch04_01.htm">Chapter 4, "Basic Unix
 Commands
 and Concepts"</a>.</p>

<a name="INDEX-2091" />
</div>
</div>




<div class="sect2">
<h3 class="sect2">9.3.3. Texinfo</h3>

<p><a name="INDEX-2092" />
<a name="INDEX-2093" />
<a name="INDEX-2094" />
Texinfo is a text-formatting system used by the <span class="acronym">GNU</span> project to
produce both online documentation in the form of hypertext Info pages,
and printed manuals through TeX from a single-source file. By
providing Texinfo source, users can convert the documentation to Info
files, HTML, DVI, PostScript, PDF or plain text.</p>

<p>Texinfo is
documented completely 
through its own Info pages, which are readable within Emacs (using the
<tt class="literal">C-h i</tt> command) or a separate Info reader, such as <tt class="command">info</tt>. 
If the <span class="acronym">GNU</span> Info pages are installed in your system, complete Texinfo
documentation is contained therein. Just as you'll find yourself using
<tt class="command">groff</tt> to write a manual page, you'll use Texinfo to write an
Info document.</p>

<div class="sect3">
<h3 class="sect3">9.3.3.1. Writing the Texinfo source</h3>

<p>In this section, we're going to present a simple Texinfo source
file--chunks at a time--and describe what each chunk does as we go along.</p>

<p>Our Texinfo source file will be called <em class="filename">vacuum.texi</em>. As usual, you
can enter the source using a plain-text editor: 
 
<blockquote><pre class="code">\input texinfo @c -*-texinfo-*- 
@c %**start of header 
@setfilename vacuum.info 
@settitle The Empty Info File 
@setchapternewpage odd 
@c %**end of header</pre></blockquote>

This is the header of the Texinfo source. The first line is a TeX command
used to input the Texinfo macros when producing printed 
documentation. Commands in Texinfo begin with the at-sign, <tt class="literal">@</tt>. 
<a name="INDEX-2095" />
The <tt class="literal">@c</tt> command begins a comment; here, the comment
<tt class="literal">-*-texinfo-*-</tt> is a tag that tells Emacs this is a 
Texinfo source file, so that
<?troff .ne 10?> Emacs can set the proper major mode.
(Major modes were discussed earlier, in the section
"<a href="ch09_02.htm">Section 9.2.8, "Tailoring Emacs"</a>.")</p>

<p><a name="INDEX-2096" />
The comments <tt class="literal">@c %**start of header</tt> and 
<tt class="literal">@c %**end of header</tt> are used to denote the Texinfo header.
This is required if you wish to format just a portion of the Texinfo file.
The <tt class="literal">@setfilename</tt> command specifies the filename to use
for the resulting Info file, <tt class="literal">@settitle</tt> sets the title of the document,
and <tt class="literal">@setchapternewpage odd</tt> tells Texinfo to start new chapters on an
odd-numbered page. These are just cookbook routines that should 
be used for all Texinfo files.</p>

<p>The next section of the source file sets up the title page, which is used
when formatting the document using TeX. These commands should be 
self-explanatory:
<blockquote><pre class="code">@titlepage 
@title Vacuum 
@subtitle The Empty Info File 
@author by Tab U. Larasa 
@end titlepage</pre></blockquote></p>

<p> 
<a name="INDEX-2097" />
Now we move on to the body of the Texinfo source. 
The Info file is divided into nodes, where each node
is somewhat like a "page" in the document.
Each node has links to the next,
previous, and parent nodes, and can be linked to other nodes
as cross references. You can think of
each node as a chapter or section within the document 
with a menu to nodes below it. For example, a chapter-level
node has a menu that lists the sections within the chapter. Each
section node points to the chapter-level node as its parent.
Each section also points to the previous and next section, if
they exist.  This is a little complicated, but will become clear when
you see it in action.</p>

<p>Each node is given a short name. The topmost
node is called <tt class="literal">Top</tt>. The <tt class="literal">@node</tt> command is used to start a node;
it takes as arguments the node name, the name of the next node, the previous
node, and the parent node. As noted earlier, the next and previous nodes
should be nodes on the same hierarchical level. The parent node is the node
above the current one in the node tree (e.g., the parent of
Section 2.1 in a document is Chapter 2). A sample node
hierarchy is depicted in <a href="ch09_03.htm">Figure 9-2</a>.</p>

<a name="x-100-3-fig-texinfo-nodes" /><div class="figure"><img src="figs/rl3_0902.gif" alt="Figure 9-2" />
</div><h4 class="objtitle">Figure 9-2. Hierarchy of nodes in Texinfo</h4><p>Here is the source for the <tt class="literal">Top</tt> node:</p>

<blockquote><pre class="code">@c    Node, Next, Previous, Up 
@node Top ,     ,         , (dir) 
 
@ifinfo 
This Info file is a close approximation to a vacuum. It documents 
absolutely nothing. 
@end ifinfo 
 
@menu 
* Overview::              Overview of Vacuum 
* Invoking::              How to use the Vacuum 
* Concept Index::         Index of concepts 
@end menu</pre></blockquote>

<p>The <tt class="literal">@node</tt> command is preceded by a comment to
remind us of the order of the arguments to <tt class="literal">@node</tt>.
Here, <tt class="literal">Top</tt> has no previous or next node, so they are
left blank. The parent node for <tt class="literal">Top</tt> is
<tt class="literal">(dir)</tt>, which denotes the systemwide Info page
directory. Supposedly your Info file will be linked into the system's
Info page tree, so you want the <tt class="literal">Top</tt> node to have a
link back to the overall directory.</p>

<p>Following the <tt class="literal">@node</tt> command is an abstract for the
overall document, enclosed in an
<tt class="literal">@ifinfo</tt>&#133;<tt class="literal">@end ifinfo</tt>
pair. These commands are used because the actual text of the
<tt class="literal">Top</tt> node should appear only in the Info file, not
the TeX-generated printed document.</p>

<p>The <tt class="literal">@menu</tt>&#133;<tt class="literal">@end menu</tt>
commands demarcate the node's menu.  Each menu entry includes a node
name followed by a short description of the node.  In this case, the
menu points to the nodes <tt class="literal">Overview</tt>,
<tt class="literal">Invoking</tt>, and <tt class="literal">Concept Index</tt>, the
source for which appears later in the file. These three nodes are the
three "chapters" in our document.</p>

<p>We continue with the <tt class="literal">Overview</tt> node, which is the
first "chapter":

<blockquote><pre class="code">@c    Node,     Next,    Previous, Up 
@node Overview, Invoking,        , Top 
@chapter Overview of @code{vacuum} 
 
@cindex Nothingness 
@cindex Overview 
@cindex Vacuum cleaners 
 
A @code{vacuum} is a space entirely devoid of all matter. That means no 
air, no empty beer cans, no dust, no nothing. Vacuums are usually found
<?troff .ne 10?> 
in outer space. A vacuum cleaner is a device used to clean a vacuum. 
See @xref{Invoking} for information on running @code{vacuum}.</pre></blockquote>

The next node for <tt class="literal">Overview</tt> is <tt class="literal">Invoking</tt>, which is the second "chapter"
node and also the node to appear after <tt class="literal">Overview</tt> in the menu. Note that
you can use just about any structure for your Texinfo documents; however, it
is often useful to organize them so that nodes resemble chapters, sections,
subsections, and so forth. It's up to you.</p>

<p>The <tt class="literal">@chapter</tt> command begins a chapter, which has 
effect only when formatting the source with TeX. Similarly, the 
<tt class="literal">@section</tt> and <tt class="literal">@subsection</tt> commands begin
(you guessed it) sections and subsections in the resulting TeX document.
The chapter (or section or subsection) name can be more descriptive than
the brief name used for the node itself.</p>

<p>You'll notice that the <tt class="literal">@code&#133;</tt> command is used 
in the chapter name. This is just one way to specify text to be emphasized
in some way. <tt class="literal">@code</tt> should be used for the names of commands, as 
well as source code that appears in a program. This causes the text
within the <tt class="literal">@code&#133;</tt> to be printed in constant-width
type in the TeX output, and enclosed in quotes (like <tt class="literal">`this'</tt>) in the
Info file.</p>

<p><a name="INDEX-2098" />
<a name="INDEX-2099" />
Following this are three <tt class="literal">@cindex</tt> commands, which produce
entries in the concept index at the end of the document. 
After this appears the actual text of the node. Again, <tt class="literal">@code</tt>
marks the name of the <tt class="literal">vacuum</tt> "command."</p>

<p>The <tt class="literal">@xref</tt> command produces a cross reference to another
node, which the reader can follow with the <tt class="literal">f</tt>
command in the Info reader.
<tt class="literal">@xref</tt> can also make cross references between other
Texinfo documents. See the Texinfo documentation for a complete
discussion.</p>

<p>Our next node is <tt class="literal">Invoking</tt>:
<blockquote><pre class="code">@node Invoking, Concept Index, Overview, Top  
@chapter Running @code{vacuum} 
 
@cindex Running @code{vacuum} 
@code{vacuum} is executed as follows: 
 
@example 
vacuum @var{options} @dots{} 
@end example</pre></blockquote>

Here, <tt class="literal">@example</tt>&#133;<tt class="literal">@end
example</tt> sets off an example.
Within the example, <tt class="literal">@var</tt> denotes a metavariable, 
a placeholder for a string provided by the user (in this case, the options
given to the <tt class="command">vacuum</tt> command).
<tt class="literal">@dots{}</tt> produces an ellipsis. The
example will appear as:
<blockquote><pre class="code">vacuum <em class="emphasis">options</em> &#133;</pre></blockquote>

<?troff .ne 10?>
in the TeX-formatted document, and as:
<blockquote><pre class="code">vacuum OPTIONS ...</pre></blockquote>

in the Info file. Commands such as <tt class="literal">@code</tt> and <tt class="literal">@var</tt> provide
emphasis that can be 
represented in different ways in the TeX and Info outputs.</p>

<p>Continuing the <tt class="literal">Invoking</tt> node, we have:
<blockquote><pre class="code">@cindex Options 
@cindex Arguments 
The following options are supported: 
 
@cindex Getting help 
@table @samp 
@item -help 
Print a summary of options. 
 
@item -version 
Print the version number for @code{vacuum}. 
 
@cindex Empty vacuums 
@item -empty  
Produce a particularly empty vacuum. This is the default. 
@end table</pre></blockquote>


Here, we have a table of the options <tt class="command">vacuum</tt> supposedly 
supports. The command <tt class="literal">@table @samp</tt> begins a two-column table
(which ends up looking more like a tagged list), where each item is
emphasized using the <tt class="literal">@samp</tt> command. <tt class="literal">@samp</tt> is similar to
<tt class="literal">@code</tt> and <tt class="literal">@var</tt>, except that it's meant to be used for 
literal input, such as command-line options.</p>

<p><a name="INDEX-2100" />
A normal Texinfo document would contain nodes for examples, information on
reporting bugs, and much more, but for brevity we're going to wrap up this
example with the final node, <tt class="literal">Concept Index</tt>. This is an index of
concepts presented in the document and is produced automatically with
the <tt class="literal">@printindex</tt> command:
<blockquote><pre class="code">@node Concept Index, , Invoking, Top 
@unnumbered Concept Index 
 
@printindex cp</pre></blockquote>

Here, <tt class="literal">@printindex cp</tt> tells the formatter to include the concept index
at this point. There are other types of indices as well, such as a function
index, command index, and so forth. All are generated with variants on the
<tt class="literal">@cindex</tt> and <tt class="literal">@printindex</tt> commands.</p>

<p>The final three lines of our Texinfo source are:
<blockquote><pre class="code">@shortcontents 
@contents 
@bye</pre></blockquote>

This instructs the formatter to produce a "summary" table of contents 
(<tt class="literal">@shortcontents</tt>), a full table of contents (<tt class="literal">@contents</tt>), and
to end formatting (<tt class="literal">@bye</tt>). <tt class="literal">@shortcontents</tt> produces a brief
table of contents that lists only chapters and appendices. In reality, only
long manuals would require <tt class="literal">@shortcontents</tt> in addition to
<tt class="literal">@contents</tt>.</p>
</div>


<div class="sect3">
<h3 class="sect3">9.3.3.2. Formatting Texinfo</h3>

<p><a name="INDEX-2101" />
<a name="INDEX-2102" /> To produce
an Info file from the Texinfo source, use the
<tt class="command">makeinfo</tt> command. (This command, along with the
other programs used to process Texinfo, are included in the Texinfo
software distribution, which is sometimes bundled with Emacs.) The
command:

<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>makeinfo vacuum.texi</b></tt></pre></blockquote>



produces <em class="filename">vacuum.info</em> from
<em class="filename">vacuum.texi</em>. <tt class="command">makeinfo</tt> uses the
output filename specified by the <tt class="literal">@setfilename</tt> in
the source; you can change this using the <span class="option">-o</span>
option.</p>

<p>If the resulting Info file is large, <tt class="command">makeinfo</tt>
splits it into a series of files named
<em class="filename">vacuum.info-1</em>,
<em class="filename">vacuum.info-2</em>, and so on, where
<em class="filename">vacuum.info</em> will be the top-level
file that points to the various split files. As long as all of the
<em class="filename">vacuum.info</em> files are in the same directory, the
Info reader should be able to find them.</p>

<p>You can also use the Emacs commands <tt class="literal">M-x
makeinfo-region</tt> and <tt class="literal">M-x makeinfo-buffer</tt>
to generate Info from the Texinfo source.</p>

<p>The Info file can now be viewed from within Emacs, using the
<tt class="literal">C-h i</tt> command. Within Emacs Info mode, you'll need
to use the <tt class="literal">g</tt> command and specify the complete path
to your Info file, as in:
<blockquote><pre class="code">Goto node: <tt class="userinput"><b>(/home/loomer/mdw/info/vacuum.info)Top</b></tt></pre></blockquote>

This is because Emacs usually looks for Info files only within its own
Info directory (which may be <em class="filename">/usr/local/emacs/info</em> on your system).</p>

<p>Another alternative is to use the Emacs-independent Info reader,
<tt class="command">info</tt>.  The command:

<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>info -f vacuum.info</b></tt></pre></blockquote>

invokes <tt class="command">info</tt>, reading your new Info file.</p>

<p>If you wish to install the new Info page for all users on your system,
you must add a link to it in the <em class="filename">dir</em> file in the Emacs
<em class="filename">info</em> directory. The Texinfo documentation describes how to do this
in detail.</p>

<p>To produce a printed document from the source, you need to have
TeX installed on your system. The Texinfo software comes with a TeX
macro file, <em class="filename">texinfo.tex</em>, which includes all of the macros used
by Texinfo for TeX formatting. If installed correctly, <em class="filename">texinfo.tex</em> 
should be in the TeX <em class="filename">inputs</em> directory on your system where
TeX can find it. If not, you can copy <em class="filename">texinfo.tex</em> to the directory
where your Texinfo files reside.</p>

<p>First, process the Texinfo file using TeX:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>tex vacuum.texi</b></tt></pre></blockquote>

This produces a slew of files in your directory, some of which are
associated with TeX, others to generate the index.
The <tt class="command">texindex</tt> command (which is included in the Texinfo package) 
reformats the index into something TeX can use. The
next command to issue is therefore:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>texindex vacuum.??</b></tt></pre></blockquote>

Using the <tt class="literal">??</tt> wildcard runs <tt class="command">texindex</tt> on all files in the
directory with two-letter extensions; these are the files produced by 
Texinfo for generating the index.</p>

<p>Finally, you need to reformat the Texinfo file using TeX, which
clears up cross references and includes the index:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>tex vacuum.texi</b></tt></pre></blockquote>

This should leave you with <em class="filename">vacuum.dvi</em>, a device-independent file
you can now view with <tt class="command">xdvi</tt> or convert into something printable.
See the section "TeX and LaTeX" earlier in the chapter for a 
discussion of how to print <em class="filename">.dvi</em> files.</p>

<p>As usual, there's much more to learn about this system. Texinfo has a 
complete set of Info pages of its own, which should be available in
your Info reader. Or, now that you know the basics, you could format the
Texinfo documentation sources yourself using TeX. The <em class="filename">.texi</em> sources
for the Texinfo documentation are found in the Texinfo source distribution.</p>

<a name="INDEX-2103" /><a name="INDEX-2104" />
</div>
</div>




<div class="sect2">
<h3 class="sect2">9.3.4. Word Processors</h3>

<p><a name="INDEX-2105" />
<a name="INDEX-2106" />
If you insist on a popular <span class="acronym">WYSIWYG</span> word-processing system, there are now quite a number of options
available. Lately, it was even rumoured that Microsoft is going to
port their office suite to Linux, but whether this is true remains to be
seen. A Microsoft suite is not really needed any longer anyway, because you can get
quite good word processors.</p>

<p><a name="INDEX-2107" />
<a name="INDEX-2108" />
One of the most powerful and popular
word processors in the United States, Corel WordPerfect, has been ported and 
is available from its current owner, Corel Inc. (see <a href="ch09_03.htm">Figure 9-3</a>). Many people have grown 
to like WordPerfect and will be delighted to hear that their word
processor of choice is available for Linux.</p>

<a name="x-100-3-fig-wordperfect" /><div class="figure"><img src="figs/rl3_0903.gif" alt="Figure 9-3" /></div>
<h4 class="objtitle">Figure 9-3. WordPerfect for Linux</h4><a name="x-100-3-fig-applix" />

<div class="figure"><img src="figs/rl3_0904.gif" alt="Figure 9-4" /></div>
<h4 class="objtitle">Figure 9-4. ApplixWare for Linux</h4><p>Another option is to use ApplixWare by Applix,
<a name="INDEX-2109" />
		Inc. ApplixWare 
is an
		office suite that is commercially made but inexpensive
		for Linux. It includes not only a word processor, but
		also a spreadsheet, a drawing program, a mail program, and
		other smaller tools. In some respects, ApplixWare behaves
		differently from word processors like Microsoft Word or
		WordPerfect, but once you get used to it, it can be quite
		useful and handy. Especially noteworthy is its support for
		importing and exporting FrameMaker documents.</p>

<p>The German software company Star Division is making its
<a name="INDEX-2110" />
		office productivity suite StarOffice available for free for
		private use on all supported platforms (which include
		Linux, Solaris, Windows, OS/2, and the Macintosh). If you don't
		mind the annoying registration procedure and the long
		download, you can get StarOffice from the Star Division web site at <a href="../../../../../../www.stardivision.com/">http://www.stardivision.com</a>. SuSE
		Linux and Caldera OpenLinux already include StarOffice, so
		you can avoid the 
		massive download if you already have a SuSE or Caldera
		distribution.</p>

<p>All those programs have one feature in common that many
		consider a key requirement for doing office-type work on
		Linux: they can import Microsoft Word documents quite
		well. While you may well decide, as a new Linux
		enthusiast, that you won't accept documents sent to you in
		proprietary formats, sometimes they come from your 
		boss, and you can't refuse to read them just because you are
		running Linux. In this case, it is good to know that there are 
		Linux-based solutions available.</p>

<p><a name="INDEX-2111" />
<a name="INDEX-2112" />
The LyX package (also available as KLyX with a more modern user
interface) is another alternative. It provides a decent 
<span class="acronym">WYSIWYG</span> X 
user interface that works with window managers from standard Linux
distributions and uses the LaTeX and TeX packages in order to format the
text for printing.  If you can live with the formatting limits of the LaTeX
package (most of us can), you may find that LyX/KLyX is an excellent
solution.  LyX/KLyX 
does not know how to display some of the powerful formatting features that
TeX provides, so if you are a TeX power user, this isn't for you.
LyX/KLyX isn't part of most Linux distributions; to try it you will have
to get it from a Linux archive.</p>

<a name="INDEX-2113" /><a name="INDEX-2114" /><a name="INDEX-2115" /><a name="INDEX-2116" /><a name="INDEX-2117" /><a name="INDEX-2118" />
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch09_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">9.2. The Emacs Editor</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">9.4. Graphics</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>