<?label 4.9. Saving Your Output?><html><head><title>Saving Your Output (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch04_10.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">4.9. Saving Your Output</h2>

<p><a name="INDEX-1068" />
<a name="INDEX-1069" />
<a name="INDEX-1070" />
System administrators (and other human beings too) see a lot of
critical messages fly by on the computer screen.  It's often important
to save these messages so you can scrutinize them later, or (all too
often) send them to a friend who can figure out what went wrong.  So,
in this section, we'll explain a little bit about redirection, a
powerful feature provided by Unix shells.  If you come from <span class="acronym">MS-DOS</span>,
you have probably seen a similar, but more limited, type of redirection.</p>

<p> <a name="INDEX-1071" />
<a name="INDEX-1072" />
If you put a greater-than sign (&gt;) and a filename after any command,
the output of the command will be sent to that file.  For instance, to
capture the output of <tt class="command">ls</tt>, you can enter:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>ls /usr/bin &gt; ~/Binaries</b></tt></pre></blockquote>

<p><a name="INDEX-1073" />
<a name="INDEX-1074" /> 
A listing of <em class="filename">/usr/bin</em> will be stored in your home
directory in a file named <em class="filename">Binaries</em>.  If
<em class="filename">Binaries</em> had already existed, the &gt; would wipe
out what was there and replace it with the output of the
<tt class="command">ls</tt> command.
 
 
Overwriting a current file is a common user error.  If your shell is
<tt class="command">csh</tt> or <tt class="command">tcsh</tt>, you can prevent
overwriting with the command:

<blockquote><pre class="code"><a name="INDEX-1075" />
$ <tt class="userinput"><b>set noclobber</b></tt></pre></blockquote></p>

<p>And in <tt class="command">bash</tt> you can achieve the same effect by entering:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>noclobber=1</b></tt>           It doesn't have to be 1; any value will have the same effect.</pre></blockquote>

<p><a name="INDEX-1076" />
<a name="INDEX-1077" />
<a name="INDEX-1078" />

Another (and perhaps more useful) way to prevent overwriting is to
append new output.  For instance, having saved a listing of
<em class="filename">/usr/bin</em>, suppose we now want to add the contents
of <em class="filename">/bin</em> to that file.  We can append it to the end of the
<em class="filename">Binaries</em> file by specifying two greater-than
signs:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>ls /bin &gt;&gt; ~/Binaries</b></tt></pre></blockquote>

<p>You will find the technique of output
redirection very useful when you are running a utility many times and saving
the output for troubleshooting.</p>

<p> 
 
 
Most Unix programs have two output streams.  One is
called the standard output, and the other is the standard error.  If
you're a C programmer you'll recognize these: the standard error is
the file named <em class="filename">stderr</em> to which you print messages.</p>

<p><a name="INDEX-1079" />
The &gt; character does not redirect the standard error.  It's
useful when you want to save legitimate output without mucking up a
file with error messages.  But what if the error messages are what you
want to save?  This is quite common during troubleshooting.
<a name="INDEX-1080" />
The solution is to use a greater-than sign followed by an ampersand.
(This construct works in almost every modern UNIX shell.)
It redirects both the standard output and the standard error.  For
instance:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>gcc invinitjig.c &gt;&amp; error-msg</b></tt></pre></blockquote>

<?troff .Nd 10?><p>This command saves all the messages from the <tt class="command">gcc</tt> compiler in a
file named <em class="filename">error-msg</em>.  (Of course, the object code is not saved
there.  It's stored in <em class="filename">invinitjig.o</em> as always.)  On the Bourne
shell and <tt class="command">bash</tt> you can also say it slightly differently:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>gcc invinitjig.c &amp;&gt; error-msg</b></tt></pre></blockquote>

<p><a name="INDEX-1081" />
Now let's get really fancy.  Suppose you want to save the error
messages but not the regular output--the standard error but not the
standard output.  In the Bourne-compatible shells you can do this by
entering the following:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>gcc invinitjig.c 2&gt; error-msg</b></tt></pre></blockquote>

<p>The shell arbitrarily assigns the number 1 to the standard output and
the number 2 to the standard error.  So the above command saves only
the standard error.</p>

<p><a name="INDEX-1082" />
<a name="INDEX-1083" />
<a name="INDEX-1084" />
 
Finally, suppose you want to throw away the standard
output--keep it from appearing on your screen.  The solution is
to redirect it to a special file called
<em class="filename">/dev/null</em>.  (You've heard people say things like
"Send your criticisms to /dev/null"?  Well, this is where
the phrase came from.)  The <em class="filename">/dev</em> directory is
where Unix systems store special files that refer
to terminals, tape drives, and other devices.  But
<em class="filename">/dev/null</em> is unique; it's a place you can send
things so that they disappear into a black hole.  For example, the
following command saves the standard error and throws away the
standard output:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>gcc invinitjig.c 2&gt;error-msg &gt;/dev/null</b></tt></pre></blockquote>

<p>So now you should be able to isolate exactly the output you want.</p>

<p><a name="INDEX-1085" />
<a name="INDEX-1086" /> 
<a name="INDEX-1087" /> 
In case you've wondered whether the less-than sign (<tt class="literal">&lt;</tt>) means anything to the
shell: yes, it does.  It causes commands to take their input from a
file.  But most commands allow you to specify input files on their
command lines anyway, so this "input redirection" is rarely
necessary.</p>

<p><a name="INDEX-1088" />
Sometimes you want one utility to operate on the output of another
utility.  For instance, you can use the <tt class="command">sort</tt> command to put
the output of other commands into a more useful order.  A crude way to
do this would be to save output from one command in a file, and then
run <tt class="command">sort</tt> on it.  For instance:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>du &gt; du_output</b></tt> 
$ <tt class="userinput"><b>sort -n du_output</b></tt></pre></blockquote>

<p> <a name="INDEX-1089" />
<a name="INDEX-1090" />
<a name="INDEX-1091" />
 
 
Unix provides a much more succinct and efficient way to do this
using a <em class="emphasis">pipe</em>.  Just place a vertical bar between the first command and
the second:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>du | sort -n</b></tt></pre></blockquote>

<p> 
The shell sends all the input from the <tt class="command">du</tt> program to the
<tt class="command">sort</tt> program.</p>

<?troff .Nd 10?><p> <a name="INDEX-1092" />
<a name="INDEX-1093" />
In the previous example, <tt class="command">du</tt> stands for "disk usage" and shows
how many blocks each file occupies under the current directory.
Normally, its output is in a somewhat random order:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>du</b></tt> 
10        ./zoneinfo/Australia 
13        ./zoneinfo/US 
9         ./zoneinfo/Canada 
4         ./zoneinfo/Mexico 
5         ./zoneinfo/Brazil 
3         ./zoneinfo/Chile 
20        ./zoneinfo/SystemV 
118       ./zoneinfo 
298       ./ghostscript/doc 
183       ./ghostscript/examples 
3289      ./ghostscript/fonts 
        . 
        . 
        .</pre></blockquote>

<p>So we have decided to run it through <tt class="command">sort</tt> with the
<span class="option">-n</span> and <span class="option">-r</span> options.  The <span class="option">-n</span> option means
"sort in numerical order" instead of the default ASCII sort, and the
<span class="option">-r</span> option means "reverse the usual order" so that the
highest number appears first.  The result is output that quickly shows
you which directories and files hog the most space:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>du | sort -rn</b></tt> 
34368     . 
16005     ./emacs 
16003     ./emacs/20.4 
13326     ./emacs/20.4/lisp 
4039      ./ghostscript 
3289      ./ghostscript/fonts 
        . 
        . 
        .</pre></blockquote>

<p>Since there are so many files, we had better use a second pipe to send
output through the <tt class="command">more</tt> command (one of the more common uses
of pipes):</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>du | sort -rn | more</b></tt> 
34368     . 
16005     ./emacs 
16003     ./emacs/20.4 
13326     ./emacs/20.4/lisp 
4039      ./ghostscript 
3289      ./ghostscript/fonts 
        . 
        . 
        .</pre></blockquote>

<a name="INDEX-1094" /><a name="INDEX-1095" /><a name="INDEX-1096" />


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch04_10.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">4.8. Filename Expansion</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">4.10. What Is a Command?</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>