<?label 12. Windows
 Compatibility
 and Samba?><html><head><title>Windows
 Compatibility
 and Samba (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h1 class="chapter">Chapter 12. Windows
 Compatibility
 and Samba</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch12_01.htm">Sharing Files</a><br />
<a href="ch12_02.htm">Sharing Programs</a><br /></p></div>

<p>Linux is a remarkably effective operating system that 
normally replaces <span class="acronym">MS-DOS</span>/Windows.  However, 
there are always those of us who want to have their cake and 
eat it, too.  We want to continue to use other operating 
systems as well as Linux, or at least to exchange files 
directly with them.  Linux satisfies such yearnings with 
internal enhancements that allow it to access foreign 
filesystems and act on their files, with compatibility 
utilities that allow it to invoke <span class="acronym">MS-DOS</span> to run
<span class="acronym">DOS</span> applications,  
or with a utility that allows Linux to run Xenix binaries without recompiling. The most outstanding tool for getting Linux and Windows to cooperate is Samba, which we'll discuss in enough depth to help you get a basic, functional server running.</p>

<p><a name="INDEX-2417" />
<a name="INDEX-2418" />
<a name="INDEX-2419" />
Samba is the package that lets you access Unix files and printers 
                from Windows, and it is one of the most famous
                Open Source programs of all. People have found that Unix
                servers running Samba can--depending on the
                circumstances--serve Windows computers faster than even 
                Windows servers can! In addition, Samba has proven to be very
                stable and reliable.</p>

<p>We use the term Windows somewhat generically in
this chapter to refer to any of the <span class="acronym">DOS</span>-based
operating systems coming from 
Microsoft or those compatible with them, like
<span class="acronym">MS-DOS</span>, <span class="acronym">PC-DOS</span>, and 
<span class="acronym">DR-DOS</span>/Novell <span class="acronym">DOS</span> (all with or
without Windows 3.x running on top of them), as well as the various
Windows versions themselves, no matter whether they build upon a
separate <span class="acronym">DOS</span> installation like the venerable
Windows 3.x or whether they have a <span class="acronym">DOS</span> kernel built
in like Windows 95 and Windows 98. It should be added that Windows
NT/2000 is a completely different animal; many of the things described 
here will not work with these, or will work differently. Your mileage
may vary.</p>

<p>Some of these utilities work well, while others are perhaps "not ready
for prime time." These tools allow many who otherwise
couldn't find out about Linux to try it out without first abandoning their
reliable working platform or without buying a second computer to play with.</p>

<p>You should be a little skeptical of some dreams of compatibility though.
Just because something can be done, doesn't mean it is a great idea.  As a 
practical matter, you might find, for example, that you need twice the disk 
storage in order to support two operating systems and their associated files and 
applications programs, plus file conversion and graphic-format conversion 
tools, and so on.  You may find that hardware tuned for one OS won't be tuned 
for the other, and you will have to choose where to spend your cash.</p>

<p><a name="INDEX-2420" />
If you find yourself stuck with a piece of hardware that you would
like to use because of its Windows support (like a
<span class="acronym">USB</span> device), but for which there are no Linux
drivers yet, do not despair.
The desire to have everything will probably continue to drive Linux 
developers, so we confidently expect that for each hardware device
that is supported on Windows, there will at one point
or other be a driver for Linux, too. For example, there is already
work going on with respect to <span class="acronym">USB</span>
devices; see <a href="../../../../../../video.komm.hdk-berlin.de/~rasca/uusbd-utils/">http://video.komm.hdk-berlin.de/~rasca/uusbd-utils/</a> 
for more information.</p>

<p>One of the first and foremost things you probably want to do with Linux and Windows is
install both of them on your computer and decide at boot time which
of the two you want to boot. The section "<a href="ch05_02.htm">Section 5.2, "Booting the System"</a>" in <a href="ch05_01.htm">Chapter 5, "Essential System Management"</a>, tells you what to do in order to 
get a multiboot system.</p>

<p>The next thing you will want to do is share files between
	Windows and Linux, a topic which we will explore in 
	the next section. You will find out that this
	works smoothly for most cases nowadays, if you know the
	tricks of the trade.</p>

<p>Finally, we cover tools that let you (at least partly) run
	some of your <span class="acronym">DOS</span> and Windows programs on
	Linux. We will be leaving the highway here and follow quite stony
	roads, but as always, those offer the most exciting sights.</p>

<div class="sect1"><a name="x-100-3-sec-windows-sharefiles" />
<h2 class="sect1">12.1. Sharing Files</h2>

<p><a name="INDEX-2421" />
<a name="INDEX-2422" />
<a name="INDEX-2423" />
<a name="INDEX-2424" />
<a name="INDEX-2425" />
When you install both Windows and Linux on
	  your computer, you will often wish you could access files on
	  one operating system that you saved with the other operating
	  system.
	  While there are
	  few, if any, ways to get at your Linux files from
	  Windows on the same machine, it is surprisingly
	  easy to access your Windows files from Linux.
	  Linux can read and write files on the
<a name="INDEX-2426" />
<a name="INDEX-2427" />
	  traditional <span class="acronym">FAT</span> filesystem and the newer
	  <span class="acronym">VFAT</span> filesystem, which was introduced with
	  Windows 95 and supports long
	  filenames. It can read (and eventually will be able to write
	  to) the <span class="acronym">NTFS</span> filesystem of Windows NT.</p>

<p>In some cases, it can be even easier to access your files
	  over the network using Samba. If you run Linux on one machine and a version
	  of Windows with built-in networking, like Windows 
	  for Workgroups or the newer Windows versions 95/98 and NT, you will probably be able to exchange files between
	  the two machines.</p>

<p>Getting at your data is only half the match, though. You
	  must also be able to make sense out of it. You might be
	  surprised to hear that you can have problems even with the simplest file format, raw
	  text--let alone more elaborate 
	  file formats like those saved by graphics programs or word
	  processors.</p>

<a name="x-100-3-sec-windows-ntfsvfat" /><div class="sect2">
<h3 class="sect2">12.1.1. Mounting DOS, VFAT, and NTFS Partitions</h3>

<p><a name="INDEX-2428" />
<a name="INDEX-2429" />
<a name="INDEX-2430" />
<a name="INDEX-2431" />
<a name="INDEX-2432" />
<a name="INDEX-2433" />
		
		If you have already read the section "<a href="ch06_01.htm">Section 6.1.2, "Mounting Filesystems"</a>" in <a href="ch06_01.htm">Chapter 6, "Managing
 Filesystems, Swap,
 and Devices"</a>,
 you know by now that
		you access partitions on local hard disks by
		"mounting" them into your directory hierarchy. In
		order to be able to read and write to a specific filesystem,
		the Linux kernel needs to have support for this filesystem.</p>

<p>In the section "<a href="ch07_04.htm">Section 7.4, "Building a New Kernel"</a>" in <a href="ch07_01.htm">Chapter 7, "Upgrading Software and the Kernel"</a>, you learned how to build your own kernel. In order to be able to
		access <span class="acronym">DOS</span> (used by
		<span class="acronym">MS-DOS</span> and Windows 3.x) and
		<span class="acronym">VFAT</span> (used by Windows 95 and Windows 98)
		partitions, you need to enable <tt class="literal">DOS FAT fs
		support</tt> in the <tt class="literal">filesystems</tt>
		section during kernel configuration. After you say
		yes to that option, you can choose <tt class="literal">MSDOS fs support</tt> and
		<tt class="literal">VFAT (Windows-95) fs support</tt>. The first
		lets you mount <span class="acronym">FAT</span> partitions and the
		second lets you mount <span class="acronym">VFAT</span>
		partitions. <span class="acronym">VFAT</span> support is
		relatively recent; it appeared first in kernel Version
		2.0.34, but really became stable only with recent kernel
		versions.</p>

<p>While Linux is running, you can then mount a Windows partition
like any other type of partition. If, for example, the third partition on 
		your first
		<span class="acronym">SCSI</span> hard disk contains your Windows 98
		installation, you can make those files accessible with the
		following command, which must be executed as <b class="emphasis-bold">root</b>:</p>

<?troff-ps_indent0?><blockquote><pre class="code">mount -t vfat /dev/sda3 /mnt/windows98</pre></blockquote>

<p><a name="INDEX-2434" />
The <tt class="command">/dev/sda3</tt> option specifies the disk
        drive corresponding to the Windows 98 disk, while the
        <tt class="command">/mnt/windows98</tt> option can be changed to any
        directory you've created for the purpose of accessing the
        files. But how do you know that you need--in this
        case--<em class="filename">/dev/sda3</em> ? If you're familiar
        with the arcane naming conventions for Linux filesystems (shown in <a href="ch03_01.htm">Table 3-1</a>), you'll
        know that <em class="filename">sda3</em> is the third partition on
        the first <span class="acronym">SCSI</span> hard disk, but you'll find
        life easier if you write down the partitions while you are
        creating them with <tt class="command">fdisk</tt>.</p>

<p>Of course, you are free to choose other mount points than 
		<em class="filename">/mnt/windows98</em>. If you want to
		mount a <span class="acronym">FAT</span> partition, you do the same, but 
		replace <tt class="literal">vfat</tt> with <tt class="literal">msdos</tt> 
		in the previous command.</p>

<p>Both the <tt class="literal">msdos</tt> and the
		<tt class="literal">vfat</tt> filesystem driver support a number of
		options that can be specified with the
		<tt class="literal">-o</tt> option of the
		<tt class="command">mount</tt> command, but in most cases, you will
		not need them. The man page tells you all the options. There are, however, two options that
<a name="INDEX-2435" />
		might be useful for you: <tt class="command">check</tt> and
<a name="INDEX-2436" />
		<tt class="command">conv</tt>.</p>

<p>The option <tt class="command">check</tt> determines whether
		the kernel should accept filenames that are not permissible on
		<span class="acronym">MS-DOS</span> and what it should do with
		them. Obviously, this applies only to creating and renaming
		files. You can specify three values for
		<tt class="command">check</tt>: <tt class="literal">relaxed</tt> lets you
		do just about everything with the filename. If it does not fit into 
		the 8.3 convention of
		<span class="acronym">MS-DOS</span> files, the filename will be
		truncated accordingly. <tt class="literal">normal</tt>, the default, 
		will also truncate the filenames as needed, but not accept
		special characters like <tt class="literal">*</tt> and
		<tt class="literal">?</tt> that are not allowed in
		<span class="acronym">MS-DOS</span> filenames. Finally,
		<tt class="literal">strict</tt> forbids both long filenames and the 
		special characters. In order to make Linux more restrictive with
		respect to filenames on the partition mounted above, the
		<tt class="command">mount</tt> command could be used as follows:</p>

<blockquote><pre class="code">mount -o check=strict -t msdos /dev/sda5 /mnt/dos</pre></blockquote>

<p>Obviously, the restrictions of the
		filename length do not apply to <tt class="literal">vfat</tt>
		filesystems.</p>

<p>The second option that is potentially useful, but not
		quite ready for most users is
		<tt class="command">conv</tt>. Windows and Unix
		systems have different conventions for how a line end is marked in
		text files. Windows uses both a carriage return 
		and a linefeed character, while Unix only uses the
		linefeed. While this does not make the files completely
		illegible on the other system, it can still be a bother. To
		tell the kernel to perform the conversion between
		Windows and Unix text file styles
		automatically, you need to pass the <tt class="command">mount</tt>
		command the option
		<tt class="command">conv</tt>. <tt class="command">conv</tt> has three
		possible values: <tt class="literal">binary</tt>, the default, does
		not perform any conversion; <tt class="literal">text</tt> converts
		every file; and <tt class="literal">auto</tt> tries to guess 
		whether the file in question is a text file or a binary
		file. Auto does this by looking at the filename extension. If
		this extension is included in the list of "known binary
		extensions," it is not converted, otherwise it will be
		converted.</p>

<p>
<img src="figs/bomb.gif">&nbsp;&nbsp;It is not advisable to use <tt class="command">text</tt>,
		because this will invariable damage any binary files,
		including graphics files and files written by word processors, 
		spreadsheets and other programs. Likewise,
		<tt class="command">auto</tt> can be dangerous, because the
		extension-based detection mechanism is not very
		sophisticated. So we'd suggest you don't use the option. Stick with
		<tt class="command">binary</tt> (the default) and convert your files 
		on an as-needed basis.</p>

<p>If you want to access files on a Windows NT partition
		that carries an <span class="acronym">NTFS</span> filesystem, you need
		another driver. Activate the option <tt class="literal">NTFS filesystem
		support</tt> during the kernel configuration. This lets
		you mount <span class="acronym">NTFS</span> partitions by specifying the 
		file system type <tt class="literal">ntfs</tt>. Note, however, that
		the current <span class="acronym">NTFS</span> driver supports just
		read-only access. There is an alpha version of a driver
		available that supports writing as well, and so far, it has
		worked for us quite nicely, but <em class="emphasis">we do not advise using this without backing up your <span class="acronym">NTFS</span>
		partition first!</em></p>

<a name="INDEX-2437" /><a name="INDEX-2438" /><a name="INDEX-2439" /><a name="INDEX-2440" /><a name="INDEX-2441" /><a name="INDEX-2442" />
</div>




<a name="x-100-3-sec-windows-smbmount" /><div class="sect2">
<h3 class="sect2">12.1.2. Using Samba to Mount Directories from Windows
		Systems on Your Network</h3>

<p>So far, we have covered how to access
<a name="INDEX-2443" />
<a name="INDEX-2444" />
<a name="INDEX-2445" />
<a name="INDEX-2446" />
		Windows partitions on the same machine. In this 
		section, we will extend this discussion to partitions (which
		in this context are often called <em class="firstterm">shares</em>)
		that reside on other servers. In Windows versions,
		starting with
		Windows for Workgroups, you can make directories or
		printers accessible for other computers. The protocol
<a name="INDEX-2447" />
<a name="INDEX-2448" />
		used for this feature is called <span class="acronym">SMB</span> (Server 
		Message Block). With the <span class="acronym">SMB</span> support in
		Linux, you can access these directories from Linux. Note that
		the Windows machines must be configured to use TCP/IP in addition to or instead 
<a name="INDEX-2449" />
		of the native Windows protocol NETBEUI, because the Linux
		<span class="acronym">SMB</span> support does not include NETBEUI. Of course,
		your Linux machine must be set up for
		
		<span class="acronym">TCP/IP</span> networking as well; see <a href="ch15_01.htm">Chapter 15, "TCP/IP and PPP"</a>, to learn how to do that. For now,
		we will assume that a <span class="acronym">TCP/IP</span>
		connection can be established between your Linux and your
		Windows computer.</p>

<p><a name="INDEX-2450" />
<a name="INDEX-2451" />
<a name="INDEX-2452" />
<a name="INDEX-2453" />
In this section, we cover sharing in one direction: how to access
files on Windows systems from Linux. The next section
will show you how to do the reverse, and make selected files on your
Linux system available to people on Windows systems.</p>

<p> In order to get <span class="acronym">SMB</span> support
		running, you have to follow these steps:</p>

<ol><li><p>Compile support for <span class="acronym">SMB</span> into your 
			kernel.</p></li><li><p>Install Samba (described in the next
			section) and create at least a minimal configuration
			file.</p></li><li><p>Mount the services with the
<a name="INDEX-2454" />
			<tt class="command">smbmount</tt> command.</p></li></ol><p>Let's go through these steps one at a time. The
		first one is easy: In the <tt class="literal">filesystems/Network
		File Systems</tt> section during kernel configuration,
		select <tt class="literal">SMB file system support (to mount WfW shares
		etc.)</tt>. Compile and install your kernel, or install
		and load the module. If you plan to mount shares from a
		Windows 95 server, you should also select
		<tt class="literal">SMB Win95 bug work-around</tt>, which works
		around in bug in showing directories on a Windows 95
		share. You don't need this if you are accessing shares only on 
		a Windows 98 or Windows NT machine and should leave it off
		in this case because it slows down directory reading.</p>

<p><a name="INDEX-2455" />
<a name="INDEX-2456" />
Next, you will need to install the Samba package. This
		package is meant for providing (not accessing) SMB shares, but 
		its package contains one utility program and one configuration file
		you will need. If you do not have it on your machine
		(check whether the file
<a name="INDEX-2457" />
<a name="INDEX-2458" />
		<em class="filename">/etc/smb.conf</em> exists), please
		read the next section to learn how to get it.</p>

<p>You will learn about how to write the configuration file 
		<em class="filename">/etc/smb.conf</em> in the
		next section, but for our purposes here, it suffices to
		have the following content:</p>

<blockquote><pre class="code">[global]
socket options = TCP_NODELAY</pre></blockquote>

<?troff .hw para-meter?><p>There may be other configuration parameters in the
		<tt class="literal">[global]</tt> section; this parameter does
		not need to be the first. If you already have a
		<em class="filename">smb.conf</em>, there can be other socket
		options too. Don't let yourself be bothered by that; just make sure
		that you have the <tt class="literal">TCP_NODELAY</tt> option, as 
		this speeds up directory reading a lot.</p>

<p>The last thing to do is to mount the partition
		(which in the Windows world is called a
<a name="INDEX-2459" />
<a name="INDEX-2460" />
<a name="INDEX-2461" />
		<em class="emphasis">share</em>). Unlike the partition types described in the last
		section and unlike the Network File System, you do not use the familiar
		<tt class="command">mount</tt> command, but a special command from
		the Samba package called <tt class="command">smbmount</tt>. This is
		because <span class="acronym">SMB</span> shares have a different
		addressing scheme. Accordingly, you use
		<tt class="command">smbumount</tt> for unmounting an
		<span class="acronym">SMB</span> share.</p>

<?troff .hw parameter?><p>If you are lucky, using <tt class="command">smbmount</tt> can
		be quite easy. The general format is:</p>

<blockquote><pre class="code">smbmount <em class="replaceable">options</em> <em class="replaceable">servicename</em> <em class="replaceable">mount_point</em></pre></blockquote>

<p>where <em class="replaceable">mount_point</em>
		specifies a directory just as in the <tt class="command">mount</tt>
		command. <em class="replaceable">servicename</em> follows more or
		less the Windows naming conventions, except that it replaces
		the backslashes with slashes. For example, if you want to
		mount a <span class="acronym">SMB</span> share from the computer called
		<b class="emphasis-bold">winloser</b> that is exported under the name
		<em class="filename">mydocs</em> onto the directory
		<em class="filename">/windocs</em>, you could use the following 
		command:</p>

<blockquote><pre class="code">tigger# <tt class="userinput"><b>smbmount //winloser/mydocs/ /windocs</b></tt></pre></blockquote>

<p>You can also specify a directory below the exported root 
		if you want to mount only a part of the share. For
		example, suppose we didn't want to share everything in
		the <em class="filename">mydocs</em> directory of the
		previous example, but just a subdirectory under it
		called <em class="filename">htmldocs</em>. We could say:
		<blockquote><pre class="code">tigger# <tt class="userinput"><b>smbmount //winloser/mydocs/htmldocs /windocs</b></tt></pre></blockquote>

<a name="INDEX-2462" />
		If a password is needed to access the share,
		<tt class="command">smbmount</tt> will ask you for it.</p>

<p>As we previously wrote, if you are lucky, the preceding steps could be
		everything you need. But if you are unlucky, things could
		get messy here. If you do not know much about how
		Windows computers handle networking, you might want to seek
		help from the person who has set up the Windows
		machine where the
		files that you are trying to access are.</p>

<p>The most common problem is that in the
		<span class="acronym">SMB</span> protocol, machines can have two
<a name="INDEX-2463" />
		different hostnames: the normal hostname and a NetBIOS
		name. While having two names might not be a good idea anyway, you
		will not be able to simply mount a <span class="acronym">SMB</span>
		share with the previous commands if the two differ. If you know
		the NetBIOS name, you can pass it with the
		<tt class="command">-s</tt> option:</p>

<blockquote><pre class="code">tigger#<tt class="userinput"><b>smbmount -s nbname //winloser/mydocs/ /windocs</b></tt></pre></blockquote>

<p>Another thing to try is to tell
		<tt class="command">smbmount</tt> about the IP address of the
		machine exporting the <span class="acronym">SMB</span> share. This is
		done with the <tt class="literal">-I</tt> option (see <a href="ch15_01.htm">Chapter 15, "TCP/IP and PPP"</a> to learn about IP addresses). If
		the server has the IP address 192.168.0.5,
		you could try the following command:</p>

<blockquote><pre class="code">tigger# smbmount<tt class="userinput"><b> -I 192.168.0.5 //winloser/mydocs/ /windocs</b></tt></pre></blockquote>

<p>Please see the manual 
		page for <tt class="command">smbmount</tt> for further
		tricks to try.</p>

<p>One problem with the <tt class="command">smbmount</tt> command 
		is that is does not really tell you what went
<a name="INDEX-2464" />
		wrong. For hints on what the problem is, try the utility program
		<tt class="command">smbclient</tt>, which also comes from the Samba
		package. <tt class="command">smbclient</tt> lets you copy files to
		and from a <span class="acronym">SMB</span> share and list its directory 
		contents, and it has the advantage of providing a little more
		detailed error messages. See the
		manual page for <tt class="command">smbclient</tt> for further
		details. If you can access a
		<span class="acronym">SMB</span> share with
		<tt class="command">smbclient</tt>, but not with
		<tt class="command">smbmount</tt>, it is very likely that either
		<span class="acronym">SMB</span> support is not available in the kernel
		or that the mount point cannot be accessed, that is, that the
		problem has nothing to do with the network.</p>

<a name="INDEX-2465" /><a name="INDEX-2466" /><a name="INDEX-2467" /><a name="INDEX-2468" />
</div>




<a name="x-100-3-sec-windows-samba" /><div class="sect2">
<h3 class="sect2">12.1.3. Using Samba to Serve SMB Shares</h3>

<p> You probably want to access Linux files from
<a name="INDEX-2469" />
<a name="INDEX-2470" />
<a name="INDEX-2471" />
<a name="INDEX-2472" />
<a name="INDEX-2473" />
                Windows, in addition to accessing Windows files from
                Linux as we did in the previous section. 
For instance,
                a safe and popular networking strategy is to locate user's critical files
                in Unix home directories and serve them up to the
                users on their PCs.</p>

<p>A warning before you plunge into the wonderful
<a name="INDEX-2474" />
                world of Samba: NetBIOS, the underlying protocol for
                <span class="acronym">SMB</span>, is quite complex, and because Samba has
                to deal with all those complexities, it provides a huge
                number of configuration options. Thus, if you are really
                serious about serving a department of 50 employees that use all
                kinds of Windows and perhaps even OS/2 machines, you are
                well advised to read the Samba documentation thoroughly and
                perhaps even read a good book about Samba.</p>

<p>That being said, I can reassure you that for the
                not-so-complex cases, setting up Samba is surprisingly easy,
                both as a file and as a print server. In addition, there is a
                small tool that helps you check your configuration file for 
                errors.</p>

<p>Setting up Samba involves the following steps:</p>

<ol><li><p>Compile and install the Samba programs if they are
                        not already present on your system.</p></li><li><p>Write the Samba configuration file
                        <em class="filename">smb.conf</em> and check it for
                        correctness.</p></li><li><p>Start the two Samba daemons <tt class="command">smbd</tt>
                        and <tt class="command">nmdb</tt>.</p></li></ol><p>If you successfully set up your system, the
                directories you select will appear in the browse lists
                of the Windows users on your local
                network--normally accessed by clicking on the
                Network Neighborhood icon on Windows.  The users on
                those systems will be able to read and write files
                according to your security settings just as they do on
                their local systems.</p>

<div class="sect3">
<h3 class="sect3">12.1.3.1. Installing Samba</h3>

<p>Most Linux distributions nowadays contain
<a name="INDEX-2475" />
<a name="INDEX-2476" />
                Samba, and you can install it simply by choosing an
                option when installing Linux. If your distribution
                doesn't have Samba, you can get it from ftp://ftp.samba.org. 
                It comes with installation instructions. Follow those
                instructions and build the package. During the configuration,
                you will have to decide where the configuration file
<a name="INDEX-2477" />
<a name="INDEX-2478" />
                <em class="filename">smb.conf</em> should reside. We will assume
                here that you pick
                <em class="filename">/etc/smb.conf</em>. If you choose a
                different location, you will have to substitute that location
                in the following description.</p>

<p>The next step is to create a
                <em class="filename">smb.conf</em> file that is suitable for your
                system. There are graphical configuration tools available for
                Samba, including the nifty, web-based SWAT (Samba Web
                Administration Tool), but as always,
                it's good to know what goes on under the hood in case the
                graphical configuration tools get things wrong.</p>

<p> Samba comes
                with several sample configuration files 
                that you can simply take and adapt to your situation. But it
                is not difficult to write one from scratch, either. In this
                section, we will assume that you want to provide your
                unfortunate Windows colleagues with the home
                directories of your machine, your printers, and a
                <span class="acronym">CD-ROM</span> drive mounted on
                <em class="filename">/cdrom</em>--a quite common setup.</p>

<p>The format of the <em class="filename">smb.conf</em> file is
                like the one used by Windows 3.x: there are entries of the type:</p>

<blockquote><pre class="code"><em class="replaceable">key</em> = <em class="replaceable">value</em></pre></blockquote>

<p>which are put into groups. A group starts with a
                line like the following:</p>

<blockquote><pre class="code">[<em class="replaceable">groupname</em>]</pre></blockquote>

<p>Each directory or printer you share is called a
                <em class="firstterm">service</em> in Windows networking
                terminology. You can specify each service as a
                separate group name, but we'll show you some ways to
                simplify the configuration file and support lots of
<a name="INDEX-2479" />
                services in a few lines. One special group called
                <tt class="literal">[global]</tt> contains parameters 
                that apply to all services. While Samba literally understands
                hundreds of parameters (keys), it is very likely that you will 
                need to use only a few of them, because most of them have
                reasonable defaults. If you are curious which keys are
                available or are looking for a special parameter, you can check
                the manual page <em class="filename">smb.conf</em>.</p>

<p>For starters, we will now create a minimal
                <em class="filename">smb.conf</em> that looks as follows:</p>

<blockquote><pre class="code">workgroup = <em class="replaceable">your workgroup</em>

[homes]
guest ok = no
read only = no</pre></blockquote>

<p>This does not do much yet, but it serves two purposes: 
                You can check your Samba installation, and you can get used to 
<a name="INDEX-2480" />
                a test tool called <tt class="command">testparm</tt> that is used to 
                check the validity of your <em class="filename">smb.conf</em>
                file.</p>

<p>We assume here that you have already started the Samba
                daemons as described later. If your distribution contains
                Samba, and you have opted to install it during the
                installation, this might already have been done for
                you.</p>

<p>You can now test your Samba installation by
                issuing a command like the following (replace
                <tt class="literal">TIGGER</tt> with the hostname of your
                computer in capitals):
<a name="INDEX-2481" /></p>

<blockquote><pre class="code">tigger# <tt class="userinput"><b>nmblookup TIGGER</b></tt>
Added interface ip=192.168.0.3 bcast=192.168.0.255 nmask=255.255.255.0
Sending queries to 192.168.0.255
192.168.0.3 TIGGER</pre></blockquote>

<p>You should get an
                output similar to the previous example. If you don't get it, here are
                some things to check:</p>

<ul><li><p>Check whether Samba can find your
                        <em class="filename">smb.conf</em> file. If you installed Samba
                        during the installation of your Linux system, you should
                        check the documentation of your
                        distribution for the location where
                        the Samba package is looking
                        for its configuration file. A common place is
                        <em class="filename">/etc/smb.conf</em>, but others are
                        possible as well. If you have compiled Samba
                        yourself, you might have specified during the configuration
                        where Samba should look for
                        <em class="filename">smb.conf</em> and hopefully remember this
                        location now. If you did not make any changes to the
                        setup files while building and installing Samba,
                        the configuration file is being searched for in
                        <em class="filename">/usr/local/samba/lib/smb.conf</em>.</p></li><li><p><a name="INDEX-2482" />
Check whether <tt class="command">smbd</tt> and (more
                        important for this test) <tt class="command">nmbd</tt> are in
                        fact running.</p></li><li><p>Samba might not have autodetected the network
                        interface to use. Try adding a line like:</p>

<blockquote><pre class="code">interfaces = <em class="replaceable">your IP address</em></pre></blockquote>

<p>to your <em class="filename">smb.conf</em> file to tell
                        Samba explicitly which interface to use.</p></li><li><p><a name="INDEX-2483" />
<tt class="command">nmbd</tt> might not be able to find
                        out the NetBIOS name (which by default is the hostname in
                        capitals). You can try stopping your
                        <tt class="command">nmbd</tt> and restarting it with the option
                        <tt class="literal">-n</tt>, followed by the NetBIOS
                        name.</p></li></ul><p>Once you see a successful result from the
<tt class="command">nmblookup</tt> command, you can start to explore what
you get from the sample <em class="filename">smb.conf</em> file we
shipped. Short as it is, it's sophisticated enough to let Samba serve
home directories. Check the service
<a name="INDEX-2484" />
                with the command <tt class="command">smbclient</tt>, which is like a
                small FTP client for SMB servers. Try the
                following (replacing <tt class="literal">TIGGER</tt> with your
                hostname in capitals and <tt class="literal">kalle</tt> with your
                user name):</p>

<blockquote><pre class="code">tigger$ <tt class="userinput"><b>smbclient \\\\TIGGER\\kalle</b></tt>
Added interface ip=192.168.0.3 bcast=192.168.0.255 nmask=255.255.255.0
Server time is Thu Mar 11 23:49:53 1999
Timezone is UTC+1.0
Password:
Domain=[THE TIGERS] OS=[Unix] Server=[Samba 1.9.16p10]
smb: \&gt;</pre></blockquote>

<p>Samba asks for your password and then "logs
                you in" to your home directory. Since that's probably
                where you issued the <tt class="command">smbclient</tt> command from 
                anyway, you have not gained much, but now you know that your
                Samba installation really works, and you can continue tuning
                your installation.</p>

<p>The program <tt class="command">testparm</tt>,
<a name="INDEX-2485" />
                checks your <em class="filename">smb.conf</em> for errors and 
                inconsistencies. A run should look roughly as follows:</p>

<blockquote><pre class="code">tigger$ <tt class="userinput"><b>testparm</b></tt>
Load smb config files from /etc/smb.conf
Processing section "[homes]"
Loaded services file OK.
Press enter to see a dump of your service definitions</pre></blockquote>

<p><tt class="command">testparm</tt> tells you where it is
                looking for the configuration file, which services it has
                found, and whether it has found any errors in the configuration 
                file. If it does not report <tt class="literal">Loaded services file
                OK.</tt>, it will tell you the errors so that you can
                correct them and try again.</p>

<p>After succeeding in reading the configuration file, <tt class="command">testparm</tt> offers
                to show you all service definitions. This is a lengthy list of 
                all services defined together with all their parameters, not
                only the parameters you specified, but also those that are
                defaulted. Since the output can be very, very long, we won't
                bother repeating it here, but it can be very useful for you to 
                check whether the parameters are really as you expect
                them to be.</p>

<a name="INDEX-2486" /><a name="INDEX-2487" />
</div>


<div class="sect3">
<h3 class="sect3">12.1.3.2. Configuring Samba</h3>

<p>Now that you have a rudimentary Samba installation, we
<a name="INDEX-2488" />
<a name="INDEX-2489" />
                can look at a more full-blown
                <em class="filename">smb.conf</em>:</p>

<blockquote><pre class="code">[global]
   workgroup = The tigers
   guest account = nobody
   keep alive = 30
   printing = bsd
   printcap name = /etc/printcap
   load printers = yes
   print command = /usr/bin/lpr -r -P%p %s
   lpq command = /usr/bin/lpq -P%p
   lprm command = /usr/bin/lprm -P%p %j
   preserve case = yes
   short preserve case = yes
   case sensitive = no

[homes]
   comment = Home directory
   browseable = yes
   read only = no
   create mode = 0750

[usr]
   comment = /usr
   browseable = yes
   read only = no
   create mode = 0750
   directory = /usr

[cdrom]
   comment = Linux CD-ROM
   path = /cdrom
   read only = yes
   locking = no

[printers]
   comment = All Printers
   browseable = yes
   printable = yes
   public = no
   read only = yes
   create mode = 0700
   directory = /tmp</pre></blockquote>

<p>We will not cover every single line here, but go through 
                everything that is important for you to set up your own Samba
                server.</p>

<p>First, you need to know that there are three sections
                that are special: <tt class="literal">[global]</tt>,
                <tt class="literal">[homes]</tt>, and
                <tt class="literal">[printers]</tt>. Samba treats
                those sections slightly differently from the
                others. The section <tt class="literal">[global]</tt>
                contains parameters that apply to all services. For example,
                <tt class="literal">workgroup</tt> specifies the workgroup the Samba 
                server is supposed to be in. If you have Windows networking
                experience, you might already know that in Windows
                networking, all computers belong to a certain workgroup and
                can access services only from computers in the same
                workgroup. Therefore, you have to
                make sure that you enter the same workgroup here as the one
                you entered on your Windows machines.</p>

<p><tt class="literal">guest account</tt> is important only if
                you allow guest access to services. A guest is
anyone on your network who has no account on your system; you may want
to provide a special directory for them in the same way that some
sites provide anonymous FTP access. In this case,
                the account specified here will provide the rights for the
<a name="INDEX-2490" />
<a name="INDEX-2491" />
                guest. <tt class="literal">keep alive</tt> specifies the interval in 
                which the server checks whether a client connected to it is
                still alive and responding. This value can be between 0 (no
                checks) and 60 seconds. If your network is reliable enough,
                you can afford to set this to 0.</p>

<p>For now, we'll skip a few parameters that apply
<a name="INDEX-2492" />
<a name="INDEX-2493" />
                to printing services and cover them later. <tt class="literal">preserve case</tt>,
                <tt class="literal">short preserve case</tt>, and <tt class="literal">case
                sensitive</tt> specify how Samba should handle the fact
                that filenames on Unix systems are case sensitive while those
                on Windows are case insensitive. The settings shown in the previous example have 
                proven very useful when you want to read and write files
                from both Unix and Windows, because they keep the case when
                saving (by default, everything would be saved with lowercase
                characters), but when looking for a file, matching is done
                without regard to case, as expected by Windows.</p>

<p>The following sections describe services that the
                Samba server provides to its clients. We'll start with
                <tt class="literal">[usr]</tt> and
                <tt class="literal">[cdrom]</tt> here, because
                those are straightforward entries applying to
                individual services. (<tt class="literal">[homes]</tt>
                and <tt class="literal">[printers]</tt> are
                special cases covering a number of services).</p>

<p>The 
                group <tt class="literal">[usr]</tt> makes a directory
                available to Windows. In this case, the directory is named
                <em class="filename">/usr</em>, but naming the service
                after the directory is just an administrative
                convenience. Because the service is named
<tt class="literal">usr</tt>, it will show up in the users'
<a name="INDEX-2494" />
browse lists (Network Neighborhood) that way.  You could also have named the service
                <tt class="literal">clinton</tt> by describing it in the group
                <tt class="literal">[clinton]</tt>, but  in
                that case the service would be announced as
                <tt class="literal">clinton</tt> to the clients in the
                Network Neighborhood window.</p>

<p>To make sure our share is visible in the
                browse list, we have set the value of the
                <tt class="literal">browsable</tt> parameter to
                <tt class="literal">yes</tt>. If we had not set
                this, you could still access the service, but you would have
                to know what it is called and could not access it via the
                browse list. <tt class="literal">read only</tt> specifies, of course,
                whether the clients may write to the directory tree provided
                by this service. Note that even if this value is
                <tt class="literal">no</tt>, users still need the usual Unix
<a name="INDEX-2495" />
                permissions to be able to read and write anything from that
                service. <tt class="literal">create mode</tt> specifies the
                permissions that files newly created by a client on this
                service will get. <tt class="literal">directory</tt> specifies
                the root of the directory tree to be exported by
                this service. Note that whether it is useful to export
                <tt class="literal">/usr</tt> to Windows machines depends on
                what you have stored there. If you keep only Linux programs
                and their utility files there, this is not useful, of
                course. Finally, <tt class="literal">comment</tt> specifies a string 
                that is shown in the Properties dialog in
                Windows or in the detail view.</p>

<p><a name="INDEX-2496" />
The service <tt class="literal">cdrom</tt> makes the Linux
                <span class="acronym">CD-ROM</span> drive accessible to Windows
                clients. It has about the same format as
                <tt class="literal">usr</tt>, but of course specifies <tt class="literal">read
                only = yes</tt>, because you cannot write to a
                <span class="acronym">CD-ROM</span>. <tt class="literal">locking = no</tt>
                means that Samba will not use locks to prevent one
                user from overwriting the files of another user; in
                this case the value makes sense because nobody can 
                write to a <span class="acronym">CD-ROM</span> and locking
                wastes time.</p>

<p>Now let's go to the more interesting sections. The section
                <tt class="literal">[homes]</tt> is special, because it
                does not describe a single service but a number of
                possible services. Use it to give each of your users a
                directory of his own that can be accessed from
                Windows systems on your LAN.</p>

<p>Each user to whom you want to offer a directory
                should have an account on your system; to make
                configuration easy, make the account name and the home
                directory the same as the login name the user has on
                the Windows network. All you need after that is a
                properly configured Samba with a
                <tt class="literal">[homes]</tt> section like the
                one shown in our example.</p>

<p>Whenever a user on a Windows client connects to
                the service, Samba checks the user name and asks for the
                password (which is then entered in a Windows dialog) and
                provides the home directory of the user. Thus, when a
                connection is set up, Samba creates a so-called
<a name="INDEX-2497" />
<a name="INDEX-2498" />
                <em class="emphasis">virtual service</em> for the home directory of 
                the user in question. This is very useful, because you do not
                have to tell Samba explicitly about new users when you add them
                to your Unix system: once a user account is created and has a home
                directory, the user can access this home directory from
                Windows.</p>

<p><a name="INDEX-2499" />
This leaves us with the printing services. You can
                configure each printer that is configured on your Linux box
                separately, but in general, it is much easier to use the
                <tt class="literal">[printers]</tt> section. Just as
                <tt class="literal">[homes]</tt> specifies a number of
                file access services (each home directory),
                <tt class="literal">[printers]</tt> specifies a number of
                printing services: access is allowed to each printer configured in
<a name="INDEX-2500" />
<a name="INDEX-2501" />
                <em class="filename">/etc/printcap</em>. As
                explained in "<a href="ch08_04.htm">Section 8.4, "Managing Print Services"</a>" in <a href="ch08_01.htm">Chapter 8, "Other
 Administrative
 Tasks"</a>, the
                <em class="filename">printcap</em> file lists all the
                printers on your system and how they are accessed.</p>

<p>                For the <tt class="literal">[printers]</tt> section to work,
                you need to set <tt class="literal">load printers = yes</tt> in the
                <tt class="literal">[global]</tt> section, which tells Samba to read
                <em class="filename">/etc/printcap</em> to see which
                printers are available. Other important values in the global
                section with respect to printing are
                <tt class="literal">printing</tt>, which specifies the type of
                printer service your Linux box uses (normally
                <tt class="literal">bsd</tt>, the default) and <tt class="literal">printcap
                name</tt>, which tells Samba where your printer
                capabilities or
                <em class="filename">printcap</em> file is located. On
                Linux, the printer capabilities files is almost always
                <em class="filename">/etc/printcap</em>, which is also the
                default used by Samba. If
                you use the alternative LPRng printing system, you must
                specify <tt class="literal">lprng</tt> here. There are other
                possibilities that are less likely to be used on Linux listed in the <em class="filename">smb.conf</em>
                manual page.</p>

<p>You also need to specify in the <tt class="literal">[global]</tt> section
                which commands Samba can use to send files to the printer. These commands are simply those
                that would be issued on the command line by a user on
                your system, with placeholders (macros) beginning with
                <tt class="literal">%</tt> to refer to filenames and
                other changing parameters. The values 
                shown in the example are crafted for a BSD printing system and are
                probably useful for you, too. They make use of a number of
                macros that Samba expands automatically when reading the
                configuration file: <tt class="literal">%p</tt> specifies the 
                printer name, <tt class="literal">%s</tt> the name of the
                file to print and <tt class="literal">%j</tt> the job number
                of the print job. For more macros, please see the
                <em class="filename">smb.conf</em> manual page.</p>

<p>Most parameters in the
                <tt class="literal">[printers]</tt> section have already
                been explained, but there remains a very important one:
                <tt class="literal">printable = yes</tt> tells Samba that
                this section
                specifies printing services and not file services. Printer
                services should always be set to read-only, otherwise
                malicious users could interfere with other users' print
                jobs. The <tt class="literal">directory</tt> parameter specifies
                where Samba should store the temporary printing files.</p>

<p>Note that setting up the printing service on the Samba
                side is not enough to be able to print from Windows. You also
                need to configure a printer on all Windows clients and use a 
                suitable printer driver for the printer in question. Samba
                supports the automatic installation of printer drivers onto
                Windows 95 and Windows 98 machines; read the manual page
                <em class="filename">smb.conf</em> for further details (look for
                the <tt class="literal">printer driver file</tt> option).</p>

<p>After you have made changes to your Samba
                  configuration file, it is always a good idea to check the
<a name="INDEX-2502" />
                  syntax with <tt class="command">testparm</tt>, at least to
                  ensure you haven't introduced a spelling or syntax
                  error. You will probably also want to
                  look at the values <tt class="command">testparm</tt> outputs for all the parameters. There
                  is also a tiny program called <tt class="command">testprns</tt>
<a name="INDEX-2503" />
                  that checks the validity of printer names, but it is not
                  as helpful as <tt class="command">testparm</tt>.</p>

<a name="INDEX-2504" /><a name="INDEX-2505" /><p>Normally, the Samba daemons <tt class="command">smbd</tt>
                  and <tt class="command">nmbd</tt> should automatically reread the 
                  configuration file when it has been changed, but this does
                  not always work correctly. You can always send the daemons
                  the HUP signal to make them reread the
                  <em class="filename">smb.conf</em> file, though:</p>

<blockquote><pre class="code">tigger# <tt class="userinput"><b>killall -HUP smbd</b></tt>
tigger# <tt class="userinput"><b>killall -HUP nmbd</b></tt></pre></blockquote>

<p>We have covered only a small number of the hundreds of
                options that Samba provides, but with the facts given here,
                you should already be able to set up file and printing
                services for Windows clients for a lot of situations, and you
                can always read up on further details in the Samba
                documentation.</p>

<a name="INDEX-2506" /><a name="INDEX-2507" />
</div>


<div class="sect3">
<h3 class="sect3">12.1.3.3. Starting Samba</h3>

<p>Depending on your distribution, there may already be a 
<a name="INDEX-2508" />
                  script to start the Samba service. In this case, it is best
                  to use that script. For example, on Red Hat systems, you can
                  start the Samba server (provided that you have installed the 
                  Samba package) with:</p>

<blockquote><pre class="code">tigger# <tt class="userinput"><b>/etc/rc.d/smb start</b></tt></pre></blockquote>

<p>and shut it down with:</p>

<blockquote><pre class="code">tigger# <tt class="userinput"><b>/etc/rc.d/smb stop</b></tt></pre></blockquote>

<p>On SuSE, the <tt class="command">smb</tt> daemon
<a name="INDEX-2509" />
                  is located by default in
                  <em class="filename">/sbin/init.d/smb</em>
                  instead of
                  <em class="filename">/etc/rc.d/smb</em>, on
                  Debian, it is <em class="filename">/etc/init.d/samba</em>.</p>

<p>If you have installed Samba yourself, you have two
                  options. You can either have the Samba daemons started by
<a name="INDEX-2510" />
                  <tt class="command">inetd</tt> or simply start them from the
                  command line.</p>

<?troff .Nd 10?><p>Since the latter is used more often and is
                  better for testing, we describe that option here. The
                  manual pages for <tt class="command">smbd</tt> and
                  <tt class="command">nmbd</tt> describe how to use
                  <tt class="command">inetd</tt>. 
</p>

<p>To run Samba from the command line, simply start the
                  daemon by entering the following commands (assuming that you have installed the
                  Samba daemons in <em class="filename">/usr/sbin</em>):</p>

<blockquote><pre class="code">tigger# <tt class="userinput"><b>/usr/sbin/nmbd</b></tt>
tigger# <tt class="userinput"><b>/usr/sbin/smbd</b></tt></pre></blockquote>

<p>Once you know that your Samba server works, you should 
                  start the daemons with the option
                  <tt class="command">-D</tt> which tells them to detach
                  themselves from the shell they were started from, the normal 
                  mode of operation for a daemon:</p>

<blockquote><pre class="code">tigger# <tt class="userinput"><b>/usr/sbin/nmbd -D</b></tt>
tigger# <tt class="userinput"><b>/usr/sbin/smbd -D</b></tt></pre></blockquote>

<p>This also allows you to close the shell without
                  killing the daemons.</p>

<p>The Samba daemons have a number of other options,
                  but you can probably do without them; if necessary, you will find all the 
                  information in the manual pages. We have only touched the
                  surface here of what Samba can do, but this should already
                  give you an impression why Samba--despite being not
                  specifically developed for Linux--is one of the
                  software packages that have made Linux famous.</p>
</div>
</div>




<div class="sect2">
<h3 class="sect2">12.1.4. Utilities for Accessing DOS Filesystems: MTools</h3>

<p><a name="INDEX-2511" />
<a name="INDEX-2512" />
<a name="INDEX-2513" />
<a name="INDEX-2514" />
<a name="INDEX-2515" />
Most Linux users who want to run Linux programs on Windows files can
do so simply by mounting their Windows partitions as we described
earlier in the section
"<a href="ch12_01.htm">Section 12.1.1, "Mounting DOS, VFAT, and NTFS Partitions"</a>." Once you set up the
mount correctly, you can use standard shell commands to move around in
the directories and run <tt class="command">vi</tt>, Perl scripts, or
whatever other programs you know and love.</p>

<p>Before Linux contained support for nonnative file systems, a set of
programs called MTools was quite important. It was a collection of
simple commands that let you manipulate Windows directories and files
while running Linux. Now, the main use we've found for
MTools is to
access Windows-formatted floppy disks, because MTools remove the need to mount the floppy disk just to read a file from
it. Using Windows-formatted floppy disks can be a very
useful and efficient way to transport smaller amounts of data from a 
Windows machine to a Linux machine and back if the two
are not networked.</p>

<p>Here are summaries of the MTools utilities; they are further
documented in manual pages that are part of the distribution:</p>

<dl>
<dt><b><tt class="command">mattrib</tt></b></dt><dd><p> 
<a name="INDEX-2516" />
Changes attributes of a Windows file</p></dd>


<dt><b><tt class="command">mcd</tt></b></dt><dd><p> 
Changes to a Windows directory
<a name="INDEX-2517" /></p></dd>


<dt><b><tt class="command">mcopy</tt></b></dt><dd><p>Copies files from Linux to Windows or from Windows to Linux
<a name="INDEX-2518" /></p></dd>


<dt><b><tt class="command">mdel</tt></b></dt><dd><p> 
Deletes a Windows file
<a name="INDEX-2519" /></p></dd>


<dt><b><tt class="command">mdir</tt></b></dt><dd><p>Displays a Windows directory
<a name="INDEX-2520" /></p></dd>


<dt><b><tt class="command">mformat</tt></b></dt><dd><p>Creates a Windows FAT filesystem on a floppy
<a name="INDEX-2521" /></p></dd>


<dt><b><tt class="command">mlabel</tt></b></dt><dd><p>Writes a Windows disk volume label to a Windows partition</p></dd><a name="INDEX-2522" />


<dt><b><tt class="command">mmd</tt></b></dt><dd><p>Creates a Windows directory
<a name="INDEX-2523" /></p></dd>


<dt><b><tt class="command">mrd</tt></b></dt><dd><p>Removes a Windows directory
<a name="INDEX-2524" /></p></dd>


<dt><b><tt class="command">mread</tt></b></dt><dd><p>Reads a Windows file to Linux
<a name="INDEX-2525" /></p></dd>


<dt><b><tt class="command">mren</tt></b></dt><dd><p>Renames a Windows file
<a name="INDEX-2526" /></p></dd>


<dt><b><tt class="command">mtype</tt></b></dt><dd><p>Displays the contents of a Windows file</p></dd><a name="INDEX-2527" />


<dt><b><tt class="command">mwrite</tt></b></dt><dd><p>Writes a Linux file to Windows
<a name="INDEX-2528" /></p></dd>

</dl>

<p />

<a name="INDEX-2529" /><a name="INDEX-2530" /><a name="INDEX-2531" /><a name="INDEX-2532" /><a name="INDEX-2533" />
</div>




<a name="x-100-3-sec-windows-filetransl" /><div class="sect2">
<h3 class="sect2">12.1.5. File Translation Utilities</h3>

<p>As we already mentioned, one of the most prominent
<a name="INDEX-2534" />
<a name="INDEX-2535" />
<a name="INDEX-2536" />
<a name="INDEX-2537" />
<a name="INDEX-2538" />
		problems when it comes to sharing files between Linux and
		Windows is that the two systems have
		different conventions for the line endings in text files. Luckily, there are a few 
		ways to solve this problem:</p>

<ul><li><p>If you access files on a mounted partition on the
			same machine, let the kernel convert the files
			automatically as described in the section "<a href="ch12_01.htm">Section 12.1.1, "Mounting DOS, VFAT, and NTFS Partitions"</a>"
			earlier in this chapter. Use this with
			care!</p></li><li><p>Sophisticated editors like Emacs can handle the
			conversion automatically at either load or save time for
			you.</p></li><li><p>There are a number of small tools available that
			convert files from one line-end convention to the
			other. Some of these tools can also handle other
			conversion tasks as well.</p></li></ul><p>We will look here at two of the small utilities
		mentioned here: <tt class="command">duconv</tt> and
		<tt class="command">recode</tt>.</p>

<p><a name="INDEX-2539" />
<tt class="command">duconv</tt> is a tiny program available
		with most distributions that
		converts the line-ends and can also convert some special
		characters used in European languages from their
		<span class="acronym">DOS</span> encoding to their Unix encoding. Note
		that the latter is not necessary with text files written on
		newer versions of Windows (like Windows 95 and Windows 98),
		because Windows uses the same encoding for those
		special characters as Unix does, the international standard
		ISO Latin-1, also known as ISO 8859-1.</p>

<p>In order to convert a Windows text file
		to a Unix text file, call <tt class="command">duconv</tt> as
		follows:</p>

<blockquote><pre class="code">duconv -u <em class="replaceable">dos_text_file</em> <em class="replaceable">unix_text_file</em></pre></blockquote>

<p>To convert the other way around (from Unix to
		Windows), use the option
		<tt class="literal">-d</tt>:</p>

<blockquote><pre class="code">duconv -d <em class="replaceable">unix_text_file</em> <em class="replaceable">dos_text_file</em></pre></blockquote>

<p><tt class="command">duconv</tt> is a nice little utility, but
		if you need something more full-blown, you should go for
		the <span class="acronym">GNU</span> project's <tt class="command">recode</tt>. This is a
		program that can convert just about any text-file standard to any
		other text-file standard. <tt class="command">recode</tt> isn't as easy 
		to use as <tt class="command">duconv</tt>, however.</p>

<p><a name="INDEX-2540" />
The normal way to use <tt class="command">recode</tt> is to
		specify both the old and the new character sets
		(encodings of text
		file conventions) and the file to
		convert. <tt class="command">recode</tt> will overwrite the old file 
		with the converted one; it will have the same file name. For
		example, in order to convert a text file from
		Windows to Unix, you would enter:</p>

<blockquote><pre class="code">recode ibmpc:latin1 <em class="replaceable">textfile</em></pre></blockquote>

<p><em class="replaceable">textfile</em> is then
		replaced by the converted version. You can probably guess that 
		to convert the same file back to Windows
		conventions, you would use:</p>

<blockquote><pre class="code">recode latin1:ibmpc <em class="replaceable">textfile</em></pre></blockquote>

<p>In addition to <tt class="literal">ibmpc</tt> (as used on
		Windows) and <tt class="literal">latin1</tt> (as used 
		on Unix), there are other possibilities available, among
		others <tt class="literal">latex</tt> for the LaTeX style of
		encoding diacritics (see <a href="ch09_03.htm">Section 9.3.1, "TeX and LaTeX"</a>) and <tt class="literal">texte</tt>
		for encoding French email messages. You can get the full list
		by issuing:</p>

<blockquote><pre class="code">recode -l</pre></blockquote>

<?troff .Nd 10?><p>If you do not like <tt class="command">recode</tt> 's habit of
		overwriting your old file with the new one, you can make use
		of the fact that <tt class="command">recode</tt> can also read from standard input and
		write to standard output. To convert
		<em class="filename">dostextfile</em> to
		<em class="filename">unixtextfile</em> without deleting
		<em class="filename">dostextfile</em>, you could do:</p>

<blockquote><pre class="code">recode ibmpc:latin1 &lt; dostextfile &gt; unixtextfile</pre></blockquote>

<p>With the two tools just described, you can handle text
		files quite comfortably, but this is only the
		beginning. Things are less easy when it comes to other
<a name="INDEX-2541" />
<a name="INDEX-2542" />
<a name="INDEX-2543" />
		files. For example, pixel graphics on Windows are usually
		saved as <em class="filename">bmp</em> files, which are very uncommon 
		on Unix. Fortunately, there are a number of tools available
		that can convert <em class="filename">bmp</em> files to graphics
		file formats like <em class="filename">xpm</em> that are more
		common on Unix. Among these are the shareware image viewer and 
		manipulation package <tt class="command">xv</tt>, which is probably
		included with your distribution.</p>

<p>Things become even more hairy when it comes to
<a name="INDEX-2544" />
<a name="INDEX-2545" />
		proprietary file formats like those saved by office
		productivity programs. While the various incarnations of the
		<em class="filename">doc</em> file format of the Word for Windows
		word processor have become a de facto lingua franca for word
		processor files on Windows, until recently, it was hardly
		possible to read those files on Linux. Fortunately, a number
		of software packages have appeared lately that can read (and
		sometimes even write) those files. Among those are the word
<a name="INDEX-2546" />
<a name="INDEX-2547" />
<a name="INDEX-2548" />
		processor WordPerfect, the office productivity suite
<a name="INDEX-2549" />
		StarOffice, and the office productivity suite ApplixWare. Be aware
		though, that these conversions will never be perfect; it is
		very likely that you will have to edit the files by hand
		afterwards.</p>

<p>In general, the more common a file format is on
		Windows, the more likely it is that Linux
		developers will provide a means to read or even write those
		file formats as well. This might also be a good occasion to
		switch to open file formats like <span class="acronym">RTF</span> (Rich
		Text Format) or XML (Extensible Markup Language) when you're on Windows,
		too. In the age of the Internet, where information is supposed 
		to float freely, closed, nondocumented file formats are an
		anachronism.</p>

<a name="INDEX-2550" /><a name="INDEX-2551" /><a name="INDEX-2552" /><a name="INDEX-2553" /><a name="INDEX-2554" />
</div>




<a name="INDEX-2555" /><a name="INDEX-2556" /><a name="INDEX-2557" /><a name="INDEX-2558" /><a name="INDEX-2559" />
</div>











<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">11.4. X Applications</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">12.2. Sharing Programs</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>