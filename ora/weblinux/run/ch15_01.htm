<?label 15. TCP/IP and PPP?><html><head><title>TCP/IP and PPP (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch14_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h1 class="chapter">Chapter 15. TCP/IP and PPP</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch15_01.htm">Networking with TCP/IP</a><br />
<a href="ch15_02.htm">Dial-up PPP</a><br />
<a href="ch15_03.htm">PPP over ISDN</a><br />
<a href="ch15_04.htm">NFS and NIS Configuration</a><br /></p></div>

<p>So, you've staked out your homestead on the Linux frontier,
and installed and configured your system. What next? Eventually
you'll want to communicate with other systems--Linux and
otherwise--and the Pony Express isn't going to suffice.</p>

<p>Fortunately, Linux supports a number of methods for data communication
and networking. This includes serial communications,
<span class="acronym">TCP/IP</span>, and <span class="acronym">UUCP</span>. In this
chapter and the next, we will discuss how to configure your
system to communicate with the world.</p>

<p>
<em class="emphasis">Linux Network Administrator's Guide</em>, available
from the Linux Documentation Project (see the <a href="biblio.htm">Bibliography</a>) and also published by O'Reilly &amp;
Associates, is a complete guide to configuring
<span class="acronym">TCP/IP</span> and <span class="acronym">UUCP</span> networking under
Linux. For a detailed account of the information presented here, we
refer you to that book.</p>

<div class="sect1">
<h2 class="sect1">15.1. Networking with TCP/IP</h2>

<p><a name="INDEX-2967" />
<a name="INDEX-2968" />
Linux supports a full implementation of the Transmission Control
Protocol/Internet Protocol (<span class="acronym">TCP/IP</span>) networking
protocols. <span class="acronym">TCP/IP</span> has become the most successful
mechanism for networking computers worldwide.  With Linux and an
Ethernet card, you can network your machine to a Local Area Network
(<span class="acronym">LAN</span>) or (with the proper network connections) to
the Internet--the worldwide <span class="acronym">TCP/IP</span> network.
<a name="INDEX-2969" /></p>

<p>Hooking up a small <span class="acronym">LAN</span> of Unix
machines is easy. It simply requires an Ethernet controller in each
machine and the appropriate Ethernet cables and other hardware. Or if
your business or university provides access to the Internet, you can
easily add your Linux machine to this network.</p>

<p>Linux <span class="acronym">TCP/IP</span> support has had its ups and
downs. After all, implementing an entire protocol stack from scratch
isn't something that one does for fun on a weekend. On the other
 hand,
the Linux <span class="acronym">TCP/IP</span> code has benefited greatly from
the hoard of beta testers and developers to have crossed its path, and
as time has progressed many bugs and configuration problems have
fallen in their wake.</p>

<p><a name="INDEX-2970" />
The current implementation of <span class="acronym">TCP/IP</span> and related
protocols for Linux is called <span class="acronym">NET</span>-4. This has no
relationship to the so-called <span class="acronym">NET</span>-2 release of
<span class="acronym">BSD</span> Unix; instead, in this context,
<span class="acronym">NET</span>-4 means the fourth implementation of
<span class="acronym">TCP/IP</span> for Linux. Before <span class="acronym">NET</span>-4
came (no surprise here) <span class="acronym">NET</span>-3,
<span class="acronym">NET</span>-2, and <span class="acronym">NET</span>-1, the last having been
phased out around kernel Version 0.99.pl10. <span class="acronym">NET</span>-4
supports nearly all the features you'd expect from a Unix
<span class="acronym">TCP/IP</span> implementation and a wide range of
networking hardware.</p>

<p><a name="INDEX-2971" />
<a name="INDEX-2972" />
<a name="INDEX-2973" />
<a name="INDEX-2974" />
<a name="INDEX-2975" />
<a name="INDEX-2976" />
Linux <span class="acronym">NET</span>-2 also supports Serial Line Internet
Protocol (<span class="acronym">SLIP</span>) and Point-to-Point Protocol
(<span class="acronym">PPP</span>). <span class="acronym">SLIP</span> and <span class="acronym">PPP</span>
allow you to have dial-up Internet access using a modem.
If your business or university provides <span class="acronym">SLIP</span> or
<span class="acronym">PPP</span> access, you can dial in to the
<span class="acronym">SLIP</span> or <span class="acronym">PPP</span> server and put your machine on the Internet over the phone line.
Alternatively, if your Linux machine also has Ethernet access to the Internet,
you can configure it as a <span class="acronym">SLIP</span> or <span class="acronym">PPP</span> server.</p>

<p>In the following sections, we won't mention SLIP any more, because
nowadays most people use PPP. If you want to run SLIP on your machine, 
you can find all the information in the <em class="emphasis">Linux Network
Administrator's Guide.</em></p>

<p><a name="INDEX-2977" />
Besides the <em class="emphasis">Linux Network Administrator's Guide</em>, the Linux
<span class="acronym">NET</span>-3 <span class="acronym">HOWTO</span> contains
more or less complete information on configuring
<span class="acronym">TCP/IP</span> and
<span class="acronym">PPP</span>
for Linux.

The Linux Ethernet <span class="acronym">HOWTO</span> is a related document that describes 
configuration of various Ethernet card drivers for Linux.</p>

<p>
Also of interest is <em class="emphasis"><span class="acronym">TCP/IP</span> Network Administration</em> by 
Craig Hunt. It contains complete information on using and configuring
<span class="acronym">TCP/IP</span> on Unix systems. If you plan to set up a network of Linux
machines or do any serious <span class="acronym">TCP/IP</span> hacking, you should have the
background in network administration presented by that book.</p>

<p>
If you really want to get serious about setting up and operating
networks, you will probably also want to read <em class="emphasis">DNS and
BIND</em> by Cricket Liu and Paul Albitz. This book tells you
all there is to know about name servers in a refreshingly funny manner.</p>

<div class="sect2">
<h3 class="sect2">15.1.1. TCP/IP Concepts</h3>

<p>In order to fully appreciate (and utilize) the power of
<span class="acronym">TCP/IP</span>, you should be familiar with its underlying
principles. Transmission Control Protocol/Internet Protocol is a suite
of <em class="emphasis">protocols</em> (the magic buzzword for this
chapter) that define how machines should communicate

with each other via a network, as well as internally to other layers
of the protocol suite. For the theoretical background of the Internet
protocols, the best sources of information are the first volume of
Douglas Comer's <em class="emphasis">Internetworking with TCP/IP</em> and
the first volume of W. Richard Stevens' <em class="emphasis">TCP/IP
Illustrated</em>.</p>

<p><a name="INDEX-2978" />
<span class="acronym">TCP/IP</span> was originally developed for use on the Advanced Research Projects
Agency network, <span class="acronym">ARPA</span>net, which was funded to support military
and computer-science research. Therefore, you may hear <span class="acronym">TCP/IP</span> being
referred to as the "<span class="acronym">DARPA</span> Internet
Protocols." Since then, many other
<span class="acronym">TCP/IP</span> networks have come into use, such as the National Science 
Foundation's <span class="acronym">NSFNET</span>, as well as thousands of other local and regional
networks around the world. All of these networks are interconnected into
a single conglomerate known as the Internet.</p>

<p><a name="INDEX-2979" />
<a name="INDEX-2980" />
<a name="INDEX-2981" /> 
On a <span class="acronym">TCP/IP</span> network, each machine is assigned an
<em class="emphasis">IP address</em>, which is a 32-bit number uniquely
identifying the machine. You need to know a little about IP addresses
to structure your network and assign addresses to hosts. The IP
address is usually represented as a dotted quad: four numbers in
decimal notation, separated by dots. As an example, the IP address
0x80114b14 (in hexadecimal format) can be written as 128.17.75.20.</p>

<p><a name="INDEX-2982" />
<a name="INDEX-2983" />
<a name="INDEX-2984" />
<a name="INDEX-2985" />
The IP address is divided into two parts: the network address and the
host address. The network address consists of the higher-order bits of
the address and the host address of the remaining bits. (In general,
each <em class="emphasis">host</em> is a separate machine on the network.)
The size of these two fields depends upon the type of network in
question.  For example, on a Class B network (for which the first byte
of the IP address is between 128 and 191), the first two bytes of the
address identify the network, and the remaining two bytes identify the
host (see <a href="ch15_01.htm">Figure 15-1</a>). For the example address
just given, the network address is 128.17, and the host address is
75.20. To put this another way, the machine with IP address
128.17.75.20 is host number 75.20 on the network 128.17.</p>

<a name="x-100-3-ip-net" /><div class="figure"><img src="figs/rl3_1501.gif" alt="Figure 15-1" /></div><h4 class="objtitle">Figure 15-1. IP address</h4><p><a name="INDEX-2986" />
<a name="INDEX-2987" />
<a name="INDEX-2988" />
In addition, the host portion of the IP address may be subdivided
to allow for a <em class="emphasis">subnetwork address</em>. Subnetworking allows
large networks to be divided into smaller subnets, each of which 
may be maintained independently. For example, an organization 
may allocate a single Class B network, which provides two bytes
of host information, up to 65,534 hosts on the network. The organization may then wish to dole out
the responsibility of maintaining portions of the network, so that 
each subnetwork is handled by a different department.
Using subnetworking, the organization can specify, for example, that 
the first byte of the host address (that is, the third byte of the overall
IP address) is the subnet address, and the second byte is the
host address for that subnetwork (see <a href="ch15_01.htm">Figure 15-2</a>). In this
case, the IP address
128.17.75.20 identifies host number 20 on subnetwork 75 of network
128.17.<a href="#FOOTNOTE-57">[57]</a></p><blockquote>

<a name="FOOTNOTE-57" /><p>[57]Why
not 65,536 instead? For reasons to be discussed later, a host
address of 0 or 255 is invalid.</p>

</blockquote>

<a name="x-100-3-ip-subnet" /><div class="figure"><img src="figs/rl3_1502.gif" alt="Figure 15-2" /></div><h4 class="objtitle">Figure 15-2. IP address with subnet</h4><p><a name="INDEX-2989" />
Processes (either on the same machine or on different machines)
that wish to communicate via <span class="acronym">TCP/IP</span> generally specify the destination
machine's IP address as well as a <em class="emphasis">port address</em>. The destination
IP address is used, of course, to route data from one machine to 
the destination machine. The port address is a 16-bit number that
specifies a particular service or application on the destination
machine that should receive the data. Port numbers can be thought of
as office numbers at a large office building: the entire building
has a single IP address, but each business has a separate office
there.</p>

<p><a name="INDEX-2990" />
Here's a real-life example of how IP addresses and port numbers are
used. The <tt class="command">telnet</tt> program allows a user on one machine to 
start a login session on another. On the remote machine, 
there is the <tt class="command">telnet</tt> "daemon," <tt class="command">telnetd</tt>, which is listening
to a specific port for incoming connections (in this case, the
port number is 23).<a href="#FOOTNOTE-58">[58]</a></p><blockquote>

<a name="FOOTNOTE-58" /><p>[58]On many systems, <tt class="command">telnetd</tt> is not
always listening to port 23; the Internet services daemon <tt class="command">inetd</tt>
is listening on its behalf. For now, let's sweep that detail under the
carpet.</p>

</blockquote>

<p>The user executing <tt class="command">telnet</tt> specifies the address of the machine 
to log in to, and the <tt class="command">telnet</tt> program attempts to open a connection
to port 23 on the remote machine. If it is successful, <tt class="command">telnet</tt>
and <tt class="command">telnetd</tt> are able to communicate with each other to provide
the remote login for the user in question.</p>

<p>Note that the <tt class="command">telnet</tt> client on the local machine has a 
port address of its own. This port address is allocated to 
the client dynamically when it begins execution. This is because
the remote <tt class="command">telnetd</tt> doesn't need to know the port number of
the incoming <tt class="command">telnet</tt> client beforehand. When the client
initiates the connection, part of the information it sends
to <tt class="command">telnetd</tt> is its port number. <tt class="command">telnetd</tt> can be thought
of as a business with a well-known mailing address. Any 
customers that wish to correspond with the <tt class="command">telnetd</tt> running
on a particular machine need to know not only the IP address
of the machine to talk to (the address of the <tt class="command">telnetd</tt> office
building), but also the port number where <tt class="command">telnetd</tt> can be found
(the particular office within the building). The address and
port number of the <tt class="command">telnet</tt> client are included as part of
the "return address" on the envelope containing the letter.</p>

<p><a name="INDEX-2991" />
<a name="INDEX-2992" />
<a name="INDEX-2993" />
The <span class="acronym">TCP/IP</span> family contains a number of protocols. Transmission
Control Protocol (<span class="acronym">TCP</span>) is responsible for providing reliable,
connection-oriented communications between two processes, which may
be running on different machines on the network. 
<a name="INDEX-2994" />
<a name="INDEX-2995" />
User Datagram 
Protocol (<span class="acronym">UDP</span>) is similar to <span class="acronym">TCP</span> except that it provides
connectionless, unreliable service. Processes that use <span class="acronym">UDP</span> must
implement their own acknowledgment and synchronization routines
if necessary.</p>

<p><a name="INDEX-2996" />
<span class="acronym">TCP</span> and <span class="acronym">UDP</span> transmit and receive data in units known as <em class="emphasis">packets</em>.
Each packet contains a chunk of information to send to another
machine, as well as a header specifying the destination and source
port addresses.</p>

<p><a name="INDEX-2997" />
<a name="INDEX-2998" />
<a name="INDEX-2999" />
Internet Protocol (IP) sits beneath <span class="acronym">TCP</span> and <span class="acronym">UDP</span> in the protocol
hierarchy. It is responsible for transmitting and routing <span class="acronym">TCP</span> or 
<span class="acronym">UDP</span> packets via the network. In order to do so, IP wraps each <span class="acronym">TCP</span>
or <span class="acronym">UDP</span> packet within another packet (known as an IP <em class="emphasis">datagram</em>),
which includes a header with routing and destination information. 
The IP datagram header includes the IP address of the source and
destination machines.</p>

<p>Note that IP doesn't know anything about
port addresses; those are the responsibility of <span class="acronym">TCP</span> and <span class="acronym">UDP</span>. 
Similarly, <span class="acronym">TCP</span> and <span class="acronym">UDP</span> don't deal with IP addresses, which 
(as the name implies) are only IP's concern. As you can see,
the mail metaphor with return addresses and envelopes is quite
accurate: each packet can be thought of as a letter contained within 
an envelope. <span class="acronym">TCP</span> and <span class="acronym">UDP</span> wrap the letter in an envelope with the
source and destination port numbers (office numbers) written on it.</p>

<p>IP acts as the mail room for the office building sending the letter. 
IP receives the envelope and wraps it in yet another envelope, with the 
IP address (office building address) of both the destination and the 
source affixed. The post office (which we haven't 
discussed quite yet) delivers the letter to the appropriate
office building. There, the mail room unwraps the outer envelope
and hands it to <span class="acronym">TCP</span>/<span class="acronym">UDP</span>, which delivers the letter to the
appropriate office based on the port number (written on the 
inner envelope). Each envelope has a return address that 
IP and <span class="acronym">TCP</span>/<span class="acronym">UDP</span> use to reply to the letter.</p>

<p><a name="INDEX-3000" />
<a name="INDEX-3001" />
<a name="INDEX-3002" />
In order to make the specification of machines on the Internet 
more humane, network hosts are often given a name as well as an
IP address. The Domain Name Service (<span class="acronym">DNS</span>) takes care of 
translating hostnames to IP addresses, and vice versa, as well
as handles the distribution of the name-to-IP address database
across the entire Internet. Using hostnames also allows the
IP address associated with a machine to change (e.g., if
the machine is moved to a different network), without
having to worry that others won't be able to "find" the
machine once the address changes. The <span class="acronym">DNS</span> record for the 
machine is simply updated with the new IP address, and all 
references to the machine, by name, will continue to work.</p>

<p><span class="acronym">DNS</span> is an enormous, worldwide distributed database.
Each organization

maintains a piece of the database, listing the machines in the
organization.  If you find yourself in the position of maintaining the
list for your organization, you can get help from the <em class="emphasis">Linux
Network Administrator's Guide</em> or
<em class="emphasis"><span class="acronym">TCP/IP</span> Network Administration</em>.
If those aren't enough, you can really get the full scoop from the
book <em class="emphasis">DNS and BIND</em>.</p>

<p><a name="INDEX-3003" />
For the purposes of most administration, all you need to know is that
a daemon called <tt class="command">named</tt> (pronounced "name-dee") has to run
on your system. This daemon is your window onto <span class="acronym">DNS</span>.</p>

<p>Now, we might ask ourselves how a packet gets from one 
machine (office building) to another. This is the actual job of IP, 
as well as a number of other protocols that aid IP in its task.
Besides managing IP datagrams on each host (as the mail room),
IP is also responsible for routing packets between hosts.</p>

<p>Before we can discuss how routing works, we must explain the
model upon which <span class="acronym">TCP/IP</span> networks are built. A network is just
a set of machines that are connected together through some
physical network medium--such as Ethernet or serial lines. 
In <span class="acronym">TCP/IP</span> terms, each network has its own methods for handling
routing and packet transfer internally.</p>

<p><a name="INDEX-3004" />
<a name="INDEX-3005" />
Networks are connected to each other via <em class="emphasis">gateways</em> 
(also known as <em class="emphasis">routers</em>).
A gateway is a host that has direct connections to two or
more networks; the gateway can then exchange information 
between the networks and route packets from one network 
to another. For instance, a gateway might be a workstation with
more than one Ethernet interface. Each interface is connected
to a different network, and the operating system uses this
connectivity to allow the machine to act as a gateway.</p>

<p>In order to make our discussion more concrete, let's 
introduce an imaginary network, made up of the machines
eggplant, papaya, apricot, and zucchini.
<a href="ch15_01.htm">Figure 15-3</a> depicts the configuration of
these machines on the network. Note that papaya is 
connected to another network as well, which includes the
machines pineapple and pear. These machines
have the respective IP addresses:</p>

<table border="1">

<tr>
<th>Hostname</th>
<th>IP address</th>
</tr>




<tr>
<td rowspan="0">eggplant</td>
<td rowspan="0">128.17.75.20</td>
</tr>

<tr>
<td rowspan="0">apricot</td>
<td rowspan="0">128.17.75.12</td>
</tr>

<tr>
<td rowspan="0">zucchini</td>
<td rowspan="0">128.17.75.37</td>
</tr>

<tr>
<td rowspan="0">papaya</td>
<td rowspan="0">128.17.75.98, 128.17.112.3</td>
</tr>

<tr>
<td rowspan="0">pear</td>
<td rowspan="0">128.17.112.21</td>
</tr>

<tr>
<td rowspan="0">pineapple</td>
<td rowspan="0">128.17.112.40, 128.17.30.1</td>
</tr>


</table>
<p><a name="x-100-3-fig-ex-netarch" /><div class="figure"><img src="figs/rl3_1503.gif" alt="Figure 15-3" /></div><h4 class="objtitle">Figure 15-3. Network with two gateways</h4><p>As you can see, papaya has two IP addresses--one on the
128.17.75 subnetwork and another on the 128.17.112 subnetwork.
pineapple has
two IP addresses as well--one on 128.17.112 and another on 128.17.30.</p>

<p><a name="INDEX-3006" />
IP uses the network portion of the IP address to determine how to 
route packets between machines. In order to do this, each machine
on the network has a <em class="emphasis">routing table</em>, which contains a list
of networks and the gateway machine for that network. To route a
packet to a particular machine, IP looks at the network portion of
the destination address. If there is an entry for that network in the
routing table, IP routes the packet through the appropriate gateway.
Otherwise, IP routes the packet through the "default" gateway
given in the routing table.
<a name="INDEX-3007" /></p>

<p>Routing tables can contain entries for specific machines
as well as for networks. In addition, each machine has a
routing table entry for itself.</p>

<p><a name="INDEX-3008" />
Let's examine the routing table for eggplant. Using the
command <tt class="command">netstat -rn</tt>, we see the following:
 
<?troff_ps_indent0?>
<blockquote><pre class="code">eggplant:$ <tt class="userinput"><b>netstat -rn</b></tt> 
Kernel IP routing table 
Destination   Gateway       Genmask        Flags  MSS  Window irtt Iface
128.17.75.0   128.17.75.20  255.255.255.0  UN     1500 0         0 eth0
default       128.17.75.98  0.0.0.0        UGN    1500 0         0 eth0
<?troff .ne 10?>
127.0.0.1     127.0.0.1     255.0.0.0      UH     3584 0         0 lo
128.17.75.20  127.0.0.1     255.255.255.0  UH     3584 0         0 lo</pre></blockquote>


The first column displays the destination networks (and hosts) that the
routing table includes. The first entry is for the network 128.17.75
(note that the host address is 0 for network entries), which is the
network that eggplant lives on. Any packets sent to this network
should be routed through 128.17.75.20, which is the IP address of eggplant.
In general, a machine's route to its own network is through itself.</p>

<p>The <tt class="literal">Flags</tt> column of the routing table gives
information on the destination address for this entry;
<tt class="literal">U</tt> specifies that the route is "up,"
<tt class="literal">N</tt> that the destination is a network, and so on.
The <tt class="literal">MSS</tt> field shows how many bytes are transferred
at a time over the respective connection, <tt class="literal">Window</tt>
indicates how many frames may be sent ahead before a confirmation
must be made, <tt class="literal">irtt</tt> gives statistics on the use of
this route, and <tt class="literal">Iface</tt> lists the network device used
for the route.  On Linux systems, Ethernet interfaces are named
<em class="filename">eth0</em>, <em class="filename">eth1</em>, and so
on. <em class="filename">lo</em> is the loopback device, which we'll
discuss shortly.</p>

<p>The second entry in the routing table is the default route, which 
applies to all packets destined for networks or hosts for which there
is no entry in the table. In this case, the default route is through
papaya, which can be considered the door to the outside world.
Every machine on the 128.17.75 subnet must go through papaya to
talk to machines on any other network.</p>

<p><a name="INDEX-3009" />
<a name="INDEX-3010" />
The third entry in the table is for the address 127.0.0.1, which is
the <em class="emphasis">loopback</em> address. This address is used when a
machine wants to make a <span class="acronym">TCP/IP</span> connection to
itself. It uses the <em class="filename">lo</em> device as its interface,
which prevents loopback connections from using the Ethernet (via the
<em class="filename">eth0</em> interface). In this way, network bandwidth
is not wasted when a machine wishes to talk to itself.</p>

<p>The last entry in the routing table is for the IP address
128.17.75.20, which is the eggplant host's own address. As we can see,
it uses 127.0.0.1 as its gateway. This way, any time eggplant makes a <span class="acronym">TCP/IP</span>
connection to itself, the loopback address is used as the gateway, and
the <em class="filename">lo</em> network device is used.</p>

<p>Let's say that eggplant wants
to send a packet to zucchini. The IP datagram contains a source
address of 128.17.75.20 and a destination address of 128.17.75.37. IP
determines that the network portion of the destination address is
128.17.75 and uses the routing table entry for 128.17.75.0
accordingly. The packet is sent directly to the network, which
zucchini receives and is able
to process.</p>

<p>What happens if eggplant wants
to send packets to a machine not on the local network, such as
pear? In this case, the
destination address is 128.17.112.21. IP attempts to find a route for
the 128.17.112 network in the routing tables, but none exists, so it
selects the default route through papaya.  papaya receives the packet and looks up the
destination address in its own routing tables. The routing table for
papaya might look like this:

<blockquote><pre class="code">Destination   Gateway       Genmask        Flags  MSS  Window irtt Iface
128.17.75.0   128.17.75.98  255.255.255.0  UN     1500 0         0 eth0
128.17.112.0  128.17.112.3  255.255.255.0  UN     1500 0         0 eth1
default       128.17.112.40 0.0.0.0        UGN    1500 0         0 eth1
127.0.0.1     127.0.0.1     255.0.0.0      UH     3584 0         0 lo
128.17.75.98  127.0.0.1     255.255.255.0  UH     3584 0         0 lo</pre></blockquote>

As you can see, papaya is connected to the 128.17.75 network 
through its <em class="filename">eth0</em> device and to 128.17.112 through <em class="filename">eth1</em>. 
The default route is through pineapple, which is a gateway to
the Wild Blue Yonder (as far as papaya is concerned).</p>

<p>Once papaya receives a packet 
destined for pear, it sees
that the destination address is on the network 128.17.112 and routes
that packet to the network using the second entry in the routing table. 
<a name="INDEX-3011" /></p>

<p>Similarly, if eggplant wants to send packets to machines
outside the local organization, it would route packets through
papaya (its gateway). papaya would, in turn, route 
outgoing packets through pineapple, and so forth. Packets 
are handed from one gateway to the next until they reach the
intended destination network. This is the
basic structure upon which the Internet is based: a seemingly
infinite chain of networks, interconnected via gateways.</p>
</div>




<div class="sect2">
<h3 class="sect2">15.1.2. Hardware Requirements</h3>

<p>
You can use Linux <span class="acronym">TCP/IP</span> without any networking
hardware at all; configuring
"loopback" mode allows you to talk to yourself. This is necessary for
some applications and games that use the loopback network device.</p>

<p><a name="INDEX-3012" /> However, if
you want to use Linux with an Ethernet <span class="acronym">TCP/IP</span>
network, obviously you'll need an Ethernet adapter card. Many Ethernet
adapters are supported by Linux for the <span class="acronym">ISA</span>,

<span class="acronym">EISA</span>, and <span class="acronym">PCI</span> buses, as well as
pocket and <span class="acronym">PCMCIA</span> adapters. In <a href="ch01_01.htm">Chapter 1, "Introduction
 to Linux"</a>, we provided a partial list of supported
Ethernet cards; see the Linux Ethernet <span class="acronym">HOWTO</span> for a
complete discussion of Linux Ethernet hardware compatibility.</p>

<p><a name="INDEX-3013" /> 
<a name="INDEX-3014" /> 
<a name="INDEX-3015" />
<a name="INDEX-3016" />
Linux also supports
<span class="acronym">SLIP</span> and <span class="acronym">PPP</span>, which allow you
to use a modem to access the Internet over the phone line. In this
case, you'll need a modem compatible with your <span class="acronym">SLIP</span>
or <span class="acronym">PPP</span> server; for example, many servers require a
56kbps V.90 modem (most also support K56flex). In this book, we
describe the configuration of <span class="acronym">PPP</span>,

because it is what most Internet service providers offer. If you want to use
the older <span class="acronym">SLIP</span>, please see the <em class="emphasis">Linux Network
Administrator's Guide</em>.</p>
</div>




<a name="x-100-3-sec-net-tcp-ether" /><div class="sect2">
<h3 class="sect2">15.1.3. Configuring TCP/IP with Ethernet</h3>

<p><a name="INDEX-3017" />
<a name="INDEX-3018" /> <a name="INDEX-3,019" /> <a name="INDEX-3,020" /> In this section, we discuss how to
configure an Ethernet <span class="acronym">TCP/IP</span> connection on a Linux
system. Presumably this system will be part of a local network of
machines that are already running <span class="acronym">TCP/IP</span>; in which
case your gateway, name server, and so forth are already configured
and available.</p>

<p>The following information applies primarily to Ethernet connections.
If you're planning to use <span class="acronym">PPP</span>, read this section to
understand the concepts, and follow the
<span class="acronym">PPP</span>-specific instructions in the section
"<a href="ch15_02.htm">Section 15.2, "Dial-up PPP"</a>" later in this
chapter.</p>

<p>On the other hand, you may wish to set up an entire
<span class="acronym">LAN</span> of Linux machines (or a mix of Linux machines
and other systems). In this case, you'll have to take care of a number
of other issues not discussed here. This includes setting up a name
server for yourself,  as well as a gateway machine if
your network is to be connected to other networks. If your network is
to be connected to the Internet, you'll also have to obtain IP
addresses and related information from your access provider.</p>

<p>In short, the method described here should work for many Linux systems
configured for an existing LAN--but certainly not all.  For
further details, we direct you to a book on <span class="acronym">TCP/IP</span>
network administration, such as those mentioned at the beginning of
this chapter.</p>

<p>First of all, we assume that your Linux system has the necessary
<span class="acronym">TCP/IP</span> software installed. This includes basic
clients such as Telnet and FTP,
system-administration commands, such as <tt class="command">ifconfig</tt> and
<tt class="command">route</tt> (usually found in <em class="filename">/etc</em>
or <em class="filename">/sbin</em>), and networking configuration files
(such as <em class="filename">/etc/hosts</em>). The other Linux-related
networking documents described earlier explain how to go about
installing the Linux networking software if you do not have it
already.</p>

<p>We also assume that your kernel has been configured and compiled with
<span class="acronym">TCP/IP</span> support enabled. See the section
"<a href="ch07_04.htm">Section 7.4, "Building a New Kernel"</a>" in

<a href="ch07_01.htm">Chapter 7, "Upgrading Software and the Kernel"</a>, for information
on compiling your kernel. To enable networking, you must answer yes to the
appropriate questions during the <tt class="command">make config</tt> or
<tt class="command">make menuconfig</tt> step, rebuild the
kernel, and boot from it.</p>

<p><a name="INDEX-3021" />
<a name="INDEX-3022" />
Once this has been done, you must modify a number of configuration 
files used by <span class="acronym">NET</span>-4. For the most part this is a simple procedure. 
Unfortunately, however, there is wide disagreement between Linux
distributions as to where the various <span class="acronym">TCP/IP</span> configuration files
and support programs should go. Much of the time, they can be found
in <em class="filename">/etc</em>, but in other cases may be found in <em class="filename">/usr/etc</em>, 
<em class="filename">/usr/etc/inet</em>, or other bizarre locations. In the worst case,
you'll have to use the <tt class="command">find</tt> command to locate the files on your
system. Also note that not all distributions keep the <span class="acronym">NET</span>-2 configuration
files and software in the same location; they may be spread across
several directories.</p>

<p>This section also assumes use of one Ethernet device on the system.
These instructions should be fairly easy to extrapolate
if your system has more than one network connection (and hence acts
as a gateway).</p>

<p>Here, we also discuss configuration for loopback-only systems
(systems with no Ethernet or <span class="acronym">PPP</span> connection). If you have no network
access, you may wish to configure your system for loopback-only <span class="acronym">TCP/IP</span>,
so that you can use applications that require it.</p>

<div class="sect3">
<h3 class="sect3">15.1.3.1. Your network configuration</h3>

<p>Before you can configure <span class="acronym">TCP/IP</span>, you need to determine the following
information about your network setup. In most cases, your local
network administrator or network-access provider can provide you with 
this information:</p>

<dl>
<dt><b><em class="emphasis">Your IP address</em></b></dt><dd><p><a name="INDEX-3023" />
<a name="INDEX-3024" />
          This is the unique machine address in dotted-decimal
          format. An example is 128.17.75.98. Your network administrators will 
          provide you with this number.</p>

<p>          If you're configuring loopback mode (i.e., no <span class="acronym">PPP</span>, no Ethernet 
          card, just <span class="acronym">TCP/IP</span> connections to your own machine), your 
          IP address is 127.0.0.1.</p></dd>


<dt><b><em class="emphasis">Your subnetwork mask</em></b></dt><dd><p>This is a dotted quad, similar
to the IP address, which determines which portion of the IP address
specifies the subnetwork number and which portion specifies the host on
that subnet.</p>

<p>The subnetwork mask is a pattern of bits, which, when bitwise-ANDed with 
an IP address on your network, will tell you which subnet that 
address belongs to. For example, your subnet mask might be 255.255.255.0.
If your IP address is 128.17.75.20, the subnetwork portion of your
address is 128.17.75.</p>

<p><a name="INDEX-3025" />
<a name="INDEX-3026" />
<a name="INDEX-3027" />
<a name="INDEX-3028" />
We distinguish here between "network address" and "subnetwork address."
Remember that for Class B addresses, the first two bytes (here, 128.17)
specify the network, while the second two bytes specify the host. With a subnet
mask of 255.255.255.0, however, 128.17.75 is considered the entire
subnet address (e.g., subnetwork 75 of network 128.17), and 20 the
host address.</p>

<p>Your network administrators choose the subnet mask and therefore
can provide you with this information.</p>

<p><a name="INDEX-3029" />
<a name="INDEX-3030" />
This applies as well to the loopback device. Since the
loopback address is always 127.0.0.1, the netmask for
this device is always 255.0.0.0.</p></dd>


<dt><b><em class="emphasis">Your subnetwork address</em></b></dt><dd><p><a name="INDEX-3031" />
<a name="INDEX-3032" />
This is the subnet portion of your IP
address as determined by the subnet mask. For example, if your 
subnet mask is 255.255.255.0 and your IP address 128.17.75.20, your
subnet address is 128.17.75.0.</p>

<p>Loopback-only systems don't have a subnet address.</p></dd>


<dt><b><em class="emphasis">Your broadcast address</em></b></dt><dd><p><a name="INDEX-3033" />
<a name="INDEX-3034" /> 
This address is used to broadcast packets
to every machine on your subnet. In general, this is equal to your
subnet address (see previous item) with 255 replaced as the host address. For subnet
address 128.17.75.0, the broadcast address is 128.17.75.255. Similarly,
for subnet address 128.17.0.0, the broadcast address is 128.17.255.255.</p>

<p>Note that some systems use the subnet address itself as the broadcast address.
If you have any doubt, check with your network administrators.</p>

<p>Loopback-only systems do not have a broadcast address.</p></dd>


<dt><b><em class="emphasis">The IP address of your gateway</em></b></dt><dd><p><a name="INDEX-3035" />
This is the address of the machine
that acts as the default route to the outside world. In fact, you may
have more than one gateway address--for example, if your network is
connected directly to several other networks. However, only one
of these will act as the <em class="emphasis">default</em> route.
(Recall the example
in the previous section, where the 128.17.112.0 network is connected both
to 128.17.75.0 through papaya, and to the outside world
through pineapple.)</p>

<p>Your network administrators will provide you with the IP addresses
of any gateways on your network, as well as the networks they
connect to. Later, you will use this information with the <tt class="command">route</tt>
command to include entries in the routing table for each gateway.</p>

<p>Loopback-only systems do not have a gateway address. The same is true
for isolated networks.</p></dd>


<dt><b><em class="emphasis">The IP address of your name server</em></b></dt><dd><p><a name="INDEX-3036" />
<a name="INDEX-3037" />
This is the address of the
machine that handles hostname-to-address translations for your machine. Your network administrators will provide you with this information.</p>

<p>You may wish to run your own name server (by configuring and running
<tt class="command">named</tt>). However, unless you absolutely must run your own
name server (for example, if there is no other name server available on
your local network), we suggest using the name-server address provided
by your network administrators. At any rate, most books on <span class="acronym">TCP/IP</span> configuration
include information on running <tt class="command">named</tt>.</p>

<p>Naturally, loopback-only systems have no name-server address.</p></dd>

</dl>
</div>


<a name="x-100-3-sec-net-tcp-rc" /><div class="sect3">
<h3 class="sect3">15.1.3.2. The networking rc files</h3>

<p><a name="INDEX-3038" />
<em class="filename">rc</em> files are systemwide resource configuration scripts executed at boottime by <tt class="command">init</tt>.  They run basic system daemons
(such as <tt class="command">sendmail</tt>, <tt class="command">crond</tt>, and so on) and are used to configure network
parameters. <em class="filename">rc</em> files are usually found in the directory
<em class="filename">/etc/rc.d</em>.</p>

<p>Note that there are <em class="emphasis">many</em> ways to carry out the network
configuration described here. Every Linux distribution uses a slightly
different mechanism to help automate the process. What we describe here is
a generic method that allows you to create two <em class="filename">rc</em>
files that will run the appropriate commands to get your machine
talking to the network. Most distributions have their own scripts that
accomplish more or less the same thing. If in doubt, first attempt to 
configure networking as suggested by the documentation for your distribution
and, as a last resort, use the methods described here. (As an example, the 
Red Hat distribution uses the script 
<em class="filename">/etc/rc.d/init.d/network</em>, which obtains network
information from files in  
<em class="filename">/etc/sysconfig</em>. The 
<tt class="command">control-panel</tt> system administration program provided 
with Red Hat configures networking automatically without
editing any of these files. The SuSE distribution, on the other hand, distributes the
configuration over several files, such as
<em class="filename">/sbin/init.d/network</em> and
<em class="filename">/sbin/init.d/route</em>, among others, and lets you configure
most networking aspects via the tool <em class="application">yast</em>.)
<a name="INDEX-3039" /></p>

<p>Here, we're going to describe the <em class="filename">rc</em> files used
to configure <span class="acronym">TCP/IP</span>:</p>

<dl>
<dt><b><em class="emphasis">Red Hat</em></b></dt><dd><p>Networking is scattered among files for each
<tt class="command">init</tt> level that includes networking. For instance,
the <em class="filename">/etc/rc.d/rc1.d</em> directory controls a level 1
(single-user) boot, so it doesn't have any networking commands, but
the <em class="filename">/etc/rc.d/rc3.d</em> controlling a level 3 boot
has files specifically to start networking.</p></dd>


<dt><b><em class="emphasis">SuSE</em></b></dt><dd><p>All the startup files for all system services, including 
networking, are grouped together in the
<em class="filename">/sbin/init.d</em> directory. They are actually 
quite generic and get their actual values from the system-wide
configuration file <em class="filename">/etc/rc.config</em>. The
most important files here are
<em class="filename">/sbin/init.d/network</em>, which starts and 
halts network interfaces,
<em class="filename">/sbin/init.d/route</em>, which configures
routing, and <em class="filename">/sbin/init.d/ serial</em>, which
configures serial ports. If you have ISDN hardware, the files
<em class="filename">/sbin/init.d/i4l</em> and
<em class="filename">/sbin/init.d/i4l_hardware</em> are
applicable, too. Note that in general, you do not need to (and should
not) edit those files; edit
<em class="filename">/etc/rc.config</em> instead.</p></dd>


<dt><b><em class="emphasis">Debian</em></b></dt><dd><p>The network configuration (Ethernet
cards, IP addresses, and routing) is set up in the file
<em class="filename">/etc/init.d/network</em>. The base networking daemons
(<tt class="command">portmap</tt> and <tt class="command">inetd</tt> themselves
are initialized by the start-stop script
<em class="filename">/etc/init.d/netbase</em>).</p></dd>


<dt><b><em class="emphasis">Slackware</em></b></dt><dd><p>Networking is started by files named
<em class="filename">rc.inet1</em> and <em class="filename">rc.inet2</em>.
<em class="filename">rc.inet1</em> is used to configure the basic network parameters
(such as IP addresses and routing information), and <em class="filename">rc.inet2</em> 
fires up the <span class="acronym">TCP/IP</span> daemons (<tt class="command">telnetd</tt>, <tt class="command">ftpd</tt>, and so forth).</p></dd>

</dl>

<p><a name="INDEX-3040" />
<a name="INDEX-3041" />
<a name="INDEX-3042" />
<tt class="command">init</tt> uses the file <em class="filename">/etc/inittab</em> to determine what 
processes to run at boot time. In order to run the files
<em class="filename">/etc/rc.d/rc.inet1</em> and <em class="filename">/etc/rc.d/rc.inet2</em> from <tt class="command">init</tt>,
<em class="filename">/etc/inittab</em> might include entries such as:
 
<blockquote><pre class="code">n1:34:wait:/etc/rc.d/rc.inet1 
n2:34:wait:/etc/rc.d/rc.inet2</pre></blockquote>


The <em class="filename">inittab</em> file is described in the section
"<a href="ch05_03.htm">Section 5.3.2, "init, inittab, and rc files"</a>" in <a href="ch05_01.htm">Chapter 5, "Essential System Management"</a>.
The first field gives a unique two-character identifier for
each entry. The second field lists the runlevels in which the
scripts are run; on this system, we initialize networking in
runlevels 3 and 4. The word <tt class="literal">wait</tt> in the third field
tells <tt class="command">init</tt> to wait until the script has finished execution
before continuing. The last field gives the name of the script
to run.</p>

<p>While you are first setting up your network configuration,
you may wish to run <em class="filename">rc.inet1</em> and <em class="filename">rc.inet2</em> by hand
(as root) in order to debug any problems. Later you can include
entries for them in another <em class="filename">rc</em> file or in <em class="filename">/etc/inittab</em>.</p>

<p>As mentioned earlier, <em class="filename">rc.inet1</em> configures the basic network interface.
This includes your IP and network address and the routing table information
for your system. Two programs are used to configure these parameters:
<tt class="command">ifconfig</tt> and <tt class="command">route</tt>. Both of these are usually found in <em class="filename">/sbin</em>.</p>

<p><a name="INDEX-3043" />
<tt class="command">ifconfig</tt> is used for configuring the network device interface with 
certain parameters, such as the IP address, subnetwork 
mask, broadcast address, and the like.
<tt class="command">route</tt> is used to create and modify entries in the routing table.
<a name="INDEX-3044" /></p>

<p>
<img src="figs/bomb.gif">&nbsp;&nbsp;For most configurations, an <em class="filename">rc.inet1</em> file similar to the following
should work. You will, of course, have to edit this for your own system.
Do not use the sample IP and network addresses listed here; 
they may correspond to an actual machine on the Internet:</p>

<blockquote><pre class="code">#!/bin/sh
# This is /etc/rc.d/rc.inet1 - Configure the TCP/IP interfaces

# First, configure the loopback device

HOSTNAME=`hostname`

/sbin/ifconfig lo 127.0.0.1   # uses default netmask 255.0.0.0
/sbin/route add 127.0.0.1     # a route to point to the loopback device

# Next, configure the ethernet device. If you're only using loopback or 
# SLIP, comment out the rest of these lines.

# Edit for your setup.
IPADDR="128.17.75.20"       # REPLACE with your IP address
NETMASK="255.255.255.0"     # REPLACE with your subnet mask
NETWORK="128.17.75.0"       # REPLACE with your network address
BROADCAST="128.17.75.255"   # REPLACE with your broadcast address
GATEWAY="128.17.75.98"      # REPLACE with your default gateway address

# Configure the eth0 device to use information above
/sbin/ifconfig eth0 ${IPADDR} netmask ${NETMASK} broadcast ${BROADCAST}

# Add a route for our own network
/sbin/route add ${NETWORK}

# Add a route to the default gateway
/sbin/route add default gw ${GATEWAY} metric 1

# End of Ethernet Configuration</pre></blockquote>

<p>As you can see, the format of the <tt class="command">ifconfig</tt> command is:
 
<blockquote><pre class="code">ifconfig <em class="replaceable">interface</em> <em class="replaceable">device</em> <em class="replaceable">options</em>&#133;</pre></blockquote>

For example: 
<blockquote><pre class="code">ifconfig lo 127.0.0.1</pre></blockquote>

assigns the <em class="filename">lo</em> (loopback) device the IP address
127.0.0.1, and: 
<blockquote><pre class="code">ifconfig eth0 127.17.75.20</pre></blockquote>

assigns the <em class="filename">eth0</em> (first Ethernet) device the address 127.17.75.20.</p>

<p><a name="INDEX-3045" />
<a name="INDEX-3046" />
<a name="INDEX-3047" />
In addition to specifying the address, Ethernet devices usually
require that the subnetwork mask be set with the <em class="replaceable">netmask</em>
option and the broadcast address be set with
<em class="replaceable">broadcast</em>.</p>

<p><a name="INDEX-3048" />
The format of the <tt class="command">route</tt> command, as used here, is:
 
<blockquote><pre class="code">route add [ -net | -host ] <em class="replaceable">destination</em> [ gw <em class="replaceable">gateway</em> ]
[ metric <em class="replaceable">metric</em> ] <em class="replaceable">options</em></pre></blockquote>


where <em class="replaceable">destination</em> is the destination address for this
route (or the keyword <tt class="literal">default</tt>), <em class="replaceable">gateway</em> the IP address 
of the gateway for this route, and <em class="replaceable">metric</em> the metric number 
for the route (discussed later).</p>

<p>We use <tt class="command">route</tt> to add entries to the routing table. You should
add a route for the loopback device (as seen earlier), for your local
network, and for your default gateway. For example, if our
default gateway is 128.17.75.98, we would use the command:
 
<blockquote><pre class="code">route add default gw 128.17.75.98</pre></blockquote>


<tt class="command">route</tt> takes several options. Using <span class="option">-net</span> or <span class="option">-host</span>
before <em class="replaceable">destination</em> will tell <tt class="command">route</tt> that the 
destination is a network or specific host, respectively. (In most
cases, routes point to networks, but in some situations you may 
have an independent machine that requires its own route. You would
use <span class="option">-host</span> for such a routing table entry.)</p>

<p><a name="INDEX-3049" />
The <em class="replaceable">metric</em> option specifies a
<em class="emphasis">metric value</em> for
this route. Metric values are used when there is more than one
route to a specific location, and the system must make a decision about
which to use. Routes with lower metric values are preferred. In this
case, we set the metric value for our default route to 1, which
forces that route to be preferred over all others.</p>

<p><a name="INDEX-3050" />
How could there possibly be more than one route to a particular 
location? First of all, you may use multiple <tt class="command">route</tt> commands
in <em class="filename">rc.inet1</em> for a particular destination--if you have more
than one gateway to a particular network, for example. However,
your routing tables may dynamically acquire additional entries in
them if you run <tt class="command">routed</tt> (discussed further below). 
If you run <tt class="command">routed</tt>, other systems may broadcast routing
information to machines on the network, causing extra routing
table entries to be created on your machine. By setting the
<em class="replaceable">metric</em> value for your default route to 1, you ensure
that any new routing table entries will not supersede the preference
of your default gateway.</p>

<p>You should read the manual pages for <tt class="command">ifconfig</tt> and <tt class="command">route</tt>,
which describe the syntax of these commands in detail. There
may be other options to <tt class="command">ifconfig</tt> and <tt class="command">route</tt> that are
pertinent to your configuration.</p>

<p>Let's move on.
<em class="filename">rc.inet2</em> is used to run various daemons used by the <span class="acronym">TCP/IP</span> suite. 
These are not necessary in order for your system to talk to the 
network, and are therefore relegated to a separate <em class="filename">rc</em> file.
In most cases you should attempt to configure <em class="filename">rc.inet1</em>,
and ensure that your system is able to send and receive packets
from the network, before bothering to configure <em class="filename">rc.inet2</em>.</p>

<p>Among the daemons executed by <em class="filename">rc.inet2</em> are <tt class="command">inetd</tt>,
<tt class="command">syslogd</tt>, and <tt class="command">routed</tt>. The version of <em class="filename">rc.inet2</em> 
on your system may currently start a number of other servers, but
we suggest commenting these out while you are debugging your
network configuration.</p>

<p><a name="INDEX-3051" />
<a name="INDEX-3052" />
The most important of these servers is <tt class="command">inetd</tt>, which acts as
the "operator" for other system daemons. It sits in the background
and listens to certain network ports for incoming connections. 
When a connection is made, <tt class="command">inetd</tt> spawns off a copy of the
appropriate daemon for that port. For example, when an incoming
Telnet connection is made, <tt class="command">inetd</tt> forks <tt class="command">in.telnetd</tt>,
which handles the Telnet connection from there. This is simpler
and more efficient than running individual copies of each daemon.
This way, network daemons are executed on demand.</p>

<p> 
<a name="INDEX-3053" />
<a name="INDEX-3054" />
<a name="INDEX-3055" />
<tt class="command">syslogd</tt> is the system logging daemon; it accumulates log messages
from various applications and stores them into log files based on
the configuration information in <em class="filename">/etc/syslogd.conf</em>.</p>

<p><a name="INDEX-3056" />
<a name="INDEX-3057" />
<tt class="command">routed</tt> is a server used to maintain dynamic routing information.
When your system attempts to send packets to another network, it may
require additional routing table entries in order to do so. 
<tt class="command">routed</tt> takes care of manipulating the routing table without
the need for user intervention.</p>

<p>Here is a sample <em class="filename">rc.inet2</em> that starts up <tt class="command">syslogd</tt>,
<tt class="command">inetd</tt>, and <tt class="command">routed</tt>:
 
<blockquote><pre class="code">#! /bin/sh
# Sample /etc/rc.d/rc.inet2

# Start syslogd
if [ -f /usr/sbin/syslogd ]
then
      /usr/sbin/syslogd
fi

# Start inetd
if [ -f /usr/sbin/inetd ]
then
      /usr/sbin/inetd
fi

# Start routed
if [ -f /usr/sbin/routed ]
then
      /usr/sbin/routed -q 
fi</pre></blockquote></p>

<p><a name="INDEX-3058" />

Among the various additional servers you may want to start in
<em class="filename">rc.inet2</em> is
<tt class="command">named</tt>. <tt class="command">named</tt> is a name server;
it is responsible for translating (local) IP addresses to names, and
vice versa. If you don't have a name server elsewhere on the network, or if

you want to provide local machine names to other machines in your
domain, it may be necessary to run
<tt class="command">named</tt>. <tt class="command">named</tt> configuration is
somewhat complex and requires planning; we refer interested readers to
<em class="emphasis">DNS and BIND</em>.</p>

<a name="INDEX-3059" />
</div>


<div class="sect3">
<h3 class="sect3">15.1.3.3. /etc/hosts</h3>

<p><a name="INDEX-3060" />
<a name="INDEX-3061" />
<em class="filename">/etc/hosts</em> contains a list of IP addresses and the hostnames
they correspond to. In general, <em class="filename">/etc/hosts</em> contains entries
only for your local machine and perhaps other "important" machines (such
as your name server or gateway). Your local name server provides
address-to-name mappings for other machines on the network transparently.</p>

<p>For example, if your machine is eggplant.veggie.com with the IP address 
128.17.75.20, your <em class="filename">/etc/hosts</em> would look like this:
<blockquote><pre class="code">127.0.0.1               localhost
128.17.75.20            eggplant.veggie.com eggplant</pre></blockquote>

If you're using only 
loopback, the only line in <em class="filename">/etc/hosts</em> file should be for 
the address 127.0.0.1.</p>
</div>


<div class="sect3">
<h3 class="sect3">15.1.3.4. /etc/networks</h3>

<p><a name="INDEX-3062" />
<a name="INDEX-3063" />
The <em class="filename">/etc/networks</em> file lists the names and addresses of your own
and other networks. It is used by the <tt class="command">route</tt> command and allows
you to specify a network by name instead of by address.</p>

<p>Every network you wish to add a route to using the <tt class="command">route</tt>
command (generally called from
<em class="filename">rc.inet1</em>) should 
have an entry in <em class="filename">/etc/networks</em> for convenience;
otherwise, you will have to specify the network's IP address instead
of the name.</p>

<p>As an example:
<blockquote><pre class="code">default         0.0.0.0         # default route    - mandatory
loopnet         127.0.0.0       # loopback network - mandatory
veggie-net      128.17.75.0     # Modify for your own network address</pre></blockquote>

Now, instead of using the command:
<blockquote><pre class="code">route add 128.17.75.20</pre></blockquote>

we can use:
<blockquote><pre class="code">route add veggie-net</pre></blockquote></p>
</div>


<?troff .sp -.2?><div class="sect3">
<h3 class="sect3">15.1.3.5. /etc/host.conf</h3>

<p><a name="INDEX-3064" />
<a name="INDEX-3065" />
The <em class="filename">/etc/host.conf</em> file specifies how your system resolves hostnames.
It should contain the two lines:
<blockquote><pre class="code">order hosts,bind
multi on</pre></blockquote>

These lines tell the resolver libraries to first check the 
<em class="filename">/etc/hosts</em> file and then ask the name server
(if one is present) for any names it must look up. The <tt class="literal">multi</tt> entry allows you to have multiple
IP addresses for a given machine name in <em class="filename">/etc/hosts</em>.</p>

<p>On systems that use the new <em class="emphasis">glibc2</em> (like Red Hat from Version 5.0,
SuSE from Version 6.0 and Debian from Version 2.0),
<em class="filename">/etc/nsswitch.conf</em> is used instead of
<em class="filename">/etc/host.conf</em>. In this case, this 
file should contain the lines <tt class="literal">hosts: files dns</tt> and
<tt class="literal">networks: files dns</tt>.</p>
</div>


<?troff .sp -.2?><div class="sect3">
<h3 class="sect3">15.1.3.6. /etc/resolv.conf</h3>

<p><a name="INDEX-3066" />
<a name="INDEX-3067" />
This file configures the name resolver, specifying the 
address of your name server (if any) and domains that you want to
search by default if a specified hostname is not a fully specified
hostname. For example, if this file contains the line:
<blockquote><pre class="code">search vpizza.com vpasta.com</pre></blockquote></p>

<p>then using the hostname blurb
will try to resolve the names blurb.vpizza.com and blurb.vpasta.com (in this order). This is 
convenient, because it saves you typing in the full names of often-used domains. On the other hand, the more domains you specify here,
the longer the <span class="acronym">DNS</span> lookup will take.</p>

<p>For example, the machine eggplant.veggie.com with a name server
at address 128.17.75.55 would have the following lines in
<em class="filename">/etc/resolv.conf</em>:
 
<blockquote><pre class="code">domain      veggie.com
nameserver  128.17.75.55</pre></blockquote>

You can specify more than one name server; each must have a
<tt class="literal">nameserver</tt> line of its own in <em class="filename">resolv.conf</em>.</p>
</div>


<div class="sect3">
<h3 class="sect3">15.1.3.7. Setting your hostname</h3>

<p> 
<a name="INDEX-3068" />
<a name="INDEX-3069" />
You should set your system hostname with the <tt class="command">hostname</tt> command.
This is usually executed from <em class="filename">/etc/rc.d/rc.sysinit</em>
(<em class="filename">/sbin/init.d/boot</em> on SuSE systems);
simply search your system <em class="filename">rc</em> files to determine where it is
invoked. For example, if your (full) hostname is eggplant.veggie.com,
edit the appropriate <em class="filename">rc</em> file to execute the command
<tt class="command">/bin/hostname eggplant.veggie.com</tt>.
Note that the <tt class="command">hostname</tt> executable may be found in a directory
other than <em class="filename">/bin</em> on your system.</p>
</div>


<div class="sect3">
<h3 class="sect3">15.1.3.8. Trying out your network</h3>

<p><a name="INDEX-3070" />
<a name="INDEX-3071" />
Once you have the various networking configuration files modified
for your system, you should be able to reboot (using a <span class="acronym">TCP/IP</span>-enabled
kernel) and attempt to use the network.</p>

<p>When first booting the system, you may wish to disable execution of
<em class="filename">rc.inet1</em> and <em class="filename">rc.inet2</em> and run them by hand once the
system is up. This allows you to catch any error messages, modify
the scripts, and retry. Once you have things working, you can enable
the scripts from <em class="filename">/etc/inittab</em>.</p>

<p>One good way of testing network connectivity is to simply 
<tt class="command">telnet</tt> to another host. You should first try to connect to
another host on your local network, and if this works, attempt
to connect to hosts on other networks. The former will test your
connection to the local subnet; the latter, your connection to
the rest of the world through your gateway.</p>

<p>You may be able to connect to remote machines, via the
gateway, whereas connecting to machines on the subnet fails. 
This is a sign that there is a problem with your subnetwork mask
or the routing table entry for the local network.</p>

<p>When attempting to connect to other machines, you should first
try to connect using only the IP address of the remote host. 
If this seems to work, but connecting via hostname does not,
there may be a problem with your name server configuration
(e.g., <em class="filename">/etc/resolv.conf</em> and <em class="filename">/etc/host.conf</em> ) 
or with your route to the name server.</p>

<p><a name="INDEX-3072" />
<a name="INDEX-3073" />
The most common source of network trouble is an ill-configured 
routing table. You can use the command:
 
<blockquote><pre class="code">netstat -rn</pre></blockquote>

 
to display the routing table; in the previous section, we 
described the format of the routing tables as displayed by 
this command.

The <tt class="command">netstat</tt> manual page provides additional
insight as well.
Using <tt class="command">netstat</tt> without the <span class="option">-n</span> option forces it 
to display host and network entries by name instead of address.</p>

<p><a name="INDEX-3074" />
<a name="INDEX-3075" />

To debug your routing tables, you can either edit 
<em class="filename">rc.inet1</em> and reboot, or use the <tt class="command">route</tt> command by 
hand to add or delete entries. The manual page for <tt class="command">route</tt>
describes the full syntax of this command. Note that simply
editing <em class="filename">rc.inet1</em> and re-executing it will not clear out
old entries in the routing table; you must either reboot or
use <tt class="command">route del</tt> to delete the entries.</p>

<p><a name="INDEX-3076" />
If absolutely nothing seems to work, there may be a problem
with your Ethernet device configuration. First, be sure that your
Ethernet card was detected at the appropriate address and/or
IRQ at boot time. The kernel boot messages will give you this
information; if you are using <tt class="command">syslogd</tt>, kernel boot-time
messages are also saved in a file, such as <em class="filename">/var/log/messages</em>. 
<a name="INDEX-3077" /></p>

<p> 
If detection of your Ethernet card is faulty, you may have to 
modify kernel parameters to fix it. The Linux Ethernet <span class="acronym">HOWTO</span>
includes much information on
debugging Ethernet card configurations. In many cases, the fix is 
as simple as specifying the appropriate IRQ and port address at
the LILO boot prompt. For example, booting via LILO with the command:
<blockquote><pre class="code">lilo: <tt class="userinput"><b>linux ether=9,0x300,0,1,eth0</b></tt></pre></blockquote>

will select <span class="acronym">IRQ</span> 9, base address 0x300, and the external transceiver
(the fourth value of 1) for the <em class="filename">eth0</em> device. To use the
internal transceiver (if your card supports both types), change the
fourth value of the <tt class="literal">ether</tt> option to 0.</p>

<p><a name="INDEX-3078" />
Also, don't overlook the possibility that your Ethernet card is
damaged or incorrectly connected to your machine or the network.
A bad Ethernet card or cable can cause no end of trouble, including 
intermittent network failures, system crashes, and so forth. When
you're at the end of your rope, consider replacing the Ethernet
card and/or cable to determine if this is the source of the
problem.<a href="#FOOTNOTE-59">[59]</a></p><blockquote>

<a name="FOOTNOTE-59" /><p>[59]One of the authors once spent three hours trying to 
determine why the kernel wouldn't recognize an Ethernet card 
at boot time. As it turned out, the 16-bit card was plugged into
an 8-bit slot--mea culpa.</p>

</blockquote>

<p><a name="INDEX-3079" />
If your Ethernet card is detected, but the system is still having problems
talking to the network, the device configuration with <tt class="command">ifconfig</tt> may be
to blame. Be sure you have specified the appropriate IP address,
broadcast address, and subnet mask for your machine. Invoking <tt class="command">ifconfig</tt>
with no arguments displays information on your Ethernet device
configuration.</p>

<a name="INDEX-3080" /><a name="INDEX-3,081" /><a name="INDEX-3,082" /><a name="INDEX-3,083" /><a name="INDEX-3,084" /><a name="INDEX-3,085" />
</div>
</div>
</div>






























<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch14_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">14.2. Programming Tools</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">15.2. Dial-up PPP</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>