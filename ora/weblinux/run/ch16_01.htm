<?label 16. The World Wide Web and
 Electronic Mail?><html><head><title>The World Wide Web and
 Electronic Mail (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch15_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch16_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h1 class="chapter">Chapter 16. The World Wide Web and
 Electronic Mail</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch16_01.htm">The World Wide Web</a><br />
<a href="ch16_02.htm">Electronic Mail</a><br /></p></div>

<p>The previous chapter put you on a network.  It may have been hard
work, but the result was quite an accomplishment: your system is now
part of a community.  If you are connected to the Internet, the next
step is to get access to all the riches this medium offers.  People
generally agree that the most useful applications on the Internet are
the World Wide Web and electronic mail; they are the subjects of this
chapter.</p>

<div class="sect1">
<h2 class="sect1">16.1. The World Wide Web</h2>

<p><a name="INDEX-3177" />
<a name="INDEX-3178" />
The World Wide Web (<span class="acronym">WWW</span> or Web, for short)
is a relative newcomer to the Internet information hierarchy. The
<span class="acronym">WWW</span> project's goal is to unite the many disparate
services available on the Internet into a single, worldwide,
multimedia, hypertext space. In this section we'll show you how to access the <span class="acronym">WWW</span>
with your Linux machine. We'll also describe how to configure your own
<span class="acronym">WWW</span> server to provide documents to the Web.</p>

<p>The World Wide Web project was started in 1989 by Tim Berners-Lee at
the European Center for Particle Physics (<span class="acronym">CERN</span>).
The original goal of the project was to allow groups of researchers in
the particle-physics community to share many kinds of information
through a single, homogeneous interface.</p>

<p>Before the Web, each type of information available
via the Internet was provided by its own unique client/server
pair. For example, to retrieve files via <span class="acronym">FTP</span>, one
used the FTP client, which connected to the
<tt class="command">ftpd</tt> daemon on the server machine. Gopher (an old
hierarchical document system that was considered quite flashy before
the Web), Usenet
news, <tt class="command">finger</tt> information, and so forth all required
their own individual clients.  The differences between operating
systems and machine architectures compounded the problem; in theory,
these details should be hidden from the user who is trying to access
the information.</p>

<p><a name="INDEX-3179" /> 

The Web provides a single abstraction for the many
kinds of information available from the Internet. One uses a single
Web "client," a so-called <em class="emphasis">browser</em>--such as Netscape Navigator or 
Lynx--to access the Web. On the Web,
information is provided as documents (also known as
"pages"), where each document may have links to
others. Documents may be located on any machine on the Internet that
is configured to provide web access. Representing
information in this way is commonly referred to as
"hypertext," which is an important concept underlying
the entire Web.</p>

<p><a name="INDEX-3180" /> For example, the Linux
Documentation Project provides various Linux-related documents via the
Web. The <span class="acronym">LDP</span> home page, which can be found at
<a href="../../../../../../www.linuxdoc.org/">http://www.linuxdoc.org</a>, contains links
to a number of other Linux-related pages around the world. The
<span class="acronym">LDP</span> home page is shown in <a href="ch16_01.htm">Figure 16-1</a>.</p>

<a name="x-100-3-fig-www-exdoc" /><div class="figure"><img src="figs/rl3_1601.gif" alt="Figure 16-1" /></div><h4 class="objtitle">Figure 16-1. Linux Documentation Project (LDP) Home Page on the World Wide Web</h4><p><a name="INDEX-3181" />
The highlighted regions of text in the document are links. When the user
selects a link (e.g., by clicking on the text with the mouse), 
the document pointed to by the link is retrieved. The documents
can reside on virtually any machine on the Internet; the actual 
"locations" of web documents are hidden from the user.</p>

<p>Many of the documents available via the Web are in the form of
multimedia hypertext pages, as seen in <a href="ch16_01.htm">Figure 16-1</a>. These pages may contain
links to pictures, sounds, <span class="acronym">MPEG</span> video files,
PostScript documents, and much more. This multimedia information is
provided by a protocol known as
HyperText Transfer Protocol (<span class="acronym">HTTP</span>). The
Web is also capable of accessing documents provided
via <span class="acronym">FTP</span>, Gopher, Usenet news, and so on.</p>

<p>For example, when accessing a document via <span class="acronym">HTTP</span>,
you are likely to see a page such as that displayed in <a href="ch16_01.htm">Figure 16-1</a>--with embedded
pictures, links to other pages, and so on. When accessing a document
via <span class="acronym">FTP</span>, you might see a directory listing of the
<span class="acronym">FTP</span> server, as seen in <a href="ch16_01.htm">Figure 16-2</a>.  Clicking on a link in the
<span class="acronym">FTP</span> document either retrieves the selected file or
displays the contents of another directory.</p>

<a name="x-100-3-fig-www-ftpex" /><div class="figure"><img src="figs/rl3_1602.gif" alt="Figure 16-2" /></div><h4 class="objtitle">Figure 16-2. FTP directory as displayed in the Netscape Navigator Web browser</h4><p><a name="INDEX-3182" /> <a name="INDEX-3,183" /> 


Given this kind of abstraction, we need a way to refer to documents
available on the Web. <em class="emphasis">Uniform Resource
Locators</em>, or <span class="acronym">URL</span>s, are the answer.  A
<span class="acronym">URL</span> is simply a pathname uniquely
identifying a web document, including the machine
it resides on, the filename of the document, and the protocol used to
access it (<span class="acronym">FTP</span>, <span class="acronym">HTTP</span>, etc.). For
example, when you visit LDP's home page:
<blockquote><pre class="code"><a href="../../../../../../www.linuxdoc.org/">http://www.linuxdoc.org</a></pre></blockquote>
it redirects you to the URL:
<blockquote><pre class="code"><a href="../../../../../../metalab.unc.edu/LDP/index.html">http://metalab.unc.edu/LDP/index.html</a></pre></blockquote>
Let's break this down. The first part of the <span class="acronym">URL</span>,
<em class="filename">http:</em>, identifies the protocol used for the
document, which in this case is <span class="acronym">HTTP</span>.  The second
part of the <span class="acronym">URL</span>,
<em class="filename">//metalab.unc.edu</em>, identifies the machine where the
document is provided. The final portion of the <span class="acronym">URL</span>,
<em class="filename">LDP/index.html</em>, is the logical pathname to the
document on <a href="metalab.unc.edu">metalab.unc.edu</a>. This is similar to a
Unix pathname, in that it identifies the file
<em class="filename">index.html</em> in the directory
<em class="filename">LDP</em>. Therefore, to access the
<span class="acronym">LDP</span> home page, you'd fire up a
browser, telling it to access
<a href="../../../../../../metalab.unc.edu/LDP/index.html">http://metalab.unc.edu/LDP/index.html</a>. What
could be easier?</p>

<p>Actually, the conventions of web servers do make it easier.  If you
specify a directory as the last element of the path, the server
understands that you want the file <em class="filename">index.html</em> in
that directory. So you can reach the <span class="acronym">LDP</span> home page
with a URL as short as:
<blockquote><pre class="code"><a href="../../../../../../metalab.unc.edu/LDP/">http://metalab.unc.edu/LDP/</a></pre></blockquote>
<a name="INDEX-3184" /> To access a
file via anonymous <span class="acronym">FTP</span>, we can use a
<span class="acronym">URL</span> such as:
<blockquote><pre class="code">ftp://tsx-11.mit.edu/pub/linux/docs/INFO-SHEET/</pre></blockquote> 

This <span class="acronym">URL</span> retrieves the introductory Linux
information on <a href="tsx-11.mit.edu">tsx-11.mit.edu</a>. Using this
<span class="acronym">URL</span> with your browser is
identical to using <tt class="command">ftp</tt> to fetch the file
by hand.</p>

<p>The best way to understand the Web is to explore it. In the following
section we'll explain how to get started with a browser. Later in
the chapter, we'll cover how to configure your own machine as a web
server for providing documents to the rest of the Web.</p>

<p>Of course, in order to access the Web, you'll need a machine with direct
Internet access (via either Ethernet or <span class="acronym">PPP</span>). In the following sections,
we assume that you have already configured <span class="acronym">TCP/IP</span> on your system and
that you can successfully use clients such as <tt class="command">telnet</tt> and <tt class="command">ftp</tt>.</p>

<a name="x-100-3-sec-net-www-netscape" /><div class="sect2">
<h3 class="sect2">16.1.1. Using Netscape Navigator</h3>

<p><a name="INDEX-3185" />
Netscape Navigator is one of the most popular browsers. 
Versions are available for
the Macintosh, Microsoft Windows, and, of course, the X Window System on
Unix machines. As you would expect,
there is a Linux binary version available, which you can obtain from
the Netscape <span class="acronym">FTP</span> sites, such as 
ftp://ftp.netscape.com.</p>

<p><a name="INDEX-3186" />
Netscape Navigator exists in two incarnations. First, there is the
product developed and distributed by Netscape Communications Inc.,
which is available only in binary, but may now (unlike in earlier
times) be freely redistributed. Second, there is Mozilla, which in a
way is the "Open Source" version of Netscape
Navigator. Netscape has made the source code available for everybody
to hack on under a license similar to the GPL, but of course they do not assume
responsibility for those versions. In this book, we will cover only
the "official" version from Netscape, but you can find full
information about the Open Source version at <a href="../../../../../../www.mozilla.org/">http://www.mozilla.org</a>.</p>

<p>In addition, there are two versions of the software 
		shipped by Netscape. First, there is Navigator, the
<a name="INDEX-3187" />
		standalone web browser. Second, there is Netscape
		Communicator, which really is a suite of programs, including
		Navigator, a mail and news client, and several other, less
		often used programs. When you want to use only the web
		browser, it suffices to get just Navigator. If you want to use 
		the other tools as well, get the full Communicator suite. In
		the following description, we will assume that you use
		Communicator, because that's what is on most Linux
		distributions. If you have Navigator, things should be
		the same except that you won't have the mail and news client.</p>

<p>Here, we assume that you're using a networked Linux machine running
X and that you have obtained a copy of the Netscape Navigator binary. 
As stated before, your
machine must be configured to use <span class="acronym">TCP/IP</span>, and you should be able to use
clients such as <tt class="command">telnet</tt> and <tt class="command">ftp</tt>.</p>

<p>Starting Netscape Navigator is simple. Run the command:
<?troff-ps_indent0?>
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>netscape</b></tt> <em class="replaceable">url</em></pre></blockquote>

where <em class="replaceable">url</em> is the complete web address, or
URL, for the document you wish to view. If you don't specify a
<span class="acronym">URL</span>, Netscape should
display the Netscape home page as shown in <a href="ch16_01.htm">Figure 16-3</a> by default, but you can
specify another page to be displayed on startup, even a blank page.</p>

<a name="x-100-3-fig-www-netscape-hp" /><div class="figure"><img src="figs/rl3_1603.gif" alt="Figure 16-3" /></div>
<h4 class="objtitle">Figure 16-3. Netscape home page</h4><p>The Netscape home page is a good place to start if you're interested
in Web exploration. It contains links to information about the
software itself, as well as demonstration documents showing off the
power of the Web. (See the next section "<a href="ch16_01.htm">Section 16.1.2, "Navigating the Web"</a>," for more information on
finding your way around the Web.)</p>

<p>While using Netscape Navigator, you can scroll the document using the scrollbars
on the edge of the window. Alternatively, you can use the space bar
and Delete key to move back and forth by pages or the arrow keys to
scroll the document in smaller steps.</p>

<p><a name="INDEX-3188" />
<a name="INDEX-3189" />
Links appear as highlighted text (usually in blue, on color systems,
or underlined on monochrome). To follow a link, simply click on it with
the mouse. Netscape remembers the links that you have followed; after you
have selected a link, it appears in a darker color (or with dotted
underlines) in the future.</p>

<p>Keep in mind that retrieving documents on the Web can be slow at times.
This depends on the speed of the network connection from your site to
the server, as well as the traffic on the network at the time. In some
cases, web sites may be so loaded that they simply
refuse connections;
if this is the case, Netscape displays an appropriate error message.
At the bottom edge of the Netscape window, a status report is
displayed, and while a transfer is taking place, the Netscape
Navigator logo
in the upper-right corner of the window animates. Clicking on
the logo takes you back to the Netscape home page.</p>

<p><a name="INDEX-3190" />
<a name="INDEX-3191" />
<a name="INDEX-3192" />
As you traverse links within Netscape Navigator, each document is saved in the
<em class="emphasis">window history</em>, which can be recalled using the Go menu.  Pressing the
Back button at the top edge of the Netscape window moves
you back through the window history to previously visited documents.
Similarly, the Forward button moves you forward through
the history.</p>

<p><a name="INDEX-3193" />
You can also bookmark frequently visited web sites (or URLs) to
Netscape's "bookmarks file."  
Whenever you are viewing a document that you might want to return to later,
choose Add Bookmark from the Communicator/Bookmarks menu.
You can display your bookmarks by choosing the 
Bookmarks 
menu. Selecting any item in this menu retrieves the corresponding
document from the Web.</p>

<p>As mentioned previously, you can access new <span class="acronym">URL</span>s by running 
<tt class="command">netscape</tt> with the <span class="acronym">URL</span> as the argument. However, you can also
select Open Page&#133; from the File menu. Just type
the name of the <span class="acronym">URL</span> into the text-entry field,
press the Enter key, and the
corresponding document is retrieved.</p>

<p><a name="INDEX-3194" />
Netscape Navigator is a powerful application with many options. 
There are many ways to customize Netscape's behavior; however,
many of the customization details tend to change from release to release.
Fortunately, Netscape has provided complete documentation for Navigator
online, via the Web (where else?). This information is available on
Netscape's home page at
<a href="../../../../../../www.netscape.com/">http://www.netscape.com</a>. Recent versions of
Navigator also include the documentation as a local copy.</p>

<p><a name="INDEX-3195" />
<a name="INDEX-3196" />
Netscape is not the only browser that reads Web documents.
The National Center for Supercomputing Applications (<span class="acronym">NCSA</span>), which
developed the first modern Web browser, Mosaic, has recently released
a powerful new version called Vosaic.</p>

<p><a name="INDEX-3197" />
<a name="INDEX-3198" />
Another browser for the X Window System that currently does
not have all the bells and whistles but is fast and easy to use is
<tt class="command">kfm</tt> from the KDE project (see "<a href="ch11_03.htm">Section 11.3, "The K Desktop Environment"</a>" in <a href="ch11_01.htm">Chapter 11, "Customizing Your X Environment"</a> ).
Yet another versatile browser is Lynx.  It is a text-based browser, so you
miss the pictures when you use it.  But this makes it fast, and you
may find it convenient.  You can also use it without the X Window
System. And finally, for those who never want to leave Emacs, there is 
Emacs/W3, a fully featured web browser you can use within Emacs or
XEmacs.</p>

<a name="INDEX-3199" />
</div>




<a name="x-100-3-sec-net-www-navig" /><div class="sect2">
<h3 class="sect2">16.1.2. Navigating the Web</h3>

<p><a name="INDEX-3200" />
The Web is growing at a tremendous rate. In fact, by the time
you read this book, the Web may have completely changed in appearance
from the descriptions given here. Hundreds of thousands of web servers
have emerged since the Web's inception.</p>

<p>As the Web expands to encompass countless servers from all over the
world, it becomes more difficult to find the information that's out
there. Unless you happen to run across a <span class="acronym">URL</span> or hyperlink to an
interesting site, how can you locate information by subject?</p>

<p>Fortunately, a number of services have appeared on the Web to simplify
this task. While none of these services provide a complete 
listing of web sites, the high degree of connectivity on the Web 
ensures that if whatever you're looking for is out there, you'll find it.</p>

<p>First, keep in mind that the Web is a dynamic place. We've made every
attempt to certify that the information here is current, but by the
time you read this book, several of these links may
have moved, or may no longer exist.</p>

<?troff .Nd 10?><p>A popular index of web sites is <em class="emphasis">Yahoo!</em>, 
available at:
<blockquote><pre class="code"><a href="../../../../../../www.yahoo.com/">http://www.yahoo.com</a></pre></blockquote>
but there are now many such "portals" offering a slice of interesting
sites.</p>

<p>One of the largest search engines is:
<blockquote><pre class="code"><a href="../../../../../../www.altavista.com/">http://www.altavista.com</a></pre></blockquote>
which indexes millions of web sites. Also interesting
is:
<blockquote><pre class="code"><a href="../../../../../../www.dejanews.com/">http://www.dejanews.com</a></pre></blockquote>
where news articles are indexed and searchable.</p>
</div>




<div class="sect2">
<h3 class="sect2">16.1.3. Configuring Your Own WWW Server</h3>

<p><a name="INDEX-3201" />
<a name="INDEX-3202" />
<a name="INDEX-3203" />
Now that you've seen what the Web provides, you're ready to
set up your own gas station on the information superhighway. Running your
own web server is easy. It consists of two tasks: configuring
the <tt class="command">httpd</tt> daemon and writing documents to provide on the server.</p>

<p><a name="INDEX-3204" />
<tt class="command">httpd</tt> is the daemon that services <span class="acronym">HTTP</span> requests on your machine.
Any document accessed with an <tt class="literal">http</tt> <span class="acronym">URL</span> is retrieved using
<tt class="command">httpd</tt>. Likewise, <tt class="literal">ftp</tt>
<span class="acronym">URL</span>s are accessed using <tt class="command">ftpd</tt>,
<tt class="literal">gopher</tt> <span class="acronym">URL</span>s using <tt class="command">gopherd</tt>, and so on. There is no single
web daemon; each <span class="acronym">URL</span> type uses a separate daemon to request information
from the server.</p>

<p><a name="INDEX-3205" />
There are several <span class="acronym">HTTP</span> servers available. The one
discussed here is the <em class="emphasis">Apache</em>
<tt class="command">httpd</tt>, which is easy to configure and very
flexible.  In this section, we'll discuss how to install and configure
the basic aspects of this version of <tt class="command">httpd</tt>. Later
in the chapter, we talk about how to write your own documents in
<span class="acronym">HTML</span> (the markup language used by
web pages) as well as more advanced aspects of
server configuration, such as providing interactive forms.</p>

<p>The first step, of course, is to obtain a Linux
<tt class="command">httpd</tt> binary.  Your Linux distribution may come
with <tt class="command">httpd</tt> installed, but make sure that this
in fact is the Apache <tt class="command">httpd</tt> and not one of the
older ones.
If you do not find Apache in your distribution, you can obtain the
<tt class="command">httpd</tt> sources from <a href="../../../../../../www.apache.org/">http://www.apache.org</a> 
and build it yourself. The <a href="apache.org">apache.org</a> web site contains complete
documentation for the software.</p>

<p><em class="emphasis">Apache--The Definitive
Guide</em> by Ben Laurie and Peter Laurie covers everything about Apache, including
sophisticated configuration issues.</p>

<p>Where the various files of an Apache installation go depends on
your distribution or the package you installed, but the following
is a common setup. You should locate the various pieces in your system 
before continuing:</p>

<dl>
<dt><b>/usr/sbin/httpd</b></dt><dd><p>Is the binary executable, which is the server
				itself. On Debian, this is
				<em class="filename">/usr/sbin/apache</em> instead.</p></dd>


<dt><b><em class="filename">/etc/httpd</em></b></dt><dd><p>Contains the configuration files for <tt class="command">httpd</tt>, most
notably <em class="filename">httpd.conf</em>. We 
discuss how to modify these files later. On Debian systems, this is
<em class="filename">/etc/apache</em> instead of
<em class="filename">/etc/httpd</em>.</p></dd>


<dt><b><em class="filename">/usr/local/httpd</em></b></dt><dd><p>Contains the HTML scripts to be served up to the site's clients. This
directory and those below it, the <em class="emphasis">web space</em>, are
accessible to anyone on the Web and therefore pose a severe security
risk if used for anything other than public data.</p></dd>


<dt><b><em class="filename">/var/log/httpd</em></b></dt><dd><p>Holds log files stored by the server.</p></dd>

</dl>

<p />

<p>Our task now is to modify the configuration files in the configuration
subdirectory. You should notice at least the following four files in
this directory:  
<em class="filename">access.conf-dist</em>, <em class="filename">httpd.conf-dist</em>, <em class="filename">mime.types</em>, and
<em class="filename">srm.conf-dist</em>. Copy the files with names ending in 
<em class="filename">-dist</em> and modify them for your own system. For example, 
<em class="filename">access.conf-dist</em> is copied to
<em class="filename">access.conf</em> and edited.</p>

<p>The latest version of Apache pretty much configures itself, but
in case things go wrong, we'll tell you here how to do it manually so
that you can fix things yourself.</p>

<p><a name="INDEX-3206" />
At <em class="filename">http://www.apache.org</em>, you will find complete 
documentation on how to configure <tt class="command">httpd</tt>. Here, we'll present
sample configuration files that correspond to an actual running
<tt class="command">httpd</tt>.</p>

<div class="sect3">
<h3 class="sect3">16.1.3.1. httpd.conf</h3>

<p><a name="INDEX-3207" />
The file <em class="filename">httpd.conf</em> is the main server-configuration file.  
First, copy <em class="filename">httpd.conf-dist</em> to <em class="filename">httpd.conf</em> and edit it.
In the following example, a sample <em class="filename">httpd.conf</em> is presented with comments explaining
each field:</p>

<blockquote><pre class="code"># This is the main server configuration file.
# See URL http://www.apache.org for instructions.

# Do NOT simply read the instructions in here without understanding
# what they do, if you are unsure consult the online docs. You have been
# warned.  

# Originally by Rob McCool. Copyright (c) 1995-1999 The Apache Group.
# All rights reserved. See http://www.apache.org/LICENSE.txt for license.

# ServerType is either inetd, or standalone.

ServerType standalone

# If you are running from inetd, go to "ServerAdmin".

# Port: The port the standalone listens to. For ports &lt; 1023, you will
# need httpd to be run as root initially.

Port 80

# HostnameLookups: Log the names of clients or just their IP numbers
#   e.g.   www.apache.org (on) or 204.62.129.132 (off)
# You should probably turn this off unless you are going to actually
# use the information in your logs, or with a CGI.  Leaving this on
# can slow down access to your site.
HostnameLookups on

# If you wish httpd to run as a different user or group, you must run
# httpd as root initially and it will switch.  

# User/Group: The name (or #number) of the user/group to run httpd as.
#  On SCO (ODT 3) use User nouser and Group nogroup
#  On HPUX you may not be able to use shared memory as nobody, and the
#  suggested workaround is to create a user www and use that user.
User wwwrun
Group #-2

# The following directive disables keepalives and HTTP header flushes for
# Netscape 2.x and browsers which spoof it. There are known problems with
# these

BrowserMatch Mozilla/2 nokeepalive

# ServerAdmin: Your address, where problems with the server should be
# e-mailed.

ServerAdmin mdw@zucchini.veggie.org

# ServerRoot: The directory the server's config, error, and log files
# are kept in

ServerRoot /usr/local/httpd

# BindAddress: You can support virtual hosts with this option. This
# option is used to tell the server which IP address to listen to. 
# It can either contain "*", an IP address, or a fully qualified 
# Internet domain name. See also the VirtualHost directive.

#BindAddress *

# ErrorLog: The location of the error log file. If this does not start
# with /, ServerRoot is prepended to it.

ErrorLog /var/log/httpd.error_log

# TransferLog: The location of the transfer log file. If this does not
# start with /, ServerRoot is prepended to it.

TransferLog /var/log/httpd.access_log

# PidFile: The file the server should log its pid to
PidFile /var/run/httpd.pid

# ScoreBoardFile: File used to store internal server process information.
# Not all architectures require this.  But if yours does (you'll know
# because this file is created when you run Apache) then you *must* 
# ensure that no two invocations of Apache share the same scoreboard file.
ScoreBoardFile /var/log/apache_status

# ServerName allows you to set a host name which is sent back to clients
# for your server if it's different than the one the program would get
# (i.e. use "www" instead of the host's real name).
#
# Note: You cannot just invent host names and hope they work. The name you 
# define here must be a valid DNS name for your host. If you don't
# understand this, ask your network administrator.

#ServerName www.veggie.org

# CacheNegotiatedDocs: By default, Apache sends Pragma: no-cache with each
# document that was negotiated on the basis of content. This asks proxy
# servers not to cache the document. Uncommenting the following line 
# disables this behavior, and proxies will be allowed to cache the
# documents.

#CacheNegotiatedDocs

# Timeout: The number of seconds before receives and sends time out

Timeout 300

# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.

KeepAlive On

# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We reccomend you leave this number high, for maximum performance.

MaxKeepAliveRequests 100

# KeepAliveTimeout: Number of seconds to wait for the next request

KeepAliveTimeout 15

# Server-pool size regulation.  Rather than making you guess how many
# server processes you need, Apache dynamically adapts to the load it
# sees --- that is, it tries to maintain enough server processes to
# handle the current load, plus a few spare servers to handle transient
# load spikes (e.g., multiple simultaneous requests from a single
# Netscape browser).

# It does this by periodically checking how many servers are waiting
# for a request.  If there are fewer than MinSpareServers, it creates
# a new spare.  If there are more than MaxSpareServers, some of the
# spares die off.  These values are probably OK for most sites ---

MinSpareServers 5
MaxSpareServers 10

# Number of servers to start --- should be a reasonable ballpark figure.

StartServers 5

# Limit on total number of servers running, i.e., limit on the number
# of clients who can simultaneously connect --- if this limit is ever
# reached, clients will be LOCKED OUT, so it should NOT BE SET TOO LOW.
# It is intended mainly as a brake to keep a runaway server from taking
# Unix with it as it spirals down...

MaxClients 150

# MaxRequestsPerChild: the number of requests each child process is
#  allowed to process before the child dies.
#  The child will exit so as to avoid problems after prolonged use when
#  Apache (and maybe the libraries it uses) leak.  On most systems, this
#  isn't really needed, but a few (such as Solaris) do have notable leaks
#  in the libraries.

MaxRequestsPerChild 30

# Proxy Server directives. Uncomment the following line to
# enable the proxy server:

#ProxyRequests On

# To enable the cache as well, edit and uncomment the following lines:

#CacheRoot /usr/local/etc/httpd/proxy
#CacheSize 5
#CacheGcInterval 4
#CacheMaxExpire 24
#CacheLastModifiedFactor 0.1
#CacheDefaultExpire 1
#NoCache a_domain.com another_domain.edu joes.garage_sale.com
<?troff .ne 10?>
# Listen: Allows you to bind Apache to specific IP addresses and/or
# ports, in addition to the default. See also the VirtualHost command

#Listen 3000
#Listen 12.34.56.78:80

#
# Read config files from /etc/httpsd
#
ResourceConfig  /etc/httpd/srm.conf
AccessConfig    /etc/httpd/access.conf
TypesConfig     /etc/httpd/mime.types</pre></blockquote>

<p><a name="INDEX-3208" />
The <tt class="literal">ServerType</tt> directive is used to specify how the server will
run--either as a standalone daemon (as seen here) or from <tt class="command">inetd</tt>.
For various reasons, it's usually best to run <tt class="command">httpd</tt> in standalone
mode. Otherwise, <tt class="command">inetd</tt> must spawn a new instance of <tt class="command">httpd</tt>
for each incoming connection.</p>

<p><a name="INDEX-3209" />
One tricky item here is the port number specification. You may
wish to run <tt class="command">httpd</tt> as a user other than root (that is, you
may not have <b class="emphasis-bold">root</b> access on the machine in question and wish to
run <tt class="command">httpd</tt> as yourself ). In this case, you must use a port
numbered 1024 or above. For example, if we specify:
<blockquote><pre class="code">Port 2112</pre></blockquote>


then we may run <tt class="command">httpd</tt> as a regular user. In this case, <span class="acronym">HTTP</span> <span class="acronym">URL</span>s
to this machine must be specified as:
<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/&#133%3B">http://www.veggie.org:2112/&#133;</a></pre></blockquote>
If no port number is given in the <span class="acronym">URL</span> (as is the
usual case), port 80 is assumed.</p>
</div>


<div class="sect3">
<h3 class="sect3">16.1.3.2. srm.conf</h3>

<p> 
<a name="INDEX-3210" />
<a name="INDEX-3211" />
<em class="filename">srm.conf</em> is the Server Resource Map file. It configures a number of
facilities provided by the server; for example, the directory where
<span class="acronym">HTML</span> documents are stored on your system, or what directory the various
<span class="acronym">CGI</span> binaries are located in. Let's walk through a sample <em class="filename">srm.conf</em> :</p>

<blockquote><pre class="code"># The directory where HTML documents will be held. 
DocumentRoot /usr/local/httpd/htdocs

# Personal directory for each user where HTML documents will be held.

UserDir public_html</pre></blockquote>

<p>Here, we specify the <tt class="literal">DocumentRoot</tt> directory, where documents to
be provided via <span class="acronym">HTTP</span> are stored. These
documents are written in the HyperText Markup Language (HTML), which is discussed in the section "<a href="ch16_01.htm">Section 16.1.4, "Writing HTML Documents"</a>."</p>

<p>For example, if someone were to access the <span class="acronym">URL</span>:
<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/fruits.html">http://www.veggie.org/fruits.html</a></pre></blockquote>
the actual file accessed would be <em class="filename">/usr/local/httpd/htdocs/fruits.html</em>.</p>

<p><a name="INDEX-3212" />
The <tt class="literal">UserDir</tt> directive specifies a directory each user may
create in his home directory for storing public <span class="acronym">HTML</span> files.
For example, if we were to use the <span class="acronym">URL</span>:
<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/~mdw/linux-info.html">http://www.veggie.org/~mdw/linux-info.html</a></pre></blockquote>

the actual file accessed would be <em class="filename">~mdw/public_html/linux-info.html</em>.</p>

<blockquote><pre class="code"># If a URL is received with a directory but no filename, retrieve this
# file as the index (if it exists).
DirectoryIndex index.html

# Turn on 'fancy' directory indexes
FancyIndexing on</pre></blockquote>

<p>Here, we enable the indexing features of <tt class="command">httpd</tt>. In
this case, if a browser attempts to access a directory
<span class="acronym">URL</span>, the file <em class="filename">index.html</em> in
that directory is returned, if it exists. Otherwise,
<tt class="command">httpd</tt> generates a "fancy" index with
icons representing various file types.  <a href="ch16_01.htm">Figure 16-2</a> shows an example of such an
index.
<a name="INDEX-3213" /></p>

<p><a name="INDEX-3214" />
Icons are assigned using the <tt class="literal">AddIcon</tt> directive, as seen here:
<blockquote><pre class="code"># Set up various icons for use with fancy indexes, by filename
# E.g., we use DocumentRoot/icons/movie.xbm for files ending
#     in .mpg and .qt
AddIcon /icons/movie.xbm .mpg
AddIcon /icons/back.xbm ..
AddIcon /icons/menu.xbm ^^DIRECTORY^^
AddIcon /icons/blank.xbm ^^BLANKICON^^
DefaultIcon /icons/unknown.xbm</pre></blockquote></p>

<p>The icon filenames (such as <em class="filename">/icons/movie.xbm</em>) are
relative to <tt class="literal">DocumentRoot</tt> by default. (There are
other ways to specify pathnames to documents and icons--for
example, by using aliases. This is discussed later.) There is also an
<tt class="literal">AddIconByType</tt> directive, which lets you specify an
icon for a document based on the document's <span class="acronym">MIME</span>
type and an <tt class="literal">AddIconByEncoding</tt> directive, which lets
you specify an icon for a document based on the document's encoding
(i.e., whether and how it is compressed). These encodings are
described further later in the section "<a href="ch16_01.htm">Section 16.1.4.4, "An aside: MIME types"</a>."
<a name="INDEX-3215" />
<a name="INDEX-3216" /></p>

<p>You can also specify an icon to be used when none of
		  the above match. This is done with the
<a name="INDEX-3217" />
		  <tt class="literal">DefaultIcon</tt> directive.</p>

<p>The optional <tt class="literal">ReadmeName</tt> and
<tt class="literal">HeaderName</tt> directives specify the names of files to
be included in the index generated by <tt class="command">httpd</tt> :</p>

<blockquote><pre class="code">ReadmeName README
HeaderName HEADER</pre></blockquote>

<p>Here, if the file <em class="filename">README.html</em> exists in the
current directory, it will be appended to the index. The file
<em class="filename">README</em> will be appended if
<em class="filename">README.html</em> does not exist. Likewise,
<em class="filename">HEADER.html</em> or <em class="filename">HEADER</em> will
be included at the top of the index generated by
<tt class="command">httpd</tt>. You can use these files to describe the
contents of a particular directory when an index is requested by the
browser:</p>

<blockquote><pre class="code"># Local access filename
AccessFileName .htaccess

# Default MIME type for documents
DefaultType text/plain</pre></blockquote>

<p><a name="INDEX-3218" />
The <tt class="literal">AccessFileName</tt> directive specifies the name of
the <em class="emphasis">local access file</em> for each directory. (This
is described later, along with the discussion about the
<em class="filename">access.conf</em> file.) The
<tt class="literal">DefaultType</tt> directive specifies the
<span class="acronym">MIME</span> type for documents not listed in
<em class="filename">mime.types</em>. This is described
further in the section "<a href="ch16_01.htm">Section 16.1.4.4, "An aside: MIME types"</a>":</p>

<p><blockquote><pre class="code"># Set location of icons
Alias /icons/ /usr/local/html/icons/

# Set location of CGI binaries
ScriptAlias /cgi-bin/ /usr/local/httpd/cgi-bin/</pre></blockquote>


<a name="INDEX-3219" />
The <tt class="literal">Alias</tt> directive specifies a pathname alias for
any of the documents listed in <em class="filename">srm.conf</em> or
accessed by a <span class="acronym">URL</span>. Earlier, we used the
<tt class="literal">AddIcon</tt> directive to set icon names using pathnames
such as <em class="filename">/icons/movie.xbm</em>. Here, we specify that
the pathname <em class="filename">/icons/</em> should be translated to
<em class="filename">/usr/local/html/icons/</em>.  Therefore, the various
icon files should be stored in the latter directory. You can use
<tt class="literal">Alias</tt> to set aliases for other pathnames as well.</p>

<p><a name="INDEX-3220" />
The <tt class="literal">ScriptAlias</tt> directive is similar in nature, but it
sets the actual location of <span class="acronym">CGI</span> scripts on the
system. Here, we wish to store scripts in the directory
<em class="filename">/usr/local/httpd/cgi-bin/</em>. Any
time a <span class="acronym">URL</span> is used with a leading directory component of
<em class="filename">/cgi-bin/</em>, it is
translated into the actual directory name. More information on
<span class="acronym">CGI</span> and scripts is included in the section
"<a href="ch16_01.htm">Section 16.1.5.2, "Writing the CGI script"</a>."</p>
</div>


<div class="sect3">
<h3 class="sect3">16.1.3.3. access.conf</h3>

<p><a name="INDEX-3221" />
The last configuration file that requires your immediate attention is
<em class="filename">access.conf</em>, which is the global access
configuration file for <tt class="command">httpd</tt>. It specifies which
files may be accessed and in what ways.  You may also have a
per-directory access configuration file if you require greater
specificity. (Recall that we used the
<tt class="literal">AccessFileName</tt> directive in
<em class="filename">srm.conf</em> to set the local access file for each
directory to <em class="filename">.htaccess</em>.)</p>

<p> 
Here is a sample <em class="filename">access.conf</em> file. It consists of
a number of <tt class="literal">&lt;Directory&gt;</tt> items, each of which
specifies the options and attributes for a particular directory:

<blockquote><pre class="code"># Set options for the cgi-bin script directory.
&lt;Directory /usr/local/html/cgi-bin&gt;
Options Indexes FollowSymLinks
&lt;/Directory&gt;</pre></blockquote>


Here, we specify that
the <span class="acronym">CGI</span> script directory
should have the access options <tt class="literal">Indexes</tt> and
<tt class="literal">FollowSymLinks</tt>. There are a number of access
options available. These include:</p>

<dl>
<dt><b><tt class="literal">FollowSymLinks</tt></b></dt><dd><p>Symbolic links in this directory should be 
followed to retrieve the documents they point to.</p></dd>


<dt><b><tt class="literal">ExecCGI</tt></b></dt><dd><p>Allow the execution of <span class="acronym">CGI</span> scripts from this directory.</p></dd>


<dt><b><tt class="literal">Indexes</tt></b></dt><dd><p>Allow indexes to be generated from this directory.</p></dd>


<dt><b><tt class="literal">None</tt></b></dt><dd><p>Disable all options for this directory.</p></dd>


<dt><b><tt class="literal">All</tt></b></dt><dd><p>Enable all options for this directory.</p></dd>

</dl>

<p>There are other options as well; see the <tt class="command">httpd</tt> documentation for
details.</p>

<p>Next, we enable several options and other attributes for
<em class="filename">/usr/local/httpd/htdocs</em>, the directory containing our <span class="acronym">HTML</span> documents: 
<blockquote><pre class="code">&lt;Directory /usr/local/httpd/htdocs&gt;

Options Indexes FollowSymLinks

# Allow the local access file, .htaccess, to override any attributes
# listed here
AllowOverride All

# Access restrictions for documents in this directory
&lt;Limit GET&gt;
order allow,deny
allow from all
&lt;/Limit&gt;

&lt;/Directory&gt;</pre></blockquote>

Here, we turn on the <tt class="literal">Indexes</tt> and
<tt class="literal">FollowSymLinks</tt> options for this directory. The
<tt class="literal">AllowOverride</tt> option allows the local access file
in each directory (<em class="filename">.htaccess</em>, set in
<em class="filename">srm.conf</em> &thinsp;) to override any of the
attributes given here. The <em class="filename">.htaccess</em> file has the
same format as the global <em class="filename">access.conf</em> but
applies only to the directory in which it is located.  This way, we
can specify attributes for particular directories by including a
<em class="filename">.htaccess</em> file in those directories instead of
listing the attributes in the global file.</p>

<p>The primary use for local access files is to allow individual
users to set the access permissions for personal <span class="acronym">HTML</span> directories
(such as <em class="filename">~/public_html</em>) without having to
ask the system administrator to modify the global access file. 
There are security issues associated with this, however. For example,
a user might enable access permissions in her own directory
such that any browser can run expensive server-side <span class="acronym">CGI</span> scripts. 
If you disable the <tt class="literal">AllowOverride</tt> feature, users
cannot get around the access attributes specified in the global
<em class="filename">access.conf</em>. This can be done by using:
<blockquote><pre class="code">AllowOverride None</pre></blockquote>

which effectively disables local <em class="filename">.htaccess</em> files.</p>

<p>The <tt class="literal">&lt;Limit GET&gt;</tt> field is used to specify access rules for
browsers attempting to retrieve documents from this server. In this case,
we specify <tt class="literal">order allow,deny</tt>, which means that <tt class="literal">allow</tt> rules
should be evaluated before <tt class="literal">deny</tt> rules. We then instate the 
rule <tt class="literal">allow from all</tt>, which simply means any host may 
retrieve documents from the server. If you wish to deny access from
a particular machine or domain, you could add the line:
<blockquote><pre class="code">deny from .nuts.com biffnet.biffs-house.us</pre></blockquote>

The first entry denies access from all sites in the <a href="nuts.com">nuts.com</a> domain.
The second denies access from the site ftp://biffnet.biffs-house.us.</p>
</div>


<div class="sect3">
<h3 class="sect3">16.1.3.4. Starting httpd</h3>

<p>Now you're ready to run <tt class="command">httpd</tt>, allowing your machine to service
<span class="acronym">HTTP</span> <span class="acronym">URL</span>s. As mentioned previously, you can run <tt class="command">httpd</tt> from
<tt class="command">inetd</tt> or as a standalone server. Here, we describe how to run
<tt class="command">httpd</tt> in standalone mode.</p>

<p>All that's required to start <tt class="command">httpd</tt> is to run the command:
<blockquote><pre class="code">httpd -f <em class="replaceable">configuration-file</em></pre></blockquote>

where <em class="replaceable">configuration-file</em> is the pathname of <em class="filename">httpd.conf</em>.
For example: 
<blockquote><pre class="code">/usr/sbin/httpd -f /etc/httpd/httpd.conf</pre></blockquote>

starts up <tt class="command">httpd</tt>, with configuration files found in
<em class="filename">/etc/httpd</em>.</p>

<p>Watch the <tt class="command">httpd</tt> error logs (the location of which is given in
<em class="filename">httpd.conf</em> &thinsp;) for any errors that might occur when trying to
start up the server or when accessing documents. Remember you
must run <tt class="command">httpd</tt> as root if it is to use a port numbered
1023 or less. Once you have <tt class="command">httpd</tt> working to your satisfaction,
you can start it automatically at boot time by including the 
appropriate <tt class="command">httpd</tt> command line in one of your system <em class="filename">rc</em>
files, such as <em class="filename">/etc/rc.d/rc.local</em>.</p>

<p><a name="INDEX-3222" />
Modern releases of Apache also provide a utility called
<tt class="command">apachectl</tt> that controls the starting, stopping,
reloading, and so on of the <tt class="command">httpd</tt> process.
<a name="INDEX-3223" /></p>

<p>Before you can request documents via <span class="acronym">HTTP</span> from your browser,
you'll need to write them. This is the subject of the next section.</p>

<a name="INDEX-3224" /><a name="INDEX-3,225" /><a name="INDEX-3,226" />
</div>
</div>




<a name="x-100-3-sec-net-www-html" /><div class="sect2">
<h3 class="sect2">16.1.4. Writing HTML Documents</h3>

<p><a name="INDEX-3227" />
<a name="INDEX-3228" />
<a name="INDEX-3229" />
<a name="INDEX-3230" />
Documents requested by <span class="acronym">HTTP</span> may be in several
forms. These forms include images, PostScript files, sounds,
<span class="acronym">MPEG</span> movies, and so forth. The
<em class="filename">mime.types</em> configuration file describes the
document types that <tt class="command">httpd</tt> understands.</p>

<p>The most common type of document serviced by <span class="acronym">HTTP</span>
is an <span class="acronym">HTML</span> file. <span class="acronym">HTML</span> documents
support text, links to other documents, inline images, and so
forth. Most documents that you'll see on the Web are written in
<span class="acronym">HTML</span>.  A more powerful alternative named
<span class="acronym">XML</span> has been getting a lot of press, but its
strength lies in supporting specialized web applications, such as
documents maintained in multiple languages and everybody's favorite
buzzword--electronic commerce.  <span class="acronym">HTML</span> is sufficient
for traditional, standalone pages.</p>

<p><span class="acronym">HTML</span> is surprisingly easy to learn. With the
tutorial included here, you should be on your way to writing
<span class="acronym">HTML</span> documents and providing information to the Web
in less than an hour.</p>

<p>Many tools allow you to convert other
markup languages (such as LaTeX, Microsoft <span class="acronym">RTF</span>, and so forth) to <span class="acronym">HTML</span>,
and vice versa. If you have particularly long documents in another
formatting language that you wish to provide on the Web, it might be
easier to convert them automatically to <span class="acronym">HTML</span> or provide a PostScript
or <span class="acronym">DVI</span> image of the documents instead.</p>

<p>The canonical source for <span class="acronym">HTML</span> information is the
<span class="acronym">URL</span>:

<blockquote><pre class="code"><a href="../../../../../../www.ncsa.uiuc.edu/General/Internet/www/HTMLPrimer.html">http://www.ncsa.uiuc.edu/General/Internet/www/HTMLPrimer.html</a></pre></blockquote>


which is a beginner's guide to writing <span class="acronym">HTML</span>
documents. Here, we'll present the essentials of
<span class="acronym">HTML</span> to get you up to speed.</p>

<div class="sect3">
<h3 class="sect3">16.1.4.1. HTML basics</h3>

<p>If you're used to other formatting languages, such as TeX,
<span class="acronym">HTML</span> appears quite simple in comparison. Here is a
minimal <span class="acronym">HTML</span> document (which to be precise is not 
exactly correct HTML but something that all browsers understand):</p>

<blockquote><pre class="code">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Ye Olde Generic HTML Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Writing HTML for Fun and Profit&lt;/h1&gt;

Although writing HTML documents may not be a commmon source 
of income, &lt;em&gt;authors&lt;/em&gt; tend to bend the rules in this
respect.

&lt;p&gt; The advantage? It's really too easy for words.
&lt;/body&gt;
&lt;/html&gt;</pre></blockquote>

<p><a name="INDEX-3231" />
 
Within <span class="acronym">HTML</span> documents,
<em class="emphasis">elements</em> are denoted by a
<tt class="literal">&lt;tag&gt;</tt>&#133;<tt class="literal">&lt;/tag&gt;</tt>
pair.<a href="#FOOTNOTE-62">[62]</a></p><blockquote>

<a name="FOOTNOTE-62" /><p>[62]<span class="acronym">HTML</span> is really a Document Type Definition in Standard Generalized Markup
Language (<span class="acronym">SGML</span>). <span class="acronym">SGML</span> defines the
<tt class="literal">&lt;tag&gt;</tt>&#133;<tt class="literal">&lt;/tag&gt;</tt>
conventions.</p>

</blockquote>

<p><a name="INDEX-3232" />
<a name="INDEX-3233" />
As you can see, we begin the document with a header that contains the line:
<blockquote><pre class="code">&lt;title&gt;Ye Olde Generic HTML Document&lt;/title&gt;</pre></blockquote>

which defines the title for this document. In the body that follows
is an <tt class="literal">&lt;h1&gt;</tt> element, which is a top-level heading. Under
Netscape Navigator for X, the title generally appears in the 
<em class="emphasis">Document Title</em> window and the heading within the document itself.</p>

<p>All <span class="acronym">HTML</span> documents should have a title, but headings
are, of course, optional. To <span class="acronym">HTML</span>, a heading is
just a portion of text that is set in a larger and/or bolder font. It
has no bearing on the actual document structure.</p>

<p> 
<span class="acronym">HTML</span> supports six levels of headings:</p>

<blockquote><pre class="code">&lt;h1&gt;First-level heading&lt;/h1&gt;
&lt;h2&gt;Second-level heading&lt;/h2&gt;
&#133;
&lt;h6&gt;Sixth-level heading&lt;/h6&gt;</pre></blockquote>

<p><a name="INDEX-3234" />
Following the heading is the body of the document. As you can see,
we use the <tt class="literal">&lt;em&gt;</tt> tag to emphasize text:
<blockquote><pre class="code"> ...of income, &lt;em&gt;authors&lt;/em&gt; tend to bend the rules in this...</pre></blockquote></p>

<p><a name="INDEX-3235" />
Paragraphs are separated by a <tt class="literal">&lt;p&gt;</tt>
tag. <span class="acronym">HTML</span> ignores blank lines and indentation in
the document. Therefore, to skip a line and begin a new paragraph,
using <tt class="literal">&lt;p&gt;</tt> is necessary (unlike TeX, for
example, which causes paragraph breaks at blank lines).</p>
</div>


<div class="sect3">
<h3 class="sect3">16.1.4.2. Viewing the document</h3>

<p>Before we go much further with <span class="acronym">HTML</span>, let's describe how to 
look at your first work of hypertext art. Most web browsers allow 
you to open a 
local <span class="acronym">HTML</span> document and view it. For example, under Navigator,
selecting Open Page from the
File menu and then clicking Choose File... allows you to
view an <span class="acronym">HTML</span> file. Other browsers, such as Lynx, provide similar
mechanisms. You should first save your <span class="acronym">HTML</span> document in a file
(such as <em class="filename">sample.html</em> ) and view it with your web browser.</p>

<p>When viewed in Netscape Navigator, our sample document looks
like <a href="ch16_01.htm">Figure 16-4</a>. As you can see, Navigator does
the actual "text formatting" for you; all that is required on your
end is to write the document and point your web browser at it.</p>

<a name="x-100-3-fig-html-samp1" /><div class="figure"><img src="figs/rl3_1604.gif" alt="Figure 16-4" /></div>
<h4 class="objtitle">Figure 16-4. Sample HTML document displayed by Netscape</h4><p>It's also quite easy to make your new <span class="acronym">HTML</span> documents available via
the Web. Assuming you have configured <tt class="command">httpd</tt> as described
in the previous section, you can place the <span class="acronym">HTML</span> file in the
<tt class="command">httpd</tt> <tt class="literal">DocumentRoot</tt> directory (in our case, this is 
<em class="filename">/usr/local/httpd/htdocs</em>&hairsp;).</p>

<p>Therefore, assuming the previous document is saved as 
<em class="filename">/usr/local/httpd/htdocs/sample.html</em>, and <tt class="command">httpd</tt> is running on your
system, anyone can access the document by opening the <span class="acronym">URL</span>:

<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/sample.html">http://www.veggie.org/sample.html</a></pre></blockquote>

with a web browser. (Of course, substituting your
own hostname for www.veggie.org.)</p>

<p>Note that you can create directories, symbolic links, and so forth
within the <tt class="literal">DocumentRoot</tt> directory. Any
<span class="acronym">HTTP</span> <span class="acronym">URL</span>s to your system will
access filenames that are relative to
<tt class="literal">DocumentRoot</tt>. So if we create the directory
<em class="filename">/usr/local/httpd/htdocs/my-docs</em> and place
<em class="filename">sample.html</em> there, the corresponding
<span class="acronym">URL</span> is:

<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/my-docs/sample.html">http://www.veggie.org/my-docs/sample.html</a></pre></blockquote></p>
</div>


<div class="sect3">
<h3 class="sect3">16.1.4.3. Using links</h3>

<p><a name="INDEX-3236" />
In order to refer to other documents, or sections within the same 
document, <em class="emphasis">links</em> are used within the <span class="acronym">HTML</span> source. For example:
<blockquote><pre class="code">&lt;p&gt; You can find more information about HTML 
&lt;a href="http://www.w3.org/MarkUp/"&gt; here &lt;/a&gt;.</pre></blockquote>

Within Navigator, this sentence will look like <a href="ch16_01.htm">Figure 16-5</a>.</p>

<a name="x-100-3-fig-html-samp2" /><div class="figure"><img src="figs/rl3_1605.gif" alt="Figure 16-5" /></div>
<h4 class="objtitle">Figure 16-5. Link displayed by Netscape</h4><p>The word "here" is highlighted, indicating that it is a
link. Clicking on the link within Netscape retrieves the document
pointed to by the <span class="acronym">URL</span>:

<blockquote><pre class="code"><a href="../../../../../../www.w3.org/MarkUp/">http://www.w3.org/MarkUp/</a></pre></blockquote>

<a name="INDEX-3237" />
<a name="INDEX-3238" />
The <tt class="literal">&lt;a&gt;</tt> element is known as an
<em class="emphasis">anchor</em> ; it 
specifies a link that is associated with a particular region of
text (in this case, the word "here").</p>

<p><a name="INDEX-3239" /> 
The <tt class="literal">&lt;a&gt;</tt> element we used is known as an <em class="emphasis">absolute link</em>. That
is, the <span class="acronym">URL</span> includes the complete machine and
pathname specification. For documents on the same machine, you should
use <em class="emphasis">relative links</em>, such as:
<a name="INDEX-3240" />
 
 
<blockquote><pre class="code">&lt;p&gt; You can also access the &lt;a href="gardening.html"&gt;Vegetable Gardening 
    Home Page&lt;/a&gt;.</pre></blockquote>


<span class="acronym">URL</span> names in relative links are relative to the
directory in which the current <span class="acronym">HTML</span> document is
located. The <em class="emphasis">type</em> of <span class="acronym">URL</span>
(e.g., <em class="emphasis">http</em>, <em class="emphasis">ftp</em>, and so on)
is assumed to be identical to that of the <span class="acronym">URL</span> of
the current document.  That is, if the previous text is found within the
document:

<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/my-docs/sample.html">http://www.veggie.org/my-docs/sample.html</a></pre></blockquote>

the link points to the <span class="acronym">URL</span>:

<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/my-docs/gardening.html">http://www.veggie.org/my-docs/gardening.html</a></pre></blockquote></p>

<p> 
 
If the filename used in a relative link begins with a slash
(<em class="filename">/&hairsp;</em> ), as in:

<blockquote><pre class="code">Click &lt;a href="/info/veggie.html"&gt;here&lt;/a&gt; for more information.</pre></blockquote>


the <span class="acronym">URL</span> is assumed to be relative to the <tt class="literal">DocumentRoot</tt> directory. In
this case, the <span class="acronym">URL</span> is equivalent to:
<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/info/veggie.html">http://www.veggie.org/info/veggie.html</a></pre></blockquote></p>

<p>Relative links can also point to the parent directory, as in:
<blockquote><pre class="code">&lt;a href="../plants/plants.html"&gt;Here&lt;/a&gt; is more about plants.</pre></blockquote></p>

<p>The use of relative links is important for documents that are related.
They allow you to rearrange the directory
hierarchy of <span class="acronym">HTML</span> files without rendering all your links obsolete.
However, when accessing unrelated documents on the same system, it
might be best to use an absolute link. In this way, the location of
your document does not depend on the location of others on the same
system.</p>

<p>You can also use links to refer to sections within the same document.
For example, the link:
<blockquote><pre class="code">See &lt;a href="#Genetics"&gt;below&lt;/a&gt; for information on 
genetically engineered vegetables.</pre></blockquote>

refers to the location within the current document, tagged
as so:
<blockquote><pre class="code">&lt;a name="Genetics"&gt;
&lt;h1&gt;Genetically Engineered Vegetables: Our Specialty&lt;/h1&gt; &lt;/a&gt;</pre></blockquote>

Here, the anchor uses the <tt class="literal">name</tt> attribute, instead of <tt class="literal">href</tt>.
In addition, the text within the anchor is the entire heading name. 
It's not required that you use headings as <tt class="literal">name</tt> anchors, but it 
usually makes sense to do so when you want to have cross references
to other "sections" of the document. For instance, when a user selects 
the link pointing to this anchor, they will see the section heading:
<blockquote><pre class="code"><b class="emphasis-bold">Genetically Engineered Vegetables: Our Specialty</b></pre></blockquote>
at the top of the Netscape Navigator document window.</p>

<p>Links can also refer to particular locations within other documents.
For example:
<blockquote><pre class="code">&lt;a href="tomatoes.html#Genetics"&gt;Here&lt;/a&gt; is more information on
our mutated tomatoes.</pre></blockquote>

refers to the section labeled with <tt class="literal">&lt;a name="Genetics"&gt;</tt>
in the document <em class="filename">tomatoes.html</em>.</p>

<p>As you might guess, you are not limited to making links to other
<span class="acronym">HTML</span> documents. Links can point to image files, sounds, PostScript files,
as well as other <span class="acronym">URL</span> types such as <span class="acronym">FTP</span>, Gopher, or <span class="acronym">WAIS</span> services.
In short, any valid <span class="acronym">URL</span> can serve as a link. For example:

<blockquote><pre class="code">Click &lt;a href="ftp://ftp.veggie.org/pub/"&gt;here&lt;/a&gt; to access our
anonymous FTP archive.</pre></blockquote>


provides a link to the named <span class="acronym">FTP URL</span>.</p>
</div>


<a name="x-100-3-sec-net-www-mime" /><div class="sect3">
<h3 class="sect3">16.1.4.4. An aside: MIME types</h3>

<p><a name="INDEX-3241" />
<span class="acronym">MIME</span> stands for
<em class="emphasis">Multipurpose Internet Mail Extensions</em>.  As the
named suggests, it was originally developed for electronic mail and is
a standard for transporting documents that contain data other than
plain printable <span class="acronym">ASCII</span> text. You can find more
information about MIME types at:
<blockquote><pre class="code"><a href="../../../../../../www.w3.org/TR/REC-html40/ types.html#h-6.7">http://www.w3.org/TR/REC-html40/ types.html#h-6.7</a></pre></blockquote>
When you link to images or sounds, the range of valid image and sound types 
you may use depends on the abilities of the browser. For example,
when accessing the <span class="acronym">URL</span>:
<blockquote><pre class="code"><a href="../../../../../../www.veggie.org/pics/artichoke.gif">http://www.veggie.org/pics/artichoke.gif</a></pre></blockquote>
the browser will be responsible for running a separate program to
display the image. However, the server providing the image must
tell the browser what type of data the incoming image is.
This is handled by the <em class="filename">mime.types</em> file, in the <tt class="command">httpd</tt>
configuration directory. This file contains lines such as:
<blockquote><pre class="code">image/gif                      gif
image/jpeg                     jpeg jpg jpe
audio/basic                    au snd
application/postscript         ai eps ps
text/html                      html
text/plain                     txt</pre></blockquote>

The first field in each line defines the <span class="acronym">MIME</span> type
name for the document in question. 
The remaining fields indicate filename extensions that the
<span class="acronym">MIME</span> type corresponds to. In this case, any
filenames ending in <em class="filename">.gif</em> are treated as
<tt class="literal">image/gif</tt> type documents.</p>

<p>When the browser (say, Netscape Navigator) retrieves a document, it
also gets information on the <span class="acronym">MIME</span> type associated
with it from the server.  In this way, the browser knows how to deal
with the document. For <tt class="literal">text/html</tt> documents,
Navigator simply formats the <span class="acronym">HTML</span> source text and
displays it in the document window, for <tt class="literal">image/gif</tt>
documents, it uses internal image viewing code to display the graphic. For
<tt class="literal">image/png</tt> 
documents, Navigator runs a separate image viewer, such as
<tt class="command">xv</tt>. Similarly,
<tt class="literal">application/postscript</tt> documents are viewed using
Ghostview on most Unix systems.</p>

<p>How individual <span class="acronym">MIME</span> types are dealt with is up to the browser. 
Navigator provides an option that allows you to specify a program
to be run to process documents of a particular type.</p>

<p><a name="INDEX-3242" />
The <em class="filename">srm.conf</em> file can also contain a
<tt class="literal">DefaultType</tt> directive, which specifies which MIME
type to use when all the other types do not apply. We use:

<blockquote><pre class="code">DefaultType   text/plain</pre></blockquote>


If the server is unable to determine the type of document, it assumes
<tt class="literal">text/plain</tt>, which is used for unformatted text
files. Netscape displays these text files in a constant-width font in
the document window.</p>
</div>


<div class="sect3">
<h3 class="sect3">16.1.4.5. Embedded images</h3>

<p> 
<a name="INDEX-3243" />
<a name="INDEX-3244" />
<a name="INDEX-3245" />
One of the nicer features provided by <span class="acronym">HTML</span> is the
ability to include images directly in the document. This is
accomplished with the <tt class="literal">&lt;img&gt;</tt> element:

<blockquote><pre class="code">&lt;img src="pics/cat.gif"&gt;
Tristessa, the Best Cat in the Universe.</pre></blockquote>


This embeds the image pointed to by the relative
<span class="acronym">URL</span> <tt class="literal">pics/cat.gif</tt> in the
document, as seen in <a href="ch16_01.htm">Figure 16-6</a>.
Absolute <span class="acronym">URL</span>s can be used with
<tt class="literal">&lt;img&gt;</tt> as well.</p>

<a name="x-100-3-fig-html-samp3" /><div class="figure"><img src="figs/rl3_1606.gif" alt="Figure 16-6" /></div>
<h4 class="objtitle">Figure 16-6. Image displayed by Netscape</h4><p>In theory, the <tt class="literal">&lt;img&gt;</tt> element can be used to
embed "any" document into the current one. However, it is
most commonly used for small images. The kind of images that can be
inline depends on the particular browser. <span class="acronym">GIF</span> and
<span class="acronym">JPEG</span>
images seem to be universally accepted. However, note that not all
browsers can display inline images--most notably text-based
browsers such as Lynx.</p>

<p><a name="INDEX-3246" />
You can also use <tt class="literal">&lt;img&gt;</tt> within an anchor, as in:</p>

<blockquote><pre class="code">&lt;a href="cat.html"&gt; 
&lt;img src="pics/cat.gif"&gt;&lt;/a&gt;
Tristessa, the Best Cat in the Universe.</pre></blockquote>

<p>The display won't look any different, but a user who clicks on the
picture will be taken to the page <em class="filename">cat.html</em> in the
same subdirectory as the current page. To make it clear that another
page is available, you should probably include both image and text in
the anchor. This can be accomplished just by moving the closing
<tt class="literal">&lt;/a&gt;</tt> tag:</p>

<blockquote><pre class="code">&lt;a href="cat.html"&gt; 
&lt;img align="center" src="pics/cat.gif" alt="Photo of cat"&gt;
Tristessa, the Best Cat in the Universe.
&lt;/a&gt;</pre></blockquote>

<p>As a slight aesthetic improvement (and to show that you have control
over the placement of items) we centered the text next to the image by
specifying <tt class="literal">align="center"</tt>. We also conformed to
modern accessibility guidelines by providing an <tt class="literal">alt</tt>
tag that displays explanatory text for people who can't see the
image, such as blind readers or anyone using a text-only browser. The
final version of our little page is shown in 
<a href="ch16_01.htm">Figure 16-7</a>.</p>

<a name="x-100-3-fig-html-samp4" /><div class="figure"><img src="figs/rl3_1607.gif" alt="Figure 16-7" /></div>
<h4 class="objtitle">Figure 16-7. Image and link displayed by Netscape</h4>
</div>


<div class="sect3">
<h3 class="sect3">16.1.4.6. More HTML features</h3>

<p>Obviously, you need more than section headings, links, and
inline images to write nicely formatted <span class="acronym">HTML</span> documents. <span class="acronym">HTML</span> 
provides many other text-layout features.</p>

<p><a name="INDEX-3247" />
<a name="INDEX-3248" />
<a name="INDEX-3249" />
<a name="INDEX-3250" />
A numbered list can be obtained with the <tt class="literal">&lt;ol&gt;</tt> element, using
<tt class="literal">&lt;li&gt;</tt> for each item in the list. 
<blockquote><pre class="code">Zucchinis have the following nice features:
&lt;ol&gt;
&lt;li&gt; They're green.
&lt;li&gt; They're crunchy.
&lt;li&gt; They taste great in salads.
&lt;/ol&gt;</pre></blockquote>

This list appears as shown in <a href="ch16_01.htm">Figure 16-8</a> when formatted by Netscape Navigator.</p>

<a name="x-100-3-fig-html-samp5" /><div class="figure"><img src="figs/rl3_1608.gif" alt="Figure 16-8" /></div>
<h4 class="objtitle">Figure 16-8. List displayed by Netscape</h4><p><a name="INDEX-3251" />
<a name="INDEX-3252" />
An unnumbered list can be obtained by using <tt class="literal">&lt;ul&gt;</tt> in place
of <tt class="literal">&lt;ol&gt;</tt>. Unnumbered list items are marked with bullets instead of incremental numbers.</p>

<p>Lists can be nested as well. When unnumbered lists are nested, 
the bullet style usually changes at each level, as in 
<a href="ch16_01.htm">Figure 16-9</a>. The <span class="acronym">HTML</span> source used to produce
this list is:
<a name="INDEX-3253" />
<blockquote><pre class="code">Here is an example of a nested list.
&lt;ul&gt;
&lt;li&gt; The first item.
&lt;li&gt; The second item.
     &lt;ul&gt;
     &lt;li&gt; The first nested item.
     &lt;li&gt; Another item.
          &lt;ul&gt;
          &lt;li&gt; Yet another level of nesting.
          &lt;/ul&gt;
     &lt;/ul&gt;
&lt;/ul&gt;</pre></blockquote>

The indentation is used strictly to make the source easier to
read; feel free to use whatever indentation style you deem appropriate.</p>

<a name="x-100-3-fig-html-samp6" /><div class="figure"><img src="figs/rl3_1609.gif" alt="Figure 16-9" /></div>
<h4 class="objtitle">Figure 16-9. Nested lists displayed by Netscape</h4><p><a name="INDEX-3254" />
<a name="INDEX-3255" />
Various types of text emphasis are available. We've already seen
<tt class="literal">&lt;em&gt;</tt>, which usually causes words to be placed in italics.
Note that how these items are displayed depends entirely on the
browser. The most commonly used emphasis tags are:</p>

<dl>
<?troff-vlindent .6i?><dt><b><tt class="literal">&lt;em&gt;</tt></b></dt><dd><p>Emphasized text, usually rendered as italics</p></dd>


<dt><b><tt class="literal">&lt;code&gt;</tt></b></dt><dd><p>Program source code, usually rendered in
 a constant-width font</p></dd>


<dt><b><tt class="literal">&lt;samp&gt;</tt></b></dt><dd><p>Sample output from a program, also in constant width</p></dd>


<dt><b><tt class="literal">&lt;kbd&gt;</tt></b></dt><dd><p>User keyboard input</p></dd>


<dt><b><tt class="literal">&lt;strong&gt;</tt></b></dt><dd><p>For strong emphasis, usually in boldface</p></dd>

</dl>

<p />

<p>Here is an example that uses several of these elements.
<blockquote><pre class="code">&lt;p&gt; &lt;em&gt;Amazing&lt;/em&gt;, she thought. The &lt;kbd&gt;find&lt;/kbd&gt; command can be 
used for almost &lt;strong&gt;anything!&lt;/strong&gt;</pre></blockquote>

This is displayed within Navigator as seen in <a href="ch16_01.htm">Figure 16-10</a>.</p>

<a name="x-100-3-fig-html-samp7" /><div class="figure"><img src="figs/rl3_1610.gif" alt="Figure 16-10" /></div><h4 class="objtitle">
Figure 16-10. Fonts displayed by Netscape</h4><p><a name="INDEX-3256" />
<a name="INDEX-3257" />
<a name="INDEX-3258" />
<a name="INDEX-3259" />
Note that <tt class="literal">&lt;code&gt;</tt>, <tt class="literal">&lt;samp&gt;</tt>, and <tt class="literal">&lt;kbd&gt;</tt> 
are all usually displayed as a constant-width typewriter font.
However, it is important to distinguish between 
different types of logical emphasis in documents. In this way,
we can change the typeface used to display <tt class="literal">&lt;kbd&gt;</tt> items
(for example, to a slanted font), but allow <tt class="literal">&lt;code&gt;</tt> and
<tt class="literal">&lt;samp&gt;</tt> to remain the same.</p>

<p><a name="INDEX-3260" />
<a name="INDEX-3261" />
<a name="INDEX-3262" />
<span class="acronym">HTML</span> also provides the <tt class="literal">&lt;b&gt;</tt>, <tt class="literal">&lt;i&gt;</tt>, and
<tt class="literal">&lt;tt&gt;</tt> tags to produce boldface, italic, and constant-width
text, respectively, should you wish to specify fonts directly.</p>

<p><a name="INDEX-3263" />
<a name="INDEX-3264" />
The <tt class="literal">&lt;pre&gt;</tt> element allows you to include "preformatted"
or "verbatim" text within an <span class="acronym">HTML</span> document:
<blockquote><pre class="code">The source code for &lt;code&gt;hello.c&lt;/code&gt; is as follows.
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;

void main() {
  printf("Hello, world!");
}
&lt;/pre&gt;</pre></blockquote>

This text will be displayed as seen in <a href="ch16_01.htm">Figure 16-11</a>.</p>

<a name="x-100-3-fig-html-samp8" /><div class="figure"><img src="figs/rl3_1611.gif" alt="Figure 16-11" /></div><h4 class="objtitle">
Figure 16-11. Preformatted text displayed by Netscape</h4><p><a name="INDEX-3265" />
<a name="INDEX-3266" />
<a name="INDEX-3267" />
<a name="INDEX-3268" />
<a name="INDEX-3269" />
<a name="INDEX-3270" />
<a name="INDEX-3271" />
Note the use of <tt class="literal">&amp;lt;</tt> to obtain <tt class="literal">&lt;</tt> and
<tt class="literal">&amp;gt;</tt> to obtain <tt class="literal">&gt;</tt>. This is necessary because
the <tt class="literal">&lt;</tt> and <tt class="literal">&gt;</tt> characters have a special
meaning within <span class="acronym">HTML</span> documents. Even within a <tt class="literal">&lt;pre&gt;</tt> element,
substitution is necessary.</p>

<p>Other special characters are available as well, including:</p>

<dl>
<?troff-vlindent .6i?><dt><b><tt class="literal">&amp;quot;</tt></b></dt><dd><p>To obtain a double-quote: "
<a name="INDEX-3272" />
<a name="INDEX-3273" /></p></dd>


<dt><b><tt class="literal">&amp;amp;</tt></b></dt><dd><p>To obtain an ampersand: &amp;</p></dd>


<dt><b><tt class="literal">&amp;eacute;</tt></b></dt><dd><p>To obtain an acute-accented <em class="emphasis">e</em>
<?troff \|?>: &eacute;</p></dd>


<dt><b><tt class="literal">&amp;ouml;</tt></b></dt><dd><p>To obtain an <em class="emphasis">o</em>-umlaut: &ouml;</p></dd>

</dl>

<p>The complete <span class="acronym">HTML</span> specification, located at:
<blockquote><pre class="code"><a href="../../../../../../www.w3.org/TR/REC-html40/">http://www.w3.org/TR/REC-html40/</a></pre></blockquote>
lists all the available codes.</p>

<p><a name="INDEX-3274" /> <a name="INDEX-3,275" /> 

You'll often seen a horizontal rule used in <span class="acronym">HTML</span>
documents to visually divide the page. This is obtained with the
<tt class="literal">&lt;hr&gt;</tt> element, as so:</p>

<blockquote><pre class="code">All right, I dare you to cross this line: &lt;p&gt;&lt;hr&gt;
&lt;p&gt; All right, I dare you to cross this one: &lt;p&gt;&lt;hr&gt;</pre></blockquote>

<p><a name="INDEX-3276" />

Finally, the <tt class="literal">&lt;address&gt;</tt> element is often used
at the end of <span class="acronym">HTML</span> documents to specify the name
and address of the author, or maintainer, of the page. For example:</p>

<blockquote><pre class="code">&lt;p&gt;&lt;hr&gt;&lt;p&gt;
&lt;address&gt;Mr. P. Head, potatoe@veggie.org&lt;/address&gt;</pre></blockquote>

<p>Many people link the name within the
<tt class="literal">&lt;address&gt;</tt> item to a personal home page.</p>
</div>


<div class="sect3">
<h3 class="sect3">16.1.4.7. Finding out more</h3>

<p>Within Netscape Navigator, you can view the <span class="acronym">HTML</span> source for any document on the Web.
While viewing the document in question, select the Document Source option
from the View menu. This gives you an inside look at how the
page was written. The Lynx web browser provides a similar option in
the form of the backslash (<tt class="literal">\</tt>) command.</p>

<a name="INDEX-3277" /><a name="INDEX-3,278" /><a name="INDEX-3,279" /><a name="INDEX-3,280" />
</div>
</div>




<div class="sect2">
<h3 class="sect2">16.1.5. Building Interactive Forms</h3>

<p> 
<a name="INDEX-3281" />
<a name="INDEX-3282" />
<a name="INDEX-3283" />
<a name="INDEX-3284" />
As mentioned in previous sections, Netscape Navigator and Apache <tt class="command">httpd</tt> include
support for <em class="emphasis">forms</em>, which allow the user to provide input 
(in the form of text-entry fields, buttons, menus, and so forth)
to a script, executed on the server. For example, one
form might include a text field for entering a username. Submitting
the form causes the server to run a <tt class="command">finger</tt> script, 
displaying the output as an <span class="acronym">HTML</span> document.</p>

<p>The ability to use forms depends on the capabilities of both the
browser and <em class="emphasis">httpd</em>
server. Not all browsers can view forms, but nowadays most do.
Also,
not all implementations of <tt class="command">httpd</tt> understand forms. 
We suggest using Apache <tt class="command">httpd</tt>, discussed earlier in this
chapter, which provides extensive forms support.</p>

<p>The canonical example of an interactive form is one where 
users can send electronic mail to the maintainer of the form page.
In this section, through the use of this example, we'll demonstrate
how to write forms and the server scripts that are executed by
the forms. Of course, with a browser that includes a mail client
of its own or that can be connected to a mail program, just putting
<tt class="literal">mailto:</tt> <em class="replaceable">mail_address</em> 
into the HTML page would suffice. But a form could also be part of a
larger application; for example, you might not only want to send
feedback via mail, but also order goods in an online shopping
application.</p>

<div class="sect3">
<h3 class="sect3">16.1.5.1. The HTML form document</h3>

<p> 
<a name="INDEX-3285" />
The first step in building a form is to write an <span class="acronym">HTML</span> document that
corresponds to the form itself. These <span class="acronym">HTML</span> pages contain a
<tt class="literal">&lt;form&gt;</tt> element, which in turn contains several other
elements denoting buttons, text-entry fields, and so forth.</p>

<p>Here, we present a small cross section of what forms can do. 
For an extensive example of forms use, see the <span class="acronym">URL</span>:
<blockquote><pre class="code"><a href="../../../../../../us.imdb.com/">http://us.imdb.com</a></pre></blockquote>
which is a comprehensive database of information on over 30,000 movies,
allowing you to search by title, genre, actors, directors, and so 
forth.</p>

<?troff .Nd 10?><p>Here is the <span class="acronym">HTML</span> document for our simple mail form:
<blockquote><pre class="code">1  &lt;title&gt;Ye Olde Generic Mail Form&lt;/title&gt; 
2  &lt;h1&gt;Send mail to me&lt;/h1&gt; 
3  &lt;p&gt;You can use this form to send me mail. 
4  
5  &lt;p&gt;&lt;hr&gt;&lt;p&gt; 
6  &lt;form method="POST" action="/cgi-bin/mailer.pl"&gt; 
7  &lt;input name="from"&gt; Your email address&lt;p&gt; 
8  &lt;input name="subject"&gt; Subject&lt;p&gt; 
9  &lt;input type=hidden name="to" value="mdw@veggie.org"&gt; 
10 &lt;hr&gt; 
11 Enter message body below:&lt;br&gt; 
12 &lt;hr&gt; 
13 &lt;textarea name="body" cols=60 rows=12&gt;&lt;/textarea&gt;&lt;p&gt; 
14 &lt;hr&gt; 
15 &lt;input type=submit value="Send mail"&gt;&lt;p&gt; 
16 &lt;/form&gt;</pre></blockquote></p>

<p>When viewed within Netscape Navigator, this form looks like
<a href="ch16_01.htm">Figure 16-12</a>.</p>

<a name="x-100-3-fig-net-www-form2" /><div class="figure"><img src="figs/rl3_1612.gif" alt="Figure 16-12" /></div>
<h4 class="objtitle">Figure 16-12. Form displayed by Netscape</h4><p>As you can see, the form uses several additional features of
<span class="acronym">HTML</span>. Let's walk through the file and describe them all.</p>

<p>Line 6 uses the <tt class="literal">&lt;form&gt;</tt> element, which encloses the entire
form itself. There are several options, or attributes, associated with
the <tt class="literal">&lt;form&gt;</tt> element.</p>

<p><a name="INDEX-3286" />
<a name="INDEX-3287" />
<a name="INDEX-3288" />
The <tt class="literal">method</tt> attribute specifies the means by which form 
information is sent to the server script. Valid methods are
<tt class="literal">GET</tt> and <tt class="literal">POST</tt>. The <tt class="literal">GET</tt> method passes information
as command-line arguments to the server script; the <tt class="literal">POST</tt> method
passes information to the script's standard input. This option has bearing
only on how you implement your server script; for various reasons, it's
strongly suggested that you use the <tt class="literal">POST</tt> method.</p>

<p><a name="INDEX-3289" />
 The <tt class="literal">action</tt> attribute specifies the <span class="acronym">URL</span> of the script that
this form executes on the server. <span class="acronym">CGI</span> scripts are
usually stored in a directory named <em class="filename">cgi-bin</em> that
must be specified in the <tt class="literal">ScriptAlias</tt> directive in
the <em class="filename">srm.conf</em> file.</p>

<p>Here, we specify that the script:
<blockquote><pre class="code">/cgi-bin/mailer.pl</pre></blockquote>

should be executed when the form is submitted. The next section 
describes how to write this script.</p>

<p><a name="INDEX-3290" />
Lines 7-9 use the <tt class="literal">&lt;input&gt;</tt> element. This is the most common
element found within a form; it specifies some kind of input item,
such as a text field, button, or checkbox. The <tt class="literal">&lt;input&gt;</tt>
element has several attributes.</p>

<p><a name="INDEX-3291" />
<a name="INDEX-3292" />
The <tt class="literal">name</tt> attribute specifies a unique string that
identifies this element to the server script.
The <tt class="literal">type</tt> attribute specifies the type of input element.
Its value can be <tt class="literal">text</tt>, <tt class="literal">radio</tt>, <tt class="literal">checkbox</tt>,
<tt class="literal">password</tt>, <tt class="literal">submit</tt>, <tt class="literal">reset</tt>, or <tt class="literal">hidden</tt>. If no <tt class="literal">type</tt>
is specified (as on lines 7 and 8), <tt class="literal">text</tt> is the default.
The <tt class="literal">value</tt> attribute specifies the default value associated
with this input item.</p>

<p>Several other attributes for <tt class="literal">input</tt> are also available; these set
the maximum length of input for text entry fields, and so forth.</p>

<p>Lines 7 and 8 define input elements named <tt class="literal">from</tt> and <tt class="literal">subject</tt>,
both of type <tt class="literal">text</tt>. These text-entry fields are used to enter
the sender's email address and the subject of the message.</p>

<p><a name="INDEX-3293" />
Line 9 defines a <tt class="literal">hidden</tt> element named <tt class="literal">to</tt>, which sets the
email address that mail should be sent to. This is a "trick"
that allows us to specify the recipient's email address within the 
<span class="acronym">HTML</span> form itself. Otherwise, we'd have to specify the recipient
address within the server script (<em class="filename">mailer.pl</em>
<?troff \|?>), which would
require each user that wished to use the mail form to have a 
private copy of the script. This way, any user on the system
can use the script, as long as he specifies his own address 
as the value of the <tt class="literal">to</tt> item. The reasons for this will become
clear in the next section, where we discuss the <em class="filename">mailer.pl</em>
script itself.</p>

<p><a name="INDEX-3294" />
On line 13, we use the <tt class="literal">&lt;textarea&gt;</tt> element. This element
denotes a multiline text-entry field, with scrollbars on the right
and bottom edges. As with <tt class="literal">&lt;input&gt;</tt>, the <tt class="literal">name</tt>
attribute names the element. The
<tt class="literal">cols</tt> and <tt class="literal">rows</tt> attributes set the size of
the <tt class="literal">textarea</tt>.</p>

<p>Note that unlike <tt class="literal">&lt;input&gt;</tt>, the 
<tt class="literal">&lt;textarea&gt;</tt> element has a corresponding <tt class="literal">&lt;/textarea&gt;</tt>
end tag on the same line. Any text that appears between
<tt class="literal">&lt;textarea&gt;</tt> and <tt class="literal">&lt;/textarea&gt;</tt> is the
default contents of the entry field.</p>

<p><a name="INDEX-3295" />
On line 15, we use another <tt class="literal">&lt;input&gt;</tt> element, of type
<tt class="literal">submit</tt>. This defines a button which, when pressed, submits
the form and runs the server script associated with it. The
<tt class="literal">value</tt> attribute specifies the text of the button as
displayed; in this case, it is <tt class="literal">"Send mail"</tt>.</p>

<p>Finally, on line 16, we end the form with a <tt class="literal">&lt;/form&gt;</tt>
end tag.</p>

<p>Multiple forms can be used within a single <span class="acronym">HTML</span> document; however, you
cannot nest one <tt class="literal">&lt;form&gt;</tt> within another.

A good book where you can learn about HTML and forms is
<em class="emphasis">HTML: The Definitive Guide</em> by Chuck Musciano and Bill Kennedy.</p>
</div>


<a name="x-100-3-sec-net-www-cgi" /><div class="sect3">
<h3 class="sect3">16.1.5.2. Writing the CGI script</h3>

<p><a name="INDEX-3296" />
<a name="INDEX-3297" />
Scripts executed by forms use the <span class="acronym">CGI</span>
convention, which specifies how data is passed from the form to the
script. At this point, it is not important to understand the 
details of the <span class="acronym">CGI</span> specification; however, you should be aware that
data is passed to scripts as a set of name/value pairs. For example,
given our sample form, let's say the user entered the address:
<blockquote><pre class="code">bsmarks@norelco.com</pre></blockquote>

in the <tt class="literal">from</tt> <tt class="literal">&lt;input&gt;</tt> field. The value 
<tt class="literal">bsmarks@norelco.com</tt> would then be associated with
the name <tt class="literal">from</tt> when passed to the script.</p>

<p>As mentioned previously, the mechanism by which these name/value pairs
are passed to the server script depends upon the form method
(<tt class="literal">GET</tt> or <tt class="literal">POST</tt>) used. In general, name/value pairs are encoded
in the form:
<blockquote><pre class="code"><em class="replaceable">action</em>?<em class="replaceable">name</em>=<em class="replaceable">val</em>&amp;<em class="replaceable">name</em>=<em class="replaceable">val</em>&amp;&#133;</pre></blockquote>

and passed to the server script either on the command line (in the case
of <tt class="literal">GET</tt>-method forms) or as standard input (in the case of
<tt class="literal">POST</tt>-method forms). In addition, certain characters (such as
<tt class="literal">=</tt>, <tt class="literal">&amp;</tt>, and so on) must be escaped. Several environment variables pass certain parameters
to the script.</p>

<p>Server scripts can be written in practically any language, such as
C, Perl, or even shell scripts. Because decoding the name/value pairs 
within a C program can be a bit harrowing, we instead show how to
implement a script in Perl, in which text-processing facilities are more
suited for this task.</p>

<p>The following example is the Perl script <em class="filename">mailer.pl</em>.
Put this script in the directory you have set aside to hold <span class="acronym">CGI</span>
scripts when you configured the system:</p>

<blockquote><pre class="code">#!/usr/bin/perl

use CGI qw(:standard);

print header(), start_html( "Mail form results" ),\
h1( "Mail form results" );

my $to = parse( "to" );
my $from = parse( "from" );
my $subject = parse( "subject" );
my $body = parse( "body" );

open (MAIL,"|/usr/lib/sendmail $to") || 
  die "&lt;p&gt;Error: Couldn't execute sendmail.\n";

print MAIL "To: $to\n";
print MAIL "From: $from\n";
print MAIL "subject: $subject\n\n";
print MAIL "$body\n";
close MAIL;

print p( "All right, mailed the following to &lt;tt&gt;$to&lt;/tt&gt;:" );
print p( "&lt;pre&gt;\nTo: $to\nFrom: $from\nsubject:\
$subject\n\n$body\n&lt;/pre&gt;" );
print end_html();</pre></blockquote>

<p>
If you're new to Perl, refer to the introduction given in 
<a href="ch13_01.htm">Chapter 13, "Programming
 Languages"</a>. However, you need
not be a Perl wizard to follow this code.</p>

<p>This script first loads the module <em class="filename">CGI.pm</em>, which
has been included in the Perl distribution since Perl 5.004; it will help you a
great deal when it comes to writing CGI scripts. We first use its
methods <tt class="literal">header()</tt>,
<tt class="literal">()start_html()</tt>, and
<tt class="literal">h1()</tt> to write the header, including the crucial
line:<blockquote><pre class="code">Content-type: text/html</pre></blockquote>

which informs the server to watch for the MIME type of data coming from the
script, and to start the HTML code. With <em class="filename">CGI.pm</em>
you do not even need to worry about the HTML syntax!</p>

<p>After printing out those initial lines, we use the routine
<tt class="literal">parse()</tt> from <em class="filename">CGI.pm</em>, which
parses the parameters passed to the CGI script. While this doesn't sound like 
much, parsing those parameters is actually no small feat, because
lots of things have to be taken into consideration. With
<tt class="literal">parse</tt>, you simply pass the name of the parameter
and get its value back.</p>

<p>The script then opens a pipe to <em class="filename">/usr/lib/sendmail</em>
in the program that sends the mail message. (If you use a mail handler other
than <tt class="command">sendmail</tt> on your system, this filename should be
modified.)  We then pass the message to <tt class="command">sendmail</tt>,
prefixing it with an appropriate header containing the
<tt class="literal">To:</tt>, <tt class="literal">From:</tt>, and
<tt class="literal">Subject:</tt> fields derived from the data given on the
form.</p>

<p>Note that there is a security risk here when 
<a name="INDEX-3298" />
		   you are using <tt class="command">sendmail</tt> like this,
		   because you do not know what is in the
		   <tt class="literal">$to</tt> variable. In addition, the pipe technique is
		   not very portable. In a production system, you would
		   probably use the Perl module
		   <tt class="literal">Mail::Mailer</tt> to send the mail, but since 
		   this has nothing to do with CGI scripting in particular, we 
		   leave this to your own explorations.</p>

<p>After closing the pipe to <tt class="command">sendmail</tt>, we print the
message as sent to standard output to allow the user to verify that
the message was processed correctly. Again, we use the method
<tt class="literal">p()</tt> from <em class="filename">CGI.pm</em> to output
the HTML code. Finally, we use <tt class="literal">end_html()</tt>
to correctly close the HTML tags.</p>

<p><a name="INDEX-3299" />
<a name="INDEX-3300" />
Keep in mind that there are always security issues at work when
dealing with <span class="acronym">HTML</span>-based forms. Be certain that your
scripts cannot be used to execute unauthorized processes on your
system. If your server scripts are <span class="acronym">CPU</span>-intensive,
you might want to limit access to them to prevent heavy system
load. In general, be sure that you know what you're doing when
providing forms on your web server.</p>

<a name="INDEX-3301" /><a name="INDEX-3,302" /><a name="INDEX-3,303" /><a name="INDEX-3,304" /><a name="INDEX-3,305" /><a name="INDEX-3,306" /><a name="INDEX-3,307" />
</div>
</div>
</div>











<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch15_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch16_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">15.4. NFS and NIS Configuration</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">16.2. Electronic Mail</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>