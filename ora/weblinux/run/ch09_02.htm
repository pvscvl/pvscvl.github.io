<?label 9.2. The Emacs Editor?><html><head><title>The Emacs Editor (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch09_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">9.2. The Emacs Editor</h2>

<p><a name="INDEX-2013" />
Text editors are among the most important applications in the Unix world.
They are used so often that many people spend more time within an editor 
than anywhere else on their Unix system. The same holds true for Linux.</p>

<p>The choice of an editor can be a religious one. Many editors exist,
but the Unix community has arranged itself into two major groups: the
Emacs camp and the <tt class="command">vi</tt> camp. Because of its somewhat 
nonintuitive user interface, many people (newcomers and seasoned users 
alike) prefer Emacs over
<tt class="command">vi</tt>. However, long-time users of <tt class="command">vi</tt> 
(and single-finger typists) use it more efficiently than
a more complex editor such as Emacs.</p>

<p>If <tt class="command">vi</tt> is one end of the 
text-editor spectrum, Emacs is the other; they are widely different
in their design and philosophy. Emacs is partly the brainchild of Richard
Stallman, founder of the Free Software Foundation and author of much
of the <span class="acronym">GNU</span> software.</p>

<p>Emacs is a very large system with more features than any single
Unix 
application to date (some people would even go so far as not to call
it an editor but an "integrated environment"). It contains
its own <span class="acronym">LISP</span> 
language engine you
can use to write extensions for the editor. (Many of the
functions within Emacs are written in Emacs <span class="acronym">LISP</span>). Emacs includes 
extensions for everything from compiling and debugging programs to 

reading and sending electronic mail to X Window System support and more. 
Emacs also includes its own online tutorial and documentation. The
book <em class="emphasis">Learning GNU Emacs</em> by Debra Cameron, Bill Rosenblatt, and Eric Raymond,
is a popular guide to the editor.</p>

<p>Most Linux distributions include two variants of Emacs.
<a name="INDEX-2014" />
<a name="INDEX-2015" />
<a name="INDEX-2016" />
	  <span class="acronym">GNU</span> Emacs is the original version, which is
	  still being developed, but development seems to have slowed
	  down. XEmacs is larger, slightly slower, but much more
	  user-friendly and better integrated with the X Window System
	  (even though you can also use it from the command line, despite its 
	  name). If you are not tight on memory and have a reasonably fast 
	  computer, we suggest using XEmacs. We will not cover the
	  differences here, though; the discussion in this section applies 
	  to both.</p>

<div class="sect2">
<h3 class="sect2">9.2.1. Firing It Up</h3>

<p><span class="acronym">GNU </span>Emacs is simply invoked as:
<blockquote><pre class="code">$ <tt class="userinput"><b>emacs</b></tt> <em class="replaceable">options</em></pre></blockquote>

likewise, XEmacs is invoked as
<blockquote><pre class="code">$ <tt class="userinput"><b>xemacs</b></tt> <em class="replaceable">options</em></pre></blockquote>

Most of the time, you don't need options. You can specify filenames on 
the command line, but it's more straightforward to read them in after
starting the program.</p>

<p>In Emacs lingo, <tt class="literal">C-x</tt> means
Ctrl-X, and <tt class="literal">M-p</tt> is equivalent to 
Alt-P. As you might guess, <tt class="literal">C-M-p</tt>
means Ctrl-Alt-P.</p>

<p>Using these conventions, press <tt class="literal">C-x</tt> followed by
<tt class="literal">C-f</tt> to read in a file or create a new one. The
keystrokes display a prompt at the bottom of your screen showing your
current working directory. You can create a buffer now to hold what
will end up to be the content of a new file; let's call the file
<em class="filename">wibble.txt</em>. We now see the
<?troff \p?> following:
<blockquote><pre class="code"><em class="emphasis"> </em> 


<span class="emphasis-reverse">-----Emacs: wibble.txt           (Fundamental)----All-------------------</span></pre></blockquote></p>

<p><a name="INDEX-2017" /> The
mode line at the bottom indicates the name of the file as well as the
type of buffer you're in (which here is
<tt class="literal">Fundamental</tt>).  Emacs supports many kinds of editing
modes; <tt class="literal">Fundamental</tt> is the default for plain-text
files, but other modes exist for editing C and TeX source, modifying
directories, and so on. Each mode has certain key bindings and commands
associated with it, as we'll see soon.  Emacs typically determines the
mode of the buffer based on the filename extension.</p>

<p>To the right of the buffer type is the word <tt class="literal">All</tt>,
which means that you are currently looking at the entire file (which
is empty).  Typically, you will see a percentage, which represents how
far into the file you are.</p>

<p>If you're running Emacs under the X Window System, a new window will
be created for the editor with a menu bar at the top, scrollbars, and
other goodies. In the section "<a href="ch11_04.htm">Section 11.4.7, "Emacs"</a>," in <a href="ch11_01.htm">Chapter 11, "Customizing Your X Environment"</a>, we discuss Emacs's
special features when used within X.</p>
</div>




<div class="sect2">
<h3 class="sect2">9.2.2. Simple Editing Commands</h3>

<p>Emacs is more straightforward than <tt class="command">vi</tt> when it comes
to basic text editing. The arrow keys should move the cursor around
the buffer; if they don't (in case Emacs is not configured for your
terminal), use the keys <tt class="literal">C-p</tt> (previous line),
<tt class="literal">C-n</tt> (next line), <tt class="literal">C-f</tt> (forward
character), and <tt class="literal">C-b</tt> (backward character).</p>

<p>If you find using the Alt key uncomfortable, press Esc and then
<tt class="literal">p</tt>.  Pressing and releasing Esc is equivalent to
holding down Alt.</p>

<p><a name="INDEX-2018" />
<a name="INDEX-2019" />

Already we must take the first aside on our tour of Emacs.  Literally
every command and key within Emacs is customizable.  That is, with a
"default" Emacs configuration, <tt class="literal">C-p</tt> maps
to the internal function <em class="emphasis">previous-line</em>, which
moves the cursor (also called "point") to the previous
line. However, you can easily rebind different keys to these
functions, or write new functions and bind keys to them, and so
forth. Unless otherwise stated, the keys we introduce here work for
the default Emacs configuration. Later we'll show you how to customize
the keys for your own use.</p>

<p><a name="INDEX-2020" />
Back to editing: using the arrow keys or
one of the equivalents moves the cursor around the current
buffer. Just start typing text, and it is inserted at the current
cursor location.  Pressing the Backspace or Delete key should delete
text at the cursor. If it doesn't, we'll show how to fix it in the
section "<a href="ch09_02.htm">Section 9.2.8, "Tailoring Emacs"</a>"
later in this chapter.
Now begin to type:
<blockquote><pre class="code">The rain falls on the main plains in Spain.
<em class="emphasis"> </em> 


<span class="emphasis-reverse">--**-Emacs: wibble.txt       (Fundamental)----All-----------------------</span></pre></blockquote></p>

<p>The keys <tt class="literal">C-a</tt> and <tt class="literal">C-e</tt> move the
cursor to the beginning and end of the current line,
respectively. <tt class="literal">C-v</tt> moves forward a page;
<tt class="literal">M-v</tt> moves back a page. There are many more basic
editing commands, but we'll allow the Emacs online documentation
(discussed shortly) to fill those in.</p>

<p>In order to get out of Emacs, use the command <tt class="literal">C-x</tt>
<tt class="literal">C-c</tt>. This is the first of the extended commands
we've seen; many Emacs commands require several
keys. <tt class="literal">C-x</tt> alone is a "prefix" to other
keys.  In this case, pressing <tt class="literal">C-x</tt> followed by
<tt class="literal">C-c</tt> quits Emacs, first asking for confirmation if
you want to quit without saving changes to the buffer.</p>

<p><a name="INDEX-2021" /> 
You can use <tt class="literal">C-x</tt> <tt class="literal">C-s</tt> to save the
current file, and <tt class="literal">C-x</tt> <tt class="literal">C-f</tt> to
"find" another file to edit. For example, typing
<tt class="literal">C-x</tt> <tt class="literal">C-f</tt> presents you with a
prompt such as:

<blockquote><pre class="code">Find file: /home/loomer/mdw/</pre></blockquote>


where the current directory is displayed. After this, type the
name of the file to find. Pressing the Tab key will do filename completion
similar to that used in <tt class="command">bash</tt> and
<tt class="command">tcsh</tt>. For example, entering:

<blockquote><pre class="code">Find file: /home/loomer/mdw/<tt class="userinput"><b>.bash</b></tt></pre></blockquote>


and pressing Tab opens another buffer, showing all 
possible completions, as so:
<blockquote><pre class="code">Possible completions are: 
.bash_profile                      .bashrc 


<span class="emphasis-reverse">--**-Emacs: *Completions*     (Fundamental)----All----------------------</span></pre></blockquote></p>

<p>After you complete the filename, the <tt class="literal">*Completions*</tt> buffer
goes away and the new file is displayed for editing. This is one 
example of how Emacs uses temporary buffers to present information.</p>

<p><a name="INDEX-2022" /> 
Emacs allows
you to use multiple buffers when editing text; each buffer may contain
a different file you're editing. When you load a file with
<tt class="literal">C-x</tt> <tt class="literal">C-f</tt>, a new buffer is created
to edit the file, but the original buffer isn't deleted.</p>

<p>You can switch to another buffer using the <tt class="literal">C-x</tt>
<tt class="literal">b</tt> command, which asks you for the name of the
buffer (usually the name of the file within the buffer). For example,
pressing <tt class="literal">C-x</tt> <tt class="literal">b</tt> presents the
prompt:

<blockquote><pre class="code">Switch to buffer: (default wibble.txt)</pre></blockquote>


The default buffer is the previous one visited. Press Enter to switch
to the default buffer, or type another buffer name. 
Using <tt class="literal">C-x</tt> <tt class="literal">C-b</tt> will
present a buffer list (in a buffer of its own), as so:

<blockquote><pre class="code"> MR Buffer        Size   Mode        File 
 -- ------        ----   ----        ---- 
.   wibble.txt     44    Fundamental /home/loomer/mdw/wibble.txt 
    .bashrc        1763  Fundamental /home/loomer/mdw/.bashrc 
    *scratch*      0     Lisp Interaction 
 *  *Buffer List*  265   Buffer Menu</pre></blockquote></p>

<p>Popping up the buffer menu splits the Emacs screen into two
"windows," which you can switch between using
<tt class="literal">C-x</tt> <tt class="literal">o</tt>. More than two concurrent
windows are possible as well. In order to view just one window at a
time, switch to the appropriate one and press <tt class="literal">C-x</tt>
<tt class="literal">1</tt>. This hides all of the other windows, but you can
switch to them later using the <tt class="literal">C-x</tt>
<tt class="literal">b</tt> command just described. Using
<tt class="literal">C-x</tt> <tt class="literal">k</tt> actually deletes a buffer
from Emacs's memory.</p>
</div>




<a name="x-100-3-sec-tools-emacs-info" /><div class="sect2">
<h3 class="sect2">9.2.3. Tutorial and Online Help</h3>

<p><a name="INDEX-2023" />
<a name="INDEX-2024" />

Already Emacs looks a bit complex; that is simply because it's such a
flexible system. Before we go any further, it is instructive to

introduce Emacs's built-in online help and tutorial. This
documentation has also been published in book form.</p>

<p>Using the <tt class="literal">C-h</tt> command gives you a list of help
options on the last line of the display. Pressing
<tt class="literal">C-h</tt> again describes what they are. In particular,
<tt class="literal">C-h</tt> followed by <tt class="literal">t</tt> drops you into
the Emacs tutorial. It should be self-explanatory, and an interactive
tutorial about Emacs tells you more about the system than we can hope
to cover here.</p>

<p><a name="INDEX-2025" />
<a name="INDEX-2026" />
After going through the Emacs tutorial you should get accustomed to
the Info system, where the rest of the Emacs documentation resides.
<tt class="literal">C-h</tt> followed by <tt class="literal">i</tt> enters the
Info reader.  A mythical Info page might look like this:

<blockquote><pre class="code">File: intercal.info,  Node: Top,  Next: Instructions,  Up: (dir) 
 
   This file documents the Intercal interpreter for Linux. 
 
   * Menu: 
 
   * Instructions::        How to read this manual. 
   * Overview::            Preliminary information. 
   * Examples::            Example Intercal programs and bugs. 
   * Concept Index::       Index of concepts.</pre></blockquote></p>

<p>As you see, text is presented along with a menu to other "nodes."
Pressing <tt class="literal">m</tt> and then entering a node name from the menu
will allow you to read that note. You can read nodes sequentially
by pressing the space bar, which jumps to the next node in the document
(indicated by the information line at the top of the buffer). 
Here, the next node is <tt class="literal">Instructions</tt>, which is the first node
in the menu.</p>

<p>Each node also has a link to the parent node (<tt class="literal">Up</tt>), which
here is <tt class="literal">(dir)</tt>, meaning the Info page directory. Pressing
<tt class="literal">u</tt> takes you to the parent node. In addition, each node
has a link to the previous node, if it exists (in this case,
it does not). The <tt class="literal">p</tt> command moves to the previous node.
The <tt class="literal">l</tt> command returns you to the node most recently visited.</p>

<p>Within the Info reader, pressing <tt class="literal">?</tt> gives you a list of commands
and pressing <tt class="literal">h</tt> presents you with a short tutorial on using the
system. Since you're running Info within Emacs, you can use
Emacs commands as well (such as <tt class="literal">C-x b</tt> to switch to another buffer).</p>

<p>If you think that the Info system is arcane and
obsolete, please keep in my mind that it was designed to work on all
kinds of systems, including those lacking graphics or powerful
processing capabilities.</p>

<p>Other online help is available within Emacs. Pressing
<tt class="literal">C-h</tt> <tt class="literal">C-h</tt> gives you a list of help
options. One of these is <tt class="literal">C-h</tt> <tt class="literal">k</tt>,
after which you press a key, and documentation about the function that
is bound to that key appears.</p>
</div>




<div class="sect2">
<h3 class="sect2">9.2.4. Deleting, Copying, and Moving Text</h3>

<p><a name="INDEX-2027" />
There are various ways to move and duplicate blocks of text within
Emacs. These methods involve use of the <em class="emphasis">mark</em>, which is simply
a "remembered" cursor location you can set using various commands.
The block of text between the current cursor location (<em class="emphasis">point</em>) and
the mark is called the <em class="emphasis">region</em>.</p>

<p>The mark can be set using the key <tt class="literal">C-@</tt> (or <tt class="literal">C-Space</tt> on 
most systems). Moving the cursor to a location and pressing <tt class="literal">C-@</tt> sets
the mark at that position. You can now move the cursor to another location
within the document, and the region is defined as the text between mark
and point.</p>

<p><a name="INDEX-2028" />
<a name="INDEX-2029" />
<a name="INDEX-2030" />
<a name="INDEX-2031" />
Many Emacs commands operate on the region. The most important of these commands
deal with deleting and yanking text. The command <tt class="literal">C-w</tt>
deletes the current region and saves it in the <em class="emphasis">kill
ring</em>. The kill
ring is a list of text blocks that have been deleted. You can then
paste (<em class="emphasis">yank</em>) the text at another
location, using the <tt class="literal">C-y</tt> 
command. (Note that the semantics of the term <em class="emphasis">yank</em> differ
between <tt class="command">vi</tt> and Emacs. In <tt class="command">vi</tt>,
"yanking" text is equivalent 
to adding it to the undo register without deleting it, while in Emacs, 
"yank" means to paste text.) Using the kill ring, you can 
paste not only the most recently deleted block of text but also
blocks of text that were deleted previously. 
<a name="INDEX-2032" /></p>

<p>For example, type the following text into an Emacs buffer:
<blockquote><pre class="code">The rain falls on the main plains in Spain. 
Here is a line that we wish to move. 
She sells Bourne shells by the sea shore.
<em class="emphasis"> </em>


<span class="emphasis-reverse">--**-Emacs: wibble.txt           (Fundamental)----All-------------------</span></pre></blockquote></p>

<p>Now, move the cursor to the beginning of the second line
("Here is a line&#133;"), and set the mark with <tt class="literal">C-@</tt>. 
Move to the end of the line (with <tt class="literal">C-e</tt>), and delete the
region, using <tt class="literal">C-w</tt>. The buffer should now look like
the following:
<blockquote><pre class="code">The rain falls on the main plains in Spain. 
<em class="emphasis"> </em>
She sells Bourne shells by the sea shore.


<span class="emphasis-reverse">--**-Emacs: wibble.txt           (Fundamental)----All-------------------</span></pre></blockquote></p>

<p>In order to yank the text just deleted, move the cursor to the end of
the buffer, and press <tt class="literal">C-y</tt>. The line should be
pasted at the new location:
<blockquote><pre class="code">The rain falls on the main plains in Spain. 

She sells Bourne shells by the sea shore.
Here is a line that we wish to move.<em class="emphasis"> </em> 


<span class="emphasis-reverse">--**-Emacs: wibble.txt           (Fundamental)----All-------------------</span></pre></blockquote></p>

<p>Pressing <tt class="literal">C-y</tt> repeatedly will insert the text multiple times.</p>

<p><a name="INDEX-2033" /> You can copy text in a similar
fashion. Using <tt class="literal">M-w</tt> instead of
<tt class="literal">C-w</tt> will copy the region into the kill ring without
deleting it.  (Remember that <tt class="literal">M-</tt> means holding down
the Alt key or pressing Esc before the <tt class="literal">w</tt>.)</p>

<p>Text that is deleted using other kill commands, such as
<tt class="literal">C-k</tt>, is also added to the kill ring. This means
that you don't need to set the mark and use <tt class="literal">C-w</tt> to
move a block of text; any deletion command will do.</p>

<p>In order to recover previously deleted blocks of text (which are saved
on the kill ring), use the command <tt class="literal">M-y</tt> after
yanking with <tt class="literal">C-y</tt>. <tt class="literal">M-y</tt> replaces
the yanked text with the previous block from the kill ring. Pressing
<tt class="literal">M-y</tt> repeatedly cycles through the contents of the
kill ring. This feature is useful if you wish to move or copy multiple
blocks of text.</p>

<p>Emacs also provides a more general <em class="emphasis">register</em>
mechanism, similar to that found in <tt class="command">vi</tt>.  Among
other things, you can use this feature to save text you want to paste
in later.  A register has a one-character name; let's use
<tt class="literal">a</tt> for this example:</p>

<ol><li><p>At the beginning of the text you want to save, set the mark by
pressing the Control key and space bar together (or if that doesn't
work, press <tt class="literal">C-@</tt>).</p></li><li><p>Move point (the cursor) to the end of the region you want to save.</p></li><li><p>Press <tt class="literal">C-x x</tt> followed by the name of the register
(<tt class="literal">a</tt> in this case).</p></li><li><p>When you want to paste the text somewhere, press <tt class="literal">C-x
g</tt> followed by the name of the register,
<tt class="literal">a</tt>.</p></li></ol>
</div>




<div class="sect2">
<h3 class="sect2">9.2.5. Searching and Replacing</h3>

<p><a name="INDEX-2034" />
<a name="INDEX-2035" /> 
<a name="INDEX-2036" />
The most common way to search for a string within Emacs is to press
<tt class="literal">C-s</tt>.  This starts what is called an
<em class="emphasis">incremental search</em>.  You then start entering the
characters you are looking for.  Each time you press a character,
Emacs searches forward for a string matching everything you've typed
so far.  If you make a mistake, just press the Delete key and continue
typing the right characters.  If the string cannot be found, Emacs
beeps.  If you find an occurrence, but you want to keep searching for
another one, press <tt class="literal">C-s</tt> again.</p>

<p><a name="INDEX-2037" />
You can also search backward this way using the <tt class="literal">C-r</tt> key.
Several other types of searches exist, including a regular expression
search that you can invoke by pressing <tt class="literal">M-C-s</tt>.  This lets you
search for something like <tt class="literal">jo.*n</tt>, which matches names like John,
Joan, and Johann.  (By default, searches are not case sensitive.)</p>

<p>To replace a string, enter <tt class="literal">M-%</tt>.  You are prompted for the
string that is currently in the buffer, and then the one you want to
replace it with.  Emacs displays each place in the buffer where the
string is and asks you if you want to replace this occurrence.
Press the space bar to replace the string, the Delete key to skip this
string, or a period to stop the search.</p>

<p>If you know you want to replace all occurrences of a string that
follow your current place in the buffer, without being queried for
each one, enter <tt class="literal">M-x</tt> <em class="replaceable">string</em>. (The <tt class="literal">M-x</tt> key allows you
to enter the name of an Emacs function and execute it, without use of
a key binding.  Many Emacs functions are available only via <tt class="literal">M-x</tt>,
unless you bind them to keys yourself.)  A regular expression can be
replaced by entering <tt class="literal">M-x</tt> <em class="replaceable">regexp</em>.</p>
</div>




<div class="sect2">
<h3 class="sect2">9.2.6. Macros</h3>

<p><a name="INDEX-2038" />
The name Emacs comes partly from "macros," and in fact
they are a simple but powerful feature that makes Emacs a pleasure to
use.  If you plan on doing
anything frequently and repetitively, just press <tt class="literal">C-x
(</tt>, perform the operation once, and then press
<tt class="literal">C-x )</tt>.  The two
<tt class="literal">C-x</tt> commands
with the opening and closing parentheses remember all the keys you
pressed. Then you can execute the commands over and over again by
pressing <tt class="literal">C-x e</tt>.</p>

<p>Here's a trivial example you can try on any text file; it capitalizes the first word of
each line.</p>

<ol><li><p>Press <tt class="literal">C-x (</tt> to begin the macro.</p></li><li><p>Press <tt class="literal">C-a</tt> to put point at the beginning of the current line.
It's important to know where you are each time a macro executes.  By pressing
<tt class="literal">C-a</tt> you are making sure the macro will always go to the beginning
of the line, which is where you want to be.</p></li><li><p>Press <tt class="literal">M-c</tt> to make the first letter of the first word a capital
letter.</p></li><li><p>Press <tt class="literal">C-a</tt> again to return to the beginning of the line and
<tt class="literal">C-n</tt> or the down arrow to go to the beginning of the
following line. This ensures that the macro will start execution at the right place next time.</p></li><li><p>Press <tt class="literal">C-x )</tt> to end the macro.</p></li><li><p>Press <tt class="literal">C-x e</tt> repeatedly to capitalize the following lines.  Or press
<tt class="literal">C-u</tt> several times, followed by <tt class="literal">C-x e</tt>.  The repeated uses of
<tt class="literal">C-u</tt> are prefix keys, causing the
following command to execute many times.  If you get to the end of the
document while the macro is still
executing, no harm is done; Emacs just beeps and stops executing the macro.</p></li></ol>
</div>




<div class="sect2">
<h3 class="sect2">9.2.7. Running Commands and Programming
 Within Emacs</h3>

<p><a name="INDEX-2039" />
Emacs provides interfaces for many programs, which you can run within
an Emacs buffer. For example, Emacs modes exist for reading and sending
electronic mail, reading Usenet news, compiling programs, and interacting
with the shell. In this section, we'll introduce some of these features.</p>

<p><a name="INDEX-2040" />
To send electronic mail from within Emacs, press <tt class="literal">C-x m</tt>. 
This opens up a buffer that allows you to compose
and send an email message:
<blockquote><pre class="code">To: 
Subject: 
--text follows this line-- 
<em class="emphasis"> </em>



<span class="emphasis-reverse">-----Emacs: *mail*               (Mail)----All--------------------------</span></pre></blockquote></p>

<p>Simply enter your message within this buffer and use <tt class="literal">C-c C-s</tt> to
send it. You can also insert text from other buffers, extend the interface
with your own Emacs <span class="acronym">LISP</span> functions, and so on.</p>

<p><a name="INDEX-2041" />
<a name="INDEX-2042" />
<span class="acronym">RMAIL</span> is Emacs's interface for reading electronic mail. Many users prefer 
it to other mail readers, because Emacs can be used directly as the editor 
for both sending and reading mail. To start <span class="acronym">RMAIL</span>, use the command
<tt class="literal">M-x rmail</tt>.</p>

<p>When you run <span class="acronym">RMAIL</span>, Emacs converts messages in your
incoming mailbox to a special format it uses to keep track of
messages, and mail will be moved to the file
<em class="filename">RMAIL</em> in your home directory.  Therefore, be
careful! Your incoming mail file will be converted to
<span class="acronym">RMAIL</span> format, and to convert it back (in case you
don't want to use <span class="acronym">RMAIL</span> as your mail reader), you
need to use the <tt class="literal">M-x unrmail</tt> function.</p>

<p>When you start <span class="acronym">RMAIL</span>, a buffer is created,
displaying the first message in your inbox. The <tt class="literal">n</tt>
and <tt class="literal">p</tt> commands can be used to display the previous
and next messages. (As with all Emacs modes, using
<tt class="literal">C-h</tt> <tt class="literal">m</tt> gives you a summary of the
available keys.) While you're viewing a message, the
<tt class="literal">r</tt> key replies to that message, opening a
<tt class="literal">mail</tt> buffer (as described earlier) with the header
fields initialized.  While in the <tt class="literal">mail</tt> buffer you
can use <tt class="literal">C-c</tt> <tt class="literal">C-y</tt> to insert the
original message.</p>

<p>Within <span class="acronym">RMAIL</span>, the <tt class="literal">h</tt> command displays a summary of the
messages in your mailbox:
<blockquote><pre class="code"><span class="emphasis-reverse">  11  17-Feb                johnsonm@metalab  Re: Which release?</span>
  12  25-Feb                             schar  Vision Group meeting 
  13  26-Feb                 okir@monad.swb.de  Re: Spaces in .ms? 
  14  26-Feb           wirzeniu@cc.helsinki.fi  Re: LDP
<span class="emphasis-reverse">--%%-Emacs: RMAIL-summary    (RMAIL Summary)----50%---------------------</span></pre></blockquote></p>

<p>Several <tt class="literal">M-x</tt> commands are available in summary mode for sorting the list,
and so forth. <span class="acronym">RMAIL</span> commands such as <tt class="literal">n</tt>, <tt class="literal">p</tt>, and <tt class="literal">r</tt> may be
used as well.</p>

<p><a name="INDEX-2043" />
<a name="INDEX-2044" />
Similar to the <span class="acronym">RMAIL</span> mail interface is 
<span class="acronym">GNUS</span>, the Emacs-based newsreader, which
you can start with the <tt class="literal">M-x gnus</tt> command.
After startup (and a bit
of chewing on your <em class="filename">.newsrc</em> file), a list of newsgroups will be
presented, along with a count of unread articles for each:
<blockquote><pre class="code">     10: comp.os.linux.development 
      0: cucs.system 
     32: alt.fan.warlord 
    195: alt.folklore.urban 
<span class="emphasis-reverse">--- GNUS: List of Newsgroups    (Newsgroup {cloyd.cs})--6%--------------</span></pre></blockquote></p>

<p>Using the arrow keys, you can select a newsgroup to read.
Press the space bar to begin reading articles from that group.
Two buffers will be displayed, one containing a list of
articles and the other displaying the current article. Using
<tt class="literal">n</tt> and <tt class="literal">p</tt> moves to the next and
previous articles, <tt class="literal">f</tt> and <tt class="literal">F</tt>
follows up to the current article (either with or without including
the current article), and <tt class="literal">r</tt> and
<tt class="literal">R</tt> replies to the article via electronic mail. There
are many other <span class="acronym">GNUS</span> commands; use <tt class="literal">C-h
m</tt> for a list. If you're used to a newsreader such as
<tt class="command">rn</tt>, <span class="acronym">GNUS</span> will be somewhat
familiar.</p>

<p><a name="INDEX-2045" />
Emacs provides a number of modes for editing various types of files.
For example, there is C mode for editing C source code, and TeX mode
for editing (surprise) TeX source. Each of these modes boast 
features that make editing the appropriate type of file easier.</p>

<p><a name="INDEX-2046" />
For example, within C mode, you can use the command <tt class="literal">M-x compile</tt>,
which, by default, runs <tt class="command">make -k</tt> in the current directory and redirect
errors to another buffer. For example, the compilation buffer may contain:
<blockquote><pre class="code">cd /home/loomer/mdw/pgmseq/ 
make -k 
gcc -O -O2 -I. -I../include -c stream_load.c -o stream_load.o 
stream_load.c:217: syntax error before `struct' 
stream_load.c:217: parse error before `struct'</pre></blockquote>

You can move the cursor to a line containing an error message, press
<tt class="literal">C-c</tt> <tt class="literal">C-c</tt>, and the cursor will jump to that line in the corresponding
source buffer (opening a buffer for the appropriate source file
if one does not already exist). Now you can edit and compile programs
entirely within Emacs.</p>

<p><a name="INDEX-2047" />

Emacs also provides a complete interface to the <tt class="command">gdb</tt>
debugger, which is described in the section
"<a href="ch14_01.htm">Section 14.1.6.3, "Using Emacs with gdb"</a>" in <a href="ch14_01.htm">Chapter 14, "Tools for
 Programmers"</a>.</p>

<p>Usually, Emacs selects the appropriate mode for the buffer based 
on the filename extension. For example, editing a file with the
extension <em class="filename">.c</em> in the filename automatically selects C mode
for that buffer.</p>

<p><a name="INDEX-2048" />
Shell mode is one of the most popular Emacs extensions.
Shell mode allows you to interact with the shell in an Emacs buffer, using
the command <tt class="literal">M-x shell</tt>. Editing shell command lines and using
command history can be done with standard Emacs commands.
You can also run single shell commands from Emacs using 
<tt class="literal">M-!</tt>. If you use <tt class="literal">M-|</tt> instead, the contents of the current 
region is piped to the given shell command as standard input. 
This is a general interface for running subprograms from within Emacs.</p>

<a name="INDEX-2049" />
</div>




<a name="x-100-3-tools-emacs-tailoring" /><div class="sect2">
<h3 class="sect2">9.2.8. Tailoring Emacs</h3>

<p><a name="INDEX-2050" />
<a name="INDEX-2051" />
The Emacs online documentation should be sufficient to get you on
track to learning more about the system and growing accustomed to it.
However, sometimes it is hard to locate some of the most helpful
hints for getting started. Here we'll present a run-down on certain
customization options many Emacs users choose to employ to make life
easier.</p>

<p><a name="INDEX-2052" />
The Emacs personal customization file is <em class="filename">.emacs</em>, which should reside
in your home directory. This file should contain code, written in
Emacs <span class="acronym">LISP</span>,
which runs or defines functions to customize your Emacs environment. 
(If you've never written <span class="acronym">LISP</span> before, don't worry;
most customizations using it are quite simple.)</p>

<p><a name="INDEX-2053" />
<a name="INDEX-2054" />
One of the most common things users customize are key bindings.
For instance, if you use Emacs to read your mail, you can bind the key
<tt class="literal">C-c r</tt> to execute the <tt class="literal">rmail</tt> function.  Put this in your
<em class="filename">.emacs</em> file:</p>

<blockquote><pre class="code">; Provide quick way to read mail. 
(global-set-key "\C-cr" 'rmail)</pre></blockquote>

<p><a name="INDEX-2055" />
Comments in Emacs <span class="acronym">LISP</span> start with a semicolon.  The command that follows
runs the command <em class="emphasis">global-set-key</em>.
Now you don't have to type in the long sequence <tt class="literal">M-x rmail</tt> every
time you get that little message "Mail" in your mode line.  Just
press the two characters <tt class="literal">C-c r</tt>.  This works anywhere in
Emacs--no matter what mode your buffer is in--because it is
global.</p>

<p><a name="INDEX-2056" />
A customization that you might want to use is making the text mode the 
default mode and turning on the "auto-fill" minor mode
(which makes text automatically wrap if it is too long for one line)
like this:
<blockquote><pre class="code">; Make text mode the default, with auto-fill
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill)</pre></blockquote></p>

<p>You don't always want your key mappings to be global.  As you use
TeX mode, C mode, and other modes defined by Emacs, you'll find
useful things you'd like to do only in a single mode.  Here,
we define a simple <span class="acronym">LISP</span> function to insert some characters into C
code, and then bind the function to a key for our convenience:</p>

<blockquote><pre class="code">(defun start-if-block() 
  (interactive) 
  (insert "if () {\n}\n") 
  (backward-char 6) 
)</pre></blockquote>

<p>We start the function by declaring it "interactive" so that we can
invoke it (otherwise, it would be used only internally by other
functions).  Then we use the <em class="emphasis">insert</em> function to put the
following characters into our C buffer:</p>

<blockquote><pre class="code">if () { 
}</pre></blockquote>

<p>Strings in Emacs can contain standard C escape characters.  Here we've
used <tt class="literal">\n</tt> for a newline.</p>

<p>Now we have a template for an <tt class="literal">if</tt> block.  To put on
the ribbon and the bow, our function also moves backward six
characters so that point is within the parentheses, and we can
immediately start typing an expression.</p>

<p>Our whole goal was to make it easy to insert these characters, so now
let's bind our function to a key:</p>

<blockquote><pre class="code">(define-key c-mode-map "\C-ci" 'start-if-block)</pre></blockquote>

<p><a name="INDEX-2057" /> The
<em class="emphasis">define-key</em> function binds a key to a function.
By specifying <tt class="literal">c-mode-map</tt>, we indicate that the key
works only in C mode.  There is also a <tt class="literal">tex-mode-map</tt>
for TeX mode, a <tt class="literal">lisp-mode-map</tt> that you will want
to know about if you play with your <em class="filename">.emacs</em> file a
lot, and so on.</p>

<p>If you're interested in writing your own Emacs <span class="acronym">LISP</span>
functions, you should read the Info pages for
<em class="emphasis">elisp</em>, which should be available on your system.</p>

<p><a name="INDEX-2058" />
<a name="INDEX-2059" />
Now here's an important customization you may need.  On many terminals
the Backspace key sends the character <tt class="literal">C-h</tt>, which is
the Emacs help key. To fix this, you should change the internal table
Emacs uses to interpret keys as follows:

<blockquote><pre class="code">(keyboard-translate ?\C-h ?\C-?)</pre></blockquote>


Pretty cryptic code. <tt class="literal">\C-h</tt> is recognizable as the
Control key pressed with <tt class="literal">h</tt>, which happens to
produce the same <span class="acronym">ASCII</span> code (8) as the Backspace
key.  <tt class="literal">\C-?</tt> represents the Delete key
(<span class="acronym">ASCII</span> code 127).  Don't confuse this question mark
with the question marks that precede each
backslash. <tt class="literal">?\C-h</tt> means "the
<span class="acronym">ASCII</span> code corresponding to
<tt class="literal">\C-h</tt>." You could just as well specify 8
directly.</p>

<p>So now, both Backspace and <tt class="literal">C-h</tt> will delete.  You've lost your
help key.  Therefore, another good customization would be to bind
another key to <tt class="literal">C-h</tt>.  Let's use <tt class="literal">C-\</tt>, which isn't used
often for anything else.  You have to double the backslash when
you specify it as a key:
<blockquote><pre class="code">(keyboard-translate ?\C-\\ ?\C-h)</pre></blockquote></p>

<p><a name="INDEX-2060" />

On the X Window System, there is a way to change the code sent by your
Backspace key using the <tt class="command">xmodmap</tt> command, but we'll have to
leave it up to you to do your own research.  It is not a completely
portable solution (so we can't show you an example guaranteed to
work), and it may be too sweeping for your taste (it also
changes the meaning of the Backspace key in your <tt class="command">xterm</tt> shell
and everywhere else).</p>

<p>There are other key bindings you may want to use. For example, you may
prefer to use the keys <tt class="literal">C-f</tt> and <tt class="literal">C-b</tt> to scroll forward (or
backward) a page at a time, as in <tt class="command">vi</tt>. In your <em class="filename">.emacs</em> file you might
include the following lines:
<blockquote><pre class="code">(global-set-key "\C-f" 'scroll-up) 
(global-set-key "\C-b" 'scroll-down)</pre></blockquote>

<img src="figs/bomb.gif">&nbsp;&nbsp;
Again, we have to issue a caveat: be careful not to redefine keys that
have other important uses. (One way to find out is to use <tt class="literal">C-h k</tt> to
tell you what a key does in the current mode. You should also consider
that the key may have definitions in other modes.)  In particular,
you'll lose access to a lot of functions if you rebind the
<em class="emphasis">prefix keys</em> that start commands, 
such as <tt class="literal">C-x</tt> and <tt class="literal">C-c</tt>.
<a name="INDEX-2061" /></p>

<p>You can create your own prefix keys, if you really want to extend your
current mode with lots of new commands.
Use something like:
<blockquote><pre class="code">(global-unset-key "\C-d") 
(global-set-key "\C-d\C-f" 'my-function)</pre></blockquote>

First, we must unbind the <tt class="literal">C-d</tt> key (which simply deletes the character
under the cursor), in order to use it as a prefix for other keys.
Now, pressing <tt class="literal">C-d</tt> <tt class="literal">C-f</tt> will execute <em class="emphasis">my-function</em>.</p>

<p><a name="INDEX-2062" />
You may also prefer to use another mode besides <tt class="literal">Fundamental</tt> or
<tt class="literal">Text</tt> for editing "vanilla" files. <tt class="literal">Indented Text</tt> mode,
for example, automatically indents lines of text relative to the
previous line (as with the <tt class="literal">:set ai</tt> function in <tt class="command">vi</tt>). 
To turn on this mode by default, use:
<blockquote><pre class="code">; Default mode for editing text 
(setq default-major-mode 'indented-text-mode)</pre></blockquote>

You should also rebind the Enter key to indent the next line of
text:
<blockquote><pre class="code">(define-key indented-text-mode-map "\C-m" 'newline-and-indent)</pre></blockquote></p>

<p><a name="INDEX-2063" />
Emacs also provides "minor" modes, which are modes you use 
along with major modes. For example, <tt class="literal">Overwrite</tt> mode is a
minor mode that causes text to overwrite that in the buffer, instead of
inserting it. To bind the key <tt class="literal">C-r</tt> to toggle <tt class="literal">overwrite</tt> mode,
use the command:

<blockquote><pre class="code">; Toggle overwrite mode. 
(global-set-key "\C-r" 'overwrite-mode)</pre></blockquote>

 
<a name="INDEX-2064" />
Another minor mode is <tt class="literal">Autofill</tt>, which automatically
wraps lines
as you type them. That is, instead of pressing the Enter key at the end of
each line of text, you may continue typing and Emacs automatically
breaks the line for you. To enable <tt class="literal">Autofill</tt> mode, use the commands:
<blockquote><pre class="code">(setq text-mode-hook 'turn-on-auto-fill) 
(setq fill-column 72)</pre></blockquote>

This turns on <tt class="literal">Autofill</tt> mode whenever you enter <tt class="literal">Text</tt> 
mode (through the <em class="emphasis">text-mode-hook</em> function). It also sets the
point at which to break lines at 72 characters. 
<a name="INDEX-2065" /><a name="INDEX-2066" />
<a name="INDEX-2067" /></p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch09_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">9. Editors, Text Tools,
 Graphics,
 and Printing</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">9.3. Text and Document Processing</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>