<?label 9.5. Printing?><html><head><title>Printing (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch10_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">9.5. Printing</h2>

<p><a name="INDEX-2147" />
<a name="INDEX-2148" />
The <tt class="command">lpr</tt> command prints a document on Linux.
You might not always invoke this command directly--you may just press
a Print button on some glitzy drag-and-drop graphical
interface--but ultimately, printing is handled by
<tt class="command">lpr</tt> and the other print-management utilities we'll
describe here.</p>

<p>If you want to print a program listing, you might enter:
<blockquote><pre class="code">lpr myprogram.c</pre></blockquote></p>

<p><a name="INDEX-2149" />
<a name="INDEX-2150" />
<a name="INDEX-2151" />
Input is also often piped to <tt class="command">lpr</tt> from another command,
as we will see later.  <tt class="command">lpr</tt> starts the printing process
by storing the data 
temporarily to a directory called a print spool.  Other parts of the print

management system, which we showed you how to set up in
the section "<a href="ch08_04.htm">Section 8.4, "Managing Print Services"</a>" in
<a href="ch08_01.htm">Chapter 8, "Other
 Administrative
 Tasks"</a>,
remove files from the 
print queue in the correct order, 
process the file for printing, and control the 
flow of data to the printer.</p>

<p>There is at least one print spool for each 
printer on the system.<a href="#FOOTNOTE-40">[40]</a>
By default, <tt class="command">lpr</tt> looks for a printer named
<tt class="literal">lp</tt>.
But if you need to specify a printer of a different name, just include
a <span class="option">-P</span> option.</p><blockquote>

<a name="FOOTNOTE-40" /><p>[40]A printer that can be used in different modes of operation,
such as for printing faxes as well as letters, may have a separate
print spool for each purpose.</p>

</blockquote>

<p>For example, to 
send your document to a printer named <tt class="literal">nene</tt>, enter:
<blockquote><pre class="code">lpr -Pnene myprogram.c</pre></blockquote>

<a name="INDEX-2152" />
<a name="INDEX-2153" />
<a name="INDEX-2154" />
If you forget the name of a printer, you can 
look at the names of the spool directories under the 
<em class="filename">/var/spool/lpd</em>
directory or at the <em class="filename">/etc/printcap</em> file entries to
see all the names recognized for each printer.</p>

<p><a name="INDEX-2155" />
If you want to use a
particular printer for most of your printing needs, you 
can also set it in the <span class="acronym">PRINTER</span> 
environment variable.  So, assuming that you are using the <tt class="command">bash</tt> 
shell, you could make <tt class="literal">nene</tt> your personal default printer 
by putting this command in your <em class="filename">.bashrc</em> file:
<blockquote><pre class="code">export PRINTER=nene</pre></blockquote>

The <span class="option">-P</span> option in <tt class="command">lpr</tt> overrides the
<span class="acronym">PRINTER</span> variable.</p>

<p><a name="INDEX-2156" />
<a name="INDEX-2157" />
<a name="INDEX-2158" />
Once you know how to print a file, the next problem you might face
is finding out what is happening if your
file doesn't instantly print as you expect.  You can find
out the status of files in the print queue by using the 
<tt class="command">lpq</tt> command.  To
find out the status of files sent to your default printer (the
<span class="acronym">PRINTER</span>
environment variable applies to all the commands discussed in this section),
enter:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>lpq</b></tt> 
nene is ready and printing
Rank   Owner      Job  Files                                 Total Size
active lovelace   020  (standard input)                     776708 bytes
1st    parcifal   024  (standard input)                    2297842 bytes
1st    lark       023  (standard input)                      10411 bytes</pre></blockquote>

<p>You see that the printer is running, but there are large
jobs queued ahead of yours (if you are lark).  If 
you just can't wait, you
might decide to remove the job from the print queue.  You
can use the job number of the printing task that <tt class="command">lpq</tt> 
reported to remove the printing job:
 
<blockquote><pre class="code">$ <tt class="userinput"><b>lprm 23</b></tt> 
023 dequeued
023 dequeued</pre></blockquote>

The spooled print file identified as job 023 is discarded,
along with an associated file that contains instructions for
formatting the file.</p>

<p>You can narrow the <tt class="command">lpq</tt> 
report by asking about a specific print job by 
task ID (rarely used), by printer,
or by user ID.  For example, to get a report 
that identifies spooled files sent to a printer named
<tt class="literal">ada</tt> you would enter:
<blockquote><pre class="code">$ <tt class="userinput"><b>lpq ada</b></tt>
ada is ready and printing
Rank   Owner      Job  Files                                 Total Size
active lovelace   788  standard input                        16713 bytes
1st    lark       796  standard input                        70750 bytes</pre></blockquote></p>

<p><a name="INDEX-2159" />
If you are the root user,
you can kill all pending printing tasks by entering the command:
<blockquote><pre class="code">lprm -</pre></blockquote>



If you are not
<?troff .ne 10?> the root user,
issuing that command kills only the printing tasks you own.  This
restriction also holds true if you specify a printer:
<blockquote><pre class="code">lprm ada</pre></blockquote>

If you are root, the <tt class="literal">ada</tt> print
queue is emptied.  If you are a normal user,
only the print files you own are removed from the specified print
spool.  The <tt class="command">lprm</tt> utility reports on the tasks
it kills.</p>

<p>The root user can 
kill all the print tasks issued by any user, by 
specifying:
<blockquote><pre class="code">lprm username</pre></blockquote></p>

<p>If you issue <tt class="command">lprm</tt> with no argument, 
it deletes the currently active print
jobs that you own.  This is equivalent to entering:
<blockquote><pre class="code">lprm <em class="replaceable">yourusername</em></pre></blockquote></p>

<p><a name="INDEX-2160" />
If you want to see whether a printer is down, you can use the <tt class="command">lpc</tt>
command:
<blockquote><pre class="code">/usr/sbin/lpc status ada</pre></blockquote>


See the section "<a href="ch08_04.htm">Section 8.4.12, "Controlling Printer Services with lpc"</a>" in
<a href="ch08_01.htm">Chapter 8, "Other
 Administrative
 Tasks"</a>
for details.  The <tt class="command">lpc</tt> utility
is usually installed in the <em class="filename">/sbin</em> or <em class="filename">/usr/sbin</em> directory.</p>

<p>Now for some more examples of common printing tasks and filters you can use.</p>

<p>To get a quick hardcopy printout of the printcap manual page, enter:
 
<blockquote><pre class="code">man printcap | col -b | lpr</pre></blockquote>

<a name="INDEX-2161" />
The <tt class="command">man</tt>
command finds, formats, and outputs the printcap manual page in an
enriched <span class="acronym">ASCII</span> output that uses backspaces to overstrike and underline
characters (in place of italics) for highlighting.  The output is piped
through <tt class="command">col</tt>,
a Unix text filter, where <tt class="command">-b</tt> specifies stripping the 
"backspace" instructions embedded in the man page which results in simple 
text strings, still maintaining the layout of the formatted man page.  The 
output of <tt class="command">col</tt> is piped to <tt class="command">lpr</tt>, which 
spools the text in a spool directory.</p>

<p><a name="INDEX-2162" />
If you want to simulate underlining, you could instead use a filter designed
originally for formatting print to a text display:
 
<blockquote><pre class="code">man printcap | colcrt | lpr</pre></blockquote></p>

<p>Suppose you want to print the fully enriched man page with 
highlighting and all.  You might use a command like this:
 
<blockquote><pre class="code">groff -man -Tps /usr/man/man5/printcap.5 | lpr</pre></blockquote>

<a name="INDEX-2163" />
The <tt class="command">groff</tt> 
command applies the <tt class="literal">man</tt> macros to the file specified,
creating PostScript output (specified by <span class="option">-Tps</span>);
output is passed to 
<tt class="command">lpr</tt>, which spools it, and
<tt class="command">lpd</tt> applies the default 
print-processing instructions from the
<em class="filename">/etc/printcap</em> file.</p>

<p><a name="INDEX-2164" />
<a name="INDEX-2165" />
<a name="INDEX-2166" />
<a name="INDEX-2167" />
<a name="INDEX-2168" />
Most Linux installations 
use <span class="acronym">BSD</span>-style print utilities developed for the Berkeley
Software Distribution of Unix.
If you find utilities named
<tt class="command">lp</tt>, <tt class="command">lpstat</tt>, 
<tt class="command">cancel</tt>, and <tt class="command">lpadmin</tt>, your Linux
host has a System V-based print system.  You need to read
the manual pages and perhaps other documentation for that package.  There
are other printing systems that could be installed on your system, such
as the <span class="acronym">PLP</span> package, but we only document the usual
Linux <span class="acronym">BSD</span>-based print-management utilities here.
We also describe how to use some of the other
commonly installed print support utilities for Linux, such as filters
that prepare documents in special ways to print on your printers.</p>

<p>The <span class="acronym">BSD</span>-style print-management system is 
traditionally called "lp" after the
line printers that were the standard print devices of the era in which
the package was developed.<a href="#FOOTNOTE-41">[41]</a>

In the Linux community,
the <span class="acronym">BSD</span> print management package is more commonly usually called 
"the lpr package."  Of course, the <tt class="command">lpr</tt> command 
is only one tool in the package.</p><blockquote>

<a name="FOOTNOTE-41" /><p>[41]Don't be misled if you hear someone use
the term <tt class="command">lp</tt>, which is a confusing misnomer.  There is no 
<tt class="command">lp</tt> utility in the
<span class="acronym">BSD</span> print-management package, but there is one in
the later-developed
System V print package.  It is still possible that your <span class="acronym">BSD</span> 
package allows you to use an <tt class="command">lp</tt> command 
in order to print, though.  Some systems use a shell script 
(filter) named <tt class="command">lp</tt> to convert 
<tt class="command">lp</tt> command options into 
<tt class="command">lpr</tt> command options, and 
pass them on to <tt class="command">lpr</tt>.  This is 
solely for the convenience of
users that are familiar with the System V <tt class="command">lp</tt>
<?troff \p?> command.</p>

</blockquote>

<div class="sect2">
<h3 class="sect2">9.5.1. What Happens to a File After It's Put on the Queue</h3>

<p><a name="INDEX-2169" />
<a name="INDEX-2170" />
<a name="INDEX-2171" />
Only the root user has the ability
to access printers directly, without using the printing system.
(That's not a wise thing to do, by the way.)
Linux doesn't grant system users the ability to address 
various physical devices directly, because crippling 
conflicts could result, and also because it's just too much work for
them to bother with.  
Instead, utilities call background system processes to
schedule your printing among other tasks, convert source file
data to print to a specific printer using its printer
language and protocols, set print resolution and format the
pages, and add (or know not to add) header and footer data and
page numbering.  Linux configures itself to handle its physical
devices when it is booted, including setting up ports and
protocols to handle printing.</p>

<p><a name="INDEX-2172" />
The print-management system is controlled by <tt class="command">lpd</tt>, 
the "line printer daemon," which has necessary privileges to 
access printers for you.
Once the print management system is installed, <tt class="command">lpd</tt> 
is started every time the Linux system is initialized (booted).  
The <em class="filename">/etc/printcap</em> file provides the control
information <tt class="command">lpd</tt> needs to manage the files you print.
<a name="INDEX-2173" />
<a name="INDEX-2174" /></p>

<p>Here's what the printer-management system is actually doing when
you enter a printing command.  When called, <tt class="command">lpr</tt>
checks whether you have a <span class="acronym">PRINTER</span> environment
variable set.  If you
do, <tt class="command">lpr</tt> loads the print options stored there as
instructions to process the print file it is receiving.  Next,
<tt class="command">lpr</tt> applies any option parameters you gave it or
that are passed to it by a program that preprocessed the file. Last,
<tt class="command">lpr</tt> sends the file to the spool directory for the
printer that will be used, along with another temporary file that stores the
processing specifications for <tt class="command">lpd</tt> to apply. Then
<tt class="command">lpr</tt> notifies <tt class="command">lpd</tt> that there is a
print file spooled. If <tt class="command">lpr</tt> receives an option it
doesn't understand, it passes the option on to the print filter, which we'll
discuss shortly.</p>

<p>When <tt class="command">lpd</tt> finds 
a job in the print spool, it 
reads the processing specifications (which tell it how to pass the print file
through filters and direct the output to a device) and completes
the printing task, erasing the print file and processing file when the printer
has received all of the processed print file.</p>

<p><a name="INDEX-2175" />
All Unix printing systems process a file through
at least one filter to prepare it for output.  This filter
processes the file using any of the usual options that Unix print
utilities pass to it.</p>

<p>Appropriate filters 
are set up by the administrator and specified in the printcap
file to meet your usual printing needs.  If you want to do any 
special processing, you give your processing instructions
as options to the print commands.  Your instructions 
enter the printer management system through the 
<tt class="command">lpr</tt> command (directly 
on the command line or passed indirectly by some other command).
The <tt class="command">lpr</tt> command spools 
the print file in the correct print spool
directory and stores the related processing instructions in an
associated file in the same print spool.</p>

<p>When it is time to print your file, the <tt class="command">lpd</tt> 
daemon reads any special processing directions for the print file,
which may override default processing directions set in
the <em class="filename">/etc/printcap</em> file.  When <tt class="command">lpd</tt>
passes your file to the 
correct filter for the printer you are using, it also passes along
any instructions it did not act on.  The filter then
further processes the file itself according to the instructions
or calls yet other filters to perform the processing it could 
not.  The file is then passed on to the printer by <tt class="command">lpd</tt>.
You can see that this hidden filter provides most actual control 
of print
<?troff \p?> formatting.</p>

<p>If you have special printing 
requirements, you need to learn the options to pass to the 
filter that control print formatting.  The standard options are discussed 
in the <tt class="command">lpr</tt> manual page.  Additional filter 
options are documented in the
filter package that is used.  
Later we discuss a couple of
filters that are probably on your system.  We can't possibly describe
how to use all the filters and filter packages available to you for
use with Linux.  You
should read the manual pages for the filters on your system to learn how to
get the output you want.</p>

<p>A well-configured printcap file uses the printer's name to determine
what kind of filtering to apply.
For example, if your printer can automatically format and print an <span class="acronym">HTML</span>
(World Wide Web) document, you may be able to tell <tt class="command">lpr</tt> 
to print to the <tt class="literal">html</tt> printer:
<blockquote><pre class="code">lpr -Phtml ~/homepage.html</pre></blockquote>

This printer could actually be the same printer you use for PostScript, 
for example, but by specifying a printer named <tt class="literal">html</tt> you
cause <tt class="command">lpd</tt> to use a different printcap definition
that processes the file through an <span class="acronym">HTML</span> filter into
a graphic format the printer understands.</p>

<p>Since the system administrator controls the contents of 
<em class="filename">/etc/printcap</em>,
you are not at liberty to simply exchange one filtering process for 
another.  You do have a lot of control on the command line and through
environment variables that affect your typesetting tools,
filter parameters, and printer selection.  When necessary, you can filter files
before submitting them to the printer management system.  For example,
if you receive email with an attached graphic that you cannot display
or print, you might save the file to disk and then use one of the
many graphic conversion utilities available for Linux to convert it 
(filter it) into a printable form, before passing the file to 
<tt class="command">lpr</tt>.</p>

<p>Much depends on the cleverness of the filter.  If 
an option is passed through <tt class="command">lpr</tt> 
and the filter but is never interpreted, it may end up passed 
through to the printer, either before or after the actual 
print file.  This may have no effect.  In some cases, a 
printer configuration command is deliberately passed to 
the printer this way.  More typically a passed option 
prints extra pages, probably with stray 
characters on them; usually this is harmless.  If you 
observe such behavior, make sure you aren't causing the problem 
yourself with environment variables, badly formed commands, or unsupported
options.  If it wasn't your fault, the administrator should try to trace 
the problem to save paper and time.</p>

<p>Some filters automatically apply the <span class="acronym">PRINTER</span>
environment variable if you set it.  You should know that the
equivalent printer variable for a System V print system is
<span class="acronym">LPDEST</span>, and some print filters you acquire may
expect or accept that variable.  You may even work on a mixed network
with accounts on different systems where one uses
<span class="acronym">BSD</span> print management and another uses System V.  If
you are a belt-and-suspenders kind of person, you can set both
<span class="acronym">LPDEST</span> and <span class="acronym">PRINTER</span> in your shell
initialization file.</p>

<p>Problems using a print filter may affect other users on a multiuser
system.  Report any difficulties to the print-system administrator.</p>

<a name="INDEX-2176" /><a name="INDEX-2177" /><a name="INDEX-2178" />
</div>




<div class="sect2">
<h3 class="sect2">9.5.2. nenscript</h3>

<p><a name="INDEX-2179" />
<a name="INDEX-2180" />
The <tt class="command">nenscript</tt> utility
is a flexible filter that provides good formatted
output for PostScript printers, even from <span class="acronym">ASCII</span>
text files.  It isn't a
basic Linux utility, but it is included in a number of Linux
distributions and can be retrieved from the usual Linux 
<span class="acronym">FTP</span> sites.  While you can invoke
<tt class="command">nenscript</tt> to send a prepared 
file to the printer, it usually is specified in the
<em class="filename">/etc/printcap</em> file as a pass-through filter that takes 
text from the standard input and sends it to the standard output.</p>

<p>Suppose you are printing out a C program and want line numbering and a
printout on green-striped fanfold paper (not the same format you'd
want when printing those graphics you downloaded from the Internet on your
nifty PostScript printer).
You need to have the program processed, and then
insert the line numbers in front of the lines. 
The solution is to process
the file through a filter such as the 
<tt class="command">nenscript</tt> utility (if you have it installed). After doing its own processing,
<tt class="command">nenscript</tt> passes the file to <tt class="command">lpr</tt> for spooling and printing to your trusty tractor-feed printer (named
<tt class="literal">dino</tt> here):

<blockquote><pre class="code">nenscript -B -L66 -N -Pdino myprogram.c</pre></blockquote></p>

<p>The <tt class="command">nenscript</tt> filter 
numbers each line of the file passed through it
when you specify the <span class="option">-N</span> 
option.  The <span class="option">-B</span> option suppresses 
the usual header information from being printed on each 
page, and the <span class="option">-L66</span> option specifies
formatting at 66 lines per page.  The 
<tt class="command">nenscript</tt> filter just passes the 
<span class="option">-Pdino</span> option through to 
<tt class="command">lpr</tt>, which interprets it and directs the output 
to <tt class="literal">dino</tt>'s print spool directory for
<?troff \p?> printing.</p>

<p>When called on the command
line, <tt class="command">nenscript</tt> automatically passes output to <tt class="command">lpr</tt> unless you
specify standard output by supplying the <span class="option">-p</span> 
option.  You don't need to pipe
or redirect <tt class="command">nenscript</tt> output to
<tt class="command">lpr</tt> explicitly.<a href="#FOOTNOTE-42">[42]</a></p><blockquote>

<a name="FOOTNOTE-42" /><p>[42]The <tt class="command">nenscript</tt> utility could 
also be the usual filter that the printcap file specifies for use with 
your printer.  It won't hurt for the file to go through a 
properly designed filter more than once.  A filter
passes a processing instruction on only when it does not perform 
the processing itself.  As a filter executes an instruction, it 
discards the processing option.  You needn't worry that your file will
end up with two sets of line numbers on the page.</p>

</blockquote>

<p>Suppose you are going to print a lot of program listings today.  For 
convenience, you can set an environment variable for
<tt class="command">nenscript</tt> to
specially process and print your listings each time:
<blockquote><pre class="code">export NENSCRIPT=" -B -L66 -N -Pdino"</pre></blockquote>

Now, to print your listing correctly, all you need enter is:
<blockquote><pre class="code">nenscript myprogram.c</pre></blockquote></p>

<p><tt class="command">nenscript</tt> optionally sends
output to a file, which is often useful for preparing
PostScript files on Linux hosts that don't 
actually have a PostScript printer available.  For 
example, to convert a text file to a PostScript
file, formatted for two-column printing on A4 
pages in 6-point Courier font, for instance, you would type:
<blockquote><pre class="code">nenscript -2 -fCourier6 -TA4 -pdocument.ps document.txt</pre></blockquote></p>

<p>The <span class="option">-2</span> option overrides the one-column 
default, and the <span class="option">-fCourier6</span> option overrides
the 7-point Courier default for two-column output.  (The 
one-column default is Courier10; <tt class="command">nenscript</tt> always uses 
Courier font when converting plain text into
PostScript.)  The <span class="option">-TA4</span> argument specifies 
European standard A4 paper format.  If <tt class="command">nenscript</tt> 
was compiled using the <span class="acronym">US_VERSION</span> variable, the default paper
format is 8.5 x 11 inches (if you're not using the
<span class="acronym">US_VERSION</span> environment variable, you can specify this size
through <span class="option">-TUS</span>).  The
<span class="option">-p</span> option specifies that the output should be 
stored to <em class="filename">document.ps</em>, and the
filename specified with no option is the
input to <tt class="command">nenscript</tt>.  If no filename had been specified, 
<tt class="command">nenscript</tt> would have taken 
standard input as the filename.</p>

<p>As another example, to print the <tt class="command">nenscript</tt>
manual page as basic text on a PostScript printer, enter:
<blockquote><pre class="code">man nenscript | col -b | nenscript</pre></blockquote></p>

<p>The <tt class="command">man</tt> command retrieves 
and formats the manual page and formats
it for text display.  The <tt class="command">col -b</tt> command strips the 
backspace instructions
for highlighting and underlining, leaving plain text that is piped
to the <tt class="command">nenscript</tt> filter.
This turns the plain text into simple PostScript
with some "pretty printing" that applies headers, footers, page numbering,
and the like.  Finally, the file is passed to 
<tt class="command">lpr</tt>, which spools the file.  The 
file passes once more through the filter specified in the printcap file, 
which could be a "dummy" filter that simply passes the text through. Or the
filter could do additional things, such as attaching a formfeed character 
to the end of the print file.</p>

<p>If you specify the <span class="option">-Z</span> option with <tt class="command">nenscript</tt>,
it attempts to detect 
PostScript files passed to it and passes them through unaltered.</p>

<p>If a PostScript file is passed to 
<tt class="command">nenscript</tt> and is
taken for a text file (probably because
<tt class="command">nenscript</tt> was 
not called with the <tt class="command">-Z</tt> option)
<tt class="command">nenscript</tt> will encapsulate 
<img src="figs/bomb.gif">&nbsp;&nbsp;

it and pass it through to print.  This can
result in the PostScript code being printed out literally.  Even a small
PostScript file can use up a lot of paper in this way.</p>

<p>Suppose the <tt class="command">lpd</tt> daemon 
already applies <tt class="command">nenscript</tt> to process files sent
to the printer.  The file should still process
correctly if it does, but intervening filtering 
could cause the second pass
through <tt class="command">nenscript</tt> to 
encapsulate the PostScript source.  It would be
safer to set the <span class="acronym">NENSCRIPT</span> variable.
When the <tt class="command">nenscript</tt> 
filter is applied by <em class="filename">/etc/printcap</em> to a print file,
the options set in your <span class="acronym">NENSCRIPT</span> 
environment variable are used, but are 
overridden by explicit options passed 
through <tt class="command">lpr</tt> from a command line
or another utility.</p>

<p>Note that you could specify the default printer to use either in
<span class="acronym">PRINTER</span> or as
a <tt class="command">-P</tt> argument stored to <span class="acronym">NENSCRIPT</span>.
If you set <span class="acronym">NENSCRIPT</span> to specify a printer 
to use, that printer will be used
every time <span class="acronym">NENSCRIPT</span> filters one of your files.
We recommend that you set <span class="acronym">PRINTER</span> rather than <tt class="command">-P</tt> 
in <span class="acronym">NENSCRIPT</span>, so that you can change the printer 
specification and have it filtered appropriately.</p>

<a name="INDEX-2181" /><a name="INDEX-2182" /><a name="INDEX-2183" />
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch10_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">9.4. Graphics</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">10. Installing the X
 Window System</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>