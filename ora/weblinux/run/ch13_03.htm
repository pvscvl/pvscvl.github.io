<?label 13.3. Shell Programming?><html><head><title>Shell Programming (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">13.3. Shell Programming</h2>

<p><a name="INDEX-2696" />
<a name="INDEX-2697" />
<a name="INDEX-2698" />

In the section "<a href="ch04_05.htm">Section 4.5, "Shells"</a>" in <a href="ch04_01.htm">Chapter 4, "Basic Unix
 Commands
 and Concepts"</a>,
we discussed the various shells available for Linux,
but something should be said about them in terms of programming. 
The differences come through most clearly when it comes to writing 
shell scripts. The Bourne shell and C shell command languages are
slightly different, but the distinction is not obvious with most normal
interactive use. In fact, many of the distinctions arise only when
you attempt to use bizarre, little-known features of either shell, such 
as word substitution or some of the more oblique parameter expansion
functions.</p>

<p>The most notable difference between Bourne and C shells
is the form of the various flow-control structures, including
<tt class="literal">if &#133;then</tt> and <tt class="literal">while</tt> loops. In the Bourne shell,
an <tt class="literal">if &#133;then</tt> takes the form:
<blockquote><pre class="code">if <em class="replaceable">list</em> 
then 
  <em class="replaceable">commands</em> 
elif <em class="replaceable">list</em> 
then 
  <em class="replaceable">commands</em> 
else 
  <em class="replaceable">commands</em> 
fi</pre></blockquote>

where <em class="replaceable">list</em> is just a sequence of commands (more generally called
"pipelines") to be used as the conditional expression for the
<tt class="literal">if</tt> and <tt class="literal">elif</tt> (short for "else if") commands. The conditional
is considered to be true if the exit status of the <em class="replaceable">list</em> is
zero (unlike Boolean expressions in C, in shell terminology an exit
status of zero indicates successful completion). The <em class="replaceable">commands</em>
enclosed in the conditionals are simply commands to execute if the
appropriate <em class="replaceable">list</em> is true. The <tt class="literal">then</tt> after each <em class="replaceable">list</em>
must be on a new line to distinguish it from the <em class="replaceable">list</em> itself;
alternately, you can terminate the <em class="replaceable">list</em> with a <tt class="literal">;</tt>. 
The same holds true for the <em class="replaceable">commands</em>.</p>

<?troff .Nd 10?><p> 
 
An example is:
<blockquote><pre class="code">if [ "$PS1" ]; then 
  PS1="\h:\w% " 
fi</pre></blockquote>

This sequence checks to see whether the shell is a login shell (that
is, whether the prompt variable <tt class="literal">PS1</tt> is set) and if so, resets
the prompt
to <tt class="literal">\h:\w%</tt>, which is a prompt expansion standing for 
the hostname followed by the current working directory. For example:
<blockquote><pre class="code">loomer:/home/loomer/mdw%</pre></blockquote></p>

<p><a name="INDEX-2699" />
The <tt class="literal">[&#133;]</tt> conditional appearing after the <tt class="literal">if</tt> is
a <tt class="command">bash</tt> built-in command, shorthand for <tt class="command">test</tt>. The <tt class="command">test</tt>
command and its abbreviated equivalent provide a convenient mechanism
for testing values of shell variables, string equivalence, and so forth.
Instead of using <tt class="literal">[&#133;]</tt>, you could call any set of commands after the
<tt class="literal">if</tt>, as long as the last command's exit value indicates the value of the conditional.</p>

<p><a name="INDEX-2700" />
Under <tt class="command">tcsh</tt>, an <tt class="literal">if &#133;then</tt> compound statement looks like the
following:
<blockquote><pre class="code">if (<em class="replaceable">expression</em>) then 
  <em class="replaceable">commands</em> 
else if (<em class="replaceable">expression</em>) then 
  <em class="replaceable">commands</em> 
else  
  <em class="replaceable">commands</em> 
endif</pre></blockquote>

The difference here is that the <em class="replaceable">expression</em> after the <tt class="literal">if</tt> is
an arithmetic or logical expression evaluated internally by <tt class="command">tcsh</tt>, while
with <tt class="command">bash</tt> the conditional expression is a command,
and the expression returns true or false based on the command's exit status.
Within <tt class="command">bash</tt>, using <tt class="command">test</tt> or
<tt class="literal">[&#133;]</tt> is similar to an arithmetic expression as used in <tt class="command">tcsh</tt>.</p>

<p>With <tt class="command">tcsh</tt>, however, if you wish to run external commands within the 
<em class="replaceable">expression</em>, you must enclose the command in braces: 
<tt class="literal">{<em class="replaceable">command</em>}</tt>.</p>

<p>The equivalent of the previous <tt class="command">bash</tt> sequence in <tt class="command">tcsh</tt> is:
<blockquote><pre class="code">if ($?prompt) then 
  set prompt="%m:%/%% " 
endif</pre></blockquote>

where <tt class="command">tcsh</tt>
<?troff \/?>'s own prompt special characters have been used. As you can
see, <tt class="command">tcsh</tt> boasts a command syntax similar to the C language, and
expressions are arithmetically and logically oriented. In <tt class="command">bash</tt>,
however, almost everything is an actual command, and expressions
are evaluated in terms of exit status values. There are analogous
features in either shell, but the approach is slightly different.</p>

<?troff .Nd 10?><p>A similar change exists with the <tt class="literal">while</tt> loop. In <tt class="command">bash</tt>, this takes
the form:
<blockquote><pre class="code">while <em class="replaceable">list</em> 
do 
  <em class="replaceable">commands</em> 
done</pre></blockquote>

You can negate the effect by replacing the word <tt class="literal">while</tt> with
<tt class="literal">until</tt>. Again, <em class="replaceable">list</em> is just a command pipeline to
be executed, and the exit status determines the result (zero for
success and nonzero for failure). Under <tt class="command">tcsh</tt> the loop looks like:
<blockquote><pre class="code">while (<em class="replaceable">expression</em>) 
  <em class="replaceable">commands</em> 
end</pre></blockquote>

where <em class="replaceable">expression</em> is a logical expression to be evaluated within
<tt class="command">tcsh</tt>.</p>

<p>

This example should be enough to get a head start on understanding the
overall differences of shell scripts under <tt class="command">bash</tt> and
<tt class="command">tcsh</tt>. We encourage you to read the <tt class="command">bash</tt> and <tt class="command">tcsh</tt> manual pages (although they barely
serve as a tutorial--more as a reference) and Info pages, if you have 
them available. Various books and tutorials on using these two shells
are available as well; in fact, any book on shell programming will
do, and you can interpolate the advanced features of
<tt class="command">bash</tt> and <tt class="command">tcsh</tt>
over the standard Bourne and C shells using the manual pages.
<em class="emphasis">Learning the bash Shell</em> by Cameron Newham and
Bill Rosenblatt and <em class="emphasis">Using csh
and tcsh</em> by Paul DuBois are also good investments.</p>

<a name="INDEX-2701" />


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.2. Makefiles</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">13.4. Using Perl</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>