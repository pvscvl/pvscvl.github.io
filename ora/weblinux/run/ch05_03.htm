<?label 5.3. System Startup and Initialization?><html><head><title>System Startup and Initialization (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch05_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch05_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">5.3. System Startup and Initialization</h2>

<p>In this section, we're going to talk about exactly what happens when
the system boots. Understanding this process and the files involved
is important for performing various kinds of system configuration.</p>

<div class="sect2">
<h3 class="sect2">5.3.1. Kernel Boot Messages</h3>

<p><a name="INDEX-1283" />
<a name="INDEX-1284" />
<a name="INDEX-1285" />
<a name="INDEX-1286" />
The first step is booting the kernel. As described in the previous
section, this can be done from floppy or hard drive. As the kernel
loads into memory, it will print messages to the system console,
but
usually also saves them in the system log files as well. As root, you can always check the file
<em class="filename">/var/log/messages</em> (which contains kernel messages
emitted during runtime as well). The command <tt class="command">dmesg</tt>
prints out the last lines of the kernel message ring buffer; directly
after booting, naturally, you will get the boot messages, such as (not
necessarily the same, and not necessarily in the same order):</p>

<blockquote><pre class="code">Console: 16 point font, 480 scans
Console: colour VGA+ 80x30, 1 virtual console (max 63)
pcibios_init : BIOS32 Service Directory structure at 0x000fb1d0
pcibios_init : BIOS32 Service Directory entry at 0xfb5a0
pcibios_init : PCI BIOS revision 2.00 entry at 0xfb5d0
Probing PCI hardware.
Calibrating delay loop.. ok - 36.04 BogoMIPS
Memory: 14984k/16384k available (552k kernel code, 384k reserved,\
464k data)
Swansea University Computer Society NET3.035 for Linux 2.0
NET3: Unix domain sockets 0.13 for Linux NET3.035.
Swansea University Computer Society TCP/IP for NET3.034
IP Protocols: ICMP, UDP, TCP
VFS: Diskquotas version dquot_5.6.0 initialized
Checking 386/387 coupling... Ok, fpu using exception 16 error\
reporting.
Checking 'hlt' instruction... Ok.
Intel Pentium with F0 0F bug - workaround enabled.
alias mapping IDT readonly ...  ... done
Linux version 2.0.35 (root@rabbit) (gcc version egcs-2.90.29\
980515 (egcs-1.0.3 release)) #3 Fri Nov 13 15:07:45 CET 1998
Starting kswapd v 1.4.2.2
Serial driver version 4.13 with no serial options enabled
tty00 at 0x03f8 (irq = 4) is a 16550A
tty01 at 0x02f8 (irq = 3) is a 16550A
APM BIOS not found.
Real Time Clock Driver v1.09
Configuring Adaptec (SCSI-ID 7) at IO:330, IRQ 11, DMA priority 5
scsi0 : Adaptec 1542
scsi : 1 host.
  Vendor: IBM       Model: DORS-32160        Rev: WA0A
  Type:   Direct-Access                      ANSI SCSI revision: 02
Detected scsi disk sda at scsi0, channel 0, id 0, lun 0
  Vendor: SANYO     Model: CRD-254S          Rev: 1.05
  Type:   CD-ROM                             ANSI SCSI revision: 02
Detected scsi CD-ROM sr0 at scsi0, channel 0, id 4, lun 0
scsi : detected 1 SCSI cdrom 1 SCSI disk total.
SCSI device sda: hdwr sector= 512 bytes. Sectors= 4226725 [2063 MB]\
[2.1 GB]
Partition check:
 sda: sda1 sda2 sda3
VFS: Mounted root (ext2 filesystem) readonly.
Adding Swap: 130748k swap-space (priority -1)
lp1 at 0x0378, (polling)
3c59x.c:v0.99E 5/12/98 Donald Becker http://cesdis.gsfc.nasa.gov/\
linux/drivers/vortex.html
eth0: 3Com 3c905B Cyclone 100baseTx at 0x6000, 00:10:4b:45:1d:53,\
IRQ 12
  8K byte-wide RAM 5:3 Rx:Tx split, 10baseT interface.
  Enabling bus-master transmits and whole-frame receives.
ISDN subsystem Rev: 1.44/1.41/1.47/1.28/none loaded
HiSax: Driver for Siemens chip set ISDN cards
HiSax: Version 2.1
HiSax: Revisions 1.15/1.10/1.10/1.30/1.8
HiSax: Total 1 card defined
HiSax: Card 1 Protocol EDSS1 Id=teles (0)
HiSax: Teles IO driver Rev. 1.11
HiSax: Teles 16.3 config irq:5 isac:980  cfg:d80
HiSax: hscx A:180  hscx B:580
Teles3: HSCX version A: V2.1  B: V2.1
Teles3: ISAC 2086/2186 V1.1
HiSax: DSS1 Rev. 1.16
HiSax: 2 channels added
HiSax: module installed
inserting floppy driver for 2.0.35
Floppy drive(s): fd0 is 1.44M
FDC 0 is an 8272A</pre></blockquote>

<p>These messages are all printed by the kernel itself, as each device driver
is initialized. The exact messages printed depend on what drivers are
compiled into your kernel and what hardware you have on your system.
Here's a quick rundown on what they
mean.</p>

<p>First, the kernel reports which console font it has picked and which
console type it has detected; note that this involves only the text
mode being
	  used by the kernel, not the capabilities of your video
	  card. (An <span class="acronym">SVGA</span> video card is
	  reported as <tt class="literal">VGA+</tt> as far as the console
	  text mode is concerned.)</p>

<p>Next, the kernel gathers information about the
		<span class="acronym">PCI</span> bus and checks for any
		<span class="acronym">PCI</span> cards present in the system.</p>

<p> <a name="INDEX-1287" />
The next message printed is the "BogoMips" calculation for
your processor. This is an utterly bogus (hence the name) measurement
of processor speed, which is used to obtain optimal performance in
delay loops for several device drivers. The kernel also prints
information on the system memory:

<blockquote><pre class="code">Memory: 14984k/16384k available (552k kernel code, 384k reserved, 464k data)</pre></blockquote>


Here, we see that 14984k of <span class="acronym">RAM</span> are available for
the system to use. This means the kernel itself is using 1400k.</p>

<p>The networking code in the kernel is then initialized
		and the CPU type checked. You can see from the line:</p>

<blockquote><pre class="code">Intel Pentium with F0 0F bug - workaround enabled.</pre></blockquote>

<p>that the Linux kernel is even clever enough to detect
		the infamous Pentium bug and provide a workaround. The line:</p>

<blockquote><pre class="code">Linux version 2.0.35 (root@rabbit) (gcc version egcs-2.90.29 980515\
(egcs-1.0.3 release)) #3 Fri Nov 13 15:07:45 CET 1998</pre></blockquote>

<p>tells you the version number of the kernel and who has
		compiled it on which machine (in this case, it was
		<b class="emphasis-bold">root</b> on the machine <b class="emphasis-bold">rabbit</b> and which
		compiler was used). The serial device driver is then initialized, which prints information
on each detected serial port. A line such as:

<blockquote><pre class="code">tty00 at 0x03f8 (irq = 4) is a 16550A</pre></blockquote>


means that the first serial device (<em class="filename">/dev/tty00</em>,
or COM1) was detected at address 0x03f8, <span class="acronym">IRQ</span> 4,
using 16550A <span class="acronym">UART</span> functions. Next comes configuration and checking for a
		<span class="acronym">SCSI</span> host
		adapter. The kernel prints out information about all
		<span class="acronym">SCSI</span> devices found. The line:
<a name="INDEX-1288" /></p>

<blockquote><pre class="code">Adding Swap: 130748k swap-space (priority -1)</pre></blockquote>

<p>tells you how much swap space the kernel has
<a name="INDEX-1289" />
		found. Among the further tasks performed during a typical
		boot are finding and configuring a parallel port
		(<tt class="literal">lp1</tt>), detecting and configuring the network
		card, and finally setting up the <span class="acronym">ISDN</span> subsystem. The
		last thing it reports is the detection of the floppy disk
		driver. Depending on your hardware, other messages will be printed in addition
to those given in the example. For example, parallel port and <span class="acronym">SCSI</span> drivers will
be initialized at this point, if you have them.</p>

<a name="INDEX-1290" /><a name="INDEX-1291" /><a name="INDEX-1292" />
</div>




<a name="x-100-3-sec-sysadm-start-init" /><div class="sect2">
<h3 class="sect2">5.3.2. init, inittab, and rc files</h3>

<p><a name="INDEX-1293" />
Once the device drivers are initialized, the kernel executes the
program <tt class="command">init</tt>, which is found in
<em class="filename">/etc</em>, <em class="filename">/bin</em>, or
<em class="filename">/sbin</em> (it's <em class="filename">/sbin/init</em> on
most systems). <tt class="command">init</tt> is a general-purpose program that spawns new processes
and restarts certain programs when they exit. For example, each
virtual console has a <tt class="command">getty</tt> process running on it, started
by <tt class="command">init</tt>. When you exit from a login session on one of the
virtual consoles, the <tt class="command">getty</tt> process exits, and <tt class="command">init</tt> starts
a new one, allowing you to log in again.</p>

<p><a name="INDEX-1294" />
<a name="INDEX-1295" />
<tt class="command">init</tt> is also responsible for running a number of programs and
scripts when the system boots. Everything <tt class="command">init</tt> does is
controlled by the file <em class="filename">/etc/inittab</em>. Each line in
this file is of the format:
<blockquote><pre class="code"><em class="replaceable">code</em>:<em class="replaceable">runlevels</em>:<em class="replaceable">action</em>:<em class="replaceable">command</em></pre></blockquote>

<?troff .ne 10?>
<em class="replaceable">code</em> is a unique one- or two-character sequence used to
identify this entry in the file. Several of the entries must have
a particular <em class="replaceable">code</em> to work correctly; more on this later.</p>

<p><a name="INDEX-1296" />
<em class="replaceable">runlevels</em> is the list of "runlevels" in which this
entry should be executed. A runlevel is a number or letter
that specifies the current system state, as far as
<tt class="command">init</tt> is concerned. For example, when the system runlevel is
changed to 3, all entries in <em class="filename">/etc/inittab</em> containing
3 in the <em class="replaceable">runlevels</em> field will be executed. Runlevels
are a useful way to group entries in <em class="filename">/etc/inittab</em> together. For
example, you might want to say that runlevel 1 executes only the
bare minimum of configuration scripts, runlevel 2 executes everything
in runlevel 1 plus networking configuration, runlevel 3 executes
everything in levels 1 and 2 plus dial-in login access, and so
on. Today, the Red Hat distribution is set up so that runlevel 5
automatically starts the X Window System graphical interface.
The SuSE distribution does it at runlevel 3, and the Debian
distribution does so at runlevel 2--provided you have installed
X.</p>

<p>For the most part, you don't need to concern yourself with runlevels.
When the system boots, it enters the default runlevel (set in
<em class="filename">/etc/inittab</em>, as we will soon show). On most
systems, this default is runlevel 2 or 3. After we discuss normal
booting, we'll show you how to enter another runlevel that you will
sometimes need to use--runlevel 1, or single-user mode.</p>

<p><a name="INDEX-1297" />
<a name="INDEX-1298" />
Let's take a look at a sample <em class="filename">/etc/inittab</em> file:</p>

<blockquote><pre class="code"># Set the default runlevel to three
id:3:initdefault:

# Execute /etc/rc.d/rc.sysinit when the system boots
si:S:sysinit:/etc/rc.d/rc.sysinit

# Run /etc/rc.d/rc with the runlevel as an argument
l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1
l2:2:wait:/etc/rc.d/rc 2
l3:3:wait:/etc/rc.d/rc 3
l4:4:wait:/etc/rc.d/rc 4
l5:5:wait:/etc/rc.d/rc 5
l6:6:wait:/etc/rc.d/rc 6

# Executed when we press ctrl-alt-delete
ca::ctrlaltdel:/sbin/shutdown -t3 -rf now

# Start agetty for virtual consoles 1 through 6
c1:12345:respawn:/sbin/agetty 38400 tty1
c2:12345:respawn:/sbin/agetty 38400 tty2
c3:45:respawn:/sbin/agetty 38400 tty3
c4:45:respawn:/sbin/agetty 38400 tty4
c5:45:respawn:/sbin/agetty 38400 tty5
c6:45:respawn:/sbin/agetty 38400 tty6</pre></blockquote>

<p>Fields are separated by colons. The last field is the most
recognizable: it is the command that <tt class="command">init</tt> executes
for this entry.  The first field is an arbitrary identifier (it
doesn't matter what it is so long as it's unique in the file) while
the second indicates what runlevels cause the command to be
invoked. The third field tells <tt class="command">init</tt> how to handle
this entry; for example, whether to execute the given command once or
to respawn the command whenever it exits.</p>

<p>The exact contents of <em class="filename">/etc/inittab</em> depend on your system and
the distribution of Linux you have installed.
<a name="INDEX-1299" /></p>

<p>In our sample file, we see first that the default runlevel is set to 3.
The <em class="replaceable">action</em> field for this entry is <tt class="literal">initdefault</tt>, which
causes the given <em class="replaceable">runlevel</em> to be set to the default.
That's the runlevel normally used whenever the system boots. You can
override the default with any level you want by running <tt class="command">init</tt>
manually (which you might do when debugging your configuration) and
passing in the desired runlevel as an argument. For instance, the
following command shuts down all current processes and starts runlevel
5 (warn all your users to log off before doing this!):
<blockquote><pre class="code">tigger# <tt class="userinput"><b>init 5</b></tt></pre></blockquote>

<span class="acronym">LILO</span>
can also boot in single-user mode (usually runlevel 1)--see the
section "<a href="ch05_02.htm">Section 5.2.2.3, "Specifying boot time options"</a>"
earlier in this chapter.</p>

<p><a name="INDEX-1300" />
<a name="INDEX-1301" />
The next entry tells <tt class="command">init</tt> to execute the script <em class="filename">/etc/rc.d/rc.sysinit</em>
when the system boots. (The <em class="replaceable">action</em> field is <tt class="literal">sysinit</tt>, which
specifies that this entry should be executed when <tt class="command">init</tt> is first
started at system boot.) This file is simply a shell script containing
commands to handle basic system initialization; for example,
swapping is enabled, filesystems are checked and mounted, and the system
clock is synchronized with the <span class="acronym">CMOS</span> clock.
You can take a look at
this file on your system; we'll be talking more about the commands
contained therein in
<a href="ch06_01.htm">Chapter 6, "Managing
 Filesystems, Swap,
 and Devices"</a>; see the sections
"<a href="ch06_01.htm">Section 6.1, "Managing Filesystems"</a>" and
"<a href="ch06_02.htm">Section 6.2, "Managing Swap Space"</a>." On other
distributions, this file might be elsewhere, for example, on SuSE it
is <em class="filename">/sbin/init.d/boot</em>.</p>

<p><a name="INDEX-1302" />
<a name="INDEX-1303" />
Next, we see that the system executes the script <em class="filename">/etc/rc.d/rc</em> when it enters any of the runlevels 0 through 6, with the appropriate runlevel
as an argument. <em class="filename">rc</em> is a generic startup script that
executes other scripts as appropriate for that runlevel.
The <em class="replaceable">action</em> field
here is <tt class="literal">wait</tt>, which tells <tt class="command">init</tt> to execute the given
<em class="replaceable">command</em>, and to wait for it to complete execution before doing
anything else.</p>

<?troff .sp -.5?>
</div>




<div class="sect2">
<h3 class="sect2">5.3.3. rc files</h3>

<p><a name="INDEX-1304" />
<a name="INDEX-1305" />
<a name="INDEX-1306" />
<a name="INDEX-1307" />
Linux stores startup commands in files with <em class="filename">rc</em>
in the name, using an old Unix convention. The commands do all the
things necessary to have a fully functioning system, like starting
the servers or daemons mentioned in <a href="ch04_01.htm">Chapter 4, "Basic Unix
 Commands
 and Concepts"</a>. Thanks to these commands, the system comes up ready with logging
facilities, mail, a web server, or whatever you installed and asked it
to run. As explained in the previous section, the files are invoked
from <em class="filename">/etc/inittab</em>. The commands are standard
shell commands, and you can simply read the various
<em class="filename">rc</em> files to see what they do.</p>

<p>In this section, we describe the structure of the
<em class="filename">rc</em> files, so you understand where everything
starts and can start or stop servers manually in the rare case that
they don't do what you want them to do.  We'll use Red Hat as
our model, but once you get the idea of what to look for, you
can find the corresponding files on any Linux distribution.</p>

<p><a name="INDEX-1308" />
<a name="INDEX-1309" />
On Red Hat, the top-level <em class="filename">rc</em> script is
<em class="filename">/etc/rc.d/rc</em>. The path is slightly different in
other distributions (<em class="filename">/etc/init.d/rc</em> on Debian,
for instance) but the contents are similar. In the previous section, you could
see how the <em class="filename">/etc/inittab</em> invokes the script under a
variety of circumstances with different numbers from 0 to 6 as
<a name="INDEX-1310" />
arguments. The numbers correspond to runlevels, and each one causes
the <em class="filename">rc</em> files to invoke a different set of scripts.
So our next step is to find the scripts corresponding to each
runlevel.</p>

<p>On Red Hat, scripts for each
runlevel are stored in the directory
<em class="filename">/etc/rc.d/rc</em><em class="replaceable">N</em><em class="filename">.d</em>
where <em class="replaceable">N</em> is the runlevel being started.
Thus, for runlevel 3, scripts in <em class="filename">/etc/rc.d/rc3.d</em>
would be used.
Again, slightly different conventions are the rule in other
distributions.  On Debian, for instance, the directory
for each runlevel is
<em class="filename">/etc/rc</em><em class="replaceable">N</em><em class="filename">.d/</em>.</p>

<p>Take a look in one of those directories; you will see a number of
filenames of the form
<em class="filename">S</em><em class="replaceable">nn</em><em class="replaceable">xxxx</em>
or
<em class="filename">K</em><em class="replaceable">nn</em><em class="replaceable">xxxx</em>
where <em class="replaceable">nn</em> is a number from 00 to 99, and
<em class="replaceable">xxxx</em> is the name of some system
service. The scripts whose names begin with K are executed by
<em class="filename">/etc/rc.d/rc</em> first to kill any existing services,
then the scripts whose names begin with S are executed to start new
services.</p>

<p>The numbers <em class="replaceable">nn</em> in the names are used to
enforce an ordering on the scripts as they are executed: scripts with
lower numbers are executed before those with higher numbers. The name
<em class="replaceable">xxxx</em> is simply used to help you identify
which system service the script corresponds to.
This naming convention might seem odd, but it makes it
easy to add or remove scripts from these directories and have them
automatically executed at the appropriate time by
<em class="filename">/etc/rc.d/rc</em>.
For customizing startup scripts, you'll find it convenient to use a
graphical runlevel editor, such as <tt class="command">ksysv</tt>, in the KDE (see "<a href="ch11_03.htm">Section 11.3, "The K Desktop Environment"</a>" in <a href="ch11_01.htm">Chapter 11, "Customizing Your X Environment"</a>).</p>

<p>For example, the script to initialize networking might be called
<em class="filename">S10network</em>, while the script to stop the system
logging daemon might be called <em class="filename">K70syslog</em>.
If these files are placed in the appropriate
<em class="filename">/etc/rc.d/rc</em><em class="replaceable">N</em><em class="filename">.d</em>
directories, <em class="filename">/etc/rc.d/rc</em> will run them, in
numerical order, at system startup or shutdown time. If the default
runlevel of your system is 3, look in
<em class="filename">/etc/rc.d/rc3.d</em> to see which scripts are executed
when the system boots normally.</p>

<p><a name="INDEX-1311" />
Because the same services are started or stopped at different
runlevels, the Red Hat distribution uses symbolic links instead of
repeating the same script in multiple places.  Thus, each S or K file
is a symbolic link that points to a central directory that stores
startup or shutdown scripts for all services.  On Red Hat, this
central directory is <em class="filename">/etc/rc.d/init.d</em>, while on
<a name="INDEX-1312" />
<a name="INDEX-1313" />
<a name="INDEX-1314" />
SuSE and Debian, it is <em class="filename">/etc/init.d</em>.  On Debian,
the directory 
<?troff .ne 10?>
contains a script called <em class="filename">skeleton</em> that you 
can adapt to start and stop any new daemons you might write.</p>

<p>Knowing the location of a startup or shutdown script is useful in case
you don't want to completely reboot or enter a different runlevel, but
need to start or stop a particular service. Look in the
<em class="filename">init.d</em> directory for a script of the appropriate
name and execute it, passing the parameter <tt class="literal">start</tt> or
<tt class="literal">stop</tt>. For
example, on SuSE, if you want the Apache web server to be running but your
system is in a runlevel that does not include Apache, just enter the following:
<blockquote><pre class="code">tigger# <tt class="userinput"><b>/sbin/init.d/apache start</b></tt></pre></blockquote></p>

<p><a name="INDEX-1315" />
<a name="INDEX-1316" />
Another important system configuration script is
<em class="filename">/etc/rc.d/rc.local</em>, which is executed after the
other system-initialization scripts are run. (How is this
accomplished? Generally, a symbolic link to
<em class="filename">rc.local</em> is made in each
<em class="filename">/etc/rc.d/rc</em><em class="replaceable">N</em><em class="filename">.d</em>
directory with the name <em class="filename">S99local</em>. Since 99 is the
largest numerical order any of the S scripts can
have, it is executed last. <em class="emphasis">Voila!</em>) You can edit
<em class="filename">rc.local</em> to accomplish any peculiar or otherwise
out-of-place system commands at boot time, or if you're not sure where
else they should be executed.
Debian doesn't have an equivalent of
<em class="filename">rc.local</em> script, but nothing stops you
from adding it and invoking it from <em class="filename">rc</em> if you're
used to having it.</p>

<p><a name="INDEX-1317" />
<a name="INDEX-1318" />
<a name="INDEX-1319" />
<a name="INDEX-1320" />
The next entry, labeled <tt class="literal">ca</tt>, is executed when the
key combination Ctrl-Alt-Del is pressed on the
console. This key combination produces an interrupt that usually
reboots the system. Under Linux, this interrupt is caught and sent to
<tt class="command">init</tt>, which executes the entry with the
<em class="replaceable">action</em> field of
<tt class="literal">ctrlaltdel</tt>. The command shown here,
<tt class="command">/sbin/shutdown -t3 -rf now</tt>, will do a
"safe" reboot of the system. (See the section
"<a href="ch05_05.htm">Section 5.5, "Shutting Down the System"</a>" later in
this chapter.) This way
we protect the system from sudden reboot when Ctrl-Alt-Del is pressed.</p>

<p><a name="INDEX-1321" />
<a name="INDEX-1322" />
<a name="INDEX-1323" />
Finally, the <em class="filename">inittab</em> file includes entries that
execute <em class="filename">/sbin/agetty</em> for the first six virtual
consoles. <tt class="command">agetty</tt> is one of the several
<tt class="command">getty</tt> variants available for Linux.
<a name="INDEX-1324" />
<a name="INDEX-1325" />
These programs permit logins on terminals; without them the terminal
would be effectively dead and would not respond when a user walked up
and pressed a key or mouse button. The various
<tt class="command">getty</tt> commands open a terminal device
(such as a virtual console, or a serial line), set various parameters
for the terminal driver, and execute <em class="filename">/bin/login</em>
to initiate a login session on that terminal. Therefore, to allow
logins on a given virtual console, you must be running
<tt class="command">getty</tt> or <tt class="command">agetty</tt> on it.
<tt class="command">agetty</tt> is the version used on a number of Linux
systems, but others use <tt class="command">getty</tt>, which has a slightly
different syntax. See the manual pages for <tt class="command">getty</tt>
and <tt class="command">agetty</tt> on your
<?troff \p?> system.</p>

<p><a name="INDEX-1326" />
<a name="INDEX-1327" />
<tt class="command">agetty</tt> takes two arguments: a baud rate and a device name. The
port names for Linux virtual consoles are <em class="filename">/dev/tty1</em>,
<em class="filename">/dev/tty2</em>, and so
forth. <tt class="command">agetty</tt> assumes the given
device name is relative to <em class="filename">/dev</em>. The baud rate for virtual
consoles should generally be 38400.</p>

<p>
Note that the <em class="replaceable">action</em> field for each <tt class="command">agetty</tt> entry is
<tt class="literal">respawn</tt>. This means that <tt class="command">init</tt> should restart the command
given in the entry when the <tt class="command">agetty</tt> process dies, which is
every time a user logs out.</p>

<p><a name="INDEX-1328" />
<a name="INDEX-1329" />
Now you should be familiar with <tt class="command">init</tt>, but the various files and
commands in <em class="filename">/etc/rc.d</em>, which do all of the work, remain a mystery.
We can't delve into these files without more background on other
system administration tasks, such as managing filesystems. We'll lead
you through these tasks in the next few chapters, and eventually
all should be clear.</p>

<a name="INDEX-1330" />
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch05_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch05_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">5.2. Booting the System</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">5.4. Single-User Mode</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>