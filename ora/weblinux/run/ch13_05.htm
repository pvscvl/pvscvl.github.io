<?label 13.5. Programming in Tcl and Tk?><html><head><title>Programming in Tcl and Tk (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch13_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">13.5. Programming in Tcl and Tk</h2>

<p><a name="INDEX-2719" />
<a name="INDEX-2720" />
<a name="INDEX-2721" />
<a name="INDEX-2722" />
<em class="emphasis">Tool Command Language</em>, or Tcl, (pronounced "tickle") is a simple, 
interpreted language that is similar, in some respects, to the Bourne 
shell or Perl. The real benefit of Tcl is that it can be extended
as well as embedded in other applications.  It is particularly popular
when used with the Tk extension, which offers about the simplest
interface you could get to program with windows. As an additional
benefit, you can run your Tcl/Tk problems without much hassle on
both Unix, Windows, and the Macintosh.</p>

<p>By <em class="emphasis">extended</em>, we mean that you can add new commands to the 
Tcl language, simply by writing a few routines in C. By 
<em class="emphasis">embedded</em>, we mean that you can link a C program to the Tcl
libraries, giving that program full access to the Tcl language.
Whereas most Tcl programs are written as scripts and executed by
a precompiled Tcl interpreter, you can include the interpreter
routines in your own application.</p>

<p>For example, let's say that you wanted to write a command-driven debugger 
similar in nature to <tt class="command">gdb</tt>. The debugger would present a prompt
and allow users to enter commands such as <tt class="command">step</tt> and <tt class="command">breakpoint</tt>.</p>

<p>If the command syntax for your debugger is simple, you could easily
write your own routines in C to read a command and process it. 
However, this approach becomes more complex when you wish to
allow the user to define variables, macros, new functions, and so forth.</p>

<p>Instead of writing these routines from scratch, it is easy
to embed a Tcl interpreter into your debugger application. Every command
entered by the user would be handled by the interpreter routines.
These routines are available as a set of C library functions.</p>

<p>The Tcl language itself includes many, many commands of its own.
It provides control structures such as <tt class="literal">while</tt> and <tt class="literal">for</tt> loops, 
the ability to define functions, string and list manipulation
routines, arithmetic functions, and so forth.</p>

<p>On top of these core Tcl routines, your debugger must provide additional
commands--such as the aforementioned <tt class="command">step</tt> and <tt class="command">breakpoint</tt>.
You would implement these commands in C within your application
and tell the Tcl interpreter how to use them.</p>

<p>Now your debugger application has all of the power of Tcl at its
fingertips. For example, the user customization file for the debugger
could be a simple Tcl script. Within this script, the user can 
define new functions and variables, using Tcl's built-in support
for these features.</p>

<p><a name="INDEX-2723" />
Among the many extensions to Tcl is Tk, which provides many 
commands that allow your application to utilize the X Window System
as a user interface.

(X is introduced in <a href="ch10_01.htm">Chapter 10, "Installing the X
 Window System"</a>.)
Writing X-based applications as a Tk script
is surprisingly easy. For example, the following Tcl/Tk application
displays a text-entry widget in which a filename may be entered.
It then runs an <tt class="command">xterm</tt> containing a <tt class="command">vi</tt> process to edit
the file:
<blockquote><pre class="code">#!/usr/bin/wish -f

# Create a label widget, named .l 
label .l -text "Filename:" 
# Create an entry widget, named .e
entry .e -relief sunken -width 30 -textvariable fname

# Place the two widgets into the application window 
pack .l -side left
pack .e -side left -padx 1m -pady 1m

# When the return key is pressed in the entry widget, run xterm
bind .e &lt;Return&gt; {
  exec xterm -e vi $fname
}</pre></blockquote></p>

<p>We will explain the syntax of this script shortly, but for now you
can see that in less than 20 lines of code, we have developed
a reasonably complex X application. When this script is executed,
it will look like <a href="ch13_05.htm">Figure 13-1</a>.</p>

<p>An indication of Tk's usefulness is that the two
	  scripting languages Perl
	  and Python both have interfaces to it.</p>

<a name="x-100-3-fig-prog-tcl-samp1" /><div class="figure"><img src="figs/rl3_1301.gif" alt="Figure 13-1" /></div>
<h4 class="objtitle">Figure 13-1. Simple Tk-generated window</h4><p><a name="INDEX-2724" />
For Tcl applications that use only the core Tcl routines, the 
precompiled interpreter <tt class="command">tclsh</tt> is provided. This interpreter
simply reads Tcl commands and executes them, one by one. In the
case of our debugger application, we would write a new program
that is linked to the Tcl interpreter library routines.</p>

<p> 
<a name="INDEX-2725" />
Likewise, for Tk applications that use only the standard set 
of Tcl commands and Tk widgets, the <tt class="command">wish</tt> (window shell)
interpreter is provided. <tt class="command">wish</tt> executes the previous
script, as you can see. If you wanted to implement new Tcl
commands or Tk widgets, you could write a C program and link it
to the Tcl and Tk libraries.

In the next sections, we introduce you to writing simple Tcl and
Tk scripts, for execution under <tt class="command">tclsh</tt> or <tt class="command">wish</tt>. 
A quick reference to Tcl and Tk is available as <em class="emphasis">Tcl/Tk in a Nutshell</em> by Paul Raines and Jeff Tranter.</p>

<div class="sect2">
<h3 class="sect2">13.5.1. Crash Course in Tcl</h3>

<p>The Tcl language is easy to learn. If you are at all familiar with 
other scripting languages, such as the Bourne or C shell, Tcl/Tk will pose 
no threat to you.</p>

<p>For this reason, we will not spend a great deal of time on the Tcl 
language itself. It is straightforward and can be learned with
the help of the various Tcl manual pages or 

John Ousterhout's
excellent book, <em class="emphasis">Tcl and the Tk Toolkit</em>. This book
describes not only how to write Tcl and Tk scripts but also how to 
use the Tcl/Tk libraries in your own applications.</p>

<p> 
Let's start with a simple example. The following Tcl script counts the 
lines in the given filename:
<blockquote><pre class="code">1  #!/usr/bin/tclsh -f 
2 
3  if {$argc != 1} { 
4    error "lc &lt;filename&gt;" 
5  } 
6 
7  set thefile [open [lindex $argv 0] r] 
8  set count 0 
9 
10 while {[gets $thefile line] &gt;= 0} { 
11   set count [expr $count + 1] 
12 } 
13  
14 puts "Read $count lines."</pre></blockquote>

Lines 3-5 use a simple <tt class="literal">if</tt> statement to ensure that there is 
one argument to the script--that being the filename containing lines
to count. The <tt class="literal">if</tt> command takes two arguments: an expression
and a block of code to execute if the expression evaluates as true.
(Like C, zero indicates false, nonzero indicates true.)</p>

<p> 
Each of the arguments to the <tt class="literal">if</tt> command are contained in 
braces, which group a set of words (or lines) together
as a single argument. Although this syntax may remind you of C
or Perl, Tcl's command-parsing behavior is actually quite simple.
For example, it allows a command argument (here, the body
of code on lines 3-5 containing the <tt class="literal">error</tt> command) to span
multiple lines only if the opening brace is at the end of a line.
If we had written the <tt class="literal">if</tt> command as:
<blockquote><pre class="code">if {$argc != 1} 
  { error "lc &lt;filename&gt;" }</pre></blockquote>

Tcl would have given us the error:
<blockquote><pre class="code">Error: wrong # args: no script following "$argc != 1" argument
wrong # args: no script following "$argc != 1" argument
    while executing
"if {$argc != 1} "
    (file "./lc.tcl" line 3)</pre></blockquote>

In other words, Tcl doesn't know that the second argument to 
<tt class="literal">if</tt> is on the following line.</p>

<p>The body of the <tt class="literal">if</tt> command, on line 4, uses the <tt class="literal">error</tt>
command to display an error message and exit the Tcl script.</p>

<p>On line 7, we open the file given as the first command-line argument,
and assign the resulting file pointer to the variable <tt class="literal">thefile</tt>.
The <tt class="literal">set</tt> command must be used to
assign values to variables. This is because all Tcl commands must
begin with a command name; we can't set the variable <tt class="literal">a</tt> to 1
using something like:
<blockquote><pre class="code">a = 1</pre></blockquote>

<?troff .ne 10?>
because <tt class="literal">a</tt> refers to a variable, not a command. Instead, we use:
<blockquote><pre class="code">set a 1</pre></blockquote>

Later, to refer to the value of the variable <tt class="literal">a</tt>, we would use <tt class="literal">$a</tt>.</p>

<p>The first argument to <tt class="literal">set</tt> is the name of the variable to
assign, and the second argument is the value. Here, we have:
<blockquote><pre class="code">set thefile [open [lindex $argv 0] r]</pre></blockquote>

Square brackets <tt class="literal">[&#133;]</tt> are used to specify a
<em class="emphasis">subscript</em>, a sequence of commands to nest within the current
command. The subscript is executed, and its return value substituted
in the subscript's place.</p>

<p> 
For example, let's look at the subscript:
<blockquote><pre class="code">open [lindex $argv 0] r</pre></blockquote>

This script executes the <tt class="literal">open</tt> command to open the file given
as its first argument. The second argument, <tt class="literal">r</tt>, indicates
that the file should be opened for reading.</p>

<p> 
The first argument to <tt class="literal">open</tt> is the subscript:
<blockquote><pre class="code">lindex $argv 0</pre></blockquote>

The <tt class="literal">lindex</tt> command is used to index a list, or array, of items. 
In this case, we wish to obtain the 0th element of the <tt class="literal">$argv</tt>
array, which contains the command-line arguments to the program,
minus the command name itself. (This is unlike the use of 
<tt class="literal">argv</tt> in C programs.) Therefore, the 0th element of <tt class="literal">$argv</tt> 
is the first command-line argument.</p>

<p>Let's say that we named our script <em class="filename">lc.tcl</em>, and 
invoked it as:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>lc.tcl /etc/passwd</b></tt></pre></blockquote>

Therefore, within the command:
<blockquote><pre class="code">set thefile [open [lindex $argv 0] r]</pre></blockquote>



the nested subscript: 
<blockquote><pre class="code">open [lindex $argv 0] r</pre></blockquote>

will be replaced with: 
<blockquote><pre class="code">open "/etc/passwd" r</pre></blockquote>

which will, in turn, be replaced with the value of the file pointer
corresponding to <em class="filename">/etc/passwd</em>. The net result is that the file
pointer value is assigned to the variable <tt class="literal">thefile</tt>.</p>

<p>On line 8, we set the variable <tt class="literal">count</tt> to 0, which
acts as our line counter.</p>

<?troff .Nd 10?><p>Lines 10-12 contain a simple <tt class="literal">while</tt> loop,
which repeatedly reads lines from the file until
end of file (<span class="acronym">EOF</span>):
<blockquote><pre class="code">while {[gets $thefile line] &gt;= 0} { 
  set count [expr $count + 1] 
}</pre></blockquote>

As we can see, the <tt class="literal">while</tt> command takes two arguments: a
condition and a block of code to execute while the condition is
true. Here, the loop condition is:
<blockquote><pre class="code">[gets $thefile line] &gt;= 0</pre></blockquote>

We see the subscript:
<blockquote><pre class="code">gets $thefile line</pre></blockquote>

which executes the <tt class="literal">gets</tt> command. This reads a single line from
the file pointer <tt class="literal">$thefile</tt> and assigns it to the variable
<tt class="literal">line</tt>. <tt class="literal">gets</tt> returns the count of the number of characters
read, or -1 if <span class="acronym">EOF</span> is reached. Therefore, the <tt class="literal">while</tt> loop will
continuously read lines from the file until <tt class="literal">gets</tt> returns 
a value less than zero.</p>

<p>The body of the <tt class="literal">while</tt> loop is: 
<blockquote><pre class="code"> 
set count [expr $count + 1]</pre></blockquote>

which increments the value of <tt class="literal">count</tt>. Remember that Tcl commands
must begin with a command name. Therefore, arithmetic expressions
are handled using the <tt class="literal">expr</tt> command. Here, the
subscript:
<blockquote><pre class="code">expr $count + 1</pre></blockquote>

returns the value of the variable <tt class="literal">count</tt> plus 1. This is the
canonical way to increment variables within Tcl.</p>

<p> 
Finally, on line 14, we see:
<blockquote><pre class="code">puts "Read $count lines."</pre></blockquote>

which uses the <tt class="literal">puts</tt> command to display a string to standard output.</p>

<p>Here is a sample run of this script:
<blockquote><pre class="code">eggplant$ <tt class="userinput"><b>lc.tcl /etc/passwd</b></tt> 
Read 144 lines.</pre></blockquote></p>
</div>




<a name="x-100-3-sec-prog-tcl" /><div class="sect2">
<h3 class="sect2">13.5.2. Writing Tk Applications</h3>

<p>Even the basic Tcl knowledge given in the previous section is enough
to allow you to write applications using Tk, the Tcl extensions for
the X Window System. Tk is essentially a collection of Tcl commands
that create and manipulate X widgets--such as buttons, scrollbars,
menus, and so forth. As we will see, Tk is extremely versatile and
greatly simplifies the task of building a graphical user interface
under X.</p>

<p>A widget is an object you want to manipulate, such as a
rectangle.  Each widget requires memory and a bunch of properties, but
Tk relieves you from thinking about all that.  You just create a
widget and tell Tk what you want it to look like.</p>

<p>In this section, we'll help the user create an oval and a
rectangle: each of those is a widget.  But we also need a place
to draw them: something fixed where the oval and rectangle are free
to move around.  So before drawing, we'll create an empty space called
a <em class="emphasis">canvas</em> widget.  The canvas widget is a generic
graphics widget with support for many types of objects, such as ovals,
lines, text, and so forth.  And to provide the kind of convenient user
interface people expect, we'll create a menu widget and a frame
widget to hold everything together.  When executed, this application
looks something like <a href="ch13_05.htm">Figure 13-2</a>.</p>

<a name="x-100-3-fig-prog-tcl-samp2" /><div class="figure"><img src="figs/rl3_1302.gif" alt="Figure 13-2" /></div>
<h4 class="objtitle">Figure 13-2. Window displayed by Tk program</h4><p>Let's walk through the source for our application, <em class="filename">draw.tcl</em>:</p>

<blockquote><pre class="code">#!/usr/bin/wish -f
# Global variables, used to keep track of objects and positions
set oval_count 0
set rect_count 0
set orig_x 0 
set orig_y 0</pre></blockquote>

<p>No sweat here: we simply initialize a few variables
to keep track of the oval and rectangle objects we create, 
as well as the location of the object as it is created.</p>

<p>The next portion of the source may be a bit daunting at first:</p>

<blockquote><pre class="code"># This procedure enables ovals.
proc set_oval {} {
  # Allow us to access these global variables
  global oval_count orig_x orig_y

  # When button-1 is pressed, create an oval
  bind .c &lt;ButtonPress-1&gt; { 
    set orig_x %x
    set orig_y %y
    set oval_count [expr $oval_count + 1]
    .c create oval %x %y %x %y -tags "oval$oval_count" -fill red 
   }

  # When we drag button 1, delete the current oval and replace it
  bind .c &lt;B1-Motion&gt; { 
    .c delete "oval$oval_count"
    .c create oval $orig_x $orig_y %x %y -tags "oval$oval_count" -fill red
  }
}</pre></blockquote>

<p> 
Here, we define a procedure named <tt class="literal">set_oval</tt> using the 
Tcl <tt class="literal">proc</tt> command.
The first argument to <tt class="literal">proc</tt> is the list of arguments that the
procedure will take; in this case, there are none. The second argument
is the body of the procedure itself.  This procedure is invoked
when we select the Ovals item from the Objects menu, which
is configured later in this section.</p>

<p>The first thing <tt class="literal">set_oval</tt> does is declare the 
variables <tt class="literal">oval_count</tt>, <tt class="literal">orig_x</tt>, and <tt class="literal">orig_y</tt> to
be globals; otherwise, Tcl would assume we were using
these variables locally within the procedure.</p>

<p>The next task is to bind an action to a ButtonPress event in the
canvas widget we will be drawing into. This widget is named
<tt class="literal">.c</tt>. Tk widgets are named
hierarchically. The widget <tt class="literal">.</tt> (a period) refers to the main application
window. Any widgets created within that window are given names
beginning with a period, such as <tt class="literal">.c</tt> (for a canvas widget),
<tt class="literal">.mbar</tt> (for a menu bar), and so on. Of course, the programmer
can choose widget names, but those names must begin
with a period. As we will see later, widgets may be contained within
other widgets; for example, a menu is contained within a menu bar.
A widget named:
<blockquote><pre class="code">.mbar.file.menu</pre></blockquote>

might refer to the menu <tt class="literal">menu</tt> contained within the menu item
<tt class="literal">file</tt> contained within the menu bar <tt class="literal">.mbar</tt>. 
This is demonstrated later in this section.</p>

<p>The <tt class="literal">bind</tt> command creates an event binding for 
a particular widget.<a href="#FOOTNOTE-48">[48]</a>
The first argument to <tt class="literal">bind</tt> is the widget in which to
create the binding, the second argument is the event to track, and the third argument is the code to execute when that event occurs.</p><blockquote>

<a name="FOOTNOTE-48" /><p>[48]An <em class="emphasis">event</em> is simply 
a message generated by the X server in response to a user
action. For example, when the user presses mouse button 1 (usually the
left mouse button) within
a certain window, that window is sent a
<tt class="literal">ButtonPress-1</tt> event.</p>

</blockquote>

<p>In this case, we wish to start drawing an oval whenever the user
presses mouse button 1 in the canvas widget. The code of the 
binding sets the variables <tt class="literal">orig_x</tt> and <tt class="literal">orig_y</tt> to
<tt class="literal">%x</tt> and <tt class="literal">%y</tt>, respectively. Within a binding,
<tt class="literal">%x</tt> and <tt class="literal">%y</tt> refer to the <em class="emphasis">x</em> and <em class="emphasis">y</em> coordinates
of the event in question. In this case, this would be the cursor position
where the mouse button was pressed. We wish to save this location
when the oval is resized. In addition, we
increment the <tt class="literal">oval_count</tt> variable.</p>

<p>The <tt class="literal">ButtonPress-1</tt> binding also executes the command:
<blockquote><pre class="code">.c create oval %x %y %x %y -tags "oval$oval_count" -fill red</pre></blockquote>

This creates an <tt class="literal">oval</tt> object within the canvas widget
<tt class="literal">.c</tt>. The upper-left and lower-right coordinates of
the oval are given as <tt class="literal">%x</tt> and <tt class="literal">%y</tt>, the location
of the <tt class="literal">ButtonPress</tt> event. We fill the oval with the color 
<tt class="literal">red</tt>.</p>

<p>The <tt class="literal">-tags</tt> option to the canvas <tt class="literal">create</tt> command
assigns a "name" to the newly created <tt class="literal">oval</tt> object. In this
way, we can refer to this particular oval on the canvas widget
by its name. To ensure that each oval has a unique name, we use
the <tt class="literal">oval_count</tt> variable, which is incremented each time
an oval is created.</p>

<p>When the mouse is dragged with button 1 pressed, we wish to
resize the oval. This is accomplished by setting a 
binding for the <tt class="literal">B1-Motion</tt> event in the canvas widget.
This binding executes the two commands:
<blockquote><pre class="code">.c delete "oval$oval_count" 
.c create oval $orig_x $orig_y %x %y -tags "oval$oval_count" -fill red</pre></blockquote>

The canvas <tt class="literal">delete</tt> command deletes the object named by the
given tag. We then recreate the oval at its original upper-left
corner position, but with the new lower-right corner given by 
the location of the <tt class="literal">B1-Motion</tt> event. In other words, we are
replacing the original oval object with a new oval with different
coordinates, corresponding to the position of the mouse. This effectively
resizes the oval as the mouse moves across the canvas widget with
button 1 pressed.</p>

<p>We define an analogous <tt class="literal">set_rect</tt> function, which 
is nearly identical to the one previously discussed, but creates canvas <tt class="literal">rectangle</tt>
objects instead:
<blockquote><pre class="code"># Identical to set_oval, but uses rectangles
proc set_rect {} {
  global rect_count orig_x orig_y
  bind .c &lt;ButtonPress-1&gt; { 
    set orig_x %x
    set orig_y %y
    set rect_count [expr $rect_count + 1]
    .c create rectangle %x %y %x %y -tags "rect$rect_count" -fill blue
  }
  bind .c &lt;B1-Motion&gt; { 
    .c delete "rect$rect_count"
    .c create rectangle $orig_x $orig_y %x %y -tags "rect$rect_count" \
      -fill blue
  }
}</pre></blockquote></p>

<?troff .wcon_off?><p>Another way to draw rectangles and ovals
would be to have a generic "draw object" function that uses a variable,
say <tt class="literal">$objtype</tt>, to keep track of the current object type. 
The menu settings (described later) select the object type by setting the value of this variable. 
<?troff .ne 10?>In the drawing function, we could
simply use a canvas command such as:
<blockquote><pre class="code">.c create $objtype %x %y %x %y -tags "obj$obj_count" -fill blue</pre></blockquote>

However, this assumes that all objects will be drawn in the same way (by
clicking on one position and dragging the mouse to size the object). Using
separate functions for each object type allows us to specialize the interface
for each if we wish to do so.</p>

<p>Now we are ready to define the various widgets that make up our
application. First, we need to create a frame widget to be used
as a menu bar. A frame widget merely acts as a container for other
widgets: 
<blockquote><pre class="code"># Create a frame widget to be used as a menubar.
frame .mbar -relief groove -bd 3
pack .mbar -side top -expand yes -fill x</pre></blockquote>

Here, we create a frame widget named <tt class="literal">.mbar</tt>. The 
<tt class="literal">-relief</tt> option specifies the display style for this widget--in
this case, we wish the menu bar to appear as though it has a
"groove" running along its perimeter. The <tt class="literal">-bd</tt> option sets
the width of the widget's border, which, in this case, defines the
width of the groove.</p>

<p>The <tt class="literal">pack</tt> command places widgets within the application
window, or within other widgets. It is one kind of "geometry manager"
available for Tk. In order for a widget to be displayed within the
application, a geometry manager must be called to place the widget.
<tt class="literal">pack</tt> is provided with Tcl/Tk, and is versatile enough for almost
any application. <tt class="literal">pack</tt> allows you to specify how widgets should
be placed relative to one another, without having to specify
absolute locations.</p>

<p>In this case, we pack the <tt class="literal">.mbar</tt> widget into the top edge of
its parent widget, which is <tt class="literal">.</tt> (the main application window). 
The <tt class="literal">-fill x</tt> option tells <tt class="literal">pack</tt> that the widget should
be allocated the entire width of the window in which it is contained;
the <tt class="literal">-expand</tt> option specifies that the widget should grow 
to fill that space. If you are interested in the intricacies of
<tt class="literal">pack</tt>, the Tk <tt class="literal">pack</tt> manual page provides a great deal of 
detail.</p>

<p>Next, we create two <tt class="literal">menubutton</tt> widgets within this menu bar--the
<tt class="literal">File</tt> and <tt class="literal">Object</tt> menus: 
<blockquote><pre class="code"># Create two menu items
menubutton .mbar.file -text "File" -menu .mbar.file.menu
menubutton .mbar.obj -text "Object" -menu .mbar.obj.menu
pack .mbar.file .mbar.obj -side left</pre></blockquote>

The two widgets in question are named <tt class="literal">.mbar.file</tt> and <tt class="literal">.mbar.obj</tt>.
Therefore, each widget is a direct child of the <tt class="literal">.mbar</tt> widget, not the
main application window. When we <tt class="literal">pack</tt> the two widgets,
they are packed into the left side of their parent, the menu bar.</p>

<p>The <tt class="literal">-menu</tt> option to the <tt class="literal">menubutton</tt> command specifies
the <tt class="literal">menu</tt> widget that should be displayed when this 
pulldown menu is selected. We will create the
<tt class="literal">.mbar.file.menu</tt> and <tt class="literal">.mbar.obj.menu</tt> widgets later:
<blockquote><pre class="code"># Create the file menu, and add a single "Quit" item to it
menu .mbar.file.menu
.mbar.file.menu add command -label "Quit" -command { exit }</pre></blockquote>

First, we create the <tt class="literal">File</tt> menu itself, and add a single
<tt class="literal">command</tt> item to it. A <tt class="literal">command</tt>
item is like a button: when selected, the code given by the
<tt class="literal">-command</tt> option is executed.
In this case, selecting this option exits the Tk script:</p>

<blockquote><pre class="code"># Create the object menu, and add two radiobutton objects to it
menu .mbar.obj.menu
.mbar.obj.menu add radiobutton -label "Ovals" -variable objtype \
  -command { set_oval }
.mbar.obj.menu add radiobutton -label "Rectangles" -variable objtype \
  -command { set_rect }</pre></blockquote>

<p>Here, we create the <tt class="literal">Objects</tt> menu, and add two objects of
type <tt class="literal">radiobutton</tt> to it. Radiobuttons define a set of options
where only one of the options may be selected at a given time.
For example, when <tt class="literal">Ovals</tt> is selected, it is highlighted in 
the menu and <tt class="literal">Rectangles</tt> is dimmed.</p>

<p>In order to "link" 
the two radiobuttons (so that only one may be selected at a time),
we use the <tt class="literal">-variable</tt> option to specify a
"dummy" variable
that keeps track of the current setting of the radio buttons.  
The <tt class="literal">-variable</tt>
option may be used in conjunction with <tt class="literal">-value</tt>, which assigns a
value to the named variable when the menu item is selected. Instead,
we choose to execute a procedure (specified with the <tt class="literal">-command</tt>
option) when the menu item is selected, which precludes the need
for <tt class="literal">-value</tt>.</p>

<p>Next, we create our canvas widget and pack it into the application
window:</p>

<blockquote><pre class="code"># Create the canvas .c
canvas .c
pack .c -side top</pre></blockquote>

<p>Finally, we enable the <tt class="literal">Ovals</tt> option by artificially 
invoking the corresponding menu item. This is exactly what 
happens when the user selects the menu item using the mouse: 
<blockquote><pre class="code"># Turn on ovals, by invoking the first item in the object menu
.mbar.obj.menu invoke 0</pre></blockquote></p>

<p>Here, in a few dozen lines of code, we have a complete, relatively
complex X application. There are many easy ways to extend this 
program: for example, by adding new object types, allowing the user
to save and load "pictures" created with it, and so on. In fact,
the canvas widget even supports an option to dump a PostScript 
image of its contents, which then can be printed.</p>
</div>




<div class="sect2">
<h3 class="sect2">13.5.3. Using Tcl and Tk in Other Applications</h3>

<p>As mentioned previously, you can use Tcl and Tk with other
programs written in languages such as C or Perl. Writing a complex
program as a Tcl/Tk script is possible, but it would probably be slower 
than coding it in a compiled language because Tcl is interpreted. 
Although Perl is interpreted as well, Perl is suited to many tasks that
are more difficult to accomplish in Tcl or C.</p>

<p>The canonical way to use Tcl and Tk with a C program is to link the 
Tcl and Tk libraries with the C code.
Tcl and Tk provide simple <em class="filename">.a</em> static libraries,
as well as shared <em class="filename">.so</em> libraries on some systems.
The Tcl interpreter is implemented as a series of functions that your
program calls.</p>

<p>The idea is that you implement new Tcl commands as C
functions, and the Tcl interpreter calls those functions when one of
those commands is used. To do this you must structure your program to
initialize the Tcl interpreter and use a Tcl "main loop," which reads
Tcl commands from some location (such as a file) and executes them. 
This is roughly equivalent to building your own <tt class="command">tclsh</tt> or <tt class="command">wish</tt>
interpreter with a few extra Tcl/Tk commands implemented in C.</p>

<p>This may not be the best solution for all applications. First of all,
it requires some of your program to be restructured, and the Tcl 
interpreter ends up controlling the application--not the other way
around. Also, unless you use shared Tcl and Tk libraries, having a
complete Tcl/Tk interpreter embedded in your application can make the
binary quite large--well over a megabyte. Also, your application may
depend on some kind of Tcl script to drive it, which means that the
executable is not enough to use the complete application: you need 
the driving script as well.</p>

<p><a name="INDEX-2726" />
Another solution is to write an application in C or Perl that executes
the <tt class="command">wish</tt> interpreter as a separate process and communicates with
it via pipes. In this case, you will
need two pipes: one for the C program to write commands to <tt class="command">wish</tt>
and another for the C program to read responses from <tt class="command">wish</tt>. This
can be done with a single pipe, but synchronization becomes more difficult.
For example, responses from <tt class="command">wish</tt> may be asynchronous--generated from 
user events such as a button press--which makes the use of a single pipe
a bit complex.<a href="#FOOTNOTE-49">[49]</a></p><blockquote>

<a name="FOOTNOTE-49" /><p>[49]Remember that a pipe is a simple one-way data 
stream used to communicate from one process to another. The shell allows
you to use single pipes between commands, as in 
<tt class="command">cat foo.txt.gz | gunzip -c | more</tt>.</p>

</blockquote>

<p>The most straightforward way of setting this up is to write a C function
that does the following (in pseudocode):

<blockquote><pre class="code">Create two pipes by calling pipe() twice;
Use fork() to start a child process;
  In the child process, 
    close the read end of one pipe and the write end of another;
    Use dup2() to duplicate stdin and stdout to the appropriate pipes;
    Use execlp() to start wish;
  In the parent process;
    close the read end of the write pipe, and the write end of the
      read pipe;
    Use fdopen() on each pipe to get a FILE descriptor for use with
      fprintf() and fscanf();</pre></blockquote>


Of course, you'll need some knowledge of Unix systems programming to use
the previous example, but it's provided here for the adventurous.</p>

<p>The parent process (your C application) can now write Tcl/Tk commands to
the write pipe and read responses from <tt class="command">wish</tt> on the read pipe. 
The <em class="emphasis">select</em> function can be used to poll for data on the read pipe,
in case you want your application to keep processing while waiting for
data from the <tt class="command">wish</tt> interpreter.</p>

<p>This way, we treat <tt class="command">wish</tt> as a "server" for X Window System 
routines. Your program would send widget-creation commands down the write
pipe. <tt class="command">wish</tt> could be told to print a string to standard output when
a response is required from the application. For example, a button 
widget could be created that prints the string <tt class="literal">okay button pressed</tt>
when pressed by the user. Your program would read this string on the read
pipe and respond to it. Other parts of the application could be controlled
by <tt class="command">wish</tt> 

without your application's knowledge. The computing-intensive,
speed-critical parts of the application would be coded in C, and 
the interface handled by <tt class="command">wish</tt>.</p>

<p>Hopefully, the overview here should be enough to give you an idea of how to
write a C or Perl program that uses <tt class="command">wish</tt> in this way. It's
a good idea to read a book on Unix systems programming that talks about

interprocess communication using pipes, such as <em class="emphasis">Advanced
Programming in the UNIX Environment</em> by Richard Stevens or <em class="emphasis">UNIX
System Programming</em> by David Curry.</p>

<a name="INDEX-2727" /><a name="INDEX-2728" /><a name="INDEX-2729" /><a name="INDEX-2730" />
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch13_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.4. Using Perl</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">13.6. Java</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>