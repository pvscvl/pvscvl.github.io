<?label 7.2. Upgrading Software?><html><head><title>Upgrading Software (Running Linux)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Running Linux" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm" /></td><td width="172" valign="top" align="right"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">7.2. Upgrading Software</h2>

<p><a name="INDEX-1572" />
<a name="INDEX-1573" />
Linux is a fast-moving target. Because of the cooperative nature
of the project, new software is always becoming available, and 
programs are constantly being updated with newer versions. This
is especially true of the Linux kernel, which has many groups
of people working on it. During the development process, it's not 
uncommon for a new kernel patch to be released on a nightly basis.
While other parts of the system may not be as dynamic, the same
principles apply.</p>

<p>With this constant development, how can you possibly hope to stay
on top of the most recent versions of your system software? The short
answer is, you can't. While there are people out there who have a
need to stay current with, say, the nightly kernel patch release,
for the most part, there's no reason to bother upgrading your software
this often. In this section, we're going to talk about why and when to
upgrade and show you how to upgrade several important parts of the
system.</p>

<p>When should you upgrade? In general, you should consider upgrading
a portion of your system only when you have a demonstrated
<em class="emphasis">need</em>  
to upgrade. For example, if you hear of a new release of some application
that fixes important bugs (that is, those bugs that actually affect your
personal use of the application), you might want to consider upgrading
that application. If the new version of the program provides new features
you might find useful, or has a performance boost over your present
version, it's also a good idea to upgrade. When your machine is
somehow connected to the Internet, another good reason for
upgrading would be plugging in a security hole that has been recently
reported. However, upgrading just for
the sake of having the newest version of a particular program is probably
silly.</p>

<p>Upgrading can sometimes be a painful thing to do. For example, you
might want to upgrade a program that requires the newest versions of 
the compiler, libraries, and other software in order to run. Upgrading
this program will also require you to upgrade several other parts of
the system, which can be a time-consuming process. On the other
hand, this can be seen as an argument for keeping your software 
up to date; if your compiler and libraries are current, upgrading
the program in question won't be a problem.</p>

<p><a name="INDEX-1574" />
How can you find out about new versions of Linux software? The best
way is to watch the Usenet newsgroup comp.os.linux.announce

(see the section "<a href="ch01_10.htm">Section 1.10.3, "Usenet Newsgroups"</a>" in <a href="ch01_01.htm">Chapter 1, "Introduction
 to Linux"</a>)
where announcements of new
software releases and other important information are posted. If
you have Internet access, you can then download the software via
<span class="acronym">FTP</span> and install it on your system. Another good
source to learn about new Linux software is the web site <a href="../../../../../../www.freshmeat.net/">http://www.freshmeat.net</a>.</p>

<p>If you don't have access to Usenet or the Internet, the best way to 
keep in touch with recent developments is to pay for a <span class="acronym">CD-ROM</span> subscription.
Here you receive an updated copy of the various Linux <span class="acronym">FTP</span> sites,
on <span class="acronym">CD-ROM</span>, every couple of months. This service is available from a number
of Linux vendors. It's a good thing to have, even if you have Internet
access.</p>

<p><a name="INDEX-1575" />
<a name="INDEX-1576" />
This brings us to another issue: what's the best upgrade method? 
Some people feel it's easier to completely upgrade the system
by reinstalling everything from scratch whenever a new version of
their favorite distribution is released. This way
you don't have to worry about various versions of the software working
together. For those without Internet access, this may indeed be the
easiest method; if you receive a new <span class="acronym">CD-ROM</span> only once every two months,
a great deal of your software may be out of date.</p>

<p>It's our opinion, however, that reinstallation is not a good upgrade
plan at all. Most of the current Linux distributions are not meant to
be upgraded in this way, and a complete reinstallation may be 
complex or time-consuming. Also, if you plan to upgrade in this
manner, you generally lose all your modifications and customizations
to the system, and you'll have to make backups of your user's home 
directories and any other important files that would be deleted
during a reinstallation. Many novices choose this upgrade path because it's
the easiest to follow. In actuality, not much changes from release
to release, so a complete reinstallation is usually unnecessary and can be avoided 
with a little upgrading know-how.</p>

<p>In this section, we'll show you how to upgrade various pieces of your
system individually. We'll show you how to upgrade your system libraries and 
compiler, as well as give you a generic method for installing new
software. In the following section, we'll talk about
building a new kernel.</p>

<div class="sect2">
<h3 class="sect2">7.2.1. Upgrading Libraries</h3>

<p><a name="INDEX-1577" />
<a name="INDEX-1578" />
<a name="INDEX-1579" />
<a name="INDEX-1580" />
Most of the programs on a Linux system are compiled to use shared libraries.
These libraries contain useful functions common to many programs. Instead
of storing a copy of these routines in each program that calls them, 
the libraries are contained in files on the system that are read by 
all programs at run-time. That is, when a program is executed, the code
from the program file itself is read, followed by any routines from the
shared library files. This saves a great deal of disk space; only
one copy of the library routines is stored on disk.</p>

<p>In some instances, it's necessary to compile a program to have its
own copy of the library routines (usually for debugging) instead of using the routines from
the shared libraries. We say that programs built in this way are <em class="emphasis">statically linked</em>,
while programs built to use shared libraries are <em class="emphasis">dynamically linked</em>.</p>

<p>Therefore, dynamically linked executables depend upon the presence of the
shared libraries on disk. Shared libraries are implemented in such a way
that the programs compiled to use them generally don't depend on the version
of the available libraries. This means that you can upgrade your
shared libraries, and all programs that are built to use those libraries
will automatically use the new routines. (There is an exception: if major
changes are made to a library, the old programs won't work with the new
library. You'll know this is the case because the major version
number is different; we'll explain more later. In this case, you keep
both the old and new libraries
around. All your old executables will continue to use the old libraries,
and any new programs that are compiled will use the new libraries.)</p>

<p>When you build a program to use shared libraries, a piece of code is added 
to the program that causes it to execute <em class="filename">ld.so</em>, the dynamic linker, when
the program is started. <em class="filename">ld.so</em> is responsible for finding the shared libraries
the program needs and loading the routines into memory. 
<a name="INDEX-1581" />
Dynamically linked programs are also linked against "stub" routines, which 
simply take the place of the actual shared library routines in the 
executable. <em class="filename">ld.so</em> replaces the stub routine with the code from
the libraries when the program is executed.</p>

<p><a name="INDEX-1582" />
<a name="INDEX-1583" />
<a name="INDEX-1584" />
The <tt class="command">ldd</tt> command can be used to list the shared libraries on which a given 
executable depends. For example:
<blockquote><pre class="code">rutabaga% <tt class="userinput"><b>ldd /usr/bin/X11/xterm</b></tt> 
        libXaw.so.6 =&gt; /usr/X11R6/lib/libXaw.so.6.0 
        libXt.so.6 =&gt; /usr/X11R6/lib/libXt.so.6.0 
        libX11.so.6 =&gt; /usr/X11R6/lib/libX11.so.6.0 
	libc.so.5 =&gt; /lib/libc.so.5.0.9</pre></blockquote>

Here, we see that the <tt class="command">xterm</tt> program depends on the four
shared libraries <em class="filename">libXaw</em>, <em class="filename">libXt</em>, <em class="filename">libX11</em>, and <em class="filename">libc</em>.
<a name="INDEX-1585" />
(The first three are related to the X Window System, and the last is 
the standard C library.) We also see the version numbers of the libraries
for which the program was compiled (that is, the version of the stub routines 
used), and the name of the file which contains each shared library. 
<?troff .ne 10?>
This is 
the file that <em class="filename">ld.so</em> will find when the program is executed.</p>

<p>In order to use a shared library, the version of the stub routines (in the 
executable) must be compatible with the version of the shared libraries. 
Basically, a library is compatible if its major version number
matches that of the stub routines.
The major version number is the part before the first period in the
version number; in 6.0, the major number is 6.
This way, if a program was compiled
with version 6.0 of the stub routines, shared library versions 
6.1, 6.2, and so forth could be used by the executable.

In the section "<a href="ch13_01.htm">Section 13.1.7, "More Fun with Libraries"</a>" in
<a href="ch13_01.htm">Chapter 13, "Programming
 Languages"</a>, we describe how to use shared libraries
with your own programs.</p>

<p><a name="INDEX-1586" />
<a name="INDEX-1587" />
The file <em class="filename">/etc/ld.so.conf</em> contains a list of directories that
<em class="filename">ld.so</em> searches to find shared library files. An example of
such a file is:
 
<blockquote><pre class="code">/usr/lib
/usr/local/lib
/usr/X11R6/lib</pre></blockquote>

<em class="filename">ld.so</em> always looks in <em class="filename">/lib</em> and <em class="filename">/usr/lib</em>,
regardless of the contents of <em class="filename">ld.so.conf</em>.
Usually, there's no reason to modify this file, and the environment
variable <tt class="literal">LD_LIBRARY_PATH</tt> can add additional directories
to this search path (e.g., if you have your own private shared
libraries that shouldn't be used systemwide). However, if you do add
entries to <em class="filename">/etc/ld.so.conf</em> or upgrade or install
additional libraries on your system, be sure to use the <em class="filename">ldconfig</em>
<a name="INDEX-1588" />
<a name="INDEX-1589" />
<a name="INDEX-1590" />
command which will regenerate the shared library cache in
<em class="filename">/etc/ld.so.cache</em> from the
<em class="filename">ld.so</em> search path. This cache is used by <em class="filename">ld.so</em>
to find libraries quickly at runtime without actually having to
search the directories on its path. For more information, check the manual pages for <em class="filename">ld.so</em> 
and <tt class="command">ldconfig</tt>.</p>

<p><a name="INDEX-1591" />
Now that you understand how shared libraries are used, let's move
on to upgrading them. The two libraries that are most commonly 
updated are <em class="filename">libc</em> (the standard C library) and <em class="filename">libm</em>
(the math library).
For each shared library, there are two separate files:</p>

<dl>
<dt><b><em class="replaceable">library</em><em class="filename">.a</em></b></dt><dd><p>This is the static version of the library. When a program is statically linked, routines are copied from this file
directly into the executable, so the executable contains its own copy
of the library routines.</p></dd>


<dt><b><em class="replaceable">library</em><em class="filename">.so.</em><em class="replaceable">version</em></b></dt><dd><p>This is the shared library image itself. When a program is dynamically
linked, the stub routines from this file are copied into the executable,
allowing <em class="filename">ld.so</em> to locate the shared library at
runtime.
When the program is executed, <em class="filename">ld.so</em> copies routines from
the shared library into memory for use by the program. If a program
is dynamically linked, the 
<em class="replaceable">library</em><em class="filename">.a</em>
file is not used for this library.</p></dd>

</dl>

<p> 
For the <em class="filename">libc</em> library, you'll have files such as <em class="filename">libc.a</em> 
and <em class="filename">libc.so.5.2.18</em>. The <em class="filename">.a</em> files are generally kept 
in <em class="filename">/usr/lib</em>, while
<em class="filename">.so</em> files are kept in <em class="filename">/lib</em>. When 
you compile a program, either the <em class="filename">.a</em>  or the
<em class="filename">.so</em> file is used for linking, and the
compiler looks in <em class="filename">/lib</em> and <em class="filename">/usr/lib</em>
(as well as a variety of other places) by default. If you have your own
libraries, you can keep these files anywhere, and control where the
linker looks with the <span class="option">-L</span> option to the compiler. See the
section "<a href="ch13_01.htm">Section 13.1.7, "More Fun with Libraries"</a>" in <a href="ch13_01.htm">Chapter 13, "Programming
 Languages"</a> 
for details.</p>

<p>The shared library image, 
<em class="replaceable">library</em><em class="filename">.so.</em><em class="replaceable">version</em>,
is kept in <em class="filename">/lib</em> for most systemwide
libraries. Shared library
images can be found in any of the directories that <em class="filename">ld.so</em>
searches at runtime; these include <em class="filename">/lib</em>, <em class="filename">/usr/lib</em>, and 
the files listed in <em class="filename">ld.so.conf</em>. See the <em class="filename">ld.so</em> manual page for
details.</p>

<p> 
If you look in <em class="filename">/lib</em>, you'll see a collection of files such as
the following:

<blockquote><pre class="code">lrwxrwxrwx  1 root  root      14 Oct 23 13:25 libc.so.5 -&gt; libc.so.5.2.18
-rwxr-xr-x  1 root  root  623620 Oct 23 13:24 libc.so.5.2.18
lrwxrwxrwx  1 root  root      15 Oct 17 22:17 libvga.so.1 -&gt;\
libvga.so.1.2.10 
-rwxr-xr-x  1 root  root  128004 Oct 17 22:17 libvga.so.1.2.10</pre></blockquote>



Here, we see the shared library images for two libraries--<em class="filename">libc</em>
and <em class="filename">libvga</em>. Note that each image has a symbolic link to it,
named <em class="replaceable">library</em><em class="filename">.so.</em><em class="replaceable">major</em>, where
<em class="replaceable">major</em> is the major version number of the library. The minor
number is omitted
because <em class="filename">ld.so</em> searches for a library only by its major 
version number. When <em class="filename">ld.so</em> sees a program that has been compiled
with the stubs for version 5.2.18 of <em class="filename">libc</em>, it looks for a file
called <em class="filename">libc.so.5</em> in its search path. Here, 
<em class="filename">/lib/libc.so.5</em> is a symbolic link to <em class="filename">/lib/libc.so.5.2.18</em>,
the actual version of the library we have installed.</p>

<p>When you upgrade a library, you must replace the <em class="filename">.a</em> 
and <em class="filename">.so.</em><em class="replaceable">version</em> files corresponding to the library.
Replacing <em class="filename">.a</em> file is easy: just copy over it with the new versions.
However, you must use some caution when replacing the shared library
image, <em class="filename">.so.</em><em class="replaceable">version</em>; most of the programs
on the system depend on those images, so you can't simply delete them
or rename them. To put this another way, the symbolic link 
<em class="replaceable">library</em><em class="filename">.so.</em><em class="replaceable">major</em> must <em class="emphasis">always</em> point to
a valid library image. To accomplish this, first copy the
new image file to <em class="filename">/lib</em>, and then change the symbolic link to 
point to the new file in one step, using <tt class="command">ln -sf</tt>. This is 
demonstrated in the following example.</p>

<p>Let's say you're upgrading from Version 5.2.18 of the <em class="filename">libc</em>
library to Version 5.4.47. You should have the files <em class="filename">libc.a</em>
and <em class="filename">libc.so.5.4.47</em>. First, copy the <em class="filename">.a</em> 
file to the appropriate location, overwriting the old version:

<blockquote><pre class="code">rutabaga# <tt class="userinput"><b>cp libc.a /usr/lib</b></tt></pre></blockquote>


Now, copy the new image file to <em class="filename">/lib</em> (or wherever the library
image should be):
<blockquote><pre class="code">rutabaga# <tt class="userinput"><b>cp libc.so.5.4.47 /lib</b></tt></pre></blockquote>

<?troff .ne 10?>
Now, if you use the command <tt class="command">ls -l /lib/libc</tt> you should see
something like:

<blockquote><pre class="code">lrwxrwxrwx  1 root  root      14 Oct 23 13:25 libc.so.5 -&gt; libc.so.5.2.18
-rwxr-xr-x  1 root  root  623620 Oct 23 13:24 libc.so.5.2.18
-rwxr-xr-x  1 root  root  720310 Nov 16 11:02 libc.so.5.4.47</pre></blockquote>


To update the symbolic link to point to the new library, use the command:

<blockquote><pre class="code">rutabaga# <tt class="userinput"><b>ln -sf /lib/libc.so.5.4.47 /lib/libc.so.5</b></tt></pre></blockquote>


This gives you:

<blockquote><pre class="code">lrwxrwxrwx  1 root  root      14 Oct 23 13:25 libc.so.5 -&gt;\ 
/lib/libc.so.5.4.47
-rwxr-xr-x  1 root  root  623620 Oct 23 13:24 libc.so.5.2.18
-rwxr-xr-x  1 root  root  720310 Nov 16 11:02 libc.so.5.4.47</pre></blockquote>


<a name="INDEX-1592" />
Now you can safely remove the old image file, <em class="filename">libc.so.5.2.18</em>. 
You must use <tt class="command">ln -sf</tt> to replace the symbolic link in
one step, especially when updating libraries, such as <em class="filename">libc</em>. <p>


<img src="figs/bomb.gif">&nbsp;&nbsp;If you
were to remove the symbolic link first, and then attempt to use <tt class="command">ln -s</tt>
to add it again, more than likely <tt class="command">ln</tt> would not be able 
to execute because the symbolic link is gone, and as far as <em class="filename">ld.so</em>
is concerned, the <em class="filename">libc</em> library can't be found. Once the link is gone,
nearly all the programs on your system will be unable to execute.
Be very careful when updating shared library images.</p>

<p><a name="INDEX-1593" />
Whenever you upgrade or add a library to the system, it's not a bad idea
to run <tt class="command">ldconfig</tt> to regenerate the library cache used by
<em class="filename">ld.so</em>.
In some cases, a new library may not be recognized by <em class="filename">ld.so</em> until
you run <em class="filename">ldconfig</em>.</p>

<p>The Linux community is currently moving from the old
<em class="emphasis">libc</em> version 5 to the new so-called
<a name="INDEX-1594" />
<em class="emphasis">glibc2</em>, also called <em class="emphasis">libc6</em>. In
principle, this is not different from any other incompatible library
update, but in practice this brings all kinds of problems because
exchanging the C library in an incompatible manner affects each and
every program on the system. While the new <em class="emphasis">glibc2</em>
has several advantages--among other things it is thread-safe,
meaning that it makes it a lot easier to write programs that do more
than one thing at a time--many people consider it still
unstable. In addition, you cannot run programs compiled for one
version with the other library version. If you want to run a program
for which you do not have the sources, you will have to install the C
library version that this program needs. Fortunately, it is possible
to have both versions on your system, albeit with some problems. Those
distributions that have already switched to <em class="emphasis">glibc2</em>
usually provide an installed package named something like "libc5
compatibility"; install this package if you want to be able to
run software compiled with the old C library.</p>

<p>One question remains: where can you obtain the new versions of libraries?
Several of the basic system libraries (<em class="filename">libc</em>, <em class="filename">libm</em>, and so on)
can be downloaded from the directory <em class="filename">/pub/Linux/GCC</em> on
ftp://metalab.unc.edu. It
contains the Linux versions of the <tt class="command">gcc</tt> compiler, libraries,
include files, and other utilities. Each file there should have a 
<em class="filename">README</em> or <em class="filename">release</em> file that describes what to do and how
to install it. Other libraries are maintained and archived separately. 
At any rate, all libraries you install should include the <em class="filename">.a</em>
and <em class="filename">.so.</em><em class="replaceable">version</em> files, as well as a set of
include files for use with the compiler. 
<a name="INDEX-1595" /></p>

<a name="INDEX-1596" /><a name="INDEX-1597" /><a name="INDEX-1598" /><a name="INDEX-1599" />
</div>




<div class="sect2">
<h3 class="sect2">7.2.2. Upgrading the Compiler</h3>

<p> 
<a name="INDEX-1600" />
<a name="INDEX-1601" />
<a name="INDEX-1602" />
One other important part of the system to keep up to date is the C compiler
and related utilities. These include <tt class="command">gcc</tt> (the <span class="acronym">GNU</span> C and C++ compiler
itself), the linker, the assembler, the C preprocessor, and various include 
files and libraries used by the compiler itself. All are included 
in the Linux <tt class="command">gcc</tt> distribution. Usually, a new version of <tt class="command">gcc</tt>
is released along with new versions of the <em class="filename">libc</em> library and include
files, and each requires the other.</p>

<p>You can find the current <tt class="command">gcc</tt> release for Linux on the various
<span class="acronym">FTP</span> archives, including <em class="filename">/pub/Linux/GCC</em> on
ftp://metalab.unc.edu.
The release notes there should tell you what to do. Usually, upgrading
the compiler is a simple matter of unpacking several tar files as
root, and possibly removing some additional files. If you don't 
have Internet access, you can obtain the newest compiler from <span class="acronym">CD-ROM</span> 
archives of the <span class="acronym">FTP</span> sites, as described earlier.</p>

<p>To find out what version of <tt class="command">gcc</tt> you have, use the command:
<blockquote><pre class="code">gcc -v</pre></blockquote>

This should tell you something like:
<blockquote><pre class="code">Reading specs from /usr/lib/gcc-lib/i486-linux/2.8.1/specs 
gcc version 2.8.1</pre></blockquote>

Note that <tt class="command">gcc</tt> itself is just a front-end to the actual compiler
and code-generation tools found under: 
<blockquote><pre class="code">/usr/lib/gcc-lib/<em class="replaceable">machine</em>/<em class="replaceable">version</em></pre></blockquote>

<tt class="command">gcc</tt> (usually in <em class="filename">/usr/bin</em>) can
be used with multiple versions of

the compiler proper, with the <span class="option">-V</span> option. In 
the section "<a href="ch13_01.htm">Section 13.1, "Programming with gcc"</a>" in
<a href="ch13_01.htm">Chapter 13, "Programming
 Languages"</a>,
we describe the use of <tt class="command">gcc</tt> in detail.</p>

<p>If you are developing software in C++, it might also be
<a name="INDEX-1603" />
		a good idea to use <tt class="command">egcs</tt>, a new version of
		<tt class="command">gcc</tt> that is much more robust than
		<tt class="command">gcc</tt> itself and supports most of the modern
		C++ features. Unfortunately, <tt class="command">egcs</tt>, older
		versions of <tt class="command">gcc</tt> (up to version 2.7.2), and
		newer versions of <tt class="command">gcc</tt> (from version 2.8.0)
		all use different and incompatible object file formats, which
		means that you should recompile all your C++ libraries and
		applications if you migrate from one compiler to another. 
The Free Software Foundation
		has announced recently that <tt class="command">egcs</tt> will
		become its default compiler,
		thus replacing <tt class="command">gcc</tt>, so these considerations 
		might be obsolete soon.</p>
</div>




<a name="x-100-3-sec-sysadm-upgrade-build" /><div class="sect2">
<h3 class="sect2">7.2.3. Upgrading Other Software</h3>

<p>Of course, you'll have to periodically upgrade other pieces of your system.
As discussed in the previous section, it's usually easier and best to upgrade only those
applications you need to upgrade. For example, if you never
use Emacs on your system, why bother keeping up-to-date with the most
recent version of Emacs? For that matter, you may not need to stay completely
current with oft-used applications. If something works
for you, there's little need to upgrade.</p>

<p>In order to upgrade other applications, you'll have to obtain the newest
release of the software. This is usually available as a gzipped or compressed
tar file. Such a package could come in several forms. The most common 
are <em class="emphasis">binary distributions</em>, where the binaries and related files
are archived and ready to unpack on your system, and <em class="emphasis">source 
distributions</em>, where the source code (or portions of the source code)
for the software is provided, and you have to issue commands to compile
and install it on your system.</p>

<p><a name="INDEX-1604" />
Shared libraries make distributing software in binary form easy;
as long as you have a version of the libraries installed that is
compatible with the library stubs used to build the program, you're set.
However, in many cases, it is easier (and a good idea) to release a program
as source. Not only does this make the source code available to you 
for inspection and further development, it allows you to build the
application specifically for your system, with your own libraries. 
Many programs allow you to specify certain options at compile-time, 
such as selectively including various features in the program when built.
This kind of customization isn't possible if you get prebuilt binaries.</p>

<p><a name="INDEX-1605" />
There's also a security issue at play when installing binaries without
source code. Although on Unix systems viruses are nearly unheard 
of,<a href="#FOOTNOTE-31">[31]</a>
 
<a name="INDEX-1607" />
it's not difficult to write a "trojan horse," a program that appears to
do something useful, but in actuality causes damage to the system. For
example, someone could write an application that includes the "feature" 
of deleting all files in the home directory of the user executing the program.
Because the program would be running with the permissions of the user
executing it, the program itself has the ability to do this kind of
damage. (Of course, the Unix security mechanism prevents damage being done
to other users' files or to any important system files owned by root.)</p><blockquote>

<a name="FOOTNOTE-31" /><p>[31]A "virus" in the classic sense is a program that attaches
to a "host," which runs when the host is executed. On Unix systems,
<a name="INDEX-1606" />
this usually requires root privileges to do any harm, and if programmers
could obtain such privileges, they probably wouldn't bother with a virus.</p>

</blockquote>

<p>While having source won't necessarily prevent this from happening
(do you read the source code for every program you compile on your system?),
at least it gives you a way to verify what the program is really doing. 
A programmer would have to make a certain effort to prevent such a
trojan horse from being discovered, but if you install binaries blindly,
you are setting yourself up for trouble.</p>

<p>At any rate, dealing with source and binary distributions of software
is quite simple. If the package is released as a tar file, first use the
<tt class="command">tar t</tt> option to determine how the files have been archived. 
In the case of binary distributions, you may be able to unpack the
tar file directly on your system, say from <em class="filename">/</em> or <em class="filename">/usr</em>.
When doing this, be sure to delete any old versions of the program and
its support files (those that aren't overwritten by the new tar file). If
the old executable comes before the new one on your path, you'll 
continue to run the old version unless you remove it.</p>

<p>Many distributions now use a special packaging system
		that makes installing and uninstalling software a lot
		easier. There are several packaging systems available, but
		most distributions, including Red Hat, SuSE, and Caldera use
		the <em class="firstterm">RPM</em> system, which we will cover in
		the next section. The Debian distribution uses its own
		<em class="filename">.deb</em> system not covered here.</p>

<p><a name="INDEX-1608" />
<a name="INDEX-1609" />
<a name="INDEX-1610" />
<a name="INDEX-1611" />
Source distributions are a bit trickier. First, you must unpack the
sources into a directory of their own. Most systems use <em class="filename">/usr/src</em>
for just this. Because you usually don't have to be root to 
build a software package (you will usually require root 
permissions to install the program once compiled!), it might be a
good idea to make <em class="filename">/usr/src</em> writable by all users, with the command:
<blockquote><pre class="code">chmod 1777 /usr/src</pre></blockquote>

This allows any user to create subdirectories of <em class="filename">/usr/src</em>
and place files there. The first 1 in the mode is the "sticky" bit,
which prevents users from deleting each other's subdirectories.</p>

<p>You can now create a subdirectory under <em class="filename">/usr/src</em> and unpack the tar file 
there, or you can unpack the tar file directly from <em class="filename">/usr/src</em> if the 
archive contains a subdirectory of its own.</p>

<p>Once the sources are available, the next step is to read any 
<em class="filename">README</em> files or installation notes included with the sources.
Nearly all packages include such documentation. The basic method used
to build most programs is:</p>

<ol><li><p><a name="INDEX-1612" />
Check the <em class="filename">Makefile</em>. This file contains instructions for 
<tt class="command">make</tt>, which controls the compiler to build programs. 
Many applications require you to edit minor aspects of the <em class="filename">Makefile</em>
for your own system; this should be self-explanatory. The installation

notes will tell you if you have to do this.  If you need more help
with the <em class="filename">Makefile</em>, read the section "<a href="ch13_02.htm">Section 13.2, "Makefiles"</a>" in 
<a href="ch13_01.htm">Chapter 13, "Programming
 Languages"</a>. If there is no
<em class="filename">Makefile</em> in the package, you might have to
generate it first. See item 3 for how to do this.</p></li><li><p>Possibly edit other files associated with the program. Some 
applications require you to edit a file named <em class="filename">config.h</em>; again,
this will be explained in the installation instructions.</p></li><li><p>Possibly run a configuration script. Such a script is used to
determine what facilities are available on your system, which is necessary
to build more complex applications.</p>

<p>Specifically, when the sources do not contain a
<em class="filename">Makefile</em> in the top-level directory, but instead
a file called <em class="filename">Makefile.in</em> and a file called
<em class="filename">configure</em>, the package has been built with the
Autoconf system. In this (more and more common case), you run the
configuration script like this:
<blockquote><pre class="code">./configure</pre></blockquote>

The <tt class="literal">./</tt> should be used so that the local
<tt class="command">configure</tt> is run, and not another
<tt class="command">configure</tt> program that might accidentally be in
your path. Some packages let you pass options to
<tt class="command">configure</tt> that often enable or disable specific
features of the package. Once the <tt class="command">configure</tt> script
has run, you can proceed with the next step.</p></li><li><p> Run <tt class="command">make</tt>. Generally, this executes the appropriate
compilation commands as given in the <em class="emphasis">Makefile</em>. In many cases
you'll have to give a "target" to <tt class="command">make</tt>, as in <tt class="command">make all</tt>
or <tt class="command">make install</tt>. These are two common targets; the former is
usually not necessary but can be used to build all targets listed
in a <em class="emphasis">Makefile</em> (e.g., if the package includes several programs,
but only one is compiled by default); the latter is often used to
install the executables and support files on the system after compilation.
For this reason, <tt class="command">make install</tt> is usually run as root.</p></li></ol><p>You might have problems compiling or installing new software on your system,
especially if the program in question hasn't been tested under Linux, or
depends on other software you don't have installed. In 
<a href="ch13_01.htm">Chapter 13, "Programming
 Languages"</a>, we talk about the compiler, <tt class="command">make</tt>, 
and related tools in detail.</p>

<p><a name="INDEX-1613" />
Most software packages include manual pages and other files, in addition
to the source and executables. The installation script (if there is one)
will place these files in the appropriate location. In the case
of manual pages, you'll find files with names such as <em class="filename">foobar.1</em> or
<em class="filename">foobar.man</em>. These files are usually <tt class="command">nroff</tt> source files,
which are formatted to produce the human-readable pages displayed by
the <tt class="command">man</tt> command. If the manual page source has a numeric extension,
such as <em class="filename">.1</em>, copy it to the directory <em class="filename">/usr/man/man1</em>,
where <em class="filename">1</em> is the number used in the filename extension.
(This corresponds to the manual "section" number; for most user programs,
it is 1.) If the file has an extension such as <em class="filename">.man</em>, it
usually suffices to copy the file to <em class="filename">/usr/man/man1</em>, renaming
the <em class="filename">.man</em> extension to <em class="filename">.1</em>.</p>

<a name="INDEX-1614" /><a name="INDEX-1615" />
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">7. Upgrading Software and the Kernel</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">7.3. Using RPM</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>