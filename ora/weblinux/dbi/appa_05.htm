<?label A.5. Attributes Common to All Handles ?><html><head><title>Attributes Common to All Handles  (Programming the Perl DBI)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Alligator Descartes and Tim Bunce" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565926994L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Programming the Perl DBI" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Programming the Perl DBI" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Programming the Perl DBI</a></td><td width="172" valign="top" align="right"><a href="appa_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">A.5. Attributes Common to All Handles </h2>



<p>These attributes are common to all types of DBI handles.</p>



<p>Some attributes are inherited by child handles. That is, the value of
an inherited attribute in a newly created statement handle is the
same as the value in the parent database handle. Changes to
attributes in the new statement handle do not affect the parent
database handle and changes to the database handle do not affect
existing statement handles, only future ones.</p>



<p>Attempting to set or get the value of an unknown attribute is fatal,
except for private driver-specific attributes (which all have names
starting with a lowercase letter).</p>



<p>For example:</p>



<blockquote><pre class="code">$h-&gt;{AttributeName} = ...;    # set/write
... = $h-&gt;{AttributeName};    # get/read</pre></blockquote>



<a name="INDEX-1034" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Warn ( boolean, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>Enables <a name="INDEX-1034" />useful warnings for certain bad
practices. Enabled by default. Some emulation layers, especially
those for Perl 4 interfaces, disable warnings. Since warnings are
generated using the Perl <tt class="literal">warn</tt> function, they can
be intercepted using the Perl <tt class="literal">$SIG{_ _WARN_ _}</tt>
hook.</p></div>

<a name="INDEX-1035" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Active ( boolean, read-only) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>True <a name="INDEX-1035" />if the
handle object is "active." This is rarely used in
applications. The exact meaning of active is somewhat vague at the
moment. For a database handle, it typically means that the handle is
connected to a database
(<tt class="literal">$dbh-</tt>&gt;<tt class="literal">disconnect</tt> sets
<tt class="literal">Active</tt> off ). For a statement handle, it typically
means that the handle is a <tt class="literal">SELECT</tt> that may have
more data to fetch. (Fetching all the data or calling
<tt class="literal">$sth-</tt>&gt;<tt class="literal">finish</tt> sets
<tt class="literal">Active</tt> off.)</p></div>

<a name="INDEX-1036" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Kids (integer, read-only) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>For a <a name="INDEX-1036" />driver
handle, <tt class="literal">Kids</tt> is the number of currently existing
database handles that were created from that driver handle. For a
database handle, <tt class="literal">Kids</tt> is the number of currently
existing statement handles that were created from that database
handle.</p></div>

<a name="INDEX-1037" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>ActiveKids (integer, read-only) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>Like <tt class="literal">Kids</tt>, <a name="INDEX-1037" />but only counting those that are
<tt class="literal">Active</tt> (as above).</p></div>

<a name="INDEX-1038" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>CachedKids (hash ref) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>For a <a name="INDEX-1038" />database handle, returns a reference
to the cache (hash) of statement handles created by the
<tt class="literal">prepare_cached</tt> method. For a driver handle,
returns a reference to the cache (hash) of database handles created
by the <tt class="literal">connect_cached</tt> method.</p></div>

<a name="INDEX-1039" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>CompatMode ( boolean, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>Used by <a name="INDEX-1039" />emulation layers (such as Oraperl) to
enable compatible behavior in the underlying driver (e.g.,
<tt class="literal">DBD::Oracle</tt>) for this handle. Not normally set by
application code.</p></div>

<a name="INDEX-1040" /><a name="INDEX-1041" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>InactiveDestroy ( boolean) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="INDEX-1040" />attribute <a name="INDEX-1041" />can be used to disable
the <em class="emphasis">database engine</em> related effect of destroying
a handle (which would normally close a prepared statement or
disconnect from the database, etc.).</p><p>For a database handle, this attribute does not disable an
<em class="emphasis">explicit</em> call to the disconnect method, only the
implicit call from DESTROY.</p><p>This attribute is specifically designed for use in Unix applications
that "fork" child processes. Either the parent or the
child process, but not both, should set
<tt class="literal">InactiveDestroy</tt> on all their shared handles.</p></div>

<a name="INDEX-1042" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>PrintError ( boolean, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="INDEX-1042" />attribute can be used to force errors
to generate warnings (using <tt class="literal">warn</tt>) in addition to
returning error codes in the normal way. When set "on,"
any method that results in an error occurring will cause the DBI to
effectively do a <tt class="literal">warn("$class</tt>
<tt class="literal">$method</tt> <tt class="literal">failed:</tt>
<tt class="literal">$DBI::errstr")</tt> where <tt class="literal">$class</tt> is
the driver class, and <tt class="literal">$method</tt> is the name of the
method which failed.</p><p>For example:</p><blockquote><pre class="code">DBD::Oracle::db prepare failed: ... error text here ...</pre></blockquote><p>By default, <tt class="literal">DBI-</tt>&gt;<tt class="literal">connect</tt>
sets <tt class="literal">PrintError</tt> to "on."</p><p>If desired, the warnings can be caught and processed using a
<tt class="literal">$SIG{_ _WARN_ _}</tt> handler or modules like
<tt class="literal">CGI::Carp</tt> and <tt class="literal">CGI::ErrorWrap</tt>.</p></div>

<a name="INDEX-1043" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>RaiseError ( boolean, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="INDEX-1043" />attribute can be used to force errors
to raise exceptions rather than simply return error codes in the
normal way. It is "off " by default. When set to
"on", any method that results in an error will cause the
DBI to effectively do a <tt class="literal">die("$class $method failed:
$DBI::errstr")</tt>, where <tt class="literal">$class</tt> is the
driver class, and <tt class="literal">$method</tt> is the name of the
method that failed. For example:</p><blockquote><pre class="code">DBD::Oracle::db prepare failed: ... error text here ...</pre></blockquote><p>If <tt class="literal">PrintError</tt> is also on, then the
<tt class="literal">PrintError</tt> is done before the
<tt class="literal">RaiseError</tt> unless no <tt class="literal">_ _DIE_ _</tt>
handler has been defined, in which case <tt class="literal">PrintError</tt>
is skipped, since the <tt class="literal">die</tt> will print the message.</p><p>If you want to temporarily turn <tt class="literal">RaiseError</tt> off
(inside a library function that is likely to fail, for example), the
recommended way is like this:</p><blockquote><pre class="code">{
  local $h-&gt;{RaiseError}; # localize and turn off for this block
  ...
}</pre></blockquote><p>The original value will automatically and reliably be restored by
Perl, regardless of how the block is exited. The same logic applies
to other attributes, including <tt class="literal">PrintError</tt>.</p><p>Sadly, this doesn't work for Perl versions up to and including
5.004_04. For backwards compatibility, you could just use
<tt class="literal">eval</tt> <tt class="literal">{</tt> <tt class="literal">...</tt>
<tt class="literal">}</tt> instead.</p></div>

<a name="INDEX-1044" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>ChopBlanks ( boolean, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="INDEX-1044" />attribute can be used to control the
trimming of trailing space characters from fixed-width character
(CHAR) fields. No other field types are affected, even where field
values have trailing spaces.</p><p>The default is false (although it is possible that the default may
change). Applications that need specific behavior should set the
attribute as needed. Emulation interfaces should set the attribute to
match the behavior of the interface they are emulating.</p><p>Drivers are not required to support this attribute, but any driver
that does not support it must arrange to return
<tt class="literal">undef</tt> as the attribute value.</p></div>

<a name="INDEX-1045" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>LongReadLen (unsigned integer, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="INDEX-1045" />attribute may be used to control the
maximum length of long fields ("blob,"
"memo," etc.), which the driver will read from the
database automatically when it fetches each row of data. The
<tt class="literal">LongReadLen</tt> attribute relates only to fetching and
reading long values; it is not involved in inserting or updating
them.</p><p>A value of <tt class="literal">0</tt> means not to automatically fetch any
long data. (<tt class="literal">fetch</tt> should return
<tt class="literal">undef</tt> for long fields when
<tt class="literal">LongReadLen</tt> is <tt class="literal">0</tt>.)</p><p>The default is typically <tt class="literal">0</tt> (zero) bytes but may
vary between drivers. Applications fetching long fields should set
this value to slightly larger than the longest long field value to be
fetched.</p><p>Some databases return some long types encoded as pairs of hex digits.
For these types, <tt class="literal">LongReadLen</tt> relates to the
underlying data length and not the doubled-up length of the encoded
string.</p><p>Changing the value of <tt class="literal">LongReadLen</tt> for a statement
handle after it has been <tt class="literal">prepare</tt>'d will
typically have no effect, so it's common to set
<tt class="literal">LongReadLen</tt> on the <tt class="literal">$dbh</tt> before
calling <tt class="literal">prepare</tt>.</p><p>Note that the value used here has a direct effect on the memory used
by the application, so don't be too generous.</p><p>See <tt class="literal">LongTruncOk</tt> for more information on truncation
behavior.</p></div>

<a name="INDEX-1046" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>LongTruncOk ( boolean, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>This <a name="INDEX-1046" />attribute may be used to control the
effect of fetching a long field value that has been truncated
(typically because it's longer than the value of the
<tt class="literal">LongReadLen</tt> attribute).</p><p>By default, <tt class="literal">LongTruncOk</tt> is false, and so fetching
a long value that needs to be truncated will cause the fetch to fail.
(Applications should always be sure to check for errors after a fetch
loop in case an error, such as a divide by zero or long field
truncation, caused the fetch to terminate prematurely.)</p><p>If a fetch fails due to a long field truncation when
<tt class="literal">LongTruncOk</tt> is false, many drivers will allow you
to continue fetching further rows.</p><p>See also <tt class="literal">LongReadLen</tt>.</p></div>

<a name="INDEX-1047" /><a name="INDEX-1048" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Taint ( boolean, inherited) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>If this <a name="INDEX-1047" />attribute
<a name="INDEX-1048" />is set to a true value and Perl is running
in taint mode (e.g., started with the <tt class="literal">-T</tt> option),
then all data fetched from the database is tainted, and the arguments
to most DBI method calls are checked for being tainted.
<em class="emphasis">This may change.</em></p><p>The attribute defaults to off, even if Perl is in taint mode. See the
perlsec manpage for more about taint mode. If Perl is not running in
taint mode, this attribute has no effect.</p><p>When fetching data that you can trust, you can turn off the taint
attribute for that statement handle, for the duration of the fetch
loop.</p><p>Currently only fetched data is tainted. It is possible that the
results of other DBI method calls, and the value of fetched
attributes, may also be tainted in future versions. That change may
well break your applications unless you take great care now. If you
use DBI taint mode, please report your experience and any suggestions
for changes.</p></div>

<a name="INDEX-1049" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>private_* </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table><p>The DBI <a name="INDEX-1049" />provides a way to store extra
information in a DBI handle as "private" attributes. The
DBI will allow you to store and retrieve any attribute that has a
name starting with <tt class="literal">private_</tt>. It is strongly
recommended that you use just <em class="emphasis">one</em> private
attribute (e.g., use a hash ref) and give it a long and unambiguous
name that includes the module or application name that the attribute
relates to (e.g.,
<tt class="literal">private_YourFullModuleName_thingy</tt>).</p></div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="appa_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">A.4. Methods Common to All Handles </td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">A.6. DBI Database Handle Objects </td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>