<?label A.2. Description ?><html><head><title>Description  (Programming the Perl DBI)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Alligator Descartes and Tim Bunce" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565926994L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Programming the Perl DBI" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Programming the Perl DBI" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Programming the Perl DBI</a></td><td width="172" valign="top" align="right"><a href="appa_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">A.2. Description </h2>



<p>The DBI is a database access module for the Perl programming
language. It defines a set of methods, variables, and conventions
that provide a consistent database interface, independent of the
actual database being used.</p>



<p>It is important to remember that the DBI is just an interface. The
DBI is a layer of "glue" between an application and one
or more database <em class="emphasis">driver</em> modules. It is the
driver modules that do most of the real work. The DBI provides a
standard interface and framework for the drivers to operate within.</p>



<a name="appa-4-fm2xml" /><div class="sect2">
<h3 class="sect2">A.2.1. Architecture of a DBI Application</h3>



<p>The <a name="INDEX-979" />API, or Application Programming
Interface, defines the call interface and variables to Perl scripts
to use. The API is implemented by the Perl DBI extension (see <a href="appa_02.htm">Figure A-1</a>).</p>



<a name="appa-33394" /><div class="figure"><img width="502" src="figs/dbi.aa01.gif" height="142" alt="Figure A-1" /></div><h4 class="objtitle">Figure A-1. DBI application architecture</h4>

<p>The DBI "dispatches" the method calls to the appropriate
driver for actual execution. The DBI is also responsible for the
dynamic loading of drivers, error checking and handling, providing
default implementations for methods, and many other
non-database-specific duties.</p>



<p>Each driver contains implementations of the DBI methods using the
private interface functions of the corresponding database engine.
Only authors of sophisticated/multi-database applications or generic
library functions need to be concerned with drivers.</p>
</div>








<a name="appa-5-fm2xml" /><div class="sect2">
<h3 class="sect2">A.2.2. Notation and Conventions </h3>



<p>The
<a name="INDEX-980" />following
conventions are used in this document:</p>



<dl>
<dt><b>$dbh</b></dt>
<dd><p>Database handle object</p></dd>



<dt><b>$sth</b></dt>
<dd><p>Statement handle object</p></dd>



<dt><b>$drh</b></dt>
<dd><p>Driver handle object (rarely seen or used in applications)</p></dd>



<dt><b>$h</b></dt>
<dd><p>Any of the handle types above (<tt class="literal">$dbh</tt>,
<tt class="literal">$sth</tt>, or <tt class="literal">$drh</tt>)</p></dd>



<dt><b>$rc</b></dt>
<dd><p>General return code (boolean: <tt class="literal">true</tt>=ok,
<tt class="literal">false</tt>=error)</p></dd>



<dt><b>$rv</b></dt>
<dd><p>General Return Value (typically an integer)</p></dd>



<dt><b>@ary</b></dt>
<dd><p>List of values returned from the database, typically a row of data</p></dd>



<dt><b>$rows</b></dt>
<dd><p>Number of rows processed (if available, else <tt class="literal">-1</tt>)</p></dd>



<dt><b>$fh </b></dt>
<dd><p>A filehandle</p></dd>



<dt><b>undef</b></dt>
<dd><p>NULL values are represented by undefined values in Perl</p></dd>



<dt><b>\%attr</b></dt>
<dd><p>Reference to a hash of attribute values passed to methods</p></dd>

</dl>



<p>Note that Perl will automatically destroy database and statement
handle objects if all references to them are deleted.</p>
</div>








<a name="appa-6-fm2xml" /><div class="sect2">
<h3 class="sect2">A.2.3. Outline Usage </h3>



<p>To use <a name="INDEX-981" />DBI, first you need to load the DBI
module:</p>



<blockquote><pre class="code">use DBI;
use strict;</pre></blockquote>



<p>(The <tt class="literal">use strict;</tt> isn't
required but is strongly recommended.)</p>



<p>Then you need to <em class="emphasis">connect</em> to your data source and
get a <em class="emphasis">handle</em> for the connection:</p>



<blockquote><pre class="code">$dbh = DBI-&gt;connect($dsn, $user, $password,
                    { RaiseError =&gt; 1, AutoCommit =&gt; 0 });</pre></blockquote>



<p>Since connecting can be expensive, you generally just connect at the
start of your program and disconnect at the end.</p>



<p>Explicitly defining the required
<tt class="literal">AutoCommit</tt>
<a name="INDEX-982" /> behavior is strongly
recommended and may become mandatory in a later version. This
determines if changes are automatically committed to the database
when executed, or if they need to be explicitly committed later.</p>



<p>The DBI allows an application to "prepare" statements for
later execution. A prepared statement is identified by a statement
handle held in a Perl variable. We'll call the Perl variable
<tt class="literal">$sth</tt> in our examples.</p>



<p>The typical method call sequence for a <tt class="literal">SELECT</tt>
statement is:</p>



<blockquote><pre class="code">prepare,
  execute, fetch, fetch, ...
  execute, fetch, fetch, ...
  execute, fetch, fetch, ...</pre></blockquote>



<p>For example:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare("SELECT foo, bar FROM table WHERE baz=?");

$sth-&gt;execute( $baz );

while ( @row = $sth-&gt;fetchrow_array ) {
  print "@row\n";
}</pre></blockquote>



<p>The typical method call sequence for a
<em class="emphasis">non</em>-<tt class="literal">SELECT</tt> statement is:</p>



<blockquote><pre class="code">prepare,
  execute,
  execute,
  execute.</pre></blockquote>



<p>For example:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare("INSERT INTO table(foo,bar,baz) VALUES (?,?,?)");

while(&lt;CSV&gt;) {
  chop;
  my ($foo,$bar,$baz) = split /,/;
      $sth-&gt;execute( $foo, $bar, $baz );
}</pre></blockquote>



<p>The <tt class="literal">do()</tt> method can be used for non-repeated,
non-<tt class="literal">SELECT</tt> statements (or with drivers that
don't support placeholders):</p>



<blockquote><pre class="code">$rows_affected = $dbh-&gt;do("UPDATE your_table SET foo = foo + 1");</pre></blockquote>



<p>To commit your changes to the database (when
<tt class="literal">AutoCommit</tt> is off ):</p>



<blockquote><pre class="code">$dbh-&gt;commit;  # or call $dbh-&gt;rollback; to undo changes</pre></blockquote>



<p>Finally, when you have finished working with the data source, you
should <em class="emphasis">disconnect</em> from <a name="INDEX-983" />it:</p>



<blockquote><pre class="code">$dbh-&gt;disconnect;</pre></blockquote>
</div>








<a name="appa-7-fm2xml" /><div class="sect2">
<h3 class="sect2">A.2.4. General Interface Rules and Caveats </h3>



<p>The <a name="INDEX-984" /> <a name="INDEX-985" />DBI does not have a concept of a
"current session." Every session has a handle object
(i.e., a <tt class="literal">$dbh</tt>) returned from the
<tt class="literal">connect</tt> method. That handle object is used to
invoke database-related methods.</p>



<p>Most data is returned to the Perl script as strings. (Null values are
returned as <tt class="literal">undef</tt>.) This allows arbitrary
precision numeric data to be handled without loss of accuracy. Beware
that Perl may not preserve the same accuracy when the string is used
as a number.</p>



<p>Dates and times are returned as character strings in the native
format of the corresponding database engine. Time zone effects are
database/driver-dependent.</p>



<p>Perl supports binary data in Perl strings, and the DBI will pass
binary data to and from the driver without change. It is up to the
driver implementors to decide how they wish to handle such binary
data.</p>



<p>Most databases that understand multiple character sets have a default
global charset. Text stored in the database is, or should be, stored
in that charset; if not, then that's the fault of either the
database or the application that inserted the data. When text is
fetched, it should be automatically converted to the charset of the
client, presumably based on the locale. If a driver needs to set a
flag to get that behavior, then it should do so; it should not
require the application to do that.</p>



<p>Multiple SQL statements may not be combined in a single statement
handle (<tt class="literal">$sth</tt>), although some databases and drivers
do support this feature (notably Sybase and SQL Server).</p>



<p>Non-sequential record reads are not supported in this version of the
DBI. In other words, records can be fetched only in the order that
the database returned them, and once fetched they are forgotten.</p>



<p>Positioned updates and deletes are not directly supported by the DBI.
See the description of the <tt class="literal">CursorName</tt> attribute
for an alternative.</p>



<p>Individual driver implementors are free to provide any private
functions and/or handle attributes that they feel are useful. Private
driver functions can be invoked using the DBI
<tt class="literal">func()</tt> method. Private driver attributes are
accessed just like standard attributes.</p>



<p>Many methods have an optional
<tt class="literal">\%attr</tt>
<a name="INDEX-986" /> parameter which can be used to pass
information to the driver implementing the method. Except where
specifically documented, the <tt class="literal">\%attr</tt> parameter can
be used only to pass driver-specific hints. In general, you can
ignore <tt class="literal">\%attr</tt> parameters or pass it as
<tt class="literal">undef</tt>.</p>
</div>








<a name="appa-8-fm2xml" /><div class="sect2">
<h3 class="sect2">A.2.5. Naming Conventions and Name Space </h3>



<p>The <a name="INDEX-987" /> <a name="INDEX-988" />DBI package and all packages
below it (<tt class="literal">DBI::*</tt>) are reserved for use by the DBI.
Extensions and related modules use the <tt class="literal">DBIx::</tt>
namespace (see <a href="../../../../../../www.perl.com/CPAN/modules/by-module/DBIx/">http://www.perl.com/CPAN/modules/by-module/DBIx/</a>). Package names beginning with <tt class="literal">DBD::</tt>
are reserved for use by DBI database drivers. All environment
variables used by the DBI or by individual DBDs begin with
<tt class="literal">DBI_</tt> or <tt class="literal">DBD_</tt>.</p>



<p>The letter case used for attribute names is significant and plays an
important part in the portability of DBI scripts. The case of the
attribute name is used to signify who defined the meaning of that
name and its values, as the following table shows.</p>



<a name="appa-9-fm2xml" /><table border="1">



<tr>
<th>
<p>Case of Name</p></th>
<th>
<p>Has a Meaning Defined By</p></th>
</tr>






<tr>
<td>
<p>UPPER_CASE</p></td>
<td>
<p>Standards, e.g.,  X/Open, ISO SQL92, etc. (portable)</p></td>
</tr>


<tr>
<td>
<p>MixedCase</p></td>
<td>
<p>DBI API (portable), underscores are not used</p></td>
</tr>


<tr>
<td>
<p>lower_case</p></td>
<td>
<p>Driver or database engine specific (non-portable)</p></td>
</tr>



</table>

<p>It is of the utmost importance that driver developers use only
lowercase attribute names when defining private attributes. Private
attribute names must be prefixed with the driver name or suitable
abbreviation (e.g., <tt class="literal">ora_</tt> for Oracle,
<tt class="literal">ing_</tt> for Ingres, etc.).</p>



<p>Here's a sample of the Driver Specific
<a name="INDEX-989" />Prefix
Registry:</p>



<blockquote><pre class="code">ado_     DBD::ADO
best_    DBD::BestWins
csv_     DBD::CSV
db2_     DBD::DB2
f_       DBD::File
file_    DBD::TextFile
ib_      DBD::InterBase
ing_     DBD::Ingres
ix_      DBD::Informix
msql_    DBD::mSQL
mysql_   DBD::mysql
odbc_    DBD::ODBC
ora_     DBD::Oracle
proxy_   DBD::Proxy
solid_   DBD::Solid
syb_     DBD::Sybase
tuber_   DBD::Tuber
xbase_   DBD::XBase</pre></blockquote>
</div>








<a name="appa-10-fm2xml" /><div class="sect2">
<h3 class="sect2">A.2.6. SQL -- A Query Language </h3>



<p>Most <a name="INDEX-990" />DBI drivers
require applications to use a dialect of SQL (Structured Query
Language) to interact with the database engine. The following URLs
provide useful information and further links about SQL:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.altavista.com/query,q=sql+tutorial">http://www.altavista.com/query?q=sql+tutorial</a></p>

<p><a href="../../../../../../www.jcc.com/sql_stnd.html">http://www.jcc.com/sql_stnd.html</a></p>

<p><a href="../../../../../../www.contrib.andrew.cmu.edu/~shadow/sql.html">http://www.contrib.andrew.cmu.edu/~shadow/sql.html</a></p>

</blockquote>



<p>The DBI itself does not mandate or require any particular language to
be used; it is language-independent. In ODBC terms, the DBI is in
"pass-thru" mode, although individual drivers might not
be. The only requirement is that queries and other statements must be
expressed as a single string of characters passed as the first
argument to the <tt class="literal">prepare</tt> or <tt class="literal">do</tt>
methods.</p>



<p>For an interesting diversion on the <em class="emphasis">real</em> history
of RDBMS and SQL, from the people who made it happen, see:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../ftp.digital.com/pub/DEC/SRC/technical-notes/SRC-1997-018-html/sqlr95.html">http://ftp.digital.com/pub/DEC/SRC/technical-notes/SRC-1997-018-html/sqlr95.html</a></p>

</blockquote>



<p>Follow the "And the rest" and "Intergalactic
dataspeak" links for the SQL history.</p>
</div>








<a name="appa-11-fm2xml" /><div class="sect2">
<h3 class="sect2">A.2.7. Placeholders and Bind Values </h3>



<p>Some <a name="INDEX-991" />drivers support placeholders and bind
values. <em class="emphasis">Placeholders</em>, also called parameter
markers, are used to indicate values in a database statement that
will be supplied later, before the prepared statement is executed.
For example, an application might use the following to insert a row
of data into the <tt class="literal">sales</tt> table:</p>



<blockquote><pre class="code">INSERT INTO sales (product_code, qty, price) VALUES (?, ?, ?)</pre></blockquote>



<p>or the following, to select the description for a product:</p>



<blockquote><pre class="code">SELECT description FROM products WHERE product_code = ?</pre></blockquote>



<p>The <tt class="literal">?</tt> characters are the placeholders. The
association of actual values with placeholders is known as
<em class="emphasis">binding</em>, and the values are referred to as
<em class="emphasis">bind values</em>.</p>



<p>When using placeholders with the SQL <tt class="literal">LIKE</tt>
qualifier, you must remember that the placeholder substitutes for the
whole string. So you should use "<tt class="literal">... LIKE ?
...</tt>" and include any wildcard characters in the value
that you bind to the placeholder.</p>



<a name="appa-12-fm2xml" /><div class="sect3">
<h3 class="sect3">A.2.7.1. Null values </h3>



<p>Undefined values, or <a name="INDEX-992" /><tt class="literal">undef</tt>, can be used to
indicate null values. However, care must be taken in the particular
case of trying to use null values to qualify a
<tt class="literal">SELECT</tt> statement.</p>



<p>For example:</p>



<blockquote><pre class="code">SELECT description FROM products WHERE product_code = ?</pre></blockquote>



<p>Binding an <tt class="literal">undef</tt> (NULL) to the placeholder will
<em class="emphasis">not</em> select rows that have a NULL
<tt class="literal">product_code</tt>. (Refer to the SQL manual for your
database engine or any SQL book for the reasons for this.) To
explicitly select NULLs, you have to say "<tt class="literal">WHERE
product_code</tt> <tt class="literal">IS</tt>
<tt class="literal">NULL</tt>" and to make that general, you have to
say:</p>



<blockquote><pre class="code">... WHERE (product_code = ? OR (? IS NULL AND product_code IS NULL))</pre></blockquote>



<p>and bind the same value to both placeholders.</p>
</div>





<a name="appa-13-fm2xml" /><div class="sect3">
<h3 class="sect3">A.2.7.2. Performance </h3>



<p>Without using placeholders, the insert statement shown previously
would have to contain the literal values to be inserted and would
have to be re-prepared and re-executed for each row. With
placeholders, the insert statement needs to be prepared only once.
The bind values for each row can be given to the
<tt class="literal">execute</tt> method each time it's called. By
avoiding the need to re-prepare the statement for each row, the
application typically runs many times faster.</p>



<p>Here's an example:</p>



<blockquote><pre class="code">my $sth = $dbh-&gt;prepare(q{
  INSERT INTO sales (product_code, qty, price) VALUES (?, ?, ?)
}) || die $dbh-&gt;errstr;
while (&lt;&gt;) {
    chop;
    my ($product_code, $qty, $price) = split /,/;
    $sth-&gt;execute($product_code, $qty, $price) || die $dbh-&gt;errstr;
}
$dbh-&gt;commit || die $dbh-&gt;errstr;</pre></blockquote>



<p>See <tt class="literal">execute</tt> and <tt class="literal">bind_ param</tt> for
more details.</p>



<p>The <tt class="literal">q{...}</tt> style quoting used in this example
avoids clashing with quotes that may be used in the SQL statement.
Use the double-quote like the <tt class="literal">qq{...}</tt> operator if
you want to interpolate variables into the string. See the section on
"<em class="emphasis">Quote and Quote-Like Operators"</em> in
the perlop manpage for more details.</p>



<p>See also the <tt class="literal">bind_column</tt> method, which is used to
associate Perl variables with the output columns of a
<tt class="literal">SELECT</tt> <a name="INDEX-993" />statement.</p>
</div>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="appa_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">A. DBI Specification </td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">A.3. The DBI Class </td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>