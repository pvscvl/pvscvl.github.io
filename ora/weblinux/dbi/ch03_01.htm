<?label 3. SQL and Relational Databases ?><html><head><title>SQL and Relational Databases  (Programming the Perl DBI)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Alligator Descartes and Tim Bunce" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565926994L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Programming the Perl DBI" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Programming the Perl DBI" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Programming the Perl DBI</a></td><td width="172" valign="top" align="right"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 3. SQL and Relational Databases </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch03_01.htm">The Relational Database Methodology </a><br />
<a href="ch03_02.htm">Datatypes and NULL Values </a><br />
<a href="ch03_03.htm">Querying Data </a><br />
<a href="ch03_04.htm">Modifying Data Within Tables </a><br />
<a href="ch03_05.htm">Creating and Destroying Tables </a><br /></p></div>





<p>The <em class="emphasis">Structured Query Language</em>, or
<em class="emphasis">SQL</em>,<a href="#FOOTNOTE-20">[20]</a> is a
language designed for the purpose of manipulating data within
databases.</p><blockquote>


<a name="FOOTNOTE-20" /><p>[20]Officially pronounced
``ess-que-ell,'' although
``sequel'' is also popular. We have also
heard the term ``squeal,'' but that's
usually only heard when people first see the syntax or when
they've just deleted all their data!</p>


</blockquote>



<p>In 1970, E. F. Codd, working for IBM, published a now classic paper,
"A Relational Model of Data for Large Shared Data Banks,"
in which he laid down a set of abstract principles for data
management that became known as the <em class="emphasis">relational
model</em>. The entire field of relational database technology
has its roots in that paper.</p>



<p>One of the many research projects sparked by that paper was the
design and implementation of a language that could make interacting
with relational databases simple. And it didn't make the
programmer write horrendously complex sections of code to interact
with the database.<a href="#FOOTNOTE-21">[21]</a></p><blockquote>


<a name="FOOTNOTE-21" /><p>[21]<a href="ch02_01.htm">Chapter 2, "Basic Non-DBI Databases  "</a> shows
many examples of how long-winded and inflexible database interaction
can be!</p>


</blockquote>



<p>This chapter serves to give the complete database neophyte a very
limited overview of what SQL is and how you can do some simple tasks
with it. Many of the more complex details of SQL's design and
operation have been omitted or greatly simplified to allow the
neophyte to learn enough to use the DBI in a simple, but effective,
way. <a href="ch00_01.htm">Section 0.1, "Resources "</a> in the Preface lists other
books and web sites dedicated to SQL and relational database
technologies.</p>


















<div class="sect1"><a name="ch03-ch03_the_0" />
<h2 class="sect1">3.1. The Relational Database Methodology </h2>



<p>The <a name="INDEX-219" /> <a name="INDEX-220" />relational
database model revolves around data storage units called
<em class="emphasis">tables</em>, which have a number of attributes
associated with them, called <em class="emphasis">columns</em>. For
example, we might wish to store the name of the megalithic site, its
location, what sort of site it is, and where it can be found on the
map in our <tt class="literal">megaliths</tt> table. Each of these items of
data would be a separate column.</p>



<p>In most large database systems, tables are created within containing
structures known as
<em class="emphasis">schemas</em>
<a name="INDEX-221" />
<a name="INDEX-222" />.
A schema is a collection of logical data structures, or
<em class="emphasis">schema objects</em>, such as tables and views. In
some databases, a schema corresponds to a user created within the
database. In others, it's a more general way of grouping
related tables. For example, in our megalithic database, using
Oracle, we have created a user called <em class="emphasis">stones</em>.
Within the <em class="emphasis">stones</em> user's schema, the
various tables that compose the megalithic database have been
created.</p>



<p>Data is stored within a table in the form of
<em class="emphasis">rows</em>
<a name="INDEX-223" />. That is, the data for one site is
stored within one row that contains the appropriate values for each
column. This sort of data layout corresponds exactly to the
row-column metaphor used by spreadsheets, ledgers, or even plain old
tabulated lists you might scribble in a notepad.</p>



<p>An example of such a list containing megalithic data is:</p>



<blockquote><pre class="code">Site            Location        Type                    Map Reference
----            --------        ----                    -------------
Callanish I     Western Isles   Stone Circle and Rows   NB 213 330
Stonehenge      Wiltshire       Stone Circle and Henge  SU 123 422
Avebury         Wiltshire       Stone Circle and Henge  SU 103 700
Sunhoney        Aberdeenshire   Recumbent Stone Circle  NJ 716 058
Lundin Links    Fife            Four Poster             NO 404 027</pre></blockquote>



<p>This system lends itself quite well to a generalized query such as
``Give me the names of all the megaliths'' or
``Give me the map locations of all the megaliths in
Wiltshire.'' To perform these queries, we simply specify
the columns we wish to see and the conditions each column in each row
must meet to be returned as a valid result.</p>



<p>Similarly, data manipulation operations are easily specified using a
similar syntax, such as "Insert a new row into the
<tt class="literal">megaliths</tt> table with the following
values..." or "Delete all the rows containing megaliths
in Fife."</p>



<p>The sheer simplicity of SQL belies the fact that it is an
extraordinarily powerful syntax for manipulating data stored within
databases, and helps enforce a logical structure for your data.</p>



<p>The main thrust of the relational database design is that related
information should be stored either in the same place or in a
separate place that is related to the original in some meaningful
way. It also is designed around the principle that data should not be
duplicated within the database.</p>



<p>Using our megalithic database as an example, we have decided to store
all information directly related to each megalithic site within the
<tt class="literal">megaliths</tt> table and all the multimedia clips in a
separate table. This is a good example of a relational database,
albeit a small one, because if we stored the multimedia clip
information in the <tt class="literal">megaliths</tt> table, we would
duplicate the megalith information many times over -- once per
clip for that site, in fact. This leads to <em class="emphasis">redundancy of
data</em>, which is one problem the relational database model
is designed to avoid.</p>



<p>We have also split the categorization of a site into a separate table
called <tt class="literal">site_types</tt> to avoid further redundancy of
data.</p>



<p>The process of rationalizing your data into tables to avoid data
redundancy is known as <em class="emphasis">normalization</em>. The
corollary operation is known as <em class="emphasis">denormalization</em>
and can be desirable in certain situations.</p>



<p>Data stored across multiple normalized tables can be retrieved by
making
<em class="emphasis">joins</em>
<a name="INDEX-224" /> between the tables that allow
queries to retrieve columns from all the tables included in the join.
Joins would allow us to fetch the name of the megalithic site and the
URL of multimedia clips from the same query, for example. This is an
efficient way of storing data and stores exactly enough data
necessary to retrieve the desired information.</p>



<p>On the downside, creating multi-table joins on a regular basis can
perform badly on databases with large data quantities. Extra disk
accesses are required to relate the rows of one table to another, and
it can be difficult for the database to work out how best to do it.</p>



<p>This is a major problem in the discipline known as <em class="emphasis">data
warehousing</em>
<a name="INDEX-225" />, in which massive quantities of
information are stored to allow users to produce reports and analyses
of that data. The typical solution for these situations is to create
new wide, <em class="emphasis">denormalized</em> tables that contain much
information duplicated from other tables. This greatly increases
performance at the expense of storage space and, since the
information contained within the data warehouses is generally
read-only, you don't have to worry about keeping data changes
synchronized.</p>



<p>For the purposes of these chapters, a small database containing three
tables will be used to demonstrate the various ways in which SQL can
be used to query and manipulate data. These tables are named
<tt class="literal">megaliths</tt>, <tt class="literal">media</tt>, and
<tt class="literal">site_types</tt>. <a href="ch03_01.htm">Figure 3-1</a>
illustrates the structure of these three tables.</p>



<a name="ch03-39875" /><div class="figure"><img width="502" src="figs/dbi.0301.gif" height="257" alt="Figure 3-1" /></div><h4 class="objtitle">Figure 3-1. Megalith database</h4>

<p>These tables are designed to contain information on megalithic sites
and multi-media clips associated with those sites respectively. In
essence, each megalithic site will have zero or more multimedia clips
associated with it and will be categorized as exactly one type of
site. This small database will form the basis of our examples
throughout the remainder of the <a name="INDEX-226" /> <a name="INDEX-227" />book.</p>
</div>










































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch03_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">2.9. Summary</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">3.2. Datatypes and NULL Values </td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>