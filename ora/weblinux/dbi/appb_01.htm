<?label B. Driver and Database Characteristics ?><html><head><title>Driver and Database Characteristics  (Programming the Perl DBI)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Alligator Descartes and Tim Bunce" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565926994L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Programming the Perl DBI" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Programming the Perl DBI" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_15.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Programming the Perl DBI</a></td><td width="172" valign="top" align="right"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Appendix B. Driver and Database Characteristics </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="appb_01.htm">Acquiring the DBI and Drivers </a><br /></p></div>





<p>In this appendix, we hope to give you a flavor of the functionality
and quirks of different DBI drivers and their databases.</p>



<p>The line between the functionality and quirks of a given driver and
the functionality and quirks of its corresponding database is rather
blurred. In some cases, the database has functionality that the
driver can't or doesn't access; in others, the driver may
emulate functionality that the database doesn't support, such
as placeholders. So when you see the terms <em class="emphasis">driver</em> or <em class="emphasis">database</em> below,
take them with a pinch of salt.</p>



<p>Our primary goals are:</p>



<ul><li><p>to provide a simple overview of each driver and database.</p></li><li><p>to help you initially select a suitable DBI driver and database for
your new applications.</p></li><li><p>to help you identify potential issues if you need to port an existing
application from one driver and database combination to another.</p></li></ul>
<p>We don't attempt to describe the drivers and databases in
detail here, and we're not reproducing their documentation.
We're only interested in the key features that are most
commonly used or relevant to our goals. And for those features,
we're just providing an outline guide, sometimes little more
than signposts. Consult the database and driver documentation for
full details.</p>



<p>With the cooperation of the driver authors, we have produced
descriptions for the following drivers and databases:</p>



<dl>
<dt><b>DBD::ADO</b></dt>
<dd><p>Microsoft "Active Data Objects"</p></dd>



<dt><b>DBD::CSV</b></dt>
<dd><p>General "Comma Separated Value" ASCII files</p></dd>



<dt><b>DBD::DB2</b></dt>
<dd><p>IBM DB2</p></dd>



<dt><b>DBD::Empress</b></dt>
<dd><p>Empress</p></dd>



<dt><b>DBD::Informix</b></dt>
<dd><p>Informix</p></dd>



<dt><b>DBD::Ingres</b></dt>
<dd><p>Ingres</p></dd>



<dt><b>DBD::InterBase</b></dt>
<dd><p>InterBase</p></dd>



<dt><b>DBD::mysql &amp; DBD::mSQL</b></dt>
<dd><p>MySQL and mSQL database</p></dd>



<dt><b>DBD::ODBC</b></dt>
<dd><p>For any ODBC data source</p></dd>



<dt><b>DBD::Oracle</b></dt>
<dd><p>Oracle</p></dd>



<dt><b>DBD::Pg </b></dt>
<dd><p>PostgreSQL</p></dd>



<dt><b>DBD::SearchServer</b></dt>
<dd><p>Fulcrum Search Server</p></dd>



<dt><b>DBD::Sybase</b></dt>
<dd><p>For Sybase and Microsoft SQL Server</p></dd>



<dt><b>DBD::XBase</b></dt>
<dd><p>For XBase files (dBase, etc.)</p></dd>

</dl>



<p>For each of these drivers, we've tried to cover the same range
of topics in the same order.</p>



<p>The topics include:</p>



<ul><li><p>Driver summary information</p></li><li><p>How to connect</p></li><li><p>Supported datatypes, their ranges and functionality</p></li><li><p>Variations in SQL dialect and default behaviors</p></li><li><p>Advanced database features</p></li><li><p>How to access database metadata</p></li></ul>
<p>Reading straight through is not for the faint-hearted. We recommend
dipping in on an as-needed basis.</p>


















<div class="sect1"><a name="appb-1-fm2xml" />
<h2 class="sect1">B.1. Acquiring the DBI and Drivers </h2>



<p>Before <a name="INDEX-1147" />you can use a
DBI driver module, you obviously need to get it from somewhere and
install it on your system.</p>



<p>If you're on a Microsoft Windows system and using the
<a name="INDEX-1148" />ActiveState version of Perl, then the
first thing to try is their <em class="emphasis">Perl Package
Manager</em>
<a name="INDEX-1149" />, or <em class="emphasis">PPM</em> for
short. The PPM utility is installed with ActiveState Perl and greatly
simplifies downloading and installing pre-compiled modules.
Installing a DBI driver using PPM also automatically installs the DBI
if it's not already installed. For more information refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.activestate.com/PPM/">http://www.activestate.com/PPM/</a></p>

</blockquote>



<p>That simple solution won't work for everyone. If you're
not using ActiveState Perl on Microsoft Windows, or the driver you
want isn't one that they have pre-compiled for downloading via
PPM, then you'll have to travel the longer road: download the
source code for the driver and build it yourself. It's usually
not as hard as it may sound.</p>



<p>The source code for
<a name="INDEX-1150" />DBI drivers can be downloaded from any
site that is part of the <em class="emphasis">Comprehensive Perl Archive
Network</em>
<a name="INDEX-1151" /> (CPAN). Here
<a name="INDEX-1152" />are a few handy URLs to get you
started:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.perl.com/CPAN/modules/by-module/DBD/">http://www.perl.com/CPAN/modules/by-module/DBD/</a></p>

<p><a href="../../../../../../www.perl.org/CPAN/modules/by-module/DBD/">http://www.perl.org/CPAN/modules/by-module/DBD/</a></p>

<p><a href="../../../../../../search.cpan.org/search,mode=module&amp;query=DBD">http://search.cpan.org/search?mode=module&amp;query=DBD</a></p>

</blockquote>



<p>If you've not already
<a name="INDEX-1153" />installed
the DBI, then you'll need to do that first. Simply substituting
DBI for DBD in the URLs above will take you to the source code for
the DBI module.</p>



<p>Remember that many drivers for database systems require some
database-specific client software to be installed on the machine in
order to be able to build the driver. The driver documentation should
explain what's needed.</p>
</div>




<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::ADO</tt> 
<a name="INDEX-1154" /> <a name="INDEX-1155" />version 0.03.</p>



<p>At the time of this writing, the <tt class="literal">DBD::ADO</tt> driver,
and even ADO itself, are relatively new. Things are bound to change,
so be sure to read the latest documentation.</p>




<h4 class="refsect2">Feature summary </h4>



<p>Because <tt class="literal">DBD::ADO</tt> acts as an interface to other
lower-level database drivers within Windows, much of its behavior is
governed by those drivers.</p>



<blockquote><pre class="code">Transactions                           Dependent on connected data source
Locking                                Dependent on connected data source
Table joins                            Dependent on connected data source
LONG/LOB datatypes                     Dependent on connected data source
Statement handle attributes available  After execute(  )
Placeholders                           No, not yet
Stored procedures                      Limited support, no parameters
Bind output values                     No
Table name letter case                 Dependent on connected data source
Field name letter case                 Dependent on connected data source
Quoting of otherwise invalid names     Dependent on connected data source
Case-insensitive "LIKE" operator       Dependent on connected data source
Server table ROW ID pseudocolumn       Dependent on connected data source
Positioned update/delete               No
Concurrent use of multiple handles     Dependent on connected data source</pre></blockquote>




<h4 class="refsect2">Author and contact details </h4>



<p>The driver is maintained by Thomas Lowery and Phlip Plumlee. They can
be contacted via the <em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::ADO</tt> module requires Microsoft ADO version
2.1 or later to work reliably. Using NT with Service Pack 4 is
recommended. The module is pure Perl, making use of the
<tt class="literal">Win32::OLE</tt> module to handle the ADO requests.</p>



<p>The <tt class="literal">DBD::ADO</tt> module supports the use of SQL
statements to query any data source your raw ADO supports. This can
include the Jet data drivers for the various Microsoft Office file
formats, any number of ODBC data drivers, or experimental data
providers that expose file system folder hierarchies or Internet
directory services as data sources.</p>



<p>Each provider system supports SQL in some format, either in a native
format like MS-SQL Server's Transact SQL or as an emulation
layer in the data provider, such as a Jet data driver reading an
Excel spreadsheet.</p>



<p>Information about ADO can be found at <a href="../../../../../../www.microsoft.com/data/ado/">http://www.microsoft.com/data/ado/</a>.</p>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p><tt class="literal">DBD::ADO</tt> is a very new and currently incomplete
driver. It is evolving rapidly though, and since it's written
in pure Perl using <tt class="literal">Win32::OLE</tt>, it's easy for
people to enhance.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The <tt class="literal">DBI-&gt;connect()</tt> Data Source Name, or
<em class="emphasis">DSN</em>, has the following format:</p>



<blockquote><pre class="code">dbi:ADO:DSN</pre></blockquote>



<p>DSN 
<a name="INDEX-1156" />must
be an ODBC Data Source Name registered with the Control Panel ODBC
Data Sources applet. If your DBI application runs as a service or
daemon, such as a CGI script, the DSN must appear on the
"System DSN" tab.</p>



<p>There are no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.
<tt class="literal">DBD::ADO</tt> supports an unlimited number of
concurrent data source connections to one or more data sources,
subject to the limitations of those data sources.</p>




<h4 class="refsect1">Datatypes </h4>



<p>The 
<a name="INDEX-1157" />numeric,
string, date, and LONG/LOB datatypes depend on the interaction of
four forces: what a Perl "scalar" supports, how the
<tt class="literal">Win32::OLE</tt> layer translates VARIANTs into scalars,
the types that VARIANT itself permits, and the types your target
provider emits.</p>



<p>A user/programmer must research those forces in his or her relevant
documentation. Rest assured that <tt class="literal">DBD::ADO</tt> will
then transmit the type correctly.</p>




<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p><tt class="literal">DBD::ADO</tt> reflects the capabilities of the native
<em class="emphasis">connection</em> to the user. Transactions, if a
provider supports them, are per connection -- all statements
derived from one connection will ``see''
updates to the data that awaits a <tt class="literal">COMMIT</tt>
statement. Other connections to that data source will not see these
pending updates.</p>




<h4 class="refsect1">SQL Dialect </h4>



<p>Because <tt class="literal">DBD::ADO</tt>
<a name="INDEX-1158" /> acts
as an interface to other database drivers, the following issues are
governed by those drivers and the databases they connect to:</p>



<ul><li><p>Case-sensitivity of LIKE operator</p></li><li><p>Table join syntax</p></li><li><p>Table and column names</p></li><li><p>Row ID</p></li><li><p>Automatic key or sequence generation</p></li><li><p>Automatic row numbering and row count limiting</p></li></ul>
<p>For more information, refer to the documentation for the drivers and
the database being used.</p>



<p>The <tt class="literal">DBD::ADO</tt> driver does not support positioned
updates and deletes.</p>




<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter binding is not yet supported by <tt class="literal">DBD::ADO</tt>.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Calling stored procedures is supported by <tt class="literal">DBD::ADO</tt>
using the ODBC style <tt class="literal">{call procedure_name()}</tt>
syntax.</p>




<h4 class="refsect1"><a name="tablemetadata">Table Metadata </h4>



<p><tt class="literal">DBD::ADO</tt> does not currently support the
<tt class="literal">table_info()</tt> method. It awaits the needed slack
time and/or other volunteers.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p>The ADO <em class="emphasis">connection</em> object can be accessed from
database and statement handles via the <tt class="literal">ado_conn</tt>
attribute.</p>



<p>The ADO <em class="emphasis">RecordSet</em> object can be accessed from
statement handles via the <tt class="literal">ado_rs</tt>
attribute.
<a name="INDEX-1159" /></p>



</div>

<a name="INDEX-1160" /><a name="INDEX-1161" /><a name="INDEX-1162" /><a name="INDEX-1163" /><a name="INDEX-1164" /><a name="INDEX-1165" /><a name="INDEX-1166" /><a name="INDEX-1167" /><a name="INDEX-1168" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::CSV </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information </h4>






<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::CSV</tt>
<a name="INDEX-1160" /> <a name="INDEX-1161" />
version 0.1019</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           No
Locking                                Implicit, per-statement only
Table joins                            No
LONG/LOB datatypes                     Yes, up to 4 GB
Statement handle attributes available  After execute(  )
Placeholders                           Yes, "?" style
Stored procedures                      No
Bind output values                     No
Table name letter case                 Sensitive, partly depends on filesystem
Field name letter case                 Sensitive, stored with original letter case
Quoting of otherwise invalid names     No
Case-insensitive "LIKE" operator       Yes, "CLIKE"
Server table ROW ID pseudocolumn       No
Positioned update/delete               No
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Jochen Wiedmann. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::CSV</tt> driver is built upon the services of
several other related modules. The
<tt class="literal">Text::CSV_XS</tt>
<a name="INDEX-1162" /> module is used for reading and writing
CSV files. The abstract generic <tt class="literal">DBD::File</tt> class
provides the driver framework for handling <em class="emphasis">flat
files</em>. That, in turn, uses the
<tt class="literal">SQL::Statement</tt> module to parse and evaluate simple
SQL statements.</p>



<p>It's important to note that while just about everyone thinks
they know what the CSV file format is, there is actually no formal
definition of the format, and there are many subtle differences.</p>



<p>Here's one description of a CSV file:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.whatis.com/csvfile.htm">http://www.whatis.com/csvfile.htm</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p><tt class="literal">DBD::CSV</tt> does not fully parse the statement until
it's executed. Thus, attributes like
<tt class="literal">$sth-&gt;{NUM_OF_FIELDS}</tt> are not available until
after <tt class="literal">$sth-&gt;execute( )</tt> has been called. This is
valid behavior but is important to note when porting applications
originally written for other drivers.</p>



<p>The statement handle attributes <tt class="literal">PRECISION</tt>,
<tt class="literal">SCALE</tt>, and <tt class="literal">TYPE</tt> are not
supported. Also note that many statement attributes cease to be
available after fetching all the result rows or calling the
<tt class="literal">finish( )</tt> method.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The <tt class="literal">DBI-&gt;connect()</tt>

<a name="INDEX-1163" />Data
Source Name, or DSN, can be one of the following:</p>



<blockquote><pre class="code">dbi:CSV:
dbi:CSV:attrs</pre></blockquote>



<p>where <tt class="literal">attrs</tt> is an optional semicolon-separated
list of <em class="emphasis">key=value</em> pairs.</p>



<p>The number of database handles is limited by memory only. It is
recommended to use multiple database handles for different table
formats.</p>



<p>Commonly used attributes include:</p>



<dl>
<dt><b><tt class="literal">f_dir=directory</tt> </b></dt>
<dd><p>By default, files in the current directory are treated as tables. The
attribute <tt class="literal">f_dir</tt> makes the module open files in the
given directory.</p></dd>



<dt><b><tt class="literal">csv_eol</tt> </b></dt>
<dt><b><tt class="literal">csv_sep_char</tt> </b></dt>
<dt><b><tt class="literal">csv_quote_char</tt> </b></dt>
<dt><b><tt class="literal">csv_escape_char</tt> </b></dt>
<dd><p>These attributes are used for describing the CSV file format in use.
For example, to open <em class="filename">/etc/passwd</em>, which is
colon-separated and line-feed terminated, as a table, one would use:</p>



<blockquote><pre class="code">csv_eol=\n;csv_sep_char=:</pre></blockquote>



<p>The defaults are <tt class="literal">\r\n</tt>, comma
(<tt class="literal">,</tt>), double quote ("), and double quote (")
respectively. All of these attributes and defaults are inherited from
the <tt class="literal">Text::CSV_XS</tt> module.</p></dd>

</dl>




<h4 class="refsect1">Datatypes</h4>







<h4 class="refsect2">Numeric data handling </h4>



<p>Without 
<a name="INDEX-1164" />question,
the main disadvantage of the <tt class="literal">DBD::CSV</tt> module is
the lack of appropriate type handling. While reading a CSV table, you
have no way to reliably determine the correct datatype of the fields.
All fields look like strings and are treated as such by default.</p>



<p>The <tt class="literal">SQL::Statement</tt> module, and hence the
<tt class="literal">DBD::CSV</tt> driver, accepts the numeric types
<tt class="literal">INTEGER</tt> and <tt class="literal">REAL</tt> in
<tt class="literal">CREATE</tt> <tt class="literal">TABLE</tt> statements, but
they are always stored as strings and, by default, retrieved as
strings.</p>



<p>It is possible to read individual columns as integers or doubles, in
which case they are converted to Perl's internal datatypes IV
and NV -- integer and numeric value respectively. Unsigned values
are not supported.</p>



<p>To assign certain datatypes to columns, you have to create
<em class="emphasis">metadata definitions</em>. The following example
reads a table <em class="emphasis">table_name</em> with columns
<tt class="literal">I</tt>, <tt class="literal">N</tt>, and <tt class="literal">P</tt>
of type <tt class="literal">INTEGER</tt>, <tt class="literal">DOUBLE</tt>, and
<tt class="literal">STRING</tt>, respectively:</p>



<blockquote><pre class="code">my $dbh = DBI-&gt;connect("DBI:CSV:", '', '');
$dbh-&gt;{csv_tables}-&gt;{table_name}-&gt;{types} = [
    Text::CSV_XS::<em class="replaceable">IV(  )</em>, Text::CSV_XS::<em class="replaceable">NV(  )</em>, Text::CSV_XS::<em class="replaceable">PV(  )</em>
];
my $sth = $dbh-&gt;prepare("SELECT id, sales, description FROM table_name");</pre></blockquote>






<h4 class="refsect2">String data handling </h4>



<p>Similar to numeric values, <tt class="literal">DBD::CSV</tt> accepts more
datatypes in <tt class="literal">CREATE</tt> <tt class="literal">TABLE</tt>
statements than it really supports. You can use
<tt class="literal">CHAR(n)</tt> and <tt class="literal">VARCHAR(n)</tt> with
arbitrary numbers <tt class="literal">n</tt>, <tt class="literal">BLOB</tt>, or
<tt class="literal">TEXT</tt>, but in fact these are always
<tt class="literal">BLOB</tt>s, in a loose kind of way.</p>



<p>The one underlying string type can store any binary data including
embedded NUL characters. However, many other CSV tools may choke if
given such data.</p>






<h4 class="refsect2">Date data handling </h4>



<p>No date or time types are directly supported.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p><tt class="literal">BLOB</tt>s are equivalent to strings. They are only
limited in size by available memory.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">type_info(  )</tt> method is supported.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p>The driver doesn't support transactions.</p>



<p>No explicit locks are supported. Tables are locked while statements
are executed, but the lock is immediately released once the statement
is completed.</p>




<h4 class="refsect1">SQL Dialect</h4>






<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>Two 
<a name="INDEX-1165" />different <tt class="literal">LIKE</tt>
operators are supported. <tt class="literal">LIKE</tt> is case-sensitive,
whereas <tt class="literal">CLIKE</tt> is not.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>Table joins are not supported.</p>






<h4 class="refsect2">Table and column names </h4>



<p>Table and column names are case-sensitive. However, you should
consider that table names are in fact filenames, so tables
<em class="emphasis">Foo</em> and <em class="emphasis">foo</em> may both be
present with the same data. However, they may be subject to different
metadata definitions in <tt class="literal">$dbh-&gt;{csv_tables}</tt>.</p>









<h4 class="refsect2">Row ID </h4>



<p>Row IDs are not supported.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>Neither automatic keys nor sequences are supported.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Positioned updates and deletes are not supported.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Question marks are supported as placeholders, as in:</p>



<blockquote><pre class="code">$dbh-&gt;do("INSERT INTO A VALUES (?, ?)", undef, $id, $name);</pre></blockquote>



<p>The <tt class="literal">:1</tt> placeholder style is not supported.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Stored procedures are not supported.</p>




<h4 class="refsect1">Table Metadata </h4>



<p>By 
<a name="INDEX-1166" />default, the driver expects the
column names to be stored in the table's first row, as in:</p>



<blockquote><pre class="code">login:password:uid:gid:comment:shell:homedir
root:s34hj34n34jh:0:0:Superuser:/bin/bash:/root</pre></blockquote>



<p>If column names are not present, you may specify column names via:</p>



<blockquote><pre class="code">$dbh-&gt;{csv_tables}-&gt;{$table}-&gt;{skip_rows} = 0;
$dbh-&gt;{csv_tables}-&gt;{$table}-&gt;{col_names} =
    [qw(login password uid gid comment shell homedir)];</pre></blockquote>



<p>in which case the first row is treated as a data row.</p>



<p>If column names are not supplied and not read from the first row, the
names <em class="emphasis">col0</em>, <em class="emphasis">col1</em>, etc. are
generated automatically.</p>



<p>Column names can be retrieved via the standard
<tt class="literal">$sth-&gt;{NAME}</tt> attribute. The NULLABLE attribute
returns an array of all ones. Other metadata attributes are not
supported.</p>



<p>The table names, or filenames, can be read via
<tt class="literal">$dbh-&gt;table_info()</tt> or
<tt class="literal">$dbh-&gt;tables()</tt> as usual.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p>Besides 
<a name="INDEX-1167" />the attributes
<tt class="literal">f_dir</tt>, <tt class="literal">csv_eol</tt>,
<tt class="literal">csv_sep_char</tt>, <tt class="literal">csv_quote_char</tt>,
and <tt class="literal">csv_sep_char</tt> that have already been discussed
above, the most important database handle attribute is:</p>



<blockquote><pre class="code">$dbh-&gt;{csv_tables}</pre></blockquote>



<p><tt class="literal">csv_tables</tt> is used for specifying table metadata.
It is a hash ref with table names as keys, the values being hash refs
with the following attributes:</p>



<dl>
<dt><b><tt class="literal">file</tt></b></dt>
<dd><p>The filename being associated with the table. By default, the file
name is <tt class="literal">$dbh-&gt;{f_dir}/$table</tt>.</p></dd>



<dt><b><tt class="literal">col_names</tt> </b></dt>
<dd><p>An array ref of column names.</p></dd>



<dt><b><tt class="literal">skip_rows</tt> </b></dt>
<dd><p>This number of rows will be read from the top of the file before
reading the table data, and the first of those will be treated as an
array of column names. However, the <tt class="literal">col_names</tt>
attribute takes precedence.</p></dd>



<dt><b><tt class="literal">types</tt></b></dt>
<dd><p>This is an array ref of the <tt class="literal">Text::CSV_XS</tt> type
values for the corresponding columns. Three types are supported and
their values are defined by the <tt class="literal">IV()</tt>,
<tt class="literal">NV()</tt>, and <tt class="literal">PV()</tt> functions in the
<tt class="literal">Text::CSV_XS</tt> package.</p></dd>

</dl>



<p>There are no driver-specific statement handle attributes and no
private methods for either type of
handle.
<a name="INDEX-1168" /></p>



</div>

<a name="INDEX-1169" /><a name="INDEX-1170" /><a name="INDEX-1171" /><a name="INDEX-1172" /><a name="INDEX-1173" /><a name="INDEX-1174" /><a name="INDEX-1175" /><a name="INDEX-1176" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::DB2 </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>






<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::DB2</tt>
<a name="INDEX-1169" /> <a name="INDEX-1170" /> version 0.71</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner and outer
LONG/LOB datatypes                     Yes, up to 2 GB
Statement handle attributes available  After prepare(  )
Placeholders                           Yes, "?" (native)
Stored procedures                      Yes
Bind output values                     No
Table name letter case                 Insensitive, stored as uppercase
Field name letter case                 Insensitive, stored as uppercase
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       No
Server table ROW ID pseudocolumn       No
Positioned update/delete               Yes
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>Support for the <tt class="literal">DBD::DB2</tt> driver is provided by IBM
through its service agreements for DB2 UDB. Any comments,
suggestions, or enhancement requests can be sent via email to
<em class="email">db2perl@ca.ibm.com</em>. Please see the web site at:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.ibm.com/data/db2/perl">http://www.ibm.com/data/db2/perl</a></p>

</blockquote>



<p>for more information.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::DB2</tt> driver supports DB2 UDB V5.2 and
later.</p>



<p>Here are some URLs to more database/driver-specific information:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.software.ibm.com/data/db2/perl">http://www.software.ibm.com/data/db2/perl</a></p>

<p><a href="../../../../../../www.software.ibm.com/data/db2">http://www.software.ibm.com/data/db2</a></p>

<p><a href="../../../../../../www.software.ibm.com/data/db2/library">http://www.software.ibm.com/data/db2/library</a></p>

<p><a href="../../../../../../www.software.ibm.com/data/db2/udb/ad">http://www.software.ibm.com/data/db2/udb/ad</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p>The only significant difference in behavior from the current DBI
specification is the way in which datatypes are specified in the
<tt class="literal">bind_ param( )</tt> method. Please see the information
later in this section of the document about using the <tt class="literal">bind_
param( )</tt> method with the <tt class="literal">DBD::DB2</tt>
driver.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The <tt class="literal">DBI-&gt;connect()</tt>

<a name="INDEX-1171" />Data
Source Name, or DSN, is specified as follows:</p>



<blockquote><pre class="code">dbi:DB2:database_name</pre></blockquote>



<p>There are no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p><tt class="literal">DBD::DB2</tt> supports concurrent database connections
to one or more databases.</p>




<h4 class="refsect1">Datatypes</h4>









<h4 class="refsect2">Numeric data handling </h4>



<p>DB2 UDB 
<a name="INDEX-1172" />supports
the following numeric datatypes:</p>



<blockquote><pre class="code">SMALLINT
INTEGER
BIGINT
REAL
DOUBLE
FLOAT
DECIMAL or NUMERIC</pre></blockquote>



<p>A <tt class="literal">SMALLINT</tt> is a two-byte integer than can range
from -32768 to +32767. The maximum precision is 5. Scale is not
applicable.</p>



<p>An <tt class="literal">INTEGER</tt> is a four-byte integer that can range
from -2147483648 to +2147483647. The maximum precision is 10. Scale
is not applicable.</p>



<p>A <tt class="literal">BIGINT</tt> is an eight-byte integer that can range
from -9223372036854775808 to +9223372036854775807. The maximum
precision is 19. Scale is not applicable.</p>



<p>A <tt class="literal">REAL</tt> is a 32-bit approximation of a real number.
The number can be
or can range from -3.402e+38 to -1.175e-37, or from +1.175e-37 to
+3.402e+38. The maximum precision is 7. Scale is not applicable.</p>



<p>A <tt class="literal">DOUBLE</tt> or <tt class="literal">FLOAT</tt> is a 64-bit
approximation of a real number. The number can be
or can range from -1.79769e+308 to -2.225e-307, or from 2.225e-307 to
1.79769e+308. The maximum precision is 15. Scale is not applicable.</p>



<p>A <tt class="literal">DECIMAL</tt> or <tt class="literal">NUMERIC</tt> value is a
packed decimal number with an implicit decimal point that can range
from -10**31+1 to +10**31-1. The maximum precision is 31 digits. The
scale cannot be negative or greater than the precision.</p>



<p>Notice that DB2 supports numbers outside the typical valid range for
Perl numbers. This isn't a major problem because
<tt class="literal">DBD::DB2</tt> always returns all numbers as strings.</p>






<h4 class="refsect2">String data handling </h4>



<p>DB2 UDB supports the following string datatypes:</p>



<blockquote><pre class="code">CHAR
CHAR FOR BIT DATA
VARCHAR
VARCHAR FOR BIT DATA
GRAPHIC
VARGRAPHIC</pre></blockquote>



<p><tt class="literal">CHAR</tt> is a fixed-length character string that can
be up to 254 bytes long. <tt class="literal">VARCHAR</tt> is a
variable-length character string that can be up to 32672 bytes. The
<tt class="literal">FOR</tt> <tt class="literal">BIT</tt> <tt class="literal">DATA</tt>
variants are used for data not associated with a particular coded
character set.</p>



<p><tt class="literal">GRAPHIC</tt> is a fixed-length string of double-byte
characters that can be up to 127 characters long.</p>



<p><tt class="literal">VARGRAPHIC</tt> is a variable-length string of
double-byte characters that can be up to 16336 characters long.</p>



<p>The <tt class="literal">CHAR</tt> and <tt class="literal">GRAPHIC</tt> types are
fixed-length strings, padded with blanks.</p>



<p>For DB2 UDB, <tt class="literal">CHAR</tt> fields can be in mixed codesets
(national character sets). The non-ASCII characters are handled
according to the mixed code page definition. For example, Shift-JIS
characters in the range 0x81 to 0x9F and 0xE0 to 0xFC are DBCS
introducer bytes, and characters in the range 0xA0 to 0xDF are
single-byte Katakana characters. Blank padding for
<tt class="literal">CHAR</tt> fields is always with ASCII blank
(single-byte blank). For UTF-8, characters with the sign bit set are
interpreted according to the UTF-8 definition.</p>



<p><tt class="literal">GRAPHIC</tt> datatypes are stored as pure double-byte
in the default code page of the database, or in UCS-2 in the case of
a Unicode database. Blank padding for <tt class="literal">GRAPHIC</tt>
fields is always with the DBCS blank of the corresponding code page,
or with the UCS-2 blank ( U+0020 ) in the case of a Unicode database.</p>



<p>Code page conversions between the client code page and the database
code page are automatically performed by DB2 UDB.</p>



<p>Unicode support is provided with DB2 UDB Version 5 + FixPak 7 (DB2
UDB V5.2 is actually DB2 UDB V5 + FixPak 6). In a Unicode database,
<tt class="literal">CHAR</tt> datatypes are stored in UTF-8 format and
<tt class="literal">GRAPHIC</tt> datatypes are stored in UCS-2 format.</p>



<p>With DB2 UDB Version 6.1, the <tt class="literal">VARCHAR( )</tt> function
has been extended to convert graphic string datatypes to a
<tt class="literal">VARCHAR</tt>, with the exception of
<tt class="literal">LONG</tt> <tt class="literal">VARGRAPHIC</tt> and
<tt class="literal">DBCLOB</tt>. This function is valid for UCS-2 databases
only. For non-Unicode databases, this is not allowed.</p>



<p>All character types can store strings with embedded <tt class="literal">nul(
"\0" )</tt> bytes.</p>



<p>Strings can be concatenated using the <tt class="literal">||</tt> operator
or the <tt class="literal">CONCAT(s1,s2)</tt> SQL function.</p>






<h4 class="refsect2">Date data handling </h4>



<p>DB2 UDB supports the following date, time, and date/time datatypes:</p>



<blockquote><pre class="code">DATE
TIME
TIMESTAMP</pre></blockquote>



<p><tt class="literal">DATE</tt> is a three-part value consisting of year,
month, and day. The range of the year part is 0001 to 9999. Two-digit
years cannot be used with DB2 UDB. Years must be specified with all
four digits.</p>



<p><tt class="literal">TIME</tt> is a three-part value consisting of hour,
minute, and second designates a time of day under a 24-hour clock.</p>



<p><tt class="literal">TIMESTAMP</tt> is a seven-part value, consisting of
year, month, day, hour, minute, second, and microsecond, that
designates a date and time as defined above, except that the time
includes a fractional specification of microseconds. If you specify a
<tt class="literal">TIMESTAMP</tt> value without a time component, the
default time is 00:00:00 (midnight).</p>



<p>The current date, time, and date/time can be retrieved using the
<tt class="literal">CURRENT</tt> <tt class="literal">DATE</tt>,
<tt class="literal">CURRENT</tt> <tt class="literal">TIME</tt>, and
<tt class="literal">CURRENT</tt> <tt class="literal">TIMESTAMP</tt> special
registers.</p>



<p>DB2 UDB supports the following date, time, and date/time formats:</p>



<blockquote><pre class="code">ISO   (International Standards Organization)
USA   (IBM USA standard)
EUR   (IBM European standard)
JIS   (Japanese Industrial Standard Christian era)
LOC   (site-defined, depends on database country code)</pre></blockquote>



<p>You can input date and date/time values in any supported format. For
example:</p>



<blockquote><pre class="code">create table datetest(dt date); 
insert into datetest('1991-10-27'); 
insert into datetest('10/27/1991');</pre></blockquote>



<p>The default output format for <tt class="literal">DATE</tt>,
<tt class="literal">TIME</tt>, and <tt class="literal">TIMESTAMP</tt> is that
format that is associated with the country code of the database (LOC
format above). You can use the <tt class="literal">CHAR()</tt> function and
specify an alternate format.</p>



<p>Datetime values can be incremented, decremented, and subtracted. DB2
UDB provides a wide range of date functions including <tt class="literal">DAY(
)</tt>, <tt class="literal">DAYOFWEEK( )</tt>, <tt class="literal">DAYOFYEAR(
)</tt>, <tt class="literal">MONTHNAME( )</tt>, and
<tt class="literal">TIMESTAMPDIFF( )</tt>. See the DB2 UDB documentation
for additional functions.</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970" value to the corresponding
database date/time (local time not GMT):</p>



<blockquote><pre class="code">TIMESTAMP('1970-01-01','00:00') + seconds_since_epoch</pre></blockquote>



<p>There is no simple expression that will do the reverse. Subtracting
<tt class="literal">timestamp('1970-01-01','00:00')</tt>
from another timestamp gives a timestamp duration which is a
<tt class="literal">DECIMAL(20,6)</tt> value with format
<tt class="literal">yyyymmddhhmmss.zzzzzz</tt>.</p>



<p>DB2 does no automatic time zone adjustments.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>DB2 UDB supports the following
<tt class="literal">LONG</tt>/<tt class="literal">BLOB</tt> datatypes:</p>



<blockquote><pre class="code">BLOB
CLOB
DBCLOB
LONG VARCHAR
LONG VARCHAR FOR BIT DATA
LONG VARGRAPHIC</pre></blockquote>



<p><tt class="literal">BLOB</tt> (binary large object) is a variable-length
string measured in bytes that can be up to 2 GB long. A
<tt class="literal">BLOB</tt> is primarily intended to hold non-traditional
data such as pictures, voice, and mixed media. BLOBs are not
associated with a coded character set (similar to
<tt class="literal">FOR</tt> <tt class="literal">BIT</tt> <tt class="literal">DATA</tt>
character strings; see below).</p>



<p><tt class="literal">CLOB</tt> (character large object) is a variable-length
string measured in bytes that can be up to 2 GB long. A
<tt class="literal">CLOB</tt> is used to store large character-based data.</p>



<p><tt class="literal">DBCLOB</tt> (double-byte character large object) is a
variable-length string of double-byte characters that can be up to
1,073,741,823 characters long. A <tt class="literal">DBCLOB</tt> is used to
store large DBCS character based data.</p>



<p><tt class="literal">LONG</tt> <tt class="literal">VARCHAR</tt> is a
variable-length character string that can be up to 32,700 bytes long.
<tt class="literal">LONG</tt> <tt class="literal">VARCHAR</tt>
<tt class="literal">FOR</tt> <tt class="literal">BIT</tt> <tt class="literal">DATA</tt>
is used for data not associated with a coded character set.</p>



<p><tt class="literal">LONG</tt> <tt class="literal">VARGRAPHIC</tt> is a
variable-length string of double-byte characters that can be up to
16,350 characters long.</p>



<p>None of these types need to be passed to and from the database as
pairs of hex digits.</p>



<p>Sadly, the <tt class="literal">DBD::DB2</tt> driver does not yet support
the <tt class="literal">LongReadLen</tt> and <tt class="literal">LongTruncOk</tt>
attributes. Values of any length can be inserted and fetched up to
the maximum size of the corresponding datatype although system
resources may be a constraint.</p>



<p>The <tt class="literal">DBD::DB2</tt> driver is unusual in that it requires
heavy use of bind parameter attributes both for ordinary types and
for <tt class="literal">LONG</tt>/<tt class="literal">BLOB</tt> types. 
For example, here's an attribute hash for a
<tt class="literal">CLOB</tt>, which will have a maximum length of 100K in
this particular application:</p>



<blockquote><pre class="code">$attrib_clob = {
  ParamT =&gt; SQL_PARAM_INPUT,
  Ctype  =&gt; SQL_C_CHAR,
  Stype  =&gt; SQL_CLOB,
  Prec   =&gt; 100000
  Scale  =&gt; 0,
};</pre></blockquote>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::DB2</tt> driver does not yet support the
<tt class="literal">type_info()</tt> method.</p>



<p>DB2 UDB does not automatically convert strings to numbers or numbers
to strings.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p>DB2 UDB 
<a name="INDEX-1173" />supports
transactions and four transaction isolation levels: Repeatable Read,
Read Stability, Cursor Stability, Uncommited Read. The default
transaction isolation level is Cursor Stability.</p>



<p>For the <tt class="literal">DBD::DB2</tt> driver, the isolation level can
be changed by setting the TXNISOLATION keyword in the
<em class="emphasis">db2cli.ini</em> file to the desired value. This
keyword is set in a database-specific section, meaning that it will
affect all applications that connect to that particular database.
There is no way to change the isolation level from SQL.</p>



<p>The default behavior for reading and writing is based on the
isolation level. Rows returned by a <tt class="literal">SELECT</tt>
statement can be explicitly locked by appending <tt class="literal">FOR
UPDATE</tt> and a list of field names to the
<tt class="literal">SELECT</tt> statement. For example:</p>



<blockquote><pre class="code">SELECT colname1, colname2
FROM tablename
WHERE colname1 = 'testvalue'
FOR UPDATE OF colname1, colname2</pre></blockquote>



<p>The <tt class="literal">LOCK TABLE table_name IN lock_mode</tt> statement
can be used to apply an explicit lock on an entire table.</p>




<h4 class="refsect1">SQL Dialect</h4>




<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1174" />
operator is case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>You can perform an equi-join, or inner join, using the standard
<tt class="literal">WHERE a.field =</tt> <tt class="literal">b.field</tt> syntax.
You can also use the following syntax:</p>



<blockquote><pre class="code">SELECT tablea.col1, tableb.col1
 FROM tablea INNER JOIN tableb
 ON tableb.name = tablea.name</pre></blockquote>



<p>DB2 UDB supports left outer joins, right outer joins, and full outer
joins. For example, to perform a left outer join, you can use the
following statement:</p>



<blockquote><pre class="code">SELECT tablea.col1, tablea.col2, tableb.col1, tableb.col2
 FROM tablea LEFT OUTER JOIN tableb
 ON tableb.name = tablea.name</pre></blockquote>



<p>Changing "LEFT" to "RIGHT" or
"FULL" gives you the other forms of outer join.</p>






<h4 class="refsect2">Table and column names </h4>



<p>In DB2 UDB Version 5.2, the maximum length of table names and column
names is 18. In DB2 UDB Version 6.1, the maximum length of table
names will be increased to 128 and the maximum length of column names
will be increased to 30.</p>



<p>The first character must be a letter, but the rest can be any
combination of uppercase letters, digits, and underscores.</p>



<p>Table and field names can be delimited by double quotes (") and can
contain the same characters as described above plus lowercase
letters.</p>



<p>Table and column names are stored as uppercase in the catalogs unless
delimited. Delimited identifiers preserve the case. Two consecutive
quotation marks are used to represent one quotation mark within the
delimited identifier.</p>



<p>National characters can be used in table and column names.</p>






<h4 class="refsect2">Row ID </h4>



<p>DB2 UDB does not support a "table row ID" pseudocolumn.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>The <tt class="literal">GENERATE_UNIQUE</tt> function can be used to
provide unique values (keys) in a table. For example:</p>



<blockquote><pre class="code">CREATE TABLE EMP_UPDATE (
  UNIQUE_ID CHAR(13) FOR BIT DATA,  -- note the "FOR BIT DATA"
  EMPNO CHAR(6),
  TEXT VARCHAR(1000)
)
INSERT INTO EMP_UPDATE VALUES
  (GENERATE_UNIQUE(  ), '000020', 'Update entry...'),
  (GENERATE_UNIQUE(  ), '000050', 'Update entry...')</pre></blockquote>



<p>Sadly, DB2 does not provide any way to discover the most recent value
generated by <tt class="literal">GENERATE_UNIQUE</tt>.</p>



<p>DB2 UDB does not support named sequence generators.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>There is no pseudocolumn that can be used to sequentially number the
rows fetched by a <tt class="literal">SELECT</tt> statement. However, you
can number the rows of a result set using the OLAP function
<tt class="literal">ROWNUMBER</tt>. For example:</p>



<blockquote><pre class="code">SELECT <em class="replaceable">ROWNUMBER(  )</em> OVER (order by lastname) AS number, lastname, salary
FROM employee ORDER BY number;</pre></blockquote>



<p>This returns the rows of the employee table with numbers assigned
according to the ascending order of last names, ordered by the row
numbers.</p>



<p>A cursor can be declared with the <tt class="literal">FETCH FIRST n ROWS
ONLY</tt> clause to limit the number of rows returned.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>DB2 UDB supports positioned updates and deletes. Since specific
testing of this functionality has not been done with the
<tt class="literal">DBD::DB2</tt> driver, it's not officially
supported; however, no problems are anticipated.</p>



<p>The syntax for a positioned update is as follows.
<tt class="literal">DELETE</tt> has a similar syntax.</p>



<blockquote><pre class="code">"UPDATE ... WHERE CURRENT OF $sth-&gt;{CursorName}"</pre></blockquote>



<h4 class="refsect1">Parameter Binding</h4>



<p>Parameter binding 
<a name="INDEX-1175" />is directly supported by DB2 UDB. Only
the standard <tt class="literal">?</tt> style of placeholders is supported.</p>



<p>The <tt class="literal">DBD::DB2</tt> driver does not support the
<tt class="literal">TYPE</tt> attribute exactly as described in the DBI
documentation. Attribute hashes are used to pass type information to
the <tt class="literal">bind_ param()</tt> method. An attribute hash is
simply a collection of information about a particular type of data.
(See the <tt class="literal">DBD::DB2</tt> documentation for a list of
predefined attribute hashes).</p>



<p>The following is an example of how a complete new attribute hash can
be created:</p>



<blockquote><pre class="code">$attrib_char = {
  ParamT =&gt; SQL_PARAM_INPUT,
  Ctype  =&gt; SQL_C_CHAR,
  Stype  =&gt; SQL_CHAR,
  Prec   =&gt; 254,
  Scale  =&gt; 0,
};</pre></blockquote>




<h4 class="refsect1">Stored Procedures </h4>



<p>Stored procedures are invoked by using the following SQL syntax:</p>



<blockquote><pre class="code">CALL procedure-name(argument, ...)</pre></blockquote>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::DB2</tt> does not yet support the
<tt class="literal">table_info()</tt> method.</p>



<p>The <tt class="literal">SYSCAT.COLUMNS</tt> view contains one row for each
column that is defined for all tables and views in the database.</p>



<p>The <tt class="literal">SYSCAT.INDEXES</tt> view contains one row for each
index that is defined for all tables in a database. Primary keys are
implemented as unique indexes.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::DB2</tt> has no driver-specific attributes or

<a name="INDEX-1176" />methods.</p>



</div>

<a name="INDEX-1177" /><a name="INDEX-1178" /><a name="INDEX-1179" /><a name="INDEX-1180" /><a name="INDEX-1181" /><a name="INDEX-1182" /><a name="INDEX-1183" /><a name="INDEX-1184" /><a name="INDEX-1185" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::Empress and DBD::EmpressNet </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>








<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::Empress</tt>
<a name="INDEX-1177" /> <a name="INDEX-1178" /> version 0.51.</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner and outer
LONG/LOB datatypes                     Yes, up to 2 GB
Statement handle attributes available  After prepare(  )
Placeholders                           Yes, "?" (native)
Stored procedures                      Yes
Bind output values                     No
Table name letter case                 Sensitive, stored as defined
Field name letter case                 Sensitive, stored as defined
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       Yes, "MATCH"
Server table ROW ID pseudocolumn       Yes, "MS_RECORD_NUMBER"
Positioned update/delete               No
Concurrent use of multiple handles     Yes, with some restrictions</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The 
<a name="INDEX-1179" />driver
was written by Steve Williams. He can be contacted at
<em class="email">swilliam@empress.com</em>.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p><tt class="literal">DBD::Empress</tt> supports Empress V6.10 and later. For
further information refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.empress.com/">http://www.empress.com</a></p>

</blockquote>



<p>These drivers use the same Perl interface but use a different
underlying database interface. <tt class="literal">DBD::Empress</tt> is for
direct access of databases, while <tt class="literal">DBD::EmpressNet</tt>
is for distibuted database connected via the Empress Connectivity
Server (referred to in Empress v8.10 and earlier as the Empress ODBC
server).</p>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p>There are no significant differences.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The <tt class="literal">DBI-&gt;connect()</tt> Data Source Name, or DSN,
can be one of the following:</p>



<blockquote><pre class="code">dbi:Empress:physical_database
dbi:EmpressNet:logical_database
dbi:EmpressNet:SERVER=server_name;DATABASE=physical_database;PORT=port_number</pre></blockquote>



<p>There 
<a name="INDEX-1180" />are
no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p><tt class="literal">DBD::EmpressNet</tt> supports an unlimited number of
concurrent database connections to one or more databases.</p>



<p><tt class="literal">DBD::Empress</tt> also supports multiple concurrent
database connections to one or more databases. However, these
connections are simulated, and there are therefore a number of
limitations. Most of these limitations are associated with
transaction processing: 1) <tt class="literal">AutoCommit</tt> must be on
or off for all connections; and 2) Switching processing from one
database to another automatically commits any transactions on the
first database.</p>




<h4 class="refsect1">Datatypes</h4>





<h4 class="refsect2">Numeric data handling </h4>



<p>Empress 
<a name="INDEX-1181" />RDBMS
supports the following numeric datatypes:</p>



<blockquote><pre class="code">DECIMAL(p,s)      1 to 15 digits
DOLLAR(p,type)    1 to 13 digits
REAL              Typically 4-byte single precision float
FLOAT(p)          Typically 4 or 8-byte float as required
LONGFLOAT         Typically 8-byte double precision float
SHORTINTEGER             -127 to 127 
INTEGER                -32767 to 32767 
LONGINTEGER       -2147483647 to 2147483647</pre></blockquote>



<p>The DBD driver supports Empress Generic datatypes only. This means
that all data for a specific group will be retrieved as the same
datatype. For example, <tt class="literal">SHORTINTEGER</tt>,
<tt class="literal">INTEGER</tt>, and <tt class="literal">LONGINTEGER</tt> will
all be retrieved as <tt class="literal">LONGINTEGER</tt>.</p>



<p><tt class="literal">DBD::Empress</tt> always returns all numbers as
strings.</p>






<h4 class="refsect2">String data handling </h4>



<p>Empress RDBMS supports the following string datatypes:</p>



<blockquote><pre class="code">CHAR (length, type)
NLSCHAR (length, type)        
TEXT (display_length, primary, overflow, extent)
NLSTEXT (display_length, primary, overflow, extent)</pre></blockquote>



<p>All arguments have default values. See Empress SQL Reference (A4) for
details. The maximum size for all string types is typically 2**31-1
bytes (2 GB). None of the string types are blank padded.</p>



<p><tt class="literal">NLSCHAR</tt> and <tt class="literal">NLSTEXT</tt> are can be
used for storage of 8-bit and multibyte characters but UTF-8 is not
currently supported.</p>



<p>Strings can be concatenated using the <tt class="literal">s1
CONCAT(s2)</tt> SQL function.</p>






<h4 class="refsect2">Date data handling </h4>



<p>Empress RDBMS supports the following date/time datatypes:</p>



<blockquote><pre class="code">DATE(t)            = 0000-01-01 to 9999-12-31 at 1 day resolution
TIME(t)            = 1970-01-01 to 2035-12-31 at 1 second resolution
MICROTIMESTAMP(t)  = 0000-01-01 to 9999-12-31 at 1 microsecond resolution</pre></blockquote>



<p>The <tt class="literal">(t)</tt> is the format type for default output.
This is one of the nine types defined in the section on date/time
formats.</p>



<p>Empress supports nine formats for date/time types:</p>



<blockquote><pre class="code">Type  Date                Time                         MicroTimestamp
0     yyyymmdd            yyyymmddhhmmss               yyyymmddhhmmssffffff
1     dd aaaaaaaaa yyyy   dd aaaaaaaaa yyyy hh:mm:ss   dd aaaaaaaaa yyyy hh:mm:ss.
                                                       fffff
2     aaaaaaaaa dd, yyyy  aaaaaaaaa dd, yyyy hh:mm:ss  aaaaaaaaa dd, yyyy hh:mm:
                                                       ss.fffff
3     mm/dd/yy            mm/dd/yy hh:mm:ss            mm/dd/yy hh:mm:ss.ffffff
4     dd/mm/yy            dd/mm/yy hh:mm:ss            dd/mm/yy hh:mm:ss.ffffff
5     dd aaa yy           dd aaa yy hh:mm:ss           dd aaa yy hh:mm:ss.ffffff
6     aaa dd, yy          aaa dd, yy hh:mm:ss          aaa dd, yy hh:mm:ss.fffff
7     mm/dd/yyyy          mm/dd/yyyy hh:mm:ss          mm/dd/yyyy hh:mm:ss.ffffff
8     dd/mm/yyyy          dd/mm/yyyy hh:mm:ss          dd/mm/yyyy hh:mm:ss.ffffff</pre></blockquote>



<p>The date part for all types is not optional. If you specify a value
without a time component, the default time is 00:00:00 (midnight). If
only two digits of the year are input, then the century pivots on the
Empress variable <tt class="literal">MSDATELIMIT</tt>. For Empress
v8.<em class="emphasis">xx</em> and above, the default for this is 1950.
Earlier versions of Empress defaulted to 1900.</p>



<p>Empress accepts any of the nine specified types as input. The only
limitation is that you cannot insert a four-digit year into a date
type that uses a two-digit format. It always uses
<tt class="literal">MSDATELIMIT</tt> for input dates.</p>



<p>For output, <tt class="literal">DBD::Empress</tt> uses just
<tt class="literal">yyyymmddhhmmssffffff</tt> and <tt class="literal">DBD::
EmpressNet</tt> uses just <tt class="literal">yyyy-mm-dd
hh:mm:ss.ffffff</tt>. Empress does not support changing of the
default display formats. It is not possible to format a date/time
value in other styles for output. The best approach is to select the
components of the date/time, using SQL functions like
<tt class="literal">DAYOF(d)</tt> and <tt class="literal">MONTHOF(d)</tt>, and
format them using Perl.</p>



<p>The current date/time at the server, can be obtained using the
<tt class="literal">NOW</tt> or <tt class="literal">TODAY</tt> pseudo constants.
<tt class="literal">NOW</tt> returns the current date and time.
<tt class="literal">TODAY</tt> returns the date portion only.</p>



<p>Date and time arithmetic can be done using the Empress date/time
operators. For example:</p>



<blockquote><pre class="code">NOW + 2 MINUTES + 5 SECONDS
TODAY - 3 DAYS</pre></blockquote>



<p>Empress provides a wide range of date functions including
<tt class="literal">DAYOF( )</tt>, <tt class="literal">MONTHOF( )</tt>,
<tt class="literal">YEAROF( )</tt>, <tt class="literal">HOUROF( )</tt>,
<tt class="literal">MINUTEOF( )</tt>, <tt class="literal">SECONDOF( )</tt>,
<tt class="literal">WEEKOFYEAR( )</tt>, <tt class="literal">DAYNAME( )</tt>,
<tt class="literal">DAYOFWEEK( )</tt>, <tt class="literal">DAYOFYEAR( )</tt>, and
<tt class="literal">DATENEXT( )</tt>.</p>



<p>The following SQL expression:</p>



<blockquote><pre class="code">'1 jan 1970' + unix_time_field SECONDS</pre></blockquote>



<p>would convert to a local time from 1 Jan 1970, but the GMT base
cannot be generated directly.</p>



<p>The number of seconds since 1 Jan 1970 for date granularity can be
obtained for the local time zone (not GMT) using:</p>



<blockquote><pre class="code">(date_field - '1 jan 1970') * 86400</pre></blockquote>



<p>Empress does no automatic time zone adjustments.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>Empress RDBMS supports the following <tt class="literal">LONG</tt>
datatypes:</p>



<blockquote><pre class="code">TEXT      Variable length 7-bit character data
NLSTEXT   As TEXT but allows 8-bit characters
BULK      User Interpreted (Byte Stream)</pre></blockquote>



<p>The maximum size for all these types is typically 2**31-1 bytes (2
GB).</p>



<p><tt class="literal">LongReadLen</tt> works as defined for
<tt class="literal">DBD::EmpressNet</tt> but is ignored for <tt class="literal">DBD::
Empress</tt>. The maximum <tt class="literal">LongReadLen</tt> is
limited to 2 GB typically. <tt class="literal">LongTruncOk</tt> is not
implemented.</p>



<p>No special handling is required for binding LONG/BLOB datatypes. The
<tt class="literal">TYPE</tt> attribute is currently not used when binding
parameters. The maximum length of <tt class="literal">bind_ param( )</tt>
parameters is limited by the capabilities of the OS or the size of
the C <tt class="literal">int</tt>, whichever comes first.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">type_info(  )</tt> method is not supported.</p>



<p>Empress automatically converts strings to numbers and dates, and
numbers and dates to strings, as needed.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p><tt class="literal">DBD::Empress</tt>

<a name="INDEX-1182" />supports
transactions. The default isolation level is Serializable.</p>



<p>Other transaction isolation levels are not explicitly supported.
However Read Uncommited is supported on a single query basis. This is
activated by adding the <tt class="literal">BYPASS</tt> option into each
SQL statement.</p>



<p>For example:</p>



<blockquote><pre class="code">SELECT BYPASS * FROM table_name</pre></blockquote>



<p>Record level locking is the default. Read locks do not block other
read locks, but read locks block write locks, and write locks block
all other locks. Write locks can be bypassed for read using the
<tt class="literal">BYPASS</tt> option.</p>



<p>When in transaction mode (<tt class="literal">AutoCommit</tt> off),
selected rows are automatically locked against update unless the
<tt class="literal">BYPASS</tt> option is used in the
<tt class="literal">SELECT</tt> statement.</p>



<p>The <tt class="literal">LOCK TABLE table_name IN lock_mode</tt> statement
can be used to apply an explicit lock on a table. Lock mode can be
<tt class="literal">EXCLUSIVE</tt> or <tt class="literal">SHARE</tt>.
<tt class="literal">SHARE</tt> requires the user to have
<tt class="literal">SELECT</tt> or <tt class="literal">UPDATE</tt> privileges on
the table. <tt class="literal">EXCLUSIVE</tt> requires the user to have
<tt class="literal">UPDATE</tt>, <tt class="literal">INSERT</tt>, or
<tt class="literal">DELETE</tt> privileges.</p>




<h4 class="refsect1">SQL Dialect</h4>








<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>

<a name="INDEX-1183" />operator is case-sensitive. The
<tt class="literal">MATCH</tt> operator is case-insensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>For outer joins, the Empress keyword <tt class="literal">OUTER</tt> should
be placed before the table(s) that should drive the outer join. For
example:</p>



<blockquote><pre class="code">SELECT customer_name, order_date 
FROM OUTER customers, orders 
WHERE customers.cust_id = orders.cust_id;</pre></blockquote>



<p>This returns all the rows in the customer's table that have no
matching rows in the orders table. Empress returns
<tt class="literal">NULL</tt> for any select list expressions containing
columns from the orders table.</p>






<h4 class="refsect2">Table and Column Names </h4>



<p>The names of Empress identifiers, such as tables and columns, cannot
exceed 32 characters in length. The first character must be a letter,
but the rest can be any combination of letters, numerals, and
underscores ( _ ). Empress table/column names are stored as defined.
They are case-sensitive.</p>



<p>Empress tables and fields can contain most ASCII characters (except
<tt class="literal">$</tt> and <tt class="literal">?</tt>) if they are quoted.</p>



<p>Any ISO-Latin characters can be used in the base product. Specific
products for other languages, such as Japanese, can handle those
character sets.</p>






<h4 class="refsect2">Row ID </h4>



<p>A table row identifier can be referenced as
<tt class="literal">MS_RECORD_NUMBER</tt>. It can be treated as a string
during fetch; however, it must be treated as an integer when it is
used in a WHERE clause. It is useful only for explicit fetch;
inequalities are not allowed.</p>



<blockquote><pre class="code">SELECT * FROM table_name WHERE MS_RECORD_NUMBER = ?</pre></blockquote>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>Empress has no "auto increment" or "system
generated" key mechanism, and does not support sequence
generators.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Positioned updates and deletes are not supported.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter 
<a name="INDEX-1184" />binding is directly supported by
Empress. Only the standard <tt class="literal">?</tt> style of placeholders
is supported.</p>



<p><tt class="literal">DBD::Empress</tt> recognizes the <tt class="literal">bind_
param()</tt> <tt class="literal">TYPE</tt> attribute
<tt class="literal">SQL_BINARY</tt>. All other types are automatically
bound correctly without <tt class="literal">TYPE</tt> being used.
Unsupported types are ignored without warning.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p><tt class="literal">DBD::Empress</tt> does not explicitly support stored
procedures. Implicit support is available for stored procedures in
SQL statements. For example:</p>



<blockquote><pre class="code">$sth-&gt;prepare("SELECT func(attribute) FROM table_name");</pre></blockquote>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::Empress</tt> does not support the
<tt class="literal">table_info()</tt> method.</p>



<p>The <tt class="literal">SYS_ATTRS</tt> and <tt class="literal">SYS_TABLES</tt>
system tables can be used to obtain detailed information about the
columns of a table. For example:</p>



<blockquote><pre class="code">SELECT * FROM sys_attrs
WHERE attr_tabnum = (SELECT tab_number FROM sys_tables WHERE tab_name='x')</pre></blockquote>



<p>However, this requires <tt class="literal">SELECT</tt> privileges on these
system tables.</p>



<p>Detailed information about indices or keys cannot currently be easily
retrieved though <tt class="literal">DBD::Empress</tt>. It is possible,
though difficult, to interpret the contents of the system tables to
obtain this information.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::Empress</tt> has no significant driver-specific
handle attributes or private methods.
<a name="INDEX-1185" /></p>



</div>

<a name="INDEX-1186" /><a name="INDEX-1187" /><a name="INDEX-1188" /><a name="INDEX-1189" /><a name="INDEX-1190" /><a name="INDEX-1191" /><a name="INDEX-1192" /><a name="INDEX-1193" /><a name="INDEX-1194" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::Informix </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>








<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::Informix</tt>
<a name="INDEX-1186" /> <a name="INDEX-1187" /> version 0.62.</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes, if enabled when database was created
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner and outer
LONG/LOB datatypes                     Yes, up to 2 GB
Statement handle attributes available  After prepare(  )
Placeholders                           Yes, "?" (native)
Stored procedures                      Yes
Bind output values                     Yes
Table name letter case                 Configurable
Field name letter case                 Configurable
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       No
Server table ROW ID pseudocolumn       Yes, "ROWID"
Positioned update/delete               Yes
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Jonathan Leffler. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::Informix</tt> module supports Informix OnLine
and SE from version 5.00 onwards. There are some restrictions in the
support for IUS (a.k.a., IDS/UDO). It uses Informix-ESQL/C (a.k.a.,
Informix ClientSDK). You must have a development license for
Informix-ESQL/C (or the C-code version of Informix-4GL) to be able to
compile the <tt class="literal">DBD::Informix</tt> code.</p>



<p>For more information, refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.informix.com/">http://www.informix.com</a></p>

<p><a href="../../../../../../www.iiug.org/">http://www.iiug.org</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI Specification </h4>



<p>If you change <tt class="literal">AutoCommit</tt> after preparing a
statement, you will probably run into problems that you don't
expect. So don't do that.</p>



<p>See the <tt class="literal">DBD::Informix</tt> documentation for more
details on this and other assorted subtle compatibility issues.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The
<tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1188" />
Data Source Name, or DSN, has the following form:</p>



<blockquote><pre class="code">dbi:Informix:connect_string</pre></blockquote>



<p>where <tt class="literal">connect_string</tt> is any valid string that can
be passed to the Informix <tt class="literal">CONNECT</tt> statement (or to
the <tt class="literal">DATABASE</tt> statement for version
5.<em class="emphasis">x</em> systems). The acceptable notations include:</p>



<blockquote><pre class="code">dbase
dbase@server
@server
/path/to/dbase
//machine/path/to/dbase</pre></blockquote>



<p>There are no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p>If you're using version 6.00 or later of ESQL/C, then the
number of database handles is limited only by your imagination and
the computer's physical constraints. If you're using
5.<em class="emphasis">x</em>, you're stuck with one connection at a
time.</p>




<h4 class="refsect1">Datatypes</h4>








<h4 class="refsect2">Numeric data handling </h4>



<p>Informix 
<a name="INDEX-1189" />supports
these numeric datatypes:</p>



<blockquote><pre class="code">INTEGER           - signed 32-bit integer, excluding -2**31
SERIAL            - synonym for INTEGER as far as scale is concerned
SMALLINT          - signed 16-bit integer, excluding -2**15
FLOAT             - Native C 'double'
SMALLFLOAT        - Native C 'float'
REAL              - Synonym for SMALLFLOAT
DOUBLE PRECISION  - Synonym for FLOAT
DECIMAL(s)        - s-digit floating point number (non-ANSI databases)
DECIMAL(s)        - s-digit integer (MODE ANSI databases)
DECIMAL(s,p)      - s-digit fixed-point number with p decimal places
MONEY(s)          - s-digit fixed-point number with 2 decimal places
MONEY(s,p)        - s-digit fixed-point number with p decimal places
NUMERIC(s)        - synonym for DECIMAL(s)
NUMERIC(s,p)      - synonym for DECIMAL(s,p)
INT8              - signed 64-bit integer, excluding -2**63 (IDS/UDO)
SERIAL8           - synonym for INT8 as far as scale is concerned</pre></blockquote>



<p><tt class="literal">DBD::Informix</tt> always returns all numbers as
strings. Thus the driver puts no restriction on size of
<tt class="literal">PRECISION</tt> or <tt class="literal">SCALE</tt>.</p>






<h4 class="refsect2">String data handling </h4>



<p>Informix supports the following string datatypes:</p>



<blockquote><pre class="code">VARCHAR(size)
NVARCHAR(size)
CHAR
CHAR(size)
NCHAR
NCHAR(size)
CHARACTER VARYING(size)
NATIONAL CHARACTER VARYING(size)
NATIONAL CHARACTER(size)
CHARACTER(size)
VARCHAR(size,min)   -- and synonyms for this type
NVARCHAR(size,min)  -- and synonyms for this type
LVARCHAR            -- IDS/UDO only</pre></blockquote>



<p>Arguably, <tt class="literal">TEXT</tt> and <tt class="literal">BYTE</tt> blobs
should also be listed here, as they are automatically converted
from/to strings.</p>



<p><tt class="literal">CHAR</tt> types have a limit of 32767 bytes in OnLine
and IDS and a slightly smaller value (325<em class="emphasis">xx</em>) for
SE. For <tt class="literal">VARCHAR</tt> types, the limit is 255.
<tt class="literal">LVARCHAR</tt> columns are limited to 2 KB; when used to
transfer other datatypes, up to 32 KB.
<tt class="literal">DBD::Informix</tt> 0.61 doesn't have fully
operational <tt class="literal">LVARCHAR</tt> support.</p>



<p>The <tt class="literal">CHAR</tt> and <tt class="literal">NCHAR</tt> types are
fixed-length and blank-padded.</p>



<p>Handling of national character sets depends on the database version
(and is different for versions 5, for versions 6 and
7.1<em class="emphasis">x</em>, and for versions 7.2<em class="emphasis">x</em>
and later). Details for version 8.<em class="emphasis">x</em> vary
depending on <em class="emphasis">x</em>. It depends on the locale,
determined by a wide range of standard (<em class="emphasis">e.g.</em>,
<tt class="literal">LANG</tt>, <tt class="literal">LC_COLLATE</tt>) and
non-standard (<em class="emphasis">e.g.</em>, <tt class="literal">DBNLS</tt>,
<tt class="literal">CLIENT_LOCALE</tt>) environment variables. For details,
read the relevant manual. Unicode is not currently directly supported
by Informix (as of 1999-02-28).</p>



<p>Strings can be concatenated using the <tt class="literal">||</tt> operator.</p>






<h4 class="refsect2">Date data handling </h4>



<p>There are two basic date/time handling types: <tt class="literal">DATE</tt>
and <tt class="literal">DATETIME</tt>. <tt class="literal">DATE</tt> supports
dates in the range 01/01/0001 through 31/12/9999. It is fairly
flexible in its input and output formats. Internally, it is
represented by the number of days since December 31 1899, so January
1 1900 was day 1. It does not understand the calendric gyrations of
1752, 1582-4, or the early parts of the first millenium, and imposes
the calendar as of 1970-01-01 on these earlier times.</p>



<p><tt class="literal">DATETIME</tt> has to be qualified by two components
from the set:</p>



<blockquote><pre class="code">YEAR MONTH DAY HOUR MINUTE SECOND FRACTION FRACTION(n) for n = 1..5</pre></blockquote>



<p>These store a date using ISO 8601 format for the constants. For
example, <tt class="literal">DATE("29/02/2000")</tt> is equivalent to:</p>



<blockquote><pre class="code">DATETIME("2000-02-29") YEAR TO DAY,</pre></blockquote>



<p>and The Epoch for POSIX systems can be expressed as:</p>



<blockquote><pre class="code">DATETIME(1970-01-01 00:00:00) YEAR TO SECOND</pre></blockquote>



<p>There is no direct support for time zones.</p>



<p>The default date/time format depends on the environment locale
settings and the version and the datatype. The
<tt class="literal">DATETIME</tt> types are rigidly ISO 8601 except for
converting one-digit or two-digit years to a four-digit equivalent,
subject to version and environment.</p>



<p>Handling of two-digit years depends on the version, the bugs fixed,
and the environment. In general terms (for current software), if the
environment variable <tt class="literal">DBCENTURY</tt> is unset or is set
to '<tt class="literal">R</tt>', then the current century is used. If
<tt class="literal">DBCENTURY</tt> is '<tt class="literal">F</tt>', the date will
be in the future; if <tt class="literal">DBCENTURY</tt> is
'<tt class="literal">P</tt>', it will be in the past; if
<tt class="literal">DBCENTURY</tt> is '<tt class="literal">C</tt>', it will be
the closest date (50-year window, based on current day, month and
year, with the time of day untested).</p>



<p>The current datetime is returned by the <tt class="literal">CURRENT</tt>
function, usually qualified as <tt class="literal">CURRENT</tt>
<tt class="literal">YEAR</tt> <tt class="literal">TO</tt>
<tt class="literal">SECOND</tt>.</p>



<p>Informix provides no simple way to input or output dates and times in
other formats. Whole chapters can be written on this subject.</p>



<p>Informix supports a draft version of the SQL2
<tt class="literal">INTERVAL</tt> datatype:</p>



<blockquote><pre class="code">INTERVAL start[(p1)] [TO end[(p2)]]</pre></blockquote>



<p>(Where <tt class="literal">[]</tt> indicates optional parts.)</p>



<p>The following interval qualifications are possible:</p>



<blockquote><pre class="code">YEAR, YEAR TO MONTH,
MONTH,
DAY, DAY TO HOUR, DAY TO MINUTE, DAY TO SECOND,
HOUR, HOUR TO MINUTE, HOUR TO SECOND,
MINUTE, MINUTE TO SECOND,
SECOND, FRACTION</pre></blockquote>



<p><tt class="literal">p1</tt> specifies the number of digits specified in the
most significant unit of the value, with a maximum of 9 and a default
of 2 (except <tt class="literal">YEAR</tt> that defaults to 4).
<tt class="literal">p2</tt> specifies the number of digits in fractional
seconds, with a maximum of 5 and a default of 3.</p>



<p>Literal interval values may be specified using the following syntax:</p>



<blockquote><pre class="code">INTERVAL value start[(p1)] [TO end[(p2)]]</pre></blockquote>



<p>For example:</p>



<blockquote><pre class="code">INTERVAL(2) DAY
INTERVAL(02:03) HOUR TO MINUTE
INTERVAL(12345:67.891) MINUTE(5) TO FRACTION(3)</pre></blockquote>



<p>The expression "2 UNITS DAY" is equivalent to the first
of these, and similar expressions can be used for any of the basic
types.</p>



<p>A full range of operations can be performed on dates and intervals,
<em class="emphasis">e.g.</em>, datetime-datetime=interval,
datetime+interval=datetime, interval/number=interval.</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970 GMT" value to the corresponding
database date/time:</p>



<blockquote><pre class="code">DATETIME(1970-01-01 00:00:00) YEAR TO SECOND + seconds_since_epoch UNITS SECOND</pre></blockquote>



<p>There is no simple expression for inline use that will do the
reverse. Use a stored procedure; see the comp.databases.informix archives at DejaNews,
or the Informix International Users Group (IIUG) web site at
<a href="../../../../../../www.iiug.org/">http://www.iiug.org</a>.</p>



<p>Informix does not handle multiple time zones in a simple manner.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>Informix supports the following large object types:</p>



<blockquote><pre class="code">BYTE  - binary data     max 2 GB
TEXT  - text data       max 2 GB
BLOB  - binary data     max 2 GB (maybe bigger); IDS/UDO only
CLOB  - character data  max 2 GB (maybe bigger); IDS/UDO only</pre></blockquote>



<p><tt class="literal">DBD::Informix</tt> does not currently have support for
<tt class="literal">BLOB</tt> and <tt class="literal">CLOB</tt> datatypes, but
does support the <tt class="literal">BYTE</tt> and <tt class="literal">TEXT</tt>
types.</p>



<p>The DBI <tt class="literal">LongReadLen</tt> and
<tt class="literal">LongTruncOk</tt> attributes are not implemented. If the
data selected is a <tt class="literal">BYTE</tt> or <tt class="literal">TEXT</tt>
type, then the data is stored in the relevant Perl variable,
unconstrained by anything except memory up to a limit of 2 GB.</p>



<p>The maximum length of <tt class="literal">bind_ param( )</tt> parameter
value that can be used to insert <tt class="literal">BYTE</tt> or
<tt class="literal">TEXT</tt> data is 2 GB. No specialized treatment is
necessary for fetch or insert. <tt class="literal">UPDATE</tt> simply
doesn't work.</p>



<p>The <tt class="literal">bind_ param( )</tt> method doesn't pay
attention to the <tt class="literal">TYPE</tt> attribute. Instead, the
string presented will be converted automatically to the required
type. If it isn't a string type, it needs to be convertible by
whichever bit of the system ends up doing the conversion.
<tt class="literal">UPDATE</tt> can't be used with these types in
<tt class="literal">DBD::Informix</tt>; only version 7.30 IDS provides the
data necessary to be able to handle blobs.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">type_info(  )</tt> method is not supported.</p>



<p>Non-BLOB types can be automatically converted to and from strings
most of the time. Informix also supports automatic conversions
between pure numeric datatypes whereever it is reasonable. Converting
from <tt class="literal">DATETIME</tt> or <tt class="literal">INTERVAL</tt> to
numeric datatypes is not automatic.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p>Informix 
<a name="INDEX-1190" />databases
can be created with or without transaction support.</p>



<p>Informix supports several transaction isolation levels: REPEATABLE
READ, CURSOR STABILITY, COMMITTED READ, and DIRTY READ. Refer to the
Informix documentation for their exact meaning. Isolation levels
apply only to ONLINE and IDS and relatives; SE supports only a level
somewhere in between COMMITTED READ and DIRTY READ.</p>



<p>The default isolation level depends on the type of database to which
you're connected. You can use <tt class="literal">SET ISOLATION
TO</tt> <em class="replaceable">level</em> to change the isolation
level. If the database is unlogged (that is, it has no transaction
support), you can't set the isolation level. In some more
recent versions, you can also set a transaction to <tt class="literal">READ
ONLY</tt>.</p>



<p>The default locking behavior for reading and writing depends on the
isolation level, the way the table was defined, and on whether or not
the database was created with transactions enabled.</p>



<p>Rows returned by a <tt class="literal">SELECT</tt> statement can be locked
to prevent them being changed by another transaction, by appending
<tt class="literal">FOR UPDATE</tt> to the select statement. Optionally,
you can specify a column list in parentheses after the <tt class="literal">FOR
UPDATE</tt> clause.</p>



<p>The <tt class="literal">LOCK TABLE table_name IN lock_mode</tt> statement
can be used to apply an explicit lock on a table. The lock mode can
be <tt class="literal">SHARED</tt> or <tt class="literal">EXCLUSIVE</tt>. There
are constraints on when tables can be unlocked, and when locks can be
applied. Row/page locking occurs with cursors <tt class="literal">FOR
UPDATE</tt>. In some types of database, some cursors are
implicitly created <tt class="literal">FOR UPDATE</tt>.</p>




<h4 class="refsect1">SQL Dialect</h4>






<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1191" />
operator is case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>All Informix versions support the basic <tt class="literal">WHERE</tt>
<tt class="literal">a.field</tt> <tt class="literal">=</tt>
<tt class="literal">b.field</tt> style join notation. Support for SQL-92
join notation depends on DBMS version; most do not.</p>



<p>Outer joins are supported. The basic version is:</p>



<blockquote><pre class="code">SELECT * FROM A, OUTER B WHERE a.col1 = b.col2</pre></blockquote>



<p>All rows from <tt class="literal">A</tt> will be selected. Where there is
one or more rows in <tt class="literal">B</tt> matching the row in
<tt class="literal">A</tt> according to the join condition, the
corresponding rows will be returned. Where there is no matching row
in <tt class="literal">B</tt>, NULL will be returned in the
<em class="emphasis">B</em>-columns in the <tt class="literal">SELECT</tt> list.
There are all sorts of other contortions, such as complications with
criteria in the <tt class="literal">WHERE</tt> clause, or nested outer
joins.</p>






<h4 class="refsect2">Table and column names </h4>



<p>For most versions, the maximum size of a table name or column name is
18 characters, as required by SQL-86. For the latest versions
(Centaur, provisionally 9.2 or 7.4), the answer will be 128, as
required by SQL-92. Owner (schema) names can be eight characters in
the older versions and 32 in the versions with long table/column
names.</p>



<p>The first character must be a letter, but the rest can be any
combination of letters, numerals, and underscores ( <tt class="literal">_
</tt>).</p>



<p>If the <tt class="literal">DELIMIDENT</tt> environment variable is set,
then table and column and owner names can be quoted inside double
quotes, and any characters become valid. To embed a double quote in
the name, use two adjacent double quotes, such as <tt class="literal">"I
said,</tt> <tt class="literal">""Don't"""</tt>. (Normally, Informix is
very relaxed about treating double quotes and single quotes as
equivalent, so often you could write <tt class="literal">'I</tt>
<tt class="literal">said, "Don''t"'</tt> as the equivalent of the previous
example. With <tt class="literal">DELIMIDENT</tt> set, you have to be more
careful.) Owner names are delimited identifiers and should be
embedded in double quotes for maximum safety.</p>



<p>The case-preserving and case-sensitive behavior of table and column
names depends on the environment and the quoting mechanisms used.</p>



<p>Support for using national character sets in names depends on the
version and the environment (locale).</p>






<h4 class="refsect2">Row ID </h4>



<p>Most tables have a virtual ROWID column which can be selected.
Fragmented tables do not have one unless it is specified in the
<tt class="literal">WITH ROWIDS</tt> clause when the table is created or
altered. In that case, it is a physical ROWID column that otherwise
appears as a virtual column (meaning <tt class="literal">SELECT *</tt> does
not select it).</p>



<p>As with any type except the <tt class="literal">BLOB</tt> types, a ROWID
can be converted to a string and used as such. Note that ROWIDs need
not be contiguous, nor start at either zero or one.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>The SERIAL and SERIAL8 datatypes are "auto incrementing"
keys. If you insert a zero into these columns, the next previously
unused key number is <em class="emphasis">unrollbackably</em> allocated to
that row. Note that NULL can't be used; you have to insert a
zero. If you insert a non-zero value into the column, the specified
value is used instead. Usually, there is a unique constraint on the
column to prevent duplicate entries.</p>



<p>To get the value just inserted, you can use:</p>



<blockquote><pre class="code">$sth-&gt;{ix_sqlerrd}[1]</pre></blockquote>



<p>Informix doesn't support sequence generators directly, but you
can create your own with stored procedures.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Informix does not support a way to automatically number returned
rows.</p>



<p>Some recent versions of Informix support a <tt class="literal">FIRST</tt>
row count limiting directive on SELECT statements:</p>



<blockquote><pre class="code">SELECT FIRST num_of_rows ...</pre></blockquote>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Positioned updates and deletes are supported using the <tt class="literal">WHERE
CURRENT OF</tt> syntax. For example:</p>



<blockquote><pre class="code">$dbh-&gt;do("UPDATE ... WHERE CURRENT OF $sth-&gt;{CursorName}");</pre></blockquote>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter binding is directly supported by Informix. Only the
standard <tt class="literal">?</tt> style of placeholder is supported.</p>



<p>The <tt class="literal">TYPE</tt> attribute to <tt class="literal">bind_
param()</tt> is not currently supported, but some support is
expected in a future release.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Some 
<a name="INDEX-1192" />stored procedures can be used as
functions in ordinary SQL:</p>



<blockquote><pre class="code">SELECT proc1(Col1) FROM SomeTable WHERE Col2 = proc2(Col3);</pre></blockquote>



<p>All stored procedures can be executed via the SQL <tt class="literal">EXECUTE
PROCEDURE</tt> statement. If the procedure returns no values, it
can just be executed. If the procedure does return values, even
single values via a <tt class="literal">RETURN</tt> statement, then it can
be treated like a <tt class="literal">SELECT</tt> statement. So after
calling <tt class="literal">execute()</tt> you can fetch results from the
statement handle as if a <tt class="literal">SELECT</tt> statement had been
executed. For example:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare("EXECUTE PROCEDURE CursoryProcedure(?,?)");
$sth-&gt;execute(1, 12);
$ref = $sth-&gt;<em class="replaceable">fetchall_arrayref()</em>;</pre></blockquote>




<h4 class="refsect1">Table Metadata </h4>



<p>The DBI
<tt class="literal">table_info()</tt>
<a name="INDEX-1193" />
method isn't currently supported. The private
<tt class="literal">_tables()</tt> method can be used to get a list of all
tables or a subset.</p>



<p>Details of the columns of a table can be fetched using the private
<tt class="literal">_columns()</tt> method.</p>



<p>The keys/indexes of a table can be fetched by querying the system
catalog.</p>



<p>Further information about these and other issues can be found via the
comp.databases.informix
newsgroup, and via the International Informix User Group (IIUG) at
<a href="../../../../../../www.iiug.org/">http://www.iiug.org</a>.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p>Refer to the <tt class="literal">DBD::Informix</tt> documentation for
details of driver-specific database and statement handle attributes.</p>



<p>Private <tt class="literal">_tables()</tt> and
<tt class="literal">_columns()</tt> methods give easy access to table and
column details.</p>




<h4 class="refsect1">Other Significant Database or Driver Features </h4>



<p>Temporary tables can be created during a database session that are
automatically dropped at the end of that session if they have not
already been dropped explicitly. It's a very handy feature.</p>



<p>The latest versions of Informix (IDS/UDO, IUS) support user-defined
routines and user-defined types, which can be implemented in the
server in C or (shortly) Java.</p>



<p>The SQL-92 "CASE WHEN" syntax is supported by some
versions of the Informix servers. That greatly simplifies some kinds
of queries.
<a name="INDEX-1194" /></p>



</div>

<a name="INDEX-1195" /><a name="INDEX-1196" /><a name="INDEX-1197" /><a name="INDEX-1198" /><a name="INDEX-1199" /><a name="INDEX-1200" /><a name="INDEX-1201" /><a name="INDEX-1202" /><a name="INDEX-1203" /><a name="INDEX-1204" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::Ingres </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>





<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::Ingres</tt>
<a name="INDEX-1195" /> <a name="INDEX-1196" /> version 0.16 and, where noted, the 0.20
release</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner and outer
LONG/LOB datatypes                     Yes, up to 2 GB
Statement handle attributes available  After prepare(  )
Placeholders                           Yes, "?" and ":1" styles (native)
Stored procedures                      Yes
Bind output values                     Yes
Table name letter case                 Insensitive, stored as uppercase
Field name letter case                 Insensitive, stored as uppercase
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       No
Server table ROW ID pseudocolumn       Yes, "tid"
Positioned update/delete               No
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Henrik Tougaard. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::Ingres</tt> module supports both Ingres 6.4
and OpenIngres (1.<em class="emphasis">x</em> &amp; II). For more
information about Ingres, refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.cai.com/products/ingres.htm">http://www.cai.com/products/ingres.htm</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p>Prepared statements do not work across transactions because
commit/rollback and close/invalidate are all prepared statements.
Work is underway to fix this deficiency.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The
<tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1197" />
Data Source Name, or DSN, can be one of the following:</p>



<blockquote><pre class="code">dbi:Ingres:dbname
dbi:Ingres:vnode::dbname
dbi:Ingres:dbname;options</pre></blockquote>



<p>Where <tt class="literal">options</tt> are the SQL option flags as defined
in the CA-OpenIngres System Reference Guide.</p>



<p>There are no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p><tt class="literal">DBD::Ingres</tt> supports an unlimited number of
concurrent database connections to one or more databases.</p>




<h4 class="refsect1">Datatypes</h4>






<h4 class="refsect2">Numeric data handling </h4>



<p>The 
<a name="INDEX-1198" />database
and driver supports one-byte, two-byte and four-byte
<tt class="literal">INTEGER</tt>s, four-byte and eight-byte
<tt class="literal">FLOATS</tt>, and a currency type. The database and the
driver (from version 0.20) supports the
<tt class="literal">DECIMAL</tt>-number type.</p>



<a name="appb-136-fm2xml" /><table border="1">




<tr>
<th>
<p>Type</p></th>
<th>
<p>Description</p></th>
<th>
<p>Range</p></th>
</tr>






<tr>
<td>
<p>INTEGER1</p></td>
<td>
<blockquote><pre class="code">1-byte integer</pre></blockquote></td>
<td>
<p>-128 to +127</p></td>
</tr>


<tr>
<td>
<p>SMALLINT</p></td>
<td>
<blockquote><pre class="code">2-byte integer</pre></blockquote></td>
<td>
<p>-32,678 to +32,767</p></td>
</tr>


<tr>
<td>
<p>INTEGER</p></td>
<td>
<blockquote><pre class="code">4-byte integer</pre></blockquote></td>
<td>
<p>-2,147,483,648 to +2,147,483,647</p></td>
</tr>


<tr>
<td>
<p>FLOAT4</p></td>
<td>
<blockquote><pre class="code">4-byte floating</pre></blockquote></td>
<td>
<p>-1.0e+38 to 1.0e+38 (7 digits)</p></td>
</tr>


<tr>
<td>
<p>FLOAT</p></td>
<td>
<blockquote><pre class="code">8-byte floating</pre></blockquote></td>
<td>
<p>-1.0e+38 to 1.0e+38 (16 digits)</p></td>
</tr>


<tr>
<td>
<p>MONEY</p></td>
<td>
<blockquote><pre class="code">8-byte money</pre></blockquote></td>
<td>
<p>$-999,999,999,999.99 to $999,999,999,999.99</p></td>
</tr>


<tr>
<td>
<p>DECIMAL</p></td>
<td>
<blockquote><pre class="code">fixed-point numeric</pre></blockquote></td>
<td>
<p>Depends on precision (max 31) and scale</p></td>
</tr>



</table>

<p><tt class="literal">DBD::Ingres</tt> always returns all numbers as Perl
numbers -- integers where possible, floating point otherwise. It
is therefore possible that some precision may be lost when fetching
<tt class="literal">DECIMAL</tt> types with a precision greater than Perl
numbers (usually 16). If that's an issue, then convert the
value to a string in the <tt class="literal">SELECT</tt> expression.</p>






<h4 class="refsect2">String data handling </h4>



<p>Ingres and <tt class="literal">DBD::Ingres</tt> supports the following
string datatypes:</p>



<blockquote><pre class="code">VARCHAR(size)
CHAR(size)
TEXT(size)
C(size)</pre></blockquote>



<p>All string types have a limit of 2000 bytes. The
<tt class="literal">CHAR</tt>, <tt class="literal">TEXT</tt>, and
<tt class="literal">C</tt> types are fixed length and blank padded.</p>



<p>All string types can handle national character sets. The
<tt class="literal">C</tt> type will accept only printing characters.
<tt class="literal">CHAR</tt> and <tt class="literal">VARCHAR</tt> accept all
character values including embedded <tt class="literal">nul</tt> characters
( <tt class="literal">"\0"</tt> ). Unicode is not formally supported yet.</p>



<p>Strings can be concatenated using the SQL <tt class="literal">+</tt>
operator.</p>






<h4 class="refsect2">Date data handling </h4>



<p>Ingres has just one date datatype: <tt class="literal">DATE</tt>. However,
it can contain either an absolute date and time or a time interval.
Dates and times are in second resolution between approximately
1-JAN-1581 and 31-DEC-2382. Intervals are stored to a one second
resolution.</p>



<p>Ingres supports a variety of date formats, depending on the setting
of the environment variable <tt class="literal">II_DATE_FORMAT</tt>. The
default output format is <tt class="literal">US:</tt>
<tt class="literal">DD-MMM-YYYY</tt> <tt class="literal">HH:MM:SS</tt>.</p>



<p>Many input formats are allowed. For the default format the following
are accepted: <tt class="literal">MM/DD/YYYY</tt>,
<tt class="literal">DD-MMM-YYYY</tt>, <tt class="literal">MM-DD-YYYY</tt>,
<tt class="literal">YYYY.MM.DD</tt>, <tt class="literal">YYYY_MM_DD</tt>,
<tt class="literal">MMDDYY</tt>, <tt class="literal">MM-DD</tt>, and
<tt class="literal">MM/DD</tt>.</p>



<p>If you specify a <tt class="literal">DATE</tt> value without a time
component, the default time is 00:00:00 (midnight). If you specify a
<tt class="literal">DATE</tt> value without a date, the default date is the
first day of the current month. If a date format that has a two-digit
year, such as the <tt class="literal">YY</tt> in
<tt class="literal">DD-MON-YY</tt> (a common default), then the date
returned is always in the current century.</p>



<p>The following date-related functions are supported:</p>



<blockquote><pre class="code">DATE(string)              - converts a string to a date
DATE_TRUNC(unit, date)    - date value truncated to the specified unit
DATE_PART(unit, date)     - integer containing the specified part
DATE_GMT(date)            - converts date to string "YYYY_MM_DD HH:MM:SS GMT"
INTERVAL(unit, interval)  - express interval as numeric count of units</pre></blockquote>



<p>The current date and time is returned by the
<tt class="literal">DATE('now')</tt> function. The current date is returned
by <tt class="literal">DATE('today')</tt>.</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970 GMT" value to the corresponding
database date/time:</p>



<blockquote><pre class="code">DATE('01.01.1970 00:00 GMT')+DATE(CHAR(seconds_since_epoch)+' seconds')</pre></blockquote>



<p>And to do the reverse:</p>



<blockquote><pre class="code">INT4(INTERVAL('seconds', DATE('now')-DATE('01.01.1970 00:00 GMT')))</pre></blockquote>



<p>A three-letter time zone name (from a limited set) can be appended to
a date. If no time zone name is given, then the current client time
zone is assumed. All datetimes are stored in the database as GMT and
are converted back to the local time of the client fetching the data.
All date comparisions in the server are done in GMT.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>Ingres supports these <tt class="literal">LONG</tt> types:</p>



<blockquote><pre class="code">LONG VARCHAR  - Character data of variable length up to 2 GB
LONG BYTE     - Raw binary data of variable length up to 2 GB</pre></blockquote>



<p>However, the <tt class="literal">DBD::Ingres</tt> driver does not yet
support these types.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::Ingres</tt> driver supports the
<tt class="literal">type_info( )</tt> method.</p>



<p>Ingres supports automatic conversions between datatypes wherever
it's reasonable.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p>Ingres 
<a name="INDEX-1199" />supports
transactions. The default transaction isolation level is
Serializable. OpenIngres II supports Repeatable Read, Read Commited,
and Serializable.</p>



<p>The reading of a record sets a read-lock preventing writers from
changing that record and, depending on lock granularity, possibly
other records. Other readers are not hindered in their reading.
Writing a record sets a lock that prevents other writers from
writing, and readers from reading.</p>



<p>The <tt class="literal">SET LOCKMODE</tt> statement allows you to change
the locking granularity. It can be set to:</p>



<blockquote><pre class="code">ROW    - lock only the affected rows (OpenIngres II only)
PAGE   - lock the page that contains the affected row
TABLE  - lock the entire table</pre></blockquote>



<p>With the statement <tt class="literal">SET LOCKMODE SESSION WHERE
READLOCK=NOLOCK</tt> it is possible, but definitely
<em class="emphasis">not</em> recommended, to set the isolation level to
Read Uncommited.</p>




<h4 class="refsect1">SQL Dialect</h4>




<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1200" />
operator is case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>OpenIngres supports outer joins in ANSI SQL-92 syntax. Ingres 6.4
does not support outer joins.</p>






<h4 class="refsect2">Table and column names </h4>



<p>The names of identifiers cannot exceed 32 characters. The first
character must be a letter or an underscore ( <tt class="literal">_</tt>),
but the rest can be any combination of letters, numerals, dollar
signs (<tt class="literal">$</tt>), pound signs (<tt class="literal">#</tt>), and
at signs ( <tt class="literal">@</tt>).</p>



<p>However, if an identifier is enclosed by double quotes ("), it can
contain any combination of legal characters, including spaces but
excluding quotation marks. This is not supported in Ingres 6.4.</p>



<p>Case significance is determined by the settings for the Ingres
installation as set by the administrator when Ingres is installed.</p>



<p>National character sets can be used in identifiers, if enclosed in
double quotes.</p>






<h4 class="refsect2">Row ID </h4>



<p>The Ingres "row ID" pseudocolumn is called
<tt class="literal">tid</tt>. It's an integer. It can be used without
special handling. For example:</p>



<blockquote><pre class="code">SELECT * FROM table WHERE tid=1029;</pre></blockquote>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>OpenIngres II supports "logical key" columns. They are
defined by using a special datatype: <tt class="literal">TABLE_KEY WITH SYSTEM
MAINTAINED</tt>. Ingres 6.4 required an extra-cost option to
support that feature.</p>



<p>A column can be defined as either <tt class="literal">TABLE_KEY</tt> or
<tt class="literal">OBJECT_KEY</tt>. Table_keys are unique in the table,
whereas object_keys are unique in the entire database.</p>



<p><tt class="literal">DBD::Ingres</tt> can't currently find the value
of the last automatic key inserted, though it may do so in the future
if enough people ask nicely, or someone contributes the code.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Positioned updates and deletes are supported in
<tt class="literal">DBD::Ingres</tt> version 0.20 using the <tt class="literal">WHERE
CURRENT OF</tt> syntax. For example:</p>



<blockquote><pre class="code">$dbh-&gt;do("UPDATE ... WHERE CURRENT OF $sth-&gt;{CursorName}");</pre></blockquote>



<p>The <tt class="literal">CursorName</tt> is automatically defined by
<tt class="literal">DBD::Ingres</tt> for each prepared statement.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter 
<a name="INDEX-1201" />binding is directly supported by
Ingres. Only the standard <tt class="literal">?</tt> placeholder style is
supported.</p>



<p>When using the <tt class="literal">bind_ param()</tt> method, the common
integer, float, and char types can be defined using the
<tt class="literal">TYPE</tt> attribute. Unsupported values of the
<tt class="literal">TYPE</tt> attribute generate a warning.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Calling a stored procedure is done by the <tt class="literal">execute
procedure</tt> statement. For example:</p>



<blockquote><pre class="code">$dbh-&gt;do("execute procedure my_proc(param1='value')");</pre></blockquote>



<p>It is not yet possible to get results.</p>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::Ingres</tt>

<a name="INDEX-1202" />version 0.20 supports the
<tt class="literal">table_info()</tt> method.</p>



<p>The <tt class="literal">IICOLUMNS</tt> catalog contains information about
all columns of a table.</p>



<p>The <tt class="literal">IIINDEXES</tt> catalog contains detailed
information about all indexes in the database, one row per index. The
<tt class="literal">IIINDEX_COLUMNS</tt> catalog contains information about
the columns that make up each index.</p>



<p>Primary keys are indicated in the <tt class="literal">key_sequence</tt>
field of the <tt class="literal">IICOLUMNS</tt> catalog.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::Ingres</tt>

<a name="INDEX-1203" />has no driver-specific database
handle attributes. However, it does support a number of statement
handle attributes. Each returns a reference to an array of values,
one for each column of the select results. These attributes are:</p>



<dl>
<dt><b><tt class="literal">ing_type</tt> </b></dt>
<dd><p>'<tt class="literal">i</tt>' for integer columns, '<tt class="literal">f</tt>'
for float, and '<tt class="literal">s</tt>' for strings</p></dd>



<dt><b><tt class="literal">ing_ingtype</tt> </b></dt>
<dd><p>The numeric Ingres type of the columns</p></dd>



<dt><b><tt class="literal">ing_length</tt> </b></dt>
<dd><p>The Ingres length of the columns (as used in the database)</p></dd>

</dl>



<p><tt class="literal">DBD::Ingres</tt> supports just one private method:</p>



<dl>
<dt><b><tt class="literal">get_dbevent()</tt> </b></dt>
<dd><p>This private method calls <tt class="literal">GET</tt>
<tt class="literal">DBEVENT</tt> and <tt class="literal">INQUIRE_INGRES</tt> to
fetch a pending database event. If called without an argument, a
blocking <tt class="literal">GET</tt> <tt class="literal">DBEVENT WITH WAIT</tt>
is called. A numeric argument results in a call to
<tt class="literal">GET</tt> <tt class="literal">DBEVENT WITH WAIT=
:seconds</tt>.
<a name="INDEX-1204" /></p></dd>

</dl>



</div>

<a name="INDEX-1205" /><a name="INDEX-1206" /><a name="INDEX-1207" /><a name="INDEX-1208" /><a name="INDEX-1209" /><a name="INDEX-1210" /><a name="INDEX-1211" /><a name="INDEX-1212" /><a name="INDEX-1213" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::InterBase </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>








<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::InterBase</tt>
<a name="INDEX-1205" /> <a name="INDEX-1206" /> version 0.021</p>



<p>This version of the <tt class="literal">DBD::InterBase</tt> driver is a
pure Perl wrapper module around the
<tt class="literal">IBPerl</tt>
<a name="INDEX-1207" /> module. The author is working on a
direct XS version, so be sure to read the latest documentation.</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner and outer
LONG/LOB datatypes                     Yes, up to 4 GB
Statement handle attributes available  After first row fetched
Placeholders                           Yes, "?" style (native)
Stored procedures                      Yes
Bind output values                     Yes
Table name letter case                 Insensitive, stored as uppercase
Field name letter case                 Insensitive, stored as uppercase
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       No
Server table ROW ID pseudocolumn       No
Positioned update/delete               No
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Edwin Pratomo. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list, or at
<em class="email">ed.pratomo@computer.org</em>.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p><tt class="literal">DBD::InterBase</tt> has been used to access InterBase
4.0 for Linux, and InterBase 5.5 for NT, and should also work with
any version of InterBase above version 3.3 supported by
<tt class="literal">IBPerl</tt>. <tt class="literal">DBD::InterBase</tt> also
inherits all limitations applied to <tt class="literal">IBPerl</tt> 0.7,
for instance, lack of metadata.</p>



<p>For further information about InterBase, refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.interbase.com/">http://www.interbase.com</a></p>

<p><a href="../../../../../../www.interbase.com/products/dsqlsyntax.html">http://www.interbase.com/products/dsqlsyntax.html</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p><tt class="literal">DBD::InterBase</tt> does not have access to statement
metadata until after the statement has been executed <em class="emphasis">and
the first row fetched</em>. Thus, attributes like
<tt class="literal">$sth-&gt;{NUM_OF_FIELDS}</tt> are not available until
after <tt class="literal">$sth-&gt;execute( )</tt> and a fetch method has
been called. Hopefully this will be fixed in a later version.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The
<tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1208" />
Data Source Name, or DSN, has the following format:</p>



<blockquote><pre class="code">dbi:InterBase:attrs</pre></blockquote>



<p>where <tt class="literal">attrs</tt> is a semicolon-separated list of
<em class="emphasis">key=value</em> pairs Valid attributes include:</p>



<dl>
<dt><b>database </b></dt>
<dd><p>Specifies the full path to the database within the server that should
be made the default database.</p></dd>



<dt><b>host (optional) </b></dt>
<dd><p>Specify the host name of the InterBase server to connect to. Default
to localhost.</p></dd>



<dt><b>role (optional) </b></dt>
<dd><p>Specify an SQL role name -- supported only in InterBase 5.0 and
later.</p></dd>



<dt><b>charset (optional) </b></dt>
<dd><p>Specify the client character set to use. Useful if the client's
default character set is different from the server. Using this will
enable automatic character conversion from one character set to the
other. Default to <tt class="literal">NONE</tt>.</p></dd>

</dl>



<p><tt class="literal">DBD::InterBase</tt> supports an unlimited number of
concurrent database connections to one or more databases.</p>




<h4 class="refsect1">Datatypes</h4>





<h4 class="refsect2">Numeric data handling </h4>



<p>InterBase 
<a name="INDEX-1209" />supports
<tt class="literal">INTEGER</tt>, <tt class="literal">SMALLINT</tt>,
<tt class="literal">FLOAT</tt>, <tt class="literal">DOUBLE</tt>
<tt class="literal">PRECISION</tt>, <tt class="literal">NUMERIC (p,s)</tt>, and
<tt class="literal">DECIMAL(p,s)</tt>.</p>



<p><tt class="literal">FLOAT</tt> and <tt class="literal">INTEGER</tt> are always
32-bit, and <tt class="literal">SMALLINT</tt> is 16-bit.
<tt class="literal">DOUBLE</tt> <tt class="literal">PRECISION</tt> is
platform-dependent but generally 64-bit. Precision for
<tt class="literal">NUMERIC</tt>/<tt class="literal">DECIMAL</tt> is from 1 to
15, and scale is from 1 to 15.</p>



<p><tt class="literal">DBD::InterBase</tt> always returns all numbers as
strings.</p>






<h4 class="refsect2">String data handling </h4>



<p>InterBase supports the following string datatypes:</p>



<blockquote><pre class="code">CHAR(size)      fixed length blank-padded
VARCHAR(size)   variable length with limit</pre></blockquote>



<p>Range of <tt class="literal">size</tt> is 1 to 32,767 bytes. The character
set for each field may also be specified. For example:</p>



<blockquote><pre class="code">CHAR(size) CHARACTER SET "ISO8859_1"
VARCHAR(size) CHARACTER SET "ISO8859_1"</pre></blockquote>



<p>InterBase also supports <tt class="literal">NCHAR(size)</tt> and
<tt class="literal">NCHAR(size)</tt> <tt class="literal">VARYING</tt> as aliases
for the <tt class="literal">CHARACTER SET "ISO8859_1"</tt> examples above.</p>






<h4 class="refsect2">Date data handling </h4>



<p>InterBase supports one flexible date datatype:
<tt class="literal">DATE</tt>, which includes either date, time, or date
and time information. Data that will be stored as
<tt class="literal">DATE</tt> datatype should be in format:
<tt class="literal">DD</tt> <tt class="literal">MON</tt> <tt class="literal">YYYY</tt>
<tt class="literal">HH:MM:SS</tt>, or <tt class="literal">DD-MON-YYYY</tt>
<tt class="literal">HH:MM:SS</tt>. <tt class="literal">DD</tt> and
<tt class="literal">MON</tt> parts must be supplied, other parts, if
omitted, will be set to current year/time.</p>



<p>The <tt class="literal">DD MON YYYY</tt> parts can have any value from
January 1, 100 AD to February 29, 32768 AD.
<tt class="literal">HH:MM:SS</tt> ranges from 00:00:00 to 23:59:59.</p>



<p>The year part should be written in four digits, if it is only in two
digits, then InterBase will infer the century number using a
<em class="emphasis">sliding window</em> algorithm: subtracting the
two-digit year number entered from the last two digits of the current
year, if the absolute difference is greater than 50, then the century
of the number entered is 20; otherwise, it is 19.</p>



<p>Fetched <tt class="literal">DATE</tt> values are formatted using a
<tt class="literal">strftime( )</tt> format string. This format string can
be specified as <tt class="literal">DateFormat</tt> attribute when invoking
<tt class="literal">prepare( )</tt> method. If this attribute is left
unspecified, then "<tt class="literal">%c</tt>" will be used as
the format string. For example:</p>



<blockquote><pre class="code">$stmt = "SELECT * FROM BDAY";
$opt = { 'DateFormat' =&gt; "%d %B %Y" };
$array_ref = $dbh-&gt;selectall_arrayref($stmt, $opt);</pre></blockquote>



<p>InterBase does not directly support SQL-92 <tt class="literal">DATE</tt>,
<tt class="literal">TIME</tt>, and <tt class="literal">TIMESTAMP</tt> datatypes.</p>



<p>Date literals used by InterBase are: <tt class="literal">NOW</tt>,
<tt class="literal">TODAY</tt>, <tt class="literal">YESTERDAY</tt>, and
<tt class="literal">TOMORROW</tt>. For example:</p>



<blockquote><pre class="code">CREATE TABLE SALES ( 
    ORDER_ID INTEGER NOT NULL,
    SHIP_DATE DATE DEFAULT "NOW" NOT NULL,
PRIMARY KEY(ORDER_ID));</pre></blockquote>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>InterBase supports a <tt class="literal">BLOB</tt> datatype.
<tt class="literal">DBD::InterBase</tt> can handle <tt class="literal">BLOB</tt>s
up to 4 GB, assuming you have that much memory in your system.</p>



<p>A BLOB column can be defined to hold either binary data or text data;
if text, then a character set can also be specified. BLOB data is
stored in <em class="emphasis">segments,</em> and the segment size (up to
64 KB) can also be specified for each BLOB column.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>InterBase supports automatic conversions between datatypes wherever
it is reasonable.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p>InterBase supports

<a name="INDEX-1210" />transactions.
Transaction isolation can be altered using the <tt class="literal">SET
TRANSACTION ISOLATION LEVEL x</tt> statement. Refer to the
InterBase DSQL manual for full details.</p>



<p>Rows returned by a <tt class="literal">SELECT</tt> statement can be locked
to prevent them being changed by another transaction, by appending
<tt class="literal">FOR UPDATE</tt> to the select statement. Optionally,
you can specify a column list in parentheses after the <tt class="literal">FOR
UPDATE</tt> clause.</p>



<p>There is no explicit <tt class="literal">LOCK TABLE</tt> statement.</p>




<h4 class="refsect1">SQL Dialect</h4>






<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1211" />
operator is case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>Outer joins and inner joins are supported and are expressed using the
ISO standard SQL syntax.</p>






<h4 class="refsect2">Table and column names </h4>



<p>The maximum size of table and column names can't exceed 31
characters in length. Only alphanumeric characters can be used; the
first character must be a letter.</p>



<p>InterBase converts all identifiers to uppercase.</p>






<h4 class="refsect2">Row ID </h4>



<p>There is no "Row ID" concept.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>A mechanism to create unique, sequential number that is automatically
inserted at SQL operation such as <tt class="literal">INSERT</tt>,
<tt class="literal">UPDATE</tt> is called <tt class="literal">GENERATOR</tt>. For
example:</p>



<blockquote><pre class="code">CREATE GENERATOR generator_name
SET GENERATOR generator_name TO integer_value</pre></blockquote>



<p>where <tt class="literal">integer_value</tt> is an integer value from
-2**31 to 2**31 - 1. The <tt class="literal">SET</tt>
<tt class="literal">GENERATOR</tt> command sets the starting value of a
newly created generator, or resets the value of an existing
generator.</p>



<p>To use the generator, InterBase's <tt class="literal">GEN_ID</tt>
function should be invoked. For example:</p>



<blockquote><pre class="code">INSERT INTO SALES (PO_NUMBER) VALUES (GEN_ID(generator_name, step))</pre></blockquote>



<p>There's no <tt class="literal">DROP</tt> <tt class="literal">GENERATOR</tt>
command; here is how to delete a <tt class="literal">GENERATOR</tt>:</p>



<blockquote><pre class="code">DELETE FROM RDB$GENERATORS WHERE RDB$GENERATOR_NAME = 'generator_name'</pre></blockquote>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>InterBase does not support positioned updates or deletes.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter 
<a name="INDEX-1212" />binding is supported directly by
InterBase. <tt class="literal">DBD::InterBase</tt> supports the
<tt class="literal">?</tt> placeholder style.</p>



<p>The TYPE attribute of the <tt class="literal">bind_ param()</tt> as well as
<tt class="literal">type_info()</tt> method are not yet supported.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>InterBase does support stored procedures, but neither
<tt class="literal">DBD::InterBase</tt> nor <tt class="literal">IBPerl</tt> has
support for them that yet.</p>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::InterBase</tt> hasn't yet supported the
<tt class="literal">table_info()</tt> method.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p>There are no significant <tt class="literal">DBD::InterBase</tt>
driver-specific database handle
attributes.
<a name="INDEX-1213" /></p>



</div>

<a name="INDEX-1214" /><a name="INDEX-1215" /><a name="INDEX-1216" /><a name="INDEX-1217" /><a name="INDEX-1218" /><a name="INDEX-1219" /><a name="INDEX-1220" /><a name="INDEX-1221" /><a name="INDEX-1222" /><a name="INDEX-1223" /><a name="INDEX-1224" /><a name="INDEX-1225" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::mysql and DBD::mSQL </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>








<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::mysql</tt>
<a name="INDEX-1214" /> <a name="INDEX-1215" /> and
<tt class="literal">DBD::mSQL</tt>
<a name="INDEX-1216" />
<a name="INDEX-1217" /> versions 1.20<em class="emphasis">xx</em> and
1.21_<em class="emphasis">xx</em></p>



<p>Version 1.20<em class="emphasis">xx</em> (even numbers) is the stable
line, which is maintained for bug and portability fixes only. Version
1.21_<em class="emphasis">xx</em> (odd numbers) is used for development of
the driver: all new features or interface modifications will be done
in this line until it finally becomes 1.22<em class="emphasis">xx</em>.</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           No
Locking                                Yes, explicit (MySQL only)
Table joins                            Yes, inner and outer (inner only for mSQL)
LONG/LOB datatypes                     Yes, up to 4 GB
Statement handle attributes available  After execute(  )
Placeholders                           Yes, "?" (emulated)
Stored procedures                      No
Bind output values                     No
Table name letter case                 Depends on filesystem, stored as defined
Field name letter case                 Insensitive/Sensitive (MySQL/mSQL), stored
                                       as defined
Quoting of otherwise invalid names     No
Case-insensitive "LIKE" operator       Varies, see description below
Server table ROW ID pseudocolumn       Yes, "_rowid" (mSQL only)
Positioned update/delete               No
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Jochen Wiedmann. He can be contacted via the
mailing list <em class="email">Msql-Mysql-modules@lists.mysql.com</em>.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>MySQL and mSQL are freely available, small, efficient database
servers. MySQL has a rich feature set while mSQL is quite minimalist.</p>



<p>The <tt class="literal">DBD::mysql</tt> driver 1.20<em class="emphasis">xx</em>
supports all MySQL versions since around 3.20. The
<tt class="literal">DBD::mysql</tt> driver 1.21_<em class="emphasis">xx</em>
supports MySQL 3.22 or later.</p>



<p>The <tt class="literal">DBD::mSQL</tt> drivers 1.20<em class="emphasis">xx</em>
and 1.21_<em class="emphasis">xx</em> support all mSQL versions up to and
including mSQL 2.0.<em class="emphasis">x</em>.</p>



<p>For further information about MySQL:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.mysql.com/">http://www.mysql.com/</a></p>

</blockquote>



<p>For further information about mSQL:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.blnet.com/msqlpc">http://www.blnet.com/msqlpc</a></p>

<p><a href="../../../../../../www.hughes.com.au/">http://www.hughes.com.au/</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p>Both <tt class="literal">DBD::mysql</tt> and <tt class="literal">DBD::mSQL</tt>
do not fully parse the statement until it's executed. Thus
attributes like <tt class="literal">$sth-&gt;{NUM_OF_FIELDS}</tt> are not
available until after <tt class="literal">$sth-&gt;execute()</tt> has been
called. This is valid behavior, but is important to note when porting
applications written originally for other drivers.</p>



<p>Also note that many statement attributes cease to be available after
fetching all the result rows or calling the <tt class="literal">finish(
)</tt> method.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The
<tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1218" />
Data Source Name, or DSN, can be one of the following:</p>



<blockquote><pre class="code">DBI:mysql:attrs
DBI:mSQL:attrs</pre></blockquote>



<p>where <tt class="literal">attrs</tt> is a semicolon-separated list of
<em class="emphasis">key=value</em> pairs. Valid attributes include:</p>



<dl>
<dt><b><tt class="literal">database=$database</tt> </b></dt>
<dd><p>The database name you want to connect to.</p></dd>



<dt><b><tt class="literal">host=$host</tt> </b></dt>
<dd><p>The name of the machine running the server for the database you want
to connect to, by default <em class="emphasis">localhost</em>.</p></dd>



<dt><b><tt class="literal">msql_configfile=$file</tt> </b></dt>
<dd><p>Load driver-specific settings from the given file, by default
<em class="emphasis">InstDir/msql.conf</em>.</p></dd>



<dt><b><tt class="literal">mysql_compression=1</tt> </b></dt>
<dd><p>For slow connections, you may wish to compress the traffic between
your client and the engine. If the MySQL engine supports it, this can
be enabled by using this attribute. Default is off.</p></dd>

</dl>



<p>There are no driver-specific attributes applicable to the
<tt class="literal">connect()</tt> method. The number of database and
statement handles is limited by memory only. There are no
restrictions on their concurrent use.</p>




<h4 class="refsect1">Datatypes</h4>







<h4 class="refsect2">Numeric data handling </h4>



<p>MySQL 
<a name="INDEX-1219" />has five
sizes of integer datatype, each of which can be signed (the default)
or unsigned (by adding the word <tt class="literal">UNSIGNED</tt> after the
type name).</p>



<a name="appb-191-fm2xml" /><table border="1">





<tr>
<th>
<p>Name</p></th>
<th>
<p>Bits</p></th>
<th>
<p>Signed Range</p></th>
<th>
<p>Unsigned Range</p></th>
</tr>






<tr>
<td>
<p>TINYINT</p></td>
<td>
<blockquote><pre class="code">8</pre></blockquote></td>
<td>
<p>-128..127</p></td>
<td>
<p>0..255</p></td>
</tr>


<tr>
<td>
<p>SMALLINT</p></td>
<td>
<blockquote><pre class="code">16</pre></blockquote></td>
<td>
<p>-32768..32767</p></td>
<td>
<p>0..65535</p></td>
</tr>


<tr>
<td>
<p>MEDIUMINT</p></td>
<td>
<blockquote><pre class="code">24</pre></blockquote></td>
<td>
<p>-8388608..8388607</p></td>
<td>
<p>0..16777215</p></td>
</tr>


<tr>
<td>
<p>INTEGER</p></td>
<td>
<blockquote><pre class="code">32</pre></blockquote></td>
<td>
<p>-2147483648..2147483647</p></td>
<td>
<p>0..4294967295</p></td>
</tr>


<tr>
<td>
<p>BIGINT</p></td>
<td>
<blockquote><pre class="code">64</pre></blockquote></td>
<td>
<p>-(2*63)..(2**63-1)</p></td>
<td>
<p>0..(2**64)</p></td>
</tr>



</table>

<p>The type <tt class="literal">INT</tt> can be used as an alias for
<tt class="literal">INTEGER</tt>. Other aliases include
<tt class="literal">INT1=TINYINT</tt>, <tt class="literal">INT2=SMALLINT</tt>,
<tt class="literal">INT3=MEDIUMINT</tt>, <tt class="literal">INT4=INT</tt>,
<tt class="literal">INT8=BIGINT</tt>, and
<tt class="literal">MIDDLEINT=MEDIUMINT</tt>.</p>



<p>Note that all arithmetic is done using signed
<tt class="literal">BIGINT</tt> or <tt class="literal">DOUBLE</tt> values, so you
shouldn't use unsigned big integers larger than the largest
signed big integer (except with bit functions). Note that
<tt class="literal">-</tt>, <tt class="literal">+</tt>, and <tt class="literal">*</tt>
will use <tt class="literal">BIGINT</tt> arithmetic when both arguments are
<tt class="literal">INTEGER</tt> values. This means that if you multiply
two big integers (or multiply the results from functions that return
integers), you may get unexpected results if the result is bigger
than 9223372036854775807.</p>



<p>MySQL has three main <em class="emphasis">non-integer</em> datatypes:
<tt class="literal">FLOAT</tt>, <tt class="literal">DOUBLE</tt>, and
<tt class="literal">DECIMAL</tt>. Aliases <tt class="literal">FLOAT4</tt> for
<tt class="literal">FLOAT</tt> and <tt class="literal">FLOAT8</tt> for
<tt class="literal">DOUBLE</tt> also work.</p>



<p>In what follows, the letter <tt class="literal">M</tt> is used for the
<em class="emphasis">maximum display size</em> or
<em class="emphasis">PRECISION</em> in ODBC and DBI terminology. The
letter <tt class="literal">D</tt> is used for the number of digits that may
follow the decimal point. (<tt class="literal">SCALE</tt> in ODBC and DBI
terminology).</p>



<p>Maximum display size (<tt class="literal">PRECISION</tt>) and number of
fraction digits (<tt class="literal">SCALE</tt>) are typically not
required. For example, if you use just
"<tt class="literal">DOUBLE</tt>," then default values will be
silently inserted.</p>



<dl>
<dt><b><tt class="literal">DOUBLE(M,D)</tt> </b></dt>
<dd><p>A normal-size (double-precision) floating-point number. Allowable
values are -1.7976931348623157e+308 to -2.2250738585072014e-308,
and 2.225073858 5072014e-308 to 1.7976931348623157e+308.</p>


<p><tt class="literal">REAL</tt> and <tt class="literal">DOUBLE</tt>
<tt class="literal">PRECISION</tt> can be used as aliases for
<tt class="literal">DOUBLE</tt>.</p></dd>



<dt><b><tt class="literal">FLOAT(M,D)</tt> </b></dt>
<dd><p>A small (single-precision) floating-point number. Allowable values
are -3.402823466e+38 to -1.175494351e-38,
and -1.175494351e-38 to 3.40282346 6e+38.</p></dd>



<dt><b><tt class="literal">FLOAT(M)</tt> </b></dt>
<dd><p>A floating-point number. Precision (<tt class="literal">M</tt>) can be 4 or
8. <tt class="literal">FLOAT(4)</tt> is a single-precision number and
<tt class="literal">FLOAT(8)</tt> is a double-precision number. These types
are like the <tt class="literal">FLOAT</tt> and <tt class="literal">DOUBLE</tt>
types described above. <tt class="literal">FLOAT(4)</tt> and
<tt class="literal">FLOAT(8)</tt> have the same ranges as the corresponding
<tt class="literal">FLOAT</tt> and <tt class="literal">DOUBLE</tt> types, but
their display size and number of decimals is undefined.</p></dd>



<dt><b><tt class="literal">DECIMAL(M,D)</tt> </b></dt>
<dd><p>The <tt class="literal">DECIMAL</tt> type is an unpacked floating-point
number type. <tt class="literal">NUMERIC</tt> is an alias for
<tt class="literal">DECIMAL</tt>. It behaves like a <tt class="literal">CHAR</tt>
column; "unpacked" means the number is stored as a
string, using one character for each digit of the value, and the
decimal point. If <tt class="literal">D</tt> is 0, values will have no
decimal point or fractional part. The maximum range of
<tt class="literal">DECIMAL</tt> values is the same as for
<tt class="literal">DOUBLE</tt>, but the actual range for a given
<tt class="literal">DECIMAL</tt> column may be constrained by the choice of
<tt class="literal">M</tt> and <tt class="literal">D</tt>.</p></dd>

</dl>



<p><tt class="literal">NUMERIC</tt> can be used as an alias for
<tt class="literal">DECIMAL</tt>.</p>



<p>The numeric datatypes supported by mSQL are much more restricted:</p>



<blockquote class="simplelist">

<p><tt class="literal">INTEGER</tt> corresponds to MySQL's <tt class="literal">INTEGER</tt> type.</p>

<p><tt class="literal">UINT</tt> corresponds to MySQL's <tt class="literal">INTEGER</tt> <tt class="literal">UNSIGNED</tt> type.</p>

<p><tt class="literal">REAL</tt> corresponds to MySQL's <tt class="literal">REAL</tt> type. </p>

</blockquote>



<p>The driver returns all datatypes, including numbers, as strings. It
thus puts no restriction on size of <tt class="literal">PRECISION</tt> or
<tt class="literal">SCALE</tt>.</p>






<h4 class="refsect2">String data handling </h4>



<p>The following string types are supported by MySQL, quoted from
<em class="emphasis">mysql.info</em> where <em class="emphasis">M</em> denotes
the maximum display size or <tt class="literal">PRECISION</tt>:</p>



<dl>
<dt><b><tt class="literal">CHAR(M)</tt></b></dt>
<dd><p>A fixed-length string that is always right-padded with spaces to the
specified length. The range of <tt class="literal">M</tt> is 1 to 255
characters.</p></dd>



<dt><b><tt class="literal">VARCHAR(M)</tt> </b></dt>
<dd><p>A variable-length string. Note that trailing spaces are removed by
the database when the value is stored (this differs from the ANSI SQL
specification). The range of <tt class="literal">M</tt> is 1 to 255
characters.</p></dd>



<dt><b><tt class="literal">ENUM('value1','value2',...)</tt> </b></dt>
<dd><p>An enumeration. A string object that can have only one value, chosen
from the specified list of values (or NULL). An ENUM can have a
maxiumum of 65535 distinct values.</p></dd>



<dt><b><tt class="literal">SET('value1','value2',...)</tt> </b></dt>
<dd><p>A set. A string object that can have zero or more values, each of
which must be chosen from the specified list of values. A SET can
have a maximum of 64 members.</p></dd>

</dl>



<p><tt class="literal">CHAR</tt> and <tt class="literal">VARCHAR</tt> types have a
limit of 255 bytes. Binary characters, including the NUL byte, are
supported by all string types. (Use the <tt class="literal">$dbh-&gt;quote(
)</tt> method for literal strings).</p>



<p>These aliases are also supported:</p>



<blockquote><pre class="code">BINARY(num)      CHAR(num) BINARY
CHAR VARYING     VARCHAR
LONG VARBINARY   BLOB
LONG VARCHAR     TEXT
VARBINARY(num)   VARCHAR(num) BINARY</pre></blockquote>



<p>With <tt class="literal">DBD::mysql</tt>, the <tt class="literal">ChopBlanks</tt>
attribute is always on. The MySQL engine itself removes spaces from
the string's right end. Another "feature" is that
<tt class="literal">CHAR</tt> and <tt class="literal">VARCHAR</tt> columns are
always case-insensitive in comparisons and sort operations, unless
you use the <tt class="literal">BINARY</tt> attribute, as in:</p>



<blockquote><pre class="code">CREATE TABLE foo (A VARCHAR(10) BINARY)</pre></blockquote>



<p>With versions of MySQL after 3.23, you can perform a case-insensitve
comparison of strings with the <tt class="literal">BINARY</tt> operator
modifier:</p>



<blockquote><pre class="code">SELECT * FROM table WHERE BINARY column = "A"</pre></blockquote>



<p>National language characters are handled in comparisons following the
coding system that was specified at compile-time, by default
ISO-8859-1. Non-ISO coding systems, and in particular UTF-16, are not
supported.</p>



<p>Strings can be concatenated using the <tt class="literal">CONCAT(s1, s2,
...)</tt> SQL function.</p>



<p>The mSQL engine (and hence the <tt class="literal">DBD::mSQL</tt> driver)
supports only the <tt class="literal">CHAR(M)</tt> string type, which
corresponds to the MySQL's <tt class="literal">VARCHAR(M)</tt> type,
and a <tt class="literal">TEXT(M)</tt> type, which is a cross between a
<tt class="literal">CHAR</tt> and a <tt class="literal">BLOB</tt>. All string
types have trailing spaces removed by mSQL. Also, mSQL has no way to
concatenate strings.</p>






<h4 class="refsect2">Date data handling </h4>



<p>The following date and time types are supported by MySQL, and quoted
from <em class="emphasis">mysql.info</em>:</p>



<dl>
<dt><b><tt class="literal">DATE</tt></b></dt>
<dd><p>A date. The supported range is <tt class="literal">0000-01-01</tt> to
<tt class="literal">9999-12-31</tt>. MySQL displays <tt class="literal">DATE</tt>
values in <tt class="literal">YYYY-MM-DD</tt> format, but allows you to
assign values to <tt class="literal">DATE</tt> columns using these formats:</p>



<blockquote><pre class="code">YYMMDD
YYYYMMDD
YY.MM.DD
YYYY.MM.DD</pre></blockquote>



<p>Where <tt class="literal">.</tt> may be any non-numerical separator, and a
two-digit year is assumed to be 20<tt class="literal">YY</tt> if
<tt class="literal">YY</tt> is less than 70.</p></dd>



<dt><b><tt class="literal">DATETIME</tt></b></dt>
<dd><p>A date and time combination. The supported range is
<tt class="literal">0000-01-01</tt> <tt class="literal">00:00:00</tt> to
<tt class="literal">9999-12-31</tt> <tt class="literal">23:59:59</tt>. MySQL
displays <tt class="literal">DATETIME</tt> values in
<tt class="literal">YYYY-MM-DD</tt> <tt class="literal">HH:MM:SS</tt> format, but
allows you to assign values to <tt class="literal">DATETIME</tt> columns
using the formats shown for <tt class="literal">DATE</tt> above but with
<tt class="literal">HH:MM:SS</tt> appended.</p></dd>



<dt><b><tt class="literal">TIMESTAMP(M)</tt> </b></dt>
<dd><p>A timestamp. The range is <tt class="literal">1970-01-01</tt> <tt class="literal">00:00:00</tt> to sometime in
the year 2032 (or 2106, depending on the OS specific type
<tt class="literal">time_t</tt>). MySQL displays
<tt class="literal">TIMESTAMP</tt> values in
<tt class="literal">YYYYMMDDHHMMSS</tt>, <tt class="literal">YYMMDDHHMMSS</tt>,
<tt class="literal">YYYYMMDD</tt>, or <tt class="literal">YYMMDD</tt> format,
depending on whether <tt class="literal">M</tt> is 14 (or missing), 12, 8,
or 6, but allows you to assign values to <tt class="literal">TIMESTAMP</tt>
columns using either strings or numbers. This output format behavior
disagrees with the manual, so check your version because the behavior
may change.</p>



<p>A <tt class="literal">TIMESTAMP</tt> column is useful for recording the
time of an <tt class="literal">INSERT</tt> or <tt class="literal">UPDATE</tt>
operation because it is automatically set to the time of the last
operation if you don't give it a value yourself. You can also
set it to the current time by giving it a <tt class="literal">NULL</tt>
value.</p></dd>



<dt><b><tt class="literal">TIME</tt></b></dt>
<dd><p>A time. The range is <tt class="literal">-838:59:59</tt> to
<tt class="literal">838:59:59</tt>. MySQL displays <tt class="literal">TIME</tt>
values in <tt class="literal">HH:MM:SS</tt> format. You can assign values
to <tt class="literal">TIME</tt> columns using these formats:
<tt class="literal">[[[DAYS] [H]H:]MM:]SS[.fraction]</tt> or
<tt class="literal">[[[[[H]H]H]H]MM]SS [.fraction]</tt>.</p></dd>



<dt><b><tt class="literal">YEAR</tt></b></dt>
<dd><p>A year. The allowable values are 1901-2155, and 0000 in the
four-digit year format, and 1970-2069 if you use the two-digit year
format (70-69). On input, two-digit years in the range 00-69 are
assumed to be 2000-2069. (<tt class="literal">YEAR</tt> is a new type for
MySQL 3.22.)</p></dd>

</dl>



<p>If you are using two-digit years as in <tt class="literal">YY-MM-DD</tt>
(dates) or <tt class="literal">YY</tt> (years), then they are converted
into 2000-2069 and 1970-1999, repectively. Thus, MySQL has no Y2K
problem, but a Y2070 problem!</p>



<p>In MySQL 3.23, this feature will be changed to 2000-2068 and
1969-1999, following the X/Open Unix standard.<a href="#FOOTNOTE-73">[73]</a></p><blockquote>


<a name="FOOTNOTE-73" /><p>[73]See
<a href="../../../../../../www.unix-systems.org/version2/whatsnew/year2000.html">http://www.unix-systems.org/version2/whatsnew/year2000.html</a>.</p>


</blockquote>



<p>The <tt class="literal">NOW()</tt> function, and its alias
<tt class="literal">SYSDATE</tt>, allow you to refer to the current date
and time in SQL.</p>



<p>The <tt class="literal">DATE_FORMAT(date,</tt> <tt class="literal">format)</tt>
function can be used to format date and time values using
<tt class="literal">printf</tt>-like format strings.</p>



<p>MySQL has a rich set of functions operating on dates and times,
including <tt class="literal">DAYOFWEEK(date)</tt> (1 = Sunday, ..., 7 =
Saturday), <tt class="literal">WEEKDAY(date)</tt> (0 = Monday, ..., 6 =
Sunday), <tt class="literal">DAYOFMONTH(date)</tt>,
<tt class="literal">DAYOFYEAR(date)</tt>, <tt class="literal">MONTH(date)</tt>,
<tt class="literal">DAYNAME (date)</tt>,
<tt class="literal">MONTHNAME(date)</tt>, <tt class="literal">WEEK(date)</tt>,
<tt class="literal">YEAR(date)</tt>, <tt class="literal">HOUR(time)</tt>,
<tt class="literal">MINUTE (time)</tt>, <tt class="literal">SECOND(time)</tt>,
<tt class="literal">DATE_ADD(date, interval)</tt>
(<tt class="literal">interval</tt> being something like "<tt class="literal">2
HOURS</tt>"), and <tt class="literal">DATE_SUB(date,
interval)</tt>.</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970 GMT" value to the corresponding
database date/time:</p>



<blockquote><pre class="code">FROM_UNIXTIME(seconds_since_epoch)</pre></blockquote>



<p>and the reverse:</p>



<blockquote><pre class="code">UNIX_TIMESTAMP(timestamp)</pre></blockquote>



<p>MySQL does no automatic time zone adjustments.</p>



<p>The mSQL database supports these date/time types:</p>



<blockquote><pre class="code">DATE  - corresponds to MySQL's DATE type
TIME  - corresponds to MySQL's TIME type</pre></blockquote>



<p>The only date format supported by mSQL is
<tt class="literal">DD-MMM-YYYY</tt>, where <tt class="literal">MMM</tt> is the
three-character English abbreviation for the month name. The only
time format supported by mSQL is <tt class="literal">HH:MM:SS</tt>.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>These are MySQL's BLOB types, quoted from <em class="emphasis">mysql.info
</em>:</p>



<blockquote><pre class="code">TINYBLOB   / TINYTEXT    maximum length of 255 (2**8 - 1)
BLOB       / TEXT        maximum length of 65535 (2**16 - 1)
MEDIUMBLOB / MEDIUMTEXT  maximum length of 16777215 (2**24 - 1)
LONGBLOB   / LONGTEXT    maximum length of 4294967295 (2**32 - 1)</pre></blockquote>



<p>Binary characters in all BLOB types are allowed. The
<tt class="literal">LongReadLen</tt> and <tt class="literal">LongTruncOk</tt>
types are not supported.</p>



<p>The maximum length of <tt class="literal">bind_ param( )</tt> parameter
values is only limited by the maximum length of an SQL statement. By
default that's 1MB but can be extended to just under 24 MB by
changing the <em class="emphasis">mysqld</em> variable
<tt class="literal">max_allowed_packet</tt>.</p>



<p>No <tt class="literal">TYPE</tt> or other attributes need to be given to
<tt class="literal">bind_ param( )</tt> when binding these types.</p>



<p>The only <tt class="literal">BLOB</tt> type supported by mSQL is
<tt class="literal">TEXT</tt>. This is a cross between a traditional
<tt class="literal">VARCHAR</tt> type and a BLOB. An
<em class="emphasis">average</em> width is specified, and data longer than
<em class="emphasis">average</em> is automatically stored in an overflow
area in the table.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The driver versions 1.21_<em class="emphasis">xx</em> and above do support
the <tt class="literal">type_info( )</tt> method.</p>



<p>MySQL supports automatic conversions between datatypes wherever
it's reasonable. mSQL, on the other hand, supports none.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p>Both 
<a name="INDEX-1220" />mSQL and
MySQL do <em class="emphasis">not</em> support transactions.</p>



<p>Since both mSQL and MySQL currently execute statements from multiple
clients one at a time (atomic), and don't support transactions,
there's no need for a default locking behavior to protect
transaction isolation.</p>



<p>With MySQL, locks can be explicitly obtained on tables. For example:</p>



<blockquote><pre class="code">LOCK TABLES table1 READ, table2 WRITE</pre></blockquote>



<p>Locks are released with any subsequent <tt class="literal">LOCK TABLES</tt>
statement, by dropping a connection or with an explicit command:</p>



<blockquote><pre class="code">UNLOCK TABLES</pre></blockquote>



<p>There are also user-defined locks that can be manipulated with the
<tt class="literal">GET_LOCK()</tt> and <tt class="literal">RELEASE_LOCK()</tt>
SQL functions. You can't automatically lock rows or tables
during <tt class="literal">SELECT</tt> statements; you have to do it
explicitly.</p>



<p>And, as you might guess, mSQL doesn't support any kind of
locking at the moment.</p>




<h4 class="refsect1">SQL Dialect</h4>





<h4 class="refsect2">Case sensitivity of LIKE operator </h4>


<a name="INDEX-1221" />


<p>With MySQL, case-sensitivity of <em class="emphasis">all</em> character
comparison operators, including <tt class="literal">LIKE</tt>, requires on
the presence of the <tt class="literal">BINARY</tt> attribute on at least
one of the fields -- either on the field type in the
<tt class="literal">CREATE</tt> <tt class="literal">TABLE</tt> statement or on
the field name in the comparison operator. However, you can always
force case-insensitivity using the <tt class="literal">TOLOWER</tt>
function.</p>



<p>mSQL has three <tt class="literal">LIKE</tt> operators:
<tt class="literal">LIKE</tt> is case-sensitive, <tt class="literal">CLIKE</tt>
is case-insensitive, and <tt class="literal">RLIKE</tt> uses Unix style
regular expressions.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>Joins are supported with the usual syntax:</p>



<blockquote><pre class="code">SELECT * FROM a,b WHERE a.field = b.field</pre></blockquote>



<p>or, alternatively:</p>



<blockquote><pre class="code">SELECT * FROM a JOIN b USING field</pre></blockquote>



<p>Outer joins are supported by MySQL, not mSQL, with:</p>



<blockquote><pre class="code">SELECT * FROM a LEFT OUTER JOIN b ON condition</pre></blockquote>



<p>Outer joins in MySQL are always left outer joins.</p>






<h4 class="refsect2">Table and column names </h4>



<p>MySQL table and column names may have at most 64 characters. mSQL
table and column names are limited to 35 characters.</p>



<p>With MySQL, you can put single quotes around table or column names
(you can use the standard double quotes if the database is started
with the <tt class="literal">--ansi-mode</tt> option). You need to do that
if the name contains special characters or matches a reserved word.
Quoting identifiers isn't supported by mSQL.</p>



<p>Table names are limited by the fact that tables are stored in files
and the table names are really file names. In particular, the
case-sensitivity of table names depends on the underlying file system
and some characters like <tt class="literal">.</tt> and
<tt class="literal">/</tt> are not allowed.</p>



<p>Column names are case-insensitive with MySQL and case-sensitive with
mSQL, but both engines store them without case conversions.</p>



<p>Names can include national character set characters (with the eighth
bit set) in MySQL but not mSQL.</p>






<h4 class="refsect2">Row ID </h4>



<p>MySQL doesn't have row IDs. mSQL has a pseudocolumn
<tt class="literal">_rowid</tt>.</p>



<p>The mSQL <tt class="literal">_rowid</tt> column value is numeric and, since
mSQL doesn't automatically convert strings to numbers, you must
take care not to quote the value when using it in later
<tt class="literal">SELECT</tt> statements.</p>



<p>Note that because transactions and locking aren't supported,
there's a greater risk that the row identified by a
<tt class="literal">_rowid</tt> value you just fetched may have been
deleted and possibly replaced by a different row by the time you use
the row ID value moments later.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>All MySQL integer table fields can have an
<tt class="literal">AUTO_INCREMENT</tt> attribute. That is, given a table:</p>



<blockquote><pre class="code">CREATE TABLE a (
  id INTEGER AUTO_INCREMENT NOT NULL PRIMARY KEY,
  ...)</pre></blockquote>



<p>and a statement:</p>



<blockquote><pre class="code">INSERT INTO a (id, ...) VALUES (NULL, ...)</pre></blockquote>



<p>a unique ID will be generated automatically (similarly, if the ID
field had not been mentioned in the insert statement at all). The
generated ID can later be retrieved with:</p>



<blockquote><pre class="code">$sth-&gt;{mysql_insertid}                (1.21_xx)
$sth-&gt;{insertid}                      (1.20_xx)</pre></blockquote>



<p>or, if you've used <tt class="literal">$dbh-&gt;do</tt> and not
<tt class="literal">prepare</tt>/<tt class="literal">execute</tt>, then use:</p>



<blockquote><pre class="code">$dbh-&gt;{mysql_insertid}                (1.21_xx)
$dbh-&gt;do("SELECT <em class="replaceable">LAST_INSERT_ID(  )</em>");  (1.20_xx)</pre></blockquote>



<p>MySQL does not support sequence generators directly, but they can be
emulated with a little care (refer to the MySQL manual for details).
For example:</p>



<blockquote><pre class="code">UPDATE seq SET id=last_insert_id(id+1)</pre></blockquote>



<p>The mSQL database supports sequence generators, but just one per
table. After executing:</p>



<blockquote><pre class="code">CREATE SEQUENCE on A</pre></blockquote>



<p>you can later do:</p>



<blockquote><pre class="code">SELECT _seq FROM A</pre></blockquote>



<p>to fetch the value. You can't refer directly to the sequence
from an insert statement; instead, you have to fetch the sequence
value and then execute an insert with that value.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither engine supports automatic row numbering of
<tt class="literal">SELECT</tt> statement results.</p>



<p>Both mSQL and MySQL support row count limiting with:</p>



<blockquote><pre class="code">SELECT * FROM A LIMIT 10</pre></blockquote>



<p>to retrieve the first 10 rows only, but only MySQL supports:</p>



<blockquote><pre class="code">SELECT * FROM A LIMIT 20, 10</pre></blockquote>



<p>to retrieve rows 20-29, with the count starting at 0.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Neither positioned updates nor deletes are supported by MySQL or
mSQL.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Neither 
<a name="INDEX-1222" />engine supports placeholders, but the
<tt class="literal">DBD::mysql</tt> and <tt class="literal">DBD::mSQL</tt>
drivers provide full emulation. Question marks are used as
placeholders, as in:</p>



<blockquote><pre class="code">$dbh-&gt;do("INSERT INTO table VALUES (?, ?)", undef, $id, $name);</pre></blockquote>



<p>The <tt class="literal">:1</tt> placeholder style is not supported.</p>



<p>In the above example, the driver attempts to guess the datatype of
the inserted values by looking at Perl's own internal string
versus number datatype hints. This is fine with MySQL, because MySQL
can deal with expressions like:</p>



<blockquote><pre class="code">INSERT INTO table (id_number) VALUES ('2')</pre></blockquote>



<p>where <tt class="literal">id_number</tt> is a numeric column. But this
doesn't apply to mSQL, which would treat that as an error. So
you sometimes need to force a datatype, either by using:</p>



<blockquote><pre class="code">$dbh-&gt;do("INSERT INTO table VALUES (?, ?)", undef, int($id), "$name");</pre></blockquote>



<p>or by using the <tt class="literal">TYPE</tt> attribute of the
<tt class="literal">bind_ param()</tt> method:</p>



<blockquote><pre class="code">use DBI qw(:sql_types);
$sth = $dbh-&gt;prepare("INSERT INTO table VALUES (?, ?)");
$sth-&gt;bind_param(1, $id,   SQL_INTEGER);
$sth-&gt;bind_param(2, $name, SQL_VARCHAR);
$sth-&gt;execute();</pre></blockquote>



<p>Unsupported values of the <tt class="literal">TYPE</tt> attribute do not
currently generate a warning.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Neither mSQL nor MySQL have a concept of stored procedures, although
there are plans to add some stored procedure features to MySQL.</p>




<h4 class="refsect1">Table Metadata </h4>



<p>The 1.21_<em class="emphasis">xx</em>

<a name="INDEX-1223" />version of the drivers was the first
to support the <tt class="literal">table_info()</tt> method.</p>



<p>To obtain information on a generic table, you can use the query:</p>



<blockquote><pre class="code">LISTFIELDS $table</pre></blockquote>



<p>This will return a statement handle without result rows. The
<tt class="literal">TYPE</tt>, <tt class="literal">NAME</tt>, ... attributes are
describing the table.</p>



<p>With MySQL you can use:</p>


<blockquote><pre class="code">SHOW INDEX FROM $table</pre></blockquote>



<p>to retrieve information on a table's indexes, in particular a
primary key. The information will be returned in rows. The
<tt class="literal">DBD::mSQL</tt> driver does support a similar thing
using:</p>



<blockquote><pre class="code">LISTINDEX $table $index</pre></blockquote>



<p>with <tt class="literal">$index</tt> being the name of a given index.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p>The 
<a name="INDEX-1224" />following driver-specific database
handle attributes are supported:</p>



<dl>
<dt><b><tt class="literal">mysql_info</tt> </b></dt>
<dt><b><tt class="literal">mysql_thread_id</tt> </b></dt>
<dt><b><tt class="literal">mysql_insertid</tt> </b></dt>
<dd><p>These attributes correspond to the C calls
<tt class="literal">mysql_info()</tt>,
<tt class="literal">mysql_thread_id()</tt>, and
<tt class="literal">mysql_insertid()</tt>, respectively.</p></dd>

</dl>



<p>The following driver-specific statement handle attributes are
supported:</p>



<dl>
<dt><b><tt class="literal">mysql_use_result</tt> </b></dt>
<dt><b><tt class="literal">mysql_store_result</tt> </b></dt>
<dd><p>With <tt class="literal">DBD::mysql</tt>, there are two different ways the
driver fetches results from the server. With
<tt class="literal">mysql_store_result</tt> enabled, it fetches all rows at
once, creating a result table in memory and returns it to the caller
(a 100% row cache).</p>



<p>With <tt class="literal">mysql_use_result</tt>, it returns rows to the
application as they are fetched. This is less memory-consuming on the
client side, but should not be used in situations where multiple
people can query the database, because it can block other
applications. (Don't confuse that with locking!)</p></dd>



<dt><b><tt class="literal">mysql_insertid</tt> </b></dt>
<dd><p>A previously generated <tt class="literal">auto_increment</tt> column
value, if any.</p></dd>



<dt><b><tt class="literal">mysql_is_blob</tt> </b></dt>
<dt><b><tt class="literal">mysql_is_key</tt> </b></dt>
<dt><b><tt class="literal">msql_is_num</tt> </b></dt>
<dt><b><tt class="literal">mysql_is_num</tt> </b></dt>
<dt><b><tt class="literal">msql_is_   pri_key</tt> </b></dt>
<dt><b><tt class="literal">mysql_is_   pri_key</tt> </b></dt>
<dd><p>These attributes return an array ref with the given flags set for any
column of the result set. Note you may use these with the
<tt class="literal">LISTFIELDS</tt> query to obtain information about the
columns of a table.</p></dd>



<dt><b><tt class="literal">mysql_max_length</tt> </b></dt>
<dd><p>Unlike the <tt class="literal">PRECISION</tt> attribute, this returns the
true actual maximum length of the particular data in the current
result set. This can be helpful, for example, when displaying ASCII
tables.</p>



<p>This attribute doesn't work with
<tt class="literal">mysql_use_result</tt> enabled, since it needs to look
at all the data.</p></dd>



<dt><b><tt class="literal">msql_table</tt> </b></dt>
<dt><b><tt class="literal">mysql_table</tt> </b></dt>
<dd><p>Similar to <tt class="literal">NAME</tt>, but the table names and not the
column names are returned.</p></dd>



<dt><b><tt class="literal">msql_type</tt> </b></dt>
<dt><b><tt class="literal">mysql_type</tt> </b></dt>
<dd><p>Similar to <tt class="literal">TYPE</tt>, but they return the respective
engine's native type.</p></dd>



<dt><b><tt class="literal">msql_type_name</tt> </b></dt>
<dt><b><tt class="literal">mysql_type_name</tt> </b></dt>
<dd><p>Similar to <tt class="literal">msql_type</tt> and
<tt class="literal">mysql_type</tt>, but column names are returned, that
you can use in a <tt class="literal">CREATE TABLE</tt> statement.</p></dd>

</dl>



<p>A single private method called <tt class="literal">admin()</tt> is
supported. It provides a range of administration functions:</p>



<blockquote><pre class="code">$rc = $drh-&gt;func('createdb', $db, $host, $user, $password, 'admin');
$rc = $drh-&gt;func('dropdb',   $db, $host, $user, $password, 'admin');
$rc = $drh-&gt;func('shutdown',      $host, $user, $password, 'admin');
$rc = $drh-&gt;func('reload',        $host, $user, $password, 'admin');

$rc = $dbh-&gt;func('createdb', $database, 'admin');
$rc = $dbh-&gt;func('dropdb',   $database, 'admin');
$rc = $dbh-&gt;func('shutdown',            'admin');
$rc = $dbh-&gt;func('reload',              'admin');</pre></blockquote>



<p>These correspond to the respective commands of
<tt class="literal">mysqladmin</tt> and
<tt class="literal">msqladmin</tt>.
<a name="INDEX-1225" /></p>



</div>

<a name="INDEX-1226" /><a name="INDEX-1227" /><a name="INDEX-1228" /><a name="INDEX-1229" /><a name="INDEX-1230" /><a name="INDEX-1231" /><a name="INDEX-1232" /><a name="INDEX-1233" /><a name="INDEX-1234" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::ODBC </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>







<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::ODBC</tt>
<a name="INDEX-1226" /> <a name="INDEX-1227" /> version 0.20</p>






<h4 class="refsect2">Feature summary </h4>



<p>Because <tt class="literal">DBD::ODBC</tt> acts as an interface to other
database drivers, much of its behavior is governed by those drivers.</p>



<blockquote><pre class="code">Transactions                           Dependent on connected data source
Locking                                Dependent on connected data source
Table joins                            Dependent on connected data source
LONG/LOB datatypes                     Dependent on connected data source
Statement handle attributes available  After prepare(  )
Placeholders                           Yes
Stored procedures                      Yes
Bind output values                     No
Table name letter case                 Dependent on connected data source
Field name letter case                 Dependent on connected data source
Quoting of otherwise invalid names     Dependent on connected data source
Case-insensitive "LIKE" operator       Dependent on connected data source
Server table ROW ID pseudocolumn       Dependent on connected data source
Positioned update/delete               Yes
Concurrent use of multiple handles     Dependent on connected data source</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver authors are Jeff Urlwin and Tim Bunce. The original work
was based upon an early version of Thomas Wenrich's
<tt class="literal">DBD::Solid</tt>. The authors can be contacted via the
<em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::ODBC</tt> module supports ODBC Version
2.<em class="emphasis">x</em> and 3.<em class="emphasis">x</em> on Unix and
Win32. For all platforms, both an <a name="INDEX-1228" />ODBC driver manager
<em class="emphasis">and</em> an <a name="INDEX-1229" />ODBC driver are required in addition to
the <tt class="literal">DBD::ODBC</tt> module.</p>



<p>For Win32, the driver manager is included with the operating system.
For Unix and variants, the iODBC driver manager source is included in
the <tt class="literal">iodbcsrc</tt> directory. While iODBC acts as the
driver <em class="emphasis">manager</em>, you still have to find an actual
driver for your platform and database.</p>



<p>Driver providers include:</p>



<blockquote class="simplelist">

<p>Intersolv: <a href="../../../../../../www.intersolv.com/">http://www.intersolv.com</a></p>

<p>OpenLink: <a href="../../../../../../www.openlinksw.com/">http://www.openlinksw.com</a></p>

</blockquote>



<p>There are other vendors; this is not an exhaustive list. Other
related ODBC links include:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.genix.net/unixODBC">http://www.genix.net/unixODBC</a></p>

<p><a href="../../../../../../www.openlinksw.com/iodbc">http://www.openlinksw.com/iodbc</a></p>

<p><a href="../../../../../../www.microsoft.com/data/odbc">http://www.microsoft.com/data/odbc</a></p>

</blockquote>



<p>To subscribe to the <em class="emphasis">freeodbc</em> development mailing
list, send a message to
<em class="email">freeodbc-request@as220.org</em> with just the word
<tt class="literal">subscribe</tt> in the body of the message.</p>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p><tt class="literal">DBD::ODBC</tt> does not currently support
"out" parameter binding. That should be fixed in a later
release.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The <tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1230" />
Data Source Name, or DSN, has the following forms:</p>



<blockquote><pre class="code">dbi:ODBC:odbc_dsn
dbi:ODBC:driver=Microsoft Access Driver (*.mdb);dbq=\\server\share\access.mdb</pre></blockquote>



<p>In the first example above, <tt class="literal">odbc_dsn</tt> is an ODBC
Data Source Name (DSN). An ODBC DSN is simply a name you use to refer
to a set of driver-specific connection parameters defined elsewhere.
Connection parameters typically include the name of the ODBC driver
to use, the database name, and any required connection details.</p>



<p>Under Win32, the best method of creating an ODBC DSN is by using the
ODBC32 applet on the Windows Control Panel. Under Unix variants, you
typically need to edit a text file called
<em class="filename">.odbc.ini</em> in your home directory. Refer to your
driver manager documentation for more details.</p>



<p>The second connection example above uses the driver-specific
connection string. By specifying all the required information, you
can bypass the need to use a previously defined DSN. In our example
we're using the "<tt class="literal">Microsoft Access Driver
(*.mdb)</tt>" driver to reach the data in the
<em class="filename">\\server\share\access.mdb</em> Access database file.</p>



<p>There are currently no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p>Most ODBC drivers and databases let you make multiple concurrent
database connections to the same database. A few do not.</p>



<p>Some ODBC drivers and databases, most notably Sybase and SQL Server,
do not let you prepare and execute a new statement handle while still
fetching data from another statement handle associated with the same
database handle.</p>




<h4 class="refsect1">Datatypes</h4>






<h4 class="refsect2">Numeric data handling </h4>



<p>The 
<a name="INDEX-1231" />numeric
data handling for ODBC is dependent upon a variety of factors. One of
those critical factors is the end database. For example, Oracle
supports different numeric types than Sybase which, in turn, supports
different numeric types than a CSV file. You will need to read your
database documentation for more information.</p>



<p>Unfortunately, the second critical set of factors are the ODBC driver
manufacturer and version of the driver. For example, I have seen a
great variety in the handling of numeric values between versions of
Oracle's ODBC drivers. What works with one version, sadly, may
not work with even a later version of Oracle's drivers. You
will need to read your ODBC driver documentation for more
information.</p>



<p>The DBI <tt class="literal">type_info( )</tt> and <tt class="literal">type_info_all(
)</tt> methods provide information about the datatypes supported
by the database and driver being used.</p>






<h4 class="refsect2">String data handling </h4>



<p>As with numeric handling, string data handling is dependent upon the
database and driver. Please see "<em class="emphasis">Numeric Data
Handling"</em> above for more information.</p>



<p>Strings can be concatenated using the
<tt class="literal">CONCAT(s1,s2)</tt> SQL function.</p>






<h4 class="refsect2">Date data handling </h4>



<p>As with numeric handling, date data handling is dependent upon the
database and driver. Please see "<em class="emphasis">Numeric Data
Handling"</em> above for more information.</p>



<p>You can use ODBC escape sequences to define a date in a
database-independent way. For example, to insert a date of Jan 21,
1998 into a table, you could use:</p>



<blockquote><pre class="code">INSERT INTO table_name (date_field) VALUES ({d '1998-01-21'});</pre></blockquote>



<p>You can use placeholders within escape sequences instead of literal
values. For example:</p>



<blockquote><pre class="code">INSERT INTO table_name (date_field) VALUES ({d ?});</pre></blockquote>



<p>Similar escape sequences are defined for other date/time types.
Here's the full set:</p>



<blockquote><pre class="code">{d 'YYYY-MM-DD'}                    -- date
{t 'HH:MM:SS'}                      -- time
{ts 'YYYY-MM-DD HH:MM:SS'}          -- timestamp
{ts 'YYYY-MM-DD HH:MM:SS.FFFFFFF'}  -- timestamp</pre></blockquote>



<p>If you specify a DATE value without a time component, the default
time is 00:00:00 (midnight). There is also an interval escape clause
which is constructed like this:</p>



<blockquote><pre class="code">{interval [+|-] 'value' [interval_qualifier]}</pre></blockquote>



<p>For example:</p>



<blockquote><pre class="code">{interval '200-11' YEAR(3) TO MONTH}</pre></blockquote>



<p>Please see an ODBC reference guide for more information.</p>



<p>The current date and time on the server can be found by using an ODBC
scalar function escape sequence to call the appropriate function. For
example:</p>



<blockquote><pre class="code">INSERT INTO table_name (date_field) VALUES ({fn CURDATE});</pre></blockquote>



<p>The <tt class="literal">{fn ...}</tt> escape sequence isn't required
if the entire SQL statement conforms to the level of SQL-92 grammar
supported by your ODBC driver.</p>



<p>Other related functions include <tt class="literal">CURTIME( )</tt>,
<tt class="literal">NOW( )</tt>, <tt class="literal">CURRENT_DATE( )</tt>,
<tt class="literal">CURRENT_TIME( )</tt>, and <tt class="literal">CURRENT_TIMESTAMP(
)</tt>. The last three require an ODBC v3 driver.</p>



<p>Other date/time related functions include: <tt class="literal">DAYNAME(
)</tt>, <tt class="literal">DAYOFMONTH( )</tt>, <tt class="literal">DAYOFWEEK(
)</tt>, <tt class="literal">DAYOFYEAR( )</tt>, <tt class="literal">EXTRACT(
)</tt>, <tt class="literal">HOUR( )</tt>, <tt class="literal">MINUTE(
)</tt>, <tt class="literal">MONTH( )</tt>, <tt class="literal">MONTHNAME(
)</tt>, <tt class="literal">SECOND( )</tt>, <tt class="literal">WEEK(
)</tt>, and <tt class="literal">YEAR( )</tt>.</p>



<p>Basic date/time arithmetic can be performed using the
<tt class="literal">TIMESTAMPADD( )</tt> and <tt class="literal">TIMESTAMPDIFF(
)</tt> functions.</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970" value to the corresponding
database date/time:</p>



<blockquote><pre class="code">TIMESTAMPADD(SQL_TSI_SECOND, seconds_since_epoch, {d '1970-01-01'})</pre></blockquote>



<p>to do the reverse you can use:</p>



<blockquote><pre class="code">TIMESTAMPDIFF(SQL_TSI_SECOND, {d '1970-01-01'}, date_field)</pre></blockquote>



<p>ODBC itself does not have any support for time zones, though the
database to which you are connected may.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>Support for <tt class="literal">LONG</tt>/<tt class="literal">BLOB</tt> datatypes
and their maximum lengths are very dependent on the database to which
you are connected.</p>



<p>The <tt class="literal">LongReadLen</tt> and <tt class="literal">LongTruncOk</tt>
attributes work as defined. However, the driver implementations do
affect this. Some drivers do not properly indicate that they have
truncated the data, or they have more data available than was
actually returned. The <tt class="literal">DBD::ODBC</tt> tests attempt to
determine correct support for this.</p>



<p>No special handling is required for
<tt class="literal">LONG</tt>/<tt class="literal">BLOB</tt> datatypes. They can
be treated just like any other field when fetching or inserting, etc.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::ODBC</tt> driver supports the
<tt class="literal">type_info( )</tt> method.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p><tt class="literal">DBD::ODBC</tt> supports transactions if the databases
you are connected to supports them.</p>



<p>Supported isolation levels, the default isolation level, and locking
behavior are all dependent on the database to which you are
connected.</p>




<h4 class="refsect1">SQL Dialect </h4>



<p>Because <tt class="literal">DBD::ODBC</tt>
<a name="INDEX-1232" /> acts
as an interface to other database drivers, the following issues are
governed by those drivers and the databases they connect to:</p>



<ul><li><p>Case-sensitivity of <tt class="literal">LIKE</tt> operator</p></li><li><p>Table and column names</p></li><li><p>Row ID</p></li><li><p>Automatic key or sequence generation</p></li><li><p>Automatic row numbering and row count limiting</p></li></ul>
<p>For more information, refer to the documentation for the drivers and
the database being used.</p>





<h4 class="refsect2">Table join syntax </h4>



<p>Table join syntax is partly dependent on the database to which you
are connected and the ODBC driver you are using. The ODBC standard
SQL defines the standard syntax for inner joins and an escape
sequence to use for outer joins:</p>



<blockquote><pre class="code">{oj outer_join}</pre></blockquote>



<p>where <tt class="literal">outer_  join</tt> is defined as:</p>



<blockquote><pre class="code">table_name [LEFT | RIGHT | FULL]
  OUTER JOIN [ table_name | outer_join] ON condition</pre></blockquote>



<p>An outer join request must appear after the <tt class="literal">FROM</tt>
clause of a <tt class="literal">SELECT</tt> but before a
<tt class="literal">WHERE</tt> clause, if one exists.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>This is dependent on the database to which you are connected.
Positioned updates and deletes are supported in ODBC SQL using the
<tt class="literal">WHERE</tt> <tt class="literal">CURRENT</tt>
<tt class="literal">OF</tt> syntax.</p>



<p>For example:</p>



<blockquote><pre class="code">$dbh-&gt;do("UPDATE ... WHERE CURRENT OF $sth-&gt;{CursorName}");</pre></blockquote>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter binding is supported by <tt class="literal">DBD::ODBC</tt> if the
underlying ODBC driver driver supports it. Only the standard
<tt class="literal">?</tt> style of placeholders is supported.</p>



<p>The <tt class="literal">TYPE</tt> attribute to the <tt class="literal">bind_
param()</tt> method is supported.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Stored procedures can be called using the following ODBC escape
sequence:</p>



<blockquote><pre class="code">{call procedure1_name}
{call procedure2_name(?, ?)}
{?= call procedure3_name(?, ?)}</pre></blockquote>



<p>The last form would be used to return values from the procedure, but
<tt class="literal">DBD::ODBC</tt> currently does not support output
parameters.</p>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::ODBC</tt>

<a name="INDEX-1233" />supports the
<tt class="literal">table_info()</tt> method.</p>



<p><tt class="literal">DBD::ODBC</tt> also supports many of the ODBC
<em class="emphasis">metadata</em> functions that can be used to discover
information about the tables within a database. These can be accessed
as driver-specific private methods:</p>



<blockquote><pre class="code">SQLGetTypeInfo   --  $dbh-&gt;func(xxx,        'GetTypeInfo')
SQLDescribeCol   --  $sth-&gt;func(colno,      'DescribeCol')
SQLColAttributes --  $sth-&gt;func(xxx, colno, 'ColAttributes')
SQLGetFunctions  --  $dbh-&gt;func(xxx,        'GetFunctions')
SQLColumns       --  $dbh-&gt;func(catalog, schema, table, column, 'columns')
SQLStatistics    --  $dbh-&gt;func(catalog, schema, table, unique, 'Statistics')
SQLPrimaryKeys   --  $dbh-&gt;func(catalog, schema, table, 'PrimaryKeys')
SQLForeignKeys   --  $dbh-&gt;func(pkc, pks, pkt, fkc, fks, fkt, 'ForeignKeys')</pre></blockquote>



<p>The DBI will provide standard methods for these soon, possibly by the
time you read this book.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::ODBC</tt> has no driver-specific handle
attributes.</p>



<p>In addition to the private methods described in
"<em class="emphasis">Table Metadata"</em> above, the
<tt class="literal">GetInfo()</tt> private method can be used to discover
many details about the driver and database you are
using.
<a name="INDEX-1234" /></p>



</div>

<a name="INDEX-1235" /><a name="INDEX-1236" /><a name="INDEX-1237" /><a name="INDEX-1238" /><a name="INDEX-1239" /><a name="INDEX-1240" /><a name="INDEX-1241" /><a name="INDEX-1242" /><a name="INDEX-1243" /><a name="INDEX-1244" /><a name="INDEX-1245" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::Oracle </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>





<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::Oracle</tt>
<a name="INDEX-1235" /> <a name="INDEX-1236" /> version 1.03</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner and outer
LONG/LOB datatypes                     Yes, up to 4 GB
Statement handle attributes available  After prepare(  )
Placeholders                           Yes, "?" and ":1" styles (native)
Stored procedures                      Yes
Bind output values                     Yes
Table name letter case                 Insensitive, stored as uppercase
Field name letter case                 Insensitive, stored as uppercase
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       No
Server table ROW ID pseudocolumn       Yes, "ROWID"
Positioned update/delete               No
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Tim Bunce. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::Oracle</tt> module supports both Oracle 7 and
Oracle 8.</p>



<p>Building for Oracle 8 defaults to use the new Oracle 8 OCI interface,
which enables use of some Oracle 8 features including LOBs and
"<tt class="literal">INSERT</tt> <tt class="literal">...</tt>
<tt class="literal">RETURNING</tt> <tt class="literal">...</tt>".</p>



<p>An emulation module for the old Perl4 oraperl software is supplied
with <tt class="literal">DBD::Oracle</tt>, making it very easy to upgrade
oraperl scripts to Perl5.</p>



<p>For further information about Oracle, refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.oracle.com/">http://www.oracle.com</a></p>

<p><a href="../../../../../../technet.oracle.com/">http://technet.oracle.com</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p><tt class="literal">DBD::Oracle</tt> has no known significant differences
in behavior from the current DBI specification.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The
<tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1237" />
Data Source Name, or DSN, can be one of the following:</p>



<blockquote><pre class="code">dbi:Oracle:tnsname
dbi:Oracle:sidname
dbi:Oracle:host=hostname;sid=sid</pre></blockquote>



<p>Some other less common formats also work if supported by the Oracle
client version being used.</p>



<p>There are no significant driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p><tt class="literal">DBD::Oracle</tt> supports an unlimited number of
concurrent database connections to one or more databases.</p>




<h4 class="refsect1">Datatypes</h4>





<h4 class="refsect2">Numeric data handling </h4>



<p>Oracle 
<a name="INDEX-1238" />has only
one flexible underlying numeric type, NUMBER. But Oracle does support
several ANSI standard and IBM datatype names as aliases, including:</p>



<blockquote><pre class="code">INTEGER      = NUMBER(38)
INT          = NUMBER(38)
SMALLINT     = NUMBER(38)
DECIMAL(p,s) = NUMBER(p,s)
NUMERIC(p,s) = NUMBER(p,s)
FLOAT        = NUMBER
FLOAT(b)     = NUMBER(p)   where b is the binary precision, 1 to 126
REAL         = NUMBER(18)</pre></blockquote>



<p>The NUMBER datatype stores positive and negative fixed and
floating-point numbers with magnitudes between 1.0 &times; 10-130 and
9.9...9 &times; 10125 (38 nines followed by 88 zeroes), with 38
digits of precision.</p>



<p>You can specify a fixed-point number using the following form:
<tt class="literal">NUMBER(p,s)</tt> where <tt class="literal">s</tt> is the
scale, or the number of digits to the right of the decimal point. The
scale can range from -84 to 127.</p>



<p>You can specify an integer using <tt class="literal">NUMBER(p)</tt>. This
is a fixed-point number with precision <tt class="literal">p</tt> and scale
0. This is equivalent to <tt class="literal">NUMBER(p,0)</tt>.</p>



<p>You can specify a floating-point number using
<tt class="literal">NUMBER</tt>. This is a floating-point number with
decimal precision 38. A scale value is not applicable for
floating-point numbers.</p>



<p><tt class="literal">DBD::Oracle</tt> always returns all numbers as strings.
Thus the driver puts no restriction on size of
<tt class="literal">PRECISION</tt> or <tt class="literal">SCALE</tt>.</p>






<h4 class="refsect2">String data handling </h4>



<p>Oracle supports the following string datatypes:</p>



<blockquote><pre class="code">VARCHAR2(size)
NVARCHAR2(size)
CHAR
CHAR(size)
NCHAR
NCHAR(size)
RAW(size)</pre></blockquote>



<p>The <tt class="literal">RAW</tt> type is presented as hexadecimal
characters. The contents are treated as non-character binary data and
thus are never "translated" by character set conversions
or gateway interfaces.</p>



<p><tt class="literal">CHAR</tt> types and the <tt class="literal">RAW</tt> type
have a limit of 2000 bytes. For <tt class="literal">VARCHAR</tt> types the
limit is 2000 bytes in Oracle 7 and 4000 in Oracle 8.</p>



<p>The <tt class="literal">NVARCHAR2</tt> and <tt class="literal">NCHAR</tt>
variants hold string values of a defined national character set
(Oracle 8 only). For those types the maximum number of characters
stored may be lower when using multibyte character sets.</p>



<p>The <tt class="literal">CHAR</tt> and <tt class="literal">NCHAR</tt> types are
fixed length and blank padded.</p>



<p>Oracle automatically converts character data between the character
set of the database defined when the database was created and the
character set of the client, defined by the
<tt class="literal">NLS_LANG</tt> parameter for the <tt class="literal">CHAR</tt>
and <tt class="literal">VARCHAR2</tt> types or the
<tt class="literal">NLS_NCHAR</tt> parameter for the
<tt class="literal">NCHAR</tt> and <tt class="literal">NVARCHAR2</tt> types.</p>



<p><tt class="literal">CONVERT(string,</tt> <tt class="literal">dest_char_set,</tt>
<tt class="literal">source_char_set)</tt> can be used to convert strings
between character sets. Oracle 8 supports 180 storage character sets.
UTF-8 is supported. See the "National Language Support"
section of the Oracle Reference manual for more details on character
set issues.</p>



<p>Strings can be concatenated using either the
<tt class="literal">CONCAT(s1,s2,...)</tt> SQL function or the
<tt class="literal">||</tt> operator.</p>






<h4 class="refsect2">Date data handling </h4>



<p>Oracle supports one flexible date/time datatype:
<tt class="literal">DATE</tt>. A <tt class="literal">DATE</tt> can have any value
from January 1, 4712 BC to December 31, 4712 AD with a one second
resolution.</p>



<p>Oracle supports a very wide range of date formats and can use one of
several calendars (Arabic Hijrah, English Hijrah, Gregorian, Japanese
Imperial, Persian, ROC Official (Republic of China), and Thai
Buddha). We'll only consider the Gregorian calendar here.</p>



<p>The default output format for the <tt class="literal">DATE</tt> type is
defined by the <tt class="literal">NLS_DATE_FORMAT</tt> configuration
parameter, but it's typically <tt class="literal">DD-MON-YY</tt>,
<em class="emphasis">e.g.</em>, 20-FEB-99 in most western installations.
The default input format for the <tt class="literal">DATE</tt> type is the
same as the output format. Only that one format is recognized.</p>



<p>If you specify a <tt class="literal">DATE</tt> value without a time
component, the default time is 00:00:00 (midnight). If you specify a
<tt class="literal">DATE</tt> value without a date, the default date is the
first day of the current month. If a date format that has a two-digit
year, such as the <tt class="literal">YY</tt> in
<tt class="literal">DD-MON-YY</tt> (a common default) then the date
returned is always in the current century. The <tt class="literal">RR</tt>
format can be used instead to provide a fifty-year pivot.</p>



<p>The default date format is specified either explicitly with the
initialization parameter <tt class="literal">NLS_DATE_FORMAT</tt> or
implicitly with the initialization parameter
<tt class="literal">NLS_TERRITORY</tt>. For information on these
parameters, see Oracle8 Reference.</p>



<p>You can change the default date format for your session with the
<tt class="literal">ALTER</tt> <tt class="literal">SESSION</tt> command. For
example:</p>



<blockquote><pre class="code">ALTER SESSION SET NLS_DATE_FORMAT = 'MM/DD/YYYY'</pre></blockquote>



<p>The <tt class="literal">TO_DATE( )</tt> function can be used to parse a
character string containing a date in a known format. For example:</p>



<blockquote><pre class="code">UPDATE table SET date_field = TO_DATE('1999-02-21', 'YYYY-MM-DD')</pre></blockquote>



<p>The <tt class="literal">TO_CHAR( )</tt> function can be used to format a
date. For example:</p>



<blockquote><pre class="code">SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM DUAL</pre></blockquote>



<p>The current date/time is returned by the <tt class="literal">SYSDATE(
)</tt> function.</p>



<p>You can add numbers to <tt class="literal">DATE</tt> values. The number is
interpreted as numbers of days; for example,
<tt class="literal">SYSDATE</tt> <tt class="literal">+</tt> <tt class="literal">1</tt>
is this time tomorrow, and <tt class="literal">SYSDATE</tt>
<tt class="literal">-</tt> <tt class="literal">(3/1440)</tt> is three minutes
ago. You can subtract two dates to find the difference, in days,
between them.</p>



<p>Oracle provides a wide range of date functions including
<tt class="literal">ROUND( )</tt>, <tt class="literal">TRUNC( )</tt>,
<tt class="literal">NEXT_DAY( )</tt>, <tt class="literal">ADD_MONTHS( )</tt>,
<tt class="literal">LAST_DAY( )</tt> (of the month), and
<tt class="literal">MONTHS_BETWEEN( )</tt>.</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970" value to the corresponding
database date/time:</p>



<blockquote><pre class="code">to_date(trunc(:unixtime/86400, 0) + 2440588, 'J') -- date part
+(mod(:unixtime,86400)/86400)                     -- time part</pre></blockquote>



<p>To do the reverse you can use:</p>



<blockquote><pre class="code">(date_time_field - TO_DATE('01-01-1970','DD-MM-YYYY')) * 86400</pre></blockquote>



<p>Oracle does no automatic time zone adjustments. However it does
provide a <tt class="literal">NEW_TIME( )</tt> function that calculates
time zone adjustments for a range of time zones.
<tt class="literal">NEW_TIME(d,</tt> <tt class="literal">z1,</tt>
<tt class="literal">z2)</tt> returns the date and time in time zone
<tt class="literal">z2</tt> when the date and time in time zone
<tt class="literal">z1</tt> are represented by <tt class="literal">d</tt>.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>Oracle supports these <tt class="literal">LONG</tt>/<tt class="literal">BLOB</tt>
datatypes:</p>



<blockquote><pre class="code">LONG      - Character data of variable length
LONG RAW  - Raw binary data of variable length
CLOB      - A large object containing single-byte characters
NCLOB     - A large object containing national character set data
BLOB      - Binary large object
BFILE     - Locator for external large binary file</pre></blockquote>



<p>The <tt class="literal">LONG</tt> types can hold up to 2 GB. The other
types (<tt class="literal">LOB</tt> and <tt class="literal">FILE</tt>) can hold
up to 4 GB. The <tt class="literal">LOB</tt> and <tt class="literal">FILE</tt>
types are only available when using Oracle 8 OCI.</p>



<p>The <tt class="literal">LONG</tt> <tt class="literal">RAW</tt> and
<tt class="literal">RAW</tt> types are passed to and from the database as
strings consisting of pairs of hex digits.</p>



<p>The <tt class="literal">LongReadLen</tt> and <tt class="literal">LongTruncOk</tt>
attributes work as defined. However, the LongReadLen attribute seems
to be limited to 65535 bytes on most platforms when using Oracle 7.
Building <tt class="literal">DBD::Oracle</tt> with Oracle 8 OCI raises that
limit to 4 GB.</p>



<p>The maximum length of <tt class="literal">bind_ param( )</tt> parameter
value that can be used to insert LONG data seems to be limited to
65535 bytes on most platforms when using Oracle 7. Building
<tt class="literal">DBD::Oracle</tt> with Oracle 8 OCI raises that limit to
4 GB.</p>



<p>The <tt class="literal">TYPE</tt> attribute value
<tt class="literal">SQL_LONGVARCHAR</tt> indicates an Oracle
<tt class="literal">LONG</tt> type. The value
<tt class="literal">SQL_LONGVARBINARY</tt> indicates an Oracle
<tt class="literal">LONG</tt> <tt class="literal">RAW</tt> type. These values are
not always required but their use is strongly recommended.</p>



<p>No other special handling is required for
<tt class="literal">LONG</tt>/<tt class="literal">BLOB</tt> datatypes. They can
be treated just like any other field when fetching or inserting, etc.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::Oracle</tt> driver supports the
<tt class="literal">type_info( )</tt> method.</p>



<p>Oracle supports automatic conversions between datatypes wherever
it's reasonable.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p><tt class="literal">DBD::Oracle</tt>

<a name="INDEX-1239" />supports
transactions. The default transaction isolation level is READ
COMMITED.</p>



<p>Oracle supports READ COMMITED and SERIALIZABLE isolation levels. The
level may be changed once per-transaction by executing a
<tt class="literal">SET</tt> <tt class="literal">TRANSACTION ISOLATION</tt>
<tt class="literal">LEVEL</tt> <tt class="literal">x</tt> statement (where
<tt class="literal">x</tt> is the name of the isolation level required).</p>



<p>Oracle also supports transaction-level read consistency. This can be
enabled by issuing a <tt class="literal">SET</tt>
<tt class="literal">TRANSACTION</tt> statement with the READ ONLY option.</p>



<p>In Oracle, the default behavior is that a lock never prevents other
users from querying the table. A query never places a lock on a
table. Readers never block writers, and writers never block readers.</p>



<p>Rows returned by a <tt class="literal">SELECT</tt> statement can be locked
to prevent them from being changed by another transaction by
appending <tt class="literal">FOR UPDATE</tt> to the
<tt class="literal">SELECT</tt> statement. Optionally, you can specify a
column list in parentheses after the <tt class="literal">FOR UPDATE</tt>
clause.</p>



<p>The <tt class="literal">LOCK TABLE table_name IN lock_mode</tt> statement
can be used to apply an explicit lock on an entire table. A range of
row and table locks are supported.</p>




<h4 class="refsect1">SQL Dialect</h4>





<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1240" />
operator is case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>Oracle supports inner joins with the usual syntax:</p>



<blockquote><pre class="code">SELECT * FROM a, b WHERE a.field = b.field</pre></blockquote>



<p>To write a query that performs an outer join of tables A and B and
returns all rows from A, the Oracle outer join operator (<tt class="literal">
+</tt> ) must be applied to all column names of B that appear in
the join condition. For example:</p>



<blockquote><pre class="code">SELECT customer_name, order_date 
FROM customers, orders 
WHERE customers.cust_id = orders.cust_id (+);</pre></blockquote>



<p>For all rows in the customer's table that have no matching rows
in the orders table, Oracle returns NULL for any select list
expressions containing columns from the orders table.</p>






<h4 class="refsect2">Table and column names </h4>



<p>The names of Oracle identifiers, such as tables and columns, cannot
exceed thirty characters in length.</p>



<p>The first character must be a letter, but the rest can be any
combination of letters, numerals, dollar signs
(<tt class="literal">$</tt>), pound signs (<tt class="literal">#</tt> ), and
underscores ( <tt class="literal">_</tt>).</p>



<p>However, if an Oracle identifier is enclosed by double quotes ("), it
can contain any combination of legal characters including spaces but
excluding quotation marks.</p>



<p>Oracle converts all identifiers to uppercase unless enclosed in
double quotes. National characters can also be used when identifiers
are quoted.</p>






<h4 class="refsect2">Row ID </h4>



<p>The Oracle "row id" pseudocolumn is called ROWID. Oracle
ROWIDs are alphanumeric case-sensitive strings. They can be treated
as ordinary strings and used to rapidly (re)select rows.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>Oracle supports "sequence generators". Any number of
named sequence generators can be created in a database using the
<tt class="literal">CREATE SEQUENCE seq_name</tt> SQL command. Each has
pseudocolumns called <tt class="literal">NEXTVAL</tt> and
<tt class="literal">CURRVAL</tt>. The typical usage is:</p>



<blockquote><pre class="code">INSERT INTO table (k, v) VALUES (seq_name.nextval, ?)</pre></blockquote>



<p>To get the value just inserted you can use:</p>



<blockquote><pre class="code">SELECT seq_name.currval FROM DUAL</pre></blockquote>



<p>Oracle does not support automatic key generation such as "auto
increment" or "system generated" keys. However they
can be emulated using triggers and sequence generators.</p>



<p>For example:</p>



<blockquote><pre class="code">CREATE TRIGGER trigger_name
  BEFORE INSERT ON table_name FOR EACH ROW
  DECLARE newid integer;
BEGIN
  IF (:NEW.key_field_name IS NULL)
  THEN
    SELECT sequence_name.NextVal INTO newid FROM DUAL;
    :NEW.key_field_name := newid;
  END IF;
END;</pre></blockquote>



<p>Oracle8i (8.1.0 and above) supports Universal Unique ID number
generation, per the IETF Internet-Draft, using the new
<tt class="literal">SYS_GUID( )</tt> function. <tt class="literal">GUID</tt>s are
more useful than sequence generators in a distributed database since
no two hosts will generate the same <tt class="literal">GUID</tt>.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>The <tt class="literal">ROWNUM</tt> pseudocolumn can be used to
sequentially number selected rows (starting at 1). Sadly, however,
Oracle's <tt class="literal">ROWNUM</tt> has some frustrating
limitations. Refer to the Oracle SQL documentation.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Oracle does not support positioned updates or deletes.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter 
<a name="INDEX-1241" />binding is directly supported by
Oracle. Both the <tt class="literal">?</tt> and <tt class="literal">:1</tt> style
of placeholders are supported. The <tt class="literal">:name</tt> style is
also supported, but is not portable.</p>



<p>The <tt class="literal">bind_ param()</tt> method <tt class="literal">TYPE</tt>
attribute can be used to indicate the type a parameter should be
bound as. These SQL types are bound as <tt class="literal">VARCHAR2:</tt>
<tt class="literal">SQL_NUMERIC</tt>, <tt class="literal">SQL_DECIMAL</tt>,
<tt class="literal">SQL_INTEGER</tt>, <tt class="literal">SQL_SMALLINT</tt>,
<tt class="literal">SQL_FLOAT</tt>, <tt class="literal">SQL_REAL</tt>,
<tt class="literal">SQL_DOUBLE</tt>, and <tt class="literal">SQL_VARCHAR</tt>.
Oracle will automatically convert from <tt class="literal">VARCHAR2</tt> to
the required type.<a href="#FOOTNOTE-74">[74]</a></p><blockquote>


<a name="FOOTNOTE-74" /><p>[74]Working with strings and letting
Oracle handle the conversions actually has many benefits.
Oracle's packed decimal numeric format is compact, fast, and
has far larger scale and precision than Perl's own numeric
values.</p>


</blockquote>



<p>The <tt class="literal">SQL_CHAR</tt> type is bound as a
<tt class="literal">CHAR,</tt> thus enabling fixed-width, blank-padded
comparison semantics.</p>



<p>The <tt class="literal">SQL_BINARY</tt> and
<tt class="literal">SQL_VARBINARY</tt> types are bound as
<tt class="literal">RAW</tt>. <tt class="literal">SQL_LONGVARBINARY</tt> is bound
as <tt class="literal">LONG</tt> <tt class="literal">RAW</tt> and
<tt class="literal">SQL_LONGVARCHAR</tt> as <tt class="literal">LONG</tt>.</p>



<p>Unsupported values of the <tt class="literal">TYPE</tt> attribute generate
a warning.</p>



<p>Refer to the <tt class="literal">DBD::Oracle</tt> documentation for details
of how to bind <tt class="literal">LOB</tt>s and
<tt class="literal">CURSOR</tt>s.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Oracle 
<a name="INDEX-1242" />stored procedures are implemented
in the Oracle PL/SQL language.<a href="#FOOTNOTE-75">[75]</a></p><blockquote>


<a name="FOOTNOTE-75" /><p>[75]A procedural extension
to SQL that supports variables, control flow, packages, exceptions,
etc. With Oracle8i, stored procedures can also be implemented in
Java.</p>


</blockquote>



<p>The <tt class="literal">DBD::Oracle</tt> module can be used to execute a
block of PL/SQL code by starting it with a <tt class="literal">BEGIN</tt>
and ending it with an <tt class="literal">END;</tt>. PL/SQL blocks are used
to call stored procedures. Here's a simple example that calls a
stored procedure called "foo" and passes it two
parameters:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare("BEGIN foo(:1, :2); END;");
$sth-&gt;execute("Baz", 24);</pre></blockquote>



<p>Here's a more complex example that shows a stored procedure
being called with two parameters and returning the return value of
the procedure. The second parameter of the procedure is defined as
<tt class="literal">IN</tt> <tt class="literal">OUT</tt> so we bind that using
<tt class="literal">bind_ param_inout()</tt> to enable it to update the
Perl variable:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare("BEGIN :result = func_name(:id, :changeme); END;");
$sth-&gt;bind_param(":id", "FooBar");
my ($result, $changeme) = (41, 42);
$sth-&gt;bind_param_inout(":result",  \$result,  100);
$sth-&gt;bind_param_inout(":changeme", \$changeme, 100);
$sth-&gt;execute();
print "func_name returned '$result' and updated changeme to '$changeme'\n";</pre></blockquote>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::Oracle</tt>

<a name="INDEX-1243" />supports the
<tt class="literal">table_info()</tt> method.</p>



<p>The <tt class="literal">ALL_TABLES</tt> view contains detailed information
about all tables in the database, one row per table.</p>



<p>The <tt class="literal">ALL_TAB_COLUMNS</tt> view contains detailed
information about all columns of all the tables in the database, one
row per table.</p>



<p>The <tt class="literal">ALL_INDEXES</tt> view contains detailed information
about all indexes in the database, including primary keys, one row
per index.</p>



<p>The <tt class="literal">ALL_IND_COLUMNS</tt> view contains information
about the columns that make up each index.</p>



<p>(Note that for all these views, fields containing statistics derived
from the actual data in the corresponding table are updated only when
the SQL <tt class="literal">ANALYSE</tt> command is executed for that
table.)</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::Oracle</tt>

<a name="INDEX-1244" />has no significant driver-specific
database or statement handle attributes.</p>



<p>The following private methods are supported:</p>



<dl>
<dt><b><tt class="literal">plsql_errstr</tt> </b></dt>
<dd><blockquote><pre class="code">$plsql_errstr = $dbh-&gt;func('plsql_errstr');</pre></blockquote>



<p>Returns error text from the <tt class="literal">USER_ERRORS</tt> table.</p></dd>



<dt><b><tt class="literal">dbms_output_enable</tt> </b></dt>
<dd><blockquote><pre class="code">$dbh-&gt;func('dbms_output_enable');</pre></blockquote>



<p>Enables the <tt class="literal">DBMS_OUTPUT</tt> package. The
<tt class="literal">DBMS_OUTPUT</tt> package is typically used to receive
trace and informational messages from stored procedures.</p></dd>



<dt><b><tt class="literal">dbms_output_get</tt> </b></dt>
<dd><blockquote><pre class="code">$msg  = $dbh-&gt;func('dbms_output_get');
@msgs = $dbh-&gt;func('dbms_output_get');</pre></blockquote>



<p>Gets a single line or all available lines using
<tt class="literal">DBMS_OUTPUT.GET_LINE</tt>.</p></dd>



<dt><b><tt class="literal">dbms_output_put</tt> </b></dt>
<dd><blockquote><pre class="code">$msg  = $dbh-&gt;func('dbms_output_put', @msgs);</pre></blockquote>



<p>Puts messages using
<tt class="literal">DBMS_OUTPUT.PUT_LINE</tt>.
<a name="INDEX-1245" /></p></dd>

</dl>



</div>

<a name="INDEX-1246" /><a name="INDEX-1247" /><a name="INDEX-1248" /><a name="INDEX-1249" /><a name="INDEX-1250" /><a name="INDEX-1251" /><a name="INDEX-1252" /><a name="INDEX-1253" /><a name="INDEX-1254" /><a name="INDEX-1255" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::Pg </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>





<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::Pg</tt>
<a name="INDEX-1246" />

<a name="INDEX-1247" />
<a name="INDEX-1248" />version 0.91</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner only
LONG/LOB datatypes                     Yes, max size depends on filesystem
Statement handle attributes available  After execute(  )
Placeholders                           Yes, "?" and ":1" styles (native)
Stored procedures                      No
Bind output values                     No
Table name letter case                 Insensitive, stored as lowercase
Field name letter case                 Insensitive, stored as lowercase
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       No, but has "~*" case-insensitive regex
                                       match
Server table ROW ID pseudocolumn       Yes, "oid"
Positioned update/delete               No
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Edmund Mergl. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The DBD-Pg-0.91 module supports PostgreSQL 6.4. For futher
information please refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.postgresql.org/">http://www.postgresql.org</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI Specification </h4>



<p><tt class="literal">DBD::Pg</tt> does not fully parse the statement until
it's executed. Thus, attributes like
<tt class="literal">$sth-&gt;{NUM_OF_FIELDS}</tt> are not available until
after <tt class="literal">$sth-&gt;execute( )</tt> has been called. This is
valid behavior, but it is important to note when porting applications
originally written for other drivers.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The <tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1249" />
Data Source Name, or <em class="emphasis">DSN</em>, can be one of the
following:</p>



<blockquote><pre class="code">dbi:Pg:dbname=$dbname
dbi:Pg:dbname=$dbname;host=$host;port=$port;options=$options;tty=$tty</pre></blockquote>



<p>All parameters, including the userid and password parameter of the
<tt class="literal">connect</tt> command, have a hard-coded default that
can be overridden by setting appropriate environment variables.</p>



<p>There are no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p><tt class="literal">DBD::Pg</tt> supports an unlimited number of concurrent
database connections to one or more databases.</p>




<h4 class="refsect1">Datatypes</h4>





<h4 class="refsect2">Numeric data handling </h4>



<p>PostgreSQL 
<a name="INDEX-1250" />supports
the following numeric types:</p>



<a name="appb-268-fm2xml" /><table border="1">



<tr>
<th>
<p>PostgreSQL</p></th>
<th>
<p>Range</p></th>
</tr>






<tr>
<td>
<p>int2</p></td>
<td>
<p>-32768 to +32767</p></td>
</tr>


<tr>
<td>
<p>int4</p></td>
<td>
<p>-2147483648 to +2147483647</p></td>
</tr>


<tr>
<td>
<p>float4</p></td>
<td>
<p>6 decimal places</p></td>
</tr>


<tr>
<td>
<p>float8</p></td>
<td>
<p>15 decimal places</p></td>
</tr>



</table>

<p>Some platforms also support the int8 type. <tt class="literal">DBD::Pg</tt>
always returns all numbers as strings.</p>






<h4 class="refsect2">String data handling </h4>



<p>PostgreSQL supports the following string datatypes:</p>



<blockquote><pre class="code">CHAR            single character
CHAR(size)      fixed length blank-padded
VARCHAR(size)   variable length with limit
TEXT            variable length</pre></blockquote>



<p>All string datatypes have a limit of 4096 bytes. The
<tt class="literal">CHAR</tt> type is fixed length and blank padded.</p>



<p>There is no special handling for data with the eighth bit set. They
are stored unchanged in the database. None of the character types can
store embedded nulls and Unicode is not formally supported.</p>



<p>Strings can be concatenated using the <tt class="literal">||</tt> operator.</p>






<h4 class="refsect2">Date data handling </h4>



<p>PostgreSQL supports the following date/time datatypes:</p>



<a name="appb-271-fm2xml" /><table border="1">





<tr>
<th>
<p>Datatype</p></th>
<th>
<p>Storage</p></th>
<th>
<p>Recommendation</p></th>
<th>
<p>Description</p></th>
</tr>






<tr>
<td>
<p>abstime</p></td>
<td>
<p>4 bytes</p></td>
<td>
<p>original date and time</p></td>
<td>
<p>limited range</p></td>
</tr>


<tr>
<td>
<p>date</p></td>
<td>
<p>4 bytes</p></td>
<td>
<p>SQL92 type</p></td>
<td>
<p>wide range</p></td>
</tr>


<tr>
<td>
<p>datetime</p></td>
<td>
<p>8 bytes</p></td>
<td>
<p>best general date and time</p></td>
<td>
<p>wide range, high precision</p></td>
</tr>


<tr>
<td>
<p>interval</p></td>
<td>
<p>12 bytes</p></td>
<td>
<p>SQL92 type</p></td>
<td>
<p>equivalent to timespan</p></td>
</tr>


<tr>
<td>
<p>reltime</p></td>
<td>
<p>4 bytes</p></td>
<td>
<p>original time interval</p></td>
<td>
<p>limited range, low precision</p></td>
</tr>


<tr>
<td>
<p>time</p></td>
<td>
<p>4 bytes</p></td>
<td>
<p>SQL92 type</p></td>
<td>
<p>wide range</p></td>
</tr>


<tr>
<td>
<p>timespan</p></td>
<td>
<p>12 bytes</p></td>
<td>
<p>best general time interval</p></td>
<td>
<p>wide range, high precision</p></td>
</tr>


<tr>
<td>
<p>timestamp</p></td>
<td>
<p>4 bytes</p></td>
<td>
<p>SQL92 type</p></td>
<td>
<p>limited range</p></td>
</tr>



</table>

<a name="appb-272-fm2xml" /><table border="1">





<tr>
<th>
<p>Datatype</p></th>
<th>
<p>Range</p></th>
<th>
</th>
<th>
<p>Resolution</p></th>
</tr>






<tr>
<td>
<p>abstime</p></td>
<td>
<p>1901-12-14</p></td>
<td>
<p>2038-01-19</p></td>
<td>
<p>1 sec</p></td>
</tr>


<tr>
<td>
<p>date</p></td>
<td>
<p>4713 B.C.</p></td>
<td>
<p>32767 A.D.</p></td>
<td>
<p>1 day</p></td>
</tr>


<tr>
<td>
<p>datetime</p></td>
<td>
<p>4713 B.C.</p></td>
<td>
<p>1465001 A.D.</p></td>
<td>
<p>1 microsec</p></td>
</tr>


<tr>
<td>
<p>interval</p></td>
<td>
<p>-178000000 years</p></td>
<td>
<p>+178000000 years</p></td>
<td>
<p>1 microsec</p></td>
</tr>


<tr>
<td>
<p>reltime</p></td>
<td>
<p>-68 years</p></td>
<td>
<p>+68 years</p></td>
<td>
<p>1 sec</p></td>
</tr>


<tr>
<td>
<p>time</p></td>
<td>
<p>00:00:00:00</p></td>
<td>
<p>23:59:59:99</p></td>
<td>
<p>1 microsec</p></td>
</tr>


<tr>
<td>
<p>timespan</p></td>
<td>
<p>-178000000 years</p></td>
<td>
<p>178000000 years</p></td>
<td>
<p>1 microsec</p></td>
</tr>


<tr>
<td>
<p>timestamp</p></td>
<td>
<p>1901-12-14</p></td>
<td>
<p>2038-01-19</p></td>
<td>
<p>1 sec</p></td>
</tr>



</table>

<p>PostgreSQL supports a range of date formats:</p>



<a name="appb-273-fm2xml" /><table border="1">



<tr>
<th>
<p>Name</p></th>
<th>
<p>Example</p></th>
</tr>






<tr>
<td>
<p>ISO</p></td>
<td>
<p>1997-12-17 0:37:16-08</p></td>
</tr>


<tr>
<td>
<p>SQL</p></td>
<td>
<p>12/17/1997 07:37:16.00 PST</p></td>
</tr>


<tr>
<td>
<p>Postgres</p></td>
<td>
<p>Wed Dec 17 07:37:16 1997 PST</p></td>
</tr>


<tr>
<td>
<p>European</p></td>
<td>
<p>17/12/1997 15:37:16.00 MET</p></td>
</tr>


<tr>
<td>
<p>NonEuropean</p></td>
<td>
<p>12/17/1997 15:37:16.00 MET</p></td>
</tr>


<tr>
<td>
<p>US</p></td>
<td>
<p>12/17/1997 07:37:16.00 MET</p></td>
</tr>



</table>

<p>The default output format does not depend on the client/server
locale. It depends on, in increasing priority: the
<tt class="literal">PGDATESTYLE</tt> environment variable at the server,
the <tt class="literal">PGDATESTYLE</tt> environment variable at the
client, and the <tt class="literal">SET</tt> <tt class="literal">DATESTYLE</tt>
SQL command.</p>



<p>All of the formats described above can be used for input. A great
many others can also be used. There is no specific default input
format. If the format of a date input is ambiguous then the current
<tt class="literal">DATESTYLE</tt> is used to help disambiguate.</p>



<p>If you specify a date/time value without a time component, the
default time is 00:00:00 (midnight). To specify a date/time value
without a date is not allowed. If a date with a two-digit year is
input, then if the year was less than 70, add 2000; otherwise, add
1900.</p>



<p>The current date/time is returned by the keyword
`<tt class="literal">now</tt>' or
`<tt class="literal">current</tt>' , which has to be cast to a
valid datatype. For example:</p>



<blockquote><pre class="code">SELECT 'now'::datetime</pre></blockquote>



<p>PostgreSQL supports a range of date/time functions for converting
between types, extracting parts of a date/time value, truncating to a
given unit, etc. The usual arithmetic can be performed on date and
interval values, e.g., date-date=interval, etc.</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970 GMT" value to the corresponding
database date/time:</p>



<blockquote><pre class="code">DATETIME(unixtime_field)</pre></blockquote>



<p>and to do the reverse:</p>



<blockquote><pre class="code">DATE_PART('epoch', datetime_field)</pre></blockquote>



<p>The server stores all dates internally in GMT. Times are converted to
local time on the database server before being sent to the client
frontend, hence by default are in the server time zone.</p>



<p>The <tt class="literal">TZ</tt> environment variable is used by the server
as default time zone. The <tt class="literal">PGTZ</tt> environment
variable on the client side is used to send the time zone information
to the backend upon connection. The SQL <tt class="literal">SET TIME
ZONE</tt> command can set the time zone for the current session.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>PostgreSQL handles <tt class="literal">BLOB</tt>s using a so-called
"large objects" type. The handling of this type differs
from all other datatypes. The data are broken into chunks, which are
stored in tuples in the database. Access to large objects is given by
an interface which is modelled closely after the Unix file system.
The maximum size is limited by the file size of the operating system.</p>



<p>If you just select the field, you get a "large object
identifier" and not the data itself. The
<tt class="literal">LongReadLen</tt> and <tt class="literal">LongTruncOk</tt>
attributes are not implemented because they don't make sense in
this case. The only method implemented by the driver is the
undocumented DBI method <tt class="literal">blob_read( )</tt>.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::Pg</tt> driver supports the
<tt class="literal">type_info( )</tt> method.</p>



<p>PostgreSQL supports automatic conversions between datatypes wherever
it's reasonable.
<a name="INDEX-1251" /></p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p>PostgreSQL 
<a name="INDEX-1252" />supports
transactions. The current default isolation transaction level is
Serializable and is currently implemented using table-level locks.
Both may change. No other isolation levels for transactions are
supported.</p>



<p>With <tt class="literal">AutoCommit</tt> on, a query never places a lock on
a table. Readers never block writers, and writers never block
readers. This behavior changes whenever a transaction is started
(with <tt class="literal">AutoCommit</tt> off). Then a query induces a
shared lock on a table and blocks anyone else until the transaction
has been finished.</p>



<p>The <tt class="literal">LOCK</tt> <tt class="literal">TABLE</tt>
<tt class="literal">table_name</tt> statement can be used to apply an
explicit lock on a table. This works only inside a transaction (with
<tt class="literal">AutoCommit</tt> off).</p>



<p>To ensure that a table being selected does not change before you make
an update later in the transaction, you must explicitly lock it with
a <tt class="literal">LOCK</tt> <tt class="literal">TABLE</tt> statement before
executing the select.</p>




<h4 class="refsect1">SQL Dialect</h4>





<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>PostgreSQL 
<a name="INDEX-1253" />has the
following string matching operators:</p>



<a name="appb-279-fm2xml" /><table border="1">




<tr>
<th>
<p> Glyph</p></th>
<th>
<p>Description</p></th>
<th>
<p>Example</p></th>
</tr>






<tr>
<td>
<p> ~~</p></td>
<td>
<p>Same as SQL "LIKE" operator</p></td>
<td>
<p><tt class="literal">'scrappy,marc' ~~ '%scrappy%'</tt></p></td>
</tr>


<tr>
<td>
<p> !~~</p></td>
<td>
<p>Same as SQL "NOT LIKE" operator</p></td>
<td>
<p><tt class="literal">'bruce' !~~ '%al%'</tt></p></td>
</tr>


<tr>
<td>
<p> ~</p></td>
<td>
<p>Match (regex), case-sensitive</p></td>
<td>
<p><tt class="literal">'thomas' ~ '.*thomas.*'</tt></p></td>
</tr>


<tr>
<td>
<p> ~*</p></td>
<td>
<p>Match (regex), case-insensitive</p></td>
<td>
<p><tt class="literal">'thomas' ~* '.*Thomas.*'</tt></p></td>
</tr>


<tr>
<td>
<p> !~</p></td>
<td>
<p>Doesn't match (regex), case-sensitive</p></td>
<td>
<p><tt class="literal">'thomas' !~ '.*Thomas.*'</tt></p></td>
</tr>


<tr>
<td>
<p> !~*</p></td>
<td>
<p>Doesn't match (regex), case-insensitive</p></td>
<td>
<p><tt class="literal">'thomas' !~ '.*vadim.*'</tt></p></td>
</tr>



</table>





<h4 class="refsect2">Table join syntax </h4>



<p>Outer joins are not supported. Inner joins use the traditional
syntax.</p>






<h4 class="refsect2">Table and column names </h4>



<p>The maximum size of table and column names cannot exceed 31 charaters
in length. Only alphanumeric characters can be used; the first
character must be a letter.</p>



<p>If an identifier is enclosed by double quotes (" ), it can contain
any combination of characters except double quotes.</p>



<p>PostgreSQL converts all identifiers to lowercase unless enclosed in
double quotes. National character set characters can be used, if
enclosed in quotation marks.</p>






<h4 class="refsect2">Row ID </h4>



<p>The PostgreSQL "row id" pseudocolumn is called
<em class="emphasis">oid</em>, object identifier. It can be treated as a
string and used to rapidly (re)select rows.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>PostgreSQL does not support automatic key generation such as
"auto increment" or "system generated" keys.</p>



<p>However, PostgreSQL does support "sequence generators."
Any number of named sequence generators can be created in a database.
Sequences are used via functions called <tt class="literal">NEXTVAL</tt>
and <tt class="literal">CURRVAL</tt>. The typical usage is:</p>



<blockquote><pre class="code">INSERT INTO table (k, v) VALUES (NEXTVAL('seq_name'), ?);</pre></blockquote>



<p>To get the value just inserted, you can use the corresponding
<tt class="literal">currval( )</tt> SQL function in the same session, or:</p>



<blockquote><pre class="code">SELECT last_value FROM seq_name</pre></blockquote>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>PostgreSQL does not support positioned updates or deletes.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter binding is 
<a name="INDEX-1254" />emulated by the driver. Both the
<tt class="literal">?</tt> and <tt class="literal">:1</tt> style of placeholders
are supported.</p>



<p>The <tt class="literal">TYPE</tt> attribute of the <tt class="literal">bind_
param()</tt> method may be used to influence how parameters are
treated. These SQL types are bound as <tt class="literal">VARCHAR:
SQL_NUMERIC</tt>, <tt class="literal">SQL_DECIMAL</tt>,
<tt class="literal">SQL_INTEGER</tt>, <tt class="literal">SQL_SMALLINT</tt>,
<tt class="literal">SQL_FLOAT</tt>, <tt class="literal">SQL_REAL</tt>,
<tt class="literal">SQL_DOUBLE</tt>, and <tt class="literal">SQL_VARCHAR</tt>.</p>



<p>The <tt class="literal">SQL_CHAR</tt> type is bound as a
<tt class="literal">CHAR</tt>, thus enabling fixed-width, blank-padded
comparison semantics.</p>



<p>Unsupported values of the <tt class="literal">TYPE</tt> attribute generate
a warning.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p><tt class="literal">DBD::Pg</tt> does not support stored procedures.</p>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::Pg</tt> supports the
<tt class="literal">table_info()</tt> method.</p>



<p>The <tt class="literal">pg_attribute</tt> table contains detailed
information about all columns of all the tables in the database, one
row per table.</p>



<p>The <tt class="literal">pg_index</tt> table contains detailed information
about all indexes in the database, including primary keys, one row
per index.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p>There are no significant <tt class="literal">DBD::Pg</tt> driver-specific
database handle attributes.</p>



<p><tt class="literal">DBD::Pg</tt>

<a name="INDEX-1255" />has the following driver-specific
statement handle attributes:</p>



<dl>
<dt><b><tt class="literal">pg_size</tt> </b></dt>
<dd><p>Returns a reference to an array of integer values for each column.
The integer shows the storage (not display) size of the column in
bytes. Variable length columns are indicated by -1.</p></dd>



<dt><b><tt class="literal">pg_type</tt> </b></dt>
<dd><p>Returns a reference to an array of strings for each column. The
string shows the name of the datatype.</p></dd>



<dt><b><tt class="literal">pg_oid_status</tt> </b></dt>
<dd><p>Returns the OID of the last <tt class="literal">INSERT</tt> command.</p></dd>



<dt><b><tt class="literal">pg_cmd_status</tt> </b></dt>
<dd><p>Returns the name of the last command type. Possible types are:
<tt class="literal">INSERT</tt>, <tt class="literal">DELETE</tt>,
<tt class="literal">UPDATE</tt>, and <tt class="literal">SELECT</tt>.</p></dd>

</dl>



<p><tt class="literal">DBD::Pg</tt> has no private methods.</p>




<h4 class="refsect1">Other Significant Database or Driver Features </h4>



<p>PostgreSQL offers substantial additional power by incorporating the
following four additional basic concepts in such a way that users can
easily extend the system: classes, inheritance, types, and functions.</p>



<p>Other features provide additional power and flexibility: constraints,
triggers, rules, transaction integrity, procedural languages, and
large objects.</p>



<p>It's also free Open Source Software with an active community of
developers.</p>



</div>

<a name="INDEX-1256" /><a name="INDEX-1257" /><a name="INDEX-1258" /><a name="INDEX-1259" /><a name="INDEX-1260" /><a name="INDEX-1261" /><a name="INDEX-1262" /><a name="INDEX-1263" /><a name="INDEX-1264" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::SearchServer </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>






<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::SearchServer</tt>
<a name="INDEX-1256" /> version 0.20</p>



<p>This driver was previously known as <tt class="literal">DBD::Fulcrum</tt>.</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           No
Locking                                Yes, implicit and explicit
Table joins                            No, but see description below
LONG/LOB datatypes                     Yes, up to 2 GB
Statement handle attributes available  After execute(  )
Placeholders                           Yes, "?" and ":1" styles (emulated)
Stored procedures                      No
Bind output values                     No
Table name letter case                 Insensitive, stored as uppercase
Field name letter case                 Insensitive, stored as uppercase
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       Yes, "LIKE"
Server table ROW ID pseudocolumn       Yes, "FT_CID"
Positioned update/delete               Yes
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Davide Migliavacca. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list. Davide Migliavacca has
no relationship with PCDOCS/Fulcrum, the maker of SearchServer, and
particularly no contact with product support for PCDOCS/Fulcrum
customers.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::SearchServer</tt> module supports
PCDOCS/Fulcrum SearchServer, versions 2.<em class="emphasis">x</em> thru
3.5.</p>



<p>
<a name="INDEX-1257" />
<a name="INDEX-1258" />Fulcrum SearchServer is a very powerful
text-retrieval system with a SQL interface. You should not expect to
find a full-fledged SQL RDBMS here. Refer to the product
documentation for details about the query language.</p>



<p>For further information about SearchServer, refer to:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.pcdocs.com/">http://www.pcdocs.com</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p><tt class="literal">DBD::SearchServer</tt> doesn't fully parse the
statement until it's executed. Attributes like
<tt class="literal">$sth-&gt;{NUM_OF_FIELDS}</tt> aren't available
until after <tt class="literal">$sth-&gt;execute( )</tt> has been called.
This is valid behavior but is important to note when porting
applications originally written for other drivers.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>Under 
<a name="INDEX-1259" />Unix, you may specify where
SearchServer will find the database tables by using a set of
environment variables: <tt class="literal">FULSEARCH</tt>,
<tt class="literal">FULCREATE</tt>, and <tt class="literal">FULTEMP</tt>. So the
connect string is always just:</p>



<blockquote><pre class="code">dbi:SearchServer:</pre></blockquote>



<p>Under WIN32, you may use the fully qualified DSN syntax using the
ODBC data source name as the third component of the connect string:</p>



<blockquote><pre class="code">dbi:SearchServer:DSN</pre></blockquote>



<p>There are no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p><tt class="literal">DBD::SearchServer</tt> supports an unlimited number of
concurrent database connections to the same server.</p>




<h4 class="refsect1">Datatypes</h4>






<h4 class="refsect2">Numeric data handling </h4>



<p>SearchServer

<a name="INDEX-1260" />has two
numeric datatypes: <tt class="literal">INTEGER</tt> and
<tt class="literal">SMALLINT</tt>. <tt class="literal">INTEGER</tt> (or
<tt class="literal">INT</tt>) is an unsigned 32-bit binary integer with 10
digits of precision. <tt class="literal">SMALLINT</tt> is a signed 16-bit
binary integer with 5 digits of precision.</p>






<h4 class="refsect2">String data handling </h4>



<p>SearchServer supports the following string datatypes:</p>



<blockquote><pre class="code">CHAR(size)
VARCHAR(size)
APVARCHAR(size)</pre></blockquote>



<p>A <tt class="literal">CHAR</tt> column is of fixed size, whereas a
<tt class="literal">VARCHAR</tt> column can be of varying length up to the
specified maximum size. If the size is not specified, it defaults to
1. The maximum size for a <tt class="literal">CHAR</tt> or
<tt class="literal">VARCHAR</tt> column is 32,767.</p>



<p><tt class="literal">APVARCHAR</tt> is a special datatype. You can have at
most one <tt class="literal">APVARCHAR</tt> column per table; it is
designed to contain the full text of the document to be indexed and
it is used in queries to retrieve the text. It is eventually modified
to identify spots where the query matched. The maximum length of the
<tt class="literal">APVARCHAR</tt> column is 2,147,483,647.</p>



<p>The CHAR type is fixed-length and blank-padded to the right.</p>



<p>SearchServer has its own conversion functionality for national
language character sets. Basically, it treats all text as being
specified in one of three internal character sets (FTICS). It is up
to the application to use character sets consistently. The document
readers (software that is used by SearchServer to actually access
documents when indexing) are responsible for translating from other
characters sets to FTICS. A number of "translation"
filters are distributed with the product.</p>



<p>ISO Latin 1 (8859-1) is supported. See the "Character
Sets" section of the SearchSQL Reference Manual for more
details on character set issues.</p>






<h4 class="refsect2">Date data handling </h4>



<p>SearchServer supports only a <tt class="literal">DATE</tt> datatype. A
<tt class="literal">DATE</tt> can have any value from January 1, 100 AD to
December 31, 2047 AD with one-day resolution. Rows in tables have an
automatic read-only <tt class="literal">FT_TIMESTAMP</tt> column with a
better resolution, but it is not of a <tt class="literal">DATE</tt> type
(it is an <tt class="literal">INTEGER</tt>). Also, only date literals can
be used with <tt class="literal">DATE</tt> columns.</p>



<p>The date format is <tt class="literal">YYYY-MM-DD</tt> (ISO standard).
There are provisions for other formats, but their use is discouraged.</p>



<p>Only the ISO date format is recognized for input.</p>



<p>If a two-digit year value is entered, then 1900 is added to the
value. However, this isn't supported functionality, for good
reason.</p>



<p>No date/time arithmetic or functions are provided, and there is no
support for time zones.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>The <tt class="literal">APVARCHAR</tt> type can hold up to 2 GB.</p>



<p><tt class="literal">LongReadLen</tt> and <tt class="literal">LongTruncOk</tt> are
ignored due to very different semantics of the
<tt class="literal">APVARCHAR</tt> type.</p>



<p>You need to use the undocumented <tt class="literal">blob_read( )</tt>
method to fetch data from an <tt class="literal">APVARCHAR</tt> column.
Inserting an <tt class="literal">APVARCHAR</tt> column happens indirectly
by specifying an external document in the
<tt class="literal">FT_SFNAME</tt> reserved column. Document data is not
really inserted into the tables, it is indexed. Later, however, you
can fetch the document selecting the <tt class="literal">APVARCHAR</tt>
column.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::SearchServer</tt> driver does not support the
<tt class="literal">type_info( )</tt> method.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p><tt class="literal">DBD::SearchServer</tt>

<a name="INDEX-1261" />does not
support transactions.</p>



<p>Locking is performed based on the characteristics of the table, set
at creation time or modified later with an external utility,
<tt class="literal">ftlock</tt>.</p>



<p>By default, <tt class="literal">ROWLOCKING</tt> is applied, which applies
"transient" locks during normal operations including
select, searched update, and delete. These locks should not prevent
reading the affected rows, but will block additional concurrent
modifications, and prevent reindexing of the locked rows.</p>



<p>If set to <tt class="literal">NOLOCKING</tt>, no locking will be performed
on that table by the engine, meaning that data integrity is left for
the application to manage. Please read the documentation carefully
before playing with these parameters; there is additional feedback
with the <tt class="literal">PERIODIC</tt> or <tt class="literal">IMMEDIATE</tt>
indexing mode.</p>



<p>Rows returned by a <tt class="literal">SELECT</tt> statement can be locked
to prevent them from being changed by another transaction, by
appending <tt class="literal">FOR</tt> <tt class="literal">UPDATE</tt> to the
select statement.</p>



<p>There is no explicit table lock facility. You can prevent a table
<em class="emphasis">schema</em> being modified, dropped, or even
reindexed using <tt class="literal">PROTECT</tt> <tt class="literal">TABLE</tt>,
but this does not include row-level modifications, which are still
allowed. <tt class="literal">UNPROTECT</tt> <tt class="literal">TABLE</tt>
restores normal behavior.</p>




<h4 class="refsect1">SQL Dialect</h4>






<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1262" />
operator is <em class="emphasis">not</em> case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>SearchServer does not really support joins, however it does support
a kind of <em class="emphasis">view</em> mechanism.</p>



<p>With views, tables must be located on the same node and have the same
schema. Only read-only access is granted with views, and they have to
be described using a special syntax file. Please refer to the
"Data Administration and Preparation" manual for more
information on views.</p>






<h4 class="refsect2">Table and column names </h4>



<p>Letters, numbers, and underscores ( <tt class="literal">_</tt>) are valid
characters in identifiers. The maximum size of table and column names
is not known at this time.</p>



<p>SearchServer converts all identifiers to uppercase. Table and column
names are not case-sensitive. National characters can be used in
identifier names.</p>






<h4 class="refsect2">Row ID </h4>



<p>The SearchServer "row id" pseudocolumn is called
<tt class="literal">FT_CID</tt> and is of the <tt class="literal">INTEGER</tt>
datatype. <tt class="literal">FT_CID</tt> can be used in a WHERE clause,
but only with the <tt class="literal">=</tt> operator.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>SearchServer does not support automatic key generation such as
"auto increment" or "system generated" keys.
However, the integer <tt class="literal">FT_CID</tt> pseudocolumn is not
reissued when rows are deleted.</p>



<p>There is no support for sequence generators.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Positioned updates and deletes are supported using the
<tt class="literal">WHERE</tt> <tt class="literal">CURRENT</tt>
<tt class="literal">OF</tt> syntax. For example:</p>



<blockquote><pre class="code">$dbh-&gt;do("UPDATE ... WHERE CURRENT OF $sth-&gt;{CursorName}");</pre></blockquote>



<h4 class="refsect1">Parameter Binding </h4>



<p>Both 
<a name="INDEX-1263" />the <tt class="literal">?</tt> and
<tt class="literal">:1</tt> style of placeholders are supported by driver
emulation.</p>



<p>The <tt class="literal">TYPE</tt> attribute to <tt class="literal">bind_
param()</tt> is ignored, so no warning is generated for
unsupported values.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>There are no stored procedures or functions in SearchServer.</p>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::SearchServer</tt> supports the
<tt class="literal">table_info()</tt> method.</p>



<p>The <tt class="literal">COLUMNS</tt> system table contains detailed
information about all columns of all the tables in the database, one
row per column. The <tt class="literal">COLUMNS</tt> system table uses the
<tt class="literal">INDEX_MODE</tt> column to identify indexed columns and
which indexing mode is used for them.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::SearchServer</tt> has no driver-specific database
handle attributes. It does have one driver-specific statement handle
attribute:</p>



<dl>
<dt><b><tt class="literal">ss_last_row_id</tt> </b></dt>
<dd><p>This attribute is read-only and is valid after an
<tt class="literal">INSERT</tt>, <tt class="literal">DELETE</tt>, or
<tt class="literal">UPDATE</tt> statement. It will report the
<tt class="literal">FT_CID</tt> (row ID) of the last affected row in the
statement. You'll have to prepare/execute the statement (as
opposed to simply <tt class="literal">do()</tt><span class="acronym">-ing</span> it)
in order to fetch the attribute.</p></dd>

</dl>



<p>There are no private methods.
<a name="INDEX-1264" /></p>



</div>

<a name="INDEX-1265" /><a name="INDEX-1266" /><a name="INDEX-1267" /><a name="INDEX-1268" /><a name="INDEX-1269" /><a name="INDEX-1270" /><a name="INDEX-1271" /><a name="INDEX-1272" /><a name="INDEX-1273" /><a name="INDEX-1274" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::Sybase -- For Sybase and Microsoft SQL Server </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>





<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::Sybase</tt>
<a name="INDEX-1265" /> <a name="INDEX-1266" /> version 0.14</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           Yes
Locking                                Yes, implicit and explicit
Table joins                            Yes, inner and outer
LONG/LOB datatypes                     Yes, up to 2 GB
Statement handle attributes available  After execute(  )
Placeholders                           Yes, "?" style (native), see text below
Stored procedures                      Yes
Bind output values                     No, all values returned via fetch methods
Table name letter case                 Sensitive, stored as defined, configurable
Field name letter case                 Sensitive, stored as defined, configurable
Quoting of otherwise invalid names     Yes, via double quotes
Case-insensitive "LIKE" operator       No
Server table ROW ID pseudocolumn       No
Positioned update/delete               No
Concurrent use of multiple handles     Statement handles restricted, see below</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Michael Peppler. He can be contacted via the
<em class="emphasis">dbi-users</em> mailing list, or at
<em class="email">mpeppler@peppler.org</em>.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::Sybase</tt> module supports Sybase
10.<em class="emphasis">x</em> and 11.<em class="emphasis">x</em>, and offers
limited support for accessing Sybase 4.<em class="emphasis">x</em> and
Microsoft MS-SQL servers, assuming availability of Sybase OpenClient,
or the FreeTDS libraries.</p>



<p>The standard release of MS-SQL 7 can not be accessed using the Sybase
libraries, but can be used using the FreeTDS libraries. There is a
patch for MS-SQL 7 to allow Sybase clients to connect:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../support.microsoft.com/support/kb/articles/q239/8/83.asp">http://support.microsoft.com/support/kb/articles/q239/8/83.asp</a></p>

</blockquote>



<p>The FreeTDS libraries (www.freetds.org) is an Open Source effort to
reverse engineer the TDS (Tabular Data Stream) protocol that both
Sybase and Microsoft use. FreeTDS is still in alpha, but
<tt class="literal">DBD::Sybase</tt> builds cleanly against the latest
release and suppports most functions (apart from
<tt class="literal">?</tt>-style placeholders).</p>



<p>Here are some URLs to more database/driver specific information:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.sybase.com/">http://www.sybase.com</a></p>

<p><a href="../../../../../../techinfo.sybase.com/">http://techinfo.sybase.com</a></p>

<p><a href="../../../../../../sybooks.sybase.com/">http://sybooks.sybase.com</a></p>

<p><a href="../../../../../../www.microsoft.com/sql">http://www.microsoft.com/sql</a></p>

<p><a href="../../../../../../www.freetds.org/">http://www.freetds.org</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p>The <tt class="literal">LongReadLen</tt> and <tt class="literal">LongTruncOk</tt>
attributes are not supported.</p>



<p>Note that <tt class="literal">DBD::Sybase</tt> does not fully parse the
statement until it's executed. Thus, attributes like
<tt class="literal">$sth-&gt;{NUM_OF_FIELDS}</tt> are not available until
after <tt class="literal">$sth-&gt;execute( )</tt> has been called. This is
valid behavior but is important to note when porting applications
originally written for other drivers.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The
<tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1267" />
Data Source Name, or DSN, has the following format:</p>



<blockquote><pre class="code">dbi:Sybase:attrs</pre></blockquote>



<p>where <tt class="literal">attrs</tt> is a semicolon-separated list of
<em class="emphasis">key=value</em> pairs. Valid attributes include:</p>



<dl>
<dt><b>server</b></dt>
<dd><p>Specifies the Sybase server to connect to.</p></dd>



<dt><b>database </b></dt>
<dd><p>Specifies the database within the server that should be made the
default database for this session (via <tt class="literal">USE
database</tt>).</p></dd>



<dt><b>charset </b></dt>
<dd><p>Specifies the client character set to use. Useful if the
client's default character set is different from the server.
Using this will enable automatic character conversion from one
character set to the other.</p></dd>

</dl>



<p><tt class="literal">DBD::Sybase</tt> supports an unlimited number of
concurrent database connections to one or more databases.</p>



<p>It is not normally possible for Sybase clients to prepare/execute a
new statement handle while still fetching data from another statement
handle that is associated with the same database handle. However,
<tt class="literal">DBD::Sybase</tt> emulates this process by opening a new
connection that will automatically be closed when the new statement
handle is destroyed. You should be aware that there are some subtle
but significant transaction issues with this approach.</p>




<h4 class="refsect1">Datatypes</h4>




<h4 class="refsect2">Numeric data handling </h4>



<p>The 
<a name="INDEX-1268" />driver
supports <tt class="literal">INTEGER</tt>, <tt class="literal">SMALLINT</tt>,
<tt class="literal">TINYINT</tt>, <tt class="literal">MONEY</tt>,
<tt class="literal">SMALLMONEY</tt>, <tt class="literal">FLOAT</tt>,
<tt class="literal">REAL</tt>, <tt class="literal">DOUBLE</tt>,
<tt class="literal">NUMERIC(p,s)</tt>, and <tt class="literal">DECIMAL(p,s)</tt>.</p>



<p><tt class="literal">INTEGER</tt> is always a 32-bit int,
<tt class="literal">SMALLINT</tt> is 16-bit, and <tt class="literal">TINYINT</tt>
is 8-bit. All others except the
<tt class="literal">NUMERIC</tt>/<tt class="literal">DECIMAL</tt> datatypes are
hardware specific. Precision for
<tt class="literal">NUMERIC</tt>/<tt class="literal">DECIMAL</tt> is from 1 to
38, and scale is from
to 38.</p>



<p><tt class="literal">NUMERIC</tt>/<tt class="literal">DECIMAL</tt> values are
returned as Perl strings by default, even if the scale is
and the precision is small enough to fit in an integer value. All
other numbers are returned in native format.</p>






<h4 class="refsect2">String data handling </h4>



<p><tt class="literal">DBD::Sybase</tt> supports <tt class="literal">CHAR</tt>,
<tt class="literal">VARCHAR</tt>, <tt class="literal">BINARY</tt>, and
<tt class="literal">VARBINARY</tt>, all limited to 255 characters in
length. The <tt class="literal">CHAR</tt> type is fixed-length and
blank-padded.</p>



<p>Sybase automatically converts <tt class="literal">CHAR</tt> and
<tt class="literal">VARCHAR</tt> data between the character set of the
server (see the <tt class="literal">syscharset</tt> system table) and the
character set of the client, defined by the locale setting of the
client. The <tt class="literal">BINARY</tt> and
<tt class="literal">VARBINARY</tt> types are not converted. UTF-8 is
supported.</p>



<p>See the "OpenClient International Developer's
Guide" in the Sybase OpenClient manuals for more on character
set issues.</p>



<p>Strings can be concatenated using the SQL <tt class="literal">+</tt>
operator.</p>






<h4 class="refsect2">Date data handling </h4>



<p>Sybase supports the <tt class="literal">DATETIME</tt> and
<tt class="literal">SMALLDATETIME</tt> values. A
<tt class="literal">DATETIME</tt> can have a value from Jan 1 1753 to Dec
31, 9999 with a 300th of a second resolution. A
<tt class="literal">SMALLDATETIME</tt> has a range of Jan 1 1900 to Jun 6
2079 with a one-minute resolution.</p>



<p>The current date on the server is obtained with the <tt class="literal">GETDATE(
)</tt> SQL function.</p>



<p>The Sybase date format depends on the locale settings for the client.
The default date format is based on the "C" locale:</p>



<blockquote><pre class="code">Feb 16 1999 12:07PM</pre></blockquote>



<p>In this same locale, Sybase understands several input formats in
addition to the one above:</p>



<blockquote><pre class="code">2/16/1998 12:07PM
1998/02/16 12:07
1998-02-16 12:07
19980216 12:07</pre></blockquote>



<p>If the time portion is omitted, it is set to 00:00. If the date
portion is omitted, it is set to Jan 1 1900. If the century is
omitted, it is assumed to be 2000 if year &lt; 50, and 1900 if year
&gt;= 50.</p>



<p>You can use the special <tt class="literal">_date_fmt( )</tt> private
method (accessed via <tt class="literal">$dbh-&gt;func( )</tt>) to change
the date input and output format. The formats are based on
Sybase's standard conversion routines. The following subset of
available formats has been implemented:</p>



<blockquote><pre class="code">LONG        - Nov 15 1998 11:30:11:496AM
SHORT       - Nov 15 1998 11:30AM
DMY4_YYYY   - 15 Nov 1998
MDY1_YYYY   - 11/15/1998
DMY1_YYYY   - 15/11/1998
HMS         - 11:30:11</pre></blockquote>



<p>Use the <tt class="literal">CONVERT( )</tt> SQL function to convert date
and time values from other formats. For example:</p>



<blockquote><pre class="code">UPDATE a_table 
    SET date_field = CONVERT(datetime_field, '1999-02-21', 105)</pre></blockquote>



<p><tt class="literal">CONVERT( )</tt> is a generic conversion function that
can convert to and from most datatypes. See the <tt class="literal">CONVERT(
)</tt> function in Chapter 2 of the Sybase Reference Manual.</p>



<p>Arithmetic on date/time types is done on dates via the
<tt class="literal">DATEADD( )</tt>, <tt class="literal">DATEPART( )</tt>, and
<tt class="literal">DATEDIFF( )</tt> Transact SQL functions. For example:</p>



<blockquote><pre class="code">SELECT DATEDIFF(ss, date1, date2)</pre></blockquote>



<p>returns the difference in seconds between <tt class="literal">date1</tt>
and <tt class="literal">date2</tt>.</p>



<p>Sybase does not understand time zones at all, except that the
<tt class="literal">GETDATE( )</tt> SQL function returns the date in the
time zone that the server is running in (via
<tt class="literal">localtime</tt>).</p>



<p>The following SQL expression can be used to convert an integer
"seconds since 1-jan-1970" value ("Unix
time") to the corresponding database date/time:</p>



<blockquote><pre class="code">DATEADD(ss, unixtime_field, 'Jan 1 1970')</pre></blockquote>



<p>Note however that the server does not understand time zones, and will
therefore give the local Unix time on the server, and not the correct
value for the GMT time zone.</p>



<p>If you know that the server runs in the same time zone as the client,
you can use:</p>



<blockquote><pre class="code">use Time::Local;
$time_to_database = timegm(localtime($unixtime));</pre></blockquote>



<p>to convert the Unix time value before sending it to Sybase.</p>



<p>To do the reverse, converting from a database date/time value to Unix
time, you can use:</p>



<blockquote><pre class="code">DATEDIFF(ss, 'Jan 1 1970', datetime_field)</pre></blockquote>



<p>The same GMT versus localtime caveat applies in this case. If you
know that the server runs in the same time zone as the client, you
can convert the returned value to the correct GMT-based value with
this Perl expression:</p>



<blockquote><pre class="code">use Time::Local;
$time = timelocal(gmtime($time_from_database));</pre></blockquote>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p>Sybase supports an <tt class="literal">IMAGE</tt> and a
<tt class="literal">TEXT</tt> type for
<tt class="literal">LONG</tt>/<tt class="literal">BLOB</tt> data. Each type can
hold up to 2 GB of binary data, including <tt class="literal">nul</tt>
characters. The main difference between an <tt class="literal">IMAGE</tt>
and a <tt class="literal">TEXT</tt> column lies in how the client libraries
treat the data on input and output. <tt class="literal">TEXT</tt> data is
entered and returned "as is." <tt class="literal">IMAGE</tt>
data is returned as a long hex string, and should be entered in the
same way.</p>



<p><tt class="literal">LongReadLen</tt> and <tt class="literal">LongTrunkOk</tt>
attributes have no effect. The default limit for
<tt class="literal">TEXT</tt>/<tt class="literal">IMAGE</tt> data is 32 KB, but
this can be changed by the <tt class="literal">SET</tt>
<tt class="literal">TEXTSIZE</tt> Transact-SQL command.</p>



<p>Bind parameters can <em class="emphasis">not</em> be used to insert
<tt class="literal">TEXT</tt> or <tt class="literal">IMAGE</tt> data to Sybase.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::Sybase</tt> driver does not support the
<tt class="literal">type_info( )</tt> method yet.</p>



<p>Sybase does not automatically convert numbers to strings or strings
to numbers. You need to explicitly call the
<tt class="literal">CONVERT</tt> SQL function. However, placeholders
don't need special handling because
<tt class="literal">DBD::Sybase</tt> knows what type each placeholder needs
to be.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p><tt class="literal">DBD::Sybase</tt>

<a name="INDEX-1269" />supports
transactions. The default transaction isolation level is READ
COMMITTED.</p>



<p>Sybase supports READ COMMITED, READ UNCOMMITED, and SERIALIZABLE
isolation levels. The level be changed per-connection or
per-statement by executing <tt class="literal">SET TRANSACTION_ISOLATION LEVEL
x</tt>, where <tt class="literal">x</tt> is
for READ UNCOMMITED, 1 for READ COMMITED, and 3 for SERIALIZABLE.</p>



<p>By default, a READ query will acquire a shared lock on each page that
it reads. This will allow any other process to read from the table,
but will block any process trying to obtain an exclusive lock (for
update). The shared lock is only maintained for the time the server
needs to actually read the page, not for the entire length of the
<tt class="literal">SELECT</tt> operation. (11.9.2 and later servers have
various additional locking mechanisms.)</p>



<p>There is no explicit <tt class="literal">LOCK</tt> <tt class="literal">TABLE</tt>
statement. Appending <tt class="literal">WITH</tt>
<tt class="literal">HOLDLOCK</tt> to a <tt class="literal">SELECT</tt> statement
can be used to force an exclusive lock to be acquired on a table, but
is rarely needed.</p>



<p>The correct way to do a multi-table update with Sybase is to wrap the
entire operation in a transaction. This will ensure that locks will
be acquired in the correct order, and that no intervening action from
another process will modify any rows that your operation is currently
modifying.</p>



<h4 class="refsect1">SQL Dialect</h4>




<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1270" />
operator is case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p>Outer joins are supported using the <tt class="literal">=*</tt> (right
outer join) and <tt class="literal">*=</tt> (left outer join) operators:</p>



<blockquote><pre class="code">SELECT customers.customer_name, orders.order_date 
FROM customers, orders 
WHERE customers.cust_id =* orders.cust_id</pre></blockquote>



<p>For all rows in the customer's table that have no matching rows
in the orders table, Sybase returns NULL for any select list
expressions containing columns from the orders table.</p>






<h4 class="refsect2">Table and column names </h4>



<p>The names of identifiers, such as tables and columns, cannot exceed
thirty characters in length.</p>



<p>The first character must be an alphabetic character (as defined by
the current server character set) or an underscore ( <tt class="literal">_
</tt>). Subsequent characters can be alphabetic, and may include
currency symbols, <tt class="literal">@</tt>, <tt class="literal">#</tt>, and
<tt class="literal">_</tt>. Identifiers can't include embedded spaces
or the <tt class="literal">%</tt>, <tt class="literal">!</tt>,
<tt class="literal">^</tt>, <tt class="literal">*</tt>, or <tt class="literal">.</tt>
symbols. In addition, identifiers must not be on the "reserved
word" list (see the Sybase documentation for a complete list).</p>



<p>Table names or column names <em class="emphasis">may</em> be quoted if the
<tt class="literal">set</tt><span class="acronym">
</span><tt class="literal">quoted_identifier</tt> option is turned on.
This allows the user to get around the reserved word limitation. When
this option is set, character strings enclosed in double quotes are
treated as identifiers, and strings enclosed in single quotes are
treated as literal strings.</p>



<p>By default identifiers are case-sensitive. This can be turned off by
changing the default sort order for the server.</p>



<p>National characters can be used in identifier names without quoting.</p>






<h4 class="refsect2">Row ID </h4>



<p>Sybase does not support a pseudo "row ID" column.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p>Sybase supports an <tt class="literal">IDENTITY</tt> feature for automatic
key generation. Declaring a table with an <tt class="literal">IDENTITY</tt>
column will generate a new value for each insert. The values assigned
always increase but are not guaranteed to be sequential.</p>



<p>To fetch the value generated and used by the last insert, you can:</p>



<blockquote><pre class="code">SELECT @@IDENTITY</pre></blockquote>



<p>Sybase does not support sequence generators, although ad hoc stored
procedures to generate sequence numbers are quite easy to
write.<a href="#FOOTNOTE-76">[76]</a></p><blockquote>


<a name="FOOTNOTE-76" /><p>[76]See <a href="../../../../../../techinfo.sybase.com/css/techinfo.nsf/DocID/ID=860">http://techinfo.sybase.com/css/techinfo.nsf/DocID/ID=860</a>
for a complete explanation of the various possibilities.</p>


</blockquote>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p>Sybase does not support positioned updates or deletes.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter 
<a name="INDEX-1271" />binding is directly suported by
Sybase. However, there are two downsides that you should be aware of.</p>



<p>Firstly, <tt class="literal">DBD::Sybase</tt> creates an internal stored
procedure for each <tt class="literal">prepare()</tt> call that includes
<tt class="literal">?</tt> style parameters. These stored procedures live
in the <em class="emphasis">tempdb</em> database, and are only destroyed
when the connection is closed. It is quite possible to run out of
<em class="emphasis">tempdb</em> space if a lot of
<tt class="literal">prepare()</tt> calls with placeholders are being made
in a script.</p>



<p>Secondly, because all the temporary stored procedures are created in
<em class="emphasis">tempdb</em>, this causes a potential hot spot due to
the locking of system tables in <em class="emphasis">tempdb</em>. This
performance problem may be removed in an upcoming release of Sybase
(possibly 11.9.4 or 12.0).</p>



<p>The <tt class="literal">:1</tt> placeholder style is not supported and the
<tt class="literal">TYPE</tt> attribute to <tt class="literal">bind_ param()</tt>
is currently ignored, so unsupported values don't generate a
warning. Finally, trying to bind a <tt class="literal">TEXT</tt> or
<tt class="literal">IMAGE</tt> datatype will fail.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Sybase stored 
<a name="INDEX-1272" />procedures are written in
Transact-SQL, which is Sybase's procedural extension to SQL.</p>



<p>Stored procedures are called exactly the same way as regular SQL, and
can return the same types of results (i.e., a
<tt class="literal">SELECT</tt> in the stored procedure can be retrieved
with <tt class="literal">$sth-&gt;fetch()</tt>).</p>



<p>If the stored procedure returns data via <tt class="literal">OUTPUT</tt>
parameters, then these must be declared first:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare(qq[
   declare \@name varchar(50)
   exec getName 1234, \@name output
]);</pre></blockquote>



<p>Stored procedures can't be called with <tt class="literal">bind</tt>
(<tt class="literal">?</tt>) parameters. So the following code would be
illegal:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare("exec my_proc ?");  # illegal
$sth-&gt;execute($foo);</pre></blockquote>



<p>Use this code instead:</p>



<blockquote><pre class="code">$sth = $dbh-&gt;prepare("exec my_proc '$foo'");
$sth-&gt;<em class="replaceable">execute()</em>;</pre></blockquote>



<p>Because Sybase stored procedures almost always return more than one
result set, you should always make sure to use a loop until
<tt class="literal">syb_more_results</tt> is 0:</p>



<blockquote><pre class="code">do {
  while($data = $sth-&gt;fetch) {
     ...
  }
} while($sth-&gt;{syb_more_results});</pre></blockquote>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::Sybase</tt> supports the
<tt class="literal">table_info()</tt> method.</p>



<p>The <tt class="literal">syscolumns</tt> table has one row per column per
table. See the definitions of the Sybase system tables for details.
However, the easiest method to obtain table metadata is to use the
<tt class="literal">sp_help</tt> stored procedure.</p>



<p>The easiest way to get detailed information about the indexes of a
table is to use the <tt class="literal">sp_helpindex</tt> (or
<tt class="literal">sp_helpkey</tt>) stored procedure.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::Sybase</tt>

<a name="INDEX-1273" />has the following driver-specific
database handle attributes:</p>



<dl>
<dt><b><tt class="literal">syb_show_sql</tt> </b></dt>
<dd><p>If set, then the current statement is included in the string returned
by <tt class="literal">$dbh-&gt;errstr</tt>.</p></dd>



<dt><b><tt class="literal">syb_show_eed</tt> </b></dt>
<dd><p>If set, then extended error information is included in the string
returned by <tt class="literal">$dbh-&gt;errstr</tt>. Extended error
information includes the index causing a duplicate insert to fail,
for example.</p></dd>

</dl>



<p><tt class="literal">DBD::Sybase</tt> has the following driver-specific
statement handle attributes:</p>



<dl>
<dt><b><tt class="literal">syb_more_results</tt> </b></dt>
<dd><p>Described elsewhere in this document.</p></dd>



<dt><b><tt class="literal">syb_result_type</tt> </b></dt>
<dd><p>Returns the numeric result type of the current result set. Useful
when executing stored procedures to determine what type of
information is currently fetchable (normal select rows, output
parameters, status results, etc.).</p></dd>

</dl>



<p>One private method is provided:</p>



<dl>
<dt><b><tt class="literal">_date_fmt</tt> </b></dt>
<dd><p>Sets the default date conversion and display formats. See the
description elsewhere in this document.</p></dd>

</dl>




<h4 class="refsect1">Other Significant Database or Driver Features </h4>



<p>Sybase and <tt class="literal">DBD::Sybase</tt> allow multiple statements
to be prepared with one call and then executed with one call. The
results are fed back to the client as a stream of tabular data.
Stored procedures can also return a stream of multiple data sets.
Each distinct set of results is treated as a normal single result
set, so <tt class="literal">fetch()</tt> returns <tt class="literal">undef</tt>
at the end of each set. To see if there are more data sets to follow,
the <tt class="literal">syb_more_results</tt> attribute can be checked.
Here is a typical loop making use of this Sybase-specific feature:</p>



<blockquote><pre class="code">do {
  while($d = $sth-&gt;fetch) {
    ... do something with the data
  }
} while($sth-&gt;{syb_more_results});</pre></blockquote>



<p>Sybase also has rich and powerful stored procedure and trigger
functionality and encourages you to use
them.
<a name="INDEX-1274" /></p>



</div>

<a name="INDEX-1275" /><a name="INDEX-1276" /><a name="INDEX-1277" /><a name="INDEX-1278" /><a name="INDEX-1279" /><a name="INDEX-1280" /><a name="INDEX-1281" /><a name="INDEX-1282" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DBD::XBase </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">General Information</h4>






<h4 class="refsect2">Driver version </h4>



<p><tt class="literal">DBD::XBase</tt>
<a name="INDEX-1275" /> <a name="INDEX-1276" /> version 0.145</p>






<h4 class="refsect2">Feature summary </h4>



<blockquote><pre class="code">Transactions                           No
Locking                                No
Table joins                            No
LONG/LOB datatypes                     Yes, up to 2 GB
Statement handle attributes available  After execute(  )
Placeholders                           Yes, "?" and ":1" styles (emulated)
Stored procedures                      No
Bind output values                     No
Table name letter case                 Sensitive, stored as defined
Field name letter case                 Insensitive, stored as uppercase
Quoting of otherwise invalid names     No
Case-insensitive "LIKE" operator       Yes, "LIKE"
Server table ROW ID pseudocolumn       No
Positioned update/delete               No
Concurrent use of multiple handles     Unrestricted</pre></blockquote>






<h4 class="refsect2">Author and contact details </h4>



<p>The driver author is Jan Pazdziora. He can be contacted at
<em class="email">adelton@fi.muni.cz</em> or <em class="emphasis">via</em>
the <em class="emphasis">dbi-users</em> mailing list.</p>






<h4 class="refsect2">Supported database versions and options </h4>



<p>The <tt class="literal">DBD::XBase</tt> module supports dBaseIII and IV and
Fox* flavors of <em class="emphasis">dbf</em> files, including their
<em class="emphasis">dbt</em> and <em class="emphasis">fpt</em> memo files.</p>



<p>Very comprehensive information about the XBase format, along with
many references, can be found at:</p>



<blockquote class="simplelist">

<p><a href="../../../../../../www.e-bachmann.dk/docs/xbase.htm">http://www.e-bachmann.dk/docs/xbase.htm</a></p>

</blockquote>






<h4 class="refsect2">Differences from the DBI specification </h4>



<p><tt class="literal">DBD::XBase</tt> does not fully parse the statement
until it is executed. Thus attributes like
<tt class="literal">$sth-&gt;{NUM_OF_FIELDS}</tt> are not available until
after <tt class="literal">$sth-&gt;execute( )</tt> has been called. This is
valid behavior but is important to note when porting applications
written originally for other drivers.</p>



<h4 class="refsect1">Connect Syntax </h4>



<p>The
<tt class="literal">DBI-&gt;connect()</tt>
<a name="INDEX-1277" />
Data Source Name, or DSN, should include the directory where the
<em class="emphasis">dbf</em> files are located as the third part:</p>



<blockquote><pre class="code">dbi:XBase:/path/to/directory</pre></blockquote>



<p>It defaults to the current directory.</p>



<p>There are no driver-specific attributes for the
<tt class="literal">DBI-&gt;connect()</tt> method.</p>



<p><tt class="literal">DBD::XBase</tt> supports an unlimited number of
concurrent database connections to one or more databases.</p>




<h4 class="refsect1">Datatypes</h4>






<h4 class="refsect2">Numeric data handling </h4>



<p><tt class="literal">DBD::XBase</tt>

<a name="INDEX-1278" />supports
generic <tt class="literal">NUMBER(p,s)</tt>,
<tt class="literal">FLOAT(p,s)</tt>, and <tt class="literal">INTEGER(l)</tt>
types. The maximum scale and precision is limited by Perl's
handling of numbers. In the <em class="emphasis">dbf</em> files, the
numbers are stored as ASCII strings, binary integers, or floats.</p>



<p>Existing <em class="emphasis">dbf</em> files come with the field types
defined in the <em class="emphasis">dbf</em> file header. Numeric types
can be either stored as ASCII string or in some binary format.
<tt class="literal">DBD::XBase</tt> (via <tt class="literal">XBase.pm</tt>)
parses this information and reads and writes the fields in that
format.</p>



<p>When you create a new <em class="emphasis">dbf</em> file
via <tt class="literal">CREATE TABLE</tt>, the numeric
fields are always created in the traditional XBase way, as an ASCII
string. (The <tt class="literal">XBase.pm</tt> module offers more control
over this process.)</p>



<p>Numeric fields are always returned as Perl numeric values, not
strings. Consequently, numbers outside of Perl's valid range
are not possible. This restriction might be withdrawn in the future.</p>






<h4 class="refsect2">String data handling </h4>



<p><tt class="literal">DBD::XBase</tt> has <tt class="literal">CHAR(length)</tt> and
<tt class="literal">VARCHAR(length)</tt> datatypes.</p>



<p>The maximum length is 65535 characters for both types.<a href="#FOOTNOTE-77">[77]</a></p><blockquote>


<a name="FOOTNOTE-77" /><p>[77]This limit is effective even though the older dBases allowed
only 254 characters. Therefore, newly created dbf files might not be
portable to older XBase-compatible software.</p>


</blockquote>



<p>Both <tt class="literal">CHAR</tt> <em class="emphasis">and</em>
<tt class="literal">VARCHAR</tt> are blank-padded, so
<tt class="literal">ChopBlanks</tt> applies to both.</p>



<p>Data with the eighth bit set are handled transparently. No national
language character set conversions are done. Since the string types
can store binary data, Unicode strings can be stored.</p>






<h4 class="refsect2">Date data handling </h4>



<p><tt class="literal">DBD::XBase</tt> supports these date and time types:</p>



<blockquote><pre class="code">DATE
DATETIME
TIME</pre></blockquote>



<p>The <tt class="literal">DATE</tt> type holds an eight-character string in
the format <tt class="literal">YYYYMMDD</tt>. Only that format can be used
for input and output. <tt class="literal">DBD::XBase</tt> doesn't
check for validity of the values.</p>



<p>The <tt class="literal">DATETIME</tt> and <tt class="literal">TIME</tt> types
internally store a four-byte integer day value and a four-byte
integer seconds value (counting 1/1000's of a second).
<tt class="literal">DBD::XBase</tt> inputs and outputs these types using a
floating-point Unix-style "seconds-since-epoch" value
(possibly with decimal part). This might change in the future.</p>



<p>There is no way to get the current date/time, and no SQL date/time
functions are supported. There is also no concept of time zones.</p>






<h4 class="refsect2">LONG/BLOB data handling </h4>



<p><tt class="literal">DBD::XBase</tt> supports a <tt class="literal">MEMO</tt>
datatype. <tt class="literal">BLOB</tt> can be used as an alias for
<tt class="literal">MEMO</tt>. Strings up to 2 GB can be stored in
<tt class="literal">MEMO</tt> fields (for all types of XBase memo files).</p>



<p>With dBaseIII <em class="emphasis">dbt</em> files, the memo field cannot
contain a <tt class="literal">0x1A</tt> byte. With dBaseIV and Fox*
<tt class="literal">dbt</tt>/<tt class="literal">fpt</tt>s, any character values
can be stored.</p>



<p>No special handling is required for fetching or inserting
<tt class="literal">MEMO</tt> fields. The <tt class="literal">LongReadLen</tt>
and <tt class="literal">LongTruncOk</tt> attributes are currently ignored.</p>






<h4 class="refsect2">Other data handling issues </h4>



<p>The <tt class="literal">DBD::XBase</tt> driver supports the
<tt class="literal">type_info( )</tt> method.</p>



<p><tt class="literal">DBD::XBase</tt> supports automatic conversions between
datatypes wherever it's reasonable.</p>



<h4 class="refsect1">Transactions, Isolation, and Locking </h4>



<p><tt class="literal">DBD::XBase</tt> does not support transactions and does
<em class="emphasis">not</em> lock the tables it is working on.</p>



<h4 class="refsect1">SQL Dialect</h4>





<h4 class="refsect2">Case sensitivity of LIKE operator </h4>



<p>The <tt class="literal">LIKE</tt>
<a name="INDEX-1279" />
operator is <em class="emphasis">not</em> case-sensitive.</p>






<h4 class="refsect2">Table join syntax </h4>



<p><tt class="literal">DBD::XBase</tt> does not support table joins.</p>






<h4 class="refsect2">Table and column names </h4>



<p>The XBase format stores each table as a distinct file. Memo fields
are stored in an additional file. The table names are limited by the
filesystem's maximum filename length. They are stored and
treated as entered. The case-sensitivity depends on the filesystem
that the file is stored on.</p>



<p>Column names are limited to eleven characters. They are stored as
uppercase, but are not case-sensitive.</p>



<p>Table and field names have to start with letter. Any combination of
letters, digits, and underscores may follow. National character sets
can be used.</p>



<p><tt class="literal">DBD::XBase</tt> does not support putting quotes around
table or column names.</p>






<h4 class="refsect2">Row ID </h4>



<p><tt class="literal">DBD::XBase</tt> does not support a "row ID"
pseudocolumn.</p>






<h4 class="refsect2">Automatic key or sequence generation </h4>



<p><tt class="literal">DBD::XBase</tt> does not support automatic key
generation or sequence generators owing to the limitations of the
XBase format.</p>






<h4 class="refsect2">Automatic row numbering and row count limiting </h4>



<p>Neither automatic row numbering nor row count limitations are
supported.</p>






<h4 class="refsect2">Positioned updates and deletes </h4>



<p><tt class="literal">DBD::XBase</tt> does not support positioned updates or
deletes.</p>



<h4 class="refsect1">Parameter Binding </h4>



<p>Parameter 
<a name="INDEX-1280" />binding is implemented in the driver
and supports the <tt class="literal">?</tt>, <tt class="literal">:1</tt>, and
<tt class="literal">:name</tt> placeholder styles.</p>



<p>The <tt class="literal">TYPE</tt> attribute to <tt class="literal">bind_
param()</tt> is ignored. Consequently, unsupported values of the
<tt class="literal">TYPE</tt> attribute do not currently generate a
warning.</p>




<h4 class="refsect1">Stored Procedures </h4>



<p>Stored procedures are not applicable in the XBase format.</p>




<h4 class="refsect1">Table Metadata </h4>



<p><tt class="literal">DBD::XBase</tt>

<a name="INDEX-1281" />supports the
<tt class="literal">table_info</tt> method.</p>



<p>There is no way to get detailed information about the columns of a
table (at the moment) other than by doing a <tt class="literal">SELECT * FROM
table</tt> and using the <tt class="literal">NAME</tt> and
<tt class="literal">TYPE</tt> attributes of the statement handle.</p>



<p>Keys and indexes are not currently supported.</p>




<h4 class="refsect1">Driver-Specific Attributes and Methods </h4>



<p><tt class="literal">DBD::XBase</tt> has just one driver-specific attribute
and that is valid for both database and statement handles:</p>



<dl>
<dt><b><tt class="literal">xbase_ignorememo</tt> </b></dt>
<dd><p>Ignore memo files and thus don't fail to read a table where the
memo file is missing or corrupt.</p></dd>

</dl>



<p><tt class="literal">DBD::XBase</tt> has no generally useful private

<a name="INDEX-1282" />methods.</p>



</div>










<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_15.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">A.15. Training</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">C. ASLaN Sacred Site Charter</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
