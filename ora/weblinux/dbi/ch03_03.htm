<?label 3.3. Querying Data ?><html><head><title>Querying Data  (Programming the Perl DBI)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Alligator Descartes and Tim Bunce" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565926994L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Programming the Perl DBI" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Programming the Perl DBI" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Programming the Perl DBI</a></td><td width="172" valign="top" align="right"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">3.3. Querying Data </h2>



<p>The <a name="INDEX-248" />first <a name="INDEX-249" />(and possibly most immediately useful)
operation that SQL allows you to perform on data is to select and
return rows of data from tables stored within the database. This
activity forms the core of exactly what a database represents, a
large repository of searchable information.</p>



<p>All SQL queries, no matter how simple or complex, use the
<tt class="literal">SELECT</tt>
<a name="INDEX-250" /> <a name="INDEX-251" /> keyword
to specify the columns to fetch, the tables to fetch them from, and
any conditions that must be met for the rows to be retrieved.
<tt class="literal">SELECT</tt> falls into the group of commands known as
<em class="emphasis">Data Manipulation
Language</em>
<a name="INDEX-252" />, or
<em class="emphasis">DML</em>, commands.</p>



<p>The full syntax for <tt class="literal">SELECT</tt> can be intimidating to
the new user, primarily because it sports a multitude of different
ways in which the query can be customized. For example, you might
wish to return only unique data rows, group certain rows together, or
even specify how the returned rows should be sorted.</p>



<p>For the moment, we'll just look at the simplest cases.</p>



<p>In our example, we've tended to use capital letters for SQL
commands and other reserved words, and lowercase letters for database
object names (tables, columns, etc.). In most databases, the SQL
commands are not case-sensitive, but the actual database object names
may or may not be.</p>



<a name="ch03-ch03_simple_0" /><div class="sect2">
<h3 class="sect2">3.3.1. Simple Queries </h3>



<p>The <a name="INDEX-253" />simplest <a name="INDEX-254" />SQL <a name="INDEX-255" /> <a name="INDEX-256" />query is to ask for certain columns in
all rows of a table. The <tt class="literal">SELECT</tt> syntax for this
form of query can be expressed as simply as:</p>



<blockquote><pre class="code">SELECT column, column, ..., column
FROM table</pre></blockquote>



<p>or:</p>



<blockquote><pre class="code">SELECT *
FROM table</pre></blockquote>



<p>which will query and fetch back all the columns within the specified
table.</p>



<p>Therefore, to select some of the rows from some columns in the
<tt class="literal">megaliths</tt> table, the following SQL statement can
be used:</p>



<blockquote><pre class="code">SELECT name, location, mapref
FROM megaliths</pre></blockquote>



<p>which would return the following information:</p>



<blockquote><pre class="code">+---------------------------------------------------------------+
| name         | location                          | mapref     |
+---------------------------------------------------------------+
| Callanish I  | Callanish, Isle of Lewis          | NB 213 330 |
| Lundin Links | Lundin Links, Fife, Scotland      | NO 404 027 |
| Stonehenge   | Near Amesbury, Wiltshire, England | SU 123 400 |
| Avebury      | Avebury, Wiltshire, England       | SU 103 700 |
| Sunhoney     | Near Insch, Aberdeenshire         | NJ 716 058 |
+---------------------------------------------------------------+</pre></blockquote>



<p>So even with the simplest SQL imaginable, the inherent flexibility of
the syntax allows us to easily specify exactly which information we
want from the database without having to write lots of excruciating
lines of code to get it.</p>



<p>Another aspect of the relational database methodology is now visible,
in that even though the database contains information on all the
columns within a particular table, only a subset of the available
columns needs to be retrieved. Therefore, we can extract
<em class="emphasis">exactly</em> the data we need for a particular query
and no more. This is an extremely powerful feature and separates the
actual data stored within the database from our desired view of that
data.</p>
</div>








<a name="ch03-ch03_queries_0" /><div class="sect2">
<h3 class="sect2">3.3.2. Queries and Condition Clauses </h3>



<p>The <a name="INDEX-257" />previous <a name="INDEX-258" />example <a name="INDEX-259" />relied on retrieving all the rows
within a table, whereas the more ordinary, everyday database
operations will usually require more accurate targeting of specific
rows. For example, "Tell me the names of all the stone circles
in Wiltshire" is a more specific query than "Tell me
about all the stone circles in the database." To achieve this
task, SQL provides the ability to specify
<em class="emphasis">conditions</em> that must be met before a row is
returned to the user.</p>



<p>SQL's syntax regarding condition clauses is just as
straightforward and obvious as that for specifying which columns are
of interest. The condition clauses that narrow the query are
specified <em class="emphasis">after</em> the list of tables from which
data is being retrieved, i.e., after the <tt class="literal">FROM</tt>
clause and table list.</p>



<p>Therefore, a query that retrieves the <tt class="literal">name</tt> and
<tt class="literal">location</tt> columns from rows that contain the string
``Wiltshire'' in the
<tt class="literal">location</tt> column, can be written as:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE location LIKE '%Wiltshire%'</pre></blockquote>



<p>The information returned from this query would be:</p>



<blockquote><pre class="code">+--------------------------------------------------+
| name         | location                          |
+--------------------------------------------------+
| Stonehenge   | Near Amesbury, Wiltshire, England |
| Avebury      | Avebury, Wiltshire, England       |
+--------------------------------------------------+</pre></blockquote>



<p>The returned information shows just the columns specified for the
sites that have a <tt class="literal">location</tt> value containing the
string, ``Wiltshire.'' The
<tt class="literal">WHERE</tt>
<a name="INDEX-260" /> <a name="INDEX-261" /> keyword
is the one that specifies the beginning of the list of conditions
that must be met for each row to be returned. That is, the condition
states that the <tt class="literal">location</tt> column value must contain
the desired string<a name="INDEX-262" /> <a name="INDEX-263" />
``Wiltshire.''<a href="#FOOTNOTE-24">[24]</a></p><blockquote>


<a name="FOOTNOTE-24" /><p>[24]The %
character, in this case, is used as the standard SQL wildcard
character to match any number of characters. A few databases use *
instead.</p>


</blockquote>



<p>The following table lists all of the <em class="emphasis">comparison
operators</em>
<a name="INDEX-264" /> used by SQL for testing condition
clauses. These conditions are generally Perl-like and should be
familiar.</p>



<a name="ch03-1-fm2xml" /><table border="1">



<tr>
<th>
<p>Operator</p></th>
<th>
<p>Purpose</p></th>
</tr>






<tr>
<td>
<p>
<a name="INDEX-265" /><tt class="literal">=</tt></p></td>
<td>
<p>This operator tests exact equality between columns and/or literal
values. For example, the query:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE location = 'Fife'</pre></blockquote>



<p>will return all rows where the location column is equal to the value
"Fife".</p></td>
</tr>


<tr>
<td>
<p>
<a name="INDEX-266" /><tt class="literal">&lt;&gt;</tt></p></td>
<td>
<p>This operator tests for inequality between columns and/or literal
values. For example, the query:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE location &lt;&gt; 'Fife'</pre></blockquote>



<p>will return all rows where the location column is not equal to the
value "Fife". Some databases alternatively use the
<tt class="literal">!=</tt>, <tt class="literal">^=</tt>, or
<tt class="literal">~=</tt> operators instead of
<tt class="literal">&lt;&gt;</tt>.</p></td>
</tr>


<tr>
<td>
<p>
<a name="INDEX-267" /><tt class="literal">&gt;</tt> and
<a name="INDEX-268" /><tt class="literal">&lt;</tt></p></td>
<td>
<p>These two operators represent ``greater
than'' and ``less than'' tests
between columns and/or literal values. For example, the query:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE id &lt; 10 
AND id &gt; 5</pre></blockquote>



<p>will return the name and location of all megalithic sites whose
<tt class="literal">id</tt> value is less than 10 and greater than 5. The
type of comparison used depends on the datatype of the values
involved. So numeric values are compared as numbers, string values
are compared as strings, and date values are compared as dates.</p>




<p>On a related note, there also exists the <tt class="literal">&lt;=</tt> and
<tt class="literal">&gt;=</tt> operators that perform ``less
than or equal to'' and ``greater than or
equal to'' tests, respectively.</p></td>
</tr>


<tr>
<td>
<p><tt class="literal">IN</tt>
<a name="INDEX-269" /></p></td>
<td>
<p>This keyword tests equality of a column and/or literal value within a
specified set of values. For example, the query:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE location IN ( 'Western Isles', 'Fife' )</pre></blockquote>



<p>will compare each member of the set using the equality operator
against the specified column. Therefore, in this example, rows with a
location column value of either ``Western
Isles'' or ``Fife'' will be
returned.</p></td>
</tr>


<tr>
<td>
<p><tt class="literal">LIKE</tt>
<a name="INDEX-270" /></p></td>
<td>
<p>The <tt class="literal">LIKE</tt> operator allows limited wildcard matching
of strings against columns and/or literal values. For example, the
query:</p>



<blockquote><pre class="code">SELECT name, description
FROM megaliths
WHERE description LIKE '%Largest%'</pre></blockquote>



<p>will return the name and description columns where the description
column contains the string ``Largest'' at any
position in the string.</p>




<p>Wildcard matches for characters in the string may be specified by
using either the percent ( % ) character for multiple-character
wildcarding or an underscore ( _ ) for single-character
matching.<a href="#FOOTNOTE-25">[25]</a></p><blockquote>


<a name="FOOTNOTE-25" /><p>[25]Some databases use other names instead of
<tt class="literal">LIKE</tt>, such as <tt class="literal">MATCHES</tt> or
<tt class="literal">CONTAINS</tt>, and may use different wildcard
characters such as <tt class="literal">*</tt> or
<tt class="literal">?</tt>.</p>


</blockquote></td>
</tr>



</table><blockquote>


<a name="FOOTNOTE-25" /><p>[25]Some databases use other names instead of
<tt class="literal">LIKE</tt>, such as <tt class="literal">MATCHES</tt> or
<tt class="literal">CONTAINS</tt>, and may use different wildcard
characters such as <tt class="literal">*</tt> or
<tt class="literal">?</tt>.</p>


</blockquote>

<p>Over time, the megalithic database might expand and contain
information on thousands of sites in the country. Therefore, to
quickly locate records, we might need to narrow the search criteria
by specifying other condition clauses that must be met for a record
to be returned. For example, if you wished to find information on all
stone circles in Wiltshire, doing a query simply for all sites in
``Wiltshire'' could return hundreds of
records, which you would have to wade through by hand. We can
<a name="INDEX-271" />narrow this search by specifying as
an extra condition that the <tt class="literal">mapref</tt> column must
also begin with the string <tt class="literal">SU 123</tt>:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE location LIKE '%Wiltshire%'
AND mapref LIKE 'SU 123%'</pre></blockquote>



<p>In this example, the second condition is simply added to the end of
the list of conditions that must be met. The two conditions are
joined together by a logical operator, <tt class="literal">AND</tt>. This
statement now reads "Give me the name and location of all
megalithic sites with a location of Wiltshire that are in the map
region SU 123," which would return the <tt class="literal">name</tt>
and <tt class="literal">location</tt> fields for the
"Stonehenge" row, but reject the "Avebury"
row.</p>



<p>Thus, <a name="INDEX-272" /> <a name="INDEX-273" />conditions
can be joined together into multiple condition lists, linked by
logical boolean operators that control how the truth of the condition
is evaluated.</p>



<p>The following table describes the boolean (or logical) operators
defined by SQL that can be used to chain your condition clauses
together.</p>



<a name="ch03-2-fm2xml" /><table border="1">







<tr>
<th>
<p>Operator</p></th>
<th>
<p>Function</p></th>
</tr>







<tr>
<td>
<p>
<a name="INDEX-274" />AND</p></td>
<td colspan="NaN">
<p>Returns the logical AND of the two clauses on either side of the
keyword. The following <a name="INDEX-275" />truth table can be used to evaluate
whether the combined clause is true or not.</p></td>
</tr>


<tr>
<td />
<td />
<td>
<p><b class="emphasis-bold">TRUE</b></p></td>
<td>
<p><b class="emphasis-bold">FALSE</b></p></td>
<td>
<p><b class="emphasis-bold">NULL</b></p></td>
</tr>


<tr>
<td />
<td>
<p><b class="emphasis-bold">TRUE</b></p></td>
<td>
<p>true</p></td>
<td>
<p>false</p></td>
<td>
<p>null</p></td>
</tr>


<tr>
<td />
<td>
<p><b class="emphasis-bold">FALSE</b></p></td>
<td>
<p>false</p></td>
<td>
<p>false</p></td>
<td>
<p>false</p></td>
</tr>


<tr>
<td />
<td>
<p><b class="emphasis-bold">NULL</b></p></td>
<td>
<p>null</p></td>
<td>
<p>false</p></td>
<td>
<p>null</p></td>
</tr>


<tr>
<td>
<p>
<a name="INDEX-276" />OR</p></td>
<td colspan="NaN">
<p>Returns the logical OR of the two clauses on either side of the
keyword. The following truth table can be used to evaluate whether
the combined clause is true or not.</p></td>
</tr>


<tr>
<td />
<td />
<td>
<p><b class="emphasis-bold">TRUE</b></p></td>
<td>
<p><b class="emphasis-bold">FALSE</b></p></td>
<td>
<p><b class="emphasis-bold">NULL</b></p></td>
</tr>


<tr>
<td />
<td>
<p><b class="emphasis-bold">TRUE</b></p></td>
<td>
<p>true</p></td>
<td>
<p>true</p></td>
<td>
<p>true</p></td>
</tr>


<tr>
<td /><td>
<p><b class="emphasis-bold">FALSE</b></p></td>
<td>
<p>true</p></td>
<td>
<p>false</p></td>
<td>
<p>null</p></td>
</tr>


<tr>
<td /><td>
<p><b class="emphasis-bold">NULL</b></p></td>
<td>
<p>true</p></td>
<td>
<p>null</p></td>
<td>
<p>null</p></td>
</tr>


<tr>
<td>
<p>
<a name="INDEX-277" />NOT</p></td>
<td colspan="NaN">
<p>Negates the logical value of the following expression. The following
truth table illustrates this in operation.</p></td>
</tr>


<tr>
<td />
<td />
<td>
<p><b class="emphasis-bold">TRUE</b></p></td>
<td>
<p><b class="emphasis-bold">FALSE</b></p></td>
<td>
<p><b class="emphasis-bold">NULL</b></p></td>
</tr>


<tr>
<td />
<td />
<td>
<p>false</p></td>
<td>
<p>true</p></td>
<td>
<p>null</p></td>
</tr>



</table>

<p>The truth of the overall condition is determined by combining the
truth of each element separately using the <tt class="literal">AND</tt>,
<tt class="literal">OR</tt>, and <tt class="literal">NOT</tt> operators.</p>



<p>It is now possible to calculate the effects of multiple condition
clauses in a statement. For example, the following condition clauses:</p>



<blockquote><pre class="code">WHERE location LIKE '%Wiltshire%'
AND mapref LIKE 'SU 123%'</pre></blockquote>



<p>evaluate in the following way for this row:</p>



<blockquote><pre class="code">+----------------------------------------------------------+
| name          | mapref     | location                    |
+----------------------------------------------------------+
| Avebury       | SU 103 700 | Avebury, Wiltshire, England |
+----------------------------------------------------------+

location LIKE '%Wiltshire%'     =&gt; TRUE
mapref LIKE 'SU 123%'           =&gt; FALSE

TRUE AND FALSE =&gt; FALSE</pre></blockquote>



<p>thereby returning a false value for that row, causing it to be
rejected by the query. However, the following row:</p>



<blockquote><pre class="code">+---------------------------------------------------------------+
| name         | mapref     | location                          |
+---------------------------------------------------------------+
| Stonehenge   | SU 123 400 | Near Amesbury, Wiltshire, England |
+---------------------------------------------------------------+</pre></blockquote>



<p>evaluates as:</p>



<blockquote><pre class="code">location LIKE '%Wiltshire%'     =&gt; TRUE
mapref LIKE 'SU 123%'           =&gt; TRUE

TRUE AND TRUE =&gt; TRUE</pre></blockquote>



<p>which ensures that the row is returned by the query.</p>



<p>When combining different logical operators, it is important to
consider their
<em class="emphasis">precedence</em>
<a name="INDEX-278" />. The
precedence (or priority) of the operators determines which gets
combined first. The SQL standard specifies that
<tt class="literal">NOT</tt> has the highest precedence, followed by
<tt class="literal">AND</tt>, and then <tt class="literal">OR</tt>. Parentheses
can be used around groups of operators to change their precedence.</p>



<p>For example, you might wish to select all the megalithic sites in
either ``Wiltshire'' or
``Fife'' for which the description of the
site contains the word ``awe-inspiring.''</p>



<p>This query could be wrongly expressed as:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE location LIKE '%Wiltshire%' OR location LIKE '%Fife%'
AND description LIKE '%awe-inspiring%'</pre></blockquote>



<p>While this query looks correct at first, it does not take into
account the order in which the condition clauses are combined. It
would, in fact, select the awe-inspiring sites in Fife, but it would
also select <em class="emphasis">all</em> the sites in Wiltshire
regardless of their type.</p>



<p>This happens because the <tt class="literal">AND</tt> operator has a higher
precedence than the <tt class="literal">OR</tt> operator and so is
evaluated first. Therefore, our SQL statement evaluates by
<tt class="literal">AND</tt> combining <tt class="literal">location</tt>
<tt class="literal">LIKE</tt> <tt class="literal">%Fife%</tt> and
<tt class="literal">description</tt> <tt class="literal">LIKE</tt>
<tt class="literal">%awe-inspiring%</tt>. It then <tt class="literal">OR</tt>
combines the result of the <tt class="literal">AND</tt> operation with
<tt class="literal">location</tt> <tt class="literal">LIKE %Wiltshire%</tt>. This
isn't quite what we had in mind.</p>



<p>This query can be more correctly written by using parentheses to
logically group operators within the statement.</p>



<p>For example:</p>



<blockquote><pre class="code">SELECT name, location
FROM megaliths
WHERE ( location LIKE '%Wiltshire%' OR location LIKE '%Fife%' )
AND description LIKE '%awe-inspiring%'</pre></blockquote>



<p>This changes the way in which the condition clauses are evaluated by
evaluating the grouped clauses into a single truth value for the
entire group. This is then used instead of truth values for each
individual clause within the group.<a name="INDEX-279" /></p>



<p>Finally, there is another even more complex way of specifying
condition clauses that is used quite frequently. This technique is to
supply the values with which we are doing a comparison from a
subquery.<a href="#FOOTNOTE-26">[26]</a> For example:</p><blockquote>


<a name="FOOTNOTE-26" /><p>[26]Support for this functionality is not
necessarily present in all database systems supported by the DBI and
its drivers.</p>


</blockquote>



<blockquote><pre class="code">SELECT name, description
FROM megaliths
WHERE name IN
    ( SELECT tourist_sitename
      FROM wiltshire_tourist_sites )</pre></blockquote>



<p>If we knew in advance that the subquery would return only a single
row of information, then the <tt class="literal">=</tt> operator could be
used <a name="INDEX-280" />instead <a name="INDEX-281" />of <a name="INDEX-282" /><tt class="literal">IN</tt>.</p>
</div>








<a name="ch03-ch03_queries_1" /><div class="sect2">
<h3 class="sect2">3.3.3. Queries over Multiple Tables </h3>



<p>The <a name="INDEX-283" />previous <a name="INDEX-284" />section
covered the structure of SQL statements in general, and how SQL may
be used to query data from single tables in the database. However,
from the discussion on relational database theory earlier in this
chapter, you should remember that the power and flexibility of
relational database design lies in the ability to <a name="INDEX-285" />join tables together -- that is, to
link disparate records of data that are held in separate tables to
reduce data duplication. This linking of records is a key part of
working with relational databases.</p>



<p>To illustrate this concept, it is time to reintroduce the other
tables we shall be using in our examples, namely the
<tt class="literal">media</tt> table and <tt class="literal">site_types</tt>
table.</p>



<p>The <tt class="literal">media</tt> table contains information on where
multimedia clips for given sites can be located, allowing an external
application to view or listen to these clips while the user is
reading the textual information on the site stored in the
<tt class="literal">megaliths</tt> table.</p>



<p>Similarly, the <tt class="literal">site_types</tt> table contains a lookup
table of the different categorizations of megalithic sites described
within the database.</p>



<p>To specify a <tt class="literal">SELECT</tt> statement from two or more
tables in the database, we simply add the table names after the
<tt class="literal">FROM</tt> keyword. Therefore, a sample query to fetch
all the rows in two of the tables should theoretically look something
like:</p>



<blockquote><pre class="code">SELECT name, description, location, url, content_type
FROM megaliths, media</pre></blockquote>



<p>However, the output from this query will look somewhat scrambled. For
each and every row in the first table, <em class="emphasis">all</em> the
rows in the second table will be selected!<a href="#FOOTNOTE-27">[27]</a> This means that
the media records for ``Lundin Links'' may be
returned at the same time as the site information for
``Avebury.''</p><blockquote>


<a name="FOOTNOTE-27" /><p>[27]This is
known as a "<a name="INDEX-286" />Cartesian Product." If there were
100 rows in each, you'd get 10,000 rows returned. If there were
1,000,000 rows in each, you'd get 1,000,000,000,000 rows
returned. To avoid this, you should ensure that if you have
<em class="replaceable">n</em> tables, you have at least <em class="replaceable">n
- 1</em> join conditions.</p>


</blockquote>



<p>How do you make sure that the values in the fields from the second
table related to the values from the first -- that is, that the
media clips for ``Stonehenge'' are only
returned with the ``Stonehenge'' site
information?</p>



<p>In our <tt class="literal">megaliths</tt> table, we have already defined a
column called <tt class="literal">id</tt> that contains a unique identifier
for each and every row stored within the table. Similarly, the
<tt class="literal">media</tt> table has a column called
<tt class="literal">id</tt> that performs the same purpose. Furthermore,
the <tt class="literal">media</tt> table also contains a column called
<tt class="literal">megaliths_id</tt>. When a row is inserted into the
<tt class="literal">megaliths</tt> or <tt class="literal">media</tt> tables, a
unique identifier is inserted into the <tt class="literal">id</tt> columns.
Also, when a row is inserted into the <tt class="literal">media</tt> table,
the <tt class="literal">megaliths_id</tt> column is populated with the
unique identifier of the megalithic site to which the media clip
relates.</p>



<p>This relationship of a link field is generally termed a
<a name="INDEX-287" /> <a name="INDEX-288" /> <a name="INDEX-289" /><em class="emphasis">primary key</em> and
<em class="emphasis">foreign key</em> relationship. The primary key is the
unique value stored within the ``master''
table. The foreign key is that same value stored within multiple rows
of the other ``detail'' table.</p>



<p>We can now write a query to fetch the appropriate information back
from the database by joining the two tables on their related fields.
This ensures that the media clips are associated with the correct
site:</p>



<blockquote><pre class="code">SELECT name, description, url, content_type
FROM megaliths, media
WHERE megaliths.id = megaliths_id</pre></blockquote>



<p>This illustrates another aspect of SQL conditions: instead of testing
arbitrary values against columns in a table, it is possible to test
against the value of another column. In the above case, we test to
see if the primary and foreign keys of the two tables match, and, if
so, the aggregated row created from the columns of both tables is
returned.</p>



<p>Also note how we qualified the <tt class="literal">id</tt> field name in
the condition clause by prepending it with the table name and a dot.
Without that, the database would not have known if we were referring
to the <tt class="literal">id</tt> field in the
<tt class="literal">megaliths</tt> table or the <tt class="literal">media</tt>
table and would fail with an error.</p>



<p>Similarly, if we wished to select the <tt class="literal">id</tt> fields of
both tables, the following statement would simply confuse the
database, and we'd get another error:</p>



<blockquote><pre class="code">SELECT id, id, megaliths_id
FROM megaliths, media
WHERE id = megaliths_id</pre></blockquote>



<p>Therefore, it is good practice to explicitly specify the table name
that the field belongs to, in cases where it may be ambiguous. For
example:</p>



<blockquote><pre class="code">SELECT megaliths.name, megaliths.description, 
       media.url, media.content_type
FROM megaliths, media
WHERE megaliths.id = media.megaliths_id</pre></blockquote>



<p>Of course, the downside to this process is that it takes forever to
type. A saner alternative is to <a name="INDEX-290" /><em class="emphasis">alias</em> the table
names. To do this, simply add the alias after its name in the
<tt class="literal">FROM</tt> clause. For example:</p>



<blockquote><pre class="code">SELECT mega.name, mega.description, med.url, med.content_type
FROM megaliths mega, media med
WHERE mega.id = med.megaliths_id</pre></blockquote>



<p>It is more common just to use the initial character of the table name
provided the aliases are unique.</p>



<p>This theory of table joins is extensible to any number of
tables.<a href="#FOOTNOTE-28">[28]</a> In fact, it is not uncommon for some tables within a
database to contain nothing but columns containing foreign keys that
can be used to make multi-table joins more effective. The main point
to remember here is that all tables involved in the query must be
joined to another table on some column. Otherwise, a large quantity
of very strange results may be returned from the database!</p><blockquote>


<a name="FOOTNOTE-28" /><p>[28]In practice, databases that support joins
often have some upper limit on the number of tables.</p>


</blockquote>



<p>For example, fetching both the media associated with a site and the
site type information can be expressed with the following query:</p>



<blockquote><pre class="code">SELECT mega.name, mega.description, st.site_type,
       med.url, med.description
FROM megaliths mega, media med, site_types st
WHERE mega.id = med.megaliths_id
AND mega.site_type_id = st.id</pre></blockquote>



<p>Another type of join also possible with SQL is the <em class="emphasis">outer
join</em>
<a name="INDEX-291" />
<a name="INDEX-292" />
<a name="INDEX-293" />.
In addition to the results returned by a simple join, an outer join
also returns the rows from one table for which no rows from the other
table satisfy the join condition. This is achieved by returning
<tt class="literal">NULL</tt> values for all rows in the second table that
have no matching values in the first table.</p>



<p>For example, we might wish to retrieve information on all of the
sites located within Wiltshire and, if any exist, the URLs of any
multimedia clips associated with them. Using a simple join such as:</p>



<blockquote><pre class="code">SELECT mega.name, mega.location, med.url
FROM megaliths mega, media med
WHERE mega.id = med.megaliths_id
AND mega.location LIKE '%Wiltshire%'</pre></blockquote>



<p>would return only those sites in Wiltshire that had media clips
associated with them. It would exclude those sites that had no media
clips. An <em class="emphasis">outer join</em> is the way to solve this
problem.</p>



<p>The official standard way to express an outer join is by using the
phrase <tt class="literal">LEFT OUTER</tt> <tt class="literal">JOIN</tt> or
<tt class="literal">RIGHT</tt> <tt class="literal">OUTER</tt>
<tt class="literal">JOIN</tt> between the tables to be joined, instead of a
comma, and adding an <tt class="literal">ON condition_expression</tt>
clause.<a href="#FOOTNOTE-29">[29]</a></p><blockquote>


<a name="FOOTNOTE-29" /><p>[29]Many database systems either don't
fully support outer joins or use different syntax for it. Oracle 7
outer joins, for example, look just like inner joins but have the
three characters (+) appended to one side of the join
condition.</p>


</blockquote>



<p>For example, the standard query to retrieve the information we
desired can be written as:</p>



<blockquote><pre class="code">SELECT mega.name, mega.location, med.url
FROM megaliths mega
     LEFT OUTER JOIN media med ON mega.id = med.megaliths_id
WHERE mega.location LIKE '%Wiltshire%'</pre></blockquote>



<p>In this example, we have made a left outer join on the
<tt class="literal">id</tt> and <tt class="literal">megaliths_id</tt> columns
because for any sites without media clips, there are no corresponding
records in the <tt class="literal">media</tt> table. The left outer join
will ensure that even if no media clip records exist, at least the
name and location of each and every site in Wiltshire will be
returned. A right outer join in this query would have returned the
values where no entries in the <tt class="literal">megaliths</tt> table
existed.</p>



<p>Finally, it is worth mentioning some ways to make efficient table
joins. In our examples, we added additional columns to our tables to
make a join between them. We <em class="emphasis">could</em> have simply
added a column to the <tt class="literal">media</tt> table that contained
the name of the megalithic site.</p>



<p>There are a few good reasons why we didn't do that:</p>



<ol><li><p>If the name of the megalithic site was updated for some
reason -- for example, if a spelling mistake needed
correcting -- the name contained within the
<tt class="literal">media</tt> table would be out of date and incorrect.
This would break the join between the two tables for that particular
row.</p></li><li><p>Integer keys use much less space than strings when building indexes
on a table. Less space means more index entries per block of disk
space, and therefore fewer disk reads. The smaller index and fewer
disk reads make up for the slightly increased size of the master data
table, and usually give you both speed and space gains.</p></li><li><p>It is slower to test strings than to test numbers, especially
integers. As such, in a well-designed database, integers are often
used for primary and foreign keys because they are faster to test
against with comparison operators. A string, on the other hand,
requires testing of every character within each string, which can be
time-consuming.</p></li></ol>
<p>Therefore, to help maximize speed on queries, you can design your
database to perform joins using integer columns. It is also often
worth building an index on the foreign key columns of the
``detail'' tables, if your database
<a name="INDEX-294" />supports <a name="INDEX-295" />such <a name="INDEX-296" />functionality.</p>
</div>








<a name="ch03-ch03_grouping_0" /><div class="sect2">
<h3 class="sect2">3.3.4. Grouping and Ordering Data </h3>



<p>Often you'll desire a little more control over how your
selected data is retrieved. The two most common ways of organizing
your data are to order the retrieved rows by one or more columns, or
to group the retrieved rows and apply functions to the groups instead
of to individual rows.</p>



<p>Perl is well-suited to these tasks within your program, but
performing ordering and grouping <em class="emphasis">via</em> SQL will
offload the task onto the database server and also will save you
writing, or using, potentially suboptimal techniques for organizing
the data. Therefore, generally, use SQL rather than your own
application-level code.</p>



<a name="ch03-3-fm2xml" /><div class="sect3">
<h3 class="sect3">3.3.4.1. Ordering data </h3>



<p>Ordering the data retrieved by a <tt class="literal">SELECT</tt> statement
is easy and can be achieved simply by an
<tt class="literal">ORDER</tt>
<a name="INDEX-297" /> <tt class="literal">BY</tt> clause. This
clause is always found at the end of your queries, after all the join
conditions have been specified.</p>



<p>The <tt class="literal">ORDER</tt> <tt class="literal">BY</tt> clause is
specified as a comma-separated list of columns that should be used to
order the data. For example, an <tt class="literal">ORDER BY</tt> clause
of:</p>



<blockquote><pre class="code">ORDER BY name, location</pre></blockquote>



<p>would order the rows by name and, if the names of the sites are
identical, the location column would be used as a secondary ordering.
You can change the direction of the ordering from the default
``ascending'' order (which goes from A to Z)
to a ``descending'' order by appending the
<tt class="literal">DESC</tt>
<a name="INDEX-298" /> <a name="INDEX-299" /> keyword
to any field names in the <tt class="literal">ORDER</tt>
<tt class="literal">BY</tt> clause.</p>
</div>





<a name="ch03-ch03_grouping_1" /><div class="sect3">
<h3 class="sect3">3.3.4.2. Grouping data </h3>



<p>The ability to group items of data is very useful when attempting to
make summarized reports. SQL features a clause called
<tt class="literal">GROUP</tt>
<a name="INDEX-300" /> <tt class="literal">BY</tt> that allows you to
group rows that share a common set of values and apply
<em class="emphasis">group functions</em> to them.</p>



<p>A good example of this operation is where you want to total the
values contained within a column in a table. In this instance, you
would use the <tt class="literal">sum( )</tt> grouping function in the
following way to calculate the total value of orders taken on a given
date:</p>



<blockquote><pre class="code">SELECT order_date, sum( net ), sum( vat ), sum( total )
FROM sales
GROUP BY order_date</pre></blockquote>



<p>As with <tt class="literal">ORDER</tt> <tt class="literal">BY</tt>, groupings can
be chained together in a comma-separated list to create complex
subgroupings <a name="INDEX-301" />of <a name="INDEX-302" />columns.</p>
</div>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">3.2. Datatypes and NULL Values </td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">3.4. Modifying Data Within Tables </td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>