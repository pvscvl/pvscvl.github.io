<?label 1. Introduction ?><html><head><title>Introduction  (Programming the Perl DBI)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Alligator Descartes and Tim Bunce" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565926994L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Programming the Perl DBI" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Programming the Perl DBI" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch00_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Programming the Perl DBI</a></td><td width="172" valign="top" align="right"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 1. Introduction </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch01_01.htm">From Mainframes to Workstations </a><br />
<a href="ch01_02.htm">Perl </a><br />
<a href="ch01_03.htm">DBI in the Real World </a><br />
<a href="ch01_04.htm">A Historical Interlude andStanding Stones </a><br /></p></div>





<p>The subject of databases is a large and complex one, spanning many
different concepts of structure, form, and expected use. There are
also a multitude of different ways to access and manipulate the data
stored within these databases.</p>



<p>This book describes and explains an interface called the
<a name="INDEX-2" />
<a name="INDEX-3" />Perl Database Interface,
or DBI, which provides a unified interface for accessing data stored
within many of these diverse database systems. The DBI allows you to
write Perl code that accesses data without needing to worry about
database- or platform-specific issues or proprietary interfaces.</p>



<p>We also take a look at non-DBI ways of storing, retrieving, and
manipulating data with Perl, as there are occasions when the use of a
database might be considered overkill but some form of structured
data storage is required.</p>



<p>To begin, we shall discuss some of the more common uses of database
systems in business today and the place that Perl and DBI takes
within these frameworks.</p>


















<div class="sect1"><a name="ch01-ch01_from_0" />
<h2 class="sect1">1.1. From Mainframes to Workstations </h2>



<p>
<a name="INDEX-4" />In
today's computing climate, databases are everywhere. In
previous years, they tended to be used almost exclusively in the
realm of mainframe-processing environments. Nowadays, with pizza-box
sized machines more powerful than room-sized machines of ten years
ago, high-performance database processing is available to anyone.</p>



<p>In addition to cheaper and more powerful computer hardware, smaller
database packages have become available, such as Microsoft Access and
mSQL. These packages give all computer users the ability to use
powerful database technology in their everyday lives.</p>



<p>The corporate workplace has also seen a dramatic decentralization in
database resources, with radical downsizing operations in some
companies leading to their centralized mainframe database systems
being replaced with a mixture of smaller databases distributed across
workstations and PCs. The result is that developers and users are
often responsible for the administration and maintenance of their own
databases and datasets.</p>



<p>This trend towards mixing and matching database technology has some
important downsides. Having replaced a centralized database with a
cluster of workstations and multiple database types, companies are
now faced with hiring skilled administration staff or training their
existing administration staff for new skills. In addition,
administrators now need to learn how to glue different databases
together.</p>



<p>It is in this climate that a new order of software engineering has
evolved, namely
<em class="emphasis">database-independent</em>
<a name="INDEX-5" /> programming interfaces.
If you thought administration staff had problems with downsizing
database technology, developers may have been hit even harder.</p>



<p>A centralized mainframe environment implies that database software is
written in a standard language, perhaps
<a name="INDEX-6" />COBOL or C, and runs only on one machine.
However, a <a name="INDEX-7" />distributed environment may support
multiple databases on different operating systems and processors,
with each development team choosing their preferred development
environment (such as Visual Basic, PowerBuilder, Oracle Pro*C,
Informix E/SQL, C++ code with ODBC -- the list is almost endless).
Therefore, the task of coordinating and porting software has rapidly
gone from being relatively straightforward to extremely difficult.</p>



<p>Database-independent programming interfaces help these poor,
beleagured developers by giving them a single, unified interface with
which they can program. This shields the developer from having to
know which database type they are working with, and allows software
written for one database type to be ported far more easily to another
database. For example, software originally written for a mainframe
database will often run with little modification on Oracle databases.
Software written for Informix will generally work on Oracle with
little modification. And software written for Microsoft Access will
usually run with little modification on Sybase databases.</p>



<p>If you couple this database-independent programming interface with a
programming language such as Perl, which is operating-system neutral,
you are faced with the prospect of having a single code-base once
again. This is just like in the old days, but with one major
difference -- you are now fully harnessing the power of the
distributed database environment.</p>



<p>Database-independent programming interfaces help not only development
staff. Administrators can also use them to write database-monitoring
and administration software quickly and portably, increasing their
own efficiency and the efficiency of the systems and databases they
are responsible for monitoring. This process can only result in
better-tuned systems with higher availability, freeing up the
administration staff to proactively maintain the systems they are
responsible for.</p>



<p>Another aspect of today's corporate database lifestyle revolves
around the idea of <em class="emphasis">data
warehousing</em>
<a name="INDEX-8" />, that is, creating and building
vast repositories of archived information that can be scanned, or
<em class="emphasis">mined</em>, for information separately from online
databases. Powerful high-level languages with database-independent
programming interfaces (such as Perl) are becoming more prominent in
the construction and maintenance of data warehouses. This is due not
only to their ability to transfer data from database to database
seamlessly, but also to their ability to scan, order, convert, and
process this information efficiently.</p>



<p>In summary, databases are becoming more and more prominent in the
corporate landscape, and powerful interfaces are required to stop
these resources from flying apart and becoming disparate fragments of
localized data. This glueing process can be aided by the use of
database-independent programming interfaces, such as the DBI,
especially when used in conjunction with efficient high-level
data-processing languages such as Perl.<a name="INDEX-9" /></p>
</div>
























































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch00_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">0.5. Acknowledgments</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">1.2. Perl </td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
