<?label A.3. The DBI Class ?><html><head><title>The DBI Class  (Programming the Perl DBI)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Alligator Descartes and Tim Bunce" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565926994L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Programming the Perl DBI" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Programming the Perl DBI" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Programming the Perl DBI</a></td><td width="172" valign="top" align="right"><a href="appa_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">A.3. The DBI Class </h2>



<p>In this section, we cover the DBI class methods, utility functions,
and the dynamic attributes associated with generic DBI handles.</p>



<a name="appa-15-fm2xml" /><div class="sect2">
<h3 class="sect2">A.3.1. DBI Class Methods </h3>



<p>The following methods are provided by the DBI class:</p>



<a name="INDEX-994" /><a name="INDEX-995" /><a name="INDEX-996" /><a name="INDEX-997" /><a name="INDEX-998" /><a name="INDEX-999" /><a name="INDEX-1000" /><a name="INDEX-1001" /><a name="INDEX-1002" /><a name="INDEX-1003" /><a name="INDEX-1004" /><a name="INDEX-1005" /><a name="INDEX-1006" /><a name="INDEX-1007" /><a name="INDEX-1008" /><a name="INDEX-1009" /><a name="INDEX-1010" /><a name="INDEX-1011" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>connect</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$dbh = DBI-&gt;connect($data_source, $username, $password)
          || die $DBI::errstr;
$dbh = DBI-&gt;connect($data_source, $username, $password, \%attr)
          || die $DBI::errstr;</pre></td><td align="right" /></tr></table><p><tt class="literal">connect</tt>
<a name="INDEX-994" />
<a name="INDEX-995" />
establishes a database connection, or session, to the requested
<tt class="literal">$data_source</tt>
<a name="INDEX-996" />. Returns a database handle object if
the connection succeeds. Use
<tt class="literal">$dbh-</tt>&gt;<tt class="literal">disconnect</tt> to
terminate the connection.</p><p>If the connect fails (see below), it returns <tt class="literal">undef</tt>
and sets both <tt class="literal">$DBI::err</tt> and
<tt class="literal">$DBI::errstr</tt>. (It does <em class="emphasis">not</em>
set <tt class="literal">$!</tt>, etc.) You should generally test the return
status of <tt class="literal">connect</tt> and <tt class="literal">print
$DBI::errstr</tt> if it has failed.</p><p>Multiple simultaneous connections to multiple databases through
multiple drivers can be made via the DBI. Simply make one
<tt class="literal">connect</tt> call for each database and keep a copy of
each returned database handle.</p><p>The <tt class="literal">$data_source</tt> value should begin with
<tt class="literal">dbi:</tt><em class="replaceable">driver_name</em><tt class="literal">:</tt>.
The <em class="replaceable">driver_name</em> specifies the driver that
will be used to make the connection. (Letter case is significant.)</p><p>As a convenience, if the <tt class="literal">$data_source</tt> parameter is
undefined or empty, the DBI will substitute the value of the
<a name="INDEX-997" />environment variable
<tt class="literal">DBI_DSN</tt>. If just the
<em class="replaceable">driver_name</em> part is empty (i.e., the
<tt class="literal">$data_source</tt> prefix is <tt class="literal">dbi::</tt>),
the environment variable <tt class="literal">DBI_DRIVER</tt> is used. If
neither variable is set, then <tt class="literal">connect</tt> dies.</p><p>Examples of <tt class="literal">$data_source</tt> values are:</p><blockquote><pre class="code">dbi:DriverName:database_name
dbi:DriverName:database_name@hostname:port
dbi:DriverName:database=database_name;host=hostname;port=port</pre></blockquote><p>There is <em class="emphasis">no standard</em> for the text following the
driver name. Each driver is free to use whatever syntax it wants. The
only requirement the DBI makes is that all the information is
supplied in a single string. You must consult the documentation for
the drivers you are using for a description of the syntax they
require. (Where a driver author needs to define a syntax for the
<tt class="literal">$data_source</tt>, it is recommended that he or she
follow the ODBC style, shown in the last example above.)</p><p>If the <a name="INDEX-998" />environment variable
<tt class="literal">DBI_AUTOPROXY</tt> is defined (and the driver in
<tt class="literal">$data_source</tt> is not <tt class="literal">Proxy</tt>) then
the connect request will automatically be changed to:</p><blockquote><pre class="code">dbi:Proxy:$ENV{DBI_AUTOPROXY};dsn=$data_source</pre></blockquote><p>and passed to the <tt class="literal">DBD::Proxy</tt> module.
<tt class="literal">DBI_AUTOPROXY</tt> is typically set as
"<tt class="literal">hostname=...;port=...</tt>". See the
<tt class="literal">DBD::Proxy</tt>
<a name="INDEX-999" /> documentation for more details.</p><p>If <tt class="literal">$username</tt> or <tt class="literal">$password</tt> are
undefined (rather than just empty), then the DBI will substitute the
values of the <tt class="literal">DBI_USER</tt>
<a name="INDEX-1000" /> and
<tt class="literal">DBI_PASS</tt>
<a name="INDEX-1001" /> environment variables, respectively.
The DBI will warn if the environment variables are not defined.
However, the everyday use of these environment variables is not
recommended for security reasons. The mechanism is primarily intended
to simplify testing.</p><p><tt class="literal">DBI-</tt>&gt;<tt class="literal">connect</tt> automatically
installs the driver if it has not been installed yet. Driver
installation either returns a valid driver handle, or it dies with an
error message that includes the string
<tt class="literal">install_driver</tt> and the underlying problem. So
<tt class="literal">DBI-</tt>&gt;<tt class="literal">connect</tt> will die on a
driver installation failure and will only return
<tt class="literal">undef</tt> on a connect failure, in which case
<tt class="literal">$DBI::errstr</tt> will hold the error message.</p><p>The <tt class="literal">$data_source</tt> argument (with the
"<tt class="literal">dbi:...:</tt>" prefix removed) and the
<tt class="literal">$username</tt>
<a name="INDEX-1002" /> and
<tt class="literal">$password</tt>
<a name="INDEX-1003" /> arguments are then passed to the
driver for processing. The DBI does not define any interpretation for
the contents of these fields. The driver is free to interpret the
<tt class="literal">$data_source</tt>, <tt class="literal">$username</tt>, and
<tt class="literal">$password</tt> fields in any way, and supply whatever
defaults are appropriate for the engine being accessed. (Oracle, for
example, uses the ORACLE_SID and TWO_TASK environment variables if no
<tt class="literal">$data_source</tt> is specified.)</p><p>The <tt class="literal">AutoCommit</tt>
<a name="INDEX-1004" /> and
<tt class="literal">PrintError</tt>
<a name="INDEX-1005" />
attributes for each connection default to "on." (See
<tt class="literal">AutoCommit</tt> and <tt class="literal">PrintError</tt> for
more information.) However, it is strongly recommended that you
explicitly define <tt class="literal">AutoCommit</tt> rather than rely on
the default. Future versions of the DBI may issue a warning if
<tt class="literal">AutoCommit</tt> is not explicitly defined.</p><p>The <tt class="literal">\%attr</tt>
<a name="INDEX-1006" /> parameter can be used to alter the
default settings of <tt class="literal">PrintError</tt>,
<tt class="literal">RaiseError</tt>
<a name="INDEX-1007" />,
<tt class="literal">AutoCommit</tt>, and other attributes. For example:</p><blockquote><pre class="code">$dbh = DBI-&gt;connect($data_source, $user, $pass, {
      PrintError =&gt; 0,
      AutoCommit =&gt; 0
});</pre></blockquote><p>You can also define connection attribute values within the
<tt class="literal">$data_source</tt> parameter. For example:</p><blockquote><pre class="code">dbi:DriverName(PrintError=&gt;0,Taint=&gt;1):...</pre></blockquote><p>Individual attribute values specified in this way take precedence
over any conflicting values specified via the
<tt class="literal">\%attr</tt> parameter to <tt class="literal">connect</tt>.</p><p>Where possible, each session
(<tt class="literal">$dbh</tt>
<a name="INDEX-1008" />) is independent from the transactions
in other sessions. This is useful when you need to hold cursors open
across transactions -- for example, if you use one session for
your long lifespan cursors (typically read-only) and another for your
short update transactions.</p><p>For compatibility with old DBI scripts, the driver can be specified
by passing its name as the fourth argument to
<tt class="literal">connect</tt> (instead of <tt class="literal">\%attr</tt>):</p><blockquote><pre class="code">$dbh = DBI-&gt;connect($data_source, $user, $pass, $driver);</pre></blockquote><p>In this "old-style" form of <tt class="literal">connect</tt>,
the <tt class="literal">$data_source</tt> should not start with
<tt class="literal">dbi:</tt><em class="replaceable">driver_name</em><tt class="literal">:</tt>.
(If it does, the embedded <em class="replaceable">driver_name</em> will
be ignored). Also note that in this older form of
<tt class="literal">connect</tt>, the
<tt class="literal">$dbh-</tt>&gt;<tt class="literal">{AutoCommit}</tt> attribute
is <em class="emphasis">undefined</em>, the
<tt class="literal">$dbh-</tt>&gt;<tt class="literal">{PrintError}</tt> attribute
is off, and the old <tt class="literal">DBI_DBNAME</tt> environment
variable is checked if <tt class="literal">DBI_DSN</tt> is not defined.
Beware that this "old-style" <tt class="literal">connect</tt>
will be withdrawn in a future version 
<a name="INDEX-1009" />of

<a name="INDEX-1010" /> <a name="INDEX-1011" />DBI.</p></div>

<a name="INDEX-1012" /><a name="INDEX-1013" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>connect_cached  (NEW ) </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$dbh = DBI-&gt;connect_cached($data_source, $username, $password)
          || die $DBI::errstr;
$dbh = DBI-&gt;connect_cached($data_source, $username, $password, \%attr)
          || die $DBI::errstr;</pre></td><td align="right" /></tr></table><p><tt class="literal">connect_cached</tt>
<a name="INDEX-1012" />
<a name="INDEX-1013" />
is like <em class="emphasis">connect</em>, except that the database handle
returned is also stored in a hash associated with the given
parameters. If another call is made to
<tt class="literal">connect_cached</tt> with the same parameter values,
then the corresponding cached <tt class="literal">$dbh</tt> will be
returned if it is still valid. The cached database handle is replaced
with a new connection if it has been disconnected or if the
<tt class="literal">ping</tt> method fails.</p><p>Note that the behavior of this method differs in several respects
from the behavior of persistent connections implemented by
<tt class="literal">Apache::DBI</tt>.</p><p>Caching can be useful in some applications, but it can also cause
problems and should be used with care. The exact behavior of this
method is liable to change, so if you intend to use it in any
production applications you should discuss your needs on the
<em class="emphasis">dbi-users</em> mailing list.</p><p>The cache can be accessed (and cleared) via the
<tt class="literal">CachedKids</tt> attribute.</p></div>

<a name="INDEX-1014" /><a name="INDEX-1015" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>available_drivers </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
@ary = DBI-&gt;available_drivers;
@ary = DBI-&gt;available_drivers($quiet);</pre></td><td align="right" /></tr></table><p>Returns a list of all
<a name="INDEX-1014" />
<a name="INDEX-1015" />available
drivers by searching for <tt class="literal">DBD::*</tt> modules through
the directories in <tt class="literal">@INC</tt>. By default, a warning is
given if some drivers are hidden by others of the same name in
earlier directories. Passing a true value for
<tt class="literal">$quiet</tt> will inhibit the warning.</p></div>

<a name="INDEX-1016" /><a name="INDEX-1017" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>data_sources </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
@ary = DBI-&gt;data_sources($driver);
@ary = DBI-&gt;data_sources($driver, \%attr);</pre></td><td align="right" /></tr></table><p>Returns a list of all
<a name="INDEX-1016" />
<a name="INDEX-1017" />data
sources (databases) available via the named driver. The driver will
be loaded if it hasn't been already. If
<tt class="literal">$driver</tt> is empty or <tt class="literal">undef</tt>, then
the value of the <tt class="literal">DBI_DRIVER</tt> environment variable
is used.</p><p>Data sources are returned in a form suitable for passing to the
<tt class="literal">connect</tt> method (that is, they will include the
<tt class="literal">dbi:$driver:</tt> prefix).</p><p>Note that many drivers have no way of knowing what data sources might
be available. These drivers return an empty or incomplete list.</p></div>

<a name="INDEX-1018" /><a name="INDEX-1019" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>trace </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
DBI-&gt;trace($trace_level)
DBI-&gt;trace($trace_level, $trace_filename)</pre></td><td align="right" /></tr></table><p>DBI <a name="INDEX-1018" />
<a name="INDEX-1019" />trace
information can be enabled for all handles using the
<tt class="literal">trace</tt> DBI class method. To enable trace
information for a specific handle, use the similar
<tt class="literal">$h-</tt>&gt;<tt class="literal">trace</tt> method described
elsewhere.</p><p>Trace levels are as follows:</p><dl>
<dt><b>0</b></dt>
<dd><p>Trace disabled.</p></dd>



<dt><b>1</b></dt>
<dd><p>Trace DBI method calls returning with results or errors.</p></dd>



<dt><b>2</b></dt>
<dd><p>Trace method entry with parameters and returning with results.</p></dd>



<dt><b>3</b></dt>
<dd><p>As above, adding some high-level information from the driver and some
internal information from the DBI.</p></dd>



<dt><b>4</b></dt>
<dd><p>As above, adding more detailed information from the driver. Also
includes DBI mutex information when using threaded Perl.</p></dd>



<dt><b>5 and above</b></dt>
<dd><p>As above, but with more and more obscure information.</p></dd>

</dl><p>Trace level 1 is best for a simple overview of what's
happening. Trace level 2 is a good choice for general purpose
tracing. Levels 3 and above (up to 9) are best reserved for
investigating a specific problem, when you need to see
"inside" the driver and DBI.</p><p>The trace output is detailed and typically very useful. Much of the
trace output is formatted using the <tt class="literal">neat</tt> function,
so strings may be edited and truncated.</p><p>Initially, trace output is written to <tt class="literal">STDERR</tt>. If
<tt class="literal">$trace_filename</tt> is specified, the file is opened
in append mode and all trace output (including that from other
handles) is redirected to that file. Further calls to
<tt class="literal">trace</tt> without a <tt class="literal">$trace_filename</tt>
do not alter where the trace output is sent. If
<tt class="literal">$trace_filename</tt> is undefined, then trace output is
sent to <tt class="literal">STDERR</tt> and the previous trace file is
closed.</p><p>See also the <tt class="literal">$h-</tt>&gt;<tt class="literal">trace</tt> and
<tt class="literal">$h-</tt>&gt;<tt class="literal">trace_msg</tt> methods for
information about the <tt class="literal">DBI_TRACE</tt> environment
variable.</p></div>
</div>








<a name="appa-21-fm2xml" /><div class="sect2">
<h3 class="sect2">A.3.2. DBI Utility Functions </h3>



<p>In addition to the methods listed in the previous section, the DBI
package also provides the following utility functions:</p>



<a name="INDEX-1020" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>neat </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$str = DBI::neat($value, $maxlen);</pre></td><td align="right" /></tr></table><p>Returns <a name="INDEX-1020" />a
string containing a neat (and tidy) representation of the supplied
value.</p><p>Strings will be quoted, although internal quotes will not be escaped.
Values known to be numeric will be unquoted. Undefined (NULL) values
will be shown as <tt class="literal">undef</tt> (without quotes).
Unprintable characters will be replaced by a dot (.).</p><p>For result strings longer than <tt class="literal">$maxlen</tt>, the result
string will be truncated to <tt class="literal">$maxlen-4</tt>, and
"<tt class="literal">...'</tt>" will be appended. If
<tt class="literal">$maxlen</tt> is <tt class="literal">0</tt> or
<tt class="literal">undef</tt>, it defaults to
<tt class="literal">$DBI::neat_maxlen</tt>, which, in turn, defaults to
<tt class="literal">400</tt>.</p><p>This function is designed to format values for human consumption. It
is used internally by the DBI for <tt class="literal">trace</tt> output. It
should typically <em class="emphasis">not</em> be used for formatting
values for database use. (See also <tt class="literal">quote</tt>.)</p></div>

<a name="INDEX-1021" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>neat_list </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$str = DBI::neat_list(\@listref, $maxlen, $field_sep);</pre></td><td align="right" /></tr></table><p>Calls <a name="INDEX-1021" /><tt class="literal">DBI::neat</tt> on each
element of the list and returns a string containing the results
joined with <tt class="literal">$field_sep</tt>.
<tt class="literal">$field_sep</tt> defaults to <tt class="literal">", "</tt>.</p></div>

<a name="INDEX-1022" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>looks_like_number </i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
@bool = DBI::looks_like_number(@array);</pre></td><td align="right" /></tr></table><p>Returns <a name="INDEX-1022" />true for each element that looks like a
number. Returns false for each element that does not look like a
number. Returns <tt class="literal">undef</tt> for each element that is
undefined or empty.</p></div>
</div>








<a name="appa-25-fm2xml" /><div class="sect2">
<h3 class="sect2">A.3.3. DBI Dynamic Attributes </h3>



<p>Dynamic attributes are always associated with the <em class="emphasis">last
handle used</em> (that handle is represented by
<tt class="literal">$h</tt> in the descriptions below).</p>



<p>Where an attribute is equivalent to a method call, refer to the
method call for all related documentation.</p>



<p>Warning: these attributes are provided as a convenience, but they do
have limitations. Specifically, they have a short lifespan: because
they are associated with the last handle used, they should be used
only <em class="emphasis">immediately</em> after calling the method that
"sets" them. If in any doubt, use the corresponding
method call.</p>



<dl>
<dt><b>
<a name="INDEX-1023" />$DBI::err </b></dt>
<dd><p>Equivalent to <tt class="literal">$h-</tt>&gt;<tt class="literal">err</tt>.</p></dd>



<dt><b>
<a name="INDEX-1024" />$DBI::errstr </b></dt>
<dd><p>Equivalent to <tt class="literal">$h-</tt>&gt;<tt class="literal">errstr</tt>.</p></dd>



<dt><b>
<a name="INDEX-1025" />$DBI::state </b></dt>
<dd><p>Equivalent to <tt class="literal">$h-</tt>&gt;<tt class="literal">state</tt>.</p></dd>



<dt><b>
<a name="INDEX-1026" />$DBI::rows </b></dt>
<dd><p>Equivalent to <tt class="literal">$h-</tt>&gt;<tt class="literal">rows</tt>.
Please refer to the documentation for the <tt class="literal">rows</tt>
method.</p></dd>

</dl>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appa_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="appa_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">A.2. Description </td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">A.4. Methods Common to All Handles </td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
