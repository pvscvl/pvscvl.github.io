<?label 1.3. Alternative Technologies?><html><head><title>Alternative Technologies (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">1.3. Alternative Technologies</h2>



<p>As its title suggests, this book focuses on CGI programs written in
Perl. Because Perl and CGI are so often used together, some people
are unclear about the distinction. <a name="INDEX-72" /> <a name="INDEX-73" />Perl is a programming language, and CGI is an
interface that a program uses to handle requests from a web server.
There are alternatives both to CGI and to Perl: there are new
alternatives to CGI for handling dynamic requests, and CGI
applications can be written in a variety of languages.</p>



<a name="ch01-4-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.1. Why Perl?</h3>



<p>Although CGI applications can be written in any almost any language,
Perl and CGI scripting have become synonymous to many programmers. As
Hassan Schroeder, Sun's first webmaster, said in his oft-quoted
statement, "Perl is the duct tape of the Internet." Perl
is by far the most widely used language for CGI programming, and for
many good reasons:</p>



<ul><li><p>Perl is easy to learn because it resembles other popular languages
(such as C), because it is forgiving, and because when an error
occurs it provides specific and detailed error messages to help you
locate the problem quickly.</p></li><li><p>Perl allows rapid development because it is interpreted; the source
code does not need to be compiled before execution.</p></li><li><p>Perl is easily portable and available on many platforms.</p></li><li><p>Perl contains extremely powerful
<a name="INDEX-74" />
<a name="INDEX-75" />string manipulation operators, with
regular expression matching and substitution built right into the
language.</p></li><li><p>Perl handles and manipulates binary data just as easily as it handles
text.</p></li><li><p>Perl does not require
<a name="INDEX-76" />
<a name="INDEX-77" />strict variable types;
<a name="INDEX-78" /> <a name="INDEX-79" />
<a name="INDEX-80" />numbers, strings, and booleans are
simply scalars.</p></li><li><p>Perl interfaces with external applications very easily and provides
its own filesystem functions.</p></li><li><p>There are countless <a name="INDEX-81" /> <a name="INDEX-82" />
<a name="INDEX-83" />open source modules for Perl available
on <a name="INDEX-84" />CPAN, ranging from modules for creating
dynamic graphics to interfacing with Internet servers and database
engines. For more information on CPAN, refer to <a href="appb_01.htm">Appendix B, "Perl Modules"</a>.</p></li></ul>
<p>Furthermore, Perl is fast. Perl isn't
<a name="INDEX-85" />
<a name="INDEX-86" />strictly an interpreted
language. When Perl reads a source file, it actually compiles the
source into low-level opcodes and then executes them. You do not
generally see compilation and execution in Perl as separate steps
because they typically occur together: Perl launches, reads a source
file, compiles it, runs it, and exits. This process is repeated each
time a Perl script is executed, including each time a CGI script is
executed. Because Perl is so efficient, however, this process occurs
fast enough to handle requests for all but the most heavily
trafficked web sites. <a name="INDEX-87" /> <a name="INDEX-88" /> <a name="INDEX-89" />Note that this is considerably less
efficient on Windows systems than on Unix systems because of the
additional overhead that creating a new process on Windows entails.</p>
</div>








<a name="ch01-5-fm2xml" /><div class="sect2">
<h3 class="sect2">1.3.2. Alternatives to CGI</h3>



<p>Several <a name="INDEX-90" />alternatives to CGI have appeared in recent
years. They all build upon CGI's legacy and provide their own
approaches to the same underlying goal:
<a name="INDEX-91" />
<a name="INDEX-92" />responding to queries and
presenting dynamic content via HTTP. Most of them also attempt to
avoid the main drawback to CGI scripts: creating a separate
<a name="INDEX-93" />
<a name="INDEX-94" />
<a name="INDEX-95" />process to execute the script every time it
is requested. Others also try to make less of a distinction between
<a name="INDEX-96" />HTML pages and code by moving code into
HTML pages. We'll discuss the theories behind this approach in
<a href="ch06_01.htm">Chapter 6, "HTML Templates"</a>. Here is a list of some of the major
alternatives to CGI:</p>



<dl>
<dt><b>ASP</b></dt>
<dd><p>
<a name="INDEX-97" />
<a name="INDEX-98" />Active Server Pages, or ASP, was
created by Microsoft for its web server, but it is now available for
many servers. The ASP engine is integrated into the web server so it
does not require an additional process. It allows programmers to mix
code within HTML pages instead of writing separate programs. As
we'll see in <a href="ch06_01.htm">Chapter 6, "HTML Templates"</a>, there are modules
available that allow us to do similar things using CGI. ASP supports
multiple languages; the most popular is Visual Basic, but JavaScript
is also supported, and ActiveState offers a version of Perl that can
be used on Windows with ASP. There is also a <a name="INDEX-99" />
<a name="INDEX-100" />Perl module, Apache::ASP, that
supports ASP with <em class="emphasis">mod_perl</em>.</p></dd>



<dt><b>PHP</b></dt>
<dd><p>
<a name="INDEX-101" />
<a name="INDEX-102" /> <a name="INDEX-103" /> <a name="INDEX-104" />PHP is a programming language that is
similar to Perl, and its interpreter is embedded within the web
server. PHP supports embedded code within HTML pages. PHP is
supported by the Apache web server.</p></dd>



<dt><b>ColdFusion</b></dt>
<dd><p>
<a name="INDEX-105" />
<a name="INDEX-106" />Allaire's ColdFusion
<a name="INDEX-107" /> <a name="INDEX-108" />creates more of a
distinction than PHP between code pages and HTML pages. HTML pages
can include additional tags that call ColdFusion functions. A number
of standard functions are available with ColdFusion, and developers
can create their own controls as extensions. ColdFusion was
originally written for Windows, but versions for various
<a name="INDEX-109" /> <a name="INDEX-110" />Unix platforms are now available as well.
The ColdFusion interpreter is integrated into the web server.</p></dd>



<dt><b>Java servlets</b></dt>
<dd><p>
<a name="INDEX-111" />
<a name="INDEX-112" />
<a name="INDEX-113" />
<a name="INDEX-114" />Java servlets were created by Sun. Servlets
are similar to CGI scripts in that they are code that creates
documents. However, servlets, because they use Java, must be compiled
as classes before they are run, and servlets are dynamically loaded
as classes by the web server when they are run. The interface is
quite different than CGI. JavaServer Pages, or JSP, is another
technology that allows developers to embed Java in web pages, much
like ASP.</p></dd>



<dt><b>FastCGI</b></dt>
<dd><p>
<a name="INDEX-115" />
<a name="INDEX-116" />FastCGI maintains one or more instances of
<tt class="command">perl</tt> that it runs continuously along with an
interface that allows dynamic requests to be passed from the web
server to these instances. It avoids the biggest drawback to CGI,
which is creating a new process for each request, while still
remaining largely compatible with CGI. FastCGI is available for a
variety of web servers. We'll discuss FastCGI further in <a href="ch17_01.htm">Chapter 17, "Efficiency and Optimization"</a>.</p></dd>



<dt><b>mod_perl</b></dt>
<dd><p><em class="emphasis">mod_perl</em>
<a name="INDEX-117" />
<a name="INDEX-118" />
<a name="INDEX-119" /> is a module for the Apache web
server that also avoids creating separate instances of
<em class="emphasis">perl</em> for each CGI. Instead of maintaining a
separate instance of <tt class="command">perl</tt> like FastCGI,
<em class="emphasis">mod_perl</em> embeds the
<tt class="command">perl</tt>
<a name="INDEX-120" />
<a name="INDEX-121" /> <a name="INDEX-122" /> <a name="INDEX-123" /> interpreter inside the web
server. This gives it a performance advantage and also gives Perl
code written for <em class="emphasis">mod_perl</em> access to
Apache's internals. We'll discuss
<em class="emphasis">mod_perl</em> further in <a href="ch17_01.htm">Chapter 17, "Efficiency and Optimization"</a>.</p></dd>

</dl>



<p>Despite a <a name="INDEX-124" />proliferation of these competing
technologies, CGI continues to be the most popular method for
delivering dynamic pages, and, despite what the marketing literature
for some of its competitors may claim, CGI will not go away any time
soon. Even if you do imagine that you may begin using other
technologies down the road, learning CGI is a valuable investment.
Because CGI is such a thin interface, learning CGI teaches you how
web transactions works at a basic level, which can only further your
understanding of other technologies built upon this same foundation.
Additionally, CGI is universal. Many alternative technologies require
that you install a particular combination of technologies in addition
to your web server in order to use them. CGI is supported by
virtually every web server "right out of the box" and
will continue to be that way far into the future.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch01_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">1.2. Introduction to CGI</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">1.4. Web Server Configuration</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>