<?label 4. Forms and CGI?><html><head><title>Forms and CGI (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 4. Forms and CGI</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch04_01.htm">Sending Data to the Server</a><br>
<a href="ch04_02.htm">Form Tags</a><br>
<a href="ch04_03.htm">Decoding Form Input</a><br></p></div>



<p>
<a name="INDEX-727" /> <a name="INDEX-728" />HTML
forms are the user interface that provides input to your CGI scripts.
They are primarily used for two purposes:
<a name="INDEX-729" />
<a name="INDEX-730" />collecting <a name="INDEX-731" />data and accepting
<a name="INDEX-732" />commands. Examples of data you collect
may include registration information, payment information, and online
surveys. You may also collect commands via forms, such as using
menus, checkboxes, lists, and buttons to control various aspects of
your application. In many cases, your forms will include elements for
both: collecting data as well as application control.</p>


<p>A great advantage of HTML forms is that you can use them to create a
frontend for numerous gateways (such as databases or other
information servers) that can be accessed by any client without
worrying about platform dependency.</p>


<p>In order to process data from an HTML form, the browser must send the
data via an HTTP request. A CGI script cannot check user input on the
client side; the user must press the submit button and the input can
only be validated once it has travelled to the server. JavaScript, on
the other hand, can perform actions in the browser. It can be used in
conjunction with CGI scripts to provide a more responsive user
interface. We will see how to do this in <a href="ch07_01.htm">Chapter 7, "JavaScript"</a>.</p>


<p>This chapter covers:</p>


<ul><li><p>How form data is sent to the server</p></li><li><p>How to use HTML tags for writing forms</p></li><li><p>How CGI scripts decode the form data</p></li></ul>










<div class="sect1"><a name="ch04-84856" />
<h2 class="sect1">4.1. Sending Data to the Server</h2>


<p>In the last <a name="INDEX-733" /> <a name="INDEX-734" /> <a name="INDEX-735" />couple of chapters, we have
referred to the options that a browser can include with an HTTP
request. In the case of a <a name="INDEX-736" />
<a name="INDEX-737" /> <a name="INDEX-738" />
<a name="INDEX-739" />GET request, these options are
included as the <a name="INDEX-740" /> <a name="INDEX-741" />query string portion of the URL passed in
the request line. In the case of a <a name="INDEX-742" />
<a name="INDEX-743" />POST request, these options are
included as the content of the HTTP request. These options are
typically generated by HTML forms.</p>


<p>Each HTML form <a name="INDEX-744" />element has an associated name and
value, like this checkbox:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="checkbox" NAME="send_email" VALUE="yes"&gt;</pre></blockquote>


<p>If this checkbox is checked, then the option
<tt class="literal">send_email</tt> with a value of <tt class="literal">yes</tt>
is sent to the web server. Other form elements, which we will look at
in a moment, act similarly. Before the browser can send form option
data to the server, the browser must encode it. There are currently
two different forms of encoding form data. The default encoding,
which has the <a name="INDEX-745" />
<a name="INDEX-746" />
<a name="INDEX-747" />media
type of <tt class="command">application/x-www-form-urlencoded</tt>, is used
almost exclusively. The other form of encoding,
<em class="emphasis">multipart/form-data,</em>
<a name="INDEX-748" />
<a name="INDEX-749" />
<a name="INDEX-750" /> is
primarily used with forms which allow the user to upload files to the
web server. We will look at this in <a href="ch05_02.htm">Section 5.2.4, "File Uploads with CGI.pm"</a>.</p>


<p>For now, let's look at how
<tt class="command">application/x-www-form-urlencoded</tt> works. As we
mentioned, each HTML form element has a name and a value attribute.
First, the browser collects the names and values for each element in
the form. It then takes these strings and encodes them according to
the same rules for encoding <a name="INDEX-751" />
<a name="INDEX-752" />URL text that we discussed in <a href="ch02_01.htm">Chapter 2, "The Hypertext Transport Protocol "</a>. If you recall, characters that have special
meaning for <a name="INDEX-753" /> <a name="INDEX-754" /> <a name="INDEX-755" />HTTP are replaced with a percentage
symbol and a two-digit hexadecimal number;
<a name="INDEX-756" /> <a name="INDEX-757" />spaces are replaced with
<tt class="literal">+</tt>. For example, the string "Thanks for the
help!" would be converted to
"Thanks+for+the+help%21".</p>


<p>Next, the browser joins each <a name="INDEX-758" />name and value with an equals sign. For
example, if the user entered "30" when asked for the age,
the key-value pair would be "age=30". Each
<a name="INDEX-759" />
<a name="INDEX-760" /> <a name="INDEX-761" />key-value pair is then joined, using the
"&amp;" character as a delimiter. Here is an example of
an <a name="INDEX-762" />HTML form:</p>


<blockquote><pre class="code">&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;Mailing List&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
&lt;H1&gt;Mailing List Signup&lt;/H1&gt;
&lt;P&gt;Please fill out this form to be notified via email about 
  updates and future product announcements.&lt;/P&gt;

&lt;FORM ACTION="/cgi/register.cgi" METHOD="POST"&gt;
  &lt;P&gt;
    Name: &lt;INPUT TYPE="TEXT" NAME="name"&gt;&lt;BR&gt;
    Email: &lt;INPUT TYPE="TEXT" NAME="email"&gt;
  &lt;/P&gt;
  
  &lt;HR&gt;
  &lt;INPUT TYPE="SUBMIT" VALUE="Submit Registration Info"&gt;
&lt;/FORM&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;</pre></blockquote>


<p><a href="ch04_01.htm">Figure 4-1</a> shows how the form looks in Netscape
with some sample input.</p>


<a name="ch04-83168" /><div class="figure"><img width="443" src="figs/cgi2.0401.gif" height="213" alt="Figure 4-1" /></div><h4 class="objtitle">Figure 4-1. Sample HTML form</h4>

<p>When this form is submitted, the browser encodes these three elements
as:</p>


<blockquote><pre class="code">name=Mary+Jones&amp;email=mjones%40jones.com</pre></blockquote>


<p>Since the <a name="INDEX-763" />
<a name="INDEX-764" />request method is POST in this
example, this string would be added to the HTTP request as the
content of that message. The HTTP request message would look like
this:</p>


<blockquote><pre class="code">POST /cgi/register.cgi HTTP/1.1
Host: localhost
Content-Length: 67
Content-Type: application/x-www-form-urlencoded

name=Mary+Jones&amp;email=mjones%40jones.com</pre></blockquote>


<p>If the request method were set to <a name="INDEX-765" />GET, then the <a name="INDEX-766" /> <a name="INDEX-767" /> <a name="INDEX-768" />request would be
formatted this way instead:</p>


<blockquote><pre class="code">GET /cgi/register.cgi?name=Mary+Jones&amp;email=mjones%40jones.com HTTP/1.1
Host: localhost</pre></blockquote>
</div>






















<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch04_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">3.4. Examples</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">4.2. Form Tags</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
