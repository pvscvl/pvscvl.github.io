<?label 13.4. Additional GD Modules?><html><head><title>Additional GD Modules (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch13_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">13.4. Additional GD Modules</h2>


<p>
<a name="INDEX-2589" />Several modules are available on CPAN that
work with GD. Some provide convenience methods that make it easier to
interact with GD. Others use GD to create graphs easily. In this
section, we will look at GD::Text, which helps place text in GD
images, and GD::Graph, the most popular graphing module, along with
extensions provided by GD::Graph3D.</p>


<a name="ch13-13-fm2xml" /><div class="sect2">
<h3 class="sect2">13.4.1. GD::Text</h3>


<p>
<a name="INDEX-2590" />
<a name="INDEX-2591" />GD::Text is collection of
modules for managing text, written by Martin Verbruggen. GD::Text
provides three modules for working with text in GD images: GD::Text
provides information about the size of text in GD,
<a name="INDEX-2592" />GD::Text::Align
allows us to place text in GD with greater control, and
<a name="INDEX-2593" />
<a name="INDEX-2594" />GD::Text::Wrap allows us to place text
boxes containing wrapped text. We don't have the space to cover
all three of these modules in detail, but let's take a look at
what is probably the most useful of these modules, GD::Text::Align.</p>


<a name="ch13-14-fm2xml" /><div class="sect3">
<h3 class="sect3">13.4.1.1. GD::Text::Align</h3>


<p>In <a name="INDEX-2595" />
<a name="INDEX-2596" />our previous
example, <em class="filename">loads.cgi</em>, we used preset constants to
determine the starting position of our centered title, "System
Load Average." These values are derived from trial and error,
and although not elegant, this approach works for images when the
title is fixed. However, if someone decides to change the title of
this image, the <a name="INDEX-2597" />
<a name="INDEX-2598" />coordinates also need to be
adjusted to keep the new title centered horizontally. And for images
with dynamic titles, this approach will simply not work. A much
better solution would be to calculate the title's placement
dynamically.</p>


<p>GD::Text::Align allows us to do this easily. In the above example,
the <tt class="literal">TITLE_Y_COORD</tt> constant is really the top
margin, and <tt class="literal">TITLE_X_COORD</tt> is the left margin
(remember coordinates start at the top left corner of the image in
GD). There is nothing wrong with a constant for the top margin, but
if we want to have a centered title, then we should calculate
<tt class="literal">TITLE_X_COORD</tt> dynamically.</p>


<p>Thus, let's look at how we could modify
<em class="filename">loads.cgi</em> to do this with GD::Text::Align.
First, let's include the GD::Text::Align module at the start of
the script:</p>


<blockquote><pre class="code">use GD::Text::Align;</pre></blockquote>


<p>Next, we can replace the line that places the title string (in the
<tt class="function">area_graph</tt> subroutine) with the following:</p>


<blockquote><pre class="code"># Add Centered Title
my $title = GD::Text::Align-&gt;new(
    $image,
    font    =&gt; gdLargeFont,
    text    =&gt; TITLE_TEXT,
    color   =&gt; $text_color,
    valign  =&gt; "top",
    halign  =&gt; "center",
);
$title-&gt;draw( IMAGE_SIZE / 2, TITLE_Y_COORD );</pre></blockquote>


<p>We create a GD::Text::Align object by passing our GD object,
<tt class="literal">$image</tt>, and a number of parameters describing our
text, and the <tt class="function">draw</tt> method adds our title to the
image. We should then remove the <tt class="literal">TITLE_X_COORD</tt>
constant, which we know longer use; you may also want to rename
<tt class="literal">TITLE_Y_COORD</tt> to something more meaningful in this
context, such as <tt class="literal">TITLE_TOP_MARGIN</tt>.</p>


<p>Besides allowing you to place aligned text, GD::Text::Align also lets
you obtain coordinates for the bounding box for a text string before
you place it so you can make adjustments if necessary (such as
reducing the size of the font). It also supports True Type fonts and
placing text at angles. Refer to the GD::Text::Align online
documentation for more information.</p>
</div>
</div>




<a name="ch13-15-fm2xml" /><div class="sect2">
<h3 class="sect2">13.4.2. GD::Graph</h3>


<p>
<a name="INDEX-2599" />
<a name="INDEX-2600" />GD::Graph, also by Martin Verbruggen, is
a collection of modules that produce graphs using GD. GD::Graph has
had a few different names within the last year. It was originally
called <a name="INDEX-2601" />GIFgraph.
However, after GD removed support for GIF, it no longer produced
GIFs; in fact, it broke. Steve Bonds updated it to use PNG and
renamed it as <a name="INDEX-2602" /> <a name="INDEX-2,603" />Chart::PNGgraph.
Later, Martin Verbruggen gave it the more general name, GD::Graph,
and removed specific image format support. Previously, you called the
<tt class="function">plot</tt> method to retrieve the graph in either GIF
(for GIFgraph) or PNG (for PNGgraph) formats. Now,
<tt class="function">plot</tt> returns a GD::Image object so the
user can choose the format desired. We'll see how this works in
a moment.</p>


<p>To install <a name="INDEX-2604" /> <a name="INDEX-2,605" /> <a name="INDEX-2,606" />GD::Graph, you must
first have GD and GD::Text installed. GD::Graph provides the
following modules for creating graphs:</p>


<ul><li><p>
<a name="INDEX-2607" />GD::Graph::area creates area charts, as
shown in <a href="ch13_04.htm">Figure 13-2</a>.</p></li></ul>
<a name="ch13-23932" /><div class="figure"><img width="323" src="figs/cgi2.1302.gif" height="242" alt="Figure 13-2" /></div><h4 class="objtitle">Figure 13-2. An area chart created with GD::Graph::area</h4>

<ul><li><p>
<a name="INDEX-2608" />GD::Graph::bars
creates bar charts, as shown in <a href="ch13_04.htm">Figure 13-3</a>.</p></li></ul>
<a name="ch13-64621" /><div class="figure"><img width="323" src="figs/cgi2.1303.gif" height="242" alt="Figure 13-3" /></div><h4 class="objtitle">Figure 13-3. A bar chart created with GD::Graph::bars</h4>

<ul><li><p>
<a name="INDEX-2609" />GD::Graph::lines
creates line charts, as shown in <a href="ch13_04.htm">Figure 13-4</a>.</p></li></ul>
<a name="ch13-69374" /><div class="figure"><img width="323" src="figs/cgi2.1304.gif" height="242" alt="Figure 13-4" /></div><h4 class="objtitle">Figure 13-4. A line chart created with GD::Graph::lines</h4>

<ul><li><p>
<a name="INDEX-2610" /> <a name="INDEX-2,611" /> <a name="INDEX-2,612" />GD::Graph::points creates point charts
(also sometimes called XY or scatter charts), as shown in <a href="ch13_04.htm">Figure 13-5</a>.</p></li></ul>
<a name="ch13-43460" /><div class="figure"><img width="323" src="figs/cgi2.1305.gif" height="242" alt="Figure 13-5" /></div><h4 class="objtitle">Figure 13-5. A point chart created with GD::Graph::points</h4>

<ul><li><p>
<a name="INDEX-2613" />
<a name="INDEX-2614" />GD::Graph::linespoints creates a
combination of line and point charts, as shown in <a href="ch13_04.htm">Figure 13-6</a>.</p></li></ul>
<a name="ch13-19192" /><div class="figure"><img width="323" src="figs/cgi2.1306.gif" height="242" alt="Figure 13-6" /></div><h4 class="objtitle">Figure 13-6. A combination lines and points chart created with GD::Graph::linespoints</h4>

<ul><li><p>
<a name="INDEX-2615" />GD::Graph::pie
creates pie charts, as shown in <a href="ch13_04.htm">Figure 13-7</a>.</p></li></ul>
<a name="ch13-21659" /><div class="figure"><img width="242" src="figs/cgi2.1307.gif" height="242" alt="Figure 13-7" /></div><h4 class="objtitle">Figure 13-7. A pie chart created with GD::Graph::pie</h4>

<ul><li><p>
<a name="INDEX-2616" />GD::Graph::mixed allows
you to create a combination of any of the previous types except pie
charts, as shown in <a href="ch13_04.htm">Figure 13-8</a>.</p></li></ul>
<p>Each of the previous examples uses the data shown in <a href="ch13_04.htm">Table 13-1</a>.</p>



<a name="ch13-33858" /><h4 class="objtitle">Table 13-1. Sample Daily Commute Time in Minutes </h4><table border="1">







<tr>
<th>
<p>Weekday</p></th>
<th>
<p>Monday</p></th>
<th>
<p>Tuesday</p></th>
<th>
<p>Wednesday</p></th>
<th>
<p>Thursday</p></th>
<th>
<p>Friday</p></th>
</tr>




<tr>
<td>
<p>Morning</p></td>
<td>
<p>33</p></td>
<td>
<p>24</p></td>
<td>
<p>23</p></td>
<td>
<p>19</p></td>
<td>
<p>21</p></td>
</tr>

<tr>
<td>
<p>Evening</p></td>
<td>
<p>17</p></td>
<td>
<p>15</p></td>
<td>
<p>19</p></td>
<td>
<p>15</p></td>
<td>
<p>24</p></td>
</tr>


</table>


<p><a href="ch13_04.htm">Example 13-3</a> contains the <a name="INDEX-2617" /> <a name="INDEX-2,618" /> <a name="INDEX-2,619" />code used to create
the <a name="INDEX-2620" /> <a name="INDEX-2,621" /> <a name="INDEX-2,622" />mixed graph that appears in <a href="ch13_04.htm">Figure 13-8</a>.</p>


<a name="ch13-58821" /><div class="figure"><img width="323" src="figs/cgi2.1308.gif" height="242" alt="Figure 13-8" /></div><h4 class="objtitle">Figure 13-8. A mixed chart created with GD::Graph::mixed</h4>


<a name="ch13-84153" /><div class="example">
<h4 class="objtitle">Example 13-3. commute_mixed.cgi </h4>

<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;
use CGI;
use GD::Graph::mixed;

use constant TITLE =&gt; "Average Commute Time: Mixed Chart";

my $q     = new CGI;
my $graph = new GD::Graph::mixed( 400, 300 );
my @data  = (
    [ qw( Mon  Tue  Wed  Thu  Fri ) ],
    [      33,  24,  23,  19,  21   ],
    [      17,  15,  19,  15,  24   ],
);


$graph-&gt;set( 
    title           =&gt; TITLE,
    x_label         =&gt; "Day",
    y_label         =&gt; "Minutes",
    long_ticks      =&gt; 1,
    y_max_value     =&gt; 40,
    y_min_value     =&gt; 0,
    y_tick_number   =&gt; 8,
    y_label_skip    =&gt; 2,
    bar_spacing     =&gt; 4,
    types           =&gt; [ "bars", "linespoints" ],
);

$graph-&gt;set_legend( "Morning", "Evening" );
my $gd_image = $graph-&gt;plot( \@data );

print $q-&gt;header( -type =&gt; "image/png", -expires =&gt; "now" );

binmode STDOUT;
print $gd_image-&gt;png;</pre></blockquote>
</div>


<p>Note that for this script we do not need to use the GD module because
we are not creating images directly; we simply use the GD::Graph
module. We set one constant for the title of the graph. We could have
created many more constants for the different parameters we are
passing to GD::Graph, but this script is short, and not using
constants allows you to easily see the values each parameter takes.</p>


<p>We create a mixed graph object by passing the width and height in
pixels, and we set up our data. Then, we call the
<tt class="function">set</tt> method to set parameters for our graph. The
meaning of some of these parameters is obvious; we will just explain
those that may not be. <tt class="literal">long_ticks</tt> sets whether
ticks should extend through the area of the chart to form a grid.
<tt class="literal">y_tick_number</tt> specifies how many ticks the y axis
should be divided into. <tt class="literal">y_label_skip</tt> sets how
often the ticks on the y axis should be labelled; our setting,
<tt class="literal">2</tt>, means every other one.
<tt class="literal">bar_spacing</tt> is the number of pixels between the
bars (for the bars series). Finally, <tt class="literal">types</tt> sets
the graph type of each series.</p>


<p>We add a legend that describes our data series. Next, we call the
plot method with our data and receive a GD::Image object containing
our new graph. Then all we need to do is generate our header and
output the image as a PNG.</p>


<p>We won't look at code for each image type, because except for
pie charts, this same code can generate each of the other types of
images with very few modifications. You simply need to change
GD::Graph::mixed to the name of the module you wish to use. The only
property in the set method here that is particular to mixed graphs is
<tt class="literal">types</tt>. The only property particular to mixed
charts or bar charts is <tt class="literal">bar_spacing</tt>. The others
are common across all the <a name="INDEX-2623" /> <a name="INDEX-2,624" /> <a name="INDEX-2,625" />other types.</p>


<p>Pie <a name="INDEX-2626" /> <a name="INDEX-2,627" /> <a name="INDEX-2,628" />charts are somewhat different. They only
accept a single data series, they cannot have a legend, and because
they have no axes, most of the parameters we just discussed do not
apply to them. Furthermore, pie charts are three-dimensional by
default. <a href="ch13_04.htm">Example 13-4</a> provides the code used to
create the pie chart that's shown in <a href="ch13_04.htm">Figure 13-7</a>.</p>



<a name="ch13-79259" /><div class="example">
<h4 class="objtitle">Example 13-4. commute_pie.cgi </h4>

<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;
use CGI;
use GD::Graph::pie;

use constant TITLE =&gt; "Average Commute Time: Pie Chart";

my $q     = new CGI;
my $graph = new GD::Graph::pie( 300, 300 );
my @data  = (
    [ qw( Mon  Tue  Wed  Thu  Fri ) ],
    [      33,  24,  23,  19,  21   ]
);


$graph-&gt;set( 
    title           =&gt; TITLE,
    '3d'            =&gt; 0
);

my $gd_image = $graph-&gt;plot( \@data );

print $q-&gt;header( -type =&gt; "image/png", -expires =&gt; "-1d" );

binmode STDOUT;
print $gd_image-&gt;png;</pre></blockquote>
</div>


<p>This script is much shorter because we do not set nearly so many
parameters. Instead, we simply set the title and turn the
<tt class="literal">3d</tt> option off (we will return to this concept in
the next section). We also used 300 &times; 300 for the size of the
graph instead of 400 &times; 300. GD::Graph will scale a pie chart to
fit the edges of the graph, so pie charts will be elliptical if they
are plotted in a rectangular region. Finally, we submit only one
series of data and omit the call to add a legend, which is currently
unsupported for pie charts.</p>
</div>




<a name="ch13-16-fm2xml" /><div class="sect2">
<h3 class="sect2">13.4.3. GD::Graph3D</h3>


<p>
<a name="INDEX-2629" /> <a name="INDEX-2,630" /> <a name="INDEX-2,631" />GD::Graph3D
allows us to <a name="INDEX-2632" />generate
three-dimensional charts. It is an extension to GD::Graph that
provides three additional modules:</p>


<ul><li><p>GD::Graph::bars3d creates three-dimensional bar charts, as shown in
<a href="ch13_04.htm">Figure 13-9</a>.</p></li></ul>
<a name="ch13-73311" /><div class="figure"><img width="323" src="figs/cgi2.1309.gif" height="242" alt="Figure 13-9" /></div><h4 class="objtitle">Figure 13-9. A 3D bar chart created with GD::Graph::bars3d</h4>

<ul><li><p>
<a name="INDEX-2633" />GD::Graph::lines3d creates
three-dimensional line charts, as shown in <a href="ch13_04.htm">Figure 13-10</a>.</p></li></ul>
<a name="ch13-99023" /><div class="figure"><img width="323" src="figs/cgi2.1310.gif" height="242" alt="Figure 13-10" /></div><h4 class="objtitle">Figure 13-10. A 3D line chart created with GD::Graph::lines3d</h4>

<ul><li><p>
<a name="INDEX-2634" />GD::Graph::pie3d creates
three-dimensional pie charts, as shown in <a href="ch13_04.htm">Figure 13-11</a>. This module actually just calls
GD::Graph::pie, which now generates three-dimensional pie charts by
default anyhow. It is included simply to provide a name consistent
with the other two modules. In order to make the usage clear and
consistent, perhaps GD::Graph::pie will ultimately default to
non-three-dimensional pie charts and GD::Graph::pie3d can become the
preferred way to generate a 3D version.</p></li></ul>
<a name="ch13-82953" /><div class="figure"><img width="242" src="figs/cgi2.1311.gif" height="242" alt="Figure 13-11" /></div><h4 class="objtitle">Figure 13-11. A 3D pie chart created with GD::Graph::pie or GD::Graph::pie3d</h4>

<p>In order to use these modules, simply replace the standard module
name with the 3D module name; all other properties and methods remain
the same. Additionally, the 3D <a name="INDEX-2635" />
<a name="INDEX-2636" />bar chart
and 3D line chart each offer methods to set the depth of the bars and
lines. Refer to the included documentation. Note that although the
module is distributed as
<a name="INDEX-2637" />GD::Graph3d, the documentation is
installed, along with the additional graph types, in the
<em class="filename">GD/Graph</em>
<a name="INDEX-2638" /> directory, so to view the
documentation for GD::Graph3d, you <a name="INDEX-2639" /> <a name="INDEX-2,640" /> <a name="INDEX-2,641" />must reference it this <a name="INDEX-2,642" />way:</p>


<blockquote><pre class="code">$ perldoc GD::Graph::Graph3d</pre></blockquote>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch13_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.3. Generating PNGs with GD</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">13.5. PerlMagick</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>