<?label 2.3. Browser Requests?><html><head><title>Browser Requests (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch02_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">2.3. Browser Requests</h2>



<p>Every HTTP interaction starts with a request from a client, typically
a web <a name="INDEX-291" /> <a name="INDEX-292" />browser. A user provides a URL to the
browser by typing it in, clicking on a hyperlink, or selecting a
bookmark, and the browser fetches the corresponding document. To do
that, it must create an HTTP request (see <a href="ch02_03.htm">Figure 2-4</a>).</p>



<a name="ch02-98871" /><div class="figure"><img width="260" src="figs/cgi2.0204.gif" height="45" alt="Figure 2-4" /></div><h4 class="objtitle">Figure 2-4. The structure of HTTP request headers</h4>

<p>Recall that in our previous example, a web browser generated the
following request when it was asked to fetch the URL <em class="emphasis">http://localhost/index.html </em>:</p>



<blockquote><pre class="code">GET /index.html HTTP/1.1
Host: localhost
Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/xbm, */*
Accept-Language: en
Connection: Keep-Alive
User-Agent: Mozilla/4.0 (compatible; MSIE 4.5; Mac_PowerPC)
.
.
.</pre></blockquote>



<p>From our discussion of URLs, you know that the URL can be broken down
into multiple elements. The browser creates a network connection by
using the hostname and the port number (<tt class="literal">80</tt> by
default). The scheme (<tt class="literal">http</tt>) tells our web browser
that it is using the HTTP protocol, so once the connection is
established, it sends an HTTP request for the resource. The first
line of an HTTP request is the <a name="INDEX-293" /> <a name="INDEX-294" />request line, which includes a
full virtual path and query string (if present); see <a href="ch02_03.htm">Figure 2-5</a>.</p>



<a name="ch02-76971" /><div class="figure"><img width="199" src="figs/cgi2.0205.gif" height="46" alt="Figure 2-5" /></div><h4 class="objtitle">Figure 2-5. The request line</h4>

<a name="ch02-6-fm2xml" /><div class="sect2">
<h3 class="sect2">2.3.1. The Request Line</h3>



<p>The first line of an HTTP <a name="INDEX-295" />
<a name="INDEX-296" /> <a name="INDEX-297" />request includes the request method, a URL
to the resource being requested, and the <a name="INDEX-298" />version string of the protocol.
<a name="INDEX-299" /> <a name="INDEX-300" /> <a name="INDEX-301" /> <a name="INDEX-302" />Request methods are
case-sensitive and uppercase. There are several request methods
defined by HTTP although a web server may not make all of them
available for each resource (see <a href="ch02_03.htm">Table 2-1</a>). The
version string is the name and version of the protocol separated by a
slash. HTTP 1.0 and HTTP 1.1 are represented as
<tt class="literal">HTTP/1.0</tt> and <tt class="literal">HTTP/1.1</tt>. Note
that <tt class="literal">https</tt> requests also produce one of these two
HTTP protocol strings.</p>



<a name="ch02-57144" /><h4 class="objtitle">Table 2-1. HTTP Request Methods</h4><table border="1">



<tr>
<th>
<p>Method</p></th>
<th>
<p>Description</p></th>
</tr>






<tr>
<td>
<p>GET</p></td>
<td>
<p>Asks the server for the given resource</p></td>
</tr>


<tr>
<td>
<p>HEAD</p></td>
<td>
<p>Used in the same cases that a GET is used but it only returns HTTP
headers and no content</p></td>
</tr>


<tr>
<td>
<p>POST</p></td>
<td>
<p>Asks the server to modify information stored on the server</p></td>
</tr>


<tr>
<td>
<p>PUT</p></td>
<td>
<p>Asks the server to create or replace a resource on the server</p></td>
</tr>


<tr>
<td>
<p>DELETE</p></td>
<td>
<p>Asks the server to delete a resource on the server</p></td>
</tr>


<tr>
<td>
<p>CONNECT</p></td>
<td>
<p>Used to allow secure SSL connections to tunnel through HTTP
connections</p></td>
</tr>


<tr>
<td>
<p>OPTIONS</p></td>
<td>
<p>Asks the server to list the request methods available for the given
resource</p></td>
</tr>


<tr>
<td>
<p>TRACE</p></td>
<td>
<p>Asks the server to echo back the request headers as it received them</p></td>
</tr>



</table>



<p>Of the request methods listed in <a href="ch02_03.htm">Table 2-1</a>, the
three you will encounter most often when writing CGI scripts are GET,
HEAD, and POST. However, let's first take a look at why the PUT
and DELETE methods are not used with CGI.</p>



<a name="ch02-7-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.1.1. PUT and DELETE</h3>



<p>The Web was originally conceived as a medium where users could both
read and write content. However, the Web took off initially as a
read-only medium and it is only through Web Distributed Authoring and
Versioning (WebDAV) that interest is returning to the ability to
write content to the Web. The <a name="INDEX-303" /> <a name="INDEX-304" /> <a name="INDEX-305" />
<a name="INDEX-306" />
<a name="INDEX-307" />PUT and DELETE methods tell the server
to create, replace, or remove the resource they are directed at. Note
that this means that if one of these requests is targeted at a CGI
script (assuming the request is valid), the CGI script will be
replaced or removed, but not executed. Thus, you do not need to worry
about these request methods within your CGI scripts. While it might
be possible to remap a PUT or DELETE request directed at a particular
URL so that a different CGI script handles it, such a discussion of
WebDAV implementation is beyond the scope of this book.</p>
</div>





<a name="ch02-8-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.1.2. GET</h3>



<p><em class="firstterm">GET</em>
<a name="INDEX-308" />
<a name="INDEX-309" />
<a name="INDEX-310" /> is the standard request method for
retrieving a document via HTTP on the Web. When you click on a
hyperlink, type a location into your browser, or click on a bookmark,
the browser generally creates a GET request for the URL you
requested. GET requests are intended only to retrieve resources and
should not have side effects. They should not alter information
maintained on the web server; POST is intended for that purpose. GET
requests do not have a content body.</p>



<p>In practice, some CGI developers do not understand nor follow the
policy that GET requests should not have side effects, even though it
is a good idea to do so. Because web browsers assume that GET
requests have no side effects, they may be carefree about making
multiple requests for the same document. For instance, if the user
presses the browser's "back" button to return to a
page that was originally requested via GET and is no longer in the
browser's cache, the browser may GET a new copy. If the
original request was via POST, however, the user would instead
receive a message that the document is no longer available in the
cache. If the user then decides to reload the request, he or she will
generally receive a dialog confirming that they wish to resend the
POST request. These features help the user avoid mistakenly sending a
request multiple times when the request would modify information
stored on the server.</p>
</div>





<a name="ch02-9-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.1.3. HEAD</h3>



<p>You <a name="INDEX-311" />
<a name="INDEX-312" />
<a name="INDEX-313" />may have
noticed that we said that your web browser
<em class="emphasis">generally</em> creates a GET request to fetch
resources you have requested. If your browser has previously
retrieved a resource, it may be stored within the browser's
cache. In order for the browser to know whether to display the cached
copy or whether to request a fresh copy, the browser can send a
<em class="firstterm">HEAD</em> request. HEAD requests are formatted
exactly like GET requests, and the server responds to it exactly like
a GET request with one exception: it sends only the HTTP headers, it
doesn't send the content. The browser can then check the
meta-information contained in the headers, such as the modification
date of the resource, to see if it has changed and whether it should
replace the cached version with the newer version. HEAD requests do
not have a content body either.</p>



<p>In practice, you can treat HEAD requests the same as GET requests in
your CGI scripts, and the web server will truncate the content of
your responses and return only headers. For this reason, we will
rarely discuss to the HEAD request method in this book. If you are
concerned about performance, you may wish to check the request method
yourself and conserve resources by not generating content for HEAD
requests. We will see how your script can determine the request
method in the next chapter.</p>
</div>





<a name="ch02-10-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.1.4. POST</h3>



<p><em class="firstterm">POST</em>
<a name="INDEX-314" /> <a name="INDEX-315" />
<a name="INDEX-316" /> is used
with HTML forms to submit information that alters data stored on the
web server. POST requests always include a body containing the
submitted information formatted like a query string. POST requests
thus require additional headers specifying the length of the content
and its format. These headers are described in the following section.</p>



<p>Although POST requests should only be used to modify data on the
server, CGI developers commonly use POST requests for CGI scripts
that simply return information, but do not modify data. This practice
is more common and less dangerous than the reverse
situation -- using GET to modify data on the server. Developers
use POST for any number of reasons:</p>



<ul><li><p>Some developers believe that forms submitted via POST offer greater
security over those submitted via GET because a user cannot modify
the values within the URL in the browser as they can with GET. This
reasoning is flawed. Knowledgeable users, as we will see in our
security discussion in <a href="ch08_01.htm">Chapter 8, "Security"</a>, can easily find
ways around this.</p></li><li><p>The responses to resources received via POST cannot be bookmarked or
hyperlinked (at least without using a bookmarklet; see <a href="ch07_01.htm">Chapter 7, "JavaScript"</a>). Although this is generally inconvenient for
the user, sometimes this is the preferred behavior.</p></li></ul>
<p>Note that users may encounter browser warnings about expired pages if
they attempt to revisit cached pages obtained <a name="INDEX-317" /> <a name="INDEX-318" /> <a name="INDEX-319" />via POST.</p>
</div>
</div>








<a name="ch02-11-fm2xml" /><div class="sect2">
<h3 class="sect2">2.3.2. Request Header Field Lines</h3>



<p>The client generally sends several <a name="INDEX-320" />
<a name="INDEX-321" />
<a name="INDEX-322" />header fields with its request. As
mentioned earlier, these consist of a field name, a colon, some
combination of spaces or tabs (although one space is most common),
and a value (see <a href="ch02_03.htm">Figure 2-6</a>). These fields are used
to pass additional information about the request or about the client,
or to add conditions to the request. We'll discuss the common
browser headers here; they are listed in <a href="ch02_03.htm">Table 2-2</a>. Those connected with content negotiation and
caching are discussed later in this chapter.</p>



<a name="ch02-60820" /><div class="figure"><img width="177" src="figs/cgi2.0206.gif" height="45" alt="Figure 2-6" /></div><h4 class="objtitle">Figure 2-6. A header field line</h4>


<a name="ch02-38477" /><h4 class="objtitle">Table 2-2. Common HTTP Request Headers</h4><table border="1">



<tr>
<th>
<p>Header</p></th>
<th>
<p>Description</p></th>
</tr>






<tr>
<td>
<p>Host</p></td>
<td>
<p>Specifies the target hostname</p></td>
</tr>


<tr>
<td>
<p>Content-Length</p></td>
<td>
<p>Specifies the length (in bytes) of the request content</p></td>
</tr>


<tr>
<td>
<p>Content-Type</p></td>
<td>
<p>Specifies the media type of the request</p></td>
</tr>


<tr>
<td>
<p>
<a name="INDEX-323" />Authentication</p></td>
<td>
<p>Specifies the username and password of the user requesting the
resource</p></td>
</tr>


<tr>
<td>
<p>User-Agent</p></td>
<td>
<p>Specifies the name, version, and platform of the client</p></td>
</tr>


<tr>
<td>
<p>Referer</p></td>
<td>
<p>Specifies the URL that referred the user to the current resource</p></td>
</tr>


<tr>
<td>
<p>Cookie</p></td>
<td>
<p>Returns a name/value pair set by the server on a previous response</p></td>
</tr>



</table>



<a name="ch02-12-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.2.1. Host</h3>



<p>The <em class="firstterm">Host</em>
<a name="INDEX-324" />
<a name="INDEX-325" /> field is new and is required in HTTP
1.1. The client sends the host name of the web server in this field.
This may sound redundant, since the host should know its own
identity, right? Well, not always. A machine with one IP address may
have multiple <a name="INDEX-326" /> <a name="INDEX-327" />domain names
mapped to it, such as <em class="emphasis">www.oreilly.com</em> and <em class="emphasis">www.ora.com</em>. When a request comes in, it
looks at this header to determine what name the client is referring
to it as, and thus maps the request to the correct content.</p>
</div>





<a name="ch02-13-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.2.2. Content-Length</h3>



<p>
<a name="INDEX-328" />POST requests include
a content body; in order for the web server to know how much data to
read, it must declare the size of the body in bytes in the
<em class="firstterm">Content-Length</em>
<a name="INDEX-329" /> <a name="INDEX-330" /> field. There are a couple of
circumstances where HTTP 1.1 clients may omit this field, but these
cases don't concern us because the web server will still
calculate this value for us and provide it to our CGI scripts as
though it had been included in the original request. POST requests
that contain empty contents supply a value of
in this header. Requests that do not have a content body, such as GET
and HEAD, omit this field.</p>
</div>





<a name="ch02-14-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.2.3. Content-Type</h3>



<p>The <em class="firstterm">Content-Type</em> header must always be
provided with requests containing a body. It specifies the media type
of the message. The most common value of this data received from an
HTML form via POST is
<em class="emphasis">application/x-www-form-urlencoded,</em> although
another option for form input (used when submitting files) is
<em class="emphasis">multipart/form-data</em>
<a name="INDEX-331" />
<a name="INDEX-332" />. We'll discuss how to
specify the media type of requests in our discussion of HTML forms in
<a href="ch04_01.htm">Chapter 4, "Forms and CGI"</a>, and we will look at how to parse
multipart requests in <a href="ch05_01.htm">Chapter 5, "CGI.pm"</a>.</p>
</div>





<a name="ch02-23130" /><div class="sect3">
<h3 class="sect3">2.3.2.4. Authorization</h3>



<p>Web servers can require a
<a name="INDEX-333" />
<a name="INDEX-334" />
<a name="INDEX-335" />login for access to
<a name="INDEX-336" />
<a name="INDEX-337" />some resources. If you have ever attempted
to access a restricted area of a web site and been prompted for a
login and password, then you have encountered this form of HTTP
authentication (see <a href="ch02_03.htm">Figure 2-7</a>).<a href="#FOOTNOTE-3">[3]</a> Note that the login prompt includes text identifying what
you are logging in to; this is the<em class="firstterm">
realm</em>
<a name="INDEX-338" />. Resources that share the same
login are part of the same realm. For most web servers, you assign
resources to a realm by putting them in the same directory and
configuring the web server to assign the directory a name for the
realm along with authorization requirements. For example, if you
wanted to restrict access to URL paths that begin with <em class="emphasis">/protected</em>
<a name="INDEX-339" />
<a name="INDEX-340" />, then you would add the
following to <em class="filename">httpd.conf</em> (or
<em class="filename">access.conf,</em> if you are using it):</p><blockquote>


<a name="FOOTNOTE-3" /><p>[3]The distinction between authentication and authorization is
subtle, but important. <em class="firstterm">Authentication </em>is the
process of identifying someone. <em class="firstterm">Authorization
</em>determines what that person can access.</p>


</blockquote>



<blockquote><pre class="code">&lt;Location /protected&gt;
  AuthType Basic
  AuthName "The Secret Files"
  AuthUserFile  /usr/local/apache/conf/secret.users
  require valid-user
&lt;/Location&gt;</pre></blockquote>



<a name="ch02-40524" /><div class="figure"><img width="274" src="figs/cgi2.0207.gif" height="148" alt="Figure 2-7" /></div><h4 class="objtitle">Figure 2-7. Prompt presented to the user for HTTP authorization</h4>

<p>The user file contains <a name="INDEX-341" />
<a name="INDEX-342" />usernames and encrypted passwords
separated by a colon. You can use the
<tt class="command">htpasswd</tt>
<a name="INDEX-343" /> <a name="INDEX-344" />
utility that comes with Apache to create and update this file; refer
to its manpage or the Apache manual for usage. When the browser
requests a resource in a restricted realm, the server informs the
browser that it requires login information by sending a 401 status
code and the name of the realm in the
<em class="emphasis">WWW-Authenticate</em>
<a name="INDEX-345" /> header (we'll discuss this later
in the chapter). The browser then prompts the user for a username and
password for this realm (if it hasn't done so already) and
resends the request with the credentials in an
<em class="firstterm">Authorization</em> field. There are multiple types
of HTTP authentication, but the only type that is widely supported by
browsers and servers is basic authentication.</p>



<p>The
<em class="emphasis">Authorization</em>
<a name="INDEX-346" /> field for basic authentication looks like
this:</p>



<blockquote><pre class="code">Authorization: Basic dXNlcjpwYXNzd29yZA==</pre></blockquote>



<p>The <a name="INDEX-347" />
<a name="INDEX-348" />encoded portion is simply
the username and password joined with a colon and Base64-encoded.
This can be easily decoded, so basic authentication provides no
security against third parties sniffing usernames and passwords
unless the connection is secured via SSL.</p>



<p>The server handles authentication and authorization transparently for
you. As we will see in the next chapter, you may access the login
name from your CGI scripts but not the password.</p>
</div>





<a name="ch02-15-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.2.5. User-Agent</h3>



<p>This <a name="INDEX-349" />field
indicates what client the user is using to access the Web. The value
is generally comprised of a nickname of the <a name="INDEX-350" />
<a name="INDEX-351" /> <a name="INDEX-352" />browser, its version number,
and the operating system and platform on which it's running.
Here is an example from Netscape Communicator:</p>



<blockquote><pre class="code">User-Agent: Mozilla/4.5 (Macintosh; I; PPC)</pre></blockquote>



<p>Unfortunately,
<a name="INDEX-353" />Microsoft Internet Explorer made the
dubious decision when it released its browser of also claiming to be
"Mozilla," which is Netscape's nickname. Apparently
this was done because a number of web sites used this field to
distinguish Netscape browsers from others in order to take advantage
of the additional features Netscape offered at the time. Microsoft
made their browser compatible with many of these features and wanted
its users to also take advantage of these enhanced web sites. Even
now, the "Mozilla" moniker remains for the sake of
backward-compatibility. Here is an example from Internet Explorer:</p>



<blockquote><pre class="code">User-Agent: Mozilla/4.0 (compatible; MSIE 4.5; Mac_PowerPC)</pre></blockquote>
</div>





<a name="ch02-16-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.2.6. Accept</h3>



<p>The <em class="firstterm">Accept</em>
<a name="INDEX-354" /> <a name="INDEX-355" /> field and related fields that begin with
<em class="emphasis">Accept</em>, such as
<em class="firstterm">Accept-Language</em>, are sent by the client to
tell the server the categories of responses it is capable of
understanding. These categories include file formats, languages,
character sets, etc. We discuss this process in more detail later in
this chapter in <a href="ch02_06.htm">Section 2.6, "Content Negotiation"</a>.</p>
</div>





<a name="ch02-17-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.2.7. Referer</h3>



<p>No, this is not a typo. Unfortunately, the <em class="firstterm">Referer
</em>
<a name="INDEX-356" />
<a name="INDEX-357" />field was misspelled in the original
protocol and, due to the need to maintain backward-compatibility, we
are stuck with it this way. This field provides the URL of the last
page the user visited, which is generally the page that linked the
user to the requested page:</p>



<blockquote><pre class="code">Referer: http://localhost/index.html</pre></blockquote>



<p>This field is not always sent to the server; browsers provide this
field only when the user generates a request by following a
hyperlink, submitting a form, etc. Browsers don't generally
provide this field when the user manually enters a URL or selects a
bookmark, since these may involve a significant invasion of the
user's privacy.</p>
</div>





<a name="ch02-18-fm2xml" /><div class="sect3">
<h3 class="sect3">2.3.2.8. Cookies</h3>



<p>Web browsers or servers may provide additional headers that are not
part of the HTTP standard. The receiving application should ignore
any <a name="INDEX-358" />
<a name="INDEX-359" />
<a name="INDEX-360" />
<a name="INDEX-361" />headers it
does not recognize. A example of a pair of headers not specified in
the HTTP protocol are <em class="emphasis">Set-Cookie</em> and
<em class="emphasis">Cookie</em>, which Netscape introduced to support
browser cookies. <em class="emphasis">Set-Cookie</em> is sent by the
server as part of a response:</p>



<blockquote><pre class="code">Set-Cookie: cart_id=12345; path=/; expires=Sat, 18-Mar-05 19:06:19 GMT</pre></blockquote>



<p>This header contains data for the client to echo back in the
<em class="emphasis">Cookie</em> header in future requests to that server:</p>



<blockquote><pre class="code">Cookie: cart_id=12345</pre></blockquote>



<p>By assigning different values to each user, servers (and CGI scripts)
can use cookies to differentiate between users. We discuss <a name="INDEX-362" /> <a name="INDEX-363" /> <a name="INDEX-364" />cookies <a name="INDEX-365" /> <a name="INDEX-366" />extensively in <a href="ch11_01.htm">Chapter 11, "Maintaining State"</a>.</p>
</div>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch02_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">2.2. HTTP</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">2.4. Server Responses</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>