<?label 11.2. Hidden Fields?><html><head><title>Hidden Fields (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch11_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch11_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">11.2. Hidden Fields</h2>


<p>
<a name="INDEX-2250" /> <a name="INDEX-2,251" /> <a name="INDEX-2,252" /> <a name="INDEX-2,253" />Hidden
form fields allow us to store "hidden" information within
a form; these fields are not displayed by the browser. However, you
can view the contents of the entire form, including the hidden
fields, by viewing its HTML source, using the browser's
"<a name="INDEX-2254" />
<a name="INDEX-2255" />View Source"
option. Therefore, hidden fields are not meant for security (since
anyone can see them), but just for passing session information to and
from forms transparently. See <a href="ch04_01.htm">Chapter 4, "Forms and CGI"</a>, for more
information on forms and hidden fields.</p>


<p>Just to refresh your memory, here's a snippet containing a
hidden field that holds a <a name="INDEX-2256" />session <a name="INDEX-2,257" />identifier:</p>


<blockquote><pre class="code">&lt;FORM ACTION="/cgi/program.cgi" METHOD="POST"&gt;
&lt;INPUT TYPE="hidden" NAME  = "id" 
                     VALUE = "e07a08c4612b0172a162386ca76d2b65"&gt;
.
.
&lt;/FORM&gt;</pre></blockquote>


<p>When the user presses the submit button, the browser encodes the
information within all the fields and then passes the information to
the server, without differentiating the hidden fields in any manner.</p>


<p>Now that we know how hidden
f<a name="INDEX-2258" />
<a name="INDEX-2259" />ields work,
let's use them to implement a very simple application that
maintains state information between invocations of multiple forms.
And what better example to illustrate hidden fields than a shopping
cart application? See <a href="ch11_02.htm">Figure 11-1</a>.</p>


<a name="ch11-44756" /><div class="figure"><img width="481" src="figs/cgi2.1101.gif" height="234" alt="Figure 11-1" /></div><h4 class="objtitle">Figure 11-1. The shoppe.cgi welcome page</h4>

<p>The shopping cart application we'll discuss is rather
primitive. We don't perform any database lookups for product
information or prices. We don't accept credit card numbers or
payment authorization. Our main goal in this section is to understand
state maintenance.</p>


<p>How does our application work? A typical shopping cart application
presents the user with several features, namely the ability to browse
the catalog of products, to place products in the cart, to view the
contents of the cart, and then finally to check out.</p>


<p>Our first goal is to create a <a name="INDEX-2261" />unique session identifier, right from
the very beginning. Thus, the user must start at a dynamic web page,
not a static one. Our welcome page is this:</p>


<blockquote class="simplelist">

<p><em class="emphasis">http://localhost/cgi/shoppe.cgi</em></p>

</blockquote>


<p>In fact, this one CGI script handles all of the pages. It creates a
session identifier for the user, appends it as a
<a name="INDEX-2262" />
<a name="INDEX-2263" />query string
to each link, and inserts it as a hidden field to each form. Thus,
the links that appear on the bottom of each page look like this:</p>


<blockquote><pre class="code">shoppe.cgi?action=catalog&amp;id=7d0d4a9f1392b9dd9c138b8ee12350a4
shoppe.cgi?action=cart&amp;id=7d0d4a9f1392b9dd9c138b8ee12350a4
shoppe.cgi?action=checkout&amp;id=7d0d4a9f1392b9dd9c138b8ee12350a4</pre></blockquote>


<p>The catalog page is shown in <a href="ch11_02.htm">Figure 11-2</a>.</p>


<a name="ch11-54115" /><div class="figure"><img width="481" src="figs/cgi2.1102.gif" height="288" alt="Figure 11-2" /></div><h4 class="objtitle">Figure 11-2. The shoppe.cgi catalog page</h4>

<p>Our script determines which page to display by looking at the value
of the <em class="emphasis">action</em> parameter. Although users will
typically move from the catalog to the cart to the checkout, they are
free to move around. If you try to check out before you select any
items, the system will ask you to go back and select items (but it
will remember your checkout information when you return!).</p>


<p>Let's take a look at the code, shown in <a href="ch11_02.htm">Example 11-3</a>.</p>



<a name="ch11-79018" /><div class="example">
<h4 class="objtitle">Example 11-3. shoppe.cgi </h4>
<a name="INDEX-2265" />

<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;

use CGI;
use CGIBook::Error;
use HTML::Template;


BEGIN {
    $ENV{PATH} = "/bin:/usr/bin";
    delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };
    sub unindent;
}

use vars qw( $DATA_DIR $SENDMAIL $SALES_EMAIL $MAX_FILES );

local $DATA_DIR     = "/usr/local/apache/data/tennis";
local $SENDMAIL     = "/usr/lib/sendmail -t -n";
local $SALES_EMAIL  = 'sales@email.address.com';
local $MAX_FILES    = 1000;

my $q       = new CGI;
my $action  = $q-&gt;param("action") || 'start';
my $id      = get_id( $q );


if ( $action eq "start" ) {
    start( $q, $id );
}
elsif ( $action eq "catalog" ) {
    catalog( $q, $id );
}
elsif ( $action eq "cart" ) {
    cart( $q, $id );
}
elsif ( $action eq "checkout" ) {
    checkout( $q, $id );
}
elsif ( $action eq "thanks" ) {
    thanks( $q, $id );
}
else {
    start( $q, $id );
}</pre></blockquote>
</div>


<p>This script starts like most that we have seen. It calls the
<tt class="function">get_id</tt>
<a name="INDEX-2266" /> function, which we will look at a little
later; <tt class="function">get_id</tt> returns the session identifier and
loads any previously saved session information into the current
CGI.pm object.</p>


<p>We then branch to an appropriate subroutine depending on the action
requested. Here are the <a name="INDEX-2267" /> <a name="INDEX-2,268" />subroutines that handle these
requests:</p>


<blockquote><pre class="code">#/--------------------------------------------------------------------
# Page Handling subs
# 


sub start {
    my( $q, $id ) = @_;
    
    print header( $q, "Welcome!" ),
          $q-&gt;p( "Welcome! You've arrived at the world famous Tennis Shoppe! ",
                 "Here, you can order videos of famous tennis matches from ",
                 "the ATP and WTA tour. Well, mate, are you are ready? ",
                 "Click on one of the links below:"
          ),
          footer( $q, $id );
}


sub catalog {
    my( $q, $id ) = @_;
    
    if ( $q-&gt;request_method eq "POST" ) {
        save_state( $q );
    }
    
    print header( $q, "Video Catalog" ),
          $q-&gt;start_form,
          $q-&gt;table(
              { -border       =&gt; 1,
                -cellspacing  =&gt; 1,
                -cellpadding  =&gt; 4,
              },
              $q-&gt;Tr( [
                  $q-&gt;th( { -bgcolor =&gt; "#CCCCCC" }, [
                      "Quantity",
                      "Video",
                      "Price"
                  ] ),
                  $q-&gt;td( [
                      $q-&gt;textfield(
                          -name   =&gt; "* Wimbledon 1980",
                          -size   =&gt; 2
                      ),
                      "Wimbledon 1980: John McEnroe vs. Bjorn Borg",
                      '$21.95'
                  ] ),
                  $q-&gt;td( [
                      $q-&gt;textfield(
                          -name   =&gt; "* French Open 1983",
                          -size   =&gt; 2
                      ),
                      "French Open 1983: Ivan Lendl vs. John McEnroe",
                      '$19.95'
                  ] ),
                  $q-&gt;td( { -colspan  =&gt; 3,
                            -align    =&gt; "right",
                            -bgcolor  =&gt; "#CCCCCC"
                          },
                          $q-&gt;submit( "Update" )
                  )
              ] ),
          ),
          $q-&gt;hidden(
              -name     =&gt; "id",
              -default  =&gt; $id,
              -override =&gt; 1
          ),
          $q-&gt;hidden(
              -name     =&gt; "action",
              -default  =&gt; "catalog",
              -override =&gt; 1
          ),
          $q-&gt;end_form,
          footer( $q, $id );
}


sub cart {
    my( $q, $id ) = @_;
    
    my @items     = get_items( $q );
    my @item_rows = @items ?
        map $q-&gt;td( $_ ), @items :
        $q-&gt;td( { -colspan =&gt; 2 }, "Your cart is empty" );
        
    print header( $q, "Your Shopping Cart" ),
          $q-&gt;table(
              { -border       =&gt; 1,
                -cellspacing  =&gt; 1,
                -cellpadding  =&gt; 4,
              },
              $q-&gt;Tr( [
                  $q-&gt;th( { -bgcolor=&gt; "#CCCCCC" }, [
                      "Video Title",
                      "Quantity"
                  ] ),
                  @item_rows
              ] )
          ),
          footer( $q, $id );
}


sub checkout {
    my( $q, $id ) = @_;
    
    print header( $q, "Checkout" ),
          $q-&gt;start_form,
          $q-&gt;table(
              { -border       =&gt; 1,
                -cellspacing  =&gt; 1,
                -cellpadding  =&gt; 4
              },
              $q-&gt;Tr( [
                  map( $q-&gt;td( [
                          $_,
                          $q-&gt;textfield( lc $_ )
                       ] ), qw( Name Email Address City State Zip )
                  ),
                  $q-&gt;td( { -colspan  =&gt; 2,
                            -align    =&gt; "right",
                          },
                          $q-&gt;submit( "Checkout" )
                  )
              ] ),
          ),
          $q-&gt;hidden(
              -name     =&gt; "id",
              -default  =&gt; $id,
              -override =&gt; 1
          ),
          $q-&gt;hidden(
              -name     =&gt; "action",
              -default  =&gt; "thanks",
              -override =&gt; 1
          ),
          $q-&gt;end_form,
          footer( $q, $id );
}

sub thanks {
    my( $q, $id ) = @_;
    my @missing;
    my %customer;
    
    my @items = get_items( $q );
    
    unless ( @items ) {
        save_state( $q );
        error( $q, "Please select some items before checking out." );
    }
    
    foreach ( qw( name email address city state zip ) ) {
        $customer{$_} = $q-&gt;param( $_ ) || push @missing, $_;
    }
    
    if ( @missing ) {
        my $missing = join ", ", @missing;
        error( $q, "You left the following required fields blank: $missing" );
    }
    
    email_sales( \%customer, \@items );
    unlink cart_filename( $id ) or die "Cannot remove user's cart file: $!";
    
    print header( $q, "Thank You!" ),
          $q-&gt;p( "Thanks for shopping with us, $customer{name}. ",
                 "We will contactly you shortly!"
          ),
          $q-&gt;end_html;
}</pre></blockquote>


<p>Again, nothing here should be unfamiliar. Within our tables we make
extensive use of the feature within CGI.pm that distributes tags
around items if they are supplied as
<a name="INDEX-2269" />
<a name="INDEX-2270" />array references. We also include
hidden fields in all of our forms for "id", which
contains the <a name="INDEX-2271" /> <a name="INDEX-2,272" />session identifier.</p>


<p><a href="ch11_02.htm">Figure 11-3</a> shows the shopping cart page.</p>


<a name="ch11-12515" /><div class="figure"><img width="481" src="figs/cgi2.1103.gif" height="211" alt="Figure 11-3" /></div><h4 class="objtitle">Figure 11-3. The shoppe.cgi shopping cart page</h4>

<p>Now let's look at the <a name="INDEX-2274" />functions that maintain the
user's state for us:</p>


<blockquote><pre class="code">#/--------------------------------------------------------------------
# State subs
# 


sub get_id {
    my $q = shift;
    my $id;
    
    my $unsafe_id = $q-&gt;param( "id" ) || '';
    $unsafe_id =~ s/[^\dA-Fa-f]//g;
    
    if ( $unsafe_id =~ /^(.+)$/ ) {
        $id = $1;
        load_state( $q, $id );
    }
    else {
        $id = unique_id(  );
        $q-&gt;param( -name =&gt; "id", -value =&gt; $id );
    }
    
    return $id;
}


# Loads the current CGI object's default parameters from the saved state
sub load_state {
    my( $q, $id ) = @_;
    my $saved = get_state( $id ) or return;
    
    foreach ( $saved-&gt;param ) {
        $q-&gt;param( $_ =&gt; $saved-&gt;param($_) ) unless defined $q-&gt;param($_);
    }
}


# Reads a saved CGI object from disk and returns its params as a hash ref
sub get_state {
    my $id = shift;
    my $cart = cart_filename( $id );
    local *FILE;
    
    -e $cart or return;
    open FILE, $cart or die "Cannot open $cart: $!";
    my $q_saved = new CGI( \*FILE ) or
        error( $q, "Unable to restore saved state." );
    close FILE;
    
    return $q_saved;
}


# Saves the current CGI object to disk
sub save_state {
    my $q = shift;
    my $cart = cart_filename( $id );
    local( *FILE, *DIR );
    
    # Avoid DoS attacks by limiting the number of data files
    my $num_files = 0;
    opendir DIR, $DATA_DIR;
    $num_files++ while readdir DIR;
    closedir DIR;
    
    # Compare the file count against the max
    if ( $num_files &gt; $MAX_FILES ) {
        error( $q, "We cannot save your request because the directory " .
                   "is full. Please try again later" );
    }
    
    # Save the current CGI object to disk
    open FILE, "&gt; $cart" or return die "Cannot write to $cart: $!";
    $q-&gt;save( \*FILE );
    close FILE;
}


# Returns a list of item titles and quantities
sub get_items {
    my $q = shift;
    my @items;
    
    # Build a sorted list of movie titles and quantities
    foreach ( $q-&gt;param ) {
        my( $title, $quantity ) = ( $_, $q-&gt;param( $_ ) );
        
        # Skip "* " from beginning of movie titles; skip other keys
        $title =~ s/^\*\s+// or next;
        $quantity or next;
        
        push @items, [ $title, $quantity ];
    }
    return @items;
}


# Separated from other code in case this changes in the future
sub cart_filename {
    my $id = shift;
    return "$DATA_DIR/$id";
}


sub unique_id {
    # Use Apache's mod_unique_id if available
    return $ENV{UNIQUE_ID} if exists $ENV{UNIQUE_ID};
    
    require Digest::MD5;
    
    my $md5 = new Digest::MD5;
    my $remote = $ENV{REMOTE_ADDR} . $ENV{REMOTE_PORT};
    
    # Note this is intended to be unique, and not unguessable
    # It should not be used for generating keys to sensitive data
    my $id = $md5-&gt;md5_base64( time, $$, $remote );
    $id =~ tr|+/=|-_.|;  # Make non-word chars URL-friendly
    return $id;
}</pre></blockquote>


<p>The first function, <tt class="function">get_id</tt>, checks whether the
script received a parameter named "id"; this can be
supplied in the query string or as a hidden field in a form submitted
via POST. Because we later use this as a filename, we perform a
couple of checks to make sure that the identifier is safe. Then we
call <tt class="function">load_state</tt> to retrieve any previously saved
information. If it did not receive an identifier, then it generates a
new one.</p>


<p>The <tt class="function">load_state</tt> function calls
<tt class="function">get_state</tt>, which checks whether there is a file
matching the user's identifier and creates a CGI.pm object from
it if so. <tt class="function">load_state</tt> then loops through the
parameters in the saved CGI.pm, adding them to the current CGI.pm
object. It skips any parameters that are already defined in the
current CGI.pm object. Remember this was triggered by a call to
<tt class="function">get_id</tt> at the top of the script, so all of this
is happening before any form processing has been done; if we
overwrite any current parameters, we lose that information. By
loading saved parameters into the current CGI.pm object, it allows
CGI.pm to fill in these values as defaults in the forms. Thus, the
catalog and checkout pages remember the information you previously
entered until the order is submitted and the cart is deleted.</p>


<p>The <tt class="function">save_state</tt> function is the complement of
<tt class="function">get_state</tt>. It takes a CGI.pm object and saves it
to disk. It also counts the number of carts that are already in the
data directory. One problem with this CGI script is that it allows
someone to repeatedly visit the site with different identifiers and
thus create multiple cart files. We do not want someone to fill up
the available disk space, so we limit the number of carts. We could
also assign
<tt class="literal">$CGI::POST_MAX</tt>
<a name="INDEX-2275" /> a low value at the
start of the script if we wanted to be extra careful (refer to <a href="ch05_01.htm">Section 5.1.1, "Denial of Service Attacks"</a>).</p>


<p>The <tt class="function">get_items</tt> function is used by the
<tt class="function">cart</tt> function, above, and the
<tt class="function">send_email</tt> function, below. It loops over the
parameters in a CGI.pm object, finds the ones beginning with an
asterisk, and builds a list of these items along with their
quantities.</p>


<p>The <tt class="function">get_state</tt>, <tt class="function">save_state</tt>,
and <tt class="function">thanks</tt> functions all interact with the cart
file. The <tt class="function">cart_filename</tt> function simply
encapsulates the logic used to generate a filename.</p>


<p>Finally, the <tt class="function">unique_id</tt> function is the same one
we saw <a name="INDEX-2276" />earlier in <a href="ch11_01.htm">Example 11-1</a>.</p>


<p>Our CGI script also uses a number of additional <a name="INDEX-2277" />
<a name="INDEX-2278" />utility functions.
Let's take a look at them:</p>


<blockquote><pre class="code">#/--------------------------------------------------------------------
# Other helper subs
# 


sub header {
    my( $q, $title ) = @_;
    
    return $q-&gt;header( "text/html" ) .
           $q-&gt;start_html(
               -title    =&gt; "The Tennis Shoppe: $title",
               -bgcolor  =&gt; "white"
           ) .
           $q-&gt;h2( $title ) .
           $q-&gt;hr;
}


sub footer {
    my( $q, $id ) = @_;
    my $url = $q-&gt;script_name;
    
    my $catalog_link = 
       $q-&gt;a( { -href =&gt; "$url?action=catalog&amp;id=$id" }, "View Catalog" );
    my $cart_link = 
       $q-&gt;a( { -href =&gt; "$url?action=cart&amp;id=$id" }, "Show Current Cart" );
    my $checkout_link = 
       $q-&gt;a( { -href =&gt; "$url?action=checkout&amp;id=$id" }, "Checkout" );
    
    return $q-&gt;hr .
           $q-&gt;p( "[ $catalog_link | $cart_link | $checkout_link ]" ) .
           $q-&gt;end_html;
}


sub email_sales {
    my( $customer, $items ) = @_;
    my $remote = $ENV{REMOTE_HOST} || $ENV{REMOTE_ADDR};
    local *MAIL;
    
    my @item_rows  = map sprintf( "%-50s     %4d", @$_ ), @$items;
    my $item_table = join "\n", @item_rows;
    
    open MAIL, "| $SENDMAIL" or
        die "Cannot create pipe to sendmail: $!";
    
    print MAIL unindent &lt;&lt;"    END_OF_MESSAGE";
        To: $SALES_EMAIL
        Reply-to: $customer-&gt;{email}
        Subject: New Order
        Mime-Version: 1.0
        Content-Type: text/plain; charset="us-ascii"
        X-Mailer: WWW to Mail Gateway
        X-Remote-Host: $remote
        
        Here is a new order from the web site.
        
        Name:       $customer-&gt;{name}
        Email:      $customer-&gt;{email}
        Address:    $customer-&gt;{address}
        City:       $customer-&gt;{city}
        State:      $customer-&gt;{state}
        Zip:        $customer-&gt;{zip}
        
        Title                                               Quantity
        -----                                               --------
    END_OF_MESSAGE
    
    close MAIL or die "Could not send message via sendmail: $!";
}


sub unindent {
    local $_ = shift;    
    my( $indent ) = sort
                    map /^(\s*)\S/,
                    split /\n/;
    s/^$indent//gm;
    return $_;
}</pre></blockquote>


<p>The <tt class="function">header</tt>
<a name="INDEX-2279" /> and <tt class="function">footer</tt>
functions simply return HTML, and help us maintain a consistent
header and footer across the pages. In this example
<tt class="function">header</tt> and <tt class="function">footer</tt> are
rather simple, but if we wanted to improve the look of our site, we
could do a lot simply by modifying these two functions.</p>


<p>The checkout page is shown in <a href="ch11_02.htm">Figure 11-4</a>.</p>


<a name="ch11-69770" /><div class="figure"><img width="481" src="figs/cgi2.1104.gif" height="331" alt="Figure 11-4" /></div><h4 class="objtitle">Figure 11-4. The 
shoppe.cgi checkout page</h4>

<p>The <tt class="function">send_email</tt>
<a name="INDEX-2282" />
<a name="INDEX-2283" /> function sends a the completed
order information to our sales folks. We use our
<tt class="function">unindent</tt> function from <a href="ch05_01.htm">Chapter 5, "CGI.pm"</a> so we can indent our email message in the code
and still format it properly when we send it.</p>


<p>As we've seen in the last two sections, passing a session
identifier from document to document can get a bit tedious. We either
have to embed the information in an existing HTML file, or construct
one containing the identifier entirely on the fly. In the next
section, we'll look at client-side persistent cookies, where
the browser allows us to store information on the client side. That
way, we don't have to pass information from <a name="INDEX-2284" /> <a name="INDEX-2,285" />document to
<a name="INDEX-2286" />
<a name="INDEX-2287" />
<a name="INDEX-2288" />
<a name="INDEX-2289" />document.</p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch11_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch11_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">11. Maintaining State</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">11.3. Client-Side Cookies</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>