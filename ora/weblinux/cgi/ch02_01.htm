<?label 2. The Hypertext Transport Protocol ?><html><head><title>The Hypertext Transport Protocol  (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 2. The Hypertext Transport Protocol </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch02_01.htm">URLs</a><br>
<a href="ch02_02.htm">HTTP</a><br>
<a href="ch02_03.htm">Browser Requests</a><br>
<a href="ch02_04.htm">Server Responses</a><br>
<a href="ch02_05.htm">Proxies</a><br>
<a href="ch02_06.htm">Content Negotiation</a><br>
<a href="ch02_07.htm">Summary</a><br></p></div>





<p>The <a name="INDEX-169" /> <a name="INDEX-170" /> <a name="INDEX-171" />Hypertext
Transport Protocol (HTTP) is the common language that web browsers
and web servers use to communicate with each other on the Internet.
CGI is built on top of HTTP, so to understand CGI fully, it certainly
helps to understand HTTP. One of the reasons CGI is so powerful is
because it allows you to manipulate the metadata exchanged between
the web browser and server and thus perform many useful tricks,
including:</p>



<ul><li><p>Serve content of varying type, language, or other encoding according
to the client's needs.</p></li><li><p>Check the user's previous location.</p></li><li><p>Check the browser type and version and adapt your response to it.</p></li><li><p>Specify how long the client can cache a page before it is considered
outdated and should be reloaded.</p></li></ul>
<p>We won't cover all of the details of HTTP, just what is
important for our understanding of CGI. Specifically, we'll
focus on the request and response process: how browsers ask for and
receive web pages.</p>



<p>If you are interested in understanding more about
<a name="INDEX-172" /> <a name="INDEX-173" /> <a name="INDEX-174" />HTTP than we provide here,
visit the World Wide Web Consortium's web site at <a href="../../../../../../www.w3.org/Protocols/">http://www.w3.org/Protocols/</a>. On the other
hand, if you are eager to get started writing CGI scripts, you may be
tempted to skip this chapter. We encourage you not to. Although you
can certainly learn to write CGI scripts without learning HTTP,
without the bigger picture you may end up memorizing what to do
instead of understanding why. This is certainly the most challenging
chapter, however, because we cover a lot of material without many
examples. So if you find it a little dry and want to peek ahead to
the fun stuff, we'll forgive you. Just be sure to return here
later.</p>


















<div class="sect1"><a name="ch02-81296" />
<h2 class="sect1">2.1. URLs</h2>



<p>During our discussion of HTTP and CGI, we will be often be referring
to <em class="firstterm">URLs</em>
<a name="INDEX-175" /> <a name="INDEX-176" />, or
<em class="firstterm">Uniform Resource Locators</em>. If you have used
the Web at all, then you are probably familiar with URLs. In web
terms, a
<em class="firstterm">resource</em>
<a name="INDEX-177" />
represents anything available on the web, whether it be an HTML page,
an image, a CGI script, etc. URLs provide a standard way to locate
these resources on the Web.</p>



<p>Note that URLs are not actually specific to HTTP; they can refer to
resources in many protocols. Our discussion here will focus strictly
on HTTP URLs.</p>



<div class="sidebar">
<h4 class="objtitle">What About URIs?</h4>


<p>You may have also encountered the term URI and wondered about
the difference between a URI and a URL. Actually, the terms are often
interchangeable because all URLs are URIs. <a name="INDEX-178" />Uniform Resource
Identifiers (URIs) are a more generalized class which includes URLs
as well as <a name="INDEX-179" />Uniform Resource Names (URNs). A URN
provides a name that sticks to an object even though the location of
the object may move around. You can think of it this way: your name
is similar to a URN, while your address is similar to a URL. Both
serve to identify you in some way, and in this manner both are URIs.</p>


<p>Because URNs are just a concept and are not used on the
Web today, you can safely think of URIs and URLs as interchangeable
terms and not let the terminology throw you. Since we are not
interested in other forms of URIs, we will try to avoid confusion
altogether by just using the term URL in the text.</p>


</div>

<a name="ch02-1-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.1. Elements of a URL</h3>



<p>
<a name="INDEX-180" />HTTP URLs consist of a scheme, a host name,
a port number, a path, a query string, and a fragment identifier, any
of which may be omitted under certain circumstances (see <a href="ch02_01.htm">Figure 2-1</a>).</p>



<a name="ch02-40406" /><div class="figure"><img width="446" src="figs/cgi2.0201.gif" height="42" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. Components of a URL</h4>

<p>HTTP URLs contain the following elements:</p>



<dl>
<dt><b>Scheme</b></dt>
<dd><p>The <a name="INDEX-181" />
<a name="INDEX-182" />scheme represents the protocol, and
for our purposes will either be <tt class="literal">http</tt> or
<tt class="literal">https</tt>.
<tt class="literal">https</tt>
<a name="INDEX-183" />
represents a connection to a secure web server. Refer to <a href="ch02_02.htm">the sidebar "The Secure Sockets Layer"</a> later in this chapter.</p></dd>




<dt><b>Host</b></dt>
<dd><p>The <a name="INDEX-184" />
<a name="INDEX-185" />
<a name="INDEX-186" />host
identifies the machine running a web server. It can be a
<a name="INDEX-187" />domain name or an <a name="INDEX-188" /> <a name="INDEX-189" />IP address, although it is a bad idea
to use IP addresses in URLs and is strongly discouraged. The problem
is that IP addresses often change for any number of reasons: a web
site may move from one machine to another, or it may relocate to
another network. Domain names can remain constant in these cases,
allowing these changes to remain hidden from the user.</p></dd>



<dt><b>Port number</b></dt>
<dd><p>The <a name="INDEX-190" />
<a name="INDEX-191" />port number is optional and may appear
in URLs only if the host is also included. The host and port are
separated by a colon. If the port is not specified, port 80 is used
for <tt class="literal">http</tt> URLs and port 443 is used for
<tt class="literal">https</tt> URLs.</p>



<p>It is possible to configure a web server to answer other ports. This
is often done if two different web servers need to operate on the
same machine, or if a web server is operated by someone who does not
have sufficient rights on the machine to start a server on these
ports (e.g., only <em class="emphasis">root</em> may bind to ports below
1024 on Unix machines). However, servers using ports other than the
standard 80 and 443 may be inaccessible to users behind firewalls.
Some firewalls are configured to restrict access to all but a narrow
set of ports representing the defaults for certain allowed protocols.</p></dd>



<dt><b>Path information</b></dt>
<dd><p>
<a name="INDEX-192" />
<a name="INDEX-193" /> <a name="INDEX-194" />Path
information represents the location of the resource being requested,
such as an HTML file or a CGI script. Depending on how your web
server is configured, it may or may not map to some actual file path
on your system. As we mentioned last chapter, the
<a name="INDEX-195" />
<a name="INDEX-196" />
<a name="INDEX-197" />URL path for CGI scripts generally
begin with <em class="filename">/cgi/</em> or
<em class="filename">/cgi-bin/</em> and these paths are mapped to a
similarly-named directory in the web server, such as
<em class="filename">/usr/local/apache/cgi-bin</em>.</p>



<p>Note that the URL for a script may include path information beyond
the location of the script itself. For example, say you have a CGI
at:</p>



<p><em class="emphasis">http://localhost/cgi/browse_docs.cgi</em></p>



<p>You can pass extra path information to the script by appending it to
the end, for example:</p>



<p><em class="emphasis">http://localhost/cgi/browse_docs.cgi/docs/product/description.text</em></p>



<p>Here the path <em class="filename">/docs/product/description.text</em> is
passed to the script. We explain how to access and use this
additional path information in more detail in the next chapter.</p></dd>



<dt><b>Query string</b></dt>
<dd><p>A <a name="INDEX-198" />
<a name="INDEX-199" />query string passes additional parameters
to scripts. It is sometimes referred to as a
<a name="INDEX-200" />
<a name="INDEX-201" />
<a name="INDEX-202" />
<a name="INDEX-203" />search string or an index.
It may contain <a name="INDEX-204" />name
and value pairs, in which each pair is separated from the next pair
by an <a name="INDEX-205" />ampersand
(<tt class="literal">&amp;</tt>), and the name and value are separated from
each other by an <a name="INDEX-206" />equals sign (<tt class="literal">=</tt>).
We discuss how to parse and use this information in your scripts in
the next chapter.</p>



<p>Query strings can also include data that is not formatted as
name-value pairs. If a query string does not contain an equals sign,
it is often referred to as an index. Each argument should be
separated from the next by an
<a name="INDEX-207" />encoded space (encoded
either as <a name="INDEX-208" /> <a name="INDEX-209" /><tt class="literal">+</tt> or
<tt class="literal">%20</tt>; see <a href="ch02_01.htm">Section 2.1.3, "URL Encoding"</a>
below). CGI scripts handle indexes a little differently, as we will
see in the next chapter.</p></dd>



<dt><b>Fragment identifier</b></dt>
<dd><p>
<a name="INDEX-210" />
<a name="INDEX-211" />Fragment identifiers refer to a
specific section in a resource. Fragment identifiers are not sent to
web servers, so you cannot access this component of the URLs in your
CGI scripts. Instead, the browser fetches a resource and then applies
the fragment identifier to locate the appropriate section in the
resource. For <a name="INDEX-212" /> <a name="INDEX-213" />HTML documents, fragment identifiers
refer to anchor tags within the document:</p>



<blockquote><pre class="code">&lt;a name="anchor" &gt;Here is the content you're after...&lt;/a&gt;</pre></blockquote>



<p>The following URL would request the full document and then scroll to
the section marked by the anchor tag:</p>



<p><em class="emphasis">http://localhost/document.html#anchor</em></p>



<p>Web browsers generally jump to the bottom of the document if no
anchor for the fragment identifier is found.</p></dd>

</dl>
</div>








<a name="ch02-2-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.2. Absolute and Relative URLs</h3>



<p>Many of the elements within a <a name="INDEX-214" /> <a name="INDEX-215" /> <a name="INDEX-216" />URL are optional. You may omit the
<a name="INDEX-217" /> <a name="INDEX-218" />scheme, host, and port number in a URL if
the URL is used in a context where these elements can be assumed. For
example, if you include a URL in a link on an HTML page and leave out
these elements, the browser will assume the link applies to a
resource on the same machine as the link. There are two classes of
URLs:</p>



<dl>
<dt><b>Absolute URL</b></dt>
<dd><p>URLs that include the hostname are called
<a name="INDEX-219" />
<a name="INDEX-220" />absolute URLs. An example of an
absolute URL is <em class="emphasis">http://localhost/cgi/script.cgi.</em></p></dd>



<dt><b>Relative URL</b></dt>
<dd><p>URLs without a scheme, host, or port are called
<a name="INDEX-221" /> <a name="INDEX-222" />
<a name="INDEX-223" />relative URLs. These can be further
broken down into full and relative paths:</p>


<dl>
<dt><b>Full paths</b></dt>
<dd><p>Relative URLs with an absolute
<a name="INDEX-224" />path are sometimes referred to
as <em class="firstterm">full paths</em> (even though they can also
include a query string and fragment identifier). Full paths can be
distinguished from URLs with relative paths because they always start
with a forward slash. Note that in all these cases, the paths are
virtual paths, and do not necessarily correspond to a path on the web
server's filesystem. An example of an absolute path is
<em class="emphasis">/index.html</em>.</p></dd>



<dt><b>Relative paths</b></dt>
<dd><p>Relative URLs that begin with a character other than a forward slash
are <em class="firstterm">relative paths</em>. Examples of relative paths
include <em class="emphasis">script.cgi</em> and
<em class="emphasis">../images/photo.jpg.</em></p></dd>

</dl></dd>

</dl>
</div>








<a name="ch02-80730" /><div class="sect2">
<h3 class="sect2">2.1.3. URL Encoding</h3>



<p>Many characters must be <a name="INDEX-225" /> <a name="INDEX-226" />
<a name="INDEX-227" />encoded within a URL for a
variety of reasons. For example, certain characters such as
<tt class="literal">?</tt>, <tt class="literal">#</tt>, and <tt class="literal">/</tt>
have special meaning within URLs and will be misinterpreted unless
encoded. It is possible to name a file
<em class="filename">doc#2.html</em> on some systems, but the URL
<em class="filename">http://localhost/doc#2.html</em> would not point to
this document. It points to the fragment <em class="filename">2.html</em>
in a (possibly nonexistent) file named <em class="filename">doc</em>. We
must encode the <tt class="literal">#</tt> character so the web browser and
server recognize that it is part of the resource name instead.</p>



<p>Characters are encoded by representing them with a
<a name="INDEX-228" />
<a name="INDEX-229" /> <a name="INDEX-230" />
<a name="INDEX-231" />percent sign (<tt class="literal">%</tt>)
followed by the two-digit hexadecimal value for that character based
upon the ISO Latin 1 character set or ASCII character set (these
character sets are the same for the first eight bits). For example,
the <tt class="literal">#</tt> symbol has a hexadecimal value of
<tt class="literal">0x23</tt>, so it is encoded as <tt class="literal">%23</tt>.</p>



<p>The following characters must be encoded:</p>



<ul><li><p>Control characters: ASCII <tt class="literal">0x00</tt> through
<tt class="literal">0x1F</tt> plus <tt class="literal">0x7F</tt></p></li><li><p>Eight-bit characters: ASCII <tt class="literal">0x80</tt> through
<tt class="literal">0xFF</tt></p></li><li><p>Characters given special importance within URLs: <tt class="literal">; / ? : @
&amp; = + $ ,</tt></p></li><li><p>Characters often used to delimit (quote) URLs: <tt class="literal">&lt; &gt; # %
"</tt></p></li><li><p>Characters considered unsafe because they may have special meaning
for other protocols used to transmit URLs (e.g., SMTP): <tt class="literal">{ }
| \ ^ [ ] `</tt></p></li></ul>
<p>Additionally,
<a name="INDEX-232" /> <a name="INDEX-233" /> <a name="INDEX-234" />spaces should be encoded as
<tt class="literal">+</tt> although <tt class="literal">%20</tt> is also allowed.
As you can see, most characters must be encoded; the list of
<a name="INDEX-235" />allowed characters is actually much
shorter:</p>



<ul><li><p>Letters: <tt class="literal">a-z</tt> and <tt class="literal">A-Z</tt></p></li><li><p>Digits: <tt class="literal">0-9</tt></p></li><li><p>The following characters: <tt class="literal">- _ . ! ~ * ' ( )</tt></p></li></ul>
<p>It is actually permissible and not uncommon for any of the allowed
characters to also be encoded by some software. Thus, any application
that decodes a URL must decode every occurrence of a percentage sign
followed by any two hexadecimal digits.</p>



<p>The following <a name="INDEX-236" />
<a name="INDEX-237" />code encodes text for URLs:</p>



<blockquote><pre class="code">sub url_encode {
    my $text = shift;
    $text =~ s/([^a-z0-9_.!~*'(  ) -])/sprintf "%%%02X", ord($1)/ei;
    $text =~ tr/ /+/;
    return $text;
}</pre></blockquote>



<p>Any character not in the allowed set is replaced by a percentage sign
and its two-digit hexadecimal equivalent. The three percentage signs
are necessary because percentage signs indicate format codes for
<tt class="function">sprintf</tt>, and literal percentage signs must be
indicated by two percentage signs. Our format code thus includes a
percentage sign, <tt class="literal">%%</tt>, plus the format code for two
hexadecimal digits, <tt class="literal">%02X</tt>.</p>



<p>Code to decode URL encoded text looks like this:</p>



<blockquote><pre class="code">sub url_decode {
    my $text = shift;
    $text =~ tr/\+/ /;
    $text =~ s/%([a-f0-9][a-f0-9])/chr( hex( $1 ) )/ei;
    return $text;
}</pre></blockquote>



<p>Here we first translate any plus signs to spaces. Then we scan for a
percentage sign followed by two hexadecimal digits and use
<a name="INDEX-238" />
<a name="INDEX-239" />Perl's <tt class="function">chr
</tt>function to convert the hexadecimal value into a
character.</p>



<p>Neither the <a name="INDEX-240" />encoding nor the decoding operations
can be safely repeated on the same text. Text encoded twice differs
from text encoded once because the percentage signs introduced in the
first step would themselves be encoded in the second. Likewise, you
cannot encode or decode entire URLs. If you were to decode a URL, you
could no longer reliably parse it, for you may have introduced
characters that would be misinterpreted such as <tt class="literal">/</tt>
or <tt class="literal">?</tt>. You should always parse a URL to get the
components you want before decoding them; likewise, encode components
before building them into a full URL.</p>



<p>Note that it's good to understand how a wheel works but
reinventing it would be pointless. Even though you have just seen how
to encode and decode text for URLs, you shouldn't do so
yourself. The <a name="INDEX-241" />
<a name="INDEX-242" />
<a name="INDEX-243" />
<a name="INDEX-244" />URI::URL module (actually it is a
collection of modules), available on CPAN (see <a href="appb_01.htm">Appendix B, "Perl Modules"</a>), provides many URL-related modules and
functions. One of the included modules, URI::Escape, provides the
<tt class="function">url_escape</tt>
<a name="INDEX-245" />
<a name="INDEX-246" />
<a name="INDEX-247" /> and
<tt class="function">url_unescape</tt> functions. Use them. The
subroutines in these modules have been vigorously tested, and future
versions will reflect any changes to HTTP as it evolves.<a href="#FOOTNOTE-2">[2]</a>
Using standard subroutines will also make your code much clearer to
those who may have to maintain your code later (this includes you).</p><blockquote>


<a name="FOOTNOTE-2" /><p>[2]Don't think this could happen? What if we told you the
tilde character (<tt class="literal">~</tt>) was not always allowed in
URLs? This restriction was removed after it became common practice
for some web servers to accept a tilde plus username in the path to
indicate a user's personal web directory.</p>


</blockquote>



<p>If, despite these warnings, you still insist on writing your own
decoding code yourself, at least place it in appropriately named
subroutines. Granted, some of these actions take only a line or two
of code, but the code is quite cryptic, and these operations
<a name="INDEX-248" />
<a name="INDEX-249" />
<a name="INDEX-250" />should be

<a name="INDEX-251" /> <a name="INDEX-252" />clearly labeled.</p>
</div>
</div>














































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">1.4. Web Server Configuration</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">2.2. HTTP</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
