<?label 4.2. Form Tags?><html><head><title>Form Tags (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">4.2. Form Tags</h2>


<p>A <a name="INDEX-769" />
<a name="INDEX-770" /> <a name="INDEX-771" />
<a name="INDEX-772" />full discussion
of HTML and user interface design is clearly beyond the scope of this
book. Many other books are available which discuss these topics at
length, such as <em class="citetitle">HTML: The Definitive Guide</em>, by Chuck
Musciano and Bill Kennedy (O'Reilly &amp; Associates,
Inc.). However, many of these other resources do not
discuss the relationship between HTML form elements and the
corresponding data sent to the web server when a form is submitted.
So let's run through a quick review of HTML form elements
before we see how CGI scripts process them.</p>


<a name="ch04-1-fm2xml" /><div class="sect2">
<h3 class="sect2">4.2.1. Quick Reference to Form Tags</h3>


<p>Before
<a name="INDEX-773" />
<a name="INDEX-774" />we
get going, <a href="ch04_02.htm">Table 4-1</a> shows a short list of all the
available form tags.</p>



<a name="ch04-10942" /><h4 class="objtitle">Table 4-1. HTML Form Tags </h4><table border="1">



<tr>
<th>
<p>Form Tag</p></th>
<th>
<p>Description</p></th>
</tr>




<tr>
<td>
<p>&lt;FORM ACTION="/cgi/register.cgi" METHOD="POST"&gt;</p></td>
<td>
<p>Start the form</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="text" NAME="name"</p>


<p> VALUE="value" SIZE="size"&gt;</p></td>
<td>
<p>Text field</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="password" NAME="name"</p>


<p> VALUE="value" SIZE="size"&gt;</p></td>
<td>
<p>Password field</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="hidden" NAME="name"</p>


<p> VALUE="value" &gt;</p></td>
<td>
<p>Hidden field</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="checkbox" NAME="name"</p>


<p> VALUE="value" &gt;</p></td>
<td>
<p>Checkbox</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="radio" NAME="name"</p>


<p> VALUE="value" &gt;</p></td>
<td>
<p>Radio button</p></td>
</tr>

<tr>
<td>
<p> &lt;SELECT NAME="name" SIZE=1&gt;</p>


<p> &lt;OPTION SELECTED&gt;One&lt;/OPTION&gt;</p>


<p> &lt;OPTION&gt;Two&lt;/OPTION&gt;</p>


<p>     :</p>


<p> &lt;/SELECT&gt;</p></td>
<td>
<p>Menu (drop-down)</p></td>
</tr>

<tr>
<td>
<p> &lt;SELECT NAME="name" SIZE=n MULTIPLE&gt;</p>


<p> &lt;OPTION SELECTED&gt;One&lt;/OPTION&gt;</p>


<p> &lt;OPTION&gt;Two&lt;/OPTION&gt;</p>


<p>     :</p>


<p> &lt;/SELECT&gt;</p></td>
<td>
<p>Select box</p></td>
</tr>

<tr>
<td>
<p> &lt;TEXTAREA ROWS=yy COLS=xx NAME="name"&gt;</p>


<p>     :</p>


<p> &lt;/TEXTAREA&gt;</p></td>
<td>
<p>Multiline text field</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="submit" NAME="name"</p>


<p> VALUE="value" &gt;</p></td>
<td>
<p>Submit button</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="image" SRC="/image.gif"</p>


<p> NAME="name" VALUE="value"&gt;</p></td>
<td>
<p>Image button</p></td>
</tr>

<tr>
<td>
<p> &lt;INPUT TYPE="reset" VALUE="Message!"&gt;</p></td>
<td>
<p>Reset button</p></td>
</tr>

<tr>
<td>
<p>&lt;/FORM&gt;</p></td>
<td>
<p>End the form</p></td>
</tr>


</table>
</div>




<a name="ch04-2-fm2xml" /><div class="sect2">
<h3 class="sect2">4.2.2. The &lt;FORM&gt; Tag</h3>


<p>All forms begin with <a name="INDEX-775" />
<a name="INDEX-776" />a &lt;FORM&gt; tag and
end with a &lt;/FORM&gt; tag:</p>


<blockquote><pre class="code">&lt;FORM ACTION="/cgi/register.cgi" METHOD="POST"&gt;
  .
  .
  .
&lt;/FORM&gt;</pre></blockquote>


<p>Submitting a form generates an <a name="INDEX-777" />
<a name="INDEX-778" />HTTP request just like
clicking on a hyperlink, but a request generated by a form is almost
always directed at a CGI script (or a similar dynamic resource). You
specify the format of the HTTP request via attributes of the
&lt;FORM&gt; tag:</p>


<dl>
<dt><b>METHOD</b></dt>
<dd><p>
<a name="INDEX-779" /> <a name="INDEX-780" />
<a name="INDEX-781" />METHOD
specifies the HTTP request method used when calling the CGI script.
The options are GET and POST, and they correspond to the request
methods we've already seen as part of the HTTP request line,
although they are not case-sensitive here. If the method is not
specified, it defaults to GET.</p></dd>


<dt><b>ACTION</b></dt>
<dd><p>
<a name="INDEX-782" /> <a name="INDEX-783" /> <a name="INDEX-784" />ACTION specifies the URL of the CGI
script that should receive the HTTP request made by the CGI script.
By default, it is the same URL from which the browser retrieved the
form. You are not limited to using a CGI program on your server to
decode form information; you can specify a URL of a remote host if a
program that does what you want is available elsewhere.</p></dd>


<dt><b>ENCTYPE</b></dt>
<dd><p>
<a name="INDEX-785" />
<a name="INDEX-786" />
<a name="INDEX-787" />
<a name="INDEX-788" />ENCTYPE specifies the media type
used to encode the content of the HTTP request. Because GET requests
do not have a body, this attribute is only meaningful if the form has
POST as its method. This attribute is rarely included since the
default -- <em class="emphasis">application/x-www-form-urlencoded</em> -- is
appropriate in almost all cases. The only real reason to specify
another media type is when creating a form that accepts file uploads.
File uploads must use <em class="emphasis">multipart/form-data</em>
instead. We will discuss this second option later.</p></dd>


<dt><b>onSubmit</b></dt>
<dd><p>
<a name="INDEX-789" /> <a name="INDEX-790" />onSubmit is a JavaScript handler,
and it specifies the JavaScript code that should be executed when the
form is submitted. If the code returns a false value, it will cancel
the submission of the form. Throughout this chapter we will review
which JavaScript handler is associated with each HTML form element,
but we won't cover JavaScript in detail until <a href="ch07_01.htm">Chapter 7, "JavaScript"</a>.</p></dd>

</dl>


<p>A document can consist of multiple forms, but one form cannot be
nested inside another form.</p>
</div>




<a name="ch04-3-fm2xml" /><div class="sect2">
<h3 class="sect2">4.2.3. The &lt;INPUT&gt; Tag</h3>


<p>The <a name="INDEX-791" /> <a name="INDEX-792" />
<a name="INDEX-793" />&lt;INPUT&gt;
tag generates a wide array of form widgets. They are differentiated
by the <a name="INDEX-794" />
<a name="INDEX-795" />TYPE
attribute. Each &lt;INPUT&gt; tag has the same general format:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="text" NAME="element_name" VALUE="Default value"&gt;</pre></blockquote>


<p>Like &lt;BR&gt;, this tag has no closing tag. The basic attributes
that all input types share are as follows:</p>


<dl>
<dt><b>TYPE</b></dt>
<dd><p>TYPE determines the type of the input widget to display. A
presentation of each type follows this section.</p></dd>


<dt><b>NAME</b></dt>
<dd><p>The <a name="INDEX-796" />NAME
attribute is important because the CGI script uses this name to
access the value of those elements that are submitted.</p></dd>


<dt><b>VALUE</b></dt>
<dd><p>The meaning of <a name="INDEX-797" />VALUE varies depending on the type of
the input element. We will discuss this property in our discussion of
each type.</p></dd>

</dl>


<p>Let's look at each of the input types.</p>


<a name="ch04-4-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.1. Text fields</h3>


<p>One of the most basic uses of the &lt;INPUT&gt; tag is to generate a
<a name="INDEX-798" />text fields where users may
enter a line of data (see <a href="ch04_02.htm">Figure 4-2</a>). Text fields
are the default input type; if you omit the TYPE attribute, you will
get a text field. The HTML for a text field looks like this:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="text" NAME="quantity" VALUE="1" SIZE="3" MAXLENGTH="3"&gt;</pre></blockquote>


<a name="ch04-59247" /><div class="figure"><img width="443" src="figs/cgi2.0402.gif" height="205" alt="Figure 4-2" /></div><h4 class="objtitle">Figure 4-2. Text and password fields</h4>

<p>Here are the <a name="INDEX-799" /> <a name="INDEX-800" />attributes that apply to text fields:</p>


<dl>
<dt><b>VALUE</b></dt>
<dd><p>The <a name="INDEX-801" />VALUE of text fields is the default
text displayed in the text field when the form is initially presented
to the user. It defaults to an empty string. The user can edit the
value of text fields; updates change what is displayed as well as the
value passed when the form is submitted.</p></dd>


<dt><b>SIZE</b></dt>
<dd><p>The <a name="INDEX-802" />SIZE attribute specifies the width of
the text field displayed. It roughly corresponds to the number of
characters the field can hold, but this is generally only accurate if
the element is surrounded by &lt;TT&gt; or &lt;PRE&gt; tags, which
indicate that a monospace font should be used. Unfortunately,
Netscape and Internet Explorer render the width of fields very
differently when monospaced fonts are not used, so certainly test
your form with both browsers. The default SIZE for text fields is 20.</p></dd>


<dt><b>MAXLENGTH</b></dt>
<dd><p>The <a name="INDEX-803" />MAXLENGTH attribute specifies the
maximum number of characters that a text field can hold. Browsers
generally do not allow users to enter more characters than this.
Because the size of text fields can vary with variable-width fonts,
it is possible to set MAXLENGTH and SIZE to the same value and yet
have a field that appears too large or too small for that number of
characters. A text field can have a MAXLENGTH set to more characters
than its SIZE can display. By default, there is no specified limit on
the size of text fields.</p></dd>


<dt><b>onFocus, onBlur, onChange</b></dt>
<dd><p>The <a name="INDEX-804" />
<a name="INDEX-805" />
<a name="INDEX-806" />JavaScript handlers are onFocus,
onBlur, and onChange, which are called when the text field has focus
(the input cursor is in the field), loses focus (the cursor moves out
of the field), and when the value of the field changes, respectively.</p></dd>

</dl>
</div>



<a name="ch04-5-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.2. Password fields</h3>


<p>A <a name="INDEX-807" />
<a name="INDEX-808" />password field is similar to a text
field, except that instead of displaying the true value of the field,
the browser represents each character with an asterisk or bullet
(refer back to <a href="ch04_02.htm">Figure 4-2</a>):</p>


<blockquote><pre class="code">&lt;INPUT TYPE="password" NAME="set_password" VALUE="old_password"
  SIZE="8" MAXLENGTH="8"&gt;</pre></blockquote>


<p>This field does not provide any true security; it simply provides
basic protection against someone looking over the shoulder of the
user. The value is <em class="emphasis">not</em> encrypted when it is
transferred to the web server, which means that passwords are
displayed as part of the <a name="INDEX-809" />
<a name="INDEX-810" />query string for GET requests.</p>


<p>All the <a name="INDEX-811" />
<a name="INDEX-812" />attributes that apply to text
fields also apply to password fields.</p>
</div>



<a name="ch04-6-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.3. Hidden fields</h3>


<p>
<a name="INDEX-813" />Hidden fields
are not visible to the user. They are generally used only with forms
which are themselves generated by a CGI script and are useful for
passing information between a series of forms:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="hidden" NAME="username" VALUE="msmith"&gt;</pre></blockquote>


<p>Like password fields, hidden fields provide no security. Users can
view the name and value of hidden fields by viewing the HTML source
in their browsers.</p>


<p>We'll discuss hidden fields in much more detail in our
discussion of maintaining state in <a href="ch11_01.htm">Chapter 11, "Maintaining State"</a>.</p>


<p>Hidden fields only use <a name="INDEX-814" />
<a name="INDEX-815" />
<a name="INDEX-816" /> <a name="INDEX-817" />NAME and VALUE attributes.</p>
</div>



<a name="ch04-7-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.4. Checkboxes</h3>


<p>
<a name="INDEX-818" />Checkboxes are
useful when users simply need to indicate whether they desire an
option. See <a href="ch04_02.htm">Figure 4-3</a>.</p>


<a name="ch04-88757" /><div class="figure"><img width="452" src="figs/cgi2.0403.gif" height="325" alt="Figure 4-3" /></div><h4 class="objtitle">Figure 4-3. Checkboxes</h4>

<p>The user can <a name="INDEX-819" />toggle between two states on a
checkbox: checked or unchecked. The tag looks like this:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="checkbox" NAME="toppings" VALUE="lettuce" CHECKED&gt;</pre></blockquote>


<p>In this example, if the user selects the checkbox, then
"toppings" returns a value of "lettuce". If
the checkbox is not selected, neither the <a name="INDEX-820" />
<a name="INDEX-821" />
<a name="INDEX-822" />name
nor the value is returned for the checkbox.</p>


<p>It is possible to have multiple checkboxes use the same name. In
fact, this is not uncommon. The most typical situation in which you
might do this is if you have a dynamic list of related options and
the user could choose a similar action for all of them. For example,
you may wish to list multiple options this way:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="checkbox" NAME="lettuce"&gt; Lettuce&lt;BR&gt;
&lt;INPUT TYPE="checkbox" NAME="tomato"&gt; Tomato&lt;BR&gt;
&lt;INPUT TYPE="checkbox" NAME="onion"&gt; Onion&lt;BR&gt;</pre></blockquote>


<p>If, however, the CGI script does not need to know the name of each of
the options in order to perform its task, you may wish to do this
instead:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="checkbox" NAME="toppings" VALUE="lettuce"&gt; Lettuce&lt;BR&gt;
&lt;INPUT TYPE="checkbox" NAME="toppings" VALUE="tomato"&gt; Tomato&lt;BR&gt;
&lt;INPUT TYPE="checkbox" NAME="toppings" VALUE="onion"&gt; Onion&lt;BR&gt;</pre></blockquote>


<p>If someone selects "lettuce" and "tomato" but
not "onion", then the browser will encode this as
<tt class="literal">toppings=lettuce&amp;toppings=tomato</tt>. The CGI
script can process these multiple toppings, and you may not need to
update the CGI script if you later add items to the list. Attributes
for checkboxes include:</p>


<dl>
<dt><b>VALUE</b></dt>
<dd><p>The VALUE attribute is the value included in the request if the
checkbox is checked. If a VALUE attribute is not specified, the
checkbox will return "ON" as its value. If the checkbox
is not checked, then neither its name nor value will be sent.</p></dd>


<dt><b>CHECKED</b></dt>
<dd><p>The <a name="INDEX-823" />CHECKED attribute indicates that the
checkbox should be selected by default. Omitting this attribute
causes the checkbox to be unselected by default.</p></dd>


<dt><b>onCheck</b></dt>
<dd><p>Checkboxes also take the <a name="INDEX-824" /> <a name="INDEX-825" />onCheck attribute, which
indicates the JavaScript code that should be executed when the
checkbox is selected.</p></dd>

</dl>
</div>



<a name="ch04-8-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.5. Radio buttons</h3>


<p>
<a name="INDEX-826" />
<a name="INDEX-827" />Radio buttons are very similar to
checkboxes except that any group of radio buttons that share the same
name are exclusive: only one of them may be selected. See <a href="ch04_02.htm">Figure 4-4</a>.</p>


<a name="ch04-92305" /><div class="figure"><img width="449" src="figs/cgi2.0404.gif" height="342" alt="Figure 4-4" /></div><h4 class="objtitle">Figure 4-4. Radio buttons</h4>

<p>The tag is used just like a checkbox:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="radio" NAME="bread" VALUE="wheat" CHECKED&gt; Wheat&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="bread" VALUE="white"&gt; White&lt;BR&gt;
&lt;INPUT TYPE="radio" NAME="bread" VALUE="rye"&gt; Rye&lt;BR&gt;</pre></blockquote>


<p>In this example, "wheat" is selected by default.
Selecting "white" or "rye" will cause
"wheat" to be unselected.</p>


<p>Although you may omit the <a name="INDEX-828" />VALUE attribute with checkboxes, doing
so with radio buttons is meaningless since the CGI script will not be
able to differentiate between different radio buttons if they all
return "ON".</p>


<p>Using the <a name="INDEX-829" />
<a name="INDEX-830" />CHECKED attribute with multiple radio
buttons with the same name is not valid. Browsers will generally
render both as selected, but they will be unselected as soon as the
user selects a different option and the user will be unable to return
the form to this initial state (unless it has a reset button of
course).</p>


<p>Radio buttons use the same attributes as checkboxes.</p>
</div>



<a name="ch04-9-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.6. Submit buttons</h3>


<p>A <a name="INDEX-831" />
<a name="INDEX-832" /> <a name="INDEX-833" />
<a name="INDEX-834" />submit button does just what the name
implies. It submits the contents of the form (see <a href="ch04_02.htm">Figure 4-5</a>). When the user clicks on a submit button, the
browser runs any associated JavaScript <em class="emphasis">onSubmit</em>
handler, formats an HTTP request according to the form method and
form encoding type, then sends this request to the URL specified by
the form action. The result is then displayed as a new web page.</p>


<a name="ch04-39427" /><div class="figure"><img width="448" src="figs/cgi2.0405.gif" height="196" alt="Figure 4-5" /></div><h4 class="objtitle">Figure 4-5. Submit buttons</h4>

<p>The HTML for a submit button looks like this:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="submit" NAME="submit_button" VALUE="Submit the Form"&gt;</pre></blockquote>


<p>Virtually all forms have a submit button, and you can have multiple
submit buttons on one form:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="submit" NAME="option" VALUE="Option 1"&gt;
&lt;INPUT TYPE="submit" NAME="option" VALUE="Option 2"&gt;</pre></blockquote>


<p>Only the name and value of the submit button clicked is included in
the form submission. Here are the attributes it supports:</p>


<dl>
<dt><b>VALUE</b></dt>
<dd><p>The <a name="INDEX-835" />VALUE attribute for submit buttons
specifies the text that should be displayed on the button as well as
the value supplied for this element when the form is submitted. If
the value is omitted, browsers supply a default label -- generally
"Submit" -- and refrain from submitting a name and
value for this element.</p></dd>


<dt><b>onClick</b></dt>
<dd><p>Submit buttons may have an <a name="INDEX-836" />
<a name="INDEX-837" />onClick JavaScript handler, which
specifies the code to execute if the user clicks the button.
Returning a false value from this code cancels the submit operation.</p></dd>

</dl>
</div>



<a name="ch04-10-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.7. Reset buttons</h3>


<p>A <a name="INDEX-838" />
<a name="INDEX-839" />
<a name="INDEX-840" />reset button allows users to reset the
value of all the fields in a form to their default values. From the
user's perspective, it generally accomplishes the same thing as
reloading the form but is much faster and more convenient. Because
the browser accomplishes this event without consulting the web
server, CGI scripts never respond to it. The HTML tag looks like
this:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="reset" VALUE="Reset the form fields"&gt;</pre></blockquote>


<p>You may have multiple
<a name="INDEX-841" /> <a name="INDEX-842" />
<a name="INDEX-843" /> <a name="INDEX-844" />
<a name="INDEX-845" />reset buttons on the same form,
although this would almost certainly be redundant.</p>


<dl>
<dt><b>NAME</b></dt>
<dd><p>You may specify a NAME for reset buttons, but neither the name nor
the value is ever passed to a CGI script. Thus, the name is only
useful to JavaScript code.</p></dd>


<dt><b>VALUE</b></dt>
<dd><p>The VALUE attribute specifies the text label that should appear on
the button.</p></dd>


<dt><b>onClick</b></dt>
<dd><p>Like submit buttons, reset buttons may have an onClick attribute that
specifies the JavaScript code to execute if a user clicks on the
button; returning false from this code will cancel the reset
operation.</p></dd>

</dl>
</div>



<a name="ch04-11-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.8. Image buttons</h3>


<p>You can also have <a name="INDEX-846" />
<a name="INDEX-847" />images as buttons. Image buttons
function as submit buttons but give you much more flexibility over
how the button looks. Keep in mind that users are generally used to
having buttons displayed a particular way by the browser and
operating system, and a button in a different format may be confusing
to a novice. The HTML for an image button tag looks like this:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="image" SRC="/icons/button.gif" NAME="result" VALUE="text only"&gt;</pre></blockquote>


<p>Graphical and text-only browsers treat this element very differently.
A text-only browser, such as Lynx, sends the name and value together
like most other form elements:</p>


<blockquote><pre class="code">result=text+only</pre></blockquote>


<p>However, a graphical browser, like Netscape and Internet Explorer,
send the coordinates where the user clicked on the image in addition
to the name of the button. The value is not sent. These coordinates
are measured in pixels from the upper-left corner of the image (see
<a href="ch04_02.htm">Figure 4-6</a>).</p>


<a name="ch04-92099" /><div class="figure"><img width="174" src="figs/cgi2.0406.gif" height="85" alt="Figure 4-6" /></div><h4 class="objtitle">Figure 4-6. Image button coordinates</h4>

<p>In this example, a graphical browser would submit:</p>


<blockquote><pre class="code">action.x=50&amp;action.y=20</pre></blockquote>


<p>Here are the <a name="INDEX-848" />attributes for image buttons:</p>


<dl>
<dt><b>VALUE</b></dt>
<dd><p>The <a name="INDEX-849" />VALUE attribute is sent as the value
for this element by text browsers.</p></dd>


<dt><b>SRC</b></dt>
<dd><p>The <a name="INDEX-850" />
<a name="INDEX-851" />SRC attribute specifies the URL to
the image displayed for the button, just as it does in the more
common &lt;IMG&gt; tag (if the &lt;IMG&gt; tag looks unfamiliar to
you, it's because you probably only recognize it when combined
with the SRC attribute: &lt;IMG SRC=...&gt;).</p></dd>


<dt><b>
<a name="INDEX-852" />
<a name="INDEX-853" />onClick</b></dt>
<dd><p>This attribute behaves just as it does with standard submit buttons.</p></dd>

</dl>
</div>



<a name="ch04-12-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.3.9. Plain buttons</h3>


<p>The last type of
<a name="INDEX-854" /> <a name="INDEX-855" />
<a name="INDEX-856" />
<a name="INDEX-857" />button is just
that -- a button; it has no special function. To avoid confusing
this button with the other button types, we will refer to it as a
plain button. A plain button tag looks like a submit or reset button:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="button" VALUE="Click for a greeting..." 
  onClick="alert( 'Hello!' );"&gt;</pre></blockquote>


<p>The name and value of a plain button is never passed to a CGI script.
Because a plain button has no special action, it is meaningless
without an <tt class="function">onClick</tt> attribute:</p>


<dl>
<dt><b>
<a name="INDEX-858" />
<a name="INDEX-859" />
<a name="INDEX-860" />
<a name="INDEX-861" />NAME</b></dt>
<dd><p>The NAME attribute is never sent as part of a request, so it is only
useful to JavaScript code.</p></dd>


<dt><b>VALUE</b></dt>
<dd><p>The VALUE attribute specifies the name of the button.</p></dd>


<dt><b>onClick</b></dt>
<dd><p>The onClick attribute specifies the code to run when the button is
clicked. The code's return value has no effect because plain
buttons do not cause <a name="INDEX-862" /> <a name="INDEX-863" /> <a name="INDEX-864" />other behavior.</p></dd>

</dl>
</div>
</div>




<a name="ch04-13-fm2xml" /><div class="sect2">
<h3 class="sect2">4.2.4. The &lt;SELECT&gt; Tag</h3>


<p>The <a name="INDEX-865" /> <a name="INDEX-866" />&lt;SELECT&gt;
tag is used to create a
<a name="INDEX-867" />list for users to choose from. It can
create two different elements that look quite different but have
similar function: a <a name="INDEX-868" />scrolling box or a menu (also commonly
referred to as a <a name="INDEX-869" />
<a name="INDEX-870" />drop-down).
Both elements are displayed in <a href="ch04_02.htm">Figure 4-7</a>. Unlike
the &lt;INPUT&gt; elements, &lt;SELECT&gt; tags have an opening as
well as a closing tag.</p>


<p>Here is an example of a menu:</p>


<blockquote><pre class="code">Choose a method of payment: 
&lt;SELECT NAME="card" SIZE=1&gt;
  &lt;OPTION SELECTED&gt;American Express&lt;/OPTION&gt;
  &lt;OPTION&gt;Discover&lt;/OPTION&gt;
  &lt;OPTION&gt;Master Card&lt;/OPTION&gt;
  &lt;OPTION&gt;Visa&lt;/OPTION&gt;
&lt;/SELECT&gt;</pre></blockquote>


<a name="ch04-52236" /><div class="figure"><img width="481" src="figs/cgi2.0407.gif" height="264" alt="Figure 4-7" /></div><h4 class="objtitle">Figure 4-7. Two forms of select lists: a menu and a scrolling box</h4>

<p>Here is an example of a <a name="INDEX-871" />scrolling
box:</p>


<blockquote><pre class="code">Choose the activities you enjoy: 
&lt;SELECT NAME="activity" SIZE=4 MULTIPLE&gt;
  &lt;OPTION&gt;Aerobics&lt;/OPTION&gt;
  &lt;OPTION&gt;Aikido&lt;/OPTION&gt;
  &lt;OPTION&gt;Basketball&lt;/OPTION&gt;
  &lt;OPTION&gt;Bicycling&lt;/OPTION&gt;
  &lt;OPTION&gt;Golfing&lt;/OPTION&gt;
  &lt;OPTION&gt;Hiking&lt;/OPTION&gt;
  ...
&lt;/SELECT&gt;</pre></blockquote>


<p>Scrolling boxes may optionally allow the user to select multiple
entries. Multiple options are encoded as separate name-value pairs,
as if they had been entered by multiple form elements. For example,
if someone selects Aikido, Bicycling, and Hiking, the browser will
encode it as <tt class="literal">activity=Aikido&amp;activity=Bicycling&amp;
activity=Hiking</tt>.</p>


<p>Attributes for the &lt;SELECT&gt; tag are:</p>


<dl>
<dt><b>SIZE</b></dt>
<dd><p>The <a name="INDEX-872" />SIZE
attribute determines the number of lines visible in the list.
Specifying 1 for the SIZE indicates that the list should be a menu
instead.</p></dd>


<dt><b>
<a name="INDEX-873" />MULTIPLE</b></dt>
<dd><p>The MULTIPLE attribute allows the user to select multiple values. It
is only possible if the SIZE attribute is assigned a value greater
than 1. On some operating systems, the user may need to hold down
certain modifier keys on their keyboard in order to select multiple
items.</p></dd>

</dl>


<a name="ch04-14-fm2xml" /><div class="sect3">
<h3 class="sect3">4.2.4.1. The &lt;OPTION&gt; tag</h3>


<p>The &lt;SELECT&gt; tag does not have a value attribute. Each of its
possible values must have an
<a name="INDEX-874" />
<a name="INDEX-875" />
<a name="INDEX-876" />
<a name="INDEX-877" />&lt;OPTION&gt;
tag around it.</p>


<p>You may override the value used by a particular option by specifying
a VALUE attribute like this:</p>


<blockquote><pre class="code">&lt;OPTION VALUE="AMEX" &gt;American Express&lt;/OPTION&gt;</pre></blockquote>


<p>Options have two optional
<a name="INDEX-878" />attributes:</p>


<dl>
<dt><b>SELECTED</b></dt>
<dd><p>The <a name="INDEX-879" />SELECTED attribute specifies that the option
should be selected by default. When a form is submitted, the name of
the &lt;SELECT&gt; tag is submitted along with the value of the
selected options.</p></dd>


<dt><b>
<a name="INDEX-880" />VALUE</b></dt>
<dd><p>The VALUE attribute is the value that is passed for the option if it
is selected. If this attribute is omitted, then it <a name="INDEX-881" /> <a name="INDEX-882" />defaults to the text
between the &lt;OPTION&gt; and &lt;/OPTION&gt; tags.</p></dd>

</dl>
</div>
</div>




<a name="ch04-15-fm2xml" /><div class="sect2">
<h3 class="sect2">4.2.5. The &lt;TEXTAREA&gt; Tag</h3>


<p>The final form element, the &lt;TEXTAREA&gt; tag, allows users to
enter multiple lines of text. See <a href="ch04_02.htm">Figure 4-8</a>.</p>


<a name="ch04-70831" /><div class="figure"><img width="481" src="figs/cgi2.0408.gif" height="228" alt="Figure 4-8" /></div><h4 class="objtitle">Figure 4-8. Text area</h4>

<p>Text areas have an opening and a closing tag:</p>


<blockquote><pre class="code">&lt;TEXTAREA ROWS=10 COLS=40 NAME="comments" WRAP="virtual"&gt;Default text&lt;/TEXTAREA&gt;</pre></blockquote>


<p>This creates a scrolled text field with a visible area of ten rows
and forty columns.</p>


<p>There is no VALUE property for the
<a name="INDEX-883" />
<a name="INDEX-884" />
<a name="INDEX-885" />&lt;TEXTAREA&gt;
tag. Default text should be placed between the opening and closing
tags. Unlike other HTML tags, white space -- including
newlines -- is <em class="emphasis">not</em> ignored between
&lt;TEXTAREA&gt; and &lt;/TEXTAREA&gt; tags. A browser will render
the example above with "Default" and "text"
on separate lines.</p>


<p>Attributes for the &lt;TEXTAREA&gt; tag are:</p>


<dl>
<dt><b>COLUMNS</b></dt>
<dd><p>The <a name="INDEX-886" />COLUMNS attribute specifies the width
of the text area, but like the size of text fields, browsers size
columns differently for variable-width fonts.</p></dd>


<dt><b>ROWS</b></dt>
<dd><p>The <a name="INDEX-887" />ROWS
attribute specifies the number of lines that the text area should
display. Text bars have scrollbars to access text that does not fit
within the display area.</p></dd>


<dt><b>WRAP</b></dt>
<dd><p>The <a name="INDEX-888" />WRAP
attribute specifies what the browser should do if the user types
beyond the right margin, but note that the WRAP attribute is not
implemented as uniformly as other tags and attributes. Although most
browsers support it, it is actually not included in the HTML 4.0
standard. In general, specifying "<a name="INDEX-889" />virtual" as the WRAP results
in the text wrapping within the text area, but it is submitted
without <a name="INDEX-890" />newlines. Specifying
"<a name="INDEX-891" />physical" as the WRAP also
results in the text wrapping for the user, but the line breaks are
submitted as part of the text. Users on different operating systems
will submit different characters for end-of-line characters. If you
specify to omit the WRAP attribute or specify "none" for
it, then text <a name="INDEX-892" /> <a name="INDEX-893" /> <a name="INDEX-894" /> <a name="INDEX-895" />will typically scroll beyond the right
side of the text area.</p></dd>

</dl>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch04_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">4. Forms and CGI</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">4.3. Decoding Form Input</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>