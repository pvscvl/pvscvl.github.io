<?label 7.3. Data Exchange?><html><head><title>Data Exchange (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch07_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">7.3. Data Exchange</h2>


<p>If you place enough functionality in <a name="INDEX-1586" /> <a name="INDEX-1,587" />JavaScript-enabled web pages, they
can become <a name="INDEX-1588" />
<a name="INDEX-1589" />semiautonomous
clients that the user can interact with independent of CGI scripts on
the server. The most recent versions of JavaScript provide the
ability to create queries to web servers, load the response in hidden
frames, and react to this data. In response to queries such as these,
CGI scripts are not outputting HTML; they're typically
outputting raw data that is being handled by another application.
We'll explore the concept of <a name="INDEX-1590" />
<a name="INDEX-1591" />information servers further when
we'll discuss XML in <a href="ch14_01.htm">Chapter 14, "Middleware and XML"</a>.</p>


<p>As JavaScript's abilities have expanded, one question that web
developers sometimes ask is how they can move their complex data
structures from their Perl CGI scripts into JavaScript. Perl and
JavaScript are different languages with different data structures, so
it can be challenging creating dynamic JavaScript.</p>


<a name="ch07-8-fm2xml" /><div class="sect2">
<h3 class="sect2">7.3.1. WDDX</h3>


<p>Exchanging <a name="INDEX-1592" />
<a name="INDEX-1593" />
<a name="INDEX-1594" /> <a name="INDEX-1,595" />data between
different languages isn't a new challenge of course, and
fortunately someone else has already addressed this same problem.
Allaire, the makes of Cold Fusion, wanted a way to exchange data
between different web servers on the Internet. Their solution, Web
Distributed Data Exchange, or <em class="firstterm">WDDX</em>, defines a
common data format that various languages can use to represent basic
data types. WDDX uses <a name="INDEX-1596" />XML, but you don't need to know
anything about XML to use WDDX because there are modules that provide
a simple interface for using it in many languages including Perl and
JavaScript. Thus, we can convert a Perl data structure into a WDDX
packet that can then be converted into a native data structure in
JavaScript, Java, COM (this includes Active Server Pages),
ColdFusion, or PHP.</p>


<p>However, with JavaScript, we can even skip the intermediate step.
Because converting data to JavaScript is such a common need on the
Web,
<a name="INDEX-1597" />
<a name="INDEX-1598" />WDDX.pm,
the Perl module for WDDX, will convert a Perl data structure into
JavaScript code that can create a corresponding JavaScript data
structure without creating a WDDX packet.</p>


<p>Let's look at an example to see how this works. Say that you
want to pass the current date on the web server from your
<a name="INDEX-1599" />CGI script to
JavaScript. In Perl, the date is measured by the number of seconds
past the epoch; it looks like this:</p>


<blockquote><pre class="code">my $now = time;</pre></blockquote>


<p>To create JavaScript from this, you would use the following code:</p>


<blockquote><pre class="code">use WDDX;

my $wddx      = new WDDX;
my $now       = time;
my $wddx_now  = $wddx-&gt;datetime( $now );

print $wddx_now-&gt;as_javascript( "serverTime" );</pre></blockquote>


<p>We create a WDDX.pm object and then pass the time to the
<tt class="function">datetime</tt> method, which returns a WDDX::Datetime
object. We can then use the <tt class="function">as_javascript</tt> method
to get JavaScript code for it. This outputs something like the
following (the date and time will of course be different when you run
it):</p>


<blockquote><pre class="code">serverTime=new Date(100,0,5,14,20,39);</pre></blockquote>


<p>You can include this within an HTML document as JavaScript code.
Dates are created very differently in JavaScript than in Perl but
WDDX will handle this translation for you. DateTime is just one data
type that WDDX supports. WDDX defines several basic data types that
are common to several programming languages. The WDDX
<a name="INDEX-1600" /> <a name="INDEX-1,601" />data types are <a name="INDEX-1,602" />
<a name="INDEX-1603" />summarized in <a href="ch07_03.htm">Table 7-1</a>.</p>



<a name="ch07-23265" /><h4 class="objtitle">Table 7-1. WDDX Data Types </h4><table border="1">




<tr>
<th>
<p>WDDX Type</p></th>
<th>
<p>WDDX.pm Data Object</p></th>
<th>
<p>Perl Type</p></th>
</tr>




<tr>
<td>
<p>String</p></td>
<td>
<p>WDDX::String</p></td>
<td>
<p>Scalar</p></td>
</tr>

<tr>
<td>
<p>Number</p></td>
<td>
<p>WDDX::Number</p></td>
<td>
<p>Scalar</p></td>
</tr>

<tr>
<td>
<p>Boolean</p></td>
<td>
<p>WDDX::Boolean</p></td>
<td>
<p>Scalar (1 or " ")</p></td>
</tr>

<tr>
<td>
<p>Datetime</p></td>
<td>
<p>WDDX::Datetime</p></td>
<td>
<p>Scalar (seconds since epoch)</p></td>
</tr>

<tr>
<td>
<p>Null</p></td>
<td>
<p>WDDX::Null</p></td>
<td>
<p>Scalar (undef)</p></td>
</tr>

<tr>
<td>
<p>Binary</p></td>
<td>
<p>WDDX::Binary</p></td>
<td>
<p>Scalar</p></td>
</tr>

<tr>
<td>
<p>Array</p></td>
<td>
<p>WDDX::Array</p></td>
<td>
<p>Array</p></td>
</tr>

<tr>
<td>
<p>Struct</p></td>
<td>
<p>WDDX::Struct</p></td>
<td>
<p>Hash</p></td>
</tr>

<tr>
<td>
<p>Recordset</p></td>
<td>
<p>WDDX::Recordset</p></td>
<td>
<p>None (WDDX::Recordset)</p></td>
</tr>


</table>


<p>As you can see, the WDDX data types are different from Perl's
data types. Perl represents many different data types as
<a name="INDEX-1604" />scalars. As a result, the WDDX.pm module
works differently than similar WDDX libraries for other languages,
which are more transparent. In these other languages, you can use one
method to go directly from the native data type to a WDDX packet (or
JavaScript code). Because of the differences with the data types in
Perl, WDDX.pm requires that you create an intermediate data object,
such as <tt class="literal">$wddx_now</tt>, the WDDX::Datetime object that
we saw above, which can then be converted to a WDDX packet or native
JavaScript code.</p>


<p>Although originally conceived by Allaire, <a name="INDEX-1605" />WDDX has been released as an open
source project. You can download the WDDX SDK from <a href="../../../../../../www.wddx.org/">http://www.wddx.org/</a>; the WDDX.pm module is
available on CPAN.</p>
</div>




<a name="ch07-9-fm2xml" /><div class="sect2">
<h3 class="sect2">7.3.2. Example</h3>


<p>
<a name="INDEX-1606" />
<a name="INDEX-1607" />WDDX.pm
is most useful for <a name="INDEX-1608" /> <a name="INDEX-1,609" />complex data structures, so
let's look at another example. We'll use JavaScript and
HTML to create an interactive <a name="INDEX-1610" /> <a name="INDEX-1,611" />form
that allows users to browse songs available for download (see <a href="ch07_03.htm">Figure 7-3</a>). Users can look through the song database
without making additional calls to the web server until they have
found a song they want to download.</p>


<p>We'll maintain the song information in a tab-delimited file on
the web server with the format shown in <a href="ch07_03.htm">Example 7-3</a>.</p>



<a name="ch07-61755" /><div class="example">
<h4 class="objtitle">Example 7-3. song_data.txt </h4>

<blockquote><pre class="code">Artist  Concert  Song  Venue  Date  Duration  Size  Filename
...</pre></blockquote>
</div>


<p>This record-based format is the same that is used by a spreadsheet or
a database, and it is represented in WDDX as a
<a name="INDEX-1612" />recordset. A
recordset is simply a series of records (or rows) that share a
certain number of named fields (or columns).</p>


<p>Let's look at the HTML and JavaScript for the file. Note that
this version requires that the user have JavaScript; this form will
not contain any information without it. In practice, you would
probably want to add a more basic interface within &lt;NOSCRIPT&gt;
tags to support non-JavaScript users.</p>


<a name="ch07-97838" /><div class="figure"><img width="481" src="figs/cgi2.0703.gif" height="436" alt="Figure 7-3" /></div><h4 class="objtitle">Figure 7-3. Online music browser</h4>

<p>A CGI script will output this file when it is requested, but the only
thing our CGI script must add is the data for the music. Thus, in
<a href="ch07_03.htm">Example 7-4</a>, we'll use HTML::Template to pass
one variable into our file; that tag appears near the bottom.</p>



<a name="ch07-40220" /><div class="example">
<h4 class="objtitle">Example 7-4. music_browser.tmpl </h4>
<a name="INDEX-1613" />

<blockquote><pre class="code">&lt;HTML&gt;

&lt;HEAD&gt;
  &lt;TITLE&gt;Online Music Browser&lt;/TITLE&gt;
  
  &lt;SCRIPT SRC="/js-lib/wddx.js"&gt;&lt;/SCRIPT&gt;
    
  &lt;SCRIPT&gt; &lt;!--
    
    var archive_url = "http://www.some-mp3-site.org/downloads/";
    
    function showArtists(  ) {
        var artists = document.mbrowser.artistList;
        
        buildList( artists, "artist", "", "" );
        if ( artists.options.length == 0 ) {
            listMsg( artists, "Sorry no artists available now" );
        }
        
        showConcerts(  );
        showSongs(  );
    }
    
    
    function showConcerts(  ) {
        var concerts = document.mbrowser.concertList;
        
        if ( document.mbrowser.artistList.selectedIndex &lt; 0 ) {
            var selected = selectedValue( document.mbrowser.artistList );
            buildList( concerts, "concert", "artist", selected );
        }
        else {
            listMsg( concerts, "Please select an artist" );
        }
        
        showSongs(  );
    }
    
    
    function showSongs(  ) {
        var songs = document.mbrowser.songList;
        songs.options.length = 0;
        songs.selectedIndex = -1;
        
        if ( document.mbrowser.concertList.selectedIndex &lt; 0 ) {
            var selected = selectedValue( document.mbrowser.concertList );
            buildList( songs, "song", "concert", selected );
        }
        else {
            listMsg( songs, "Please select a concert" );
        }
    }
    
    
    function buildList( list, field, conditionField, conditionValue ) {
        list.options.length = 0;
        list.selectedIndex = -1;
        
        var showAll = ! conditionField;
        var list_idx = 0;
        var matched = new Object;  // Used as hash to avoid duplicates
        for ( var i = 0; i &lt; data[field].length; i++ ) {
            if ( ! matched[ data[field][i] ] &amp;&amp;
                 ( showAll || data[conditionField][i] == conditionValue ) ) {
                matched[ data[field][i] ] = 1;
                var opt = new Option(  );
                opt.text  = data[field][i];
                opt.value = data[field][i];
                list.options[list_idx++] = opt;
            }
        }
    }
    
    
    function showSongInfo(  ) {
        var form = document.mbrowser;
        var idx = -1;
        
        for ( var i = 0; i &lt; data.artist.length; i++ ) {
            if ( data.artist[i]  == selectedValue( form.artistList  ) &amp;&amp;
                 data.concert[i] == selectedValue( form.concertList ) &amp;&amp;
                 data.song[i]    == selectedValue( form.songList    ) ) {
                idx = i;
                break;
            }
        }
        
        form.artist.value   = idx &lt; 0 ? data.artist[idx]   : "";
        form.concert.value  = idx &lt; 0 ? data.concert[idx]  : "";
        form.song.value     = idx &lt; 0 ? data.song[idx]     : "";
        form.venue.value    = idx &lt; 0 ? data.venue[idx]    : "";
        form.date.value     = idx &lt; 0 ? data.date[idx]     : "";
        form.duration.value = idx &lt; 0 ? data.duration[idx] : "";
        form.size.value     = idx &lt; 0 ? data.size[idx]     : "";
        form.filename.value = idx &lt; 0 ? data.filename[idx] : "";
    }
    
    
    function getSong(  ) {
        var form = document.mbrowser;
        if ( form.filename.value == "" ) {
            alert( "Please select an artist, concert, and song to download." );
            return;
        }
        open( archive_url + form.filename.value, "song" );
    }
    
    
    function listMsg ( list, msg ) {
        list.options.length = 0;
        list.options[0] = new Option(  );
        list.options[0].text  = msg;
        list.options[0].value = "--";
    }
    
    
    function selectedValue( list ) {
        return list.options[list.selectedIndex].value;
    }
    
  // --&gt;
  &lt;/SCRIPT&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR="#FFFFFF" onLoad="showArtists(  )"&gt;

  &lt;TABLE WIDTH="100%" BGCOLOR="#CCCCCC" BORDER="1"&gt;
    &lt;TR&gt;&lt;TD ALIGN="center"&gt;
      &lt;H2&gt;The Online Music Browser&lt;/H2&gt;
    &lt;/TD&gt;&lt;/TR&gt;
  &lt;/TABLE&gt;
  
  &lt;P&gt;Listed below are the concerts available for download
    from this site. Please select an artist from the list at
    the left, a concert (or recording) by that artist from
    the list in the middle, and a song from the list on the
    right. All songs are available in MP3 format. Enjoy.&lt;/P&gt;
  
  &lt;HR NOSHADE&gt;
  
  &lt;FORM NAME="mbrowser" onSubmit="return false"&gt;
    &lt;TABLE WIDTH="100%" BORDER="1" BGCOLOR="#CCCCFF"
      CELLPADDING="8" CELLSPACING="8"&gt;
      &lt;INPUT TYPE="hidden" NAME="selectedRecord" VALUE="-1"&gt;
      &lt;TR VALIGN="top"&gt;
        &lt;TD&gt;
          &lt;B&gt;&lt;BIG&gt;1)&lt;/BIG&gt; Select an Artist:&lt;/B&gt;&lt;BR&gt;
          &lt;SELECT NAME="artistList" SIZE="6" onChange="showConcerts(  )"&gt;
            &lt;OPTION&gt;Sorry no artists available&lt;/OPTION&gt;
          &lt;/SELECT&gt;
        &lt;/TD&gt;
        &lt;TD&gt;
          &lt;B&gt;&lt;BIG&gt;2)&lt;/BIG&gt; Select a Concert:&lt;/B&gt;&lt;BR&gt;
          &lt;SELECT NAME="concertList" SIZE="6" onChange="showSongs(  )"&gt;
            &lt;OPTION&gt;Please select an artist&lt;/OPTION&gt;
          &lt;/SELECT&gt;
        &lt;/TD&gt;
        &lt;TD&gt;
          &lt;B&gt;&lt;BIG&gt;3)&lt;/BIG&gt; Select a Song:&lt;/B&gt;&lt;BR&gt;
          &lt;SELECT NAME="songList" SIZE="6" onChange="showSongInfo(  )"&gt;
            &lt;OPTION&gt;Please select a concert&lt;/OPTION&gt;
          &lt;/SELECT&gt;
        &lt;/TD&gt;
      &lt;/TR&gt;&lt;TR&gt;
        &lt;TD COLSPAN="3" ALIGN="center"&gt;
          &lt;H3&gt;Song Information&lt;/H3&gt;
          &lt;TABLE BORDER="0"&gt;
            &lt;TR&gt;
              &lt;TD&gt;&lt;B&gt;Artist:&lt;/B&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;INPUT NAME="artist" TYPE="text" SIZE="40"
                onFocus="this.blur(  )"&gt;&lt;/TD&gt;
            &lt;/TR&gt;&lt;TR&gt;
              &lt;TD&gt;&lt;B&gt;Concert:&lt;/B&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;INPUT NAME="concert" TYPE="text" SIZE="40"
                onFocus="this.blur(  )"&gt;&lt;/TD&gt;
            &lt;/TR&gt;&lt;TR&gt;
              &lt;TD&gt;&lt;B&gt;Song:&lt;/B&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;INPUT NAME="song" TYPE="text" SIZE="40"
                onFocus="this.blur(  )"&gt;&lt;/TD&gt;
            &lt;/TR&gt;&lt;TR&gt;
              &lt;TD&gt;&lt;B&gt;Venue:&lt;/B&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;INPUT NAME="venue" TYPE="text" SIZE="40"
                onFocus="this.blur(  )"&gt;&lt;/TD&gt;
            &lt;/TR&gt;&lt;TR&gt;
              &lt;TD&gt;&lt;B&gt;Date:&lt;/B&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;INPUT NAME="date" TYPE="text" SIZE="20"
                onFocus="this.blur(  )"&gt;&lt;/TD&gt;
            &lt;/TR&gt;&lt;TR&gt;
              &lt;TD&gt;&lt;B&gt;Duration:&lt;/B&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;INPUT NAME="duration" TYPE="text" SIZE="10"
                onFocus="this.blur(  )"&gt;&lt;/TD&gt;
            &lt;/TR&gt;&lt;TR&gt;
              &lt;TD&gt;&lt;B&gt;Download Size:&lt;/B&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;INPUT NAME="size" TYPE="text" SIZE="10"
                onFocus="this.blur(  )"&gt;&lt;/TD&gt;
            &lt;/TR&gt;
          &lt;/TABLE&gt;
        &lt;/TD&gt;
      &lt;/TR&gt;&lt;TR ALIGN="center"&gt;
        &lt;TD  COLSPAN="3"&gt;
          &lt;INPUT TYPE="hidden" NAME="filename" VALUE=""&gt;
          &lt;INPUT TYPE="button" NAME="download" VALUE="Download Song"
            onClick="getSong(  )"&gt;
        &lt;/TD&gt;
      &lt;/TR&gt;
    &lt;/TABLE&gt;
  &lt;/FORM&gt;

&lt;SCRIPT&gt; &lt;!--
&lt;TMPL_VAR NAME="song_data"&gt;
// --&gt;
&lt;/SCRIPT&gt;
  
&lt;/BODY&gt;
&lt;/HTML&gt;</pre></blockquote>
</div>


<p>This <a name="INDEX-1614" />document has a form, but it
doesn't actually submit any queries directly: it has no
<a name="INDEX-1615" />submit button and its

<a name="INDEX-1616" /><em class="emphasis">onSubmit</em>
handler cancels any attempts to submit. The form is simply used as an
interface and includes lists for artist, concert, and song as well as
fields for displaying information on selected songs (refer back to
<a href="ch07_03.htm">Figure 7-3</a>).</p>


<p>In the first <a name="INDEX-1617" />
<a name="INDEX-1618" />&lt;SCRIPT&gt;
tag, this document loads the <em class="filename">wddx.js</em> file, which
is included in the WDDX SDK available at <a href="../../../../../../www.wddx.org/">http://www.wddx.org/</a>. This file contains the
<a name="INDEX-1619" />
<a name="INDEX-1620" />
<a name="INDEX-1621" />JavaScript functions needed to
interpret WDDX objects like recordsets. When the file loads, all of
the JavaScript code outside of functions and handlers is executed.
That sets the <tt class="literal">archive_url</tt> global to the URL of the
directory where the audio files are located; it also executes the
JavaScript code inserted by our CGI script for the &lt;TMPL_VAR
NAME="song_data"&gt; tag. We'll come back to how this
JavaScript is generated when we look at the CGI script in a moment,
but let's peek at the JavaScript code that will be inserted
here. It looks like this:<a href="#FOOTNOTE-10">[10]</a></p><blockquote>

<a name="FOOTNOTE-10" /><p>[10]Incidentally, all of the
artists listed here have released statements affirming that their
policy has been to allow their fans to record and distribute their
performances for noncommercial purposes, and new digital music
formats, such as MP3, do not alter this position. In other words, it
is legal to distribute MP3s of their live performances (and a handful
of other recordings released electronically). Obviously, it would be
<em class="emphasis">illegal</em> to create a site like this with
copyrighted music.</p>

</blockquote>


<blockquote><pre class="code">data=new WddxRecordset(  );
data.artist=new Array(  );
data.artist[0]="The Grateful Dead";
data.artist[1]="The Grateful Dead";
data.artist[3]="Widespread Panic";
data.artist[4]="Widespread Panic";
data.artist[5]="Leftover Salmon";
data.artist[6]="The Radiators";
...</pre></blockquote>


<p>The <tt class="literal">data</tt> variable is an object with a property for
each field from our <em class="filename">song_data.txt</em> data file,
like <tt class="literal">artist</tt> in this example. Each of these
properties is an array containing as many entities as there are rows
in the data file.</p>


<p>As soon as the browser renders the page, the
<tt class="function">onLoad</tt> handler calls the
<tt class="function">showArtists</tt> function. This function displays the
artists by calling <tt class="function">buildList</tt> for the artist
select list object. It then calls the
<tt class="function">showConcerts</tt> and <tt class="function">showSongs</tt>
functions, which also use the <tt class="function">buildList</tt>
function.</p>


<p>The <tt class="function">buildList</tt> function takes a select list
object, the name of the field to pull the data from, and two
additional parameters that are the name and value of a field to use
as a condition for displaying a record. For example, if you call
<tt class="function">buildList</tt> like this:</p>


<blockquote><pre class="code">buildList( document.mbrowser.concertList, "concert", "artist",
  "Widespread Panic" );</pre></blockquote>


<p>then for every record where the artist is "Widespread
Panic", the value of the <tt class="literal">concert</tt> field is
added it to the <tt class="literal">concertList</tt> select list. If the
conditional field name is not provided, then
<tt class="function">buildList</tt> adds the requested field for all
records.</p>


<p>Initially, the artist list is populated, the concert list has one
entry telling the user to select an artist, and the song list has one
entry telling the user to select a concert. Once the user selects an
artist, the concerts by that artist appear in the concert list. When
the user selects a concert, the songs from that concert appear in the
songs list. When the user selects a song, the song information is
displayed in the lower text fields.</p>


<p>These text fields all have the same handler:</p>


<blockquote><pre class="code">onFocus="blur(  )"</pre></blockquote>


<p>This handler essentially makes the text fields uneditable by the
user. As soon as the user tries to click or tab to one of the fields,
the cursor immediately leaves the field. This serves no purpose other
than to indicate that these fields are not intended for user input.
If the user is fast enough, it is actually possible to add text to
these fields, but it won't affect anything. These fields are
populated by the <tt class="function">showSongInfo</tt> function. This
function looks through the data to determine which song has been
selected and then loads the information for this field into the text
fields and also sets the hidden <tt class="literal">filename</tt> field.</p>


<p>When the user clicks on the Download Song button, its
<tt class="function">onClick</tt> handler calls the
<tt class="function">getSong</tt> function. <tt class="function">getSong</tt>
verifies that a song has been selected by checking the value of the
filename field If no song has been selected, the user is notified.
Otherwise, the requested song is downloaded in another window.</p>


<p>Let's look at the CGI script now. Our CGI script must read the
data file, parse it into a WDDX::Recordset object, and add it as
JavaScript to our template. The code appears in <a href="ch07_03.htm">Example 7-5</a>.</p>



<a name="ch07-16200" /><div class="example">
<h4 class="objtitle">Example 7-5. music_browser.cgi </h4>
<a name="INDEX-1622" /><a name="INDEX-1,623" />

<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;
use WDDX;
use HTML::Template;

use constant DATA_FILE =&gt; "/usr/local/apache/data/music/song_data.txt";
use constant TEMPLATE  =&gt; "/usr/local/apache/templates/music/music_browser.tmpl";

print "Content-type: text/html\n\n";

my $wddx = new WDDX;
my $rec = build_recordset( $wddx, DATA_FILE );

# Create JavaScript code assigning recordset to variable named "data"
my $js_rec = $rec-&gt;as_javascript( "data" );

# Output, replacing song_data template var with the JavaScript code
my $tmpl = new HTML::Template( filename =&gt; TEMPLATE );
$tmpl-&gt;param( song_data =&gt; $js_rec );
print $tmpl-&gt;output;


# Takes WDDX object and file path; returns WDDX::Recordset object
sub build_recordset {
    my( $wddx, $file ) = @_;
    local *FILE;
    
    # Open file and read field names from first line
    open FILE, $file or die "Cannot open $file: $!";
    my $headings = &lt;FILE&gt;;
    chomp $headings;
    my @field_names = split /\t/, lc $headings;
    
    # Make each field a string
    my @types = map "string", @field_names;
    my $rec = $wddx-&gt;recordset( \@field_names, \@types );
    
    # Add each record to our recordset
    while (&lt;FILE&gt;) {
        	chomp;
        my @fields = split /\t/;
        $rec-&gt;add_row( \@fields );
    }
    
    close FILE;
    return $rec;
}</pre></blockquote>
</div>


<p>This CGI script starts like our previous examples: it adds the
modules we need, defines constants to the files it uses, and outputs
the HTTP header. Next, it creates a new WDDX object and constructs a
<a name="INDEX-1624" />recordset
via the <tt class="function">build_recordset</tt> function.</p>


<p>The <tt class="function">build_recordset</tt> function takes a
<em class="filename">WDDX</em> object and a file path. It opens the file
and reads the first line into <tt class="literal">$headings</tt> to
determine the names of the fields. It then splits these into an
array, making sure that each field name is lowercase. The next line
is a little more complex:</p>


<blockquote><pre class="code">my @types = map "string", @field_names;</pre></blockquote>


<p><em class="filename">WDDX</em> needs to know the data type for each field
in the recordset. In this instance, we can treat each field as a
string, so this script uses Perl's <tt class="function">map</tt>
function to create an array the same size as
<tt class="literal">@field_names</tt> with every element set to
<tt class="literal">"string"</tt> and assign it to
<tt class="literal">@types</tt>. It then gets a new WDDX::Recordset object
and loops through the file, adding each line to the recordset.</p>


<p>We then convert the recordset into JavaScript code and parse this
into the template, replacing the <tt class="literal">song_data</tt> tag.
That JavaScript code we <a name="INDEX-1625" /> <a name="INDEX-1,626" />discussed <a name="INDEX-1,627" /> <a name="INDEX-1,628" />earlier takes <a name="INDEX-1,629" /> <a name="INDEX-1,630" />over from <a name="INDEX-1,631" /> <a name="INDEX-1,632" />WDDX there.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch07_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">7.2. Forms</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">7.4. Bookmarklets</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
