<?label 3.3. CGI Output?><html><head><title>CGI Output (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">3.3. CGI Output</h2>


<p>Every <a name="INDEX-563" /> <a name="INDEX-564" />CGI script must print a
<a name="INDEX-565" /> <a name="INDEX-566" />header line, which the
server uses to build the full HTTP headers of its response. If your
CGI script produces invalid headers or no headers, the web server
will generate a valid response for the client -- generally a
<em class="emphasis">500 Internal Server Error</em>
<a name="INDEX-567" />
<a name="INDEX-568" /> message.</p>


<p>Your CGI has the option of displaying full or partial headers. By
default, CGI scripts should return only partial headers.</p>


<a name="ch03-7-fm2xml" /><div class="sect2">
<h3 class="sect2">3.3.1. Partial Headers</h3>


<p>CGI scripts must <a name="INDEX-569" /> <a name="INDEX-570" />output one of the following three
headers:</p>


<ul><li><p>A <em class="emphasis">Content-type</em>
<a name="INDEX-571" /> header specifying the media type of
the <a name="INDEX-572" /> <a name="INDEX-573" />content that will follow</p></li><li><p>A <em class="emphasis">Location</em> header specifying a URL to redirect
the client to</p></li><li><p>A <em class="emphasis">Status</em>
<a name="INDEX-574" /> header with a status that does not
require additional data, such as <em class="emphasis">204 No Response</em></p></li></ul>
<p>Let's review each of these options.</p>


<a name="ch03-8-fm2xml" /><div class="sect3">
<h3 class="sect3">3.3.1.1. Outputting documents</h3>


<p>The most <a name="INDEX-575" />
<a name="INDEX-576" />common
response for CGI scripts is to return HTML. A script must indicate to
the server the media type of content it is returning prior to
outputting any content. This is why all of the CGI scripts you have
seen in the previous examples contained the following line:</p>


<blockquote><pre class="code">print "Content-type: text/html\n\n";</pre></blockquote>


<p>You can send other HTTP headers from a CGI script, but this header
field is the minimum necessary in order to output a document. HTML
documents are by no means the only form of media type that may be
outputted by CGI scripts. By specifying a different media type, you
can output any type of document that you can imagine. For example,
<a href="ch03_04.htm">Example 3-4</a> later in this chapter shows how to
return a dynamic image.</p>


<p>The two <a name="INDEX-577" />
<a name="INDEX-578" />
<a name="INDEX-579" />newlines at the end the
<em class="emphasis">Content-type</em> header tell the web server that
this is the last header line and that subsequent lines are part of
the body of the message. This correlates to the extra CRLF that we
discussed in the last chapter, which separates HTTP headers from the
content body (see the upcoming sidebar, <a href="ch03_03.htm">the sidebar "Line Endings"</a>).</p>

<blockquote>
<a name="ch03-73207" />
<h4 class="objtitle">Line Endings</h4>

<p>Many <a name="INDEX-580" />
<a name="INDEX-581" />
<a name="INDEX-582" />operating systems
<a name="INDEX-583" />use different combinations
of line feeds and carriage returns to represent the end of a line of
text. Unix systems use a line feed; Macintosh systems use a carriage
return; and <a name="INDEX-584" /> <a name="INDEX-585" />Microsoft systems use both a
carriage return and a line feed, often abbreviated as
<em class="firstterm">CRLF</em>.
<a name="INDEX-586" />HTTP headers require a CRLF as
well -- each header line must end with a carriage return and a
line feed.</p>

<p>In Perl (on <a name="INDEX-587" />
<a name="INDEX-588" />Unix), a line feed is represented as
"<tt class="literal">\n</tt>", and a carriage return is
represented as "<tt class="literal">\r</tt>". Thus, you may
wonder why our previous examples have included this:</p>


<blockquote><pre class="code">print "Content-type: text/html\n\n";</pre></blockquote>



<p>and not this:</p>



<blockquote><pre class="code">print "Content-type: text/html\r\n\r\n";</pre></blockquote>


<p>The second format would work, but only if your script runs on
Unix. Because Perl both began on Unix and has become a cross-platform
language, printing <tt class="literal">"\n"</tt> in a script will always
output the operating system's default line ending.</p>

<p>There is a simple solution. CGI requires that the web server
translate your operating system's conventional line ending into
a CRLF for you. Thus for the sake of portability, it is always best
practice to print a simple line feed
("<tt class="literal">\n</tt>"): Perl will output the operating
system's default line ending, and the web server will
automatically convert this to the CRLF required by HTTP.</p>
</blockquote>
</div>



<a name="ch03-14232" /><div class="sect3">
<h3 class="sect3">3.3.1.2. Forwarding to another URL</h3>


<p>Sometimes, it's not <a name="INDEX-589" /> <a name="INDEX-590" />
<a name="INDEX-591" />necessary to build an HTML
document with your CGI script. In fact, unless the output varies from
one visit to another, it is a good idea to create a simple, static
<a name="INDEX-592" />HTML page (in addition to the CGI
script), and forward the user to that page by using the
<em class="emphasis">Location</em> header. Why? Interface changes are far
more common than program logic changes, and it is much easier to
reformat an HTML page than to make changes to a CGI script. Plus, if
you have multiple CGI scripts that return the same message, then
having them all forward to a common document reduces the number of
resources you need to maintain. Finally, you get better performance.
Perl is fast, but your web server will always be faster. It's a
good idea to take advantage of any opportunity you have to shift work
from your CGI scripts to your web server.</p>


<p>To forward a user to another <a name="INDEX-593" />URL, simply print the
<em class="emphasis">Location</em> header with the URL to the new
location:</p>


<blockquote><pre class="code">print "Location: static_response.html\n\n";</pre></blockquote>


<p>The URL may be absolute or relative. An <a name="INDEX-594" />
<a name="INDEX-595" />absolute URL or a
relative URL with a relative path is sent back to the browser, which
then creates another request for the new URL. A
<a name="INDEX-596" /> <a name="INDEX-597" />
<a name="INDEX-598" />relative URL with a
full path produces an <em class="firstterm">internal redirect</em>. An
internal redirect is handled by the web server without talking to the
browser. It gets the contents of the new resource as if it had
received a new request, but it then returns the content for the new
resource as if it is the output of your CGI script. This avoids a
<a name="INDEX-599" />network response and
request; the only difference to users is a faster response. The URL
displayed by their browser does not change for internal redirects; it
continues to show the URL of the original CGI script. See <a href="ch03_03.htm">Figure 3-4</a> for a visual display of server redirection.</p>


<a name="ch03-14190" /><div class="figure"><img width="482" src="figs/cgi2.0304.gif" height="246" alt="Figure 3-4" /></div><h4 class="objtitle">Figure 3-4. Server redirection</h4>

<p>When redirecting to absolute URLs, you may include a
<em class="emphasis">Content-type</em> header and content body for the
sake of older browsers, which may not forward automatically. Modern
browsers will immediately fetch the new URL without displaying this
content.</p>
</div>



<a name="ch03-9-fm2xml" /><div class="sect3">
<h3 class="sect3">3.3.1.3. Specifying status codes</h3>


<p>The <a name="INDEX-600" /> <a name="INDEX-601" /><em class="emphasis">Status</em> header is
different than the other headers because it does not map directly to
an HTTP header, although it is associated with the status line. This
field is used only to exchange information between the CGI script and
the web server. It specifies the <a name="INDEX-602" />
<a name="INDEX-603" />status code the server should include in
the status line of the request. This field is optional: if you do not
print it, the web server will automatically add a
<a name="INDEX-604" />status of <em class="emphasis">200 OK</em> to
your output if you print a <em class="emphasis">Content-type</em> header,
and a status of <em class="emphasis">302 Found</em> if you print a
<em class="emphasis">Location</em> header.</p>


<p>If you do print a status code, you are not bound to use the status
code's associated message, but you should not try to use a
status code for something other than for which it was intended. For
example, if your CGI script must connect to a database in order to
generate its output, you might return <em class="emphasis">503 Database
Unavailable</em> if the database has no free
connections<em class="emphasis">.</em> The standard error message for
<em class="emphasis">503</em> messages is <em class="emphasis">Service
Unavailable</em>
<a name="INDEX-605" />
<a name="INDEX-606" />, so our database message is an
appropriately similar use of this status code.</p>


<p>Whenever you return an error status code, you should also return a
<em class="emphasis">Content-type</em>
<a name="INDEX-607" /> header and a
<a name="INDEX-608" />message body describing the reason for
the error in human terms. Some browsers provide their own messages to
users when they receive status codes indicating an error, but most do
not. So unless you provide a message, many users will get an empty
page or a message telling them "The document contains no
data." If you don't want to admit to having a problem,
you can always fall back to the ever-popular slogan, "The
system is currently unavailable while we perform routine
maintenance."</p>


<p>Here is the code to report our database error:</p>


<blockquote><pre class="code">print &lt;&lt;END_OF_HTML;
Status: 503 Database Unavailable
Content-type: text/html

&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;503 Database Unavailable&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
  &lt;H1&gt;Error&lt;/H1&gt;
  &lt;P&gt;Sorry, the database is currently not available. Please
    try again later.&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
END_OF_HTML</pre></blockquote>


<p>Below is a short description of the common <a name="INDEX-609" /> <a name="INDEX-610" />
<a name="INDEX-611" />status headers along with
when (and whether) to use them in your CGI scripts:</p>


<dl>
<dt><b>
<a name="INDEX-612" />200 OK</b></dt>
<dd><p>200 is by far the most common status code returned by web servers; it
indicates that the request was understood, it was processed
successfully, and a response is included in the content. As we
discussed earlier, the web server automatically adds this header when
you print the required <em class="emphasis">Content-type</em> header, so
the only time you need to print this status yourself is to output
complete <em class="emphasis">nph-</em> headers, which we discuss in the
next section.</p></dd>


<dt><b>
<a name="INDEX-613" />204 No Response</b></dt>
<dd><p>204 indicates that the request was okay, it was processed
successfully, but no response is provided. When a browser receives
this status code, it does nothing. It simply continues to display
whatever page it was displaying before the request. A 200 response
without a content body, on the other hand, may produce a
"Document contains no data" error in the user's
browser. Web users generally expect feedback, but there are some
instances when this response (or lack of response) makes sense. One
example is a situation when you need client code such as JavaScript
or Java to report something to the web server without updating the
current page.</p></dd>


<dt><b>
<a name="INDEX-614" />
<a name="INDEX-615" />301 Moved Permanently</b></dt>
<dd><p>301 indicates that the URL of the<a name="INDEX-616" /> requested resource
has changed. All 300-level responses must contain a
<em class="emphasis">Location</em> <a name="INDEX-617" />header field specifying a new URL for the
resource. If the browser receives a 301 response to a
<a name="INDEX-618" />GET request, it should
automatically fetch the resource from the new location. If the
browser receives a 301 response to a <a name="INDEX-619" />POST request, however, the browser should
confirm with the user before redirecting the POST request. Not all
browsers do this, and many even change the request method of the new
request to GET.</p>


<p>Responses with this status code may include a message for the user in
case the browser does not handle redirection automatically. Because
this status code indicates a permanent move, a proxy or a browser
that has a cached copy of this response will simply use it in the
future instead of reconfirming the change with the web server.</p></dd>


<dt><b>
<a name="INDEX-620" />302 Found</b></dt>
<dd><p>302 responses function just like 301 responses, except that the move
is <a name="INDEX-621" /> <a name="INDEX-622" />temporary, so browsers should direct
all future requests to the original URL. This is the status code that
is returned to browsers when your script prints a
<em class="emphasis">Location</em> header (except for full paths, see
<a href="ch03_03.htm">Section 3.3.1.2, "Forwarding to another URL"</a> earlier). As with 301 status
codes, browsers should check with the user before forwarding a POST
request to another URL. Because the 302 status has become so popular,
and because so many browsers have been guilty of silently changing
POST requests to GET requests during the redirect, HTTP/1.1 more or
less gave up on trying to get compliance on this status code and
defines two new status codes: <em class="emphasis">303 See Other</em> and
<em class="emphasis">307 Temporary Redirect</em>.</p></dd>


<dt><b>
<a name="INDEX-623" />303 See Other</b></dt>
<dd><p>303 is new for HTTP/1.1. It indicates that the resource has
temporarily moved and that it should be obtained from the new URL via
a GET request, even if the original request method was POST. This
status code allows the web server (and the CGI script developer) to
explicitly request the incorrect behavior that 302 responses caused
in most browsers.</p></dd>


<dt><b>
<a name="INDEX-624" />
<a name="INDEX-625" />307 Temporary Redirect</b></dt>
<dd><p>307 is new for HTTP/1.1. It also indicates a temporary redirection.
However, HTTP/1.1 browsers that support this status code
<em class="emphasis">must</em> prompt the user if they receive this status
code in response to a POST request and <em class="emphasis">must not
</em>automatically change the request method to GET. This is
the same behavior required for 302 status codes, but browsers that
implement this code should actually do the right thing.</p>


<p>Thus 302, 303, and 307 all indicate the same thing except when the
request was a POST. In that case, the browser should fetch the new
URL with a GET request for 303, confirm with the user and then fetch
the new URL with a POST request for 307, and do either of those for
302.</p></dd>


<dt><b>
<a name="INDEX-626" />
<a name="INDEX-627" />400 Bad Request</b></dt>
<dd><p>400 is a general error indicating that the <a name="INDEX-628" />
<a name="INDEX-629" />browser sent an invalid request due
to bad syntax. Examples include an invalid <em class="emphasis">Host</em>
header field or a request with content but without a
<em class="emphasis">Content-type</em> header. You should not have to
return a 400 status because the web server should recognize these
problems and reply with this error status code for you instead of
calling your CGI script.</p></dd>


<dt><b>
<a name="INDEX-630" />
<a name="INDEX-631" />
<a name="INDEX-632" />401 Unauthorized</b></dt>
<dd><p>401 indicates that the requested resource is in a protected realm.
When browsers receive this response, they should ask the user for a
<a name="INDEX-633" />
<a name="INDEX-634" />login and password and
resend the original request with this additional information. If the
browser again receives a 401 status code, then the login was
declined. The browser generally notifies the user and allows the user
to reenter the login information. 401 responses should include a
<em class="emphasis">WWW-Authenticate</em>
<a name="INDEX-635" /> header field indicating the name of the
protected realm.</p>


<p>The web server handles authentication for you (although
<em class="emphasis">mod_perl</em> lets you dig into it if you wish)
before invoking your CGI scripts. Therefore, you should not return
this status code from CGI scripts; use <em class="emphasis">403
Forbidden</em> instead.</p></dd>


<dt><b>
<a name="INDEX-636" />
<a name="INDEX-637" />
<a name="INDEX-638" />403 Forbidden</b></dt>
<dd><p>403 indicates that the client is not allowed to access the requested
resource for some reason other than needing a valid HTTP login.
Remember reading in <a href="ch01_01.htm">Chapter 1, "Getting Started "</a>, that
<a name="INDEX-639" />
<a name="INDEX-640" />CGI scripts must have the correct
permissions set up in order to run? Your browser will receive a 403
status if you attempt to run CGI scripts that do not have the correct
execute permissions.</p>


<p>You might return this status code for certain protected CGI scripts
if the user fails to meet some criteria such as having a particular
IP address, a particular browser cookie, etc.</p></dd>


<dt><b>
<a name="INDEX-641" />
<a name="INDEX-642" />404 Not Found</b></dt>
<dd><p>Undoubtedly, you have run across this status code. It's the
online equivalent of a disconnected phone number. 404 indicates that
the web server can't find the resource you asked for. Either
you misentered a <a name="INDEX-643" />URL or you followed a link that is old and
no longer accurate.</p>


<p>You might use this status code in CGI scripts if the user passes
extra path information that is invalid.</p></dd>


<dt><b>
<a name="INDEX-644" />
<a name="INDEX-645" />
<a name="INDEX-646" />
<a name="INDEX-647" />405 Not Allowed</b></dt>
<dd><p>405 indicates that the resource requested does not support the
request method used. Some CGI scripts are written to support only
POST requests or only GET requests. This status would be an
appropriate response if the wrong request method is received; in
practice, this status code is not often used. 405 replies must
include an <em class="emphasis">Allow</em> header containing a list of
valid request methods for the resource.</p></dd>


<dt><b>
<a name="INDEX-648" />
<a name="INDEX-649" />
<a name="INDEX-650" />
<a name="INDEX-651" />408 Request Timed Out</b></dt>
<dd><p>When a transaction takes a long time, the web browser usually gives
up before the web server. Otherwise, the server will return a 408
status when it has grown tired of waiting. You should not return this
status from CGI scripts. Use <em class="emphasis">504 Gateway Timed
Out</em> instead.</p></dd>


<dt><b>
<a name="INDEX-652" />
<a name="INDEX-653" />
<a name="INDEX-654" />500 Internal Server Error</b></dt>
<dd><p>As you begin writing CGI scripts, you will become far too familiar
with this status. It indicates that something happened on the server
that caused the transaction to fail. This almost always means a CGI
script did something wrong. What could a CGI script do wrong you ask?
Lots: syntax errors, runtime errors, or invalid output all might
generate this response. We'll discuss strategies for debugging
unruly CGI scripts in <a href="ch15_01.htm">Chapter 15, "Debugging CGI Applications"</a>.</p></dd>


<dt><b>
<a name="INDEX-655" />
<a name="INDEX-656" />
<a name="INDEX-657" />503 Service Unavailable</b></dt>
<dd><p>503 indicates that the web server is unable to respond to the request
due to a high volume of traffic. These responses may include a
<em class="emphasis">Retry-After</em> header with the date and time that
the browser should wait until before retrying. Generally web servers
manage this themselves, but you might issue this status if your CGI
script recognizes that another resource (such as a database) required
by the script has too much traffic.</p></dd>


<dt><b>
<a name="INDEX-658" />
<a name="INDEX-659" />504 Gateway Timed Out</b></dt>
<dd><p>504 indicates that some gateway along the request cycle timed out
while waiting for another resource. This gateway could be your CGI
script. If your CGI script implements a time-out handler when calling
another resource, such as a database or another Internet server, then
it should return a 504 response.</p></dd>

</dl>


<p>We list these <a name="INDEX-660" />
<a name="INDEX-661" />status codes here to be
complete, but keep in mind that you do not have to print your own
status code, even for errors. Although sending a status code to
report an error might be the most appropriate action according to the
HTTP protocol, you may prefer to simply redirect users to a help page
or return a summary of the error <a name="INDEX-662" /> <a name="INDEX-663" />as normal <a name="INDEX-664" /> <a name="INDEX-665" />output (with a <em class="emphasis">200
OK</em> status).</p>
</div>
</div>




<a name="ch03-10-fm2xml" /><div class="sect2">
<h3 class="sect2">3.3.2. Complete (Non-Parsed) Headers</h3>


<p>Thus far, all the <a name="INDEX-666" />
<a name="INDEX-667" /> <a name="INDEX-668" />CGI scripts that
we've discussed simply return partial header information. We
leave it up to the server to fill in the other headers and return the
document to the browser. We don't have to rely on the server
though. We can also develop CGI scripts that generate a complete
header.</p>


<p>CGI scripts that generate their own headers are called
<em class="firstterm">nph</em>
<a name="INDEX-669" /> (<em class="firstterm">non-parsed
headers</em>) scripts. The server must know in advance whether
the particular CGI script intends to return a complete set of
headers. Web servers handle this differently, but most recognize CGI
scripts with a <em class="emphasis">nph-</em> prefix in their filename.</p>


<p>When sending complete headers, you must at least send the
<a name="INDEX-670" /> <a name="INDEX-671" /> <a name="INDEX-672" />status line plus the
<em class="emphasis">Content-type</em> and <em class="emphasis">Server</em>
headers. You must print the entire status line; you should not print
the <em class="emphasis">Status</em> header. As you will recall, the
status line includes the <a name="INDEX-673" />protocol and version string
(e.g., "HTTP/1.1"), but as you should recall, CGI
provides this to you in the <a name="INDEX-674" />
<a name="INDEX-675" />environment variable SERVER_PROTOCOL.
Always use this variable in your CGI scripts, instead of hardcoding
it, because the version in the SERVER_PROTOCOL may vary for older
clients.</p>


<p><a href="ch03_03.htm">Example 3-3</a> provides a simple example that
illustrates <em class="emphasis">nph</em> scripts.</p>



<a name="ch03-84951" /><div class="example">
<h4 class="objtitle">Example 3-3. nph-count.cgi </h4>

<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;

print "$ENV{SERVER_PROTOCOL} 200 OK\n";
print "Server: $ENV{SERVER_SOFTWARE}\n";
print "Content-type: text/plain\n\n";

print "OK, starting time consuming process ... \n";

# Tell Perl not to buffer our output
$| = 1;

for ( my $loop = 1; $loop &lt;= 30; $loop++ ) {
    print "Iteration: $loop\n";
    ## Perform some time consuming task here ##
    sleep 1;
}

print "All Done!\n";</pre></blockquote>
</div>


<p><em class="emphasis">nph</em>
<a name="INDEX-676" />
<a name="INDEX-677" /> scripts were more common in the
past, because versions of <a name="INDEX-678" />Apache prior to 1.3 buffered the output of
standard CGI scripts (those generating partial headers) but did not
buffer the output of <em class="emphasis">nph</em> scripts. By creating
<em class="emphasis">nph</em> scripts, your output was sent immediately to
the browser as it was generated. However Apache 1.3 no longer buffers
CGI output, so this feature of <em class="emphasis">nph</em> scripts is no
longer needed with Apache. Other web servers, such as
<a name="INDEX-679" />iPlanet Enterprise Server 4, buffer both
standard CGI as well as <em class="emphasis">nph</em> output. You can find
out how your web
<a name="INDEX-680" />
<a name="INDEX-681" />server handles buffering by
running <a href="ch03_03.htm">Example 3-3</a>.</p>


<p>Save the file as <em class="filename">nph-count.cgi</em> and access it
from your browser; then save a copy as <em class="emphasis">count.cgi</em>
and update it to output partial headers by commenting out the status
line and the <em class="emphasis">Server</em> header:</p>


<blockquote><pre class="code"># print "$ENV{SERVER_PROTOCOL} 200 OK\n";
# print "Server: $ENV{SERVER_SOFTWARE}\n";</pre></blockquote>


<p>Access this copy of the CGI script and compare the result. If your
browser pauses for thirty seconds before displaying the page, then
the server is buffering the output; if you see the lines displayed in
real time, then it is <a name="INDEX-682" /> <a name="INDEX-683" />not.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch03_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">3.2. Environment Variables</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">3.4. Examples</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
