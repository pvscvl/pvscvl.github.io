<?label 13.3. Generating PNGs with GD?><html><head><title>Generating PNGs with GD (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">13.3. Generating PNGs with GD</h2>


<p>The <a name="INDEX-2562" />
<a name="INDEX-2563" />
<a name="INDEX-2564" />GD module was created and is maintained
by Lincoln Stein, who is also the author of CGI.pm. GD provides a
Perl port of the <em class="emphasis">gd</em> graphics library created by
Thomas Boutell for the C programming language. The
<em class="emphasis">gd</em> library was originally created for creating
and editing GIFs. As a result of the Unisys patent issue, however, it
was rewritten for PNG (incidentally, Thomas Boutell was a co-author
and the editor for the PNG specification). Current versions of the
<em class="emphasis">gd</em> library and the GD module no longer support
GIFs, and older versions are no longer distributed. If you have an
older version of these modules (for example, an older version was
included with your system) that does support GIFs, you should
probably contact Unisys for licensing terms and/or an attorney
familiar with patent issues before using them.</p>


<a name="ch13-11-fm2xml" /><div class="sect2">
<h3 class="sect2">13.3.1. Installation</h3>


<p>You can install <a name="INDEX-2565" />
<a name="INDEX-2566" />GD just like other CPAN modules, except
that you should ensure that you have the latest version of
<em class="emphasis">gd</em>. GD contains <a name="INDEX-2567" />C code that must be compiled with
<em class="emphasis">gd</em>, and if you have an older version of
<em class="emphasis">gd</em>, or if <em class="emphasis">gd</em> is missing,
you will get errors during compilation.</p>


<p>The <em class="emphasis">gd</em> library is available at <a href="../../../../../../www.boutell.com/">http://www.boutell.com/</a>. This site also has
instructions for building <em class="emphasis">gd</em> plus references to
other optional packages that <em class="emphasis">gd</em> uses if
available, such as the FreeType engine, which enables
<em class="emphasis">gd</em> (and thus GD) to support TrueType fonts. Note
that gd requires the latest versions of
<em class="emphasis">libpng</em>
<a name="INDEX-2568" /> <a name="INDEX-2,569" /> and <em class="emphasis">zlib</em>; you can find
links to these libraries at <a href="../../../../../../www.boutell.com/">http://www.boutell.com/</a> too.</p>
</div>




<a name="ch13-12-fm2xml" /><div class="sect2">
<h3 class="sect2">13.3.2. Using GD</h3>


<p>In this section, we'll develop an application that uses the
<tt class="command">uptime</tt>
<a name="INDEX-2570" /> <a name="INDEX-2,571" />
<a name="INDEX-2572" /> Unix system command to plot the
system load average (see <a href="ch13_03.htm">Figure 13-1</a>). As we will
see in the next section, there are modules to help us generate graphs
more easily, but let's first see <em class="emphasis">gd
</em>'s graphics primitives in action.</p>


<a name="ch13-31232" /><div class="figure"><img width="125" src="figs/cgi2.1301.gif" height="113" alt="Figure 13-1" /></div><h4 class="objtitle">Figure 13-1. Sample graph generated by loads.cgi</h4>

<p>The application itself is rather straightforward. First, we invoke
the <tt class="command">uptime</tt> command, which returns three values,
representing the load averages for the previous 5, 10 and 15 minutes,
respectively -- though this may differ among the various Unix
implementations. Here is the output of an <em class="emphasis">uptime</em>
command:</p>


<blockquote><pre class="code">2:26pm  up  11:07,  12 users,  load average: 4.63, 5.29, 2.56</pre></blockquote>


<p>Then, we use <em class="emphasis">gd</em>'s various
<a name="INDEX-2574" />
<a name="INDEX-2575" />drawing primitives, such as lines
and polygons to draw the axes and scale and to plot the load values.</p>


<p><a href="ch13_03.htm">Example 13-2</a> shows the code.</p>



<a name="ch13-23495" /><div class="example">
<h4 class="objtitle">Example 13-2. loads.cgi </h4>
<a name="INDEX-2576" /><a name="INDEX-2,577" />

<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;

use CGI;
use GD;

BEGIN {
    $ENV{PATH} = '/bin:/usr/bin:/usr/ucb:/usr/local/bin';
    delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };
}

use constant LOAD_MAX       =&gt; 10;

use constant IMAGE_SIZE     =&gt; 170;     # height and width
use constant GRAPH_SIZE     =&gt; 100;     # height and width
use constant TICK_LENGTH    =&gt; 3;

use constant ORIGIN_X_COORD =&gt; 30;
use constant ORIGIN_Y_COORD =&gt; 150;

use constant TITLE_TEXT     =&gt; "System Load Average";
use constant TITLE_X_COORD  =&gt; 10;
use constant TITLE_Y_COORD  =&gt; 15;

use constant AREA_COLOR     =&gt; ( 255, 0, 0 );
use constant AXIS_COLOR     =&gt; ( 0, 0, 0 );
use constant TEXT_COLOR     =&gt; ( 0, 0, 0 );
use constant BG_COLOR       =&gt; ( 255, 255, 255 );

my $q     = new CGI;
my @loads = get_loads(  );

print $q-&gt;header( -type =&gt; "image/png", -expires =&gt; "-1d" );

binmode STDOUT;
print area_graph( \@loads );


# Returns a list of the average loads from the system's uptime command
sub get_loads {
    my $uptime = `uptime` or die "Error running uptime: $!";
    my( $up_string ) = $uptime =~ /average: (.+)$/;
    my @loads = reverse
                map { $_ &gt; LOAD_MAX ? LOAD_MAX : $_ }
                split /,\s*/, $up_string;
    @loads or die "Cannot parse response from uptime: $up_string";
    return @loads;
}


# Takes a one-dimensional list of data and returns an area graph as PNG
sub area_graph {
    my $data = shift;
    
    my $image = new GD::Image( IMAGE_SIZE, IMAGE_SIZE );
    my $background = $image-&gt;colorAllocate( BG_COLOR );
    my $area_color = $image-&gt;colorAllocate( AREA_COLOR );
    my $axis_color = $image-&gt;colorAllocate( AXIS_COLOR );
    my $text_color = $image-&gt;colorAllocate( TEXT_COLOR );
    
    # Add Title
    $image-&gt;string( gdLargeFont, TITLE_X_COORD, TITLE_Y_COORD,
                    TITLE_TEXT, $text_color );
    
    # Create polygon for data
    my $polygon = new GD::Polygon;
    $polygon-&gt;addPt( ORIGIN_X_COORD, ORIGIN_Y_COORD );
    
    for ( my $i = 0; $i &lt; @$data; $i++ ) {
        $polygon-&gt;addPt( ORIGIN_X_COORD + GRAPH_SIZE / ( @$data - 1 ) * $i,
                         ORIGIN_Y_COORD - $$data[$i] * GRAPH_SIZE / LOAD_MAX );
    }
    
    $polygon-&gt;addPt( ORIGIN_X_COORD + GRAPH_SIZE, ORIGIN_Y_COORD );
    
    # Add Polygon
    $image-&gt;filledPolygon( $polygon, $area_color );
    
    # Add X Axis
    $image-&gt;line( ORIGIN_X_COORD, ORIGIN_Y_COORD,
                  ORIGIN_X_COORD + GRAPH_SIZE, ORIGIN_Y_COORD,
                  $axis_color );
    # Add Y Axis
    $image-&gt;line( ORIGIN_X_COORD, ORIGIN_Y_COORD,
                  ORIGIN_X_COORD, ORIGIN_Y_COORD - GRAPH_SIZE,
                  $axis_color );
    
    # Add X Axis Ticks Marks
    for ( my $x = 0; $x &lt;= GRAPH_SIZE; $x += GRAPH_SIZE / ( @$data - 1 ) ) {
        $image-&gt;line( $x + ORIGIN_X_COORD, ORIGIN_Y_COORD - TICK_LENGTH,
                      $x + ORIGIN_X_COORD, ORIGIN_Y_COORD + TICK_LENGTH,
                      $axis_color );
    }
    
    # Add Y Axis Tick Marks
    for ( my $y = 0; $y &lt;= GRAPH_SIZE; $y += GRAPH_SIZE / LOAD_MAX ) {
        $image-&gt;line( ORIGIN_X_COORD - TICK_LENGTH, ORIGIN_Y_COORD - $y,
                      ORIGIN_X_COORD + TICK_LENGTH, ORIGIN_Y_COORD - $y,
                      $axis_color );
    }
    
    $image-&gt;transparent( $background );
    
    return $image-&gt;png;
}<a name="INDEX-2578" />
<a name="INDEX-2579" /></pre></blockquote>
</div>


<p>After importing our modules, we use a
<tt class="function">BEGIN</tt>
<a name="INDEX-2580" />
<a name="INDEX-2581" /> block to make the environment
safe for taint. We have to do this because our script will use the
external <tt class="command">uptime</tt> command (see <a href="ch08_04.htm">Section 8.4, "Perl's Taint Mode"</a>).</p>


<p>Then we set a large number of constants. The
<tt class="literal">UPPER_LIMIT</tt> constant sets the upper limit on the
load average. If a load average exceeds the value of 10, then it is
set to 10, so we don't have to worry about possibly scaling the
axes. Remember, the whole point of this application is not to create
a highly useful graphing application, but one that will illustrate
some of GD's drawing primitives.</p>


<p>Next, we choose a size for our graph area,
<tt class="literal">GRAPH_SIZE</tt>, as well as for the image itself,
<tt class="literal">IMAGE_SIZE</tt>. Both the image and the graph are
square, so these sizes represent length as well as width.
<tt class="literal">TICK_LENGTH</tt> corresponds to the length of each tick
mark (this is actually half the length of the tick mark once
it's drawn).</p>


<p><tt class="literal">ORIGIN_X_COORD</tt> and
<tt class="literal">ORIGIN_Y_COORD</tt> contain the coordinates of the
origin of our graph (its lower left-hand corner).
<tt class="literal">TITLE_TEXT</tt>, <tt class="literal">TITLE_X_COORD</tt>, and
<tt class="literal">TITLE_Y_COORD</tt> contain values for the title of our
graph. Finally, we set <tt class="literal">AREA_COLOR</tt>,
<tt class="literal">AXIS_COLOR</tt>, <tt class="literal">TEXT_COLOR</tt>, and
<tt class="literal">BG_COLOR</tt> to an array of three numbers containing
red, green, and blue values, respectively; these values range from
<tt class="literal">0</tt> to <tt class="literal">255</tt>.</p>


<p>The system's load is returned by
<tt class="function">get_loads</tt>. It takes the output of
<tt class="command">uptime</tt>
<a name="INDEX-2582" />, parses out the load averages,
truncates any average greater than the value specified by
<tt class="literal">UPPER_LIMIT</tt>, and reverses the values so they are
returned from oldest to newest. Thus, our graph will plot from left
to right the load average of the system over the last 15, 10, and 5
minutes.</p>


<p>Returning to the main body of our CGI script, we output our header,
enable binary mode, then fetch the data for our PNG from
<tt class="function">area_graph</tt> and print it.</p>


<p>The <tt class="function">area_graph</tt>
<a name="INDEX-2583" /> function contains all of our image
code. It accepts a reference to an array of data points, which it
assigns to <tt class="literal">$data</tt>. We first create a new instance
of <a name="INDEX-2584" />GD::Image, passing to it the dimensions
of the canvas that we want to work with.</p>


<p>Next, we allocate four colors that correspond to our earlier
constants. Note that the first color we allocate automatically
becomes the background color. In this case, the image will have a
white background.</p>


<p>We use the <tt class="function">string</tt> method to display our title
using the <tt class="function">gdLarge</tt> font. Then, we draw two lines,
one horizontal and one vertical from the origin, representing the x
and y axes. Once we draw the axes, we iterate through the entire
graph area and draw the tick marks on the axes.</p>


<p>Now, we're ready to plot the load averages on the graph. We
create a new instance of the <a name="INDEX-2585" />GD::Polygon class to draw a polygon with
the vertices representing the three load averages. Drawing a polygon
is similar in principle to creating a closed path with several
points.</p>


<p>We use the <tt class="function">addPt</tt> method to add a point to the
polygon. The origin is added as the first point. Then, each load
average coordinate is calculated and added to the polygon. We add a
final point on the x axis. GD automatically connects the final point
to the first point.</p>


<p>The <tt class="function">filledPolygon</tt> method fills the polygon
specified by the <tt class="literal">$polygon</tt> object with the
associated color. And finally, the graph is rendered as a PNG and the
data is returned.</p>


<p>GD supports many methods beyond those listed here, but we do not have
space to list them all here. Refer to the GD documentation or
<em class="citetitle">Programming Web Graphics</em> for full <a name="INDEX-2586" /> <a name="INDEX-2,587" /> <a name="INDEX-2,588" />usage.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.2. Outputting Image Data</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">13.4. Additional GD Modules</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>