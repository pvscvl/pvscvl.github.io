<?label 7.4. Bookmarklets?><html><head><title>Bookmarklets (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch08_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">7.4. Bookmarklets</h2>


<p>We'll end this chapter with a much less common use of
<a name="INDEX-1633" />
<a name="INDEX-1634" />JavaScript:
<em class="emphasis">bookmarklets</em>. Bookmarklets are JavaScript
<a name="INDEX-1635" />URLs that have been saved as
bookmarks. The basic concept behind bookmarklets has been around
since JavaScript was first created, but it has been slowly growing in
popularity since Steve Kangas first coined the term
<em class="firstterm">bookmarklet</em> and created a web site devoted to
them at <a href="../../../../../../www.bookmarklets.com/">http://www.bookmarklets.com/</a>. Many people
consider bookmarklets a novelty, but they have a much greater
potential. Bookmarklets really shine when they are combined with
custom CGI scripts, which is why they are of interest to us.</p>


<a name="ch07-10-fm2xml" /><div class="sect2">
<h3 class="sect2">7.4.1. Bookmarklet Basics</h3>


<p>First, let's see how bookmarklets work. Bookmarklets are much
easier to show than to explain, so let's look at the
world's most popular program, "Hello World," as a
bookmarklet. The source for it is as follows:</p>


<blockquote><pre class="code">javascript:alert("Hello world!")</pre></blockquote>


<p>If you were to type this into your browser as a location, it would
display the alert shown in <a href="ch07_04.htm">Figure 7-4</a>.</p>


<a name="ch07-68588" /><div class="figure"><img width="368" src="figs/cgi2.0704.gif" height="105" alt="Figure 7-4" /></div><h4 class="objtitle">Figure 7-4. Result from our "Hello World" bookmarklet</h4>

<p>You can enter this directly into your browser because this simple
program is also a valid URL. The <em class="emphasis">javascript</em> scheme tells browsers, which
support it, that they should interpret the rest of the URL as
JavaScript code in the context of the current web page and return the
result as a new web page. You can also create hyperlinks that have
this format. If you were to embed the following into an HTML web
page, then you could click on the link to get the alert as well:</p>


<blockquote><pre class="code">&lt;A HREF='javascript:alert("Hello world!")'&gt;Run Script&lt;/A&gt;</pre></blockquote>


<p>However, neither of these examples are actually bookmarklets until
you save the URL as a bookmark in your <a name="INDEX-1636" />browser. Doing so is
browser-specific, of course. Most browsers allow you to click on a
hyperlink with your right mouse button and choose an option to save
the link as a bookmark. Once you have done this, you have captured
the script as a bookmarklet that you can run whenever you want by
choosing it from your list of bookmarks.</p>


<p>Let's look at a more complicated example. We have referenced
RFCs several times thus far. Let's make a bookmarklet that
allows you to look up a particular RFC. In this case,
<a name="INDEX-1637" /> <a name="INDEX-1,638" />we'll use <a href="../../../../../../www.faqs.org/rfc/">http://www.faqs.org/rfc/</a> as the RFC
repository.</p>


<p>Here is how we might write the JavaScript for this:</p>


<blockquote><pre class="code">rfcNum = prompt( "RFC Number: ", "" );
if ( rfcNum == parseInt( rfcNum ) )
    open( "http://www.faqs.org/rfc/" + rfcNum + ".html" );
else if ( rfcNum )
    alert( "Invalid number." );</pre></blockquote>


<p>We ask the user for an RFC number. If the user enters an integer, we
open a new browser window to fetch the corresponding RFC. Note that
we don't handle the case in which the RFC doesn't exist;
the user will simply get a 404 error from the www.faqs.org web server. However, if the user
enters a value that isn't a number, we do report that error to
them. If the user enters nothing or clicks Cancel, we do nothing.</p>


<p>Now let's convert to this to a bookmarklet. First, we must need
to make sure we do not return any values from our code. If the code
in your bookmarklet returns a value, some browsers (including
Netscape's) will replace the current page with the value. You
will confuse users if, for example, they get an empty page with a
<tt class="literal">[null]</tt> in the top left corner every time they use
your bookmarklet. The easiest way to avoid returning a value is to
use the <tt class="function">void</tt> function. It takes any value as an
argument and returns nothing. We can wrap the
<tt class="function">void</tt> function around the last statement that
returns a value, or simply append it to the end. We'll do the
latter because in this script there are three different lines that
could be executed last, depending on the user's entry. So we
add the following line to the end of our script:</p>


<blockquote><pre class="code">void( 0 );</pre></blockquote>


<p>Next, we <em class="emphasis">should</em> need to remove or encode any
characters that are not valid within a URL. This includes whitespace
and the following characters: <tt class="literal">&lt;</tt>,
<tt class="literal">&gt;</tt>, <tt class="literal">#</tt>, <tt class="literal">%</tt>,
<tt class="literal">"</tt>, <tt class="literal">{</tt>, <tt class="literal">}</tt>,
<tt class="literal">|</tt>, <tt class="literal">\</tt>, <tt class="literal">^</tt>,
<tt class="literal">[</tt>, <tt class="literal">]</tt>,
<tt class="literal">`</tt>.<a href="#FOOTNOTE-11">[11]</a> However,
<a name="INDEX-1639" />
<a name="INDEX-1640" />
<a name="INDEX-1641" />Netscape
Communicator 4.x will not recognize encoded syntax elements (such as
brackets) within JavaScript URLs. So although it means that
bookmarklets containing these characters are invalid URLs, if you
want your bookmarklets to work with Netscape's browsers, you
must leave these characters unencoded. Other browsers accepts these
characters encoded or unencoded. In any event, you should remove any
unnecessary whitespace.</p><blockquote>

<a name="FOOTNOTE-11" /><p>[11]Control and non-ASCII
characters are invalid as well, but these values must be escaped
within JavaScript anyhow. Also, you may notice that this list is
different than the list provided in <a href="ch02_01.htm">Section 2.1.3, "URL Encoding"</a>.
That list is for HTTP URLs, so it includes characters that have
special significance to HTTP. JavaScript URLs are different than HTTP
URLs, so this list includes only characters considered illegal for
all URLs.</p>

</blockquote>


<p>Finally, we prefix our code with <tt class="literal">javascript:</tt>, and
we get the following:</p>


<blockquote><pre class="code">javascript:rfcNum=prompt('RFC%20Number:','');if(rfcNum==parseInt(rfcNum))
open('http://www.faqs.org/rfc/'+rfcNum+'.html');else if(rfcNum)
alert('Invalid%20number.');void(0);</pre></blockquote>


<p>The line endings are not part of the URL but have been added to allow
it to fit on the page.</p>


<p>There is one more thing that you should keep in mind when working
with bookmarklets. Bookmarklets execute in the same scope as the
frontmost page displayed in the user's browser. This has a
number of advantages as we will see in the next section, <a href="ch07_04.htm">Section 7.4.2, "Bookmarklets and CGI"</a>. The disadvantage is that you must be
careful that the code you create does not conflict with other code
that is on the current page. You should be especially careful with
variable names and create names that are very unlikely to appear on
other web sites.
<a name="INDEX-1642" /> <a name="INDEX-1,643" />Variables are case-sensitive in
JavaScript; using odd combinations of capitalization in variables is
a good idea. In our last example, <tt class="literal">rFcNuM</tt> may have
been a better (though less readable) choice as a variable name.</p>


<a name="ch07-42535" /><div class="sect3">
<h3 class="sect3">7.4.1.1. Compatibility</h3>


<p>Because <a name="INDEX-1644" /> <a name="INDEX-1,645" />bookmarklets use JavaScript, they
are not compatible with all web browsers. Some browsers that support
JavaScript, such as
<a name="INDEX-1646" />Microsoft Internet Explorer 3.0 do
not support bookmarklets. Other browsers impose limitations on
bookmarklets. Unless you're distributing your bookmarklets as
unsupported novelties, you should do extensive testing. Bookmarklets
use JavaScript in a less than traditional manner, so test them with
as many different versions of as many different browsers on as many
different platforms as you can.</p>


<p>You should also keep your bookmarklets short. Some browsers do not
impose a limit on the length of a URL; others limit URLs to 255
characters. This can even vary by platform: for example, Communicator
4.x allows only 255 characters on MacOS while it allows much longer
URLs on Win32.</p>


<p>One of the features that some users of bookmarklets promote is that
bookmarklets avoid some of JavaScript's browser incompatibility
issues. Because Netscape and Microsoft have different implementations
of JavaScript, if you want to create a bookmarklet that uses
incompatible features of each, you can create two different
bookmarklets instead of one bookmarklet that attempts to support both
browsers. Then people can choose the bookmarklet that is appropriate
to their browser. The problem with this approach is that Netscape and
Microsoft are not the sole distributors of web browsers. Although
these two companies create the majority of browsers on the web, there
are other high-quality browsers that also support JavaScript and
bookmarklets, such as Opera, and these browsers are growing in
popularity. If you start supporting specific browsers, you may find
yourself needing to choose which browsers to support and which users
you are willing to loose. Hopefully, ECMAScript and DOM will quickly
provide standards across all browsers.</p>
</div>
</div>




<a name="ch07-53404" /><div class="sect2">
<h3 class="sect2">7.4.2. Bookmarklets and CGI</h3>


<p>So what do bookmarklets provide us as <a name="INDEX-1647" /> <a name="INDEX-1,648" /> <a name="INDEX-1,649" />CGI developers?
Bookmarklets can do anything that JavaScript can do including
displaying dialog boxes, creating new browser windows, and generating
new HTTP requests. Furthermore, because they execute in the context
of the browser's frontmost window, they can interact with
objects or information in this window without the security
restrictions that an HTML window from your site would encounter.
Thus, bookmarklets provide a very different or even transparent
interface to our CGI scripts.</p>


<p>Let's look at an example. Say that you want to be able to
create and store comments for web pages as you surf that you can
retrieve when you visit the web pages later. We can do this with a
simple bookmarklet and CGI script. First, let's create the CGI
script.</p>


<p>Our CGI script needs to do two things. It needs to accept a URL and a
<a name="INDEX-1650" />comment
and record them. It also needs to be able to retrieve a comment when
given a particular URL. <a href="ch07_04.htm">Example 7-6</a> provides the
code.</p>



<a name="ch07-76654" /><div class="example">
<h4 class="objtitle">Example 7-6. comments.cgi </h4>
<a name="INDEX-1651" />
<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;

use CGI;
use DB_File;
use Fcntl qw( :DEFAULT :flock );

my $DBM_FILE = "/usr/local/apache/data/bookmarklets/comments.dbm";

my $q       = new CGI;
my $url     = $q-&gt;param( "url" );
my $comment;

if ( defined $q-&gt;param( "save" ) ) {
    $comment = $q-&gt;param( "comment" ) || "";
    save_comment( $url, $comment );
}
else {
    $comment = get_comment( $url );
}

print $q-&gt;header( "text/html" ),
      $q-&gt;start_html( -title =&gt; $url, -bgcolor =&gt; "white" ),
      $q-&gt;start_form( { action =&gt; "/cgi/bookmarklets/comments.cgi" } ),
      $q-&gt;hidden( "url" ),
      $q-&gt;textarea( -name =&gt; "comment", -cols =&gt; 20, -rows =&gt; 8, -value =&gt; $comment ),
      $q-&gt;div( { -align =&gt; "right" },
          $q-&gt;submit( -name =&gt; "save", -value =&gt; "Save Comment" )
      ),
      $q-&gt;end_form,
      $q-&gt;end_html;


sub get_comment {
    my( $url ) = @_;
    my %dbm;
    local *DB;
    
    my $db = tie %dbm, "DB_File", $DBM_FILE, O_RDONLY | O_CREAT or
        die "Unable to read from $DBM_FILE: $!";
    my $fd = $db-&gt;fd;
    open DB, "+&lt;&amp;=$fd" or die "Cannot dup DB_File file descriptor: $!\n";
    flock DB, LOCK_SH;
    my $comment = $dbm{$url};
    undef $db;
    untie %dbm;
    close DB;
    return $comment;
}


sub save_comment {
    my( $url, $comment ) = @_;
    my %dbm;
    local *DB;
    
    my $db = tie %dbm, "DB_File", $DBM_FILE, O_RDWR | O_CREAT or
        die "Unable to write to $DBM_FILE: $!";
    my $fd = $db-&gt;fd;
    open DB, "+&lt;&amp;=$fd" or die "Cannot dup DB_File file descriptor: $!\n";
    flock DB, LOCK_EX;
    $dbm{$url} = $comment;
    undef $db;
    untie %dbm;
    close DB;
}</pre></blockquote>
</div>


<p>We use a disk-based hash called a DBM file in order to store comments
and URLs. The <em class="emphasis">tie</em>
<a name="INDEX-1652" /> function associates a Perl hash with
the file; then anytime we read from or write to the hash, Perl
automatically performs the corresponding action on the associated
file. We will <a name="INDEX-1653" />cover how to use DBM files in more
detail in <a href="ch10_01.htm">Chapter 10, "Data Persistence"</a>.</p>


<p>The
<a name="INDEX-1654" />JavaScript that we will use to
call this CGI script is as follows:</p>


<blockquote><pre class="code">url = document.location.href;
open( "http://localhost/cgi/bookmarklets/comments.cgi?url=" + escape( url ),
      url, "width=300,height=300,toolbar=no,menubar=no" );
void( 0 );</pre></blockquote>


<p>As a <a name="INDEX-1655" />bookmarklet, it looks like this:</p>


<blockquote><pre class="code">javascript:dOc_uRl=document.location.href;open('http://localhost/cgi/bookmarklets
comments.cgi?url='+escape(dOc_uRl),dOc_uRl,'width=300,height=300,toolbar=no,
menubar=no');void( 0 )</pre></blockquote>


<p>If you save this bookmarklet, visit a web site, and select the
bookmarklet from your bookmarks, your browser should display another
window. Enter a comment and save it. Then browse other pages and do
the same if you wish. If you return to the first page and select the
bookmarklet again, you should see your original comment for that
page, as in <a href="ch07_04.htm">Figure 7-5</a>. Note that the comments
window will not update itself each time you travel to another page.
You will need to select the bookmarklet each time you want to read or
save comment for a page you are on.</p>


<a name="ch07-79956" /><div class="figure"><img width="253" src="figs/cgi2.0705.gif" height="132" alt="Figure 7-5" /></div><h4 class="objtitle">Figure 7-5. Updating a comment to comment.cgi via a bookmarklet</h4>

<p>If you were to distribute this bookmarklet to friends, the comments
would be shared and you could see what each other has to say about
various web sites. The CGI script could also be placed in a secure
directory and be extended to maintain separate databases for each
user; you may want users to only be able to read other users'
comments.</p>


<p>We would not have been able to build an application like this with a
standard HTML page due to JavaScript's
<a name="INDEX-1656" />security
restrictions. One HTML page cannot access objects in another HTML
page if the two pages are from different domains (i.e., different web
servers), so our comment form cannot determine the URL of any other
browser windows. However, bookmarklets circumvent this restriction.
Browsers allow this because the user must actively choose to run a
bookmarklet in order for it to execute.</p>


<p>There are numerous other ways that you can put bookmarklets to use.
You can see many examples of <a name="INDEX-1657" />
<a name="INDEX-1658" />bookmarklets that use existing
Internet resources at <a href="../../../../../../www.bookmarklets.com/">http://www.bookmarklets.com</a>. Many of these
are novelties, but bookmarklets can do more. Bookmarklets are most
powerful when you have goods or services that can take advantage of
accessing information on other sites as people surf. For example,
companies such as the Better Business Bureau could offer bookmarklets
that users can select when they are on another site to see how that
site has been rated. Companies that sell add-on products or services
like warranties can provide users with a bookmarklet that users can
select when they are going to make <a name="INDEX-1659" />a purchase online. <a name="INDEX-1,660" /> <a name="INDEX-1,661" /> <a name="INDEX-1,662" />Other possibilities
are <a name="INDEX-1663" />
<a name="INDEX-1664" />up to you
to <a name="INDEX-1665" />create.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch08_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">7.3. Data Exchange</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">8. Security</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>