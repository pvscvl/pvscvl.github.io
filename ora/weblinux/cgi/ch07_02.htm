<?label 7.2. Forms?><html><head><title>Forms (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">7.2. Forms</h2>


<p>Probably the most popular use for JavaScript with web applications is
to improve HTML <a name="INDEX-1528" />forms. Standard HTML forms
aren't very smart. They simply accept input and pass it on to
the web server where all the processing must occur. With JavaScript,
however, we can do much more on the client side. JavaScript can
validate input before it is sent to the server. Forms can also
dynamically react to user input and update fields in order to provide
immediate feedback to the user; a dynamic form can often substitute
for multiple static forms.</p>


<p>The benefit JavaScript provides for the server is that it shifts some
work that might otherwise be done on the server to the client, and it
reduces the number of server requests. The benefit JavaScript
provides to the user is that it provides immediate feedback without a
delay while the browser fetches a new page.</p>


<a name="ch07-3-fm2xml" /><div class="sect2">
<h3 class="sect2">7.2.1. Input Validation</h3>


<p>When you <a name="INDEX-1529" /> <a name="INDEX-1,530" /> <a name="INDEX-1,531" /> <a name="INDEX-1,532" />create an HTML form, you generally
expect the user to fill it out in a particular way. There are
numerous types of restrictions a form may have. For example, some of
the fields may only accept numbers while others may only accept
dates, some fields may only accept a certain range of entries, some
fields may be required, and some combinations of fields may not
permitted. All of these examples must be handled by only two types of
checks: the first is to validate each element user's input as
the data is entered; the second is to perform the validation when the
form is submitted.</p>


<a name="ch07-4-fm2xml" /><div class="sect3">
<h3 class="sect3">7.2.1.1. Validating elements</h3>


<p>Checking a <a name="INDEX-1533" />
<a name="INDEX-1534" />
<a name="INDEX-1535" />form
element when the user enters a value is most effective for validating
the format or range of a particular element. For example, if a field
only accepts numbers, you can verify that the user did not enter any
non-numeric characters.</p>


<p>To perform this check, we use the
<tt class="function">onChange</tt>
<a name="INDEX-1536" /> event handler. This handler supports
the following form elements: <a name="INDEX-1537" />
<a name="INDEX-1538" /> <a name="INDEX-1,539" />Text, TextArea, Password, File
Upload, and <a name="INDEX-1540" />Select. For each of these elements, we can
register an <tt class="function">onChange</tt> handler and assign it code
to execute when the element changes. We register it simply by adding
it as an attribute to the <a name="INDEX-1541" />HTML tag that creates the element. For
example:</p>


<blockquote><pre class="code">&lt;INPUT TYPE="text" name="age" onChange="checkAge( this );"&gt;</pre></blockquote>


<p>This runs the function
<tt class="function">checkAge</tt>
<a name="INDEX-1542" /> and passes it a reference to
itself via <tt class="literal">this</tt>. <tt class="function">checkAge</tt>
looks like this:</p>


<blockquote><pre class="code">function checkAge ( element ) {
    if ( element.value != parseInt( element.value ) ||
         element.value &lt; 1 || element.value &gt; 150 ) {
        alert( "Please enter a number between 1 and 150 for age." );
        element.focus(  );
        return false;
    }
    return true;
}</pre></blockquote>


<p>This function checks that the age entered is an integer and between 1
and 150 (sorry if you happen to be 152, but we have to draw the line
somewhere).</p>


<p>If <tt class="function">checkAge </tt>determines that the input is
invalid, it displays an alert asking the user to enter the value
again (<a href="ch07_02.htm">Figure 7-1</a>), and moves the cursor back to
the age field via <tt class="literal">element.focus(
)</tt>
<a name="INDEX-1543" />
<a name="INDEX-1544" />. It then returns true or false
depending on whether the check was successful or not. This
isn't necessary, but it does help us if we later decide to
string multiple function calls together as you'll see later in
<a href="ch07_02.htm">Example 7-2</a>.</p>


<a name="ch07-86604" /><div class="figure"><img width="368" src="figs/cgi2.0701.gif" height="130" alt="Figure 7-1" /></div><h4 class="objtitle">Figure 7-1. JavaScript alert</h4>

<p>Note that we don't need to call a function to handle
<tt class="function">onChange</tt>. We can assign multiple statements
directly to the
<tt class="function">onChange</tt>
<a name="INDEX-1545" /> handler. However, it's often much
easier to work with HTML documents when the JavaScript is kept
together as much as possible, and functions help us to do this. They
also allow us to share code when we have multiple form elements that
require the same validation. For functions that you use often, you
can go a step further and place these in a JavaScript file that you
can include in multiple HTML files. We'll see an example of
this in <a href="ch07_02.htm">Figure 7-2</a>.</p>
</div>



<a name="ch07-5-fm2xml" /><div class="sect3">
<h3 class="sect3">7.2.1.2. Validating submits</h3>


<p>The other way that we
<a name="INDEX-1546" />
<a name="INDEX-1547" /> <a name="INDEX-1,548" />can perform
data validation is to do so just before the form is submitted. This
is the best time to check whether required fields have been filled or
to perform checks that involve dependencies between multiple
elements. We perform this check with JavaScript's
<tt class="function">onSubmit</tt>
<a name="INDEX-1549" />
<a name="INDEX-1550" />
<a name="INDEX-1551" /> handler.</p>


<p><em class="emphasis">onSubmit</em> works like the
<tt class="function">onChange</tt> handler except that it is added as an
attribute of the &lt;FORM&gt; tag:</p>


<blockquote><pre class="code">&lt;FORM METHOD="POST" ACTION="/cgi/register.cgi" onSubmit="return checkForm(this);"&gt;</pre></blockquote>


<p>There's another difference you may notice. The
<tt class="function">onSubmit</tt> handler returns the value of the code
that it calls. If the <tt class="function">onSubmit</tt> handler returns
false, it cancels the submission of the form after the handler code
has run. In any other case, the form submission continues. Return
values have no effect on the <tt class="function">onChange</tt> handler.</p>


<p>Here is the function that <a name="INDEX-1552" />checks our form:</p>


<blockquote><pre class="code">function checkForm ( form ) {
    if ( form["age"].value == "" ) {
        alert( "Please enter your age." );
        return false;
    }
    return true;
}</pre></blockquote>


<p>This example simply verifies that a value was entered for age.
Remember, our <tt class="function">onChange</tt> handler is not enough to
do this because it is only run when the value for age changes. If the
user never fills in a value for age, the
<tt class="function">onChange</tt> handler will never be called. This is
why we check for required values with <tt class="function">onSubmit</tt>.</p>
</div>



<a name="ch07-6-fm2xml" /><div class="sect3">
<h3 class="sect3">7.2.1.3. Validation example</h3>


<p>Let's look at a <a name="INDEX-1553" /> <a name="INDEX-1,554" />complete
example. It seems that more and more web sites want users to register
and provide lots of personal information in order to use their web
site. We'll create a slightly exaggerated version of a
registration form (<a href="ch07_02.htm">Figure 7-2</a>).</p>


<a name="ch07-45880" /><div class="figure"><img width="481" src="figs/cgi2.0702.gif" height="398" alt="Figure 7-2" /></div><h4 class="objtitle">Figure 7-2. Our sample 
user registration form</h4>

<p>Note that this form applies only to United States residents. In
practice, Internet users come from around the world, so you must be
flexible with your validation to accommodate the various
international formats for phone numbers, postal codes, etc. However,
since the purpose of this example is to demonstrate validation,
we'll restrict the formats to one set that can be easily
validated. The required formats for phone numbers and social security
numbers are shown. In addition, the zip code is a five-digit postal
code.</p>


<p>The HTML is shown in <a href="ch07_02.htm">Example 7-1</a>.</p>



<a name="ch07-57105" /><div class="example">
<h4 class="objtitle">Example 7-1. input_validation.html </h4>
<a name="INDEX-1557" /><a name="INDEX-1,558" />

<blockquote><pre class="code">&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;User Registration&lt;/title&gt;
    &lt;script src="/js-lib/formLib.js"&gt;&lt;/script&gt;
    &lt;script&gt;&lt;!--
      function validateForm ( form ) {
          
          requiredText = new Array( "name", "address", "city", "zip",
                                    "home_phone", "work_phone", "age",
                                    "social_security", "maiden_name" );
          
          requiredSelect = new Array( "state", "education" );
          requiredRadio  = new Array( "gender" );
          
          return requireValues ( form, requiredText   ) &amp;&amp;
                 requireSelects( form, requiredSelect ) &amp;&amp;
                 requireRadios ( form, requiredRadio  ) &amp;&amp;
                 checkProblems (  );
      }
    // --&gt;
    &lt;/script&gt;
  &lt;/head&gt;
  
  &lt;body bgcolor="#ffffff"&gt;
    
    &lt;h2&gt;User Registration Form&lt;/h2&gt;
    
    &lt;p&gt;Hi, in order for you to access our site, we'd like first to get as
      much personal information as we can from you in order to sell to other
      companies. You don't mind, do you? Great! Then please fill this out as
      accurately as possible.&lt;/p&gt;
    
    &lt;p&gt;Note this form is for U.S. residents only. Others should use the
      &lt;a href="intl_registration.html"&gt;International Registration
      Form&lt;/a&gt;.&lt;/p&gt;
    
    &lt;hr&gt;
    
    &lt;form method="POST" action="/cgi/register.cgi"
      onSubmit="return checkValues( this, requiredText ) &amp;&amp; checkMenus"&gt;
    &lt;form method="GET" onSubmit="return validateForm( this );"&gt;
      &lt;table border=0&gt;
        &lt;tr&gt;&lt;td&gt;
            Name:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="name" size="30" maxlength="30"&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Address:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="address" size="40" maxlength="50"&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            City:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="city" size="20" maxlength="20"&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            State:
          &lt;/td&gt;&lt;td&gt;
            &lt;select name="state" size="1"&gt;
              &lt;option value=""&gt;Please Choose a State&lt;/option&gt;
              &lt;option value="AL"&gt;Alabama&lt;/option&gt;
              &lt;option value="AK"&gt;Alaska&lt;/option&gt;
              &lt;option value="AZ"&gt;Arizona&lt;/option&gt;
                  .
                  .
                  .
              &lt;option value="WY"&gt;Wyoming&lt;/option&gt;
            &lt;/select&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Zip Code:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="zip" size="5" maxlength="5"
                onChange="checkZip( this );"&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Home Phone Number:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="home_phone" size="12" maxlength="12"
              onChange="checkPhone( this );"&gt;
            &lt;i&gt;(please use this format: 800-555-1212)&lt;/i&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Work Phone Number:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="work_phone" size="12" maxlength="12"
              onChange="checkPhone( this );"&gt;
            &lt;i&gt;(please use this format: 800-555-1212)&lt;/i&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Social Security Number (US residents only):
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="social_security" size="11" maxlength="11"
              onChange="checkSSN( this );"&gt;
            &lt;i&gt;(please use this format: 123-45-6789)&lt;/i&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Mother's Maiden Name:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="maiden_name" size="20" maxlength="20"&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Age:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="text" name="age" size="3" maxlength="3"
              onChange="checkAge( this );"&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Gender:
          &lt;/td&gt;&lt;td&gt;
            &lt;input type="radio" name="gender" value="male"&gt; Male
            &lt;input type="radio" name="gender" value="female"&gt; Female
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;&lt;td&gt;
            Highest Education:
          &lt;/td&gt;&lt;td&gt;
            &lt;select name="education" size="1"&gt;
              &lt;option value=""&gt;Please Choose a Category&lt;/option&gt;
              &lt;option value="grade"&gt;Grade School&lt;/option&gt;
              &lt;option value="high"&gt;High School Graduate (or GED)&lt;/option&gt;
              &lt;option value="college"&gt;Some College&lt;/option&gt;
              &lt;option value="junior"&gt;Technical or Junior College Degree&lt;/option&gt;
              &lt;option value="bachelors"&gt;Four Year College Degree&lt;/option&gt;
              &lt;option value="graduate"&gt;Post Graduate Degree&lt;/option&gt;
            &lt;/select&gt;
          &lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;
          &lt;td colspan=2 align=right&gt;
            &lt;input type="submit"&gt;
          &lt;/td&gt;&lt;/tr&gt;
      &lt;/table&gt;
    &lt;/form&gt;
    
  &lt;/body&gt;
&lt;/html&gt;</pre></blockquote>
</div>


<p>You don't see much JavaScript here because most of it is in
<a name="INDEX-1559" />
<a name="INDEX-1560" />a
separate file that is included with the following pair of tags on
line 5:</p>


<blockquote><pre class="code">&lt;script src="/js-lib/formLib.js" &gt;&lt;/script&gt;</pre></blockquote>


<p>The contents of <em class="emphasis">formLib.js</em>
<a name="INDEX-1561" />
<a name="INDEX-1562" /> <a name="INDEX-1,563" /> are shown in <a href="ch07_02.htm">Example 7-2</a>.</p>



<a name="ch07-17670" /><div class="example">
<h4 class="objtitle">Example 7-2. formLib.js </h4>

<blockquote><pre class="code">// formLib.js
// Common functions used with forms
// 

// We use this as a hash to track those elements validated on a per element
// basis that have formatting problems
validate = new Object(  );


// Takes a value, checks if it's an integer, and returns true or false
function isInteger ( value ) {
    return ( value == parseInt( value ) );
}


// Takes a value and a range, checks if the value is in the range, and
// returns true or false
function inRange ( value, low, high ) {
    return ( !( value &lt; low ) &amp;&amp; value &lt;= high );
}


// Checks values against formats such as '#####' or '###-##-####'
function checkFormat( value, format ) {
    var formatOkay = true;
    if ( value.length != format.length ) {
        return false;
    }
    for ( var i = 0; i &lt; format.length; i++ ) {
        if ( format.charAt(i) == '#' &amp;&amp; ! isInteger( value.charAt(i) ) ) {
            return false;
        }
        else if ( format.charAt(i) != '#' &amp;&amp;
                  format.charAt(i) != value.charAt(i) ) {
            return false;
        }
    }
    return true;
}


// Takes a form and an array of element names; verifies that each has a value
function requireValues ( form, requiredValues ) {
    for ( var i = 0; i &lt; requiredValues.length; i++ ) {
        element = requiredText[i];
        if ( form[element].value == "" ) {
            alert( "Please enter a value for " + element + "." );
            return false;
        }
    }
    return true;
}


// Takes a form and an array of element names; verifies that each has an
// option selected (other than the first; assumes that the first option in
// each select menu contains instructions)
function requireSelects ( form, requiredSelect ) {
    for ( var i = 0; i &lt; requiredSelect.length; i++ ) {
        element = requiredSelect[i];
        if ( form[element].selectedIndex &lt;= 0 ) {
            alert( "Please select a value for " + element + "." );
            return false;
        }
    }
    return true;
}


// Takes a form and an array of element names; verifies that each has a
// value checked
function requireRadios ( form, requiredRadio ) {
    for ( var i = 0; i &lt; requiredRadio.length; i++ ) {
        element = requiredRadio[i];
        isChecked = false;
        for ( j = 0; j &lt; form[element].length; j++ ) {
            if ( form[element][j].checked ) {
                isChecked = true;
            }
        }
        if ( ! isChecked ) {
            alert( "Please choose a " + form[element][0].name + "." );
            return false;
        }
    }
    return true;
}


// Verify there are no uncorrected formatting problems with elements
// validated on a per element basis
function checkProblems (  ) {
    for ( element in validate ) {
        if ( ! validate[element] ) {
            alert( "Please correct the format of " + element + "." );
            return false;
        }
    }
    return true;
}


// Verifies that the value of the provided element has ##### format
function checkZip ( element ) {
    if ( ! checkFormat( element.value, "#####" ) ) {
        alert( "Please enter a five digit zip code." );
        element.focus(  );
        validate[element.name] = false;
    }
    else {
        validate[element.name] = true;
    }
    return validate[element.name];
}


// Verifies that the value of the provided element has ###-###-#### format
function checkPhone ( element ) { 
    if ( ! checkFormat( element.value, "###-###-####" ) ) {
        alert( "Please enter " + element.name + " in 800-555-1212 " +
               "format." );
        element.focus(  );
        validate[element.name] = false;
    }
    else {
        validate[element.name] = true;
    }
    return validate[element.name];
}


// Verifies that the value of the provided element has ###-##-#### format
function checkSSN ( element ) {
    if ( ! checkFormat( element.value, "###-##-####" ) ) {
        alert( "Please enter your Social Security Number in " +
               "123-45-6789 format." );
        element.focus(  );
        validate[element.name] = false;
    }
    else {
        validate[element.name] = true;
    }
    return validate[element.name];
}


// Verifies that the value of the provided element is an integer between 1 and 150
function checkAge ( element ) {
    if ( ! isInteger( element.value ) ||
         ! inRange( element.value, 1, 150 ) ) {
        alert( "Please enter a number between 1 and 150 for age." );
        element.focus(  );
        validate[element.name] = false;
    }
    else {
        validate[element.name] = true;
    }
    return validate[element.name];
}</pre></blockquote>
</div>


<p>We use both types of validation in this example: validating
<a name="INDEX-1564" />elements as they are entered and
validating the form as a whole when it is submitted. We create a
<tt class="literal">validate</tt> object that we use like a Perl hash.
Whenever we validate an element, we add the name of this element to
the <tt class="literal">validate</tt> object and set it to true or false
depending on whether the element has the correct format. When the
form is <a name="INDEX-1565" />
<a name="INDEX-1566" />submitted,
we later loop over each element in <tt class="literal">validate</tt> to
determine if there are any elements that had formatting problems and
were not fixed.</p>


<p>The <a name="INDEX-1567" />functions that handle
specific field validation are <tt class="function">checkZip</tt>,
<tt class="function">checkPhone</tt>, <tt class="function">checkSSN</tt>, and
<tt class="function">checkAge</tt>. They are called by the
<tt class="function">onChange</tt>
<a name="INDEX-1568" /> handler for each of these form
elements and the functions appear at the bottom of
<em class="filename">formLib.js</em>. Each of these functions use the more
general functions <tt class="function">isInteger</tt>,
<tt class="function">isRange</tt>, or <tt class="function">checkFormat</tt> to
check the formatting of the element they are validating.
<tt class="function">isInteger</tt> and <tt class="function">isRange</tt> are
simple checks that return whether a value is an integer or whether it
is within a particular numeric range.</p>


<p><tt class="function">checkFormat</tt>
<a name="INDEX-1569" /> takes a value as well as a
string containing a format to check the value against. The structure
of our format string is quite simple: a pound symbol represents a
numeric digit and any other character represents itself. Of course,
in Perl we could easily do checks like this with a regular
expression. For example, we could match social security number with
<tt class="literal">/^\d\d\d-\d\d-\d\d\d\d$/</tt>. Fortunately, JavaScript
1.2 also supports <a name="INDEX-1570" />regular expressions. Unfortunately, there
are still many <a name="INDEX-1571" />browsers on the Internet that only support
JavaScript 1.1, most notably Internet Explorer 3.0.</p>


<p>When the form is submitted, the <tt class="function">onSubmit</tt> handler
calls the <tt class="function">validateForm</tt> function. This function
builds an array of elements such as text boxes that require values,
an array of select list elements that require a selection, and an
array of radio button group elements that require a checked value.
These lists are passed to <tt class="function">requireValues</tt>,
<tt class="function">requireSelects</tt>, and
<tt class="function">requireRadios</tt>, respectively, which verify that
these elements have been filled in by the user.</p>


<p>Finally, the
<tt class="function">checkProblems</tt>
<a name="INDEX-1572" /> function loops over the
properties in the validate object and returns a boolean value
indicating whether there are any elements that still have formatting
problems. If <tt class="function">requireValues</tt>,
<tt class="function">requireSelects</tt>,
<tt class="function">requireRadios</tt>, or
<tt class="function">checkProblems</tt> fail, then they display an
appropriate message to the user and return false, which cancels the
submission of the form. Otherwise, the form is submitted to the CGI
script which handles the query like any other request. In this case,
the CGI script would record the data in a file or database. We
won't look at the CGI script here, although we will discuss
saving data like this 
<a name="INDEX-1573" /> <a name="INDEX-1,574" /> <a name="INDEX-1,575" />on the <a name="INDEX-1,576" /> <a name="INDEX-1,577" />server in <a href="ch10_01.htm">Chapter 10, "Data Persistence"</a>.</p>
</div>



<a name="ch07-7-fm2xml" /><div class="sect3">
<h3 class="sect3">7.2.1.4. Validating twice</h3>


<p>Note that we said that the <a name="INDEX-1578" />
<a name="INDEX-1579" />CGI script would handle a request coming
from a page with JavaScript validation just like it would handle any
other request. When you do data validation with JavaScript,
there's an important maxim you need to keep in mind:
<em class="emphasis">Never rely on the client to do your data validation for
you.
</em>
<a name="INDEX-1580" />When you develop CGI scripts, you
should <em class="emphasis">always</em> validate the data you receive,
whether the data is coming from a form that performs JavaScript
validation or not. Yes, this means that we are performing the same
function twice. The theory behind this is that you should never trust
data that comes from the client without checking it yourself. As we
mentioned earlier, JavaScript may be supported by the user's
browser or it may be turned off. Thus, you cannot rely on JavaScript
validation being performed. For a more detailed discussion of why it
is a bad idea to trust the user, refer to <a href="ch08_01.htm">Chapter 8, "Security"</a>.</p>


<p>Thus, we may often write our data validation code twice, once in
JavaScript for the client, and again in our CGI script. Some may
argue that it is poor design to write the same code twice, and they
are right in that avoiding duplicate code is a good principle of
designing maintainable code. However, in this situation, we can
provide two counter-arguments.</p>


<p>First, we need to do data validation in the CGI script because it is
also good programming practice for each component to validate its
input. The JavaScript code is part of the client user interface; it
receives data from the user and validates it in preparation for
sending it to the server. It sends the data on to the CGI script, but
the CGI script must again validate that the input it receives is in
the proper format because the it doesn't know (nor should it
care) what processing the client did or did not do on its end.
Similarly, if our CGI script then calls a database, the database will
again validate the input that we sent on to it, etc.</p>


<p>Second, we gain much by doing JavaScript validation because it lets
us validate as close to the user as possible. If we perform data
validation on the client using JavaScript, we avoid unnecessary
network connections because if JavaScript notices an invalid entry,
it can immediately notify the user who can correct the form before it
is submitted. Otherwise, the client must submit the form to the
server, a CGI script must validate the input and return a page
reporting the error and allowing the user to fix the problem. If
there are multiple errors, it may take a few tries to get it right.</p>


<p>In many cases, performing the extra check with JavaScript is worth
the trade-off. When deciding whether to use JavaScript validation
yourself, consider how often you expect the interface and the format
of the data to change and how much extra effort is involved in
maintaining JavaScript validation code in addition to CGI script
validation code. You <a name="INDEX-1581" /> <a name="INDEX-1,582" /> <a name="INDEX-1,583" /> <a name="INDEX-1,584" />can then weigh this <a name="INDEX-1,585" />effort against the
convenience to the user.</p>
</div>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch07_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch07_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">7. JavaScript</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">7.3. Data Exchange</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>