<?label 1.2. Introduction to CGI?><html><head><title>Introduction to CGI (CGI Programming with Perl)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Scott Guelich, Gunther Birznieks and Shishir Gundavaram" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924193L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="CGI Programming with Perl" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="CGI Programming with Perl" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">CGI Programming with Perl</a></td><td width="172" valign="top" align="right"><a href="ch01_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">1.2. Introduction to CGI</h2>



<p>CGI can do so much because it is so simple. CGI is a very lightweight
interface; it is essentially the minimum that the web server needs to
provide in order to allow external processes to create web pages.
Typically, when a web server gets a request for a static web page,
the web server finds the corresponding HTML file on its filesystem.
When a web server gets a request for a CGI script, the web server
executes the CGI script as another process (i.e., a separate
application); the server passes this process some parameters and
collects its output, which it then returns to the client just as if
had been fetched from a static file (see <a href="ch01_02.htm">Figure 1-1</a>).</p>



<a name="ch01-81668" /><div class="figure"><img width="456" src="figs/cgi2.0101.gif" height="159" alt="Figure 1-1" /></div><h4 class="objtitle">Figure 1-1. How a CGI application is executed</h4>

<p>
<a name="INDEX-11" />
<a name="INDEX-12" />So how does the whole interface work?
We'll spend the remainder of the book answering this question
in more detail, but let's take a basic look now.</p>



<p>Web browsers request dynamic resources such as CGI scripts the same
way they request any other resource on the Web: they send a message
formatted according to the <em class="firstterm">Hypertext Transport
Protocol</em>, or <em class="emphasis">HTTP</em>. We'll
discuss HTTP in <a href="ch02_01.htm">Chapter 2, "The Hypertext Transport Protocol "</a>. An HTTP
request includes a <em class="firstterm">Universal Resource Locator</em>,
or <em class="firstterm">URL</em>, and by looking at the URL, the web
server determines which resource to return. Typically, CGI scripts
share a common directory, like <em class="filename">/cgi</em>, or a
filename extension, like <em class="filename">.cgi</em>. If the web server
recognizes that the request is for a CGI script, it executes the
script.</p>



<p>Say you wanted to visit the URL,
<em class="emphasis">http://www.mikesmechanics.com/cgi/welcome.cgi</em>. At
its most basic, <a href="ch01_02.htm">Example 1-1</a> shows a sample HTTP
request your web browser might send.</p>




<a name="ch01-80955" /><div class="example">
<h4 class="objtitle">Example 1-1. Sample HTTP Request </h4>


<blockquote><pre class="code">GET /cgi/welcome.cgi HTTP/1.1
Host: www.mikesmechanics.com</pre></blockquote>
</div>



<p>This GET request identifies the resource to retrieve as <em class="emphasis">/cgi/welcome.cgi</em>. Assuming our server recognizes all files in the
<em class="emphasis">/cgi</em> directory tree as CGI scripts, it understands that it should
execute the <em class="filename">welcome.cgi</em> script instead of
returning its contents directly to the browser.</p>



<p>CGI programs get their input from <a name="INDEX-13" />standard input (<tt class="literal">STDIN</tt>)
and <a name="INDEX-14" />
<a name="INDEX-15" />environment variables. These
<a name="INDEX-16" />variables contain
information such as the identity of the remote host and user, the
value of form elements submitted (if any), etc. They also store the
server name, the communication protocol, and the name of the software
running the server. We'll look at each one of these in more
detail in <a href="ch03_01.htm">Chapter 3, "The Common Gateway Interface"</a>.</p>



<p>Once the CGI program starts running, it sends its output back to the
web server via <a name="INDEX-17" /> <a name="INDEX-18" />
<a name="INDEX-19" />standard output (<tt class="literal">STDOUT</tt>).
In <a name="INDEX-20" />
<a name="INDEX-21" />Perl, this is easy to do because by
default, anything you <tt class="function">print</tt> goes to
<tt class="literal">STDOUT</tt>. <a name="INDEX-22" />CGI scripts can either return their
own output as a new document or provide a new URL to forward the
request elsewhere. CGI scripts print a special line formatted
according to
<a name="INDEX-23" />HTTP headers to indicate this to
the web server. We'll look at these headers in the next
chapter, but here is a sample of what a CGI script returning HTML
would output:</p>



<blockquote><pre class="code">Content-type: text/html</pre></blockquote>



<p>CGI scripts actually can return extra header lines if they choose, so
to indicate that it has finished sending headers, a CGI script prints
a blank line. Finally, if it is outputting a document, it prints the
contents of that document, too.</p>



<p>The web server takes the output of the CGI script and adds its own
HTTP headers before sending it back to the browser of the user who
requested it. <a href="ch01_02.htm">Example 1-2</a> shows a sample
<a name="INDEX-24" />
<a name="INDEX-25" /> <a name="INDEX-26" />response that a web browser would
receive from the web server.</p>



<a name="ch01-94693" /><div class="example">
<h4 class="objtitle">Example 1-2. Sample HTTP Response </h4>


<blockquote><pre class="code">HTTP/1.1 200 OK
Date: Sat, 18 Mar 2000 20:35:35 GMT
Server: Apache/1.3.9 (Unix)
Last-Modified: Wed, 20 May 1998 14:59:42 GMT
ETag: "74916-656-3562efde"
Content-Length: 2000
Content-Type: text/html

&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;Welcome to Mike's Mechanics Database&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR="#ffffff"&gt;
  &lt;IMG SRC="/images/mike.jpg" ALT="Mike's Mechanics"&gt;
  &lt;P&gt;Welcome from dyn34.my-isp.net! What will you find here? You'll
    find a list of mechanics from around the country and the type of
    service to expect -- based on user input and suggestions.&lt;/P&gt;
  &lt;P&gt;What are you waiting for? Click &lt;A HREF="/cgi/list.cgi"&gt;here&lt;/A&gt;
    to continue.&lt;/P&gt;
  &lt;HR&gt;
  &lt;P&gt;The current time on this server is: Sat Mar 18 10:28:00 2000.&lt;/P&gt;
  &lt;P&gt;If you find any problems with this site or have any suggestions,
    please email &lt;A HREF="mailto:webmaster@mikesmechanics.com"&gt;
    webmaster@mikesmechanics.com&lt;/A&gt;.&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre></blockquote>
</div>



<p>The <a name="INDEX-27" />
<a name="INDEX-28" />header contains the
communication protocol, the date and time of the response, the server
name and version, the last time the document was modified, an entity
tag used for caching, the length of the response, and the
<a name="INDEX-29" />
<a name="INDEX-30" />media type of the document -- in this
case, a text document formatted with HTML. Headers like these are
returned with all responses from web servers, and we'll look at
HTTP headers in more detail in the next chapter. However, note that
nothing here indicates to the browser whether this response came from
the contents of a <a name="INDEX-31" /> <a name="INDEX-32" /> <a name="INDEX-33" />static HTML file or whether it was generated
dynamically by a CGI script. This is as it should be; the browser
asked the web server for a resource, and it received a resource. It
doesn't care where the document came from or how the web server
generated it.</p>



<p>CGI allows you to generate output that doesn't look any
different to the end user than other responses on the Web. This
flexibility allows you to generate anything with a CGI script that
the web server could get from a file, including HTML documents, plain
text documents, PDF files, or even images like PNGs or GIFs.
We'll look at how to create dynamic images in <a href="ch13_01.htm">Chapter 13, "Creating Graphics on the Fly"</a>.</p>



<a name="ch01-2-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.1. Sample CGI</h3>



<p>Let's look at a sample <a name="INDEX-34" />CGI application, written in Perl,
that creates the dynamic output we just saw in <a href="ch01_02.htm">Example 1-2</a>. This program, shown in <a href="ch01_02.htm">Example 1-3</a>, determines where the user is connecting from
and then creates a simple <a name="INDEX-35" />HTML document
containing this information, along with the current time. In the next
several chapters, we'll see how to use various CGI modules to
make creating such an application even easier; for now, however, we
will keep it straightforward.</p>




<a name="ch01-77893" /><div class="example">
<h4 class="objtitle">Example 1-3. welcome.cgi </h4>


<blockquote><pre class="code">#!/usr/bin/perl -wT

use strict;

my $time        = localtime;
my $remote_id   = $ENV{REMOTE_HOST} || $ENV{REMOTE_ADDR};
my $admin_email = $ENV{SERVER_ADMIN};

print "Content-type: text/html\n\n";

print &lt;&lt;END_OF_PAGE;
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;Welcome to Mike's Mechanics Database&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR="#ffffff"&gt;
  &lt;IMG SRC="/images/mike.jpg" ALT="Mike's Mechanics"&gt;
  &lt;P&gt;Welcome from $remote_host! What will you find here? You'll
    find a list of mechanics from around the country and the type of
    service to expect -- based on user input and suggestions.&lt;/P&gt;
  &lt;P&gt;What are you waiting for? Click &lt;A HREF="/cgi/list.cgi"&gt;here&lt;/A&gt;
    to continue.&lt;/P&gt;
  &lt;HR&gt;
  &lt;P&gt;The current time on this server is: $time.&lt;/P&gt;
  &lt;P&gt;If you find any problems with this site or have any suggestions,
    please email &lt;A HREF="mailto:$admin_email"&gt;$admin_email&lt;/A&gt;.&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
END_OF_PAGE</pre></blockquote>
</div>



<p>This program is quite simple. It contains only six
<a name="INDEX-36" />commands, although
the last one is many lines long. Let's take a look at how it
works. Because this script is our first and is short, we'll
look at it line by line; but as mentioned in the Preface, this book
does assume that you are already familiar with Perl. So if you do not
know Perl well or if your Perl is a little rusty, you may want to
have a Perl reference available to consult as you read this book. We
recommend <em class="citetitle">Programming Perl, Third Edition,</em> by
Larry Wall, Tom Christiansen, and Jon Orwant (O'Reilly &amp;
Associates, Inc.); not only is it the standard Perl tome, but it also
has a convenient alphabetical description of Perl's built-in
functions.</p>



<p>The first line of the program looks like the top of most Perl
scripts. It tells the server to use the program at
<em class="filename">/usr/bin/perl</em> to interpret and execute this
script. You may not recognize the flags, however: the
<tt class="command">-wT</tt>
<a name="INDEX-37" /> <a name="INDEX-38" />
<a name="INDEX-39" /> <a name="INDEX-40" />
<a name="INDEX-41" /> flags tell Perl to turn on warnings
and taint checking. Warnings help locate subtle problems that may not
generate syntax errors; enabling this is optional, but it is a very
helpful feature. Taint checking should not be considered optional:
unless you like living dangerously, you should enable this feature
with all of your CGI scripts. We will discuss taint checking more in
<a href="ch08_01.htm">Chapter 8, "Security"</a>.</p>



<p>The command 
<a name="INDEX-42" /> <a name="INDEX-43" />
<a name="INDEX-44" />
<a name="INDEX-45" />
<a name="INDEX-46" /><tt class="function">use strict</tt> tells
Perl to enable strict rules for variables, subroutines, and
references. If you haven't used this command before, you should
get into the habit of using it with your
<a name="INDEX-47" />CGI scripts. Like warnings,
it helps locate subtle mistakes, such as typos, that might not
otherwise generate a syntax error. Furthermore, the
<em class="emphasis">strict</em> pragma encourages good programming
practices by forcing you to declare
<a name="INDEX-48" />
<a name="INDEX-49" />variables and
reduce the number of global variables. This produces code that is
more maintainable. Finally, as we will see in <a href="ch17_01.htm">Chapter 17, "Efficiency and Optimization"</a>, the <em class="emphasis">strict</em> pragma is
essentially required by
<a name="INDEX-50" />
<a name="INDEX-51" />FastCGI and
<em class="emphasis">mod_perl</em>. If you think you might migrate to
either of these technologies in the future, you should begin using
<em class="emphasis">strict</em> now.</p>



<p>Now we start the real work. First, we set three variables. The first
variable, <tt class="literal">$time</tt>, is set to a string representing
the current date and time. The second variable,
<tt class="literal">$remote_id</tt>, is set to the identity of the remote
machine requesting this page, and we get this information from the
<a name="INDEX-52" />
<a name="INDEX-53" />environment
variables REMOTE_HOST or REMOTE_ADDR. As we mentioned earlier, CGI
scripts get all of their information from the web server from
environment variables and STDIN. REMOTE_HOST contains the full
<a name="INDEX-54" />domain
name of the remote machine, but only if reverse domain name lookups
have been enabled for the web server -- otherwise, it is blank. In
this case, we use REMOTE_ADDR instead, which contains the
<a name="INDEX-55" />IP
address of the remote machine. The final variable,
<tt class="literal">$admin_email</tt>, is set to SERVER_ADMIN, which
contains the email address of the server's administrator
according to the server's configuration files. These are just a
few environment variables available to CGI scripts. We'll
review these three in more detail along with the rest in <a href="ch03_01.htm">Chapter 3, "The Common Gateway Interface"</a>.</p>



<p>As we saw earlier, if a CGI script wants to return a new document, it
must first output an
<a name="INDEX-56" />HTTP
header declaring the type of
<a name="INDEX-57" />document it is returning. It does this
and prints an additional blank line to indicate that it has finished
sending headers. It then prints the body of the document.</p>



<p>Instead of using a
<tt class="function">print</tt>
<a name="INDEX-58" />
<a name="INDEX-59" /> statement to send each line to
standard output separately, we use a "here" document,
which allows us to print a block of text at once. This is a standard
Perl feature that's admittedly a little esoteric; you may not
be familiar with this if you have not done other forms of shell
programming. This command tells Perl to print all of the following
lines until it encounters the <tt class="literal">END_OF_PAGE</tt> token on
its own line. It treats the text as if it were enclosed in
<a name="INDEX-60" />
<a name="INDEX-61" />double quotes, so
the variables are evaluated, but double quotes do not need to be
escaped. Not only do "here" documents save us from a lot
of extra typing, but they also make the program easier to read.
However, there are even better ways of outputting HTML, as
we'll see in <a href="ch05_01.htm">Chapter 5, "CGI.pm"</a>, and <a href="ch06_01.htm">Chapter 6, "HTML Templates"</a>.</p>



<p>That's all there is to our script, so at this point it exits;
the web server adds additional HTTP headers and returns the response
to the client as we saw in <a href="ch01_02.htm">Example 1-2</a>. This was
just a simple example of a CGI script, and don't worry if you
have questions or are unsure about a particular detail. As our
numerous references to later chapters indicate, we'll spend the
rest of the book filling in the details.</p>
</div>








<a name="ch01-3-fm2xml" /><div class="sect2">
<h3 class="sect2">1.2.2. Invoking CGI Scripts</h3>



<p>
<a name="INDEX-62" /> <a name="INDEX-63" />
<a name="INDEX-64" />
<a name="INDEX-65" />CGI
scripts have their own URLs, just like HTML documents and other
resources on the Web. The server is typically
<a name="INDEX-66" />configured to map a particular
virtual directory (a directory contained within a URL) to CGI
scripts, such as <em class="filename">/cgi-bin</em>,
<em class="filename">/cgi</em>, <em class="filename">/scripts</em>, etc.
Generally, both the location for CGI scripts on the server's
filesystem and the corresponding URL path can be overridden in the
server's configuration. We will see how to do this for the
Apache web server a little later in <a href="ch01_04.htm">Section 1.4.1, "Configuring CGI Scripts"</a>.</p>



<p>On <a name="INDEX-67" /> <a name="INDEX-68" />Unix, the
file<a name="INDEX-69" />system
differentiates between files that are executable and those that are
not. CGI scripts must be executable. Assuming you have a Perl file
that you have named <em class="filename">my_script.cgi</em>, you would
issue the following
<a name="INDEX-70" /> <a name="INDEX-71" />command from the shell to make a file
executable:</p>



<blockquote><pre class="code">chmod 0755 my_script.cgi</pre></blockquote>



<p>Forgetting this step is a common problem. On other operating systems,
you may have to enable other settings to enable scripts to run. Refer
to the documentation for your web server.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch01_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">1. Getting Started </td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">1.3. Alternative Technologies</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>