<?label 8.8. Rewrite?><html><head><title>Rewrite (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="ch08_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">8.8. Rewrite</h2>





<p>
<a name="INDEX-843" />
<a name="INDEX-844" /> <a name="INDEX-845" />
<a name="INDEX-846" />
<a name="INDEX-847" />
<a name="INDEX-848" /> <a name="INDEX-849" />The preceding section described
the <tt class="function">alias</tt> module and its allies. Everything
these directives can do, and more, can be done instead by
<em class="filename">mod_rewrite.c</em>, an extremely compendious module
that is almost a complete software product in its own
right.<a href="#FOOTNOTE-53">[53]</a> The
documentation is thorough, and the reader is referred to
<em class="emphasis">http://www.
engelschall.com/pw/apache/rewriteguide/</em> for any serious
work. This section is intended for orientation only.</p><blockquote>




<a name="FOOTNOTE-53" /><p>[53]But for simple tasks <tt class="literal">Alias</tt>
and friends are much easier to use.</p>




</blockquote>





<p><tt class="literal">Rewrite</tt> takes a <em class="emphasis">rewriting pattern</em> and applies it to
the URL. If it matches, a <em class="emphasis">rewriting substitution</em>
is applied to the URL. The patterns are regular expressions familiar to us all in their simplest form; for example,
<tt class="literal">mod.*\.c</tt><em class="emphasis">,</em> which matches any
module filename. The complete science of regular expressions is
somewhat extensive, and the reader is referred to<em class="filename"> ...
/src/regex/regex.7</em>, a manpage that can be read with
<tt class="literal">nroff</tt> <tt class="literal">-man</tt>
<tt class="literal">regex.7</tt> (on FreeBSD, at least). Regular
expressions are also described in the POSIX specification and in
Jeffrey Friedl's <em class="emphasis">Mastering Regular
Expressions</em> (O'Reilly &amp; Associates). The essence
of regular expressions is that a number of special characters can be
used to match parts of incoming URLs.</p>





<p>The substitutions can include mapping functions that take bits of the
incoming URL and look them up in databases or even apply programs to
them. The rules can be applied repetitively and recursively to the
evolving URL. It is possible (as the documentation says) to create
"rewriting loops, rewriting breaks, chained rules, pseudo
if-then-else constructs, forced redirects, forced MIME-types, forced
proxy module throughout." The functionality is so extensive
that it is probably impossible to master it in the abstract. When and
if you have a problem of this sort, it looks as if
<em class="filename">mod_rewrite</em> can solve it, given enough
intellectual horsepower on your part!</p>





<p>The module can be used in four situations:</p>





<ul><li><p>By the administrator inside the server Config file to apply in all
contexts. The rules are applied to all URLs of the main server and
all URLs of the virtual servers.</p></li><li><p>By the administrator inside &lt;<tt class="literal">VirtualHost&gt;</tt>
blocks. The rules are applied only to the URLs of the virtual server.</p></li><li><p>By the administrator inside <tt class="literal">&lt;Directory&gt;</tt>
blocks. The rules are applied only to the specified directory.</p></li><li><p>By users in their <em class="filename">.htaccess</em> files. The rules are
applied only to the specified directory.</p></li></ul>
<p>
<a name="INDEX-850" />The
directives look simple enough.</p>





<a name="ch08-3-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.1. RewriteEngine</h3>





<blockquote><pre class="code">RewriteEngine on_or_off
Server config, virtual host, directory</pre></blockquote>





<p>
<a name="INDEX-851" />Enables or disables the rewriting
engine. If <tt class="literal">off</tt>, no rewriting is done at all. Use
this directive to switch off functionality rather than commenting out
<tt class="literal">Rewrite-Rule</tt> lines.</p>
</div>
















<a name="ch08-4-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.2. RewriteLog</h3>





<blockquote><pre class="code"><a name="INDEX-852" />
<a name="INDEX-853" />RewriteLog <em class="replaceable">filename</em>
Server config, virtual host</pre></blockquote>





<p>Sends logging to the specified <em class="replaceable">filename</em>.
If the name does not begin with a slash, it is taken to be relative
to the server root. This directive should appear only once in a
Config file.</p>
</div>
















<a name="ch08-5-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.3. RewriteLogLevel</h3>





<blockquote><pre class="code"><a name="INDEX-854" />RewriteLogLevel <em class="replaceable">number</em>
Default <em class="replaceable">number</em>: 0
Server config, virtual host</pre></blockquote>





<p>Controls the verbosity of the logging: <tt class="literal">0</tt> means no
logging, and <tt class="literal">9</tt> means that almost every action is
logged. Note that a number above 2 slows Apache down.</p>
</div>
















<a name="ch08-6-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.4. RewriteMap</h3>





<blockquote><pre class="code"><a name="INDEX-855" />RewriteMap <em class="replaceable">mapname</em> {txt,dbm,prg,rnd,int}: <em class="replaceable">filename</em>
Server config, virtual host</pre></blockquote>





<p>Defines an external <em class="replaceable">mapname</em> file that
inserts substitution strings through key lookup. The module passes
<em class="replaceable">mapname</em>  a query in
the form:</p>





<blockquote><pre class="code">$(<em class="replaceable">mapname</em> : <em class="replaceable">Lookupkey</em> | <em class="replaceable">DefaultValue</em>)</pre></blockquote>





<p>If the <em class="replaceable">Lookupkey</em> value is not found,
<em class="replaceable">DefaultValue</em> is returned.</p>





<p>The type of <em class="replaceable">mapname</em> must be specified by
the next argument:</p>





<dl>
<dt><b><tt class="literal">txt </tt></b></dt>
<dd><p>Indicates plain-text format, that is, an ASCII file with blank lines,
comments that begin with "<tt class="literal">#</tt>", or
useful lines, in the format:</p>





<blockquote><pre class="code"><em class="replaceable">MatchingKey SubstituteValue</em></pre></blockquote></dd>






<dt><b><tt class="literal">dbm</tt></b></dt>
<dd><p>Indicates DBM hashfile format, that is, <a name="INDEX-856" />a binary NDBM (the "new"
 <em class="emphasis">dbm</em> interface, now about 15 years old, also used
for <em class="emphasis">dbm</em> auth) file containing the same material
as the plain-text format file. You create it with any
<em class="emphasis">ndbm</em> tool or by using the Perl script
<em class="filename">dbmmanage</em> from the support directory of the
Apache distribution.</p></dd>





<dt><b><tt class="literal">prg</tt> </b></dt>
<dd><p>Indicates program format, that is, an executable (a compiled program
or a CGI script) that is started by Apache. At each lookup, it is
passed the key as a string terminated by newline on stdin and returns
the substitution value, or the word <tt class="literal">NULL</tt> if lookup
fails, in the same way on stdout. The manual gives two warnings:</p>





<ul><li><p>Keep the program or script simple because if it hangs, it hangs the
Apache server.</p></li><li><p>Don't use buffered I/O on stdout because it causes a deadlock.
In C, use:</p>




<blockquote><pre class="code">setbuf(stdout,NULL)</pre></blockquote>




<p>In Perl, use:</p>




<blockquote><pre class="code">select(STDOUT); $|=1;]</pre></blockquote></li></ul></dd>






<dt><b><tt class="literal">rnd</tt> </b></dt>
<dd><p>Indicates randomized plain text, which is similar to the standard
plain-text variant but has a special postprocessing feature: after
looking up a value, it is parsed according to contained
"|" characters that have the meaning of "or".
In other words, they indicate a set of alternatives from which the
actual returned value is chosen randomly. Although this sounds crazy
and useless, it was actually designed for load balancing in a reverse
proxy situation, in which the looked-up values are server
names -- each request to a reverse proxy is routed to a randomly
selected server behind it.</p></dd>





<dt><b><tt class="literal">int</tt> </b></dt>
<dd><p>Indicates an internal Apache function. Two functions exist:
<tt class="literal">toupper()</tt><tt class="function"> </tt>and
<tt class="literal">tolower()</tt>, which convert the looked-up key to all
uppercase or all lowercase.<a name="INDEX-857" /></p></dd>

</dl>
</div>
















<a name="ch08-7-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.5. RewriteBase</h3>





<blockquote><pre class="code">RewriteBase <em class="replaceable">BaseURL</em>
Directory, .htaccess</pre></blockquote>





<p>
<a name="INDEX-858" />
<a name="INDEX-859" />The
effects of this command can be fairly easily achieved by using the
rewrite rules, but it may sometimes be simpler to encapsulate the
process. It explicitly sets the base URL for per-directory rewrites.
If <tt class="literal">RewriteRule</tt> is used in an
<em class="filename">.htaccess</em> file, it is passed a URL that has had
the local directory stripped off so that the rules act only on the
remainder. When the substitution is finished, <tt class="literal">RewriteBase
</tt> supplies the necessary prefix. To quote the manual's
example:</p>





<blockquote><pre class="code">RewriteBase   /xyz
RewriteRule   ^oldstuff\.html$  newstuff.html</pre></blockquote>





<p>In this example, a request to <em class="filename">/xyz/oldstuff.html</em>
gets rewritten to the physical file
<em class="filename">/abc/def/newstuff.html</em>. Internally, the
following happens:</p>





<ol><li><p>Request: <em class="filename"> /xyz/oldstuff.html</em></p></li><li><p>Internal processing:</p>




<blockquote><pre class="code">/xyz/oldstuff.html     -&gt; /abc/def/oldstuff.html  (per-server Alias)
/abc/def/oldstuff.html -&gt; /abc/def/newstuff.html  (per-dir    RewriteRule)
/abc/def/newstuff.html -&gt; /xyz/newstuff.html      (per-dir    RewriteBase)
/xyz/newstuff.html     -&gt; /abc/def/newstuff.html  (per-server Alias)</pre></blockquote></li><li><p>Result: <em class="replaceable">/abc/def/newstuff.html</em></p></li></ol>
</div>
















<a name="ch08-8-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.6. RewriteCond</h3>





<blockquote><pre class="code">RewriteCond <em class="replaceable">TestString</em> <em class="replaceable">CondPattern</em>
Server config, virtual host, directory</pre></blockquote>





<p>One or more
<tt class="literal">RewriteCond</tt>
<a name="INDEX-860" /> <a name="INDEX-861" /> directives can precede a
<tt class="literal">RewriteRule</tt> directive to define conditions under
which it is to be applied. <em class="replaceable">CondPattern</em> is
a regular expression matched against the value retrieved for
<em class="replaceable">TestString</em>, which contains server
variables of the form
<tt class="literal">%{</tt><em class="replaceable">NAME_OF_VARIABLE</em><tt class="literal">}</tt>,
where <em class="replaceable">NAME_OF_VARIABLE</em> can be one of the
following list:</p>





<a name="ch08-9-fm2xml" /><table border="1">


<tr>
<td>
<p><tt class="literal">API_VERSION</tt></p></td>
<td>
<p><tt class="literal">PATH_INFO</tt></p></td>
<td>
<p><tt class="literal">SERVER_PROTOCOL</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">AUTH_TYPE</tt></p></td>
<td>
<p><tt class="literal">QUERY_STRING</tt></p></td>
<td>
<p><tt class="literal">SERVER_SOFTWARE </tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">DOCUMENT_ROOT</tt></p></td>
<td>
<p><tt class="literal">REMOTE_ADDR</tt></p></td>
<td>
<p><tt class="literal">THE_REQUEST</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">ENV:any_environment_variable</tt></p></td>
<td>
<p><tt class="literal">REMOTE_HOST</tt></p></td>
<td>
<p><tt class="literal">TIME</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP_ACCEPT</tt></p></td>
<td>
<p><tt class="literal">REMOTE_USER</tt></p></td>
<td>
<p><tt class="literal">TIME_DAY</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP_COOKIE</tt></p></td>
<td>
<p><tt class="literal">REMOTE_IDENT</tt></p></td>
<td>
<p><tt class="literal">TIME_HOUR </tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP_FORWARDED</tt></p></td>
<td>
<p><tt class="literal">REQUEST_FILENAME</tt></p></td>
<td>
<p><tt class="literal">TIME_MIN</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP_HOST</tt></p></td>
<td>
<p><tt class="literal">REQUEST_METHOD</tt></p></td>
<td>
<p><tt class="literal">TIME_MON</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP_PROXY_CONNECTION</tt></p></td>
<td>
<p><tt class="literal">REQUEST_URI</tt></p></td>
<td>
<p><tt class="literal">TIME_SEC</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP_REFERER</tt></p></td>
<td>
<p><tt class="literal">SCRIPT_FILENAME</tt></p></td>
<td>
<p><tt class="literal">TIME_WDAY</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP_USER_AGENT</tt></p></td>
<td>
<p><tt class="literal">SERVER_ADMIN</tt></p></td>
<td>
<p><tt class="literal">TIME_YEAR</tt></p></td>
</tr>




<tr>
<td>
<p><tt class="literal">HTTP:any_HTTP_header</tt></p></td>
<td>
<p><tt class="literal">SERVER_NAME</tt></p></td>
<td />
</tr>




<tr>
<td>
<p><tt class="literal">IS_SUBREQ</tt></p></td>
<td>
<p><tt class="literal">SERVER_PORT</tt></p></td>
<td />
</tr>





</table>

<p>These variables all correspond to the similarly named HTTP MIME
headers, C variables of the Apache server, or the current time. If
the regular expression does not match, the
<tt class="literal">RewriteRule</tt> following it does not apply.</p>
</div>
















<a name="ch08-10-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.7. RewriteRule</h3>





<blockquote><pre class="code">RewriteRule <em class="replaceable">Pattern Substitution</em> [<em class="replaceable">flags</em>]
Server config, virtual host, directory</pre></blockquote>





<p>This <a name="INDEX-862" />directive can be used as many times as
necessary. Each occurrence applies the rule to the output of the
preceding one, so the order matters.
<em class="replaceable">Pattern</em> is matched to
the incoming URL; if it succeeds, the
<em class="replaceable">Substitution</em> is made. An optional
argument, <em class="replaceable">flags</em>, can
be given. The flags, which follow, can be abbreviated to one or two
letters:</p>





<dl>
<dt><b><tt class="literal">redirect|R</tt></b></dt>
<dd><p> Force redirect.</p></dd>





<dt><b><tt class="literal">proxy|P</tt></b></dt>
<dd><p>Force proxy.</p></dd>





<dt><b><tt class="literal">last|L </tt></b></dt>
<dd><p>Last rule: Go to top of rule with current URL.</p></dd>





<dt><b><tt class="literal">chain|C</tt></b></dt>
<dd><p>Apply following chained rule if this rule matches.</p></dd>





<dt><b><tt class="literal">type|T=</tt><em class="replaceable">mime-type</em></b></dt>
<dd><p>Force target file to be <em class="replaceable">mime-type.</em></p></dd>





<dt><b><tt class="literal">nosubreq|NS</tt></b></dt>
<dd><p>Skip rule if it is an internal subrequest.</p></dd>





<dt><b><tt class="literal">env|E=VAR:VAL</tt></b></dt>
<dd><p>Set an environment variable.</p></dd>





<dt><b><tt class="literal">qsappend|QSA</tt></b></dt>
<dd><p>Append a query string.</p></dd>





<dt><b><tt class="literal">passthrough|PT</tt></b></dt>
<dd><p>Pass through to next handler.</p></dd>





<dt><b><tt class="literal">skip|S=</tt><em class="replaceable">num</em></b></dt>
<dd><p>Skip the next <em class="replaceable">num</em><em class="filename">
</em>rules.</p></dd>





<dt><b><tt class="literal">next|N</tt></b></dt>
<dd><p>Next round -- start at the top of the rules again.</p></dd>





<dt><b><tt class="literal">gone|G</tt></b></dt>
<dd><p>Returns HTTP response 410 -- "URL Gone."</p></dd>





<dt><b><tt class="literal">forbidden|F</tt></b></dt>
<dd><p>Returns HTTP response 403 -- "URL Forbidden."</p></dd>

</dl>





<p>For example, say we want to rewrite URLs of the form:</p>





<blockquote><pre class="code">/Language/~Realname/.../File</pre></blockquote>





<p>into:</p>





<blockquote><pre class="code">/u/Username/.../File.Language</pre></blockquote>





<p>We take the rewrite map file given previously and save it under
<em class="filename">/anywhere/map.real-to-user</em>. Then we only have to
add the following lines to the Apache server Config file:</p>





<blockquote><pre class="code">RewriteLog   /anywhere/rewrite.log 
RewriteMap   real-to-user  txt:/anywhere/map.real-to-host 
RewriteRule  ^/([^/]+)/~([^/]+)/(.*)$   /u/${real-to-user:$2|nobody}/$3.$1</pre></blockquote>
</div>
















<a name="ch08-11-fm2xml" /><div class="sect2">
<h3 class="sect2">8.8.8. A Rewrite Example</h3>





<p>
<a name="INDEX-863" />
<a name="INDEX-864" />The
Butterthlies salespeople seem to be taking their jobs more seriously.
Our range has increased so much that the old catalog based around a
single HTML script is no longer workable because there are too many
cards. We have built a database of cards and a utility called
<em class="filename">cardinfo</em> that accesses it using the arguments:</p>





<blockquote><pre class="code">cardinfo <em class="replaceable">cardid query</em></pre></blockquote>





<p>where <em class="replaceable">cardid</em> is the number of the card,
and <em class="replaceable">query</em> is one of the following words:
"price," "artist," or "size." The
problem is that the salespeople are too busy to remember the syntax,
so we want to let them log onto the card database as if it were a web
site. For instance, going to
<em class="emphasis">http://sales.butterthlies.com/info/2949/price</em>
would return the price of card number 2949. The Config file is in
<em class="filename">... /site.rewrite
</em>:<a name="INDEX-865" /></p>





<blockquote><pre class="code">User webuser
Group webgroup
# Apache requires this server name, although in this case it will 
# never be used.
# This is used as the default for any server that does not match a
# VirtualHost section.
ServerName www.butterthlies.com

NameVirtualHost 192.168.123.2

&lt;VirtualHost www.butterthlies.com&gt;
ServerAdmin sales@butterthlies.com
DocumentRoot /usr/www/site.rewrite/htdocs/customers
ServerName www.butterthlies.com
ErrorLog /usr/www/site.rewrite/logs/customers/error_log
TransferLog /usr/www/site.rewrite/logs/customers/access_log
&lt;/VirtualHost&gt;

&lt;VirtualHost sales.butterthlies.com&gt;
ServerAdmin sales_mgr@butterthlies.com
DocumentRoot /usr/www/site.rewrite/htdocs/salesmen
Options ExecCGI indexes
ServerName sales.butterthlies.com
ErrorLog /usr/www/site.rewrite/logs/salesmen/error_log
TransferLog /usr/www/site.rewrite/logs/salesmen/access_log
RewriteEngine on
RewriteLog logs/rewrite
RewriteLogLevel 9
RewriteRule ^/info/([^/]+)/([^/]+)$   /cgi-bin/cardinfo?$2+$1 [PT]
ScriptAlias /cgi-bin /usr/www/cgi-bin
&lt;/VirtualHost&gt;</pre></blockquote>





<p>In real life <em class="filename">cardinfo</em> would be an elaborate
program. However, here we just have to show that it could work, so it
is extremely simple:</p>





<blockquote><pre class="code">#!/bin/sh
#
echo "content-type: text/html"
echo sales.butterthlies.com
echo "You made the query $1 on the card $2"</pre></blockquote>





<p>To make sure everything is in order before we do it for real, we turn
<tt class="literal">RewriteEngine</tt> <tt class="literal">off </tt>and access
<em class="emphasis">http://sales.butterthlies.com/cgi-bin/cardinfo.</em>
We get back the following message:</p>





<blockquote><pre class="code">The requested URL /info/2949/price was not found on this server.</pre></blockquote>





<p>This is not surprising. We now turn <tt class="literal">RewriteEngine</tt>
<tt class="literal">on</tt> and look at the crucial line in the Config
file, which is:</p>





<blockquote><pre class="code">RewriteRule ^/info/([^/]+)/([^/]+)$ /cgi-bin/cardinfo?$2+$1 [PT]</pre></blockquote>





<p>Translated into English this means the following: at the start of the
string, match <tt class="literal">/info/</tt>, followed by one or more
characters that aren't "<tt class="literal">/</tt>", and
put those characters into the variable <tt class="literal">$1</tt> (the
parentheses do this; <tt class="literal">$1</tt> because they are the first
set). Then match a "<tt class="literal">/</tt>", then one or
more characters aren't "<tt class="literal">/</tt>", and
put those characters into <tt class="literal">$2</tt>. Then match the end
of the string and pass the result through <tt class="literal">[PT]</tt> to
the next rule, which is <tt class="literal">ScriptAlias</tt>. We end up as
if we had accessed
<em class="emphasis">http://sales.butterthlies.com/cgi-bin/cardinfo?&lt;card
ID&gt;+&lt;query&gt;.</em></p>





<p>If the CGI script is on a different web server for some reason, we
could write:</p>





<blockquote><pre class="code">RewriteRule ^/info/([^/]+)/([^/]+)$ http://somewhere.else.com/cgi-bin/
    cardinfo/$2+$1[PT]</pre></blockquote>





<p>Note that this pattern won't match
<em class="emphasis">/info/123/price/fred</em>, because it has too many
slashes in it.</p>





<p>If we run all this with <tt class="literal">./go</tt>, and access
<em class="emphasis">http://sales.butterthlies.com/info/2949/price
</em>from the client, we see the following message:<a name="INDEX-866" /> <a name="INDEX-867" /></p>





<blockquote><pre class="code">You made the query price on card 2949<a name="INDEX-868" />
<a name="INDEX-869" />
<a name="INDEX-870" />
<a name="INDEX-871" />
<a name="INDEX-872" />
<a name="INDEX-873" />
<a name="INDEX-874" /></pre></blockquote>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch08_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">8.7. RedirectMatch</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">8.9. Speling</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>