<?label 4.4. Useful Scripts?><html><head><title>Useful Scripts (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">4.4. Useful Scripts</h2>





<p>
<a name="INDEX-470" />When we fill in an order form and hit
the Submit Query button, we simply get the heartening message:</p>





<blockquote><pre class="code">Have a nice day</pre></blockquote>





<p>because the <tt class="literal">ACTION</tt> specified at the top of the
form is to run the script <em class="emphasis">mycgi.cgi</em> and all it
does is to echo that friendly phrase to the screen.</p>





<p>
<a name="INDEX-471" />
<a name="INDEX-472" />
<a name="INDEX-473" />We can
make <em class="filename">mycgi.cgi</em> more interesting by making it
show us what is going on between Apache and the CGI script.
Let's add the line <tt class="literal">env</tt>, which calls the Unix
utility that prints out all the environment variables, or add the
Win32 equivalent, <tt class="literal">set</tt>. Remember that you
can't use <tt class="literal">echo</tt> to produce a blank line in
Win32, so you have to produce a file, called
<em class="emphasis">new1</em> here, that contains just a RETURN and then
type it:</p>






<p><img src="figs/unix_icon.gif" alt="Figure 4.4" />   </p>




<blockquote><pre class="code">#!/bin/sh
echo "content-type: text/plain"
echo
env</pre></blockquote>





<p><img src="figs/win32_icon.gif" alt="Figure 4.4" />   </p>




<blockquote><pre class="code">echo "content-type: text/plain"
type newl
echo
set</pre></blockquote>





<p>Now on the client side we see a screen full of data:</p>





<blockquote><pre class="code">GATEWAY_INTERFACE=CGI/1.1
CONTENT_TYPE=application/x-www-form-urlencoded
REMOTE_HOST=192.168.123.1
REMOTE_ADDR=192.168.123.1
QUERY_STRING=
DOCUMENT_ROOT=/usr/www/site.cgi/htdocs
HTTP_USER_AGENT=Mozilla/3.0b7 (Win95; I)
HTTP_ACCEPT=image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*
HTTP_ACCEPT_LANGUAGE=
CONTENT_LENGTH=74
SCRIPT_FILENAME=/usr/www/cgi-bin/mycgi
HTTP_HOST=www.butterthlies.com
SERVER_SOFTWARE=Apache/1.3
HTTP_PRAGMA=no-cache
HTTP_CONNECTION=Keep-Alive
HTTP_COOKIE=Apache=192257840095649803<a href="#FOOTNOTE-37">[37]</a> 
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
HTTP_REFERER=http://www.butterthlies.com/form_summer.html
SERVER_PROTOCOL=HTTP/1.0
REQUEST_METHOD=POST
SERVER_ADMIN=[no address given]
SERVER_PORT=80
SCRIPT_NAME=/cgi-bin/mycgi
SERVER_NAME=www.butterthlies.com</pre></blockquote>





<p>If we have included the module <em class="emphasis">mod_unique_id</em>, we
also have the environment variable <tt class="literal">UNIQUE_ID</tt>,
which has attached to it a unique number for each hit:</p>





<blockquote><pre class="code">UNIQUE_ID==NWG7@QoAAAIBkwAADYY</pre></blockquote>





<p>The script <em class="filename">mycgi.cgi</em> has become a tool we shall
keep up our sleeves for the future.</p>





<p>Of course, a CGI script can send any valid header it likes. A
particularly useful one is
<tt class="literal">Location</tt>
<a name="INDEX-474" />, which redirects the client to somewhere
else -- which might be anywhere from a file up to another URL. In
this case, we can pretend that we have run some sort of program that
collects information; having done that, we return the client to the
starting URL. The script <em class="emphasis">.../cgi-bin/location.cgi
</em>is as follows:</p>





<blockquote><pre class="code">#!/bin/sh
echo "content-type: text/plain"
# run some program to gather information
echo "Location: http://192.168.123.2"
echo</pre></blockquote>





<p>Once the form has been changed to run this file rather than
<em class="emphasis">mycgi.cgi,</em> clicking on the Submit button shoots
us straight back to the original screen.</p>





<p>Now we can set about writing a C version of
<em class="filename">mycgi</em> that does something useful. Let's
think now what we want to do. A customer fills in a form to order
some cards. His browser extracts the useful data and sends it back to
us. We need to echo it back to him to make sure it is correct. This
echo needs to be an HTML form itself so that he can indicate his
consent. If he's happy, we need to take his data and process
it; if he isn't, we need to resend him the original form. We
will write a demonstration program that gets the incoming data,
builds a skeleton HTML form around it, and sends it back. You should
find it easy enough to fiddle around with the program to make it do
what you want. Happily, we don't even have to bother writing
this program, because we can find what we want among the Netscape
forms documentation: the program <em class="emphasis">echo.c</em>, with
helper functions in <em class="emphasis">echo2.c.</em> This program is
reproduced with the permission of Netscape Corporation and can be
found in <a href="appb_01.htm">Appendix B, "The echo Program "</a>.</p>





<a name="ch04-23512" /><div class="sect2">
<h3 class="sect2">4.4.1. <em class="filename">echo.c</em></h3>





<p><em class="filename">echo</em>
<a name="INDEX-475" /> <a name="INDEX-476" /> <a name="INDEX-477" /> receives incoming data from
an HTML form and returns an HTML document listing the field names and
the values entered into the fields by the customer. To avoid any
confusion with the Unix utility <em class="filename">echo</em>, we renamed
ours to <em class="filename">myecho</em>. It is worth looking at
<em class="filename">myecho.c</em>, because it shows that the process is
easier than it sounds:</p>





<blockquote><pre class="code">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define MAX_ENTRIES 10000
typedef struct
    {
    char *name;
    char *val;
    } entry;

char *makeword(char *line, char stop);
char *fmakeword(FILE *f, char stop, int *len);
char x2c(char *what);
void unescape_url(char *url);
void plustospace(char *str);

int main(int argc, char *argv[])
    {
    entry entries[MAX_ENTRIES];
    register int x,m=0;
    int cl;
    char mbuf[200];</pre></blockquote>





<p>The next line:</p>





<blockquote><pre class="code">printf("Content-type: text/html\n\n");</pre></blockquote>





<p>supplies the HTML header. We can have any MIME type here. It must be
followed by a blank line, hence the <tt class="literal">\n\n</tt>. The
line:</p>





<blockquote><pre class="code">if(strcmp(getenv("REQUEST_METHOD"),"POST"))</pre></blockquote>





<p>checks that we have the right sort of input method. There are
normally only two possibilities in a CGI script:
<tt class="literal">GET</tt> and <tt class="literal">POST</tt>. In both cases the
data is formatted very simply:</p>





<blockquote><pre class="code"><em class="replaceable">fieldname</em>1=value&amp;<em class="replaceable">fieldname</em>2=value&amp;...</pre></blockquote>





<p>If the method is <tt class="literal">GET</tt>, the data is written to the
environment variable <tt class="literal">QUERY_STRING</tt>. If the method
is <tt class="literal">POST</tt>, the data is written to the standard input
and can be read character by character with <tt class="literal">fgetc(
)</tt> (see <em class="emphasis">echo2.c</em> in <a href="appb_01.htm">Appendix B, "The echo Program "</a>).</p>





<p>The next section returns the length of date to come:</p>





<blockquote><pre class="code">{
        printf("This script should be referenced with a METHOD of POST.\n");
        exit(1);
        }
    if(strcmp(getenv("CONTENT_TYPE"),"application/x-www-form-urlencoded")) 
        {
        printf("This script can only be used to decode form results. \n");
        exit(1);
        }
cl = atoi(getenv("CONTENT_LENGTH"));</pre></blockquote>





<p>The following snippet reads in the data, breaking at the
<tt class="literal">&amp;</tt> symbols:</p>





<blockquote><pre class="code">for(x=0;cl &amp;&amp; (!feof(stdin));x++) 
    {
    m=x;
    entries[x].val = fmakeword(stdin,'&amp;',&amp;cl);
    plustospace(entries[x].val);
    unescape_url(entries[x].val);
    entries[x].name = makeword(entries[x].val,'=');
    }</pre></blockquote>





<p>The next line displays the top of the return HTML document:</p>





<blockquote><pre class="code">printf("&lt;H1&gt;Query Results&lt;/H1&gt;");</pre></blockquote>





<p>The final section lists the fields in the original form with the
values filled in by the customer:</p>





<blockquote><pre class="code">printf("You submitted the following name/value pairs:&lt;p&gt;%c",10);
    printf("&lt;ul&gt;%c",10);

    for(x=0; x &lt;= m; x++)
        printf("&lt;li&gt; &lt;code&gt;%s = %s&lt;/code&gt;%c",entries[x].name,
               entries[x].val,10);
    printf("&lt;/ul&gt;%c",10);
    }</pre></blockquote>





<p>We compile <em class="filename">myecho.c</em> and copy the result to
<em class="filename">mycgi</em>
<a href="#FOOTNOTE-38">[38]</a> to see it in action next time we run the form.
The result on the client machine is something like this (depending on
how the form was filled in):</p><blockquote>




<a name="FOOTNOTE-38" /><p>[38]Of course, we could have changed the
form to use <em class="filename">myecho</em> instead.</p>




</blockquote>





<blockquote><pre class="code">QUERY RESULTS
You submitted the following name/value pairs:
* 2315_order=20
* 2316_order=10
* 2317_order=
* 2318_order=
* card_type=Amex
* card_num=1234567</pre></blockquote>





<p>Clearly, it's not difficult to modify
<em class="emphasis">myecho.c</em> to return another form, presenting the
data in a more user-friendly fashion and asking the customer to hit a
button to signify agreement. The second form activates another
script/program, <em class="emphasis">process_orders</em>, which turns the
order into delivered business. However, we will leave these pleasures
as an exercise for the<a name="INDEX-478" /> reader.<em class="filename" />
<a name="INDEX-479" /> <a name="INDEX-480" /> <a name="INDEX-481" /></p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">4.3. Script Directives</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">4.5. Debugging Scripts</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>