<?label 13.3. Binary Signatures, Virtual Cash?><html><head><title>Binary Signatures, Virtual Cash (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">13.3. Binary Signatures, Virtual Cash</h2>





<p>
<a name="INDEX-1095" /> <a name="INDEX-1096" />
<a name="INDEX-1097" />The final and perhaps the most
important aspect of security is providing virtual money or binary
cash; from another point of view, this could mean making digital
signatures, and therefore electronic checks, possible.</p>





<p>At first sight, this seems impossible. The authority to issue
documents such as checks is proved by a signature. Simple as it is,
and apparently open to fraud, the system does actually work on paper.
We might transfer it literally to the Web by scanning an image of a
person's signature and sending that to validate his or her
documents. However, whatever security that was locked to the paper
signature has now evaporated. A forger simply has to copy the bit
pattern that makes up the image, store it, and attach it to any of
his or her purchases to start free shopping.</p>





<p>The way to write a digital signature is to perform some action on
data provided by the other party that only you could have performed,
thereby proving you are who you say.</p>





<p>
<a name="INDEX-1098" />
<a name="INDEX-1099" />
<a name="INDEX-1100" />
<a name="INDEX-1101" />The ideas of <em class="emphasis">public key</em> (PK)
<em class="emphasis">encryption</em> are pretty well known by now, so we
will just skim over the salient points. You have two keys: one (your
public key) that encrypts messages and one (your private key) that
decrypts messages encrypted with your public key (and vice versa).
You give the public key to anyone who asks and keep your private key
secret. Because the keys for encryption and decryption are not the
same, the system is also called <em class="emphasis">asymmetric key
encryption</em>.</p>





<p>For instance, let's apply the technology to a simple matter of
the heart. You subscribe to a lonely hearts newsgroup where persons
describe their attractions and their willingness to meet persons of
similar romantic desires. The person you fancy publishes his or her
public key at the bottom of the message describing his or her
attractions. You reply:</p>





<blockquote><pre class="code">I am (insert unrecognizably favorable description of self). Meet me behind the bicycle sheds at 00.30. My heart burns .. (etc.)</pre></blockquote>





<p>You encrypt this with your paramour's public key and send it.
Whoever sees it on the way, or finds it lying around on the computer
at the other end, will not be able to decrypt it and so learn the
hour of your happiness. But your one and only
<em class="emphasis">can</em> decrypt it, and can, in turn, encrypt a
reply:</p>





<blockquote><pre class="code">YES, Yes, a thousand times yes!</pre></blockquote>





<p>using the private key and send it back. If you can decrypt it using
the public key, then you can be sure that it is from the right,
fascinating person and not a bunch of jokers who are planning to
gather round you at the witching hour to make low remarks.</p>





<p>However, anyone who guesses the public key to use could also decrypt
the reply, so your true love could encrypt the reply using his or her
private key (to prove he or she sent it) and then encrypt it again
using your public key to prevent anyone else from reading it. You
then decrypt it twice to find that everything is well.</p>





<p>The encryption and decryption modules have a single, crucial
property:</p>





<ul><li><p>Although you have the encrypting key number in your hand, you
can't deduce the decrypting one. (Well, you can, but only after
years of computing.) This is because encryption is done with a large
number (the key), and decryption depends on knowing its prime
factors, which are very difficult to determine.</p></li></ul>
<p>The strength of PK encryption is measured by the length of the key,
because this influences the length of time needed to calculate the
prime factors. The Bad Guys and, oddly, the American government,
would like people to use a short key, so that they can break any
messages they want. People who do not think this is a good idea want
to use a long key so that their messages can't be broken. The
only practical limits are that the longer the key, the longer it
takes to construct it in the first place, and the longer the sums
take each time you use it.</p>





<p>An experiment in breaking a PK key was done in 1994 using 600
volunteers over the Internet. It took eight months' work by
1600 computers to factor a 429-bit number (see <em class="emphasis">PGP: Pretty
Good Privacy, </em>by Simson Garfinkel, from O'Reilly
&amp; Associates). The time to factor a number roughly doubles for
every additional 10 bits, so it would take the same crew a bit less
than a million million million years to factor a 1024-bit key.</p>





<p>However, a breakthrough in the mathematics of factoring could change
that overnight. Also, proponents of quantum computers say that these
(so far conceptual) machines will run so much faster that 1024-bit
keys will be breakable in less-than-lifetime runs.</p>





<p>But for the moment, PK looks pretty safe. The PK encryption method
achieves several holy grails of the encryption community:</p>





<ul><li><p>It is (as far as we know) effectively unbreakable.</p></li><li><p>It is portable; a user's public key needs to be only 128 bytes
long<a href="#FOOTNOTE-60">[60]</a> and may well be shorter.</p><blockquote>




<a name="FOOTNOTE-60" /><p>[60]Some say you should use longer keys to be really
safe. No one we know is advocating more than 4096 bits (512 bytes)
yet.</p>




</blockquote></li><li><p>Anyone can encrypt, but only the holder of the private key can
decrypt; or, in reverse, if the private key encrypts and the public
key decrypts to make a sensible plaintext, then this proves that the
proper person signed the document. The discoverers of public key
encryption must have thought it was Christmas when they realized all
this.</p></li></ul>
<p>On the other hand, PK is one of the few encryption methods that can
be broken without any traffic. The classical way to decrypt codes is
to gather enough messages (which in itself is difficult and may be
impossible if the user cunningly sends too few messages) and, from
the regularities of the underlying plaintext that show through, work
back to the encryption key. With a lot of help on the side, this is
how the German Enigma codes were broken during World War II. It is
worth noticing that the PK encryption method is breakable without any
traffic: you "just" have to calculate the prime factors
of the public key. In this it is unique, but as we have seen earlier,
it isn't so easy either.</p>





<p>Given these two numbers, the public and private keys, the two modules
are interchangeable: as well as working the way round you would
expect, you can also take a plaintext message, decrypt it with the
decryption module, and encrypt it with the encryption module to get
back to plaintext again.</p>





<p>The point of this is that you can now encrypt a message with your
private key and send it to anyone who has your public key. The fact
that it decodes to readable text proves that it came from you: it is
an unforgeable electronic signature.</p>





<p>This interesting fact is obviously useful when it comes to exchanging
money over the Web. You open an account with someone like American
Express. You want to buy a copy of this excellent book from the
publishers, so you send Amex an encrypted message telling them to
debit your account and credit O'Reilly's. Amex can safely
do this because (providing you have been reasonably sensible and not
published your private key) you are the only person who could have
sent that message. Electronic commerce is a lot more complicated
(naturally!) than this, but in essence this is what happens.</p>





<p>
<a name="INDEX-1102" />One of the complications is that
because PK encryption involves arithmetic with very big numbers, it
is very slow. Our lovers above could have encoded their complete
messages using PK, but they might have gotten very bored doing it. In
real life, messages are encrypted using a fast but old-fashioned
system based on a single secret key that both parties know. The
technology exists to make this kind of encryption as uncrackable as
PK: the only way to attack a good system is to try every possible key
in turn, and the key does not have to be very long to make this
process take up so much time that it is effectively impossible. For
instance, if you tried each possibility for a 128-bit key at the rate
of a million a second, it would take 10<sup class="superscript">25</sup>
years to find the right one. The traditional drawback to secret key
cryptography has always been the difficulty of getting your secret
key to the other person without anyone else getting a look at it.</p>





<p>Contemporary secure transaction methods usually involve transmitting
a secret key by PK. Since the key is short (say, 128 bits or 16
characters), this does not take long. Then the key is used to encrypt
and decrypt the message with a different algorithm, probably
<a name="INDEX-1103" /> <a name="INDEX-1104" />International Data
Encryption Algorithm (IDEA) or Data Encryption Standard (DES). So,
for instance, the Pretty Good Privacy package makes up a key and
transmits it using PK, then uses IDEA to encrypt and decrypt the
actual message.
<a name="INDEX-1105" /> <a name="INDEX-1106" /> <a name="INDEX-1107" /> <a name="INDEX-1108" /></p>





<a name="ch13-2-fm2xml" /><div class="sect2">
<h3 class="sect2">13.3.1. Certificates</h3>





<p>
<a name="INDEX-1109" />
<a name="INDEX-1110" />
<a name="INDEX-1111" />"No man is an
island," John Donne reminds us. We do not practice cryptography
on our own; indeed, there would be little point. Even in the simple
situation of the spy and his spymaster, it is important to be sure
you are actually talking to the correct person. Many intelligence
operations depend on capturing the spy and replacing him or her at
the radio with one of their own people to feed the enemy with
twaddle. This can be annoying and dangerous for the spymaster, so he
often teaches his spies little radio tricks that he hopes the captors
will overlook and so betray themselves.</p>





<p>In the larger cryptographic world of the Web, the problem is as
acute. When we order a pack of cards from
<em class="emphasis">www.butterthlies.com,</em> we want to be sure the
company accepting our money really is that celebrated card publisher
and not some interloper; similarly, Butterthlies, Inc., wants to be
sure that we are who we say we are and that we have some sort of
credit account that will pay for their splendid offerings. The
problems are solved to some extent by the idea of a
<em class="emphasis">certificate</em>. A certificate is an electronic
document signed (i.e., encrypted using a private key) by some
respectable person or company called a <em class="emphasis">certification
authority</em> (CA). It contains the holder's public key
plus information about him or her: name, email address, company, and
so on (see <a href="ch13_06.htm">Section 13.6.5, "Make a Test Certificate"</a>, later in this
chapter). There is no reason why, in the future, it should not
contain height, weight, fingerprints, retinal patterns, keyboard
style, and whatever other things technology can think up under the
rubric of biometrics. You get this document by filling in a
certificate request form issued by some CA; after you have crossed
their palm with silver and they have applied whatever level of
verification they deem appropriate, they send you back the data file.</p>





<p>In the future, the certification authority itself may hold a
certificate from some higher-up CA, and so on, back to a CA that is
so august and immensely respectable that it can sign its own
certificate. (In the absence of a corporeal deity, some human has to
do this.) This certificate is known as a <em class="emphasis">root
certificate</em>, and a good root certificate is one for which
the public key is widely and reliably available.</p>





<p>Currently, pretty much every CA uses a self-signed certificate, and
certainly all the public ones do. Until some fairly fundamental work
has been done to deal with how and when to trust second-level
certificates, there isn't really any alternative. After all,
just because you trust Fred to sign a certificate for Bill, does this
mean you should trust Bill to sign certificates? Not in our opinion.</p>





<p>You might like to get a certificate from <a name="INDEX-1112" />Thawte Consulting
(<a href="../../../../../../www.thawte.com/">http://www.thawte.com/</a>), as we do later in
this chapter. They provide a free beta test certificate you can play
with, as well as proper ones at different levels of reliability that
cost more or less money. Thawte's certificate automatically
installs into your copy of Netscape. Test certificates can also be
had from <a href="../../../../../../www.x509.com/">http://www.x509.com/</a>.</p>





<p>When you do business with someone else on the Web, you exchange
certificates, which are encrypted into your messages so that they
cannot be stolen in transit. Secure transactions, therefore, require
the parties to be able to verify the certificates of each other. In
order to verify a certificate you need to have the public key of the
authority that issued it. If you are presented with a certificate
from an unknown authority when Apache-SSL has been told to insist on
known CAs, it refuses access. But generally you will keep a stock of
the published public keys of the leading CAs in a directory ready for
use, and you should make it plain in your publicity which CAs you
accept.</p>





<p>When the whole certificate structure is in place, there will be a
chain of certificates leading back through bigger organizations to a
few root certificate authorities, who are likely to be so big and
impressive, like the telephone companies or the banks, that no one
doubts their provenance.</p>





<p>The question of chains of certificates is the first stage in the
formalization of our ideas of business and personal financial trust.
Since the establishment of banks in the 1300s, we have gotten used to
the idea that if we walk into a bank, it is safe to give our
hard-earned money to the complete stranger sitting behind the till.
However, on the Internet, the reassurance of the expensive building
and its impressive staff will be missing. It will be replaced in part
by certificate chains. But just because a person has a certificate
does not mean you should trust him or her unreservedly. LocalBank may
well have a certificate from CitiBank, and CitiBank from the Fed, and
the Fed from whichever deity is in the CA business. LocalBank may
have given their janitor a certificate, but all this means is that he
probably is the janitor he says he is. You would not want to give him
automatic authority to debit your account with cleaning charges.</p>





<p>You certainly would not trust someone who had no certificate, but
what you would trust them to do would depend on <em class="filename">policy
</em> statements issued by his or her employers and fiduciary
superiors, modified by your own policies, which most people have not
had to think very much about. The whole subject is extremely
extensive and will probably bore us to distraction before it all
settles <a name="INDEX-1113" />
<a name="INDEX-1114" />
<a name="INDEX-1115" />down.
<a name="INDEX-1116" />
<a name="INDEX-1117" />
<a name="INDEX-1118" /></p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch13_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.2. Apache's Security Precautions</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">13.4. Firewalls</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>