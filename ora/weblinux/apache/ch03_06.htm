<?label 3.6. Controlling Virtual Hosts on Unix?><html><head><title>Controlling Virtual Hosts on Unix (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="ch03_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">3.6. Controlling Virtual Hosts on Unix</h2>





<p>
<a name="INDEX-297" />
<a name="INDEX-298" /> <a name="INDEX-299" />When
started without the<em class="emphasis">
-</em><tt class="literal">X</tt><em class="emphasis"> </em>flag, which is
what you would do in real operation, Apache launches a number of
child versions of itself so that any incoming request can be
instantly dealt with. This is an excellent scheme, but we need some
way of controlling this sprawl of software. The necessary directives
are there to do it.<a name="INDEX-300" /></p>





<a name="ch03-20-fm2xml" /><div class="sect2">
<h3 class="sect2">3.6.1. MaxClients</h3>





<blockquote><pre class="code"><a name="INDEX-301" />
<a name="INDEX-302" />
<a name="INDEX-303" />
<a name="INDEX-304" />MaxClients <em class="replaceable">number</em>
Default <em class="replaceable">number</em>: 150
Server config</pre></blockquote>





<p>This directive limits the number of requests that will be dealt with
simultaneously. In the current version of Apache, this effectively
limits the number of servers that can run at one time.</p>
</div>
















<a name="ch03-21-fm2xml" /><div class="sect2">
<h3 class="sect2">3.6.2. MaxRequestsPerChild</h3>





<blockquote><pre class="code"><a name="INDEX-305" />
<a name="INDEX-306" />
<a name="INDEX-307" />
<a name="INDEX-308" />MaxRequestsPerChild <em class="replaceable">number</em>
Default <em class="replaceable">number</em>: 30
Server config</pre></blockquote>





<p>Each child version of Apache handles this number of requests and dies
(unless the value is 0, in which case it will last forever or until
the machine is rebooted). It is a good idea to set a number here so
that any accidental memory leaks in Apache are tidied up. Although
there are no known leaks in Apache, it is not impossible for them to
occur in the system libraries, so it is probably wise not to disable
this unless you are absolutely sure the code is byte-tight.</p>
</div>
















<a name="ch03-22-fm2xml" /><div class="sect2">
<h3 class="sect2">3.6.3. MaxSpareServers</h3>





<blockquote><pre class="code"><a name="INDEX-309" />MaxSpareServers <em class="replaceable">number</em>
Default <em class="replaceable">number</em>: 10
Server config</pre></blockquote>





<p>No more than this number of child servers will be left running and
unused. Setting this to an unnecessarily large number is a bad idea,
since it depletes resources needlessly. How many is too many depends
on which modules you have used and your detailed configuration. You
can get some clues by studying memory consumption with
<em class="filename">ps</em>, <em class="filename">top</em>, and the like.</p>
</div>
















<a name="ch03-23-fm2xml" /><div class="sect2">
<h3 class="sect2">3.6.4. MinSpareServers</h3>





<blockquote><pre class="code"><a name="INDEX-310" />MinSpareServers <em class="replaceable">number</em>
Default <em class="replaceable">number</em>: 5
Server config</pre></blockquote>





<p>Apache attempts to keep at least this number of spare servers
running. If fewer than this number exist, new ones will be started at
an increasing rate each second until
<tt class="literal">MAX_SPAWN_RATE</tt> is reached.
<tt class="literal">MAX_SPAWN_RATE</tt> is defined to be 32 by default, but
can be overridden at compile time. If no new servers are needed, the
number to be added is reset to 1. Setting
<em class="replaceable">number</em> unnecessarily high is a bad idea
because it uses up resources needlessly.</p>
</div>
















<a name="ch03-24-fm2xml" /><div class="sect2">
<h3 class="sect2">3.6.5. StartServers</h3>





<blockquote><pre class="code"><a name="INDEX-311" />StartServers <em class="replaceable">number</em>
Default <em class="replaceable">number</em>: 5
Server config</pre></blockquote>





<p>Although the number of servers is controlled dynamically (see
<tt class="literal">MaxSpare-Servers</tt>), you may have a heavily used
site and want to make sure that it starts up with lots of servers,
rather than waiting for demand to set them going.</p>





<p>In older versions of Apache, new servers were only started at the
rate of one per second, so careful consideration had to be given to
these numbers on heavily loaded systems. However, in Apache 1.3 new
servers are started more aggressively, so fine tuning of
<tt class="literal">StartServers</tt>, <tt class="literal">MinSpareServers</tt>,
and <tt class="literal">MaxSpare-Servers</tt> should be considerably less
important. To cope with sudden bursts of traffic on heavily loaded
systems, it is worth having a few spare servers available. Experience
has shown that servers handling one million hits per day work well
with <tt class="literal">MaxSpareServers</tt> set to 64 and
<tt class="literal">MinSpareServers</tt> set to 32. Startup performance can
be optimized by setting <tt class="literal">StartServers</tt> somewhere in
the range of <tt class="literal">MinSpareServers</tt> to
<tt class="literal">MaxSpareServers</tt>. It may also be worth increasing
<tt class="literal">MaxRequestsPerChild</tt> in order to avoid unnecessary
overhead from process restarts, but note that you increase the risk
of damage by memory leaks if you do this. Do make sure you have
enough memory available to actually run this many copies of
Apache!<a name="INDEX-312" /></p>
</div>
















<a name="ch03-25-fm2xml" /><div class="sect2">
<h3 class="sect2">3.6.6. Unix File Limits</h3>





<p>
<a name="INDEX-313" />
<a name="INDEX-314" />If you were doing this for real, you
would expect the number of virtual
<em class="emphasis">httpd</em>s  running to increase
to cope with our various spin-off businesses. This may cause trouble.
Some Unix systems will allow child processes to open no more than 64
file descriptors at once. Each virtual host consumes two file
descriptors in opening its transfer and error log files, so 32
virtual hosts use up the limit. The problem shows up in "unable
to fork" messages in the error logs, though this is not
actually because Unix is unable to fork but because it can't
create the pipes.<a href="#FOOTNOTE-31">[31]</a>
The solution is to use a single log and separate it out
later.
<a name="INDEX-315" /> <a name="INDEX-316" /></p><blockquote>




<a name="FOOTNOTE-31" /><p>[31]This particular error can be caused
by various resource shortages, particularly open file limits and
process limits; unfortunately, Apache doesn't generally tell
you what caused the problem, which can be very frustrating. A
particularly irritating pitfall is caused by restarting the server
from a shell that sets the limits to different values from those used
when the server started automatically at system boot.<em class="emphasis">
tcsh</em>, for example, tends to do this.</p>




</blockquote>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch03_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch03_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">3.5. Two Sites and Apache</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">3.7. Controlling Virtual Hosts on Win32</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
