<?label 1. Getting Started?><html><head><title>Getting Started (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch00_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 1. Getting Started</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch01_01.htm">How Does Apache Work?</a><br />
<a href="ch01_02.htm">What to Know About TCP/IP</a><br />
<a href="ch01_03.htm">How Does Apache Use TCP/IP?</a><br />
<a href="ch01_04.htm">What the Client Does</a><br />
<a href="ch01_05.htm">What Happens at the Server End?</a><br />
<a href="ch01_06.htm">Which Unix?</a><br />
<a href="ch01_07.htm">Which Apache?</a><br />
<a href="ch01_08.htm">Making Apache Under Unix</a><br />
<a href="ch01_09.htm">Apache Under Windows</a><br />
<a href="ch01_10.htm">Apache Under BS2000/OSD and AS/400</a><br /></p></div>
















<p>When you connect to the URL of someone's home page -- say
the notional <em class="emphasis">http://www.butterthlies.com/</em> we
shall meet later on -- you send a message across the Internet to
the machine at that address. That machine, you hope, is up and
running, its Internet connection is working, and it is ready to
receive and act on your message.</p>








<p>
<a name="INDEX-16" /> <a name="INDEX-17" />URL stands for Universal
Resource Locator. A URL such as
<em class="emphasis">http://www.butter-thlies.com/</em> comes in three
parts:</p>








<blockquote><pre class="code"><em class="replaceable">&lt;method&gt;://&lt;host&gt;/&lt;absolute path URL (apURL)&gt;</em></pre></blockquote>








<p>
<a name="INDEX-18" />
<a name="INDEX-19" />
<a name="INDEX-20" />So, in
our example, <em class="replaceable">&lt; method&gt;</em> is
<tt class="literal">http</tt>, meaning that the browser should use
<a name="INDEX-21" />HTTP (Hypertext Transfer Protocol);
<em class="replaceable">&lt;host&gt;</em> is
<tt class="literal">www.butterthlies.com</tt>; and
<em class="replaceable">&lt;apURL&gt;</em> is "<tt class="literal">/
</tt>", meaning the top directory of the host. Using
HTTP/1.1, your browser might send the following request:</p>








<blockquote><pre class="code">GET / HTTP/1.1
Host: www.butterthlies.com</pre></blockquote>








<p>
<a name="INDEX-22" />The request arrives at
port 80 (the default HTTP port) on the host
<em class="filename">www.butterthlies.com</em>. The message is again in
three parts: a method (an HTTP method, not a URL method), that in
this case is <tt class="literal">GET</tt>, but could equally be
<tt class="literal">PUT</tt>, <tt class="literal">POST</tt>,
<tt class="literal">DELETE</tt>, or <tt class="literal">CONNECT</tt>; the Uniform
Resource Identifier (URI) "<tt class="literal">/</tt>"; and the
version of the protocol we are using. It is then up to the web server
running on that host to make something of this message.</p>








<p>It is worth saying here -- and we will say it again -- that the
whole business of a web server is to translate a URL either into a
filename, and then send that file back over the Internet, or into a
program name, and then run that program and send its output back.
That is the meat of what it does: all the rest is trimming.</p>








<p>The host machine may be a whole cluster of hypercomputers costing an
oil sheik's ransom, or a humble PC. In either case, it had
better be running a web server, a program that listens to the network
and accepts and acts on this sort of message.</p>








<p>What do we want a web server to do? It should:</p>








<ul><li><p>Run fast, so it can cope with a lot of inquiries using a minimum of
hardware.</p></li><li><p>Be
<a name="INDEX-23" />multitasking,
so it can deal with more than one inquiry at once.</p></li><li><p>Be multitasking, so that the person running it can maintain the data
it hands out without having to shut the service down. Multitasking is
hard to arrange within a program: the only way to do it properly is
to run the server on a multitasking operating system. In
Apache's case, this is some flavor of Unix (or Unix-like
system), Win32, or OS/2.</p></li><li><p>
<a name="INDEX-24" />Authenticate
inquirers: some may be entitled to more services than others. When we
come to virtual cash, this feature (see <a href="ch13_01.htm">Chapter 13, "Security"</a>)
becomes essential.</p></li><li><p>
<a name="INDEX-25" />
<a name="INDEX-26" />Respond to errors in the messages it gets
with answers that make sense in the context of what is going on. For
instance, if a client requests a page that the server cannot find,
the server should respond with a "404" error, which is
defined by the HTTP specification to mean "page does not
exist."</p></li><li><p>Negotiate a style and language of response with the inquirer. For
instance, it should -- if the people running the server can rise
to the challenge -- be able to respond in the language of the
inquirer's choice. This ability, of course, can open up your
site to a lot more action. And there are parts of the world where a
response in the wrong language can be a bad thing. If you were
operating in Canada, where the English/French divide arouses bitter
feelings, or in Belgium, where the French/Flemish split is as bad,
this feature could make or break your business.</p></li><li><p>Offer different formats. On a more technical level, a user might want
JPEG image files rather than GIF, or TIFF rather than either of the
former. He or she might want text in vdi format rather than
PostScript.</p></li><li><p>Run as a <a name="INDEX-27" />
<a name="INDEX-28" /> <a name="INDEX-29" />proxy server. A proxy server accepts
requests for clients, forwards them to the real servers, and then
sends the real servers' responses back to the clients. There
are two reasons why you might want a proxy server:</p>







<ul>
<li><p>The proxy might be running on the far side of a firewall (see <a href="ch13_01.htm">Chapter 13, "Security"</a>), giving its users access to the Internet.</p></li><li><p>The proxy might cache popular pages to save reaccessing them.</p></li></ul>
<ul><li><p>
<a name="INDEX-30" />Be secure. The
Internet world is like the real world, peopled by a lot of lambs and
a few wolves.<a href="#FOOTNOTE-2">[2]</a> The wolves
like to get into the lambs' folds (of which your computer is
one) and, when there, raven and tear in the usual wolfish way. The
aim of a good server is to prevent this happening. The subject of
security is so important that we will come back to it several times
before we are through.</p><blockquote>







<a name="FOOTNOTE-2" /><p>[2]We generally follow the convention of
calling these people the Bad Guys. This avoids debate about
"hackers," which, to many people, simply refers to good
programmers, but to some means Bad Guys. We discover from the French
edition of this book that in France they are <em class="emphasis">Sales
Types -- </em>dirty fellows.</p>







</blockquote></li>
</ul></li>
</ul>
<p>These are services that the developers of Apache think a server
should offer. There are people who have other ideas, and, as with all
software development, there are lots of features that might be
nice -- features someone might use one day, or that might, if put
into the code, actually make it work better instead of fouling up
something else that has, until then, worked fine. Unless developers
are careful, good software attracts so many improvements that it
eventually rolls over and sinks like a ship caught in an Arctic ice
storm.</p>








<p>Some ideas are in progress: in particular, various proposals for
Apache 2.0 are being kicked around. The main features Apache 2.0 is
supposed to have are multithreading (on platforms that support it),
layered I/O, and a rationalized API.</p>








<p>
<a name="INDEX-31" />If you have bugs to
report or more ideas for development, look at <a href="../../../../../../www.apache.org/bug_report.html">http://www.apache.org/bug_report.html</a>. You
can also try <em class="emphasis">news:comp.infosystems.www.servers.unix</em>, where some of the Apache team lurk, along
with many other knowledgeable people, and <em class="emphasis">news:comp.infosystems.www.servers.ms-windows</em>.</p>



























































<div class="sect1"><a name="ch01-40127" />
<h2 class="sect1">1.1. How Does Apache Work?</h2>








<p>Apache is a program that runs under a suitable multitasking operating
system. In the examples in this book, the operating systems are Unix
and Windows 95/98/NT, which we call <em class="emphasis">Win32</em>. The
binary is called <em class="filename">httpd
</em>
<a name="INDEX-32" />under Unix
and
<em class="filename">apache.exe</em>
<a name="INDEX-33" />
under Win32<a href="#FOOTNOTE-3">[3]</a> and normally runs<em class="filename">
</em>in the background<em class="filename">. </em>Each copy of
<em class="filename">httpd/apache</em> that is started has its attention
directed at a <em class="filename">web site</em>
<a name="INDEX-34" />, which is, for practical purposes, a
directory. For an example, look at <em class="filename">site.toddle
</em>on the demonstration CD-ROM. Regardless of operating
system, a site directory typically contains four subdirectories:</p><blockquote>







<a name="FOOTNOTE-3" /><p>[3]This double name is rather annoying, but
it seems that life has progressed too far for anything to be done
about it. We will, rather clumsily, refer to
<em class="emphasis">httpd/apache</em> and hope that the reader can pick
the right one.</p>







</blockquote>








<dl>
<dt><b><em class="filename">conf</em></b></dt>
<dd><p>
<a name="INDEX-35" />
<a name="INDEX-36" />Contains the configuration file(s), of
which<em class="filename"> httpd.conf</em> is the most important. It is
referred to throughout this book as the <em class="emphasis">Config</em>
file.</p></dd>








<dt><b><em class="filename">htdocs</em></b></dt>
<dd><p>
<a name="INDEX-37" />Contains
the HTML scripts to be served up to the site's clients. This
directory and those below it, the <em class="emphasis">web space</em>, are
accessible to anyone on the Web and therefore pose a severe security
risk if used for anything other than public data.</p></dd>








<dt><b><em class="firstterm">logs</em></b></dt>
<dd><p>
<a name="INDEX-38" />Contains the log data, both of
accesses and errors.</p></dd>








<dt><b><em class="filename">cgi-bin</em></b></dt>
<dd><p>
<a name="INDEX-39" /> <a name="INDEX-40" />Contains the CGI scripts.
These are programs or shell scripts written by or for the webmaster
that can be executed by Apache on behalf of its clients. It is most
important, for security reasons, that this directory not be in the
web space.</p></dd>

</dl>








<p>In its idling state, Apache does nothing but listen to the IP
addresses and TCP port or ports specified in its Config file. When a
request appears on a valid port, Apache receives the HTTP request and
analyzes the headers. It then applies the rules it finds in the
Config file and takes the appropriate action.</p>








<p>The webmaster's main control over Apache is through the Config
file. The webmaster has some 150 <em class="emphasis">directives</em> at
his or her disposal; most of this book is an account of what these
directives do and how to use them to reasonable advantage. The
webmaster also has half a dozen flags he or she can use when Apache
starts up. Apache is<em class="filename"> freeware
</em>
<a name="INDEX-41" />: the
intending user downloads the source code and compiles it (under Unix)
or downloads the executable (for Windows) from
<a href="../../../../../../www.apache.org/">www.apache.org</a>  or a suitable mirror site. You
can also load the source code from the demonstration CD-ROM included
with this book, although it is not the most recent. Although it
sounds like a difficult business to download the source code and
configure and compile it, it only takes about 20 minutes and is well
worth the trouble.</p>








<p><img src="figs/unix_icon.gif" alt="Figure 1.1" />   Under Unix, the webmaster also controls which
<em class="emphasis">modules</em>
<a name="INDEX-42" /><em class="filename">
</em>are compiled into Apache. Each module provides the code to
execute a number of directives. If there is a group of directives
that aren't needed, the appropriate modules can be left out of
the binary by commenting their names out in the<em class="filename">
configuration</em> <em class="emphasis">file </em>
<a href="#FOOTNOTE-4">[4]</a> that controls the
compilation of the Apache sources. Discarding unwanted modules
reduces the size of the binary and may improve performance.</p><blockquote>







<a name="FOOTNOTE-4" /><p>[4]It is important to distinguish between the configuration file
used at compile time and the Config file used to control the
operation of a web site.</p>







</blockquote>








<p><img src="figs/win32_icon.gif" alt="Figure 1.1" />   Under Windows, Apache is normally precompiled as an executable. The
core modules are compiled in, and others are loaded, if needed, as
dynamic link libraries (DLLs) at runtime, so control of the
executable's size is less urgent. The DLLs supplied in the
<em class="emphasis">.../apache/modules</em> subdirectory are as follows:</p>








<blockquote><pre class="code">APACHE~1 DLL         5,120  19/07/98  11:47 ApacheModuleAuthAnon.dll
APACHE~2 DLL         5,632  19/07/98  11:48 ApacheModuleCERNMeta.dll
APACHE~3 DLL         6,656  19/07/98  11:47 ApacheModuleDigest.dll
APACHE~4 DLL         6,144  19/07/98  11:48 ApacheModuleExpires.dll
APACHE~5 DLL         5,120  19/07/98  11:48 ApacheModuleHeaders.dll
APACHE~6 DLL        46,080  19/07/98  11:48 ApacheModuleProxy.dll
APACHE~7 DLL        35,328  19/07/98  11:48 ApacheModuleRewrite.dll
APACHE~8 DLL         6,656  19/07/98  11:48 ApacheModuleSpeling.dll
APACHE~9 DLL        10,752  19/07/98  11:47 ApacheModuleStatus.dll
APACH~10 DLL         6,144  19/07/98  11:48 ApacheModuleUserTrack.dll</pre></blockquote>








<p><img src="figs/win32_icon.gif" alt="Figure 1.1" />   What these are and what they do will become more apparent as we
proceed. You can add other DLLs from outside suppliers; more will
doubtless become available.</p>








<p><img src="figs/win32_icon.gif" alt="Figure 1.1" />   It is also possible to download the source code and compile it for
Win32 using Microsoft Visual C++ v5.0. We describe this in
<a href="ch01_09.htm">Section 1.9, "Apache Under Windows"</a>, later in this chapter.
You might do this if you wanted to write your own module (see <a href="ch15_01.htm">Chapter 15, "Writing Apache Modules"</a>).</p>
</div>












































































































































































































































































































































































































































































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch00_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch01_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">0.5. Acknowledgments</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">1.2. What to Know About TCP/IP</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
