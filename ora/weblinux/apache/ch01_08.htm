<?label 1.8. Making Apache Under Unix?><html><head><title>Making Apache Under Unix (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="ch01_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">1.8. Making Apache Under Unix</h2>








<p>Download the most recent Apache source code from a suitable mirror
site: a list can be found at
<a href="../../../../../../www.apache.org/">http://www.apache.org/</a>.<a href="#FOOTNOTE-13">[13]</a> You can also load an
older version from the enclosed CD-ROM. You will get a compressed
file, with the extension <em class="filename">.gz </em>if it has been
gzipped, or <em class="emphasis">.Z</em> if it has been compressed. Most
Unix software available on the Web (including the Apache source code)
is compressed using <em class="emphasis">gzip</em>, a GNU compression
tool. If you don't have a copy, you will find one on our CD, or
you can get it from the Web.</p><blockquote>







<a name="FOOTNOTE-13" /><p>[13]It is best to
download it, so you get the latest version with all its bug fixes and
security patches.</p>







</blockquote>








<p>When expanded, the Apache <em class="filename">.tar</em> file creates a
tree of subdirectories. Each new release does the same, so you need
to create a directory on your FreeBSD machine where all this can live
sensibly. We put all our source directories in
<em class="emphasis">/usr/local/etc/apache</em>. Go there, copy the
<em class="emphasis">&lt;apachename&gt;.tar.gz</em> or
<em class="emphasis">&lt;apachename&gt;.tar.Z</em> file, and uncompress
the <em class="emphasis">.Z</em> version or <em class="emphasis">gunzip</em>
(or <em class="emphasis">gzip -d</em> ) the <em class="emphasis">.gz</em>
version:</p>








<blockquote><pre class="code"><b class="emphasis-bold">uncompress &lt;</b><em class="replaceable">apachename</em><b class="emphasis-bold">&gt;.tar.Z</b></pre></blockquote>








<p>or:</p>








<blockquote><pre class="code"><b class="emphasis-bold">gzip -d &lt;</b><em class="replaceable">apachename</em><b class="emphasis-bold">&gt;.tar.gz</b></pre></blockquote>








<p>Make sure that the resulting file is called
<em class="emphasis">&lt;apachename&gt;.tar</em>, or
<em class="emphasis">tar</em> may turn up its nose. If not, type:</p>








<blockquote><pre class="code"><b class="emphasis-bold">mv</b> <b class="emphasis-bold">&lt;</b><em class="replaceable">apachename</em><b class="emphasis-bold">&gt;</b> <b class="emphasis-bold">&lt;</b><em class="replaceable">apachename</em><b class="emphasis-bold">&gt;</b>.<b class="emphasis-bold">tar</b></pre></blockquote>








<p>Now unpack it: <a href="#FOOTNOTE-14">[14]</a></p><blockquote>







<a name="FOOTNOTE-14" /><p>[14]If you
are using GNU <em class="emphasis">tar</em><tt class="literal">,</tt> it is
possible to uncompress and unpack in one step: <tt class="literal">tar</tt>
<tt class="literal">zxvf
&lt;</tt><em class="replaceable">apachename</em><tt class="literal">&gt;</tt>.<tt class="literal">tar</tt>.<tt class="literal">gz</tt>.</p>







</blockquote>








<blockquote><pre class="code"><b class="emphasis-bold">% tar xvf &lt;</b><em class="replaceable">apachename</em><b class="emphasis-bold">&gt;.tar</b></pre></blockquote>








<p>The file will make itself a subdirectory, such as
<em class="emphasis">apache_1.3.1.</em> Keep the <em class="emphasis">.tar</em>
file because you will need to start fresh to make the SSL version.
Get into the <em class="emphasis">.src</em> directory. There are a number
of files with names in capital letters, like
<em class="filename">README</em>, that look as if you ought to read them.
The <em class="emphasis">KEYS</em> file contains the PGP keys of various
Apache Group members. It is more useful for checking future downloads
of Apache than the current one (since a Bad Guy will obviously have
replaced the <em class="emphasis">KEYS</em> file with his own). The
distribution may have been signed by one or more Apache Group
members.</p>








<a name="ch01-5-fm2xml" /><div class="sect2">
<h3 class="sect2">1.8.1. Out of the Box</h3>








<p>Until Apache 1.3, there was no real out-of-the-box batch-capable
build and installation procedure for the complete Apache package.
This is now provided by a top-level <em class="emphasis">configure</em>
script and a corresponding top-level
<em class="emphasis">Makefile.tmpl</em> file. The goal is to provide a GNU
Autoconf-style front end that is capable of driving the old
<em class="filename">src/Configure</em> stuff in batch and that
additionally installs the package with a GNU- conforming directory
layout.<a href="#FOOTNOTE-15">[15]</a> Any options from the old configuration scheme are
available, plus a lot of new options for flexibly customizing Apache.
To run it, simply type:</p><blockquote>







<a name="FOOTNOTE-15" /><p>[15]At least, some say it is conforming.</p>







</blockquote>








<blockquote><pre class="code"><b class="emphasis-bold">./configure</b>
<b class="emphasis-bold">cd src</b>
<b class="emphasis-bold">make</b></pre></blockquote>








<p>It has to be said that if we had read the <em class="emphasis">apache/INSTALL
</em>file first, we would not have tried,
because it gives an unjustified impression of the complexity
involved. However, <em class="emphasis">INSTALL</em> does conceal at least
one useful trick: because almost everything can be specified on the
command line, you can create a shell script that configures your
favorite flavor of Apache, and you never have to edit
<em class="filename">Configuration</em> again. If you have to make a lot
of different versions of Apache, this method has its advantages.
However, the result, for some reason, produces an
<em class="emphasis">httpd</em> that expects all the default directories
to be different from those described in this book -- for instance,
<em class="emphasis">/usr/local/apache/etc/httpd.conf</em> instead of
<em class="emphasis">/usr/local/apache/conf/httpd.conf.</em> Until this is
fixed, we would suggest running:</p>








<blockquote><pre class="code"><b class="emphasis-bold">./configure  -- compat</b></pre></blockquote>








<p>or relying on the method in the next section.</p>
</div>




























<a name="ch01-6-fm2xml" /><div class="sect2">
<h3 class="sect2">1.8.2. <em class="filename">Semimanual Method</em></h3>








<p>Start off by reading <em class="filename">README</em> in the top
directory. This tells you how to compile Apache. The first thing it
wants you to do is to go to the <em class="filename">src</em> subdirectory
and read <em class="filename">INSTALL</em>. To go further you must have an
ANSI C-compliant compiler. A C++ compiler may not work.</p>








<p>
<a name="INDEX-89" />If you have downloaded a beta test
version, you first have to copy
<em class="emphasis">.../src/</em><em class="filename">Configuration.tmpl</em>
to <em class="filename">Configuration</em>. We then have to edit
<em class="filename">Configuration</em> to set things up properly. The
whole file is in Appendix A of the installation kit. A script called
<em class="filename">Configure</em> then uses
<em class="filename">Configuration</em> and
<em class="filename">Makefile.tmpl</em> to create your operational
<em class="filename">Makefile</em>
<a name="INDEX-90" />. (Don't attack
<em class="filename">Makefile</em> directly; any editing you do will be
lost as soon as you run <em class="emphasis">Configure</em> again.)</p>








<p>It is usually only necessary to edit the
<em class="emphasis">Configuration</em> file to select the modules
required (see the next section). Alternatively, you can specify them
on the command line. The file will then automatically identify the
version of Unix, the compiler to be used, the compiler flags, and so
forth. It certainly all worked for us under FreeBSD without any
trouble at all.</p>








<p><em class="emphasis">Configuration</em> has five kinds of things in it:</p>








<ul><li><p>Comment lines starting with "<tt class="literal">#</tt>"</p></li><li><p>Rules starting with the word <tt class="literal">Rule</tt></p></li><li><p>Commands to be inserted into <em class="emphasis">Makefile</em> , starting
with nothing</p></li><li><p>Module selection lines beginning with <tt class="literal">AddModule</tt>,
which specify the modules you want compiled and enabled</p></li><li><p>Optional module selection lines beginning with
<tt class="literal">%Module</tt>, which specify modules that you want
compiled but not enabled until you issue the appropriate directive</p></li></ul>
<p>
<a name="INDEX-91" /> <a name="INDEX-92" />For the moment, we will only be reading
the comments and occasionally turning a comment into a command by
removing the leading <tt class="literal">#</tt>, or vice versa. Most
comments are in front of optional module inclusion lines.</p>
</div>




























<a name="ch01-20447" /><div class="sect2">
<h3 class="sect2">1.8.3. Modules</h3>








<p>These modules are self-contained sections of source code dealing with
various functions of Apache that can be compiled in or left out. You
can also write your own module if you want. Inclusion of modules is
done by uncommenting (removing the leading <tt class="literal">#</tt>)
lines in <em class="filename">Configuration</em>. The only drawback to
including more modules is an increase in the size of your binary and
an imperceptible degradation in performance.<a href="#FOOTNOTE-16">[16]</a></p><blockquote>







<a name="FOOTNOTE-16" /><p>[16]Assuming
the module has been carefully written, it does very little unless
enabled in the <em class="filename">httpd.conf</em> files.</p>







</blockquote>








<p>
<a name="INDEX-93" />The default
<em class="emphasis">Configuration</em> file includes the modules listed
here, together with a lot of chat and comment that we have removed
for clarity<em class="emphasis">. </em>Modules that are compiled into the
Win32 core are marked with "W"; those that are supplied
as a standard Win32 are marked DLL "WD." Our final list
is as follows:</p>








<dl>
<dt><b>AddModule modules/standard/mod_env.o</b></dt>
<dd><p>Sets up environment variables to be passed to CGI scripts.</p></dd>








<dt><b>AddModule modules/standard/mod_log_config.o</b></dt>
<dd><p>Determines logging configuration.</p></dd>








<dt><b>AddModule modules/standard/mod_mime_magic.o</b></dt>
<dd><p>Determines the type of a file.</p></dd>








<dt><b>AddModule modules/standard/mod_mime.o</b></dt>
<dd><p>Maps file extensions to content types.</p></dd>








<dt><b>AddModule modules/standard/mod_negotiation.o</b></dt>
<dd><p>Allows content selection based on <tt class="literal">Accept</tt> headers.</p></dd>








<dt><b>AddModule modules/standard/mod_status.o (WD)</b></dt>
<dd><p>Gives access to server status information.</p></dd>








<dt><b>AddModule modules/standard/mod_info.o</b></dt>
<dd><p>Gives access to configuration information.</p></dd>








<dt><b>AddModule modules/standard/mod_include.o</b></dt>
<dd><p>Translates server-side include statements in CGI texts.</p></dd>








<dt><b>AddModule modules/standard/mod_autoindex.o</b></dt>
<dd><p>Indexes directories without an index file.</p></dd>








<dt><b>AddModule modules/standard/mod_dir.o</b></dt>
<dd><p>Handles requests on directories and directory index files.</p></dd>








<dt><b>AddModule modules/standard/mod_cgi.o</b></dt>
<dd><p>Executes CGI scripts.</p></dd>








<dt><b>AddModule modules/standard/mod_asis.o</b></dt>
<dd><p>Implements <em class="emphasis">.asis</em> file types.</p></dd>








<dt><b>AddModule modules/standard/mod_imap.o</b></dt>
<dd><p>Executes imagemaps.</p></dd>








<dt><b>AddModule modules/standard/mod_actions.o</b></dt>
<dd><p>Specifies CGI scripts to act as handlers for particular file types.</p></dd>








<dt><b>AddModule modules/standard/mod_speling.o</b></dt>
<dd><p>Corrects common spelling mistakes in requests.</p></dd>








<dt><b>AddModule modules/standard/mod_userdir.o</b></dt>
<dd><p>Selects resource directories by username and a common prefix.</p></dd>








<dt><b>AddModule modules/proxy/libproxy.o</b></dt>
<dd><p>Allows Apache to run as a proxy server; should be commented out if
not needed.</p></dd>








<dt><b>AddModule modules/standard/mod_alias.o</b></dt>
<dd><p>Provides simple URL translation and redirection.</p></dd>








<dt><b>AddModule modules/standard/mod_rewrite.o (WD)</b></dt>
<dd><p>Rewrites requested URIs using specified rules.</p></dd>








<dt><b>AddModule modules/standard/mod_access.o</b></dt>
<dd><p>Provides access control.</p></dd>








<dt><b>AddModule modules/standard/mod_auth.o</b></dt>
<dd><p>Provides authorization control.</p></dd>








<dt><b>AddModule modules/standard/mod_auth_anon.o (WD)</b></dt>
<dd><p>Provides FTP-style anonymous username password authentication.</p></dd>








<dt><b>AddModule modules/standard/mod_auth_db.o</b></dt>
<dd><p>Manages a database of passwords; alternative to
<em class="emphasis">mod_auth_dbm.o</em>.</p></dd>








<dt><b>AddModule modules/standard/mod_cern_meta.o (WD)</b></dt>
<dd><p>Implements metainformation files compatible with the CERN web server.</p></dd>








<dt><b>AddModule modules/standard/mod_digest.o (WD) </b></dt>
<dd><p>Implements HTTP digest authentication; more secure than the others.</p></dd>








<dt><b>AddModule modules/standard/mod_expires.o (WD)</b></dt>
<dd><p>Applies <tt class="literal">Expires</tt> headers to resources.</p></dd>








<dt><b>AddModule modules/standard/mod_headers.o (WD)</b></dt>
<dd><p>Sets arbitrary HTTP response headers.</p></dd>








<dt><b>AddModule modules/standard/mod_usertrack.o (WD)</b></dt>
<dd><p>Tracks users by means of cookies. It is not necessary to use cookies.</p></dd>








<dt><b>AddModule modules/standard/mod_unique_id.o</b></dt>
<dd><p>Generates an ID for each hit. May not work on all systems.</p></dd>








<dt><b>AddModule modules/standard/mod_so.o</b></dt>
<dd><p>Loads modules at runtime. Experimental.</p></dd>








<dt><b>AddModule modules/standard/mod_setenvif.o</b></dt>
<dd><p>Sets environment variables based on header fields in the request.</p></dd>

</dl>








<p>Here are the modules we commented out, and why:</p>








<dl>
<dt><b># AddModule modules/standard/mod_log_agent.o</b></dt>
<dd><p>Not relevant here -- CERN holdover.</p></dd>








<dt><b># AddModule modules/standard/mod_log_referer.o</b></dt>
<dd><p>Not relevant here -- CERN holdover.</p></dd>








<dt><b># AddModule modules/standard/mod_auth_dbm.o</b></dt>
<dd><p>Can't have both this and <em class="emphasis">mod_auth_db.o</em>.
Doesn't work with Win32.</p></dd>








<dt><b># AddModule modules/example/mod_example.o</b></dt>
<dd><p>Only for testing APIs (see <a href="ch14_01.htm">Chapter 14, "The Apache API"</a>).</p></dd>

</dl>








<p>These are the "standard" Apache modules, approved and
supported by the Apache Group as a whole. There are a number of other
modules available (see <a href="ch12_01.htm">Chapter 12, "Extra Modules"</a>).</p>








<p>Although we've mentioned
<a name="INDEX-94" />
<a name="INDEX-95" /><em class="emphasis">mod_auth_db.o</em>
and <em class="emphasis">mod_auth_dbm.o</em> above, they provide
equivalent functionality and shouldn't be compiled together.</p>








<p>We have left out any modules described as experimental. Any disparity
between the directives listed in this book and the list obtained by
starting Apache with the <tt class="literal">-h</tt> flag is probably
caused by the errant directive having moved out of experimental
status since we went to press.</p>








<p>Later on, when we are writing Apache configuration scripts, we can
make them adapt to the modules we include or exclude with the
<tt class="literal">IfModule</tt>
<a name="INDEX-96" /> directive. This allows you
to give out predefined Config files that always work (in the sense of
Apache loading) whatever mix of modules is actually compiled. Thus,
for instance, we can adapt to the absence of configurable logging
with the following:</p>








<blockquote><pre class="code">...
&lt;IfModule mod_log_config.c&gt;
LogFormat "customers: host %h, logname %l, user %u, time %t, request %r, status %s, bytes %b"
&lt;/IfModule&gt;
...</pre></blockquote>








<p>The module directives are as follows (it will become clear later on
how to use them, but they are printed here for convenience):</p>








<a name="ch01-7-fm2xml" /><div class="sect3">
<h3 class="sect3">1.8.3.1. ClearModuleList</h3>








<blockquote><pre class="code">ClearModuleList
Server Config</pre></blockquote>








<p>Clears the list of active modules. Apache then has no modules until
the <tt class="literal">AddModule</tt> directive is run. This should only
concern the extreme seeker after performance.</p>
</div>















<a name="ch01-8-fm2xml" /><div class="sect3">
<h3 class="sect3">1.8.3.2. AddModule</h3>








<blockquote><pre class="code">AddModule module module ...
Server Config</pre></blockquote>








<p>Makes the list of modules active. They must have been compiled in
with the <tt class="literal">AddModule</tt> instruction in
<em class="emphasis">Configuration</em>.</p>
</div>
</div>




























<a name="ch01-16004" /><div class="sect2">
<h3 class="sect2">1.8.4. Configuration Settings and Rules</h3>








<p>
<a name="INDEX-97" />Most users of Apache will not have
to bother with this section at all. However, you can specify extra
compiler flags (for instance, optimization commands), libraries, or
includes by giving values to<a name="INDEX-98" /> <a name="INDEX-99" />:</p>








<blockquote><pre class="code">EXTRA_CFLAGS=
EXTRA_LDFLAGS=
EXTRA_LIBS=
EXTRA_INCLUDES=</pre></blockquote>








<p><em class="filename">Configure</em> will try to guess your operating
system and compiler; therefore, unless things go wrong, you
won't need to uncomment and give values to:</p>








<blockquote><pre class="code">#CC=
#OPTIM=-02
#RANLIB=</pre></blockquote>








<p>The rules in the <em class="emphasis">Configuration</em> file allow you to
adapt for a few exotic configuration problems. The syntax of a rule
in <em class="filename">Configuration</em> is as follows:</p>








<blockquote><pre class="code">Rule <em class="replaceable">RULE </em>=<em class="replaceable">value</em></pre></blockquote>








<p>The possible <em class="replaceable">value</em>s are as follows:</p>








<dl>
<dt><b><tt class="literal">yes</tt></b></dt>
<dd><p><em class="emphasis">Configure</em> does what is required.</p></dd>








<dt><b><tt class="literal">default</tt></b></dt>
<dd><p><em class="emphasis">Configure</em> makes a best guess.</p></dd>

</dl>








<p>Any other <em class="replaceable">value</em> is ignored.</p>








<p>The <em class="replaceable">Rule</em>s are as follows:</p>








<dl>
<dt><b><tt class="literal">STATUS</tt></b></dt>
<dd><p>If <tt class="literal">yes</tt>, and <em class="emphasis">Configure</em> decides
that you are using the status module, then full status information is
enabled. If the status module is not included, <tt class="literal">yes</tt>
has no effect. This is set to <tt class="literal">yes</tt> by default.</p></dd>








<dt><b><tt class="literal">SOCKS4</tt>
<a name="INDEX-100" /></b></dt>
<dd><p>
<a name="INDEX-101" />
<a name="INDEX-102" />SOCKS
is a firewall traversal protocol that requires client-end processing.
See ftp://ftp.nec.com/pub/security/socks.cstc.
If set to <tt class="literal">yes</tt>, be sure to add the SOCKS library
location to <tt class="literal">EXTRA_LIBS</tt>; otherwise,
<em class="emphasis">Configure</em> assumes <em class="emphasis">L/usr/local/lib-lsocks</em>. This allows Apache to make outgoing SOCKS
connections, which is not something it normally needs to do, unless
it is configured as a proxy. Although the very latest version of
SOCKS is SOCKS5, SOCKS4 clients work fine with it. This is set to
<tt class="literal">no</tt> by default.</p></dd>








<dt><b><tt class="literal">SOCKS5</tt></b></dt>
<dd><p>If you want to use a SOCKS5 client library, you must use this rule
rather than <tt class="literal">SOCKS4</tt>. This is set to
<tt class="literal">no</tt> by default.</p></dd>








<dt><b><tt class="literal">IRIXNIS</tt>
<a name="INDEX-103" />
<a name="INDEX-104" /></b></dt>
<dd><p>If <em class="emphasis">Configure</em> decides that you are running SGI
IRIX, and you are using NIS, set this to <tt class="literal">yes</tt>. This
is set to <tt class="literal">no</tt> by default.</p></dd>








<dt><b><tt class="literal">IRIXN32</tt></b></dt>
<dd><p>Make IRIX use the n32 libraries rather than the o32 ones. This is set
to <tt class="literal">yes</tt> by default.</p></dd>








<dt><b><tt class="literal">PARANOID</tt></b></dt>
<dd><p>During <em class="filename">Configure</em>, modules can run shell
commands. If <tt class="literal">PARANOID</tt> is set to
<tt class="literal">yes</tt>, it will print out the code that the modules
use. This is set to <tt class="literal">no</tt> by default.</p></dd>

</dl>








<p>There is a group of rules that <em class="emphasis">Configure</em> will
try to set correctly, but that can be overridden. If you have to do
this, please advise the Apache Group by filling out a problem report
form at <a href="../../../../../../apache.org/bugdb.cgi">http://apache.org/bugdb.cgi</a> or by
sending an email to <em class="email">apache-bugs@ apache.org</em>. Currently, there is only one rule in this group:</p>








<dl>
<dt><b><tt class="literal">WANTHSREGEX:</tt></b></dt>
<dd><p>Apache needs to be able to interpret regular expressions using POSIX
methods. A good regex package is included with Apache, but you can
use your OS version by setting <tt class="literal">WANTSHREGEX=no</tt>, or
commenting out the rule. The <tt class="literal">default</tt> action
depends on your OS:</p></dd>

</dl>








<blockquote><pre class="code">Rule WANTSHREGEX=default<a name="INDEX-105" /></pre></blockquote>
</div>




























<a name="ch01-9-fm2xml" /><div class="sect2">
<h3 class="sect2">1.8.5. Making Apache</h3>








<p>
<a name="INDEX-106" /> <a name="INDEX-107" />The <em class="filename">INSTALL</em> file
in the <em class="emphasis">src</em> subdirectory says that all we have to
do now is run the configuration script by typing:</p>








<blockquote><pre class="code">% <b class="emphasis-bold">./Configure</b></pre></blockquote>








<p>You should see something like this -- bearing in mind that
we're using FreeBSD:</p>








<blockquote><pre class="code">Using config file: Configuration
Creating Makefile
 + configured for FreeBSD platform
 + setting C compiler to gcc
 + Adding selected modules
    o status_module uses ConfigStart/End:
    o dbm_auth_module uses ConfigStart/End:
    o db_auth_module uses ConfigStart/End:
    o so_module uses ConfigStart/End:
 + doing sanity check on compiler and options
Creating Makefile in support
Creating Makefile in main
Creating Makefile in ap
Creating Makefile in regex
Creating Makefile in os/unix
Creating Makefile in modules/standard
Creating Makefile in modules/proxy</pre></blockquote>








<p>Then type:</p>








<blockquote><pre class="code">% <b class="emphasis-bold">make</b></pre></blockquote>








<p>When you run <em class="emphasis">make</em>, the compiler is set in
motion, and streams of reassuring messages appear on the screen.
However, things may go wrong that you have to fix, although this
situation can appear more alarming than it really is. For instance,
in an earlier attempt to install Apache on an SCO machine, we
received the following compile error:</p>








<blockquote><pre class="code">Cannot open include file 'sys/socket.h'</pre></blockquote>








<p>Clearly (since sockets are very TCP/IPish things), this had to do
with TCP/IP, which we had not installed: we did so. Not that this is
any big deal, but it illustrates the sort of minor problem that
arises. Not everything turns up where it ought to. If you find
something that really is not working properly, it is sensible to make
a bug report via the <em class="emphasis">Bug Report</em> link in the
Apache Server Project main menu. But do read the notes there. Make
sure that it is a real bug, not a configuration problem, and look
through the known bug list first so as not to waste everyone's
time.</p>








<p>The result of <em class="emphasis">make</em> was the executable
<em class="filename">httpd</em>. If you run it with:</p>








<blockquote><pre class="code">% <b class="emphasis-bold">./httpd</b></pre></blockquote>








<p>it complains that it:</p>








<blockquote><pre class="code">could not open document config file /usr/local/etc/httpd/conf/httpd.conf</pre></blockquote>








<p>This is not surprising because, at the moment, being where we are,
the Config file doesn't exist. Before we are finished, we will
become very familiar with this file. It is perhaps unfortunate that
it has a name so similar to the <em class="filename">Configuration</em>
file we have been dealing with here, because it is quite different.
We hope that the difference will become apparent later on.</p>
</div>




























<a name="ch01-33999" /><div class="sect2">
<h3 class="sect2">1.8.6. Unix Binary Releases</h3>








<p>
<a name="INDEX-108" />The fairly painless business of compiling
Apache, which is described above, can now be circumvented by
downloading a precompiled binary for the Unix of your choice from
<a href="../../../../../../apache.org/dist/binaries">http://apache.org/dist/binaries</a>. When we went to
press, the following versions of Unix were supported, but check
before you decide (see
ftp://ftp.apache.org/httpd/binaries.html):</p>








<blockquote class="simplelist">

<p>alpha-dec-osf3.0</p>

<p>hppa1.1-hp-hpux </p>

<p>i386-slackware-linux(a.out) </p>

<p>i386-sun-solaris2.5 </p>

<p>i386-unixware-svr4</p>

<p>i386-unknown-bsdi2.0 </p>

<p>i386-unknown-freebsd2.1 </p>

<p>i386-unknown-linux(ELF) </p>

<p>i386-unknown-netBSD </p>

<p>i386-unknown-sco3 </p>

<p>i386-unknown-sco5 </p>

<p>m68k-apple-aux3.1.1 </p>

<p>m88k-dg-dgux5.4R2.01 </p>

<p>m88k-next-next</p>

<p>mips-sgi-irix5.3 </p>

<p>mips-sni-svr4 </p>

<p>rs6000-ibm-aix3.2.5 </p>

<p>sparc-sun-solaris2.4</p>

<p>sparc-sun-solaris2.5 </p>

<p>sparc-sun-sunos4.1.4</p>

<p>sparc-sun-sunos4.1.3_U1 </p>

<p>mips-dec-ultirx4.4 </p>

</blockquote>








<p>Although this route is easier, you do forfeit the opportunity to
configure the modules of your Apache, and you lose the chance to
carry out quite a complex Unix operation, which is in itself
interesting and confidence inspiring if you are not very familiar
with this operating system.</p>
</div>




























<a name="ch01-35631" /><div class="sect2">
<h3 class="sect2">1.8.7. Installing Apache Under Unix</h3>








<p>
<a name="INDEX-109" />Once the excitement of getting Apache to
compile and run died down, we reorganized things in accordance with
the system defaults. We simply copied the executable
<em class="filename">httpd</em>
<a name="INDEX-110" />
to the directory <em class="filename">/usr/local/bin</em> to put it on the
path.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch01_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">1.7. Which Apache?</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">1.9. Apache Under Windows</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>