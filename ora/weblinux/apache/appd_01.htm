<?label D. SSL Protocol ?><html><head><title>SSL Protocol  (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appc_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="appd_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Appendix D. SSL Protocol </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="appd_01.htm">Handshake Protocol</a><br />
<a href="appd_02.htm">Protecting Application Data</a><br />
<a href="appd_03.htm">Final Notes</a><br /></p></div>









<p>
<a name="INDEX-1688" />This appendix reproduces
verbatim the SSL protocol specification from <em class="emphasis">http://
home.netspace.com/newsref/std/ssl.html.</em></p>





<p>The SSL protocol is designed to establish a secure connection between
a client and a server communicating over an insecure channel. This
document makes several traditional assumptions, including that
attackers have substantial computational resources and cannot obtain
secret information from sources outside the protocol. Attackers are
assumed to have the ability to capture, modify, delete, replay, and
otherwise tamper with messages sent over the communication channel.
The following material outlines how SSL has been designed to resist a
variety of attacks.</p>



































<div class="sect1"><a name="appd-1-fm2xml" />
<h2 class="sect1">D.1. Handshake Protocol</h2>





<p>The <a name="INDEX-1689" />handshake protocol is responsible for
selecting a CipherSpec and generating a MasterSecret, which together
comprise the primary cryptographic parameters associated with a
secure session. The handshake protocol can also optionally
authenticate parties who have certificates signed by a trusted
certificate authority.</p>





<a name="appd-2-fm2xml" /><div class="sect2">
<h3 class="sect2">D.1.1. Authentication and Key Exchange</h3>





<p>
<a name="INDEX-1690" /> <a name="INDEX-1691" />SSL
supports three authentication modes: authentication of both parties,
server authentication with an unauthenticated client, and total
anonymity. Whenever the server is authenticated, the channel should
be secure against man-in-the-middle attacks, but completely anonymous
sessions are inherently vulnerable to such attacks. Anonymous servers
cannot authenticate clients, since the client signature in the
certificate verify message may require a server certificate to bind
the signature to a particular server. If the server is authenticated,
its certificate message must provide a valid certificate chain
leading to an acceptable certificate authority. Similarly,
authenticated clients must supply an acceptable certificate to the
server. Each party is responsible for verifying that the
other's certificate is valid and has not expired or been
revoked.</p>





<p>The general goal of the key exchange process is to create a
<em class="emphasis">pre_master_secret</em> known to the communicating
parties and not to attackers. The <em class="emphasis">pre_master_secret
</em>will be used to generate the
<em class="emphasis">master_secret</em>. The
<em class="emphasis">master_secret</em> is required to generate the
finished messages, encryption keys, and MAC secrets. By sending a
correct finished message, parties prove that they know the correct
<em class="emphasis">pre_master_secret</em>.</p>





<a name="appd-3-fm2xml" /><div class="sect3">
<h3 class="sect3">D.1.1.1. Anonymous key exchange</h3>





<p>
<a name="INDEX-1692" />Completely anonymous sessions can be
established using RSA, Diffie-Hellman, or Fortezza for key exchange.
With anonymous RSA, the client encrypts a
<em class="emphasis">pre_master_secret</em> with the server's
uncertified public key extracted from the server key exchange
message. The result is sent in a client key exchange message. Since
eavesdroppers do not know the server's private key, it will be
infeasible for them to decode the
<em class="emphasis">pre_master_secret</em>.</p>





<p>With Diffie-Hellman or Fortezza, the server's public parameters
are contained in the server key exchange message and the
client's are sent in the client key exchange message.
Eavesdroppers who do not know the private values should not be able
to find the Diffie-Hellman result (i.e., the
<em class="emphasis">pre_master_secret</em>) or the Fortezza token
encryption key (TEK).</p>





<a name="appd-4-fm2xml" /><blockquote><h4 class="objtitle">WARNING</h4>

<p>Completely anonymous connections only provide protection against
passive eavesdropping. Unless an independent tamper-proof channel is
used to verify that the finished messages were not replaced by an
attacker, server authentication is required in environments where
active man-in-the-middle attacks are a concern.</p>




</blockquote>
</div>









<a name="appd-5-fm2xml" /><div class="sect3">
<h3 class="sect3">D.1.1.2. RSA key exchange and authentication</h3>





<p>With <a name="INDEX-1693" />RSA, key
exchange and server authentication are combined. The public key may
be either contained in the server's certificate or may be a
temporary RSA key sent in a server key exchange message. When
temporary RSA keys are used, they are signed by the server's
RSA or DSS certificate. The signature includes the current
<em class="emphasis">ClientHello.random</em>, so old signatures and
temporary keys cannot be replayed. Servers may use a single temporary
RSA key for multiple negotiation sessions.</p>





<a name="appd-6-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>The temporary RSA key option is useful if servers need large
certificates but must comply with government-imposed size limits on
keys used for key exchange.</p>
</blockquote>





<p>After verifying the server's certificate, the client encrypts a
<em class="emphasis">pre_master_secret</em> with the server's public
key. By successfully decoding the
<em class="emphasis">pre_master_secret</em> and producing a correct
finished message, the server demonstrates that it knows the private
key corresponding to the server certificate.</p>





<p>When RSA is used for key exchange, clients are authenticated using
the certificate verify message (see Section 7.6.8). The client signs
a value derived from the <em class="emphasis">master_secret</em> and all
preceding handshake messages. These handshake messages include the
server certificate, which binds the signature to the server, and
<em class="emphasis">ServerHello.random</em>, which binds the signature to
the current handshake process.</p>
</div>









<a name="appd-7-fm2xml" /><div class="sect3">
<h3 class="sect3">D.1.1.3. Diffie-Hellman key exchange with authentication</h3>





<p>When <a name="INDEX-1694" />Diffie-Hellman key exchange is used,
the server can either supply a certificate containing fixed
Diffie-Hellman parameters or use the client key exchange message to
send a set of temporary Diffie-Hellman parameters signed with a DSS
or RSA certificate. Temporary parameters are hashed with the
<em class="emphasis">hello.random</em> values before signing to ensure
that attackers do not replay old parameters. In either case, the
client can verify the certificate or signature to ensure that the
parameters belong to the server.</p>





<p>If the client has a certificate containing fixed Diffie-Hellman
parameters, its certificate contains the information required to
complete the key exchange. Note that in this case the client and
server will generate the same Diffie-Hellman result (i.e.,
<em class="emphasis">pre_master_secret</em>) every time they communicate.
To prevent the <em class="emphasis">pre_master_secret</em> from staying in
memory any longer than necessary, it should be converted into the
<em class="emphasis">master_secret</em> as soon as possible. Client
Diffie-Hellman parameters must be compatible with those supplied by
the server for the key exchange to work.</p>





<p>If the client has a standard DSS or RSA certificate or is
unauthenticated, it sends a set of temporary parameters to the server
in the client key exchange message, then optionally uses a
certificate verify message to authenticate itself.</p>
</div>









<a name="appd-8-fm2xml" /><div class="sect3">
<h3 class="sect3">D.1.1.4. Fortezza</h3>





<p>
<a name="INDEX-1695" />Fortezza's design is classified, but
at the protocol level it is similar to Diffie-Hellman with fixed
public values contained in certificates. The result of the key
exchange process is the <a name="INDEX-1696" /> <a name="INDEX-1697" />token encryption key (TEK), which is used
to wrap data encryption keys, client write key, server write key, and
master secret encryption key. The data encryption keys are not
derived from the <em class="emphasis">pre_master_secret</em> because
unwrapped keys are not accessible outside the token. The encrypted
<em class="emphasis">pre_master_secret</em> is sent to the server in a
client key exchange message.<a name="INDEX-1698" /> <a name="INDEX-1699" /></p>
</div>
</div>
















<a name="appd-9-fm2xml" /><div class="sect2">
<h3 class="sect2">D.1.2. Version Rollback Attacks </h3>





<p>
<a name="INDEX-1700" /> <a name="INDEX-1701" />Because SSL Version 3.0 includes
substantial improvements over SSL Version 2.0, attackers may try to
make Version 3.0-capable clients and servers fall back to Version
2.0. This attack occurs if (and only if) two Version 3.0-capable
parties use an SSL 2.0 handshake.</p>





<p>Although the solution using non-random PKCS #1 block type 2 message
padding is inelegant, it provides a reasonably secure way for Version
3.0 servers to detect the attack. This solution is not secure against
attackers who can brute force the key and substitute a new
ENCRYPTED-KEY-DATA message containing the same key (but with normal
padding) before the application-specified wait threshold has expired.
Parties concerned about attacks of this scale should not be using
40-bit encryption keys anyway. Altering the padding of the least
significant 8 bytes of the PKCS padding does not impact security,
since this is essentially equivalent to increasing the input block
size by 8 bytes.</p>
</div>
















<a name="appd-10-fm2xml" /><div class="sect2">
<h3 class="sect2">D.1.3. Detecting Attacks Against the Handshake Protocol</h3>





<p>An attacker might try to influence the handshake exchange to make the
parties select different encryption algorithms than they would
normally choose. Because many implementations will support 40-bit
exportable encryption and some may even support null encryption or
<a name="INDEX-1702" />MAC
algorithms, this attack is of particular concern.</p>





<p>For this attack, an attacker must actively change one or more
handshake messages. If this occurs, the client and server will
compute different values for the handshake message hashes. As a
result, the parties will not accept each others' finished
messages. Without the <em class="emphasis">master_secret</em>, the
attacker cannot repair the finished messages, so the attack will be
discovered.</p>
</div>
















<a name="appd-11-fm2xml" /><div class="sect2">
<h3 class="sect2">D.1.4. Resuming Sessions</h3>





<p>
<a name="INDEX-1703" />
<a name="INDEX-1704" />When a
connection is established by resuming a session, new
<em class="emphasis">ClientHello.random</em> and
<em class="emphasis">ServerHello.random</em> values are hashed with the
session's <em class="emphasis">master_secret</em>. Provided that the
<em class="emphasis">master_secret</em> has not been compromised and that
the hash operations used to produce the encryption keys and MAC
secrets are secure, the connection should be secure and effectively
independent from previous connections. Attackers cannot use known
encryption keys or MAC secrets to compromise the
<em class="emphasis">master_secret</em> without breaking the secure hash
operations (which use both SHA and MD5).</p>





<p>Sessions cannot be resumed unless both the client and server agree.
If either party suspects that the session may have been compromised,
or that certificates may have expired or been revoked, it should
force a full handshake. An upper limit of 24 hours is suggested for
session ID lifetimes, since an attacker who obtains a
<em class="emphasis">master_secret</em> may be able to impersonate the
compromised party until the corresponding session ID is retired.
Applications that may be run in relatively insecure environments
should not write session IDs to stable storage.</p>
</div>
















<a name="appd-12-fm2xml" /><div class="sect2">
<h3 class="sect2">D.1.5. MD5 and SHA</h3>





<p>SSL uses hash functions very conservatively. Where possible, both MD5
and SHA are used in tandem to ensure that non-catastrophic flaws in
one algorithm will not break the overall protocol.<a name="INDEX-1705" /></p>
</div>
</div>






































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="appc_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="appd_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">C. NCSA and Apache Compatibility </td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">D.2. Protecting Application Data</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>