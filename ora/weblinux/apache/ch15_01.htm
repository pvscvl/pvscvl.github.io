<?label 15. Writing Apache Modules?><html><head><title>Writing Apache Modules (Apache: The Definitive Guide)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Ben Laurie and Peter Laurie" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565925289L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Apache: The Definitive Guide" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="Apache: The Definitive Guide" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch14_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">Apache: The Definitive Guide</a></td><td width="172" valign="top" align="right"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 15. Writing Apache Modules</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch15_01.htm">Overview</a><br />
<a href="ch15_02.htm">Status Codes</a><br />
<a href="ch15_03.htm">The Module Structure</a><br />
<a href="ch15_04.htm">A Complete Example</a><br />
<a href="ch15_05.htm">General Hints</a><br /></p></div>









<p>
<a name="INDEX-1568" />
<a name="INDEX-1569" />
<a name="INDEX-1570" />One
of the great things about Apache is that if you don't like what
it does, you can change it. Now, this is true for any package with
source code available, but Apache is different. It has a generalized
interface to modules that extends the functionality of the base
package. In fact, when you download Apache you get far more than just
the base package, which is barely capable of serving files at all.
You get all the modules the Apache Group considers vital to a web
server. You also get modules that are useful enough to most people to
be worth the effort of the Group to maintain them.</p>





<p>In this chapter, we explore the intricacies of programming modules
for Apache.<a href="#FOOTNOTE-79">[79]</a> We expect you to be thoroughly
conversant in C and Unix (or Win32), because we are not going to
explain anything about them. Refer to <a href="ch14_01.htm">Chapter 14, "The Apache API"</a>,
or your Unix/Win32 manuals for information about functions used in
the examples. We also assume that you are familiar with the HTTP/1.1
specification, where relevant. Fortunately, for many purposes, you
don't have to know much about HTTP/1.1.</p><blockquote>




<a name="FOOTNOTE-79" /><p>[79]For more on Apache modules, see
<em class="emphasis">Writing Apache Modules with Perl and C</em>, by
Lincoln Stein and Doug MacEachern (O'Reilly &amp;
Associates).</p>




</blockquote>



































<div class="sect1"><a name="ch15-40824" />
<h2 class="sect1">15.1. Overview</h2>





<p>Perhaps the most important part of an Apache module is the
<tt class="literal">module</tt>
<a name="INDEX-1571" /> structure. This is defined in
<em class="filename">http_config.h</em>, so all modules should start
(apart from copyright notices, etc.) with the following lines:</p>





<blockquote><pre class="code">#include "httpd.h"
#include "http_config.h"</pre></blockquote>





<p>Note that <em class="filename">httpd.h</em> is required for all Apache
source code.</p>





<p>What is the <tt class="literal">module</tt> structure for? Simple: It
provides the glue between the Apache core and the module's
code. It contains pointers (to functions, lists, and so on) that are
used by components of the core at the correct moments. The core knows
about the various <tt class="literal">module</tt> structures because they
are listed in <em class="filename">modules.c</em>, which is generated by
the <em class="emphasis">Configure</em> script from the
<em class="filename">Configuration</em> file.<a href="#FOOTNOTE-80">[80]</a></p><blockquote>




<a name="FOOTNOTE-80" /><p>[80]Which means,
of course, that one should not edit <em class="filename">modules.c</em> by
hand. Rather, the <em class="filename">Configuration</em> file should be
edited; see <a href="ch01_01.htm">Chapter 1, "Getting Started"</a>.</p>




</blockquote>





<p>Traditionally, each module ends with its <tt class="literal">module</tt>
structure. Here is a particularly trivial example, from
<em class="filename">mod_asis.c</em>:</p>





<blockquote><pre class="code">module asis_module = {
   STANDARD_MODULE_STUFF,
   NULL,                          /* initializer */
   NULL,                          /* create per-directory config structure */
   NULL,                          /* merge per-directory config structures */
   NULL,                          /* create per-server config structure */
   NULL,                          /* merge per-server config structures */
   NULL,                          /* command table */
   asis_handlers,                 /* handlers */
   NULL,                          /* translate_handler */
   NULL,                          /* check_user_id */
   NULL,                          /* check auth */
   NULL,                          /* check access */
   NULL,                          /* type_checker */
   NULL,                          /* prerun fixups */
   NULL                           /* logger */
   NULL,                          /* header parser */
   NULL,                          /* child_init */
   NULL,                          /* child_exit */
   NULL                           /* post read request */
};</pre></blockquote>





<p>The first entry, <tt class="literal">STANDARD_MODULE_STUFF</tt>, must
appear in all <tt class="literal">module</tt> structures. It initializes
some structure elements that the core uses to manage modules.
Currently, these are the API version number,<a href="#FOOTNOTE-81">[81]</a> the index of the module
in various vectors, the name of the module (actually its filename),
and a pointer to the next <tt class="literal">module</tt> structure in a
linked list of all modules.<a href="#FOOTNOTE-82">[82]</a></p><blockquote>




<a name="FOOTNOTE-81" /><p>[81]Used, in
theory, to adapt to old precompiled modules that used an earlier
version of the API. We say "in theory" because it is not
used this way in practice.</p>




</blockquote><blockquote>




<a name="FOOTNOTE-82" /><p>[82]The head of this list is
<tt class="literal">top_module</tt>. This is occasionally useful to know.
The list is actually set up at runtime.</p>




</blockquote>





<p>
<a name="INDEX-1572" />The only other
entry is for <tt class="literal">handlers</tt>. We will look at this in
more detail further on. Suffice it to say, for now, that this entry
points to a list of strings and functions that define the
relationship between MIME or handler types and the functions that
handle them. All the other entries are defined to
<tt class="literal">NULL</tt>, which simply means that the module does not
use those particular hooks.</p>
</div>










































































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch14_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">14.6. Functions</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">15.2. Status Codes</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="index.htm" coords="238,2,334,95" shape="rect" /><area href="../sql/index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>