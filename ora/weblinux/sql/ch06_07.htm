<?label 6.7. Queries?><html><head><title>Queries (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch06_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch06_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">6.7. Queries</h2>





<p>
<a name="INDEX-530" />
<a name="INDEX-531" />The
last common SQL command used is the one that enables you to view the
data in the database: <tt class="literal">SELECT</tt>. This action is by
far the most common action performed in SQL. While data entry and
modifications do happen on occasion, most databases spend the vast
majority of their lives serving up data for reading. The general form
of the <tt class="literal">SELECT</tt> statement is as follows:</p>





<blockquote><pre class="code">SELECT <em class="replaceable">column1</em>, <em class="replaceable">column2</em>, <em class="replaceable">...</em>, <em class="replaceable">columnN</em> 
FROM <em class="replaceable">table1</em>, <em class="replaceable">table2</em>, <em class="replaceable">...</em>, <em class="replaceable">tableN</em>
[WHERE <em class="replaceable">clause</em>]</pre></blockquote>





<p>This syntax is certainly the most common way in which you will
retrieve data from any SQL database. Of course, there are variations
for performing complex and powerful queries, especially under MySQL.
We cover the full range of the <tt class="literal">SELECT</tt> syntax in
<a href="ch15_01.htm">Chapter 15, "SQL Reference"</a>.</p>





<p>The first part of a <tt class="literal">SELECT</tt> statement enumerates
the columns you wish to retrieve. You may specify a
"<tt class="literal">*</tt>" to say that you want to select all
columns. The <tt class="literal">FROM</tt> clause specifies which tables
those columns come from. The <tt class="literal">WHERE</tt> clause
identifies the specific rows to be used and enables you to specify
how to join two tables.</p>





<a name="ch06-21-fm2xml" /><div class="sect2">
<h3 class="sect2">6.7.1. Joins</h3>





<p>Joins put the "relational" in relational databases.
Specifically, a join enables you to match a row from one table up
with a row in another table. The basic form of a join is what you may
hear sometimes described as an <em class="emphasis">inner
join</em>
<a name="INDEX-532" />.
Joining tables is a matter of specifying equality in columns from two
tables:</p>





<blockquote><pre class="code">SELECT <em class="replaceable">book.title</em>, <em class="replaceable">author.name</em> 
FROM <em class="replaceable">author</em>, <em class="replaceable">book</em>
WHERE <em class="replaceable">book.author</em> = <em class="replaceable">author.id</em></pre></blockquote>





<p>Consider a database where the <tt class="literal">book</tt> table looks
like <a href="ch06_07.htm">Table 6-1</a>.</p>





<a name="ch06-34665" /><h4 class="objtitle">Table 6-1. A book Table</h4><table border="1">





<tr>
<th>
<p>ID</p></th>
<th>
<p>Title</p></th>
<th>
<p>Author</p></th>
<th>
<p>Pages</p></th>
</tr>










<tr>
<td>
<p>1</p></td>
<td>
<p>The Green Mile</p></td>
<td>
<p>4</p></td>
<td>
<p>894</p></td>
</tr>




<tr>
<td>
<p>2</p></td>
<td>
<p>Guards, Guards!</p></td>
<td>
<p>2</p></td>
<td>
<p>302</p></td>
</tr>




<tr>
<td>
<p>3</p></td>
<td>
<p>Imzadi</p></td>
<td>
<p>3</p></td>
<td>
<p>354</p></td>
</tr>




<tr>
<td>
<p>4</p></td>
<td>
<p>Gold</p></td>
<td>
<p>1</p></td>
<td>
<p>405</p></td>
</tr>




<tr>
<td>
<p>5</p></td>
<td>
<p>Howling Mad</p></td>
<td>
<p>3</p></td>
<td>
<p>294</p></td>
</tr>





</table>





<p>And the <tt class="literal">author</tt> table looks like <a href="ch06_07.htm">Table 6-2</a>.</p>







<p>An inner join creates a table by combining the fields of both tables for rows that satisfy the query in both tables. In our example, the query specifies that the <tt class="literal">author</tt> field of the <tt class="literal">book</tt> table must be identical to the <tt class="literal">id</tt> field of the <tt class="literal">author</tt> table. The query's result would thus look like <a href="ch06_07.htm">Table 6-3</a>.</p>





<a name="ch06-14180" /><h4 class="objtitle">Table 6-2. An author Table</h4><table border="1">




<tr>
<th>
<p>ID</p></th>
<th>
<p>Name</p></th>
<th>
<p>Citizen</p></th>
</tr>










<tr>
<td>
<p>1</p></td>
<td>
<p>Isaac Asimov</p></td>
<td>
<p>US</p></td>
</tr>




<tr>
<td>
<p>2</p></td>
<td>
<p>Terry Pratchet</p></td>
<td>
<p>UK</p></td>
</tr>




<tr>
<td>
<p>3</p></td>
<td>
<p>Peter David</p></td>
<td>
<p>US</p></td>
</tr>




<tr>
<td>
<p>4</p></td>
<td>
<p>Stephen King</p></td>
<td>
<p>US</p></td>
</tr>




<tr>
<td>
<p>5</p></td>
<td>
<p>Neil Gaiman</p></td>
<td>
<p>UK</p></td>
</tr>





</table>





<p>An inner join creates a table by combining the fields of both tables
for rows that satisfy the query in both tables. In our example, the
query specifies that the <tt class="literal">author</tt> field of the
<tt class="literal">book</tt> table must be identical to the
<tt class="literal">id</tt> field of the <tt class="literal">author</tt> table.
The query's result would thus look like <a href="ch06_07.htm">Table 6-3</a>.</p>





<p>Neil Gaiman is nowhere to be found in these results. He is left out because there is no value for his <tt class="literal">author.id</tt> value found in the <tt class="literal">book.author</tt> table. An inner join only contains those rows that exactly match the query. We will discuss the concept of an outer join later in the chapter for situations where we would be interested in the fact that we have an author in the database who does not have a book in the database.</p>





<a name="ch06-26161" /><h4 class="objtitle">Table 6-3. Query Results Based on an Inner Join</h4><table border="1">



<tr>
<th>
<p>Book Title</p></th>
<th>
<p>Author Name</p></th>
</tr>










<tr>
<td>
<p>The Green Mile</p></td>
<td>
<p>Stephen King</p></td>
</tr>




<tr>
<td>
<p>Guards, Guards!</p></td>
<td>
<p>Terry Pratchet</p></td>
</tr>




<tr>
<td>
<p>Imzadi</p></td>
<td>
<p>Peter David</p></td>
</tr>




<tr>
<td>
<p>Gold</p></td>
<td>
<p>Isaac Asimov</p></td>
</tr>




<tr>
<td>
<p>Howling Mad</p></td>
<td>
<p>Peter David</p></td>
</tr>





</table>





<p>Neil Gaiman is nowhere to be found in these results. He is left out
because there is no value for his <tt class="literal">author.id</tt> value
found in the <tt class="literal">book.author</tt> table. An
<a name="INDEX-533" />inner join only
contains those rows that exactly match the query. We will discuss the
concept of an outer join later in the chapter for situations where we
would be interested in the fact that we have an author in the
database who does not have a book in the database.</p>
</div>
















<a name="ch06-22-fm2xml" /><div class="sect2">
<a name="INDEX-534" /><h3 class="sect2">6.7.2. Aliasing</h3>





<p>When you use column names that are fully qualified with their table
and column name, the names can grow to be quite unwieldy. In
addition, when referencing SQL functions, which will be discussed
later in the chapter, you will likely find it cumbersome to refer to
the same function more than once within a statement. The aliased
name, usually shorter and more descriptive, can be used anywhere in
the same SQL statement in place of the longer name. For example:</p>





<blockquote><pre class="code"># A column alias
SELECT long_field_names_are_annoying AS myfield
FROM table_name
WHERE myfield = 'Joe'
# A table alias under MySQL
SELECT people.names, tests.score 
FROM tests, really_long_people_table_name AS people
# A table alias under mSQL
SELECT people.names, tests.score
FROM tests, really_long_people_table_name=people</pre></blockquote>





<p>While mSQL fully supports table aliasing, it does not support column
aliasing.</p>
</div>
















<a name="ch06-23-fm2xml" /><div class="sect2">
<a name="INDEX-535" /><a name="INDEX-536" /><a name="INDEX-537" /><h3 class="sect2">6.7.3. Grouping and Ordering

</h3>





<p>The results you get back from a select are, by default, indeterminate
in the order they will appear. Fortunately, SQL provides some tools
for imposing order on this seemingly random list. The first
tool -- available in both MySQL and mSQL -- is ordering. You
can tell a database that it should order any results you see by a
certain column. For example, if you specify that a query should order
the results by <tt class="literal">last_name</tt>, then the results will
appear alphabetized according to the <tt class="literal">last_name</tt>
value. Ordering comes in the form of the <tt class="literal">ORDER BY</tt>
clause:</p>





<blockquote><pre class="code">SELECT <em class="replaceable">last_name</em>, <em class="replaceable">first_name</em>, <em class="replaceable">age</em>
FROM <em class="replaceable">people</em>
ORDER BY <em class="replaceable">last_name</em>, <em class="replaceable">first_name</em></pre></blockquote>





<p>In this situation, we are ordering by two columns. You can order by
any number of columns, but the columns must be named in the
<tt class="literal">SELECT</tt> clause. If we had failed to select the
<tt class="literal">last_name</tt> above, we could not have ordered by the
<tt class="literal">last_name</tt> field.</p>





<p>Grouping is an ANSI SQL tool that MySQL implements but mSQL does not.
Because mSQL does not have any concept of aggregate functions,
grouping simply does not make sense in mSQL. As its name implies,
grouping lets you group rows with a similar value into a single row
in order to operate on them together. You usually do this to perform
aggregate functions on the results. We will go into functions a
little later in the chapter.</p>





<p>Consider the following:</p>





<blockquote><pre class="code">mysql&gt; <b class="emphasis-bold">SELECT name, rank, salary FROM people\g</b></pre></blockquote>




<blockquote><pre class="code">+--------------+----------+--------+
| name         | rank     | salary |
+--------------+----------+--------+
| Jack Smith   | Private  |  23000 |
| Jane Walker  | General  | 125000 |
| June Sanders | Private  |  22000 |
| John Barker  | Sargeant |  45000 |
| Jim Castle   | Sargeant |  38000 |
+--------------+----------+--------+
5 rows in set (0.01 sec)</pre></blockquote>





<p>If you group the results by rank, the output changes:</p>





<blockquote><pre class="code">mysql&gt; <b class="emphasis-bold">SELECT rank FROM people GROUP BY rank\g</b></pre></blockquote>




<blockquote><pre class="code">+----------+
| rank     |
+----------+
| General  |
| Private  |
| Sargeant |
+----------+
3 rows in set (0.01 sec)</pre></blockquote>





<p>Now that you have the output grouped, you can finally find out the
average salary for each rank. Again, we will discuss more on the
functions you see in this example later in the chapter.</p>





<blockquote><pre class="code">mysql&gt; <b class="emphasis-bold">SELECT rank, AVG(salary) FROM people GROUP BY rank\g</b></pre></blockquote>




<blockquote><pre class="code">+----------+-------------+
| rank     | AVG(salary) |
+----------+-------------+
| General  | 125000.0000 |
| Private  |  22500.0000 |
| Sargeant |  41500.0000 |
+----------+-------------+
3 rows in set (0.04 sec)</pre></blockquote>





<p>The power of ordering and grouping combined with the utility of SQL
functions enables you to do a great deal of data manipulation even
before you retrieve the data from the server. You should take great
care not to rely too heavily on this power. While it may seem like an
efficiency gain to place as much processing load as possible onto the
database server, it is not really the case. Your client application
is dedicated to the needs of a particular client, while the server is
being shared by many clients. Because of the greater amount of work a
server already has to do, it is almost always more efficient to place
as little load as possible on the database server. MySQL and mSQL may
be two of the fastest databases around, but you do not want to waste
that speed on processing that a client application is better equipped
to manage.<a name="INDEX-538" />
<a name="INDEX-539" /></p>





<p>If you know that a lot of clients will be asking for the same summary
information often (for instance, data on a particular rank in our
previous example), just create a new table containing that
information and keep it up to date as the original tables change.
This is similar to caching and is a common database programming
technique.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch06_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch06_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">6.6. Managing Data</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">6.8. Extended Functionality
</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>