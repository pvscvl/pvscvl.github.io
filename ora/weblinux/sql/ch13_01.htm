<?label 13. C and C++?><html><head><title>C and C++ (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch12_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch13_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 13. C and C++</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch13_01.htm">The Two APIs
</a><br />
<a href="ch13_02.htm">Object-oriented Database Access in C++</a><br /></p></div>










<p>In this book, we examine several different programming languages,
Python, Java, Perl, and C. Of these languages, C/C++ is by far the
most challenging. With the other languages, your primary concern is
the formulation of SQL, the passing of that SQL to a function call,
and the manipulation of the resulting data. C adds the very complex
issue of memory management into the mix.</p>





<p>Both <a name="INDEX-757" />
<a name="INDEX-758" />
<a name="INDEX-759" />MySQL and mSQL
provide C libraries that enable the creation of MySQL and mSQL
database applications. In fact, MySQL derives its API very heavily
from mSQL, meaning that experience programming against one API
translates well to the next. As we explored in the first section,
however, MySQL is much more feature-rich than mSQL. These extra
features naturally result in a few differences between the two APIs.
In this chapter, we will examine these differences while coming to
understand the details of each API by building an object-oriented C++
API that can be conditionally compiled to run with either API.</p>



































<div class="sect1"><a name="ch13-35888" />
<a name="INDEX-760" /><a name="INDEX-761" /><h2 class="sect1">13.1. The Two APIs
</h2>





<p>Whether you are using C or C++, the MySQL and mSQL C APIs are your
gateway into the database. How you use them, however, can be very
different depending on whether you are using C or the object-oriented
features of C++. C database programming must be attacked in a linear
fashion, where you step through your application process to
understand where the database calls are made and where clean up needs
to occur. <a name="INDEX-762" />Object-oriented C++, on the other hand,
requires an OO interface into the API of your choice. The objects of
that API can then take on some of the responsibility for database
resource management.</p>





<p><a href="ch13_01.htm">Table 13-1</a> shows the function calls of each API
side by side. We will go into the details of how these functions are
used later in the chapter. Right now, you should just take a minute
to see how the two APIs compare and note what is available to you.
Naturally, the reference section lists each of these methods with
detailed prototype information, return values, and descriptions.</p>





<a name="ch13-41130" /><h4 class="objtitle">Table 13-1. The C APIs for MySQL and mSQL </h4><table border="1">



<tr>
<th>
<p>MySQL</p></th>
<th>
<p>mSQL</p></th>
</tr>










<tr>
<td>
<p>mysql_affected_rows()</p></td>
<td>
<p>See msqlQuery()</p></td>
</tr>




<tr>
<td>
<p>mysql_close()</p></td>
<td>
<p>msqlClose()</p></td>
</tr>




<tr>
<td>
<p>mysql_connect()</p></td>
<td>
<p>msqlConnect()</p></td>
</tr>




<tr>
<td>
<p>myql_create_db()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_data_seek()</p></td>
<td>
<p>msqlDataSeek()</p></td>
</tr>




<tr>
<td>
<p>mysql_drop_db()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_eof()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_error()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_fetch_field()</p></td>
<td>
<p>msqlFetchField()</p></td>
</tr>




<tr>
<td>
<p>mysql_fetch_lengths()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_fetch_row()</p></td>
<td>
<p>msqlFetchRow()</p></td>
</tr>




<tr>
<td>
<p>mysql_field_count()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_field_seek()</p></td>
<td>
<p>msqlFieldSeek()</p></td>
</tr>




<tr>
<td>
<p>mysql_free_result()</p></td>
<td>
<p>msqlFreeResult()</p></td>
</tr>




<tr>
<td>
<p>mysql_get_client_info()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_get_host_info()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_get_proto_info()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_get_server_info()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_init()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_insert_id()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_list_dbs()</p></td>
<td>
<p>msqlListDBs()</p></td>
</tr>




<tr>
<td>
<p>mysql_list_fields()</p></td>
<td>
<p>msqlListFields()</p></td>
</tr>




<tr>
<td />
<td>
<p>msqlListIndex()</p></td>
</tr>




<tr>
<td>
<p>mysql_list_processes()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_list_tables()</p></td>
<td>
<p>msqlListTables()</p></td>
</tr>




<tr>
<td>
<p>mysql_num_fields()</p></td>
<td>
<p>msqlNumFields()</p></td>
</tr>




<tr>
<td>
<p>mysql_num_rows()</p></td>
<td>
<p>msqlNumRows()</p></td>
</tr>




<tr>
<td>
<p>mysql_query()</p></td>
<td>
<p>msqlQuery()</p></td>
</tr>




<tr>
<td>
<p>mysql_real_query()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_reload()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_select_db()</p></td>
<td>
<p>msqlSelectDB()</p></td>
</tr>




<tr>
<td>
<p>mysql_shutdown()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_stat()</p></td>
<td />
</tr>




<tr>
<td>
<p>mysql_store_result()</p></td>
<td>
<p>msqlStoreResult()</p></td>
</tr>




<tr>
<td>
<p>mysql_use_result()</p></td>
<td />
</tr>





</table>





<p>The MySQL API is much larger than the mSQL API in order to account
for MySQL's extended feature set. In many cases, MySQL is
actually only providing an API interface into database administration
functions that are present in both database engines. By just reading
the function names, you might have gathered that any database
application you write might minimally look something like this:</p>





<ol><li><p>Connect</p></li><li><p>Select DB</p></li><li><p>Query</p></li><li><p>Fetch row</p></li><li><p>Fetch field</p></li><li><p>Close</p></li></ol>

<p><a href="ch13_01.htm">Example 13-1</a> shows a simple select statement that
retrieves data from a MySQL
<a name="INDEX-763" />database
using the MySQL C API.</p>





<a name="ch13-12418" /><div class="example">
<h4 class="objtitle">Example 13-1. A Simple Program that Selects All Data in a Test Database and Displays   the Data </h4>




<blockquote><pre class="code">#include &lt;sys/time.h&gt;
#include &lt;stdio.h&gt;
#include &lt;mysql.h&gt;

int main(char **args) {
    MYSQL_RES *result;
    MYSQL_ROW row;
    MYSQL *connection, mysql;
    int state;
    
     /* connect to the mySQL database at athens.imaginary.com */
    mysql_init(&amp;mysql);
    connection = mysql_real_connect(&amp;mysql,
                                    "athens.imaginary.com",
                                    0, 0,
                                    "db_test", 0, 0);
    /* check for a connection error */
    if( connection == NULL ) {
        /* print the error message */
        printf(mysql_error(&amp;mysql));
        return 1;
    }
    state = mysql_query(connection, 
                        "SELECT test_id, test_val FROM test");
    if( state != 0 ) {
        printf(mysql_error(connection));
        return 1;
    }
    /* must call mysql_store_result() before we can issue any
     * other query calls
     */  
    result = mysql_store_result(connection);
    printf("Rows: %d\n", mysql_num_rows(result));
    /* process each row in the result set */
    while( ( row = mysql_fetch_row(result)) != NULL ) {
        printf("id: %s, val: %s\n", 
               (row[0] ? row[0] : "NULL"), 
               (row[1] ? row[1] : "NULL"));
    }
    /* free the result set */
    mysql_free_result(result);
    /* close the connection */
    mysql_close(connection);
    printf("Done.\n");
}</pre></blockquote>
</div>





<p>Of the <tt class="literal">#include</tt>
<a name="INDEX-764" />
<a name="INDEX-765" /> files, both
<em class="emphasis">mysql.h</em> and <em class="emphasis">stdio.h</em> should
be obvious to you. The <em class="emphasis">mysql.h</em> header contains
the prototypes and variables required for MySQL, and
<em class="emphasis">stdio.h</em> the prototype for
<tt class="literal">printf()</tt>. The <em class="emphasis">sys/time.h</em>
header, on the other hand, is not actually used by this application.
It is instead required by the <em class="emphasis">mysql.h</em> header as
the MySQL file uses definitions from <em class="emphasis">sys/time.h</em>
without actually including it. To compile this program using the
<a name="INDEX-766" />GNU C
compiler, use the command line:</p>





<blockquote><pre class="code">gcc -L/usr/local/mysql/lib -I/usr/local/mysql/include -o select select.c\ -lmysql -lnsl -lsocket</pre></blockquote>





<p>You should of course substitute the directory where you have MySQL
installed for <em class="emphasis">/usr/local/mysql</em> in the preceding
code.</p>





<p>The <tt class="literal">main()</tt> function follows the steps we outlined
earlier -- it connects to the server, selects a database, issues a
query, processes the result sets, and cleans up the resources it
used. We will cover each of these steps in detail as the chapter
progresses. For now, you should just take the time to read the code
and get a feel for what it is doing. In addition, compare it to the
same program written for mSQL shown in <a href="ch13_01.htm">Example 13-2</a>.<a href="#FOOTNOTE-18">[18]</a></p><blockquote>




<a name="FOOTNOTE-18" /><p>[18]MySQL comes with a utility
called msql2mysql which ostensibly converts any application written
against the mSQL API to the MySQL API. It does provide a start at
converting mSQL applications, but it leaves a bit of work to be done
since MySQL requires extra arguments to some functions.</p>




</blockquote>





<a name="ch13-31318" /><div class="example">
<h4 class="objtitle">Example 13-2. The Simple Select Application for mSQL </h4>

<a name="INDEX-767" />



<blockquote><pre class="code">#include &lt;sys/time.h&gt;
#include &lt;stdio.h&gt;
#include &lt;msql.h&gt;

int main(char **args) {
    int connection, state;
    m_result *result;
    m_row row;

    /* connect to the mSQL database at athens.imaginary.com */
    state = msqlConnect("athens.imaginary.com");
    /* check for a connection error */
    if( state == -1 ) {
        /* print the error message stored in MsqlErrMsg */
        printf(msqlErrMsg);
        return 1;
    }
    else {
        /* the return balue from msqlConnect() is our connection handle */
        connection = state;
    }
    /* select which database to use on the server */
    state = msqlSelectDB(connection, "db_test");
    /* again, -1 means an error */
    if( state == -1 ) {
        printf(msqlErrMsg);
        /* close up our connection before exiting */
        msqlClose(connection);
        return 1;
    }
    state = msqlQuery(connection, "SELECT test_id, test_val FROM test");
    if( state == -1 ) {
        printf(msqlErrMsg);
        return 1;
    }
    else {
        printf("Rows: %d\n", state);
    }
    /* must call msqlStoreResult() before we can issue any
     * other Query() calls
     */  
    result = msqlStoreResult();
    /* process each row in the result set */
    while( ( row = msqlFetchRow(result)) != NULL ) {
        printf("id: %s, val: %s\n", 
               (row[0] ? row[0] : "NULL"), 
               (row[1] ? row[1] : "NULL"));
    }
    /* free the result set */
    msqlFreeResult(result);
    /* close the connection */
    msqlClose(connection);
    printf("Done.\n");
}</pre></blockquote>
</div>





<p>The two programs are nearly identical. Other than name differences,
there are only a few really dramatic distinguishing features. The
most striking difference is the database connection. There are two
main qualities of this difference:</p>





<ul><li><p>MySQL is a one-step connect process, where mSQL is a two step
process.<a href="#FOOTNOTE-19">[19]</a></p><blockquote>




<a name="FOOTNOTE-19" /><p>[19]MySQL does support a connection process that
directly mirrors the mSQL connection process. If you want, you can
use <tt class="literal">mysql_connect()</tt>
<a name="INDEX-768" />
<a name="INDEX-769" /> followed by
<tt class="literal">mysql_select_db()</tt> to make a connection along the
mSQL model. Unless you are trying to quickly port an application from
mSQL, however,
<tt class="literal">mysql_real_connect()</tt>
<a name="INDEX-770" /> is really the proper way to make a
connection.</p>




</blockquote></li><li><p>MySQL looks for a user name and password. mSQL does not.</p></li></ul>
<p>As we discussed earlier in the book, MySQL supports a complex level
of user authentication with user name and password combinations.
mSQL, on the other hand, has a simple authentication scheme based on
the user ID of the process connecting to the database. The more
robust MySQL scheme is much more desirable in a client/server
environment, but it is also much harder to manage as an
administrator. For application developers, the result is the need to
pass a user name and password to the
<tt class="literal">mysql_real_connect()</tt> call when using MySQL in
addition to the basic server name used in mSQL.</p>





<p>The first argument of the
<a name="INDEX-771" />
<a name="INDEX-772" />connection API for MySQL is peculiar at
first inspection. It is basically a way to track all calls not
otherwise associated with a connection. For example, if you try to
connect and the attempt fails, you need to get the error message
associated with that failure. The <a name="INDEX-773" />MySQL
<tt class="literal">mysql_error()</tt> function, however, requires a
pointer to a valid MySQL connection. The null connection you allocate
early on provides that connection. You must, however, have a valid
reference to that value for the lifetime of your application -- an
issue of great importance in more structured environment than a
straight "connect, query, close" application. The C++
examples later in the chapter will shed more light on this issue.</p>





<p>The other two major API distinctions lie in the way
<a name="INDEX-774" />error handling is done and result set
counting is done. The mSQL API creates a global variable that stores
error messages. Because MySQL is multithreaded, such a global error
variable would not function for its API. It, therefore, uses the
<tt class="literal">mysql_error()</tt>
<a name="INDEX-775" /> function to retrieve error messages
associated with the last error raised for the specified connection.</p>





<p>The connection API and error handling are two places where MySQL
differs from mSQL in order to provide functionality not found in
mSQL. Result set counting is done differently in mSQL in order to
provide a better interface than MySQL provides. Specifically, when
you send SQL to <tt class="literal">msqlQuery()</tt>, the number of
affected rows is returned as the return value (or -1 if an error
occurred). Counting affected rows for updates versus rows in a result
set for
<a name="INDEX-776" />
<a name="INDEX-777" />
<a name="INDEX-778" />queries
thus uses the same paradigm. In MySQL, however, you have to use
different paradigms for dealing with queries than with result sets.
For queries, you pass the result set to
<tt class="literal">mysql_num_rows()</tt>
<a name="INDEX-779" /> to get the number of rows in the result
set. Updates, on the other hand, require you to call another API,
<tt class="literal">mysql_affected_rows()</tt>. Where
<tt class="literal">msqlQuery()</tt> provides the number of rows matched by
the <tt class="literal">WHERE</tt>
<a name="INDEX-780" /> clause in an update,
<tt class="literal">mysql_affected_rows()</tt> actually reports the number
of changed rows. As a final note, mSQL does provide a
<tt class="literal">msqlNumRows()</tt>
<a name="INDEX-781" /> method that provides the same interface
for result set counting that MySQL provides. It does not provide a
counterpart to <tt class="literal">mysql_affected_rows()</tt>.<a name="INDEX-782" />
<a name="INDEX-783" />
<a name="INDEX-784" /></p>
</div>




































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch12_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch13_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">12.4. Embedded Perl
</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">13.2. Object-oriented Database Access in C++</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>