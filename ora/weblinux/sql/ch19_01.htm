<?label 19. C Reference?><html><head><title>C Reference (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch18_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch19_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 19. C Reference</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch19_01.htm">MySQL C API
</a><br />
<a href="ch19_02.htm">mSQL C API
</a><br /></p></div>





<div class="sect1"><a name="ch19-94702-1" />
<a name="INDEX-1835" /><a name="INDEX-1836" /><h2 class="sect1">19.1. MySQL C API
</h2>





<p>The MySQL C API uses several defined datatypes beyond the standard C
types. These types are defined in the `mysql.h' header
file that must be included when compiling any program that uses the
MySQL library.</p>





<a name="ch19-1-fm2xml" /><div class="sect2">
<a name="INDEX-1837" /><a name="INDEX-1838" /><h3 class="sect2">19.1.1. Datatypes
</h3>





<dl>
<dt><b><tt class="literal">MYSQL</tt>
<a name="INDEX-1839" /><em class="emphasis"> </em></b></dt>
<dd><p>A structure representing a connection to the database server. The
elements of the structure contain the name of the current database
and information about the client connection among other things.</p></dd>





<dt><b><tt class="literal">MYSQL_FIELD</tt></b></dt>
<dd><p>A structure containing all of the information concerning a specific
field in the table. Of all of the types created for MySQL, this is
the only one whose member variables are directly accessed from client
programs. Therefore it is necessary to know the layout of the
structure:</p>






<dl>
<dt><b>char *name</b></dt>
<dd><p>The name of the field.</p></dd>





<dt><b>char *table</b></dt>
<dd><p>The name of the table containing this field. For result sets that do not correspond to real tables, this value is null.</p></dd>





<dt><b>char *def</b></dt>
<dd><p>The default value of this field, if one exists. This value will always be null unless <tt class="literal">mysql_list_fields</tt> is called, after which this will have the correct value for fields that have defaults.</p></dd>





<dt><b>enum enum<tt class="function">_f</tt>ield_types type</b></dt>
<dd><p>The type of the field. The type is one of the MySQL SQL datatypes.</p></dd>





<dt><b>unsigned int length</b></dt>
<dd><p>The size of the field based on the field's type.</p></dd>





<dt><b>unsigned int max_length</b></dt>
<dd><p>If accessed after calling <tt class="literal">mysql_list_fields</tt>, this contains the length of the maximum value contained in the current result set.</p></dd>





<dt><b>unsigned int flags</b></dt>
<dd><p>Zero or more option flags. The following flags are currently defined:</p>




<dl>
<dt><b><tt class="literal">NOT_NULL_FLAG</tt></b></dt>
<dd><p>If defined, the field cannot contain a NULL value.</p></dd>





<dt><b><tt class="literal">PRI_KEY_FLAG</tt></b></dt>
<dd><p>If defined, the field is a primary key.</p></dd>





<dt><b><tt class="literal">UNIQUE_KEY_FLAG</tt></b></dt>
<dd><p>If defined, the field is part of a unique key.</p></dd>





<dt><b><tt class="literal">MULTIPLE_KEY_FLAG</tt></b></dt>
<dd><p>If defined, the field is part of a key.</p></dd>





<dt><b><tt class="literal">BLOB_FLAG</tt></b></dt>
<dd><p>If defined, the field is of type <tt class="literal">BLOB</tt> or
<tt class="literal">TEXT</tt>.</p></dd>





<dt><b><tt class="literal">UNSIGNED_FLAG</tt></b></dt>
<dd><p>If defined, the field is a numeric type with an unsigned value.</p></dd>





<dt><b><tt class="literal">ZEROFILL_FLAG</tt></b></dt>
<dd><p>If defined, the field was created with the
<tt class="literal">ZEROFILL</tt> flag.</p></dd>





<dt><b><tt class="literal">BINARY_FLAG</tt></b></dt>
<dd><p>If defined, the field is of type <tt class="literal">CHAR</tt> or
<tt class="literal">VARCHAR</tt> with the <tt class="literal">BINARY</tt> flag.</p></dd>





<dt><b><tt class="literal">ENUM_FLAG</tt></b></dt>
<dd><p>If defined, the field is of type <tt class="literal">ENUM</tt>.</p></dd>





<dt><b><tt class="literal">AUTO_INCREMENT_FLAG</tt></b></dt>
<dd><p>If defined, the field has the <tt class="literal">AUTO_INCREMENT</tt>
attribute.</p></dd>





<dt><b><tt class="literal">TIMESTAMP_FLAG</tt></b></dt>
<dd><p>If defined, the field is of type <tt class="literal">TIMESTAMP</tt>.</p></dd>

</dl></dd>





<dt><b>unsigned int decimals</b></dt>
<dd><p>When used with a numeric field, it lists the number of decimals used in the field.</p>




<p>The following macros are provided to help examine the <tt class="literal">MYSQL_FIELD</tt> data:</p>





<dl>
<dt><b>IS_PRI_KEY(flags)</b></dt>
<dd><p>Returns true if the field is a primary key.</p></dd>





<dt><b>IS_NOT_NULL(flags)</b></dt>
<dd><p>Returns true if the field is defined as <tt class="literal">NOT NULL</tt>.</p></dd>





<dt><b>IS_BLOB(flags)</b></dt>
<dd><p>Returns true if the field is of type BLOB or <tt class="literal">TEXT</tt>.</p></dd>





<dt><b>IS_NUM(type)</b></dt>
<dd><p>Returns true if the field type is numeric.</p></dd>

</dl></dd>






<dt><b>MYSQL_FIELD_OFFSET</b></dt>
<dd><p>A numerical type indicating the position of the "cursor"
within a row.</p></dd>





<dt><b><tt class="literal">MYSQL_RES</tt></b></dt>
<dd><p>A structure containing the results of a <tt class="literal">SELECT</tt> (or
<tt class="literal">SHOW</tt>) statement. The actual output of the query
must be accesses through <tt class="literal">MYSQL_ROW</tt> elements of
this structure.</p></dd>





<dt><b><tt class="literal">MYSQL_ROW</tt></b></dt>
<dd><p>A single row of data returned from a <tt class="literal">SELECT</tt> query.
Output of all MySQL data types are stored in this type (as an array
of character strings).</p></dd>





<dt><b><tt class="literal">my_ulonglong</tt></b></dt>
<dd><p>A numerical type used for MySQL return values. The value ranges from
to 1.8E19, with -1 used to indicate errors.<a name="INDEX-1840" />
<a name="INDEX-1841" /></p></dd>

</dl></dd>

</dl>
</div>
</div>


































<a name="INDEX-1842" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_affected_rows</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>my_ulonglong mysql_affected_rows(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns the number of rows affected by the most recent query. When
used with a non-<tt class="literal">SELECT</tt> query, it can be used after
the <tt class="literal">mysql_query</tt> call that sent the query. With
<tt class="literal">SELECT</tt>, this function is identical to
<tt class="literal">mysql_num_rows</tt>.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Insert a row into the people table */
mysql_query(&amp;mysql, "INSERT INTO people VALUES ('', 'Illyana Rasputin', 16)";
num = mysql_affected_rows(&amp;mysql);
/* num should be 1 if the INSERT (of a single row) was successful, and -1 if
   there was an error */</pre></blockquote>





</div>

<a name="INDEX-1843" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_close</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>void mysql_close(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Ends a connection to the database server. If there is a problem when
the connection is broken, the error can be retrieved from the
<tt class="literal">mysql_err</tt> function.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">mysql_close(&amp;mysql);
/* The connection should now be terminated */</pre></blockquote>





</div>

<a name="INDEX-1844" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_connect</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL *mysql_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd)</pre></td><td align="right" /></tr></table><p>Creates a connection to a MySQL database server. The first parameter
must be a predeclared <tt class="literal">MYSQL</tt> structure. The second
parameter is the hostname or IP address of the MySQL server. If the
host is an empty string or <tt class="literal">localhost</tt>, a connection
will be made to the MySQL server on the same machine. The final two
parameters are the username and password used to make the connection.
The password should be entered as plain text, not encrypted in any
way. The return value is the MYSQL structure passed as the first
argument, or NULL if the connection failed. (Because the structure is
contained as an argument, the only use for the return value is to
check if the connection succeeded.)</p><a name="ch19-7-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>This function has been deprecated in the newer releases of MySQL and
the <tt class="literal">mysql_real_connect</tt> function should be used instead.</p>
</blockquote>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Create a connection to the local MySQL server using the name "bob" and
   password "mypass" */
MYSQL mysql;
if(!mysql_connect(&amp;mysql, "", "bob", "mypass")) {
			printf("Connection error!\n");
			exit(0);
}
/* If we've reached this point we have successfully connected to the database
   server. */</pre></blockquote>





</div>

<a name="INDEX-1845" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_create_db</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_create_db(MYSQL *mysql, const char *db)</pre></td><td align="right" /></tr></table><p>Creates an entirely new database with the given name. The return
value is zero if the operation was successful and nonzero if there
was an error.</p><a name="ch19-10-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>This function has been deprecated in the newer releases of MySQL.
MySQL now supports the <tt class="literal">CREATE DATABASE</tt> SQL
statement. This should be used, via the
<b class="function">mysql_query</b>  function, instead.</p>
</blockquote>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Create the database 'new_database' */
result = mysql_create_db(&amp;mysql, "new_database");</pre></blockquote>





</div>

<a name="INDEX-1846" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_data_seek</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>void mysql_data_seek(MYSQL_RES *res, unsigned int offset)</pre></td><td align="right" /></tr></table><p>Moves to a specific row in a group a results. The first argument is
the <tt class="literal">MYSQL_RES</tt> structure that contains the results.
The second argument is the row number you wish to seek to. The first
row is 0. This function only works if the data was retrieved using
<tt class="literal">mysql_store_result</tt>.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Jump to the last row of the results */
mysql_data_seek(results, mysql_num_rows(results)-1);</pre></blockquote>





</div>

<a name="INDEX-1847" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_debug</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>mysql_debug(char *debug)</pre></td><td align="right" /></tr></table><p>Manipulates the debugging functions if the client has been compiled
with debugging enabled. MySQL uses the Fred Fish debugging library,
which has far too many features and options to detail here.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* This is a common use of the debugging library. It keeps a trace of the
   client program's activity in the file "debug.out" */
mysql_debug("d:t:O,debug.out");</pre></blockquote>





</div>

<a name="INDEX-1848" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_drop_db</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_drop_db(MYSQL *mysql, const char *db)</pre></td><td align="right" /></tr></table><p>Destroys the database with the given name. The return value is zero
if the operation was successful and nonzero if there was an error.</p><a name="ch19-17-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>This function has been deprecated in the newer releases of MySQL.
MySQL now supports the <tt class="literal">DROP DATABASE</tt> SQL
statement. This should be used, via the
<tt class="literal">mysql_query</tt> function, instead.</p>
</blockquote>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Destroy the database 'old_database' */
result = mysql_drop_db(&amp;mysql, "old_database");</pre></blockquote>





</div>

<a name="INDEX-1849" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_dump_debug_info</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_dump_debug_info(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>This function causes the database server to enter debugging
information about the current connection into its logs. You must have
Process privilege in the current connection to use this function. The
return value is zero if the operation succeeded and nonzero in the
case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">result = mysql_dump_debug_info(&amp;mysql);
/* The server's logs should now contain information about this connection */</pre></blockquote>





</div>

<a name="INDEX-1850" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_eof</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>my_bool mysql_eof(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Returns a nonzero value if there is no more data in the group of
results being examined. If there is an error in the result set, zero
is returned. This function only works of the result set was retrieved
with the <tt class="literal">mysql_use_result</tt> function.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Read through the results until no more data comes out */
while((row = mysql_fetch_row(results)))
{
       /* Do work */
}

if(!mysql_eof(results))
{
   printf("Error. End of results not reached.\n");</pre></blockquote>





</div>

<a name="INDEX-1851" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_errno</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>unsigned int mysql_errno(MYSQL *mysql) </pre></td><td align="right" /></tr></table><p>Returns the error number of the last error associated with the
current connection. If there have been no errors in the connection,
the function returns zero.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">error = mysql_errno(&amp;mysql);
printf("The last error was number %d\n", error);</pre></blockquote>





</div>

<a name="INDEX-1852" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_error</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>char *mysql_error(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns the error message of the last error associated with the
current connection. If there have been no errors in the connection,
the function returns an empty string.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">printf("The last error was '%s'\n", mysql_error(&amp;mysql));</pre></blockquote>





</div>

<a name="INDEX-1853" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_escape_string</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
unsigned int mysql_escape_string(char *to, const char *from, unsigned int length)
unsigned int mysql_escape_string(char *to, const char *from)
</pre></td><td align="right" /></tr></table><p>Encodes a string so that it is safe to insert it into a MySQL table.
The first argument is the receiving string, which must be at least
one character greater than twice the length of the second argument,
the original string. (That is, to &gt;= from*2+1.) If a third
argument is present, only that many bytes are copied from the
originating string before encoding it. The function returns the
number of bytes in the encoded string, not including the terminating
null character.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">char name[15] = "Bob Marley's";
char enc_name[31];
mysql_escape_string(enc_name, name);
/* enc_name will now contain "Bob Marley\'s" (the single quote is escaped).</pre></blockquote>





</div>

<a name="INDEX-1854" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_fetch_field</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_FIELD *mysql_fetch_field(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Returns a <tt class="literal">MYSQL_FIELD</tt> structure describing the
current field of the given result set. Repeated calls to this
function will return information about each field in the result set
until there are no more fields left, and then it will return a null
value.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_FIELD *field;

while((field = mysql_fetch_field(results)))
{
    /* You can examine the field information here */
}</pre></blockquote>





</div>

<a name="INDEX-1855" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_fetch_field_direct</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
MYSQL_FIELD * mysql_fetch_field_direct(MYSQL_RES * result, unsigned int fieldnr)
</pre></td><td align="right" /></tr></table><p>This function is the same as <tt class="literal">mysql_fetch_field</tt>,
except that you specify which field you wish to examine, instead of
cycling through them. The first field in a result set is 0.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_FIELD *field;

/* Retrieve the third field in the result set for examination */
field = mysql_fetch_field_direct(results, 2);</pre></blockquote>





</div>

<a name="INDEX-1856" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_fetch_fields</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_FIELD *mysql_fetch_fields(MYSQL_RES * result)</pre></td><td align="right" /></tr></table><p>The function is the same as <tt class="literal">mysql_fetch_field</tt>,
except that it returns an array of <tt class="literal">MYSQL_FIELD</tt>
structures containing the information for every field in the result
set.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_FIELD *field;
MYSQL_FIELD *fields;

/* Retrieve all the field information for the results */
fields = mysql_fetch_fields(results);
/* Assign the third field to 'field' */
field = fields[2];</pre></blockquote>





</div>

<a name="INDEX-1857" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_fetch_lengths</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>unsigned long *mysql_fetch_lengths(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Returns an array of the lengths of each field in the current row. A
null value is returned in the case of an error. You must have fetch
at least one row (with <tt class="literal">mysql_fetch_row</tt>) before you
can call this function. This function is the only way to determine
the lengths of variable length fields, such as
<tt class="literal">BLOB</tt> and <tt class="literal">VARCHAR</tt>, before you
use the data.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">unsigned long *lengths;

row = mysql_fetch_row(results);
lengths = mysql_fetch_lengths(results);
printf("The third field is %d bytes long\n", lengths[2]);</pre></blockquote>





</div>

<a name="INDEX-1858" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_fetch_row</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Retrieves the next row of the result and returns it as a
<tt class="literal">MYSQL_ROW</tt> structure. A null value is returned if
there are no more rows or there is an error. In the current
implementation, the <tt class="literal">MYSQL_ROW</tt> structure is an
array of character strings that can be used to represent any data.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_ROW row;

row = mysql_fetch_row(results);
printf("The data in the third field of this row is: %s\n", row[2]);</pre></blockquote>





</div>

<a name="INDEX-1859" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_field_seek</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_FIELD_OFFSET mysql_field_seek(MYSQL_RES *result, MYSQL_FIELD_OFFSET offset)
</pre></td><td align="right" /></tr></table><p>Seeks to the given field of the current row of the result set. The
position set by this function is used when
<tt class="literal">mysql_fetch_field</tt> is called. The
<tt class="literal">MYSQL_FIELD_OFFSET</tt> value passed should be the
return value of a <tt class="literal">mysql_field_tell</tt> call (or
another <tt class="literal">mysql_field_seek</tt>). Using the value
will seek to the beginning of the row. The return value is the
position of the cursor before the function was called.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_FIELD field;

/* Seek back to the beginning of the row */
old_pos = mysql_field_seek(results, 0);
/* Fetch the first field of the row */
field = mysql_field_field(results);
/* Go back to where you where */
mysql_field_seek(results, old_pos);</pre></blockquote>





</div>

<a name="INDEX-1860" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_field_tell</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_FIELD_OFFSET mysql_field_tell(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Returns the value of the current field position within the current
row of the result set. This value is used with
<tt class="literal">mysql_field_seek</tt>.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_FIELD field1, field2, field3;

/* Record my current position */
old_pos = mysql_field_tell(results);
/* Fetch three more fields */
field1 = mysql_field_field(results);
field2 = mysql_field_field(results);
field3 = mysql_field_field(results);
/* Go back to where you where */
mysql_field_seek(results, old_pos);</pre></blockquote>





</div>

<a name="INDEX-1861" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_free_result</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>void mysql_free_result(MYSQL_RES *result) </pre></td><td align="right" /></tr></table><p>Frees the memory associated with a <tt class="literal">MYSQL_RES</tt>
structure. This must be called whenever you are finished using this
type of structure or else memory problems will occur.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_RES *results;
/* Do work with results */
mysql_free_result(results);</pre></blockquote>





</div>

<a name="INDEX-1862" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_get_client_info</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>char *mysql_get_client_info(void)</pre></td><td align="right" /></tr></table><p>Returns a string with the MySQL library version used by the client
program.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">printf("This program uses MySQL client library version %s\n", 
       mysql_get_client_info()));</pre></blockquote>





</div>

<a name="INDEX-1863" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_get_host_info</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>char *mysql_get_host_info(MYSQL *mysql) </pre></td><td align="right" /></tr></table><p>Returns a string with the hostname of the MySQL database server and
the type of connection used (e.g., Unix socket or TCP).</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">printf("Connection info: %s", mysql_get_host_info(&amp;mysql));</pre></blockquote>





</div>

<a name="INDEX-1864" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_get_proto_info</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>unsigned int mysql_get_proto_info(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns the MySQL protocol version used in the current connection as
an integer.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">printf("This connection is using MySQL connection protocol ver. %d\n",
        mysql_get_proto_info());</pre></blockquote>





</div>

<a name="INDEX-1865" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_get_server_info</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>char *mysql_get_server_info(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns a string with the version number of the MySQL database server
used by the current connection.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">printf("You are currently connection to MySQL server version %s\n",
        mysql_get_server_info(&amp;mysql);</pre></blockquote>





</div>

<a name="INDEX-1866" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_info</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>char *mysql_info(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns a string containing information about the most recent query,
if the query was of a certain type. Currently, the following SQL
queries supply extra information via this function: <tt class="literal">INSERT
INTO</tt> (when used with a <tt class="literal">SELECT</tt> clause);
<tt class="literal">LOAD DATA INFILE</tt>; <tt class="literal">ALTER TABLE</tt>;
<tt class="literal">INSERT INTO TABLE</tt> (when used with multiple
records). If the last query had no additional information (e.g., it
was not one of the above queries), this function returns a null
value.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* We just sent LOAD DATA INFILE query reading a set of record from a file into
   an existing table */
printf("Results of data load: %s\n", mysql_info(&amp;mysql));</pre></blockquote>





</div>

<a name="INDEX-1867" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_init</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL *mysql_init(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Initializes a <tt class="literal">MYSQL</tt> structure used to create a
connection to a MySQL database server. This, along with
<tt class="literal">mysql_real_connect</tt>, is currently the approved way
to initialize a server connection. You pass this function a
<tt class="literal">MYSQL</tt> structure that you declared, or a null
pointer, in which case a <tt class="literal">MYSQL</tt> structure will be
created and returned. Structures created by this function will be
properly freed when <tt class="literal">mysql_close</tt> is called. A null
value is returned if there is not enough memory to initialize the
structure.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL mysql;

if (!mysql_init(&amp;mysql)) {
			printf("Error initializing MySQL client\n");
			exit(1);
}</pre></blockquote>





</div>

<a name="INDEX-1868" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_insert_id</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>my_ulonglong mysql_insert_id(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns the last number generated for an
<tt class="literal">AUTO_INCREMENT</tt> field. This function is usually
used immediately after a value is inserted into an
<tt class="literal">AUTO_INCREMENT</tt> field, to determine the value that
was inserted.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* We just inserted an employee record with automatically generated ID into
   a table */
id = mysql_insert_id(&amp;mysql);
printf("The new employee has ID %d\n", id);</pre></blockquote>





</div>

<a name="INDEX-1869" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_kill</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_kill(MYSQL *mysql, unsigned long pid) </pre></td><td align="right" /></tr></table><p>Attempts to kill the MySQL server thread with the specified Process
ID. This function returns zero if the operation was successful and
nonzero on failure. You must have Process privileges in the current
connection to use this function.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Kill thread 4 */
result = mysql_kill(&amp;mysql, 4);</pre></blockquote>





</div>

<a name="INDEX-1870" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_list_dbs</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_RES *mysql_list_dbs(MYSQL *mysql, const char *wild)</pre></td><td align="right" /></tr></table><p>Returns a <tt class="literal">MYSQL_RES</tt> structure containing the names
of all existing databases that match the pattern given by the second
argument. This argument may be any standard SQL regular expression.
If a null pointer is passed instead, all databases are listed. Like
all <tt class="literal">MYSQL_RES</tt> structures, the return value of this
function must be freed with <tt class="literal">mysql_free_result</tt>.
This function returns a null value in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_RES databases;
databases = mysql_list_dbs(&amp;mysql, (char *)NULL);
/* 'databases' now contains the names of all of the databases in the
   MySQL server */</pre></blockquote>





</div>

<a name="INDEX-1871" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_list_fields</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
MYSQL_RES *mysql_list_fields(MYSQL *mysql, const char *table, const char *wild)
</pre></td><td align="right" /></tr></table><p>Returns a <tt class="literal">MYSQL_RES</tt> structure containing the names
of all existing fields in the given table that match the pattern
given by the third argument. This argument may be any standard SQL
regular expression. If a null pointer is passed instead, all fields
are listed. Like all <tt class="literal">MYSQL_RES</tt> structures, the
return value of this function must be freed with
<b class="function">mysql_free_result</b> . This function returns a null
value in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_RES fields;
fields = mysql_list_fields(&amp;mysql, "people", "address%");
/* 'fields' now contains the names of all fields in the 'people' table
    that start with 'address' */</pre></blockquote>





</div>

<a name="INDEX-1872" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_list_processes</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_RES *mysql_list_processes(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns a <tt class="literal">MYSQL_RES</tt> structure containing the
information on all of the threads currently running on the MySQL
database server. This information contained here can be used with
<tt class="literal">mysql_kill</tt> to remove faulty threads. Like all
<tt class="literal">MYSQL_RES</tt> structures, the return value of this
function must be freed with <tt class="literal">mysql_free_result</tt>.
This function returns a null value in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_RES threads;
threads = mysql_list_processes(&amp;mysql);</pre></blockquote>





</div>

<a name="INDEX-1873" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_list_tables</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_RES *mysql_list_tables(MYSQL *mysql, const char *wild)</pre></td><td align="right" /></tr></table><p>Returns a <tt class="literal">MYSQL_RES</tt> structure containing the names
of all existing tables in the current database that match the pattern
given by the second argument. This argument may be any standard SQL
regular expression. If a null pointer is passed instead, all tables
are listed. Like all <tt class="literal">MYSQL_RES</tt> structures, the
return value of this function must be freed with
<tt class="literal">mysql_free_result</tt>. This function returns a null
value in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_RES tables;
tables = mysql_list_tables(&amp;mysql, "p%");
/* 'tables' now contains the names of all tables in the current database
    that start with 'p' */</pre></blockquote>





</div>

<a name="INDEX-1874" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_num_fields</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>unsigned int mysql_num_fields(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Returns the number of fields contained in each row of the given
result set.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">num_fields = mysql_num_fields(results);
printf("There are %d fields in each row\n", num_fields);</pre></blockquote>





</div>

<a name="INDEX-1875" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_num_rows</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_num_rows(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Returns the number of rows of data in the result set. This function
is only accurate if the result set was retrieved with
<tt class="literal">mysql_store_result</tt>. If
<tt class="literal">mysql_use_result</tt> was used, the value returned by
this function will be the number of rows accessed so far.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">num_rows = mysql_num_rows(results);
printf("There were %d rows returned\n", num_rows);</pre></blockquote>





</div>

<a name="INDEX-1876" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_ping</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_ping(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Checks to see if the connection to the MySQL server is still alive.
If it is not, the client will attempt to reconnect automatically.
This function returns zero if the connection is alive and nonzero in
the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">while(mysql_ping(&amp;mysql)) printf("Error, attempting reconnection...\n");</pre></blockquote>





</div>

<a name="INDEX-1877" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_query</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_query(MYSQL *mysql, const char *query)</pre></td><td align="right" /></tr></table><p>Executes the SQL query given in the second argument. If the query
contains any binary data (particularly the null character), this
function cannot be used and <tt class="literal">mysql_real_query</tt>
should be used instead. The function returns zero if the query was
successful and nonzero in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">error = mysql_query(&amp;mysql, "SELECT * FROM people WHERE name like 'Bill%'");
if (error) { 
     printf("Error with query!\n"); 
     exit(1);
}</pre></blockquote>





</div>

<a name="INDEX-1878" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_real_connect</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user,
const char *passwd, const char *db, uint port, const char *unix_socket,
uint client_flag)
</pre></td><td align="right" /></tr></table><p>Creates a connection with a MySQL database server. There are eight
arguments to this function:</p><ul><li><p>An initialized <tt class="literal">MYSQL</tt> structure, created with
<tt class="literal">mysql_init</tt>.</p></li><li><p>The hostname or IP address of the MySQL database server (use an empty
string or <tt class="literal">localhost</tt> to connect to the local MySQL
server over a Unix socket).</p></li><li><p>The username used to connect to the database server (an empty string
may be used assuming the Unix login name of the person running the
client).</p></li><li><p>The password used to authenticate the given user. If an empty string
is used, only users with no passwords are checked for authentication.</p></li><li><p>The initial database selected when you connect (an empty string may
be used to not initially choose a database).</p></li><li><p>The port used to remotely connect to a MySQL database server over TCP
(0 may be used to accept the default port).</p></li><li><p>The filename of the Unix socket used to connect to a MySQL server on
the local machine (an empty string may be used to accept the default
socket).</p></li><li><p>Zero or more of a set of flags used under special circumstances:</p>





<dl>

<dt><b><tt class="literal">CLIENT_FOUND_ROWS</tt></b></dt>
<dd><p>When using queries that change tables, returns the number of rows found in the table, not the number of rows affected.</p></dd>





<dt><b><tt class="literal">CLIENT_NO_SCHEMA</tt></b></dt>
<dd><p>Prevent the client from using the full <tt class="literal">database.table.column</tt> form to specify a column from any database.</p></dd>





<dt><b><tt class="literal">CLIENT_COMPRESS</tt></b></dt>
<dd><p>Use compression when communicating with the server.</p></dd>





<dt><b><tt class="literal">CLIENT_ODBC</tt></b></dt>
<dd><p>Tell the server the client is an <tt class="literal">ODBC</tt> connection.</p></dd>

</dl></li>
</ul>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">/* Connect to the server on the local host with standard options. */
if (! mysql_real_connect(&amp;mysql, "localhost", "bob", "mypass", "", 0, "", 0))
{ print "Error connecting!\n";
  exit(1);
}</pre></blockquote>





</div>

<a name="INDEX-1879" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_real_query</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
int mysql_real_query(MYSQL *mysql, const char *query, unsigned int length)
</pre></td><td align="right" /></tr></table><p>Executes the SQL query given in the second argument. The length of
the query must be given in the third argument. By supplying the
length, you can use binary data, including null characters, in the
query. This function is also faster than
<tt class="literal">mysql_query</tt>. The function returns zero if the
query was successful and nonzero in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">error = mysql_real_query(&amp;mysql, "SELECT * FROM people WHERE name like 'Bill%'",
        44);
if (error) { 
     printf("Error with query!\n"); 
     exit(1);
}</pre></blockquote>





</div>

<a name="INDEX-1880" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_reload</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_reload(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Reloads the permission tables on the MySQL database server. You must
have Reload permissions on the current connection to use this
function. If the operation is successful, zero is returned otherwise
a nonzero value is returned.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">result = mysql_reload(&amp;mysql);</pre></blockquote>





</div>

<a name="INDEX-1881" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_row_tell</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>unsigned int mysql_row_tell(MYSQL_RES *result)</pre></td><td align="right" /></tr></table><p>Returns the value of the cursor used as
<tt class="literal">mysql_fetch_row</tt> reads the rows of a result set.
The return value of this function can used with
<tt class="literal">mysql_row_seek</tt> to jump to a specific row in the
result set.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">saved_pos = mysql_row_tell(results);
/* I can now jump back to this row at any time */</pre></blockquote>





</div>

<a name="INDEX-1882" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_select_db</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_select_db(MYSQL *mysql, const char *db)</pre></td><td align="right" /></tr></table><p>Changes the current database. The user must have permission to access
the new database. The function returns zero if the operation was
successful and nonzero in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">result = mysql_select_db(&amp;mysql, "newdb");</pre></blockquote>





</div>

<a name="INDEX-1883" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_shutdown</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>int mysql_shutdown(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Shutdown the MySQL database server. The user must have Shutdown
privileges on the current connection to use this function. The
function returns zero if the operation was successful and nonzero in
the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">result = mysql_shutdown(&amp;mysql);</pre></blockquote>





</div>

<a name="INDEX-1884" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_stat</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>char *mysql_stat(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Returns information about the current operating status of the
database server. This includes the uptime, the number of running
threads, and the number of queries being processed, among other
information.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">printf("Server info\n-----------\n%s\n", mysql_stat(&amp;mysql));</pre></blockquote>





</div>

<a name="INDEX-1885" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_store_result</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_RES *mysql_store_result(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Reads the entire result of a query and stores in a
<tt class="literal">MYSQL_RES</tt> structure. Either this function or
<tt class="literal">mysql_use_result</tt> must be called to access return
information from a query. You must call
<tt class="literal">mysql_free_result</tt> to free the
<tt class="literal">MYSQL_RES</tt> structure when you are done with it. The
function returns a null value in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_RES results;
mysql_query(&amp;mysql, "SELECT * FROM people");
results = mysql_store_result(&amp;mysql);
/* 'results' now contains all of the information from the 'people' table */</pre></blockquote>





</div>

<a name="INDEX-1886" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_thread_id</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>unsigned long mysql_thread_id(MYSQL * mysql)</pre></td><td align="right" /></tr></table><p>Returns the thread ID of the current connection. This value can be
used with <b class="function">mysql_kill</b>  to terminate the thread in
case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">thread_id = mysql_thread_id(&amp;mysql);</pre></blockquote>





</div>

<a name="INDEX-1887" /><a name="INDEX-1888" /><a name="INDEX-1889" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>mysql_use_result</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>MYSQL_RES *mysql_use_result(MYSQL *mysql)</pre></td><td align="right" /></tr></table><p>Reads the result of a query row by row and allows access to the data
through a <tt class="literal">MYSQL_RES</tt> structure. Either this
function or <tt class="literal">mysql_use_result</tt> must be called to
access return information from a query. Because this function does
not read the entire data set at once, it is faster and more memory
efficient than <tt class="literal">mysql_store_result</tt>. However, when
using this function you must read all of the rows of the dataset from
the server or else the next query will receive the left over data.
Also, you can not run any other queries until you are done with the
data in this query. You must call
<tt class="literal">mysql_free_result</tt> to free the
<tt class="literal">MYSQL_RES</tt> structure when you are done with it. The
function returns a null value in the case of an error.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">MYSQL_RES results;
mysql_query(&amp;mysql, "SELECT * FROM people");
results = mysql_store_result(&amp;mysql);
/* 'results' will now allow access (using mysql_fetch_row) to the table
   data, one row at a time */<a name="INDEX-1888" />
<a name="INDEX-1889" /></pre></blockquote>




</div>



































</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch18_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch19_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">18.2. Lite</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">19.2. mSQL C API
</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>