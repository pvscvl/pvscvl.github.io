<?label 8.4. The Three-tier Architecture?><html><head><title>The Three-tier Architecture (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch09_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<a name="INDEX-593" /><h2 class="sect1">8.4. The Three-tier Architecture</h2>





<p>We have so far discussed the most common architecture for web and
simple business application processing, client/server. This
architecture, however, has a hard time growing as your computing
needs grow and change. It also does a poor job of taking advantage of
the benefits of object-oriented programming. The first problem has
been recently echoed throughout the industry in the discussion of
thin clients. The desire for thin clients derives from the
troublesome trend of throwing more and more processing onto the
client. The poster children of this problem are PowerBuilder and
VisualBasic, tools that pool data directly from a database into a GUI
and then perform all operations on that data in the GUI.</p>





<p>Such a tight coupling of the <a name="INDEX-594" />user interface to the database engine
results in applications that are difficult to modify and impossible
to scale with growing user and data volume. If you have any
experience with user interface design, you have experienced the fact
that user interfaces are subject to changes based on user whims. The
easiest way to isolate the impact of these changes would be to leave
the job of the GUI to act only as a user interface. Such a user
interface is a true thin client.</p>





<p>The impact on
<a name="INDEX-595" />scalability
comes from the other direction. Namely, when you need to modify an
application to scale according to user demand or data volume, the
modifications might come in the form of database changes including,
but not limited to, distributing the database across multiple
servers. By marrying your user interface to the database, you
necessitate a change in that GUI in order to support scalability
issues -- issues that are purely server-related.</p>





<p>Thin clients are not today's only computing rage. Another trend
is <a name="INDEX-596" />code reuse.
Common code among applications tends to reside in data processing,
commonly called business rules. With all of your
<a name="INDEX-597" />business
rules sitting in your user interface, you will find it difficult at
best to attain any kind of code reuse. The answer to these problems
lies in breaking an application into three pieces instead of two.
This architecture is called the three-tier architecture.</p>





<a name="ch08-3-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>


<p>When we speak of a user interface occurring on the client, we mean
that as a logical distinction. A form of <a name="INDEX-598" />thin client, sometimes referred to as
the "<a name="INDEX-599" />ultra-thin client." is what
everyone commonly recognizes as a web page. A web page may be
dynamically generated on a web server. In that case, the most client
processing is occurring on the web server in the form of dynamic HTML
page generation.</p>
</blockquote>





<p>Contrast the two-tier architecture from <a href="ch08_01.htm">Figure 8-1</a>
with the three-tier architecture shown in <a href="ch08_04.htm">Figure 8-1</a>. With this design, we have added an
intermediary layer between the user interface and database. This new
layer, the application server, encapsulates the application
processing logic -- the business logic -- that is common to the
problem domain. The client becomes nothing more than a view of the
middle-tier business objects and the database becomes nothing more
than a storage mechanism for those objects. The most important
advantage you gain is thus the separation of the user interface from
the database. Suddenly, you do not have to build knowledge of the
database into the GUI. Instead, all knowledge of how to deal with the
database can sit in the middle tier.</p>





<a name="ch08-35492" /><div class="figure"><img src="figs/MSQL.0804.gif" alt="Figure 8-1" /></div><h4 class="objtitle">Figure 8-1. Three-tier architecture</h4>

<p>The two main functions of the <a name="INDEX-601" />application server are to isolate
database connectivity and provide a centralized repository for
business logic. The user interface handles only display and input
issues and the database engine handles only database issues. With
data processing moved to a centralized location, multiple user
interfaces can use the exact same application server program -- no
more writing the data processing rules each time you build an
application.</p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch09_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">8.3. Object/Relational Modeling</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">9. CGI Programming</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>