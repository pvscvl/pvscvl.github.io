<?label 8.2. Data Processing?><html><head><title>Data Processing (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch08_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">8.2. Data Processing</h2>





<p><a href="part1.htm">Part I, "Getting Started with MySQL and mSQL"</a>, introduced the concepts of <a name="INDEX-578" />
<a name="INDEX-579" />transaction management and result
sets. A database application is nothing more than a tool for managing
database transactions and processing result sets. For example, if you
have an address book application, your processing of result sets is
the grabbing of each row from the database and displaying it for the
user. Your transaction management simply amounts to making sure that
an update to the <tt class="literal">address</tt> and
<tt class="literal">person</tt> tables are handled as a single unit.</p>





<a name="ch08-1-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>As we have mentioned before, MySQL and mSQL have no support for
transaction management. Any modification you make to the database is
automatically committed when you send it. This limitation requires
you to go to special lengths to make sure you do not end up with
corrupt data from transactions that fail in the middle of two related
accesses.<a name="INDEX-580" />
<a name="INDEX-581" /></p>
</blockquote>





<p>The other two important pieces to database application flow are
connection and disconnection. It stands to reason that before you
actually issue a query, you should first connect to the database. It
is not uncommon, however, for people to forget the other piece of the
puzzle -- cleaning up after themselves. You should always free up
any database resources you grab the minute you are done with them. In
a long-running application like an Internet daemon process, a badly
written system can eat up database resources until it locks up the
system.</p>





<p>Part of cleaning up after yourself involves proper
<a name="INDEX-582" />error
handling. Better programming languages make it harder for you to fail
to handle exceptional conditions (network failure, duplicate keys on
insert, SQL syntax errors, etc.); but, regardless of your language of
choice, you must make sure that you know what error conditions can
arise from a given API call and act appropriately for each
exceptional situation. The MySQL and mSQL C libraries provide a
rowset-based look at your database. By rowset based, we mean that the
C libraries enable you to deal directly with database data as it
exists conceptually in the database. <a href="ch13_01.htm">Chapter 13, "C and C++"</a>,
goes into the practical details of programming in this model using
the MySQL and mSQL C APIs.</p>





<p>Accessing a relational database from an
<a name="INDEX-583" />
<a name="INDEX-584" />object-oriented environment exposes
a special paradox: the relational world is entirely about the
manipulation of data while the object world is about the
encapsulation of data behind a set of behaviors. In an
object-oriented application, the database serves as a tool for saving
objects across application instances. Instead of seeing the query
data as a rowset, an object-oriented application sees the data from a
query as a collection of objects.<a name="INDEX-585" />
<a name="INDEX-586" /></p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch08_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">8. Database Application Architectures</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">8.3. Object/Relational Modeling</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>