<?label 11. Python?><html><head><title>Python (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch11_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 11. Python</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch11_01.htm">Basic Connectivity</a><br />
<a href="ch11_02.htm">Dynamic Connectivity</a><br /></p></div>










<p>If you are not familiar with Python and you do a lot of Perl
programming, you definitely want to take a look at it. Python is an
object-oriented scripting language that combines the strengths of
languages like Perl and Tcl with a clear syntax that lends itself to
applications that are easy to maintain and extend. The O'Reilly
&amp; Associates, Inc. book <em class="emphasis">Learning Python</em> by
Mark Lutz and David Asher provides an excellent introduction into
Python programming. This chapter assumes a working understanding of
the Python language, including the ability to add new modules into a
Python
installation.<a name="INDEX-703" /></p>





<p>The Python support for the MySQL and mSQL databases that we are
exploring in this chapter comes in the form of two Python modules. At
the time of this book's printing, the mSQL module was available
at <a href="../../../../../../www.python.org/">http://www.python.org</a> and the MySQL module at
<a href="../../../../../../www.mysql.com/">http://www.mysql.com</a>. While there are several
other modules providing MySQL and mSQL access to Python applications,
they -- like these two -- are mostly API variations on the
MySQL and mSQL C APIs. You need to install one or both of these
modules in order to access your database of choice and run the
examples in this chapter.</p>





<p>Both APIs are virtually the same. We will, therefore, approach both
modules together and note where they differ.</p>



































<div class="sect1"><a name="ch11-34585" />
<a name="INDEX-704" /><h2 class="sect1">11.1. Basic Connectivity</h2>





<p>The Python APIs are likely the simplest database APIs of any in this
book. As with the other APIs, we need to start with database
connectivity -- making the connection. Because Python has an
interactive interface, the simplest way to demonstrate a connection
is by using the command line interpreter. The following two Python
sessions demonstrate simple database connections to MySQL and mSQL,
respectively. The first example shows MySQL connectivity:</p>





<blockquote><pre class="code">[4:30pm] athens&gt; <b class="emphasis-bold">python</b></pre></blockquote>




<blockquote><pre class="code">Python 1.5.1 (#1, Jun 13 1998, 22:38:15)  [GCC 2.7.2] on sunos5
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
&gt;&gt;&gt; import MySQL;
&gt;&gt;&gt; db = MySQL.connect('athens.imaginary.com');
&gt;&gt;&gt; db.selectdb('db_test');
&gt;&gt;&gt; result = db.do('select test_val from test where test_id = 1');
&gt;&gt;&gt; print result;
[['This is a MySQL test.']]
&gt;&gt;&gt;</pre></blockquote>





<p>The mSQL code that does the same thing looks nearly identical:</p>





<blockquote><pre class="code">[4:30pm] athens&gt; <b class="emphasis-bold">python</b></pre></blockquote>




<blockquote><pre class="code">Python 1.5.1 (#1, Jun 13 1998, 22:38:15)  [GCC 2.7.2] on sunos5
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
&gt;&gt;&gt; import mSQL;
&gt;&gt;&gt; db = mSQL.connect('athens.imaginary.com');
&gt;&gt;&gt; db.selectdb('db_test');
&gt;&gt;&gt; result = db.query('select test_val from test where test_id = 1');
&gt;&gt;&gt; print result;
[('This is a mSQL test.',)]
&gt;&gt;&gt;</pre></blockquote>





<p>In both cases, your first task is to import the appropriate Python
module. You should not use the from mSQL <tt class="literal">import *</tt>
syntax since this import will pollute the namespace of your
application. Instead, you should get a
<a name="INDEX-705" />database handle instance via the
<tt class="literal">connect()</tt>
<a name="INDEX-706" /> method in each module and perform your
database access through that database handle.</p>





<p>The <tt class="literal">connect()</tt> call for both APIs is similar,
though not identical. In the previous MySQL session, we are
connecting to a database that allows global access. Because no user
name or password is required, the <tt class="literal">connect()</tt> call
for the MySQL session looks similar to the call for the mSQL session.
You can, however, specify user name and password arguments when
required by your MySQL database. For example, <tt class="literal">db =
MySQL.connect(</tt>'<tt class="literal">athens.imaginary.com</tt>'<tt class="literal">,
</tt>'<tt class="literal">myuid</tt>'<tt class="literal">,
</tt>'<tt class="literal">password</tt>'<tt class="literal">);</tt> will
connect you to the MySQL server at
<em class="emphasis">athens.imaginary.com</em> as the user
"myuid" using the password "password."
Neither API even requires a host name if you are connecting to the
local machine. In such situations, they are smart enough to use a
Unix domain socket (on Unix systems) for quicker connectivity.</p>





<p>The <a name="INDEX-707" />C API connection process is a two step
process that requires you first to connect to the server, and then
select which database you want to use. The Python APIs follow the
same steps. In fact, under both MySQL and mSQL, the APIs for
selecting a database are practically identical:
<tt class="literal">selectdb()</tt>. For most uses, you will only ever pass
this method a single parameter -- the database name. MySQL does
support an optional second parameter that enables you to direct
result set data storage to stay on the server until each row is
requested. You would only want to use this version of the API when
you are on a client where you know memory is limited or are
retrieving unusually large result sets.</p>





<a name="ch11-1-fm2xml" /><div class="sect2">
<h3 class="sect2">11.1.1. Queries</h3>





<p>The two APIs differ slightly in the way you send statements to the
database and how you deal with whatever you get back. The mSQL API is
very simple with no support for cursor management. The MySQL API, on
the other hand, supports the simple mSQL API along with a more
complex set of APIs that more accurately mirror the C API and provide
cursor support. In the Python world, cursor support is of dubious
value since neither database allows in-place edits and the simpler
API shown in the interactive sessions above allows you to navigate
back and forth through a result set as easily as a cursor. We will,
however, find a use for the cursor API later in the chapter because
the same API that provides cursor support also gives us support for
dynamic database access.</p>





<p>
<a name="INDEX-708" />
<a name="INDEX-709" />mSQL and the simple form of the MySQL
API enable an application to query a database and get results in the
form of a list. Unfortunately, the two APIs have two trivial, but
annoying, differences in how you do this. First of all, the mSQL
query method is called <tt class="literal">query()</tt> and the MySQL one
is called <tt class="literal">do()</tt>. Each method accepts any SQL string
as an argument. If the statement produces a result set, that result
set is returned in the form of a list: a list of tuples for mSQL and
a list of lists for MySQL.</p>





<p>For most uses, the difference in the return types is
meaningless -- tuples are immutable. The code will almost always
appear the same. You should nevertheless be aware that
<a name="INDEX-710" />MySQL rows are lists and mSQL rows are
tuples in the event you encounter a situation where the difference is
relevant. <a href="ch11_01.htm">Example 11-1</a> is a simple Python program
that accesses MySQL and mSQL databases and prints out the results.</p>





<a name="ch11-73166" /><div class="example">
<h4 class="objtitle">Example 11-1. Query Processing in Python for mSQL and MySQL </h4>




<blockquote><pre class="code">#!/usr/local/bin/python

# Import the modules
import mSQL, MySQL;

# Initialize database and query values
database = 'db_test';
query = 'SELECT test_id, test_val FROM test';

# Connect to the servers
msql = mSQL.connect();
mysql = MySQL.connect();

# Select the test databases
msql.selectdb(database);
mysql.selectdb(database);

# Run the query
m_result = msql.query(query);
my_result = mysql.do(query);

# Process the results from mSQL
for row in m_result:
    # Here, row is a tuple
    print "mSQL- test_id: ",row[0]," | test_val: ",row[1];

# Process the results from MySQL
for row in my_result:
    # Here, row is a list
    print "MySQL- test_id: ",row[0]," | test_val: ",row[1];

# Close the connections (mSQL only)
msql.close();</pre></blockquote>
</div>





<p>For both the MySQL and mSQL databases, the application loops through
each row from the result set and prints out its data. Under mSQL, the
first element in the tuple represents the first column from the query
and the second element the second column. Similarly, the first
element in the MySQL list represents the first column from the query
and the second element the second
column.<a name="INDEX-711" /></p>
</div>
















<a name="ch11-2-fm2xml" /><div class="sect2">
<a name="INDEX-712" /><h3 class="sect2">11.1.2. Updates</h3>





<p>Issuing an update, insert, or delete to the database uses the same
API as queries -- you just don't need any result set
processing. In other words, call <tt class="literal">query()</tt> or
<tt class="literal">do()</tt> and do nothing else. MySQL does have the
added functionality of returning the
<tt class="literal">AUTO_INCREMENT</tt> value of the table in question has
an <tt class="literal">AUTO_INCREMENT</tt> field.<a name="INDEX-713" /></p>
</div>
</div>




































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch10_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch11_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">10.4. MysqlPerl</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">11.2. Dynamic Connectivity</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>