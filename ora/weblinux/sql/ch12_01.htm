<?label 12. PHP and Other Support for Database-driven HTML?><html><head><title>PHP and Other Support for Database-driven HTML (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch11_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 12. PHP and Other Support for Database-driven HTML</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch12_01.htm">Alternatives for Dynamic Content on the Web</a><br />
<a href="ch12_02.htm">W3-mSQL</a><br />
<a href="ch12_03.htm">PHP</a><br />
<a href="ch12_04.htm">Embedded Perl
</a><br /></p></div>










<p>Several easy-to-use program HTML extensions provide support for
accessing MySQL and mSQL database servers within web pages. In this
chapter, we will start with W3-mSQL -- a mSQL-specific tool. We
will then show how to take the more database-independent approach
with PHP and two minor Perl extensions. The W3-mSQL scripting
language, Lite, lets you embed entire programs into an HTML file. A
CGI program executes the script and sends the result to the reader as
a dynamically created HTML
document.<a name="INDEX-723" />
<a name="INDEX-724" />
<a name="INDEX-725" /></p>





<p>Since W3-mSQL and the other extensions in this chapter use their own
scripting languages and hide all evidence of CGI, knowledge of the
previous chapters of this section is not necessary for this chapter.
However, understanding how CGI works, as well as having some prior
programming experience (Lite is similar to both C and Perl), can be
useful when reading this chapter.</p>


































<div class="sect1"><a name="ch12-32255" />
<h2 class="sect1">12.1. Alternatives for Dynamic Content on the Web</h2>





<p>The World Wide Web's first encounter with what we now call
Dynamic HTML was <a name="INDEX-726" />
<a name="INDEX-727" />Server Side Includes (SSI). The idea
behind SSI is that there are certain common values, such as the
current date and time, that would be useful to include in an HTML
page but impracticable because they change so often. SSI provided a
method by which an HTML page could tell the server to insert a value
into the HTML page before sending it to the end user. That way the
value would always be current, but the creator of the page would not
have to continuously update it. Within an HTML page, a typical SSI
directive looks like this:</p>





<blockquote><pre class="code">&lt;!--#echo var="DATE_LOCAL" --&gt;</pre></blockquote>





<p>The problem with SSI is that there is a very limited set of
information that the server can easily provide. Once you get past
date, time, and the ability to include other files there is not much
else available without seriously bloating the web server itself.</p>





<p>It quickly became apparent that if the web server itself did not
provide dynamic HTML, it could come from only two other sources. The
client -- that is, the web browser -- could interpret the
commands or some other program on the server machine could preprocess
the commands, outputting plain HTML to the end users.</p>





<p>The first road is what led to
<a name="INDEX-728" />JavaScript and
other similar technologies. With JavaScript, as with SSI, commands
are embedded within the HTML. Unlike SSI, the server does not touch
JavaScript commands; instead, the web browser handles them. This
method allows for much greater interaction with the user. For
instance, using JavaScript you may specify that an action take place
when the user moves the mouse over different parts of the screen. In
this way, it becomes possible to create a feeling of immediacy and
interactivity not otherwise possible. Following is an example of
typical JavaScript code:</p>





<blockquote><pre class="code">&lt;SCRIPT&gt;
&lt;! onMouseOver("do the jig"); --&gt;
&lt;/script&gt;</pre></blockquote>





<p>The problem with client-side solutions, such as JavaScript, is that
as soon as the client is finished downloading the page, the
connection with the server is lost. Very often there are resources on
the server machine, such as database servers, with which we would
like to interact. However, with client-side scripting it is usually
either impossible or impractical to communicate with the server or
any other remote machine after the page has loaded. This type of
functionality is best suited for a server side solution.</p>





<p>With a <a name="INDEX-729" />server-side interpreter, an HTML
document is examined before being sent to the end user. Some program,
usually a CGI program, looks for and executes programming code
embedded in the HTML. The advantage of this system is that you gain
all of the power of a CGI program while hiding much of the
complexity.</p>





<p>Consider a marine foundation that has a database containing
information about sharks. This database has vital statistics of the
various shark species, as well as filenames pointing to images of the
creatures. Creating a web interface to this database is an ideal
application of server-side interpreted HTML. All of the output pages
containing information about a particular shark will be formatted
similarly. In the few places where dynamic data from the database is
required, commands can be inserted which will be executed before the
user sees the page. You can even generate <a name="INDEX-730" />
<a name="INDEX-731" />dynamic <tt class="literal">&lt;IMG&gt;</tt> tags
that show the desired pictures. Later in the chapter we will look at
how to implement this example using a variety of server-side
interpreters.<a name="INDEX-732" />
<a name="INDEX-733" /></p>
</div>








































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch11_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">11.2. Dynamic Connectivity</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">12.2. W3-mSQL</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>