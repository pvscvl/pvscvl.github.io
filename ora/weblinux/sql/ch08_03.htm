<?label 8.3. Object/Relational Modeling?><html><head><title>Object/Relational Modeling (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch08_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<a name="INDEX-587" /><h2 class="sect1">8.3. Object/Relational Modeling</h2>





<p>The most basic question facing the object-oriented developer using a
relational database is how to map relational data into objects. Your
immediate thought might be to simply map object attributes to fields
in a table. Unfortunately, this approach does not create the perfect
mapping for several reasons.</p>




<ul><li><p>Objects do not store only simple data in their attributes. They may
store collections or relationships with other objects.</p></li><li><p>Most relational databases -- MySQL and mSQL among them -- have
no way of modeling inheritance.</p></li></ul>

<blockquote>
<h4 class="objtitle">Rules of Thumb for Object/Relational Modeling</h4>




<ul><li><p>Each persistent class has a corresponding database table.</p></li></ul>
<ul><li><p>Object fields with primitive datatypes (integers, characters,
strings, etc.) map to columns in the associated database table.</p></li></ul>
<ul><li><p>Each row from a database table corresponds to an instance of its
associated persistent class.</p></li></ul>
<ul><li><p>Each many-to-many object relationship requires a join table just as
database entities with many-to-many relationships require join
tables.</p></li></ul>
<ul><li><p>Inheritance is modeled through a one-to-one relationship between the
two tables corresponding to the class and subclass.</p></li></ul>
</blockquote>

<p>Think about that address book we talked about earlier. We probably
have something like the <tt class="literal">address</tt> and
<tt class="literal">person</tt> tables shown in <a href="ch08_03.htm">Figure 8-1</a>.</p>





<a name="ch08-2-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>The least apparent issue facing programmers is one of mindset. The
basic task of object-oriented access to relational data is to grab
that data and <em class="emphasis">immediately</em> instantiate objects.
An application should only manipulate data through the objects. Most
traditional programming methods, including most C, PowerBuilder, and
VisualBasic development, require the developer to pull the data from
the database and then process that data. The key distinction is that
in object-oriented database programming, you are dealing with
objects, not data.<a name="INDEX-588" /></p>
</blockquote>





<p>
<a name="INDEX-589" /></p>





<a name="ch08-33065" /><div class="figure"><img width="502" src="figs/MSQL.0802.gif" height="180" alt="Figure 8-1" /></div><h4 class="objtitle">Figure 8-1. The data model for a simple address book application</h4>

<p><a href="ch08_03.htm">Figure 8-2</a> <a name="INDEX-590" /> shows the object model that maps to
the data model from <a href="ch08_03.htm">Figure 8-1</a>. each row from the
database turns into a program object. Your application therefore
takes a result set and, for each row returned, instantiates a new
<tt class="literal">Address</tt> or <tt class="literal">Person</tt> instance. The
hardest thing to deal with here is the issue mentioned earlier: how
do you capture the relationship between a person and her address in
the database application? The <tt class="literal">Person</tt> object, of
course, carries a reference to that person's
<tt class="literal">Address</tt> object. But you cannot save the
<tt class="literal">Address</tt> object within the
<tt class="literal">person</tt> table of a relational database. As the data
model suggests, you store object relationships through foreign keys.
In this case, we carry the <tt class="literal">address_id</tt> in the
<tt class="literal">person</tt> table.</p>





<a name="ch08-36296" /><div class="figure"><img width="502" src="figs/MSQL.0803.gif" height="181" alt="Figure 8-2" /></div><h4 class="objtitle">Figure 8-2. The object model supporting a simple address book application</h4>

<p>
<a name="INDEX-591" />With just a tiny amount of extra
complexity to the object model, we can add a world of complexity to
the challenge of mapping our objects to a data model. The extra bit
of complexity could be to have <tt class="literal">Person</tt> inherit from
<tt class="literal">Entity</tt> with a <tt class="literal">Company</tt> class
also inheriting from <tt class="literal">Entity</tt>. How do we capture an
<tt class="literal">Entity</tt> separate from a <tt class="literal">Person</tt>
or a <tt class="literal">Company</tt>? The rule we outlined above is
actually more of a guideline. In some instances, the base class may
be purely abstract and subsequently have no data associated with it
in the database. In that instance, you would not have an entity in
the database for that class.<a name="INDEX-592" /></p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch08_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch08_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">8.2. Data Processing</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">8.4. The Three-tier Architecture</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
