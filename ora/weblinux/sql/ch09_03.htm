<?label 9.3. The CGI Specification?><html><head><title>The CGI Specification (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch09_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<a name="INDEX-613" /><h2 class="sect1">9.3. The CGI Specification</h2>





<p>So what are the exact "set of rules" that enable a CGI
program in say, Batavia, Illinois to communicate with a web browser
in Outer Mongolia? The official CGI specification along with lots of
other nifty CGI information can be found on NCSA's web site at
<a href="../../../../../../hoohoo.ncsa.uiuc.edu/cgi/">http://hoohoo.ncsa.uiuc.edu/cgi/</a>. However, the
reason this chapter exists is so that you don't have to make
the long trek to your web browser and look it up yourself.</p>





<p>There are four methods by which CGI passes information between the
CGI program and the web server -- and hence to the web client:</p>




<ul><li><p>Environment variables</p></li><li><p>Command line</p></li><li><p>Standard input</p></li><li><p>Standard output</p></li></ul>

<p>Using these four methods, the server sends all of the information
provided by the client to the CGI program. The CGI program then does
its magic and sends the output back to the server where it is
forwarded to the client.</p>





<a name="ch09-1-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>This information is written with the
<a name="INDEX-614" />Apache HTTP server in
mind. Apache is the most widely used web server and is available for
virtually all platforms, including Windows 9x and Windows NT.
However, this information should also apply to all HTTP servers that
support CGI. Some of the more proprietary servers, such as those from
Microsoft and Netscape, may have additional features or slightly
different operation. As the face of the web is still changing at an
incredible speed, standards are still in flux and there will
undoubtedly be changes. However, CGI itself seems to have somewhat
stabilized -- at the expense of being overshadowed by other
technologies, such as applets. Any CGI programs you write using this
information will almost certainly be supported by most web servers
for many years.</p>
</blockquote>





<p>When a CGI program is invoked via a form, the most popular interface
used, the browser passes the server a long string that begins with
the path and name of the CGI program. Following that is various other
data called path information, which is passed to the CGI program via
the <tt class="literal">PATH_INFO</tt>
<a name="INDEX-615" /> environment variable (see
<a href="ch09_03.htm">Figure 9-1</a>). After the path information comes a
"?" symbol followed by form data that will be sent to the
server using the <tt class="literal">HTTP GET</tt>
<a name="INDEX-616" /> method. This data will be available
to the CGI program through the
<tt class="literal">QUERY_STRING</tt>
<a name="INDEX-617" /> environment variable.
Finally, any form data coming from the page itself through a
<tt class="literal">POST</tt>
<a name="INDEX-618" /> form, the most common type, will be sent
to the server using the <a name="INDEX-619" />HTTP <tt class="literal">POST</tt> method. This
data will be passed to the CGI program through the standard input. A
typical string passed from the browser to the server is shown in
<a href="ch09_03.htm">Figure 9-1</a>. The program named
<em class="emphasis">formread</em>
<a name="INDEX-620" />, in directory
<em class="emphasis">cgi-bin</em>
<a name="INDEX-621" />, is invoked by the server with the
extra path information extra/information where the query data
<tt class="literal">choice=help</tt> is included -- most likely as part
of the original URL. Finally the form data itself (the text
"CGI programming" entered into a field labeled
"keywords") is sent via an HTTP <tt class="literal">POST</tt>.</p>





<a name="ch09-33948" /><div class="figure"><img width="502" src="figs/MSQL.0901.gif" height="67" alt="Figure 9-1" /></div><h4 class="objtitle">Figure 9-1. Parts of the string passed from browser to server</h4>

<a name="ch09-2-fm2xml" /><div class="sect2">
<h3 class="sect2">9.3.1. Environment Variables</h3>





<p>When the server executes a CGI program, the first thing it does is
give the program some information to work with in the form of
<a name="INDEX-622" />environment variables. Seventeen variables
are officially defined in the specification, while a great deal more
unofficial ones that are used via the
<tt class="literal">HTTP_</tt>
<a name="INDEX-623" /> mechanism described later. Your CGI
program can access these environment variables just as they would
access the environment variables of the shell if the program was run
from the command line. In a shell script, for instance, the
environment variable <tt class="literal">FOO</tt>
<a name="INDEX-624" /> could be accessed as
<tt class="literal">$FOO</tt>; in Perl it would be
<tt class="literal">$ENV{</tt>'<tt class="literal">FOO</tt>'<tt class="literal">}</tt>;
in C <tt class="literal">getenv("FOO")</tt>; etc. Listed in <a href="ch09_03.htm">Table 9-1</a> are the variables that are always
set -- even if it is to a null value -- by the server. In
addition to these variables, information returned by the client in
the header of the request is included as variables of the form
<tt class="literal">HTTP_FOO</tt>, where <tt class="literal">FOO</tt> is the name
of the header. For example, most web browsers include version
information in a header labeled <tt class="literal">USER_AGENT</tt>. This
can be accessed by your CGI program as the header
<tt class="literal">HTTP_USER_AGENT</tt>. <a href="ch09_03.htm">Table 9-1</a>
lists the CCGI environment variables.</p>





<a name="ch09-17705" /><h4 class="objtitle">Table 9-1. The CGI Environment Variables </h4><table border="1">



<tr>
<th>
<p>Environment Variable</p></th>
<th>
<p>Description</p></th>
</tr>










<tr>
<td>
<p>CONTENT_LENGTH</p></td>
<td>
<p>The length, in bytes, of the data provided by the
<tt class="literal">POST</tt> or <tt class="literal">PUT</tt> method.</p></td>
</tr>




<tr>
<td>
<p>CONTENT_TYPE</p></td>
<td>
<p>The MIME type of any data attached via a <tt class="literal">POST</tt> or
<tt class="literal">PUT</tt> method.</p></td>
</tr>




<tr>
<td>
<p>GATEWAY_INTERFACE</p></td>
<td>
<p>The version number of the CGI specification supported by the server.</p></td>
</tr>




<tr>
<td>
<p>PATH_INFO</p></td>
<td>
<p>Extra path information provided by the client. For example, in a
request of the form
<em class="emphasis">http://www.myserver.com/test.cgi/this/is/a/path?field=green</em>,'<em class="emphasis">/this/is/a/path</em>
will be the value of the <tt class="literal">PATH_INFO</tt> variable.</p></td>
</tr>




<tr>
<td>
<p>PATH_TRANSLATED</p></td>
<td>
<p>This is the same as <tt class="literal">PATH_INFO</tt> except any
translation that is possible, such as expanding
"~account" names, is done by the server.</p></td>
</tr>




<tr>
<td>
<p>QUERY_STRING</p></td>
<td>
<p>Any information following the "?" in the URL. This is
also the information provided in a form if the
<tt class="literal">REQUEST_METHOD</tt> is <tt class="literal">GET</tt>.</p></td>
</tr>




<tr>
<td>
<p>REMOTE_ADDR</p></td>
<td>
<p>The IP address of the client making the request.</p></td>
</tr>




<tr>
<td>
<p>REMOTE_HOST</p></td>
<td>
<p>The hostname, if available, of the client making the request.</p></td>
</tr>




<tr>
<td>
<p>REMOTE_IDENT</p></td>
<td>
<p>If the web server and the client both support identd-style
identification, this will be the username of the account making the
request.</p></td>
</tr>




<tr>
<td>
<p>REQUEST_METHOD</p></td>
<td>
<p>The method which the client used to make the request. For the
run-of-the-mill CGI programs of the type we are going to make, this
will usually be <tt class="literal">POST</tt> or <tt class="literal">GET</tt>.</p></td>
</tr>




<tr>
<td>
<p>SCRIPT_NAME</p></td>
<td>
<p>The path given by the client to run the script. This can be used for
self-referencing URLs, and so that scripts that are linked in
different places can react differently depending on their location.</p></td>
</tr>




<tr>
<td>
<p>SERVER_NAME</p></td>
<td>
<p>The hostname -- or IP number, if the hostname is not
available -- of the machine on which the web server is running.</p></td>
</tr>




<tr>
<td>
<p>SERVER_PORT</p></td>
<td>
<p>The port number the web server is using.</p></td>
</tr>




<tr>
<td>
<p>SERVER_PROTOCOL</p></td>
<td>
<p>Protocol by which the client is communicating with the server. For
our purposes, it will almost always be HTTP.</p></td>
</tr>




<tr>
<td>
<p>SERVER_SOFTWARE</p></td>
<td>
<p>Version information for the web server executing the CGI program.</p></td>
</tr>





</table>





<p>The following is an example CGI script in Perl which prints out all
of the environment variables set by the server -- as well as any
inherited variables, such as <tt class="literal">PATH</tt>, which are set
by the shell that executed the
server.<a name="INDEX-625" />
<a name="INDEX-626" /></p>





<blockquote><pre class="code">#!/usr/bin/perl -w

print &lt;&lt;HTML;
Content-type: text/html\n\n

&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;&lt;/title&gt;&lt;/head&gt;&lt;BODY&gt;
&lt;p&gt;Environment Variables
&lt;p&gt;
HTML

foreach (keys %ENV) { print "$_: $ENV{$_}&lt;br&gt;\n"; }

print &lt;&lt;HTML;
&lt;/body&gt;&lt;/html&gt;
HTML</pre></blockquote>





<p>Any of these variables can be used, even manipulated by your CGI
program. However, none of the changes affect the web server which
spawned your program.<a name="INDEX-627" /></p>
</div>
















<a name="ch09-3-fm2xml" /><div class="sect2">
<a name="INDEX-628" /><h3 class="sect2">9.3.2. Command Line</h3>





<p>A little used feature of CGI allows arguments to be passed as command
line parameters to a CGI program. The reason the feature is little
used is because there are only a few practical applications, so we
won't dwell on it here. Basically, if the
<tt class="literal">QUERY_STRING</tt>
<a name="INDEX-629" /> environment variable does
not contain an "=" symbol, the CGI program will be
executed with the command line arguments as the
<tt class="literal">QUERY_STRING</tt>. For instance,
<em class="emphasis">http://www.myserver.com/cgi-bin/finger?root</em> will
execute finger root on <em class="emphasis">www.myserver.com</em>.</p>





<p>Command line parameters are most commonly used in conjunction with
the <tt class="literal">&lt;ISINDEX&gt;</tt> HTML tag. The
<tt class="literal">&lt;ISINDEX&gt;</tt> tag is a miniform contained in a
single tag. When a browser encounters an
<tt class="literal">&lt;ISINDEX&gt;</tt> tag, it displays a text box in
which the user can enter a query string. Upon
submission -- usually after the user presses the
"Enter" key -- the browser extracts a URL from the
<tt class="literal">&lt;ISINDEX&gt;</tt> tag and calls it, passing the
words of the query string as the command line.</p>





<p>For example, the finger CGI mentioned earlier could be written so
that, if called with no arguments, it outputs an HTML page that
contains an <tt class="literal">&lt;ISINDEX&gt;</tt> tag. The user would
then enter an address into the field and the finger would be executed
as described above.</p>
</div>
















<a name="ch09-4-fm2xml" /><div class="sect2">
<h3 class="sect2">9.3.3. Standard Input</h3>





<p>As mentioned above, if a client sends information via a
<tt class="literal">PUT</tt> or <tt class="literal">POST</tt> HTTP request, the
length and MIME type of that information are put into the
<tt class="literal">CONTENT_LENGTH</tt>
<a name="INDEX-630" /> and
<tt class="literal">CONTENT_TYPE</tt>
<a name="INDEX-631" /> environment variables,
respectively. The actual data is sent into the CGI program's
standard input. No end-of-data marker is necessarily sent to the
program, so it must examine the <tt class="literal">CONTENT_LENGTH</tt>
variable and read only that number of bytes. This is the primary
method of transferring form data from forms and we will use it almost
exclusively in our examples.</p>





<p>Many libraries exist for almost all imaginable languages that perform
the essential set-up tasks of a CGI program for you, including
determining whether the incoming data was sent via the
<tt class="literal">GET</tt> or
<tt class="literal">POST</tt>
<a name="INDEX-632" />
<a name="INDEX-633" /> method and either parsing the
<tt class="literal">QUERY_STRING</tt> environment variable or reading the
standard input, respectively. These libraries then place the data
into easily accessible variables. A couple of the more common
libraries are listed below. For the purely biased reason that we
don't know every language out there, we will go into detail
only for libraries that work with Perl and C. However, CGI can be
very powerful in just about any language. An extensive list of CGI
resources for various languages can be found on Yahoo at
<a href="../../../../../../www.yahoo.com/Computers_and_Internet/Internet/World_Wide_Web/CGI___Common_Gateway_Interface/">http://www.yahoo.com/Computers_and_Internet/Internet/World_Wide_Web/CGI___Common_Gateway_Interface/</a>.</p>
</div>
















<a name="ch09-5-fm2xml" /><div class="sect2">
<a name="INDEX-634" /><h3 class="sect2">9.3.4. Accepting Input in Perl</h3>





<p>Most of the rest of this section contains examples in Perl and C.
This does not mean that Perl and C are any better, or worse, than any
others but simply that it has been found very useful by many people
in the area of CGI. In particular, because of the popularity of Perl
in this area, we still do the vast majority of our CGI work in it. We
would, however, also strongly recommend you take a look at
<a name="INDEX-635" />Python if you have not yet made a language
decision for CGI programs.</p>





<p>Two major libraries provide CGI interfaces for Perl. The first is
<em class="emphasis">cgi-lib.pl.</em>
<a href="#FOOTNOTE-12">[12]</a> The <em class="emphasis">cgi-lib.pl</em> utility is
very common because for a while it was the only major library
available. It is designed to work under Perl 4, but still works under
Perl 5. The other library, <em class="emphasis">CGI.pm</em>,<a href="#FOOTNOTE-13">[13]</a> is more recent and in many ways supersedes
<em class="emphasis">cgi-lib.pl</em>. <em class="emphasis">CGI.pm</em> is
written for Perl 5 and uses an entirely object-oriented scheme for
dealing with CGI data. The <em class="emphasis">CGI.pm</em> module parses
the standard input and <tt class="literal">QUERY_STRING</tt> variable and
stores data in a <tt class="literal">CGI</tt> object. Your program needs
only to create a new <tt class="literal">CGI</tt> object and use simple
methods like <tt class="literal">param()</tt> to retrieve the data in which
you are interested. <a href="ch09_03.htm">Example 9-1</a> is a short example
that shows how <em class="emphasis">CGI.pm</em> interprets data. All of
the Perl examples in this section will use
<em class="emphasis">CGI.pm</em>.</p><blockquote>




<a name="FOOTNOTE-12" /><p>[12]<a href="../../../../../../www.bio.cam.ac.uk/cgi-lib/">http://www.bio.cam.ac.uk/cgi-lib/</a></p>




</blockquote><blockquote>




<a name="FOOTNOTE-13" /><p>[13]<a href="../../../../../../www-genome.wi.mit.edu/ftp/pub/software/WWW/cgi_docs.html">http://www-genome.wi.mit.edu/ftp/pub/software/WWW/cgi_docs.html</a></p>




</blockquote>





<a name="ch09-42447" /><div class="example">
<h4 class="objtitle">Example 9-1. Parsing CGI Data in Perl </h4>




<blockquote><pre class="code">#!/usr/bin/perl -w

use CGI qw(:standard);  # Use the CGI.pm module. The qw(:standard) imports the
                        # namespace of the standard CGI functions to allow for
                        # clearer code. This can only be done if only one CGI
                        # object will be used throughout the script.

$mycgi = new CGI; # Create a CGI object, which will be our 'gateway' to the form
                  # data.

@fields = $mycgi-&gt;param; # This retrieves the names of the all of the form fields
                         # entered.


print header, start_html('CGI.pm test'); # The 'header' and 'start_html' methods
                              'header'
                              # prints out the required HTTP header, and 
                              #'start_html' prints out the HTML header with the 
                              #title given, along with the &lt;BODY&gt; tag.
print "&lt;p&gt;Form information:&lt;br&gt;";


foreach (@fields) { print $_, ":", $mycgi-&gt;param($_), "&lt;br&gt;"; }
# For each of the fields, print out the field name along with the value (which
# is obtained through $mycgi-&gt;param('fieldname').

print end_html; # A shortcut provided to print the "&lt;/body&gt;&lt;/html&gt;" ending tags.</pre></blockquote>
</div>
</div>
















<a name="ch09-6-fm2xml" /><div class="sect2">
<a name="INDEX-636" /><h3 class="sect2">9.3.5. Accepting Input in C</h3>





<p>Since the primary MySQL and mSQL APIs are written in C, we will not
completely abandon it for Perl, but instead provide a few C examples
where appropriate. There are three widely used C libraries for CGI
programming: <em class="emphasis">cgic</em> by Tom Boutell;<a href="#FOOTNOTE-14">[14]</a> <em class="emphasis">cgihtml</em> by Eugene Kim;<a href="#FOOTNOTE-15">[15]</a> and <em class="emphasis">libcgi</em> from EIT.<a href="#FOOTNOTE-16">[16]</a> We have found <em class="emphasis">cgic</em> to be the most
complete and easiest to use. However, it lacks the ability to list
all of the form variables if you do not know them beforehand. This
ability can actually be added by means of a trivial patch, but that
is beyond the scope of this chapter. Thus, to mimic the example Perl
script used earlier we use the <em class="emphasis">cgihtml</em> library
in <a href="ch09_03.htm">Example 9-1</a>.</p><blockquote>




<a name="FOOTNOTE-14" /><p>[14]<a href="../../../../../../www.boutell.com/cgic/">http://www.boutell.com/cgic/</a></p>




</blockquote><blockquote>




<a name="FOOTNOTE-15" /><p>[15]<a href="../../../../../../hcs.harvard.edu/~eekim/web/cgihtml/">http://hcs.harvard.edu/~eekim/web/cgihtml/</a></p>




</blockquote><blockquote>




<a name="FOOTNOTE-16" /><p>[16]<a href="../../../../../../wsk.eit.com/wsk/dist/doc/libcgi/libcgi.html">http://wsk.eit.com/wsk/dist/doc/libcgi/libcgi.html</a></p>




</blockquote>





<a name="ch09-26715" /><div class="example">
<h4 class="objtitle">Example 9-1. Parsing CGI Data in C </h4>




<blockquote><pre class="code">/* cgihtmltest.c - A generic CGI program to print out the keys and values
	of the submitted form data.
*/

#include &lt;stdio.h&gt;
#include "cgi-lib.h"  /* This contains all of the definitions for the CGI 
                      functions */
#include "html-lib.h" /* This contains all of the definitions for the HTML
                      helper functions */

void print_all(llist l)
/* This functions prints out all of the data submitted by the form in the
same format as the above Perl example. Cgihtml also provides a built-in
function, print_entries(), which does the exact same thing using a set
HTML definition list format.
*/
{
  node* window; 
/* The 'node' type is defined by the cgihtml library and refers to the 
linked list which stores all of the form data. */

  window = l.head; 
/* This sets a pointer at the beginning of the form data */

  while (window != NULL) {
/* Go through the linked list until you reach the last (the first empty) entry */

    printf("  %s:%s&lt;br&gt;\n",window-&gt;entry.name,
        replace_ltgt(window-&gt;entry.value));
/* Print out the data. Replace_ltgt() is a provided function which HTML encodes
the text so that it will show up correctly on the client browser. */

    window = window-&gt;next;
/* Go to the next entry in the list. */

  }
}


int main()
{
  llist entries; /* This is a pointer to the parsed data */
  int status; /* This is a status integer provided by the library */

  html_header(); 
/* This is an HTML-helper function which prints the HTML header */

  html_begin("cgihtml test");
/* This is an HTML-helper function which prints the beginning of the HTML
page with the specified title. */

  status = read_cgi_input(&amp;entries);
/* This reads in and parses the form data */
  printf("&lt;p&gt;Form information:&lt;br&gt;");
  print_all(entries);
/* Call the print_all() function defined above. */
  html_end();
/* This is an HTML-helper function which prints the end of the HTML page. */
  list_clear(&amp;entries);
/* This frees the memory used by the form data. */
  return 0;
}</pre></blockquote>
</div>
</div>
















<a name="ch09-7-fm2xml" /><div class="sect2">
<a name="INDEX-637" /><h3 class="sect2">9.3.6. Standard Output</h3>





<p>Data sent by the CGI program to the standard output will be read by
the web server and sent to the client. If the name of the script
begins with <em class="emphasis">nph-</em>, the data is sent straight to
the client without any interference from the web server. In this
case, it is up to the CGI program to provide a valid HTTP header that
will be understood by the client. Otherwise, let the web server
create the HTTP header for
you.<a name="INDEX-638" /></p>





<p>Even if you do not use an <em class="emphasis">nph-</em> script, you must
still give the server one directive which tells it something about
your output. Most commonly, this will be a
<tt class="literal">Content-Type</tt>
<a name="INDEX-639" /> HTTP header, but it could also be a
<tt class="literal">Location</tt>
<a name="INDEX-640" /> header. The headers should be followed
by a blank line -- that is, a bare linefeed or CR/LF combination.</p>





<p>The <tt class="literal">Content-Type</tt> header tells the server what type
of data is being output by your CGI program. If the output is an HTML
page, the line should be <tt class="literal">Content-Type:
</tt><em class="replaceable">text/html</em>. The
<tt class="literal">Location</tt> header tells the server the name of
another URL -- or another path on the same server -- to which
to direct the client. It is of the form <tt class="literal">Location:
</tt><em class="replaceable">http://www.myserver.com/another/place/</em>.</p>





<p>After the HTTP headers and the blank line, you can send the body of
your program's output, whether it be an HTML page, an image,
plain text, or whatever. Among the CGI programs included with the
Apache web server, the <em class="emphasis">nph-test-cgi</em> and
<em class="emphasis">test-cgi</em> effectively show the difference between
the nph and non-nph style headers, respectively.</p>





<p>In this section, we will be using libraries such as
<em class="emphasis">CGI.pm</em> and <em class="emphasis">cgic</em> that
provide functions for printing out the HTTP as well as the HTML
headers. This will allow you to concentrate on generating the content
itself. These helper functions are demonstrated in the examples
earlier in this chapter.<a name="INDEX-641" /></p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch09_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">9.2. HTML Forms</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">9.4. Important Considerations for CGI Scripts</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>