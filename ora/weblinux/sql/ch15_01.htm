<?label 15. SQL Reference?><html><head><title>SQL Reference (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="part3.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 15. SQL Reference</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch15_01.htm">MySQL SQL
</a><br />
<a href="ch15_02.htm">mSQL SQL
</a><br /></p></div>





<div class="sect1"><a name="ch15-34556" />
<a name="INDEX-895" /><a name="INDEX-896" /><h2 class="sect1">15.1. MySQL SQL
</h2>





<a name="INDEX-897" /><a name="INDEX-898" /><a name="INDEX-899" /><a name="INDEX-900" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>ALTER/MODIFY</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
ALTER [IGNORE] TABLE <em class="replaceable">table</em> ADD [COLUMN] <em class="replaceable">create_clause</em>
ALTER [IGNORE] TABLE <em class="replaceable">table</em> ADD INDEX [<em class="replaceable">name</em>] (<em class="replaceable">column</em>, . . .)
ALTER [IGNORE] TABLE <em class="replaceable">table</em> ADD UNIQUE [<em class="replaceable">name</em>] (<em class="replaceable">column</em>, . . .)
ALTER [IGNORE] TABLE <em class="replaceable">table</em> ALTER [COLUMN] <em class="replaceable">column</em> SET DEFAULT <em class="replaceable">value</em>
ALTER [IGNORE] TABLE <em class="replaceable">table</em> ALTER [COLUMN] <em class="replaceable">column</em> DROP DEFAULT
ALTER [IGNORE] TABLE <em class="replaceable">table</em> CHANGE [COLUMN] <em class="replaceable">column</em> <em class="replaceable">create_clause</em>
ALTER [IGNORE] TABLE <em class="replaceable">table</em> DROP [COLUMN] <em class="replaceable">column</em>
ALTER [IGNORE] TABLE <em class="replaceable">table</em> DROP FOREIGN KEY <em class="replaceable">key</em>
ALTER [IGNORE] TABLE <em class="replaceable">table</em> DROP INDEX <em class="replaceable">key</em>
ALTER [IGNORE] TABLE <em class="replaceable">table</em> DROP PRIMARY KEY
ALTER [IGNORE] TABLE table MODIFY [COLUMN] create_clause
ALTER [IGNORE] TABLE&gt; <em class="replaceable">table</em> RENAME [AS] <em class="replaceable">new_name</em>
</pre></td><td align="right" /></tr></table><p>The <tt class="literal">ALTER</tt>
<a name="INDEX-898" />
statement covers a wide range of actions that modify the structure of
a table. This statement is used to add, change, or remove columns
from an existing table as well as to remove indexes. Multiple
<tt class="literal">ALTER</tt> statements may be combined into one using
commas as in the following example:</p><blockquote><pre class="code">ALTER TABLE mytable DROP myoldcolumn, ADD mynewcolumn INT</pre></blockquote><p>To perform modifications on the table, MySQL creates a copy of the
table and changes it, meanwhile queuing all table altering queries.
When the change is done, the old table is removed and the new table
put it its place. At this point the queued queries are performed. As
a safety precaution, if any of the queued queries create duplicate
keys that should be unique, the <tt class="literal">ALTER</tt> statement is
rolled back and cancelled. If the
<tt class="literal">IGNORE</tt>
<a name="INDEX-899" /> keyword is present in the statement,
duplicate unique keys are ignored and the <tt class="literal">ALTER</tt>
statement proceeds as if normal. Be warned that using
<tt class="literal">IGNORE</tt> on an active table with unique keys is
inviting table corruption.</p><p>As mentioned earlier, there are several different, often orthogonal,
actions performed by <tt class="literal">ALTER</tt>:</p><dl>
<dt><b><tt class="literal">ADD [COLUMN] </tt><em class="replaceable">create_clause</em></b></dt>
<dd><p>Inserts a new column into the table. The
<tt class="literal">create_clause</tt> is of the same type as used by the
<tt class="literal">CREATE</tt> statement (see later). The table must
already exist and must not have a column with the same name as the
new one. (The <tt class="literal">COLUMN</tt> keyword is optional and has
no effect.)</p></dd>





<dt><b><tt class="literal">ADD INDEX</tt> <em class="emphasis">[</em><em class="replaceable">name</em><em class="emphasis">]</em> <em class="emphasis">(</em><em class="replaceable">column</em><em class="emphasis">, ...)</em></b></dt>
<dd><p>Creates an index out of the given columns. Up to 15 columns may be
combined in an index. Naming an index is optional. If no name is
given, the index will be named after the first column listed (with a
numerical suffix <tt class="literal">_2</tt>, <tt class="literal">_3</tt>, etc.,
for uniqueness if necessary).</p></dd>





<dt><b><tt class="literal">ADD UNIQUE</tt> <em class="emphasis">[</em><em class="replaceable">name</em><em class="emphasis">]</em> <em class="emphasis">(</em><em class="replaceable">column</em><em class="emphasis">, ...)</em></b></dt>
<dd><p>Is identical to <tt class="literal">ADD INDEX</tt> except that the values
of the indexed columns are guaranteed to be unique. That is, if a
user attempts to add a value that already exists to a unique index,
an error will be returned.</p></dd>





<dt><b><tt class="literal">ALTER [COLUMN]</tt> <em class="replaceable">column</em> <tt class="literal">SET DEFAULT</tt> <em class="replaceable">value</em></b></dt>
<dt><b><tt class="literal">ALTER [COLUMN]</tt> <em class="replaceable">column</em> <tt class="literal">DROP DEFAULT</tt></b></dt>
<dd><p>Creates, modifies or deletes the default value of a column. When the
<tt class="literal">SET DEFAULT</tt> phrase is used, the default value of
the column is set to the new value (even if no default previously
existed). When <tt class="literal">DROP DEFAULT</tt> is used, any existing
default value is removed. If the default is dropped, any existing
rows that were created with the default value are left untouched.
(The <tt class="literal">COLUMN</tt> keyword is optional and has no
effect.)</p></dd>





<dt><b><tt class="literal">CHANGE [COLUMN] </tt><em class="replaceable">new_column_name create_clause</em></b></dt>
<dt><b><tt class="literal">MODIFY [COLUMN]</tt> <em class="replaceable">create_clause</em></b></dt>
<dd><p>Alters the definition of a column. This statement is used to change a
column from one type to a different type while affecting the data as
little as possible. The create clause is a full clause as specified
in the CREATE statement. This includes the name of the column.
Because of this, you change the name of the column using this
statement. (For example, <tt class="literal">ALTER TABLE mytable CHANGE name
newname CHAR(30)</tt> ). The <tt class="literal">MODIFY</tt> version
is the same as <tt class="literal">CHANGE</tt> if the new column has the
same name as the old. The <tt class="literal">COLUMN</tt> keyword is
optional and has no effect. The following conversions are done
automatically:</p>




<ul>
<li><p>Integer to Floating Point, and vice versa (e.g., <tt class="literal">BIGINT</tt> to <tt class="literal">DOUBLE</tt>).</p></li>
<li><p>Smaller numerical value to larger numerical value (e.g., <tt class="literal">INTEGER</tt> to <tt class="literal">BIGINT</tt>).</p></li>
<li><p>Larger numerical value to smaller numerical value (e.g., <tt class="literal">DOUBLE</tt> to FLOAT). If a value is beyond the limits of the new type, the highest (or greatest negative) possible value of the new type is used instead.</p></li>
<li><p>Numerical to character (e.g., <tt class="literal">SMALLINT</tt> to <tt class="literal">CHAR(5)</tt>).</p></li>
<li><p>Character to numerical (e.g., <tt class="literal">VARCHAR</tt> to <tt class="literal">MEDIUMINT</tt>). Either integer or floating point conversion is performed upon the text (whichever is appropriate for the new type).</p></li>
<li><p>Smaller character to larger character (e.g., <tt class="literal">BLOB</tt> to <tt class="literal">LONGTEXT</tt>).</p></li>
<li><p>Larger character to smaller character (e.g., <tt class="literal">TEXT</tt> to <tt class="literal">VARCHAR(255)</tt>). If a value is longer than the limits of the new type, the text is truncated to fit the new type.</p></li>
<li><p>Even for conversions that are not mentioned here (e.g., <tt class="literal">TIMESTAMP</tt> to <tt class="literal">YEAR</tt>), MySQL will try its best to perform a reasonable conversion. Under no circumstance will MySQL give up and return an error when using this statement; a conversion of some sort will always be done. With this in mind you should (1) make a backup of the data before the conversion and (2) immediately check the new values to see if they are reasonable.</p></li>
</ul></dd>





<dt><b><tt class="literal">DROP [COLUMN] </tt><em class="replaceable">column</em></b></dt>
<dd><p>Deletes a column from a table. This statement will remove a column
and all of its data from a table permanently. There is no way to
recover data destroyed in this manner other than from backups. All
references to this column in indices will be removed. Any indices
where this was the sole column will be destroyed as well. (The
<tt class="literal">COLUMN</tt> keyword is optional and has no effect.)</p></dd>





<dt><b><tt class="literal">DROP INDEX </tt><em class="replaceable">key</em></b></dt>
<dd><p>Removes an index from a table. This statement will completely erase
an index from a table. This statement will not delete or alter any of
the table data itself, only the index data. Therefore, an index
removed in this manner can be recreated using the <tt class="literal">ALTER
TABLE ... ADD INDEX</tt> statement.</p></dd>





<dt><b><tt class="literal">DROP PRIMARY KEY</tt></b></dt>
<dd><p>Identical to <tt class="literal">DROP INDEX</tt> except that it looks for
the special index known as the Primary Key. If no Primary Key is
found in the table, the first unique key is deleted.</p></dd>





<dt><b><tt class="literal">RENAME [AS]</tt> <em class="replaceable">new_table</em></b></dt>
<dd><p>Changes the name of the table. This operation does not affect any of
the data or indices within the table, only the table's name. If
this statement is performed alone, without any other <tt class="literal">ALTER
TABLE</tt> clauses, MySQL will not create a temporary table as
with the other clauses, but simply perform a fast Unix-level rename
of the table files.</p></dd>

</dl><p>The <tt class="literal">FOREIGN KEY</tt>
<a name="INDEX-900" /> operation is currently not
implemented in MySQL. While the syntax is there, attempting an action
on a <tt class="literal">FOREIGN KEY</tt> will do nothing.</p><p>To perform any of the <tt class="literal">ALTER TABLE</tt> actions, you
must have <tt class="literal">SELECT, INSERT, DELETE, UPDATE, CREATE,</tt>
and <tt class="literal">DROP</tt> privileges for the table in question.</p>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Add the field 'address2' to the table 'people' and make it of type 'VARCHAR'
# with a maximum length of 200.
ALTER TABLE people ADD COLUMN address2 VARCHAR(100)
# Add two new indexes to the 'hr' table, one regular index for the 'salary'
# field and one unique index for the 'id' field. Also, continue operation if
# duplicate values are found while creating the 'id_idx' index (very dangerous!).
ALTER TABLE hr ADD INDEX salary_idx ( salary )
ALTER IGNORE TABLE hr ADD UNIQUE id_idx ( id )
# Change the default value of the 'price' field in the 'sprockets' table to
# $19.95.
ALTER TABLE sprockets ALTER price SET DEFAULT '$19.95'
# Remove the default value of the 'middle_name' field in the 'names' table.
ALTER TABLE names ALTER middle_name DROP DEFAULT
# Change the type of the field 'profits' from its previous value (which was
# perhaps INTEGER) to BIGINT.
ALTER TABLE finanaces CHANGE COLUMN profits profits BIGINT
# Remove the 'secret_stuff' field from the table 'not_private_anymore'
ALTER TABLE not_private_anymore DROP secret_stuff
# Delete the named index 'id_index' as well as the primary key from the 
# table 'cars'.
ALTER TABLE cars DROP INDEX id_index, DROP PRIMARY KEY
# Rename the table 'rates_current' to 'rates_1997'
ALTER TABLE rates_current RENAME AS rates_1997</pre></blockquote>





</div>

<a name="INDEX-901" /><a name="INDEX-902" /><a name="INDEX-903" /><a name="INDEX-904" /><a name="INDEX-905" /><a name="INDEX-906" /><a name="INDEX-907" /><a name="INDEX-908" /><a name="INDEX-909" /><a name="INDEX-910" /><a name="INDEX-911" /><a name="INDEX-912" /><a name="INDEX-913" /><a name="INDEX-914" /><a name="INDEX-915" /><a name="INDEX-916" /><a name="INDEX-917" /><a name="INDEX-918" /><a name="INDEX-919" /><a name="INDEX-920" /><a name="INDEX-921" /><a name="INDEX-922" /><a name="INDEX-923" /><a name="INDEX-924" /><a name="INDEX-925" /><a name="INDEX-926" /><a name="INDEX-927" /><a name="INDEX-928" /><a name="INDEX-929" /><a name="INDEX-930" /><a name="INDEX-931" /><a name="INDEX-932" /><a name="INDEX-933" /><a name="INDEX-934" /><a name="INDEX-935" /><a name="INDEX-936" /><a name="INDEX-937" /><a name="INDEX-938" /><a name="INDEX-939" /><a name="INDEX-940" /><a name="INDEX-941" /><a name="INDEX-942" /><a name="INDEX-943" /><a name="INDEX-944" /><a name="INDEX-945" /><a name="INDEX-946" /><a name="INDEX-947" /><a name="INDEX-948" /><a name="INDEX-949" /><a name="INDEX-950" /><a name="INDEX-951" /><a name="INDEX-952" /><a name="INDEX-953" /><a name="INDEX-954" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>CREATE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
<a name="INDEX-902" />
CREATE DATABASE <em class="replaceable">dbname</em>
CREATE TABLE <em class="replaceable">name</em> (<em class="replaceable">field_name</em><em class="replaceable">field_type</em>, ... )
CREATE INDEX <em class="replaceable">name</em> ON<em class="replaceable">table</em> ( <em class="replaceable">column</em>, ... )
<a name="INDEX-903" />
CREATE FUNCTION<em class="replaceable">name</em> RETURNS<em class="replaceable">values</em> SONAME<em class="replaceable">library</em>
</pre></td><td align="right" /></tr></table><p>Creates new database elements (or entirely new databases). This
statement is used to create databases, tables, and user defined
functions (UDFs).</p><p>The <tt class="literal">CREATE INDEX</tt>
<a name="INDEX-904" /> statement is provided for compatibility
with other implementations of SQL. In older versions of SQL this
statement does nothing. As of 3.22, this statement is equivalent to
the <tt class="literal">ALTER TABLE ADD INDEX</tt> statement. To perform
the <tt class="literal">CREATE INDEX</tt> statement, you must have
<tt class="literal">INDEX</tt> privileges for the table in question.</p><p>The <tt class="literal">CREATE DATABASE</tt>
<a name="INDEX-905" /> statement creates an
entirely new, empty database. This is equivalent to running the
<tt class="literal">mysqladmin create</tt> utility. As with running
<tt class="literal">mysqladmin</tt>, you must be the administrative user
for MySQL (usually <tt class="literal">root</tt> or
<tt class="literal">mysql</tt>) to perform this statement.</p><p>The <tt class="literal">CREATE FUNCTION</tt>
<a name="INDEX-906" /> statement allows MySQL
statements to access precompiled executable functions. These
functions can perform practically any operation, since they are
designed and implemented by the user. The return value of the
function can be <tt class="literal">STRING</tt>, for character data;
<tt class="literal">REAL</tt>, for floating point numbers; or
<tt class="literal">INTEGER</tt> for integer numbers. MySQL will translate
the return value of the C function to the indicated type. The library
file that contains the function must be a standard shared library
that MySQL can dynamically link into the server.</p><p>The <tt class="literal">CREATE TABLE</tt>
<a name="INDEX-907" /> statement defines the structure of a
table within the database. This statement is how all MySQL tables are
created. This statement consists of the name of the new table
followed by any number of field definitions. The syntax of a field
definition is the name of the field followed by its type, followed by
any modifiers (e.g., <tt class="literal">name char(30) not null</tt>).
MySQL supports the following
<a name="INDEX-908" />
<a name="INDEX-909" />datatypes,
as shown in <a href="ch15_01.htm">Table 15-1</a>.</p><a name="ch15-36072" /><h4 class="objtitle">Table 15-1. Datatypes</h4><table border="1">




<tr>
<th>
<p><b class="emphasis-bold">Type</b></p></th>
<th>
<p>(in bytes)</p></th>
<th>
<p>Comments</p></th>
</tr>










<tr>
<td>
<p><tt class="literal">TINYINT(</tt>
<a name="INDEX-910" /><em class="replaceable">length</em><tt class="literal">)/INT1(</tt><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>1</p></td>
<td>
<p>Integer with unsigned range of 0-255 and signed range of -128-127.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">SMALLINT(</tt>
<a name="INDEX-911" /><em class="replaceable">length</em><tt class="literal">)/INT2(</tt><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>2</p></td>
<td>
<p>Integer with unsigned range of 0-65535 and signed range of
-32768-32767.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">MEDIUMINT(</tt>
<a name="INDEX-912" /><em class="replaceable">length</em><tt class="literal">)/INT3(</tt><em class="replaceable">length</em><tt class="literal">)/MIDDLEINT(</tt>
<a name="INDEX-913" /><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>3</p></td>
<td>
<p>-8388608-8388607.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">INT(</tt>
<a name="INDEX-914" /><em class="replaceable">length</em><tt class="literal">)/INTEGER(</tt><em class="replaceable">length</em><tt class="literal">)/INT4(</tt><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>4</p></td>
<td>
<p>-2147483648-2147483647.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">BIGINT(</tt>
<a name="INDEX-915" /><em class="replaceable">length</em><tt class="literal">)/INT8(</tt><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>8</p></td>
<td>
<p>0-18446744-7370955165 and signed range of
-9223372036854775808-9223372036854775807.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">FLOAT/FLOAT(4)/FLOAT(</tt>
<a name="INDEX-916" /><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)/FLOAT4(</tt><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)</tt></p></td>
<td>
<p>4</p></td>
<td>
<p>Floating point number with maximum value +/-3.402823466E38 and
minimum (non-zero) value +/-1.175494351E-38.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">DOUBLEPRECISION(</tt>
<a name="INDEX-917" /><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)/DOUBLE(</tt>
<a name="INDEX-918" /><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)/REAL(</tt>
<a name="INDEX-919" /><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)/FLOAT8(</tt><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)/FLOAT(8)</tt></p></td>
<td>
<p>8</p></td>
<td>
<p>+/-2.2250738585072014E-308.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">DECIMAL(</tt>
<a name="INDEX-920" /><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)/NUMERIC(</tt>
<a name="INDEX-921" /><em class="replaceable">length</em><tt class="literal">,</tt><em class="replaceable">decimal</em><tt class="literal">)</tt></p></td>
<td>
<p>length</p></td>
<td>
<p>Floating point number with the range of the <tt class="literal">DOUBLE</tt>
type that is stored as a <tt class="literal">CHAR</tt> field.
<tt class="literal">DECIMAL</tt> and <tt class="literal">NUMERIC</tt> are always
treated as <tt class="literal">CHAR</tt> fields that just happen to contain
a numeric value.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">TIMESTAMP(</tt>
<a name="INDEX-922" /><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>4</p></td>
<td>
<p>A timestamp value that updates every time the row is modified. You
may also assign a value to field manually. Assigning a
<tt class="literal">NULL</tt>`YYMMDD'.</p></td>
</tr>




<tr>
<td>
<p><tt class="computeroutput" />
<a name="INDEX-923" /><tt class="literal">DATE</tt></p></td>
<td>
<p>3</p></td>
<td>
<p>A date value that stores the year, month and date. Values are always
output with the format `YYYY-MM-DD', but may be entered
in any of the following formats: `YY-MM-DD',
`YYYY-MM-DD', `YYMMDD', or
`YYYYMMDDHHMSS' (the time portion is ignored).</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">TIME</tt>
<a name="INDEX-924" /></p></td>
<td>
<p>3</p></td>
<td>
<p>A time value that stores the hour, minute and second. Values are
always output with the format `HH:MM:SS' but may be
entered in any of the following formats: `HH:MM:SS',
`HHMMSS', `HHMM' (seconds are set to 0), or
`HH' (minutes and seconds are set to 0).</p></td>
</tr>




<tr>
<td>
<p><tt class="computeroutput" />
<a name="INDEX-925" /><tt class="literal">DATETIME</tt></p></td>
<td>
<p>8</p></td>
<td>
<p>A value that stores both the date and the time. Values are both input
and output as `YYYY-MM-DD HH:MM:SS'.</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-926" /><tt class="literal">YEAR</tt></p></td>
<td>
<p>1</p></td>
<td>
<p>A value that stores the year. Values can be input in either the
`YYYY' or `YY' format and will be output as
two- or four-digit years depending on the input format. Two digit
years are assumed to lie between 1970 and 2069, inclusive. This type
currently only understands years within the range of 1901 to 2155.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">CHAR(</tt>
<a name="INDEX-927" /><em class="replaceable">length</em><tt class="literal">)/BINARY(</tt><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>length</p></td>
<td>
<p>A fixed length text string. Any input that is shorter than the length
is padded with spaces at the end. All trailing spaces, whether
inserted by MySQL or not, are removed when outputting values. MySQL
treats text as case-insensitive by default (see the
<tt class="literal">BINARY</tt> modifier, below). The
<tt class="literal">BINARY</tt> type is equivalent to
<tt class="literal">CHAR</tt> with the <tt class="literal">BINARY</tt> modifier.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">CHAR(</tt><em class="replaceable">length</em><tt class="literal">)
VARYING/ VARCHAR(</tt>
<a name="INDEX-928" /><em class="replaceable">length</em><tt class="literal">)/
VARBINARY(</tt>
<a name="INDEX-929" /><em class="replaceable">length</em><tt class="literal">)</tt></p></td>
<td>
<p>length</p></td>
<td>
<p>A variable length text string (case-insensitive) with a predefined
maximum length. The maximum length must be between 1 and 255
characters. Any trailing spaces are removed before storing data of
this type. The <tt class="literal">VARBINARY</tt> type is equivalent to
<tt class="literal">VARCHAR</tt> with the <tt class="literal">BINARY</tt>
modifier.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">TINYTEXT</tt></p></td>
<td>
<p>length+1</p></td>
<td>
<p>A text field (case-insensitive) with a maximum length of 255
characters.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">TINYBLOB</tt>
<a name="INDEX-930" /></p></td>
<td>
<p>length+1</p></td>
<td>
<p>A binary field (case-sensitive) with a maximum length of 255
characters. Binary data is case-sensitive.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">TEXT/LONG VARCHAR</tt>
<a name="INDEX-931" />
<a name="INDEX-932" /></p></td>
<td>
<p>length+2</p></td>
<td>
<p>A text field with a maximum length of 64KB of text.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">BLOB/LONG VARBINARY</tt>
<a name="INDEX-933" />
<a name="INDEX-934" /></p></td>
<td>
<p>length+2</p></td>
<td>
<p>A binary field with a maximum length of 64KB of data.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">MEDIUMTEXT</tt>
<a name="INDEX-935" /></p></td>
<td>
<p>length+3</p></td>
<td>
<p>A text field with a maximum length of 16MB of text.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">MEDIUMBLOB</tt>
<a name="INDEX-936" /></p></td>
<td>
<p>length+3</p></td>
<td>
<p>A binary field with a maximum length of 16MB of data.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">LONGTEXT</tt>
<a name="INDEX-937" /></p></td>
<td>
<p>length+4</p></td>
<td>
<p>A text field with a maximum length of 4GB of text.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">LONGBLOB </tt>
<a name="INDEX-938" /></p></td>
<td>
<p>length+4</p></td>
<td>
<p>A binary field with a maximum length of 4GB of data.</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">ENUM</tt>
<a name="INDEX-939" /></p></td>
<td>
<p>1,2</p></td>
<td>
<p>A field that can contain one of a number of predefined possible
values (e.g., <tt class="literal">ENUM </tt>("apples,"
"oranges," "bananas"). Data may be either
entered as one of the text options or as a number corresponding to
the index of an option (the first option is number 1). A<tt class="literal">
NULL</tt> value may always be entered for the field. A maximum
of 65535 different options may be defined per enumeration. If there
are less than 256 options, the field will take up only one byte of
space (otherwise it will use two).</p></td>
</tr>




<tr>
<td>
<p><tt class="literal">SET</tt>
<a name="INDEX-940" /></p></td>
<td>
<p>1-8</p></td>
<td>
<p>A field that can contain any number of a set of predefined possible
values (e.g., <tt class="literal">SET</tt> ("rock,"
"pop," "country," "western").
Data may be entered as a comma-separated list of values or as an
integer that is the bit representation of the values (e.g., 12, which
is 1100 in binary, would correspond to "country, western"
in the example above). There is a maximum of 64 values in a single
set.</p></td>
</tr>





</table><p>In addition to the main types, several modifiers can also be used to
qualify the type:</p><dl>
<dt><b><em class="replaceable">decimal</em></b></dt>
<dd><p>This is the maximum number of decimals allowed in a floating point
value. Any values entered that have more decimal places will be
rounded off. For example, for the field <tt class="literal">price
FLOAT(5,2)</tt> the value 4.34 would be displayed as 4.34, the
value 234.27 would be displayed as 234.3 (to satisfy the maximum
total length) and the value 3.331 would be displayed as 3.33 (to
satisfy the maximum decimal length).</p></dd>





<dt><b><em class="replaceable">length</em></b></dt>
<dd><p>For numerical values, this is the number of characters used to
display the value to the user. This includes decimal points, signs,
and exponent indicators. For example, the field <tt class="literal">peanuts
INT(4)</tt> has a legal range of -999 to 9999. MySQL will store
values outside the given range, however, as long as it is inside the
maximum range of the type. If you store a value that is outside the
defined range, MySQL will issue a warning, but everything will work
normally.</p>





<p>When used with the
<tt class="literal">TIMESTAMP</tt>
<a name="INDEX-941" /> type, the length determines the format
used for the timestamp.</p>





<p>When used with a character type, the length determines the number of
characters in the data. For fixed character types, the length is
exactly the number of characters used to store the data. For variable
characters types, the length is the length of the longest allowed
string.</p>





<p>The length attribute is optional for all types except for
<tt class="literal">DECIMAL/NUMERIC</tt>, <tt class="literal">CHAR</tt> and
<tt class="literal">VARCHAR</tt>.</p>






<a name="ch15-4-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>Since the
<tt class="literal">DECIMAL/NUMERIC</tt>
<a name="INDEX-942" />
<a name="INDEX-943" /> type is stored as a character string,
it is bound by the maximum length the same way a
<tt class="literal">CHAR</tt> field would be. Therefore, inserting numbers
outside of the range defined on the field will fail and generate an
error just as if an overly long string were inserted into a
<tt class="literal">CHAR</tt> field.</p>
</blockquote></dd>






<dt><b><em class="replaceable">precision</em></b></dt>
<dd><p>This attribute is available in the <tt class="literal">FLOAT</tt> type to
provide compatibility with the ODBC system. The value of this
attribute can be 4 to define a normal float (same as
<tt class="literal">FLOAT</tt> without a precision attribute) or 8 to
define a double precision float (same as the
<tt class="literal">DOUBLE</tt> field).</p></dd>





<dt><b><tt class="literal">AUTO_INCREMENT</tt></b></dt>
<dd><p>This attribute allows a numeric field to be automatically updated.
This is useful for creating unique identification numbers for the
rows in the table. Data can be inserted and read normally from an
<tt class="literal">AUTO_INCREMENT</tt> field, but if a value of
<tt class="literal">NULL</tt> or
is inserted, the existing value of the field is increased by one
automatically. The current value of an
<tt class="literal">AUTO_INCREMENT</tt> field can be obtained by using the
<tt class="literal">LAST_INSERT_ID</tt> function (see
<tt class="literal">SELECT</tt>, below).</p></dd>





<dt><b><tt class="literal">BINARY</tt>
<a name="INDEX-944" /></b></dt>
<dd><p>This attribute can be used with <tt class="literal">CHAR</tt> and
<tt class="literal">VARCHAR</tt> types to indicate binary data in the text
string. The only effect that <tt class="literal">BINARY</tt> has is to make
any sorting of the values case-sensitive. By default, MySQL ignores
case when sorting text.</p></dd>





<dt><b><tt class="literal">DEFAULT</tt>
<a name="INDEX-945" /><em class="emphasis"> </em><em class="replaceable">value</em></b></dt>
<dd><p>This attribute assigns a default value to a field. If a row is
inserted into the table without a value for this field, this value
will be inserted. If a default is not defined, a null value is
inserted unless the field is defined as <tt class="literal">NOT NULL</tt>
in which case MySQL picks a value based on the type of the field.</p></dd>





<dt><b><tt class="literal">NOT NULL</tt>
<a name="INDEX-946" /></b></dt>
<dd><p>This attribute guarantees that every entry in the column will have
some non-NULL value. Attempting to insert a <tt class="literal">NULL</tt>
value into a field defined with NOT NULL will generate an error.</p></dd>





<dt><b><tt class="literal">NULL</tt>
<a name="INDEX-947" /></b></dt>
<dd><p>This attribute specifies that the field is allowed to contain
<tt class="literal">NULL</tt> values. This is the default if neither this
nor the <tt class="literal">NOT NULL</tt> modifier are specified. Fields
that are contained within an index cannot contain the
<tt class="literal">NULL</tt> modifier. (It will be ignored, without
warning, if it does exist in such a field.)</p></dd>





<dt><b><tt class="literal">PRIMARY KEY</tt></b></dt>
<dd><p>This attribute automatically makes the field the primary key (see
later) for the table. Only one primary key may exist for a table. Any
field that is a primary key must also contain the <tt class="literal">NOT
NULL</tt> modifier.</p></dd>





<dt><b><tt class="literal">REFERENCES</tt> <em class="replaceable">table</em> 
[<em class="replaceable">column</em>,  . . .)] [<tt class="literal">MATCH FULL</tt> |
<tt class="literal">MATCH PARTIAL</tt>] [<tt class="literal">ON DELETE </tt><em class="replaceable">option</em>
] [<tt class="literal">ON UPDATE</tt> <em class="replaceable">option</em>]</b></dt>
<dd><p>This attribute currently has no effect. MySQL understands the full
references syntax but does not implement its behavior. The modifier
is included to make it easier to import SQL from different SQL
sources. In addition, this functionality may be included in a future
release of MySQL.</p></dd>





<dt><b><tt class="literal">UNSIGNED</tt>
<a name="INDEX-948" /></b></dt>
<dd><p>This attribute can be used with integer types to define an unsigned
integer. The maximum value of an unsigned integer is twice that of
its signed counterpart, but it cannot store negative values. Without
any modifiers, all types are considered to be signed.</p></dd>





<dt><b><tt class="literal">ZEROFILL</tt>
<a name="INDEX-949" /></b></dt>
<dd><p>The attribute can be used with integer types to add zeros to the left
of every number until the maximum length is reached. For example, the
field <tt class="literal">counter INT(5) ZEROFILL</tt> would display the
number 132 as 00132.</p></dd>

</dl>
<h4 class="refsect1">Indexes</h4>





<p>MySQL supports the concept of an index of a table, as described in
<a href="ch02_01.htm">Chapter 2, "Database Design"</a>. Indexes are created by means of special
"types" that are included with the table definition:</p>





<dl>
<dt><b><tt class="literal">KEY/INDEX</tt> <em class="emphasis">[</em><em class="replaceable">name</em><em class="emphasis">] (</em><em class="replaceable">column</em><em class="emphasis">, [</em><em class="replaceable">column2</em><em class="emphasis">, . . .])</em></b></dt>
<dd><p>Creates a regular index of all of the named columns
(<tt class="literal">KEY</tt> and <tt class="literal">INDEX</tt>, in this
context, are synonyms). Optionally the index may be given a name. If
no name is provided, a name is assigned based on the first column
given and a trailing number, if necessary, for uniqueness. If a key
contains more than one column, leftmost subsets of those columns are
also included in the index. Consider the following index definition.</p>






<blockquote><pre class="code">INDEX idx1 ( name, rank, serial );</pre></blockquote>





<p>When this index is created, the following groups of columns will be
indexed:</p>




<ul>
<li><p>name, rank, serial</p></li>
<li><p>name, rank</p></li>
<li><p>name</p></li>
</ul></dd>






<dt><b><tt class="literal">PRIMARY KEY</tt></b></dt>
<dd><p>Creates the primary key of the table. A primary key is a special key
that can be defined only once in a table. The primary key is a
<tt class="literal">UNIQUE</tt> key with the name
"<tt class="literal">PRIMARY</tt>." Despite it's
privileged status, in function it is the same as every other unique
key. <a name="INDEX-950" /></p></dd>





<dt><b><tt class="literal">UNIQUE</tt>
<a name="INDEX-951" /><em class="emphasis"> [</em><em class="replaceable">name</em><em class="emphasis">] (</em><em class="replaceable">column</em><em class="emphasis">, [</em><em class="replaceable">column2</em><em class="emphasis">, . . .])</em></b></dt>
<dd><p>Creates a special index where every value contained in the index (and
therefore in the fields indexed) must be unique. Attempting to insert
a value that already exists into a unique index will generate an
error. The following would create a unique index of the
"nicknames" field:</p>


<blockquote><pre class="code">UNIQUE (nicknames);</pre></blockquote></dd>

</dl>





<a name="ch15-6-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>In the current implementation of MySQL's indices,
<tt class="literal">NULL</tt> values are not allowed in any field that is part of an index.</p>
</blockquote>





<p>When indexing character fields (<tt class="literal">CHAR</tt>,
<tt class="literal">VARCHAR</tt> and their synonyms only), it is possible
to index only a prefix of the entire field. For example, this
following will create an index of the numeric field `id'
along with the first 20 characters of the character field
`address':</p>





<blockquote><pre class="code">INDEX adds ( id, address(20) );</pre></blockquote>





<p>When performing any searches of the field `address', only
the first 20 characters will be used for comparison unless more than
one match is found that contains the same first 20 characters, in
which case a regular search of the data is performed. Therefore, it
can be a big performance bonus to index only the number of characters
in a text field that you know will make the value unique.</p>





<p>Fields contained in an index must be defined with the <tt class="literal">NOT
NULL</tt> modifier (see earlier). When adding an index as a
separate declaration, MySQL will generate an error if <tt class="literal">NOT
NULL</tt> is missing. However, when defining the primary key by
adding the <tt class="literal">PRIMARY KEY</tt> modifier to the field
definition, the <tt class="literal">NOT NULL</tt> modifier is automatically
added (without a warning) if it is not explicitly defined.</p>





<p>In addition to the above, MySQL supports the following special
"types":</p>




<ul><li><p><tt class="literal">FOREIGN KEY</tt>
<a name="INDEX-952" />
<a name="INDEX-953" /> <em class="replaceable">(name (column, [column2,
. . . ])</em></p></li><li><p><tt class="literal">CHECK</tt></p></li></ul>

<p>These keywords do not actually perform any action. They exist so that
SQL exported from other databases can be more easily read into MySQL.
Also, some of this missing functionality may be added into a future
version of MySQL.</p>





<p>You must have <tt class="literal">CREATE</tt> privileges on a database to
use the <tt class="literal">CREATE TABLE</tt>
<a name="INDEX-954" /> statement.</p>






<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Create the new empty database 'employees'
CREATE DATABASE employees;
CREATE TABLE emp_data ( id INT, name CHAR(50) );
# Make the function <em class="replaceable">make_coffee</em> (which returns a string value and is stored  
# in the <em class="replaceable">myfuncs.so</em> shared library) available to MySQL.
CREATE FUNCTION make_coffee RETURNS string SONAME "myfuncs.so";</pre></blockquote>





</div>

<a name="INDEX-955" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DELETE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
DELETE FROM <em class="replaceable">table</em> [WHERE <em class="replaceable">clause</em>]
</pre></td><td align="right" /></tr></table><p>Deletes rows from a table. When used without a
<tt class="literal">WHERE</tt> clause, this will erase the entire table and
recreate it as an empty table. With a clause, it will delete the rows
that match the condition of the clause. This statement returns the
number of rows deleted to the user.</p><p>As mentioned above, not including a <tt class="literal">WHERE</tt> clause
will erase this entire table. This is done using an efficient method
that is much faster than deleting each row individually. When using
this method, MySQL returns
to the user because it has no way of knowing how many rows it
deleted. In the current design, this method simply deletes all of the
files associated with the table except for the file that contains the
actual table definition. Therefore, this is a handy method of zeroing
out tables with unrecoverably corrupt data files. You will lose the
data, but the table structure will still be in place.</p><p>You must have <tt class="literal">DELETE</tt> privileges on a database to
use the following statement:</p>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Erase all of the data (but not the table itself) for the table 'olddata'.
DELETE FROM olddata
# Erase all records in the 'sales' table where the 'year' field is '1995'.
DELETE FROM sales WHERE year=1995</pre></blockquote>





</div>

<a name="INDEX-956" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DESCRIBE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table></div>

<div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DESC</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
DESCRIBE <em class="replaceable">table</em>[<em class="replaceable">column</em>]
DESC <em class="replaceable">table</em>[<em class="replaceable">column</em>]
</pre></td><td align="right" /></tr></table><p>Gives information about a table or column. While this statement works
as advertised, its functionality is available (along with much more)
in the <tt class="literal">SHOW</tt> statement. This statement is included
solely for compatibility with Oracle SQL. The optional column name
can contain SQL wildcards, in which case information will be
displayed for all matching columns.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Describe the layout of the table 'messy'
DESCRIBE messy
# Show the information about any columns starting with 'my_' in the 'big' table.
# Remember: '_' is a wildcard, too, so it must be escaped to be used literally.
DESC big my\_%</pre></blockquote>





</div>

<a name="INDEX-957" /><a name="INDEX-958" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DROP</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
DROP DATABASE <em class="replaceable">name</em>
DROP INDEX <em class="replaceable">name</em>
DROP TABLE [IF EXISTS] <em class="replaceable">name</em>[, <em class="replaceable">name2</em>, ...]
DROP FUNCTION <em class="replaceable">name</em>
</pre></td><td align="right" /></tr></table><p>Permanently remove a database, table, index, or function from the
MySQL system.</p><dl>
<dt><b><tt class="literal">DROP DATABASE </tt></b></dt>
<dd><p>Will remove an entire database with all of its associated files. The
number of files deleted will be returned to the user. Because three
files represent most tables, the number returned is usually the
number of tables times three. This is equivalent to running the
<em class="filename">mysqladmin drop</em> utility. As with running
<em class="filename">mysqladmin</em>, you must be the administrative user
for MySQL (usually root or mysql) to perform this statement.</p></dd>





<dt><b><tt class="literal">DROP INDEX </tt></b></dt>
<dd><p>Statement provides for compatibility with other SQL implementations.
In older versions of MySQL, this statement does nothing. As of 3.22,
this statement is equivalent to <tt class="literal">ALTER TABLE</tt> . . .
<tt class="literal">DROP INDEX</tt>. To perform the <tt class="literal">DROP
INDEX</tt> statement, you must have <tt class="literal">SELECT,</tt>
<tt class="literal">INSERT</tt>, <tt class="literal">DELETE</tt>,
<tt class="literal">UPDATE</tt>, <tt class="literal">CREATE</tt> and
<tt class="literal">DROP</tt> privileges for the table in question.</p></dd>





<dt><b><tt class="literal">DROP TABLE</tt> </b></dt>
<dd><p>Will erase an entire table permanently. In the current
implementation, MySQL simply deletes the files associated with the
table. As of 3.22, you may specify <tt class="literal">IF EXISTS</tt> to
make MySQL not return an error if you attempt to remove a table that
does not exist. You must have <tt class="literal">DELETE</tt> privileges on
the table to use this statement.</p></dd>





<dt><b><tt class="literal">DROP FUNCTION</tt> </b></dt>
<dd><p>Will remove a user defined function from the running MySQL server
process. This does not actually delete the library file containing
the function. You may add the function again at any time using the
<tt class="literal">CREATE FUNCTION</tt> statement. In the current
implementation <tt class="literal">DROP FUNCTION</tt> simply removes the
function from the function table within the Mysql database. This
table keeps track of all active functions.</p></dd>

</dl><p>You must have <tt class="literal">DROP</tt> privileges on that table to
execute this statement.</p><a name="ch15-14-fm2xml" /><blockquote><h4 class="objtitle">WARNING</h4>


<p><tt class="literal">DROP</tt> is by far the most dangerous SQL statement.
If you have drop privileges, you may permanently erase a table or
even an entire database. This is done without warning or
confirmation. The only way to undo a <tt class="literal">DROP</tt> is to
restore the table or database from backups. The lessons to be learned
here are: (1) always keep backups; (2) don't use
<tt class="literal">DROP</tt> unless you are really sure; and (3) always
keep backups.</p>




</blockquote>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Completely remove the 'important_data' database from the face of the Earth.
DROP DATABASE important_data
# Delete the tables 'oh_no', 'help_me' and 'dont_do_it'
DROP TABLE oh_no, help_me, dont_do_it
# Remove the named index 'my_index'
DROP INDEX my_index
# Remove the function 'myfunc' from the running server. This can be added again
# at anytime using the CREATE FUNCTION statement.
DROP FUNCTION myfunc<a name="INDEX-958" /></pre></blockquote>





</div>

<a name="INDEX-959" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>EXPLAIN</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
EXPLAIN SELECT <em class="replaceable">statement</em>
</pre></td><td align="right" /></tr></table><p>Displays verbose information about the order and structure of a
<tt class="literal">SELECT</tt> statement. This can be used to see where
keys are not being used efficiently.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">EXPLAIN SELECT customer.name, product.name FROM customer, product, purchases 
WHERE purchases.customer=customer.id AND purchases.product=product.id</pre></blockquote>





</div>

<a name="INDEX-960" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>FLUSH</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>FLUSH option[, option...]
</pre></td><td align="right" /></tr></table><p>Flushes or resets various internal processes depending on the
option(s) given. You must have <tt class="literal">reload</tt> privileges
to execute this statement. The option can be any of the following:</p><dl>
<dt><b><tt class="literal">HOSTS</tt></b></dt>
<dd><p>Empties the cache table that stores hostname information for clients.
This should be used if a client changes IP addresses, or if there are
errors related to connecting to the host.</p></dd>





<dt><b><tt class="literal">LOGS</tt></b></dt>
<dd><p>Closes all of the standard log files and reopens them. This can be
used if a log file has changed inode number. If no specific extension
has been given to the update log, a new update log will be opened
with the extension incremented by one.</p></dd>





<dt><b><tt class="literal">PRIVILEGES</tt></b></dt>
<dd><p>Reloads all of the internal MySQL permissions grant tables. This must
be run for any changes to the tables to take effect.</p></dd>





<dt><b><tt class="literal">STATUS</tt></b></dt>
<dd><p>Resets the status variables that keep track of the current state of
the server.</p></dd>





<dt><b><tt class="literal">TABLES</tt></b></dt>
<dd><p>Closes all currently opened tables and flushes any cached data to
disk.</p></dd>

</dl></div>

<a name="INDEX-961" /><a name="INDEX-962" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>GRANT</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
GRANT privilege [ (column, ...) ] [, privilege [( column, ...) ] ...]
    ON {table} TO user [IDENTIFIED BY 'password']
        [, user [IDENTIFIED BY 'password'] ...] [WITH GRANT OPTION]
</pre></td><td align="right" /></tr></table><p>Previous to MySQL 3.22.11, the <tt class="literal">GRANT</tt> statement was
recognized but did nothing. In current versions,
<tt class="literal">GRANT</tt> is functional. This statement will enable
access rights to a user (or users). Access can be granted per
database, table or individual column. The table can be given as a
table within the current database, `<tt class="literal">*</tt>'
to affect all tables within the current database,
`<tt class="literal">*.*</tt>' to affect all tables within all
databases or `<tt class="literal">database.*</tt>' to effect
all tables within the given database.</p><p>The following privileges are currently supported:</p><dl>
<dt><b><tt class="literal">ALL PRIVILEDGES/ALL</tt></b></dt>
<dd><p>Effects all privileges</p></dd>





<dt><b><tt class="literal">ALTER</tt></b></dt>
<dd><p>Altering the structure of tables</p></dd>





<dt><b><tt class="literal">CREATE</tt></b></dt>
<dd><p>Creating new tables</p></dd>





<dt><b><tt class="literal">DELETE</tt></b></dt>
<dd><p>Deleting rows from tables</p></dd>





<dt><b><tt class="literal">DROP</tt></b></dt>
<dd><p>Deleting entire tables</p></dd>





<dt><b><tt class="literal">FILE</tt></b></dt>
<dd><p>Creating and removing entire databases as well as managing log files</p></dd>





<dt><b><tt class="literal">INDEX</tt></b></dt>
<dd><p>Creating and deleting indices from tables</p></dd>





<dt><b><tt class="literal">INSERT</tt></b></dt>
<dd><p>Inserting data into tables</p></dd>





<dt><b><tt class="literal">PROCESS</tt></b></dt>
<dd><p>Killing process threads</p></dd>





<dt><b><tt class="literal">REFERENCES</tt></b></dt>
<dd><p>Not implemented (yet)</p></dd>





<dt><b><tt class="literal">RELOAD</tt> </b></dt>
<dd><p>Refreshing various internal tables (see the FLUSH statement)</p></dd>





<dt><b><tt class="literal">SELECT</tt></b></dt>
<dd><p>Reading data from tables</p></dd>





<dt><b><tt class="literal">SHUTDOWN</tt></b></dt>
<dd><p>Shutting down the database server</p></dd>





<dt><b><tt class="literal">UPDATE</tt></b></dt>
<dd><p>Altering rows within tables</p></dd>





<dt><b><tt class="literal">USAGE</tt> </b></dt>
<dd><p>No privileges at all</p></dd>

</dl><p>The <tt class="literal">user variable</tt> is of the form <em class="emphasis">user@hostname</em>. Either the user or the
hostname can contain SQL wildcards. If wildcards are used, either the
whole name must be quoted, or just the part(s) with the wildcards
(e.g., <tt class="literal">joe@"%.com</tt> <tt class="literal">"</tt> and
<tt class="literal">"</tt><em class="emphasis">joe@%.com</em><tt class="literal">"</tt> are both
valid). A user without a hostname is considered to be the same as
<em class="emphasis">user@"%"</em>.</p><p>If you have a global <tt class="literal">GRANT</tt> privilege, you may
specify an optional <tt class="literal">INDENTIFIED BY</tt> modifier. If
the user in the statement does not exist, it will be created with the
given password. Otherwise the existing user will have his or her
password changed.</p><p>Giving the <tt class="literal">GRANT</tt> privilege to a user is done with
the <tt class="literal">WITH GRANT OPTION</tt> modifier. If this is used,
the user may grant any privilege they have onto another
user.<a name="INDEX-962" /></p></div>

<a name="INDEX-963" /><a name="INDEX-964" /><a name="INDEX-965" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>INSERT</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
INSERT [DELAYED | LOW_PRIORITY ] [INTO]<em class="replaceable">table</em> [ (<em class="replaceable">column</em>, ...) ] VALUES (<em class="replaceable">values</em> )
 [,( values )... ]
INSERT [LOW_PRIORITY] [INTO] <em class="replaceable">table</em> [ (<em class="replaceable">column</em>, ...) ] SELECT ...
INSERT [LOW_PRIORITY] [INTO] table SET column=value, column=value,...
</pre></td><td align="right" /></tr></table><p>Inserts data into a table. The first form of this statement simply
inserts the given values into the given columns. Columns in the table
that are not given values are set to their default value or
<tt class="literal">NULL</tt>. The second form takes the results of a
<tt class="literal">SELECT</tt> query and inserts them into the table. The
third form is simply an alternate version of the first form that more
explicitly shows which columns correspond with which values. If the
<tt class="literal">DELAYED</tt> modifier is present in the first form, all
incoming <tt class="literal">SELECT</tt>
<a name="INDEX-964" /> statements will be given priority
over the insert, which will wait until the other activity has
finished before inserting the data. In a similar way, using the
<tt class="literal">LOW_PRIORITY</tt> modifier with any form of
<tt class="literal">INSERT</tt> will cause the insertion to be postponed
until all other operations from the client have been finished.</p><p>When using a <tt class="literal">SELECT</tt> query with the
<tt class="literal">INSERT</tt> statement, you cannot use the
<tt class="literal">ORDER BY</tt> modifier with the
<tt class="literal">SELECT</tt> statement. Also, you cannot insert into the
same table you are selecting from.</p><p>Starting with MySQL 3.22.5 it is possible to insert more than one row
into a table at a time. This is done by adding additional value lists
to the statement separated by commas.</p><p>You must have <tt class="literal">INSERT</tt> privileges to use this
statement.<a name="INDEX-965" /></p>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Insert a record into the 'people' table.
INSERT INTO people ( name, rank, serial_number ) VALUES ( 'Bob Smith',
    'Captain', 12345 );
# Copy all records from 'data' that are older than a certain date into
# 'old_data'. This would usually be followed by deleting the old data from
# 'data'.
INSERT INTO old_data ( id, date, field ) SELECT ( id, date, field) FROM data
    WHERE date &lt; 87459300;
# Insert 3 new records into the 'people' table.
INSERT INTO people (name, rank, serial_number ) VALUES ( 'Tim O\'Reilly',
'General', 1), ('Andy Oram', 'Major', 4342), ('Randy Yarger', 'Private', 9943);</pre></blockquote>





</div>

<a name="INDEX-966" /><a name="INDEX-967" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>KILL</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>KILL thread_id</pre></td><td align="right" /></tr></table><p>Terminates the specified thread. The thread ID numbers can be found
using the <tt class="literal">SHOW PROCESSES</tt>
<a name="INDEX-967" /> statement. Killing threads
owned by users other than yourself require <tt class="literal">process</tt>
privilege.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Terminate thread 3
KILL 3</pre></blockquote>





</div>

<a name="INDEX-968" /><a name="INDEX-969" /><a name="INDEX-970" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>LOAD</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
LOAD DATA [LOCAL] INFILE <em class="replaceable">file</em> [REPLACE|IGNORE] INTO TABLE <em class="replaceable">table</em> [<em class="replaceable">delimiters</em>] [(<em class="replaceable">columns</em>)]</pre></td><td align="right" /></tr></table><p>Reads a text file that is in a readable format and inserts the data
into a database table. This method of inserting data is much quicker
than using multiple <tt class="literal">INSERT</tt> statements. Although
the statement may be sent from all clients just like any other SQL
statement, the file referred to in the statement is assumed to be
located on the server. If the filename does not have a fully
qualified path, MySQL looks under the directory for the current
database for the file. As of MySQL 3.22, if the LOCAL modifier is
present, the file will be read from the client's local
filesystem.</p><p>With no delimiters specified, <tt class="literal">LOAD DATA INFILE</tt>
will assume that the file is tab delimited with character fields,
special characters escaped with the backslash (\), and lines
terminated with a newline character.</p><p>In addition to the default behavior, you may specify your own
delimiters using the following keywords:</p><dl>
<dt><b><tt class="literal">FIELDS TERMINATED BY </tt>'<tt class="literal">c</tt>'</b></dt>
<dd><p>Specifies the character used to delimit the fields. Standard C
language escape codes can be used to designate special characters.
This value may contain more than one character. For example,
<tt class="literal">FIELDS TERMINATED BY </tt>'<tt class="literal">,</tt>'
denotes a comma delimited file and <tt class="literal">FIELDS TERMINATED BY
</tt>'<tt class="literal">\t</tt>' denotes tab delimited. The default
value is tab delimited.</p></dd>





<dt><b><tt class="literal">FIELDS ENCLOSED BY </tt>'<tt class="literal">c</tt>'</b></dt>
<dd><p>Specifies the character used to enclose character strings. For
example, <tt class="literal">FIELD ENCLOSED BY </tt>'<tt class="literal">"</tt>'
would mean that a line containing <tt class="literal">"this, value", "this",
"value"</tt> would be taken to have three fields:
<tt class="literal">"this,value", "this", and "value"</tt>. The default
behavior is to assume that no quoting is used in the file.</p></dd>





<dt><b><tt class="literal">FIELDS ESCAPED BY </tt>'<tt class="literal">c</tt>'</b></dt>
<dd><p>Specifies the character used to indicate that the next character is
not special, even though it would usually be a special character. For
example, with <tt class="literal">FIELDS ESCAPED BY
</tt>'<tt class="literal">^</tt>' a line consisting of
<tt class="literal">First,Second^,Third,Fourth</tt> would be parsed as
three fields: <tt class="literal">"First", "Second,Third" and
"Fourth"</tt>. The exceptions to this rule are the null
characters. Assuming the <tt class="literal">FIELDS ESCAPED BY</tt> value
is a backslash, <tt class="literal">\0</tt> indicates an ASCII NULL
(character number 0) and <tt class="literal">\N</tt> indicates a MySQL null
value. The default value is the backslash character. Note that MySQL
itself considers the backslash character to be special. Therefore to
indicate backslash in that statement you must backslash the backslash
like this: <tt class="literal">FIELDS ESCAPED BY
</tt>'<tt class="literal">\\</tt>'.</p></dd>





<dt><b><tt class="literal">LINES TERMINATED BY </tt>'<tt class="literal">c</tt>'</b></dt>
<dd><p>Specifies the character that indicates the start of a new record.
This value can contain more than one character. For example, with
<tt class="literal">LINES TERMINATED BY </tt>'<tt class="literal">.</tt>', a file
consisting of <tt class="literal">a,b,c.d,e,f.g,h,k.</tt> would be parsed
as three separate records, each containing three fields. The default
is the newline character. This means that by default, MySQL assumes
that each line is a separate record.</p></dd>

</dl><p>The keyword<a name="INDEX-969" />
<tt class="literal">FIELDS</tt> should only be used for the entire
statement. For example:</p><blockquote><pre class="code">LOAD DATA INFILE data.txt FIELDS TERMINATED BY ',' ESCAPED BY '\\'.</pre></blockquote><p>By default, if a value read from the file is the same as an existing
value in the table for a field that is part of a unique key, an error
is given. If the <tt class="literal">REPLACE</tt> keyword is added to the
statement, the value from the file will replace the one already in
the table. Conversely, the<a name="INDEX-970" /> <tt class="literal">IGNORE</tt> keyword will
cause MySQL to ignore the new value and keep the old one.</p><p>The word <tt class="literal">NULL</tt> encountered in the data file is
considered to indicate a null value unless the <tt class="literal">FIELDS
ENCLOSED BY</tt> character encloses it.</p><p>Using the same character for more than one delimiter can confuse
MySQL. For example, <tt class="literal">FIELDS TERMINATED BY
</tt> ' <tt class="literal">,</tt> ' <tt class="literal"> ENCLOSED BY
</tt> ' <tt class="literal">,</tt> ' would produce unpredictable
behavior.</p><p>If a list of columns is provided, the data is inserted into those
particular fields in the table. If no columns are provided, the
number of fields in the data must match the number of fields in the
table, and they must be in the same order as the fields are defined
in the table.</p><p>You must have <tt class="literal">SELECT</tt> and <tt class="literal">INSERT</tt>
privileges on the table to use this statement.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Load in the data contained in 'mydata.txt' into the table 'mydata'. Assume
# that the file is tab delimited with no quotes surrounding the fields.
LOAD DATA INFILE 'mydata.txt' INTO TABLE mydata
# Load in the data contained in 'newdata.txt' Look for two comma delimited
# fields and insert their values into the fields 'field1' and 'field2' in
# the 'newtable' table.
LOAD DATA INFILE 'newdata.txt' INTO TABLE newtable FIELDS TERMINATED BY ','
   ( field1, field2 )</pre></blockquote>





</div>

<a name="INDEX-971" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>LOCK</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
LOCK TABLES <em class="replaceable">name</em> [AS <em class="replaceable">alias</em>] READ|WRITE [, <em class="replaceable">name2</em> [AS <em class="replaceable">alias</em>] READ|WRITE, ...]
</pre></td><td align="right" /></tr></table><p>Locks a table for the use of a specific thread. This command is
generally used to emulate transactions as described in <a href="ch07_01.htm">Chapter 7, "Other Mid-Range Database Engines"</a>. If a thread creates a <tt class="literal">READ</tt>
lock all other threads may read from the table but only the
controlling thread can write to the table. If a thread creates a
<tt class="literal">WRITE</tt> lock, no other thread may read from or write
to the table.</p><a name="ch15-27-fm2xml" /><blockquote><h4 class="objtitle">WARNING</h4>

<p>Using locked and unlocked tables at the same time can cause the
process thread to freeze. You must lock all of the tables you will be
accessing during the time of the lock. Tables you access only before
or after the lock do not need to be locked. The newest versions of
MySQL generate an error if you attempt to access an unlocked table
while you have other tables locked.</p>




</blockquote>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Lock tables 'table1' and 'table3' to prevent updates, and block all access 
# to 'table2'. Also create the alias 't3' for 'table3' in the current thread.
LOCK TABLES table1 READ, table2 WRITE, table3 AS t3 READ</pre></blockquote>





</div>

<a name="INDEX-972" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>OPTIMIZE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
OPTIMIZE TABLE name
</pre></td><td align="right" /></tr></table><p>Recreates a table eliminating any wasted space. This is done by
creating the optimized table as a separate, temporary table and then
moving over to replace the current table. While the procedure is
happening, all table operations continue as normal (all writes are
diverted to the temporary table).</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code">OPTIMIZE TABLE mytable</pre></blockquote>





</div>

<div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>REPLACE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
REPLACE INTO <em class="replaceable">table</em> [( <em class="replaceable">column</em>, ...)] VALUES ( <em class="replaceable">value</em> , ...)
REPLACE INTO <em class="replaceable">table</em> [(<em class="replaceable">column</em>, ...)] SELECT <em class="replaceable">select_clause</em>
</pre></td><td align="right" /></tr></table><p>Inserts data to a table, replacing any old data that conflicts. This
statement is identical to <tt class="literal">INSERT</tt> except that if a
value conflicts with an existing unique key, the new value replaces
the old one. The first form of this statement simply inserts the
given values into the given columns. Columns in the table that are
not given values are set to their default value or
<tt class="literal">NULL</tt>. The second form takes the results of a
<tt class="literal">SELECT</tt> query and inserts them into the table.</p>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Insert a record into the 'people' table.
REPLACE INTO people ( name, rank, serial_number ) VALUES ( 'Bob Smith',
    'Captain', 12345 )
# Copy all records from 'data' that are older than a certain date into
# 'old_data'. This would usually be followed by deleting the old data from
# 'data'.
REPLACE INTO old_data ( id, date, field ) SELECT ( id, date, field) FROM data
    WHERE date &lt; 87459300</pre></blockquote>





</div>

<a name="INDEX-973" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>REVOKE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
REVOKE privilege [(column, ...)] [, privilege [(column, ...) ...]
   ON table FROM user
</pre></td><td align="right" /></tr></table><p>Removes a privilege from a user. The values of privilege, table, and
user are the same as for the GRANT statement. You must have the GRANT
privilege to be able to execute this statement.</p></div>

<a name="INDEX-974" /><a name="INDEX-975" /><a name="INDEX-976" /><a name="INDEX-977" /><a name="INDEX-978" /><a name="INDEX-979" /><a name="INDEX-980" /><a name="INDEX-981" /><a name="INDEX-982" /><a name="INDEX-983" /><a name="INDEX-984" /><a name="INDEX-985" /><a name="INDEX-986" /><a name="INDEX-987" /><a name="INDEX-988" /><a name="INDEX-989" /><a name="INDEX-990" /><a name="INDEX-991" /><a name="INDEX-992" /><a name="INDEX-993" /><a name="INDEX-994" /><a name="INDEX-995" /><a name="INDEX-996" /><a name="INDEX-997" /><a name="INDEX-998" /><a name="INDEX-999" /><a name="INDEX-1000" /><a name="INDEX-1001" /><a name="INDEX-1002" /><a name="INDEX-1003" /><a name="INDEX-1004" /><a name="INDEX-1005" /><a name="INDEX-1006" /><a name="INDEX-1007" /><a name="INDEX-1008" /><a name="INDEX-1009" /><a name="INDEX-1010" /><a name="INDEX-1011" /><a name="INDEX-1012" /><a name="INDEX-1013" /><a name="INDEX-1014" /><a name="INDEX-1015" /><a name="INDEX-1016" /><a name="INDEX-1017" /><a name="INDEX-1018" /><a name="INDEX-1019" /><a name="INDEX-1020" /><a name="INDEX-1021" /><a name="INDEX-1022" /><a name="INDEX-1023" /><a name="INDEX-1024" /><a name="INDEX-1025" /><a name="INDEX-1026" /><a name="INDEX-1027" /><a name="INDEX-1028" /><a name="INDEX-1029" /><a name="INDEX-1030" /><a name="INDEX-1031" /><a name="INDEX-1032" /><a name="INDEX-1033" /><a name="INDEX-1034" /><a name="INDEX-1035" /><a name="INDEX-1036" /><a name="INDEX-1037" /><a name="INDEX-1038" /><a name="INDEX-1039" /><a name="INDEX-1040" /><a name="INDEX-1041" /><a name="INDEX-1042" /><a name="INDEX-1043" /><a name="INDEX-1044" /><a name="INDEX-1045" /><a name="INDEX-1046" /><a name="INDEX-1047" /><a name="INDEX-1048" /><a name="INDEX-1049" /><a name="INDEX-1050" /><a name="INDEX-1051" /><a name="INDEX-1052" /><a name="INDEX-1053" /><a name="INDEX-1054" /><a name="INDEX-1055" /><a name="INDEX-1056" /><a name="INDEX-1057" /><a name="INDEX-1058" /><a name="INDEX-1059" /><a name="INDEX-1060" /><a name="INDEX-1061" /><a name="INDEX-1062" /><a name="INDEX-1063" /><a name="INDEX-1064" /><a name="INDEX-1065" /><a name="INDEX-1066" /><a name="INDEX-1067" /><a name="INDEX-1068" /><a name="INDEX-1069" /><a name="INDEX-1070" /><a name="INDEX-1071" /><a name="INDEX-1072" /><a name="INDEX-1073" /><a name="INDEX-1074" /><a name="INDEX-1075" /><a name="INDEX-1076" /><a name="INDEX-1077" /><a name="INDEX-1078" /><a name="INDEX-1079" /><a name="INDEX-1080" /><a name="INDEX-1081" /><a name="INDEX-1082" /><a name="INDEX-1083" /><a name="INDEX-1084" /><a name="INDEX-1085" /><a name="INDEX-1086" /><a name="INDEX-1087" /><a name="INDEX-1088" /><a name="INDEX-1089" /><a name="INDEX-1090" /><a name="INDEX-1091" /><a name="INDEX-1092" /><a name="INDEX-1093" /><a name="INDEX-1094" /><a name="INDEX-1095" /><a name="INDEX-1096" /><a name="INDEX-1097" /><a name="INDEX-1098" /><a name="INDEX-1099" /><a name="INDEX-1100" /><a name="INDEX-1101" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>SELECT</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
SELECT [STRAIGHT_JOIN] [DISTINCT|ALL] <em class="replaceable">value</em>[, <em class="replaceable">value2</em>...]
[INTO OUTFILE '<em class="replaceable">filename</em>' <em class="replaceable">delimiters</em>] FROM <em class="replaceable">table</em>[, <em class="replaceable">table2</em>...] [<em class="replaceable">clause</em>]
</pre></td><td align="right" /></tr></table><p>Retrieve data from a database. The <tt class="literal">SELECT</tt>
statement is the primary method of reading data from database tables.</p><p>If you specify more than one table, MySQL will automatically join the
tables so that you can compare values between the tables. In cases
where MySQL does not perform the join in an efficient manner, you can
specify <tt class="literal">STRAIGHT_JOIN</tt> to force MySQL to join the
tables in the order you enter them in the query.</p><p>If the <tt class="literal">DISTINCT</tt>
<a name="INDEX-975" /> keyword is present, only one row of
data will be output for every group of rows that is identical. The
<tt class="literal">ALL</tt> keyword is the opposite of distinct and
displays all returned data. The default behavior is
<tt class="literal">ALL</tt>.</p><p>The <a name="INDEX-976" />returned
values can be any one of the following:</p><dl>
<dt><b>Aliases</b></dt>
<dd><p>Any complex column name or function can be simplified by creating an
alias for it. The value can be referred to by its alias anywhere else
in the <a name="INDEX-977" /><tt class="literal">SELECT</tt> statement
(e.g., <tt class="literal">SELECT DATE_FORMAT(date,"%W, %M %d %Y") as nice_date
FROM calendar</tt>).</p></dd>





<dt><b>Column names </b></dt>
<dd><p>These can be specified as <tt class="literal">column</tt>,
<tt class="literal">table.column</tt> or
<tt class="literal">database.table.column</tt>. The longer forms are
necessary only to disambiguate columns with the same name, but can be
used at any time (e.g., <tt class="literal">SELECT name FROM people; SELECT
mydata.people.name FROM people)</tt>.</p></dd>





<dt><b>Functions</b></dt>
<dd><p>MySQL supports a wide range of built-in functions (see later). In
addition, user defined functions can be added at any time using the
<tt class="literal">CREATE FUNCTION</tt>
<a name="INDEX-978" /> statement (e.g., <tt class="literal">SELECT
COS(angle) FROM triangle</tt>).</p></dd>

</dl><p>By default, MySQL sends all output to the client that sent the query.
It is possible however, to have the output redirected to a file. In
this way you can dump the contents of a table (or selected parts of
it) to a formatted file that can either be human readable, or
formatted for easy parsing by another database system.</p><p>The <tt class="literal">INTO OUTFILE </tt>
<a name="INDEX-979" />'<tt class="literal">filename</tt>'<tt class="literal">
delimiters</tt> modifier is the means in which output
redirection is accomplished. With this the results of the
<tt class="literal">SELECT</tt> query are put into
<tt class="literal">filename</tt>. The format of the file is determined by
the <tt class="literal">delimiters</tt> arguments, which are the same as
the <tt class="literal">LOAD DATA INFILE</tt> statement with the following
additions:</p><ul><li><p>The <tt class="literal">OPTIONALLY</tt>
<a name="INDEX-980" /> keyword may be added to the
<tt class="literal">FIELDS ENCLOSED BY</tt>
<a name="INDEX-981" /> modifier. This will cause
MySQL to thread enclosed data as strings and non-enclosed data as
numeric.</p></li><li><p>Removing all<a name="INDEX-982" /> field delimiters (i.e.,
<tt class="literal">FIELDS TERMINATED BY </tt>''<tt class="literal"> ENCLOSED BY
</tt>'') will cause a fixed-width format to be used. Data will
be exported according to the display size of each field. Many
spreadsheets and desktop databases can import fixed-width format
files.</p></li></ul><p>The default behavior with no delimiters is to export
<a name="INDEX-983" />
<a name="INDEX-984" />tab delimited data using
<a name="INDEX-985" />
<a name="INDEX-986" />backslash (\) as
the escape character and to write one record per line.</p><p>The list of<a name="INDEX-987" />
<a name="INDEX-988" />
tables to join may be specified in the following ways:</p><dl>
<dt><b><em class="replaceable">Table1, Table2, Table3, . . .</em></b></dt>
<dd><p>This is the simplest form. The tables are joined in the manner that
MySQL deems most efficient. This method can also be written as
<tt class="literal">Table1 JOIN Table2 JOIN Table3, .... </tt>The<tt class="literal">
CROSS </tt>
<a name="INDEX-989" />keyword can also be used, but it has no
effect (e.g., <tt class="literal">Table1</tt> <tt class="literal">CROSS JOIN Table2)
</tt>Only rows that match the conditions for both columns are
included in the joined table. For example, <tt class="literal">SELECT * FROM
people, homes WHERE people.id=homes.owner</tt> would create a
joined table containing the rows in the <tt class="literal">people</tt>
table that have <tt class="literal">id</tt> fields that match the
<tt class="literal">owner</tt> field in the <tt class="literal">homes</tt> table.</p>





<a name="ch15-35-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>Like values, table names can also be aliased (e.g.,
<tt class="literal">SELECT</tt> t1.name, t2.address
<tt class="literal">FROM</tt> long_table_name t1, longer_table_name t2)</p>
</blockquote></dd>






<dt><b><em class="replaceable">Table1</em>
<tt class="literal">STRAIGHT_JOIN</tt>
<em class="replaceable">Table2</em></b></dt>
<dd><p>This is identical to the earlier method, except that
the left table is always read before the right table. This should be used if MySQL
performs inefficient sorts by joining the tables in the wrong order.</p></dd>





<dt><b><em class="replaceable">Table1</em> <tt class="literal">LEFT [OUTER] JOIN</tt> <em class="replaceable">Table2</em> <tt class="literal">ON</tt> <em class="replaceable">clause</em></b></dt>
<dd><p>This checks the right table against the clause. For each row that
does not match, a row of <tt class="literal">NULL</tt>s is used to join
with the left table. Using the previous example <tt class="literal">SELECT *
FROM people, homes LEFT JOIN people, homes ON
people.id=homes.owner</tt>, the joined table would contain all
of the rows that match in both tables, as well as any rows in the
<tt class="literal">people</tt> table that do not have matching rows in the
<tt class="literal">homes</tt> table, <tt class="literal">NULL</tt> values would
be used for the <tt class="literal">homes</tt> fields in these rows. The
<tt class="literal">OUTER</tt> keyword is optional and has no effect.</p></dd>





<dt><b><em class="replaceable">Table1</em> <tt class="literal">LEFT [OUTER] JOIN</tt> <em class="replaceable">Table2</em> <tt class="literal">USING</tt> (<em class="replaceable">column</em>[, <em class="replaceable">column2 </em>. . .])</b></dt>
<dd><p>This joins the specified columns only if they exist in both tables
(e.g., <tt class="literal">SELECT * FROM old LEFT OUTER JOIN new USING
(id)</tt>)</p></dd>





<dt><b><em class="replaceable">Table1</em> <tt class="literal">NATURAL LEFT [OUTER] JOIN</tt> <em class="replaceable">Table2</em></b></dt>
<dd><p>This joins only the columns that exist in both tables. This would be
the same as using the previous method and specifying all of the
columns in both tables (e.g., <tt class="literal">SELECT rich_people.salary,
poor_people.salary FROM rich_people NATURAL LEFT JOIN
poor_people</tt>)</p></dd>





<dt><b>{ oj <em class="replaceable">Table1</em> <tt class="literal">LEFT OUTER JOIN</tt> <em class="replaceable">Table2</em> <tt class="literal">ON</tt> <em class="replaceable">clause</em> }</b></dt>
<dd><p>This is identical to <em class="replaceable">Table1</em><tt class="literal"> LEFT
JOIN </tt><em class="replaceable">Table2</em><tt class="literal"> ON
</tt><em class="replaceable">clause</em> and is only included for
ODBC compatibility. (The "oj" stands for "Outer
Join".)</p></dd>

</dl><p>If no clause is provided, <tt class="literal">SELECT</tt> returns all of
the data in the selected table(s).</p><p>The search clause can contain any of the following substatements:</p><dl>
<dt><b><tt class="literal">WHERE</tt>
<a name="INDEX-990" /> <em class="replaceable">statement</em></b></dt>
<dd><p>The <tt class="literal">WHERE</tt>
<a name="INDEX-991" /> statement construct is the most
common way of searching for data in SQL. This statement is usually a
comparison of some type but can also include any of the functions
listed below, except for the aggregate functions. Named values, such
as column names and aliases, and literal numbers and strings can be
used in the statement. The following operators are supported:</p>





<dl>
<dt><b>( )</b></dt>
<dd><p>Parentheses are used to group operators in order to force precedence.</p></dd>





<dt><b>+ </b></dt>
<dd><p>Adds two numerical values</p></dd>





<dt><b>- </b></dt>
<dd><p>Subtracts two numerical values</p></dd>





<dt><b>* </b></dt>
<dd><p>Multiplies two numerical values</p></dd>





<dt><b>/</b></dt>
<dd><p>Divides two numerical values</p></dd>





<dt><b>%</b></dt>
<dd><p>Gives the modulo of two numerical values</p></dd>





<dt><b>|</b></dt>
<dd><p>Performs a bitwise OR on two integer values</p></dd>





<dt><b>&amp;</b></dt>
<dd><p>Performs a bitwise AND on two integer values</p></dd>





<dt><b>&lt;&lt;</b></dt>
<dd><p>Performs a bitwise left shift on an integer value</p></dd>





<dt><b>&gt;&gt;</b></dt>
<dd><p>Performs a bitwise right shift on an integer value</p></dd>





<dt><b><tt class="literal">NOT</tt> or !</b></dt>
<dd><p>Performs a logical <tt class="literal">NOT</tt> (returns 1 if the value is 0 and returns 0 otherwise).</p></dd>





<dt><b><tt class="literal">OR</tt> or ||</b></dt>
<dd><p>Performs a logical <tt class="literal">OR</tt> (returns 1 if any of the arguments are not 0, otherwise returns 0)</p></dd>





<dt><b><tt class="literal">AND</tt> or &amp;&amp;</b></dt>
<dd><p>Performs a logical <tt class="literal">AND</tt> (returns 0 if any of the arguments are 0, otherwise returns 1)</p></dd>





<dt><b>=</b></dt>
<dd><p>Match rows if the two values are equal. MySQL automatically converts between types when comparing values.</p></dd>





<dt><b>&lt;&gt; or !=</b></dt>
<dd><p>Match rows if the two values are not equal.</p></dd>





<dt><b>&lt;=</b></dt>
<dd><p>Match rows if the left value is less than or equal to the right value.</p></dd>





<dt><b>&lt;</b></dt>
<dd><p>Match rows if the left value is less than the right value.</p></dd>





<dt><b>&gt;=</b></dt>
<dd><p>Match rows if the left value is greater than or equal to the right value.</p></dd>





<dt><b>&gt;</b></dt>
<dd><p>Match rows if the left value is greater than the right value.</p></dd>

</dl></dd>







<dt><b><em class="replaceable">value </em><tt class="literal">BETWEEN</tt><em class="replaceable"> value1 </em><tt class="literal">AND</tt><em class="replaceable"> value2</em> </b></dt>
<dd><p>Match rows if <em class="replaceable">value</em> is between
<em class="replaceable">value1</em> and
<em class="replaceable">value2</em>, or equal to one of them.</p></dd>





<dt><b><em class="replaceable">value </em><tt class="literal">IN</tt><em class="replaceable"> </em><tt class="literal">(</tt><em class="replaceable">value1,value2,</em><tt class="literal">...)</tt></b></dt>
<dd><p>Match rows if <em class="replaceable">value</em> is among the values
listed.</p></dd>





<dt><b><em class="replaceable">value </em><tt class="literal">NOT IN</tt><em class="replaceable"> </em><tt class="literal">(</tt><em class="replaceable">value1, value2,</em><tt class="literal">...)</tt></b></dt>
<dd><p>Match rows if <em class="replaceable">value</em> is not among the
values listed.</p></dd>





<dt><b><em class="replaceable">value1 </em><tt class="literal">LIKE</tt><em class="replaceable"> value2</em></b></dt>
<dd><p>Compares <em class="replaceable">value1</em> to
<em class="replaceable">value2</em> and matches the rows if they match.
The right-hand value can contain the wildcard '%' which matches any
number of characters (including 0) and '_' which matches exactly one
character. This is probably the single most used comparison in SQL.
The most common usage is to compare a field value with a literal
containing a wildcard (e.g., <tt class="literal">SELECT name FROM people WHERE
name LIKE </tt>'<tt class="literal">B%</tt>').</p></dd>





<dt><b><em class="replaceable">value1 </em><tt class="literal">NOT LIKE</tt><em class="replaceable"> value2</em></b></dt>
<dd><p>Compares <em class="replaceable">value1</em> to
<em class="replaceable">value2</em> and matches the rows if they
differ. This is identical to <tt class="literal">NOT (value1 LIKE
value2)</tt>.</p></dd>





<dt><b><em class="replaceable">value1 </em><tt class="literal">REGEXP/RLIKE</tt><em class="replaceable"> value2</em></b></dt>
<dd><p>Compares <em class="replaceable">value1</em> to
<em class="replaceable">value2</em> using the extended regular
expression syntax and matches the rows if they match. The right hand
value can contain full Unix regular expression wildcards and
constructs (e.g., <tt class="literal">SELECT name FROM people WHERE name RLIKE
</tt>'<tt class="literal">^B.*</tt>').</p></dd>





<dt><b><em class="replaceable">value1 </em><tt class="literal">NOT REGEXP</tt><em class="replaceable"> value2</em></b></dt>
<dd><p>Compares <em class="replaceable">value1</em> to
<em class="replaceable">value2</em> using the extended regular
expression syntax and matches the rows if they differ. This is
identical to <tt class="literal">NOT (value1 REXEXP value2)</tt>.</p>





<p>The <tt class="literal">WHERE</tt> clause returns any of the expression
values that are not
or <tt class="literal">NULL</tt> (that is, anything that is not logically
false). Therefore, <tt class="literal">SELECT age FROM people WHERE
age&gt;10</tt> will return only those ages that are greater than
10.</p></dd>





<dt><b><tt class="literal">GROUP BY</tt>
<a name="INDEX-992" /> <em class="replaceable">column</em><tt class="literal">[</tt><em class="replaceable">, column2,...</em><tt class="literal">]</tt></b></dt>
<dd><p>This gathers all of the rows together that contain data from a
certain column. This allows aggregate functions to be performed upon
the columns (e.g., <tt class="literal">SELECT name,MAX(age) FROM people GROUP BY
name)</tt>.</p></dd>





<dt><b><tt class="literal">HAVING</tt>
<a name="INDEX-993" /> <em class="replaceable">clause</em></b></dt>
<dd><p>This is the same as a <tt class="literal">WHERE</tt> clause except that it
is performed upon the data that has already been retrieved from the
database. The <tt class="literal">HAVING</tt> statement is a good place to
perform aggregate functions on relatively small sets of data that
have been retrieved from large tables. This way, the function does
not have to act upon the whole table, only the data that has already
been selected (e.g., <tt class="literal">SELECT name,MAX(age) FROM people GROUP
BY name HAVING MAX(age)&gt;80</tt>).</p></dd>





<dt><b><tt class="literal">ORDER BY</tt>
<a name="INDEX-994" /> <em class="replaceable">column </em><tt class="literal">[</tt><em class="replaceable">ASC</em><tt class="literal">|</tt><em class="replaceable">DESC</em><tt class="literal">][</tt><em class="replaceable">,</em> <em class="replaceable">column2</em> <tt class="literal">[</tt><em class="replaceable">ASC</em><tt class="literal">|</tt><em class="replaceable">DESC</em><tt class="literal">]</tt><em class="replaceable">,</em>...<tt class="literal">]</tt></b></dt>
<dd><p>Sorts the returned data using the given column(s). If
<tt class="literal">DESC</tt> is present, the data is sorted in descending
order, otherwise ascending order is used. Ascending order can also be
explicitly stated with the ASC keyword (e.g., <tt class="literal">SELECT name,
age FROM people ORDER BY age DESC</tt>).</p></dd>





<dt><b><tt class="literal">LIMIT</tt>
<a name="INDEX-995" /> <tt class="literal">[</tt><em class="replaceable">start,</em><tt class="literal">]</tt> <em class="replaceable">rows</em></b></dt>
<dd><p>Returns Only the specified number of rows. If the
<tt class="literal">start</tt> value is supplied, that many rows are
skipped before the data is returned. The first row is number
(e.g., <tt class="literal">SELECT url FROM links LIMIT 5,10</tt> (returns
URL's numbered 5 through 14).</p></dd>





<dt><b><tt class="literal">PROCEDURE</tt>
<a name="INDEX-996" /> <em class="replaceable">name</em></b></dt>
<dd><p>In mSQL and early versions of MySQL, this does not do anything. It
was provided to make importing data from other SQL servers
easier.<a name="INDEX-997" />
Starting with MySQL 3.22, this substatement lets you specify a
procedure that modifies the query result before returning it to the
client.</p></dd>

</dl><p><tt class="literal">SELECT</tt> supports the concept of functions. MySQL
defines several built-in functions that can operate upon the data in
the table, returning the computed value(s) to the user. With some
functions, the value returned depends on whether the user wants to
receive a numerical or string value. This is regarded as the
"context" of the function. When selecting values to be
displayed to the user, only text context is used, but when selecting
data to be inserted into a field, or to be used as the argument of
another function, the context depends upon what the receiver is
expecting. For instance, selecting data to be inserted into a
numerical field will place the function into a numerical context.</p><p>The following are all of the named functions built into MySQL:</p><dl>
<dt><b><tt class="literal">ABS(</tt>
<a name="INDEX-998" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the absolute value of <em class="replaceable">number</em>
(e.g., <tt class="literal">ABS(-10)</tt> returns 10).</p></dd>





<dt><b><tt class="literal">ACOS(</tt>
<a name="INDEX-999" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the inverse cosine of <tt class="literal">number</tt> in radians
(e.g., <tt class="literal">ACOS(0)</tt> returns 1.570796).</p></dd>





<dt><b><tt class="literal">ASCII(</tt>
<a name="INDEX-1000" /><em class="replaceable">char</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the ASCII value of the given character (e.g.,
ASCII(`h') returns 104).</p></dd>





<dt><b><tt class="literal">ASIN(</tt>
<a name="INDEX-1001" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the inverse sine of number in radians (e.g.,
<tt class="literal">ASIN(0)</tt> returns 0.000000).</p></dd>





<dt><b><tt class="literal">ATAN(</tt>
<a name="INDEX-1002" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the inverse tangent of number in radians (e.g.,
<tt class="literal">ATAN(1)</tt> returns 0.785398.)</p></dd>





<dt><b><tt class="literal">ATAN2(</tt>
<a name="INDEX-1003" /><em class="replaceable">X, Y</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the inverse tangent of the point
<tt class="literal">(</tt><em class="replaceable">X</em><tt class="literal">,</tt><em class="replaceable">Y</em><tt class="literal">)</tt>
(e.g., <tt class="literal">ATAN(-3,3)</tt> returns -0.785398).</p></dd>





<dt><b><tt class="literal">CHAR(</tt>
<a name="INDEX-1004" /><em class="replaceable">num1</em><tt class="literal">[,</tt><em class="replaceable">num2,</em><tt class="literal">. . .])</tt></b></dt>
<dd><p>Returns a string made from converting each of the numbers to the
character corresponding to that ASCII value (e.g.,
<tt class="literal">CHAR(122)</tt> returns `z').</p></dd>





<dt><b><tt class="literal">CONCAT(</tt>
<a name="INDEX-1005" /><em class="replaceable">string1,string2</em><tt class="literal">[</tt><em class="replaceable">,string3,</em><tt class="literal">. . .])</tt></b></dt>
<dd><p>Returns the string formed by joining together all of the arguments
(e.g.,
<tt class="literal">CONCAT(</tt>'<tt class="literal">Hi</tt>'<tt class="literal">,</tt>'<tt class="literal">
</tt>'<tt class="literal">,</tt>'<tt class="literal">Mom</tt>'<tt class="literal">,</tt>'<tt class="literal">!</tt>'<tt class="literal">)</tt>
returns "Hi Mom!").</p></dd>





<dt><b><tt class="literal">CONV(</tt>
<a name="INDEX-1006" /><em class="replaceable">number, base1, base2</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the value of <em class="replaceable">number</em> converted from
<em class="replaceable">base1</em> to <em class="replaceable">base2</em>.
<em class="replaceable">Number</em> must be an integer value (either as
a bare number or as a string). The bases can be any integer from 2 to
36 (e.g., <tt class="literal">CONV(8,10,2)</tt> returns 1000 (the number 8
in decimal converted to binary)).</p></dd>





<dt><b><tt class="literal">BIN(</tt>
<a name="INDEX-1007" /><em class="replaceable">decimal</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the binary value of the given decimal number. This is
equivalent to the function <tt class="literal">CONV(decimal,10,2)</tt>
(e.g., <tt class="literal">BIN(8)</tt> returns 1000).</p></dd>





<dt><b><tt class="literal">BIT_COUNT(</tt><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of bits that are set to 1 in the binary
representation of the number (e.g., <tt class="literal">BIT_COUNT(17)</tt>
returns 2).</p></dd>





<dt><b><tt class="literal">CEILING(</tt>
<a name="INDEX-1008" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the smallest integer larger than or equal to
<em class="replaceable">number</em> (e.g., <tt class="literal">CEILING
(5.67)</tt> returns 6).</p></dd>





<dt><b><tt class="literal">COS(</tt>
<a name="INDEX-1009" /><em class="replaceable">radians</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the cosine of the given number, which is in radians (e.g.,
<tt class="literal">COS(0)</tt> returns 1.000000).</p></dd>





<dt><b><tt class="literal">COT(</tt>
<a name="INDEX-1010" /><em class="replaceable">radians</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the cotangent of the given number, which must be in radians
(e.g.,<tt class="literal"> COT(1)</tt> returns 0.642093).</p></dd>





<dt><b><tt class="literal">CURDATE()/CURRENT_DATE()</tt></b></dt>
<dd><p>Returns the current date. A number of the form
<tt class="literal">YYYYMMDD</tt> is returned if this is used in a
numerical context, otherwise a string of the form
'<tt class="literal">YYYY-MM-DD</tt>' is returned (e.g.,
<tt class="literal">CURDATE()</tt> could return "1998-08-24").</p></dd>





<dt><b><tt class="literal">CURTIME()</tt><em class="emphasis">/</em><tt class="literal">CURRENT_TIME()</tt></b></dt>
<dd><p>Returns the current time. A number of the form
<tt class="literal">HHMMSS</tt> is returned if this is used in a numerical
context, otherwise a string of the form <tt class="literal">HH:MM:SS</tt>
is returned (e.g., <tt class="literal">CURRENT_TIME()</tt> could return
13:02:43).</p></dd>





<dt><b><tt class="literal">DATABASE()</tt></b></dt>
<dd><p>Returns the name of the current database (e.g.,
<tt class="literal">DATABASE()</tt> could return "mydata").</p></dd>





<dt><b><tt class="literal">DATE_ADD(</tt><em class="replaceable">date,</em> <tt class="literal">INTERVAL</tt> <em class="replaceable">amount</em> <em class="replaceable">type</em><tt class="literal">)/ADDDATE(</tt><em class="replaceable">date, </em><tt class="literal">INTERVAL</tt> <em class="replaceable">amount</em> <em class="replaceable">type</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns a date formed by adding the given amount of time to the given
date. The type of time to add can be one of the following:
<tt class="literal">SECOND</tt>, <tt class="literal">MINUTE</tt>,
<tt class="literal">HOUR</tt>, <tt class="literal">DAY</tt>,
<tt class="literal">MONTH</tt>, <tt class="literal">YEAR</tt>,
<tt class="literal">MINUTE_SECOND</tt> (as "minutes:seconds"),
<tt class="literal">HOUR_MINUTE</tt> (as "hours:minutes"),
<tt class="literal">DAY_HOUR</tt> (as "days hours"),
<tt class="literal">YEAR_MONTH</tt> (as "years-months"),
<tt class="literal">HOUR_SECOND</tt> (as
"hours:minutes:seconds"), <tt class="literal">DAY_MINUTE</tt>
(as "days hours:minutes") and
<tt class="literal">DAY_SECOND</tt> (as "days
hours:minutes:seconds"). Except for those types with forms
specified above, the amount must be an integer value (e.g.,
<tt class="literal">DATE_ADD("1998-08-24 13:00:00", INTERVAL 2 MONTH</tt>)
returns "1998-10-24 13:00:00").</p></dd>





<dt><b><tt class="literal">DATE_FORMAT(</tt><em class="replaceable">date, format</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the date formatted as specified. The format string prints as
given with the following values substituted:</p>





<dl>
<dt><b>%a</b></dt>
<dd><p>Short weekday name (Sun, Mon, etc.)</p></dd>





<dt><b>%b</b></dt>
<dd><p>Short month name (Jan, Feb, etc.)</p></dd>





<dt><b>%D</b></dt>
<dd><p>Day of the month with ordinal suffix (1st, 2nd, 3rd, etc.)</p></dd>





<dt><b>%d</b></dt>
<dd><p>Day of the month</p></dd>





<dt><b>%H</b></dt>
<dd><p>24-hour hour (always two digits, e.g., 01)</p></dd>





<dt><b>%h/%I</b></dt>
<dd><p>12-hour hour (always two digits, e.g., 09)</p></dd>





<dt><b>%i</b></dt>
<dd><p>Minutes</p></dd>





<dt><b>%j</b></dt>
<dd><p>Day of the year</p></dd>





<dt><b>%k</b></dt>
<dd><p>24-hour hour (one or two digits, e.g., 1)</p></dd>





<dt><b>%l</b></dt>
<dd><p>12-hour hour (one or two digits, e.g., 9)</p></dd>





<dt><b>%M</b></dt>
<dd><p>Name of the month</p></dd>





<dt><b>%m</b></dt>
<dd><p>Number of the month (January is 1).</p></dd>





<dt><b>%p</b></dt>
<dd><p>AM or PM</p></dd>





<dt><b>%r</b></dt>
<dd><p>12-hour total time (including AM/PM)</p></dd>





<dt><b>%S</b></dt>
<dd><p>Seconds (always two digits, e.g., 04)</p></dd>





<dt><b>%s</b></dt>
<dd><p>Seconds (one or two digits, e.g., 4)</p></dd>





<dt><b>%T</b></dt>
<dd><p>24-hour total time</p></dd>





<dt><b>%U</b></dt>
<dd><p>Week of the year (new weeks begin on Sunday)</p></dd>





<dt><b>%W</b></dt>
<dd><p>Name of the weekday</p></dd>





<dt><b>%w</b></dt>
<dd><p>Number of weekday (0 is Sunday)</p></dd>





<dt><b>%Y</b></dt>
<dd><p>Four digit year</p></dd>





<dt><b>%y</b></dt>
<dd><p>Two digit year</p></dd>





<dt><b>%%</b></dt>
<dd><p>A literal "%" character.</p></dd>

</dl></dd>






<dt><b><tt class="literal">DATE_SUB(</tt><em class="replaceable">date, </em><tt class="literal">INTERVAL</tt> <em class="replaceable">amount</em> <em class="replaceable">type</em><tt class="literal">)/SUBDATE(</tt><em class="replaceable">date,</em> <tt class="literal">INTERVAL</tt> <em class="replaceable">amount</em> <em class="replaceable">type</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns a date formed by subtracting the given amount of time from
the given date. The same interval types are used as with
<tt class="literal">DATE_ADD</tt> (e.g., <tt class="literal">SUBDATE("1999-05-20
11:04:23", INTERVAL 2 DAY</tt>) returns "1999-05-18
11:04:23").</p></dd>





<dt><b><tt class="literal">DAYNAME(</tt>
<a name="INDEX-1011" /><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the name of the day of the week for the given date
(e.g.,<tt class="literal">
DAYNAME(</tt>'<tt class="literal">1998-08-22</tt>'<tt class="literal">)</tt>
returns "Saturday").</p></dd>





<dt><b><tt class="literal">DAYOFMONTH(</tt><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the day of the month for the given date (e.g.,
<tt class="literal">DAYOFMONTH(</tt>'<tt class="literal">1998-08-22</tt>'<tt class="literal">)</tt>
returns 22).</p></dd>





<dt><b><tt class="literal">DAYOFWEEK(</tt><em class="replaceable">date</em><tt class="literal">)/WEEKDAY(</tt><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of the day of the week (1 is Sunday) for the given
date (e.g.,
<tt class="literal">DAY_OF_WEEK(</tt>'<tt class="literal">1998-08-22</tt>'<tt class="literal">)</tt>
returns 7).</p></dd>





<dt><b><tt class="literal">DAYOFYEAR(</tt><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the day of the year for the given date (e.g.,
<tt class="literal">DAYOFYEAR(</tt>'<tt class="literal">1983-02-15</tt>'<tt class="literal">)</tt>
returns 46).</p></dd>





<dt><b><tt class="literal">DEGREES(</tt><em class="replaceable">radians</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the given argument converted from radians to degrees (e.g.,
<tt class="literal">DEGREES(2*PI())</tt> returns 360.000000).</p></dd>





<dt><b><tt class="literal">ELT(</tt>
<a name="INDEX-1012" /><em class="replaceable">number,string1,string2,</em><tt class="literal"> </tt><em class="replaceable">. . .</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">string1</em> if
<em class="replaceable">number</em> is 1,
<em class="replaceable">string2</em> if
<em class="replaceable">number</em> is 2, etc. A null value is returned
if <em class="replaceable">number</em> does not correspond with a
string (e.g.,<tt class="literal"> ELT(3,
"once","twice","thrice","fourth")</tt> returns
"thrice").</p></dd>





<dt><b><tt class="literal">ENCRYPT(</tt>
<a name="INDEX-1013" /><em class="replaceable">string</em><tt class="literal">[</tt><em class="replaceable">,</em><em class="emphasis"> </em><em class="replaceable">salt</em><tt class="literal">])</tt></b></dt>
<dd><p>Password-encrypts the given string. If a salt is provided, it is used
to generate the password (e.g.,
<tt class="literal">ENCRYPT(</tt>'<tt class="literal">mypass</tt>'<tt class="literal">,</tt>'<tt class="literal">3a</tt>'<tt class="literal">)</tt>
could return "3afi4004idgv").</p></dd>





<dt><b><tt class="literal">EXP(</tt>
<a name="INDEX-1014" /><em class="replaceable">power</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number <em class="emphasis">e</em> raised to the given power
(e.g., <tt class="literal">EXP(1)</tt> returns 2.718282).</p></dd>





<dt><b><tt class="literal">FIELD(</tt>
<a name="INDEX-1015" /><em class="replaceable">string,string1,string2,</em><tt class="literal"> </tt><em class="replaceable">. . .</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the position in the argument list (starting with
<em class="replaceable">string1</em>) of the first string that is
identical to <em class="replaceable">string</em>. Returns
if no other string matches <em class="replaceable">string</em> (e.g.,
<tt class="literal">FIELD(</tt>'<tt class="literal">abe</tt>'<tt class="literal">,</tt>'<tt class="literal">george</tt>'<tt class="literal">,</tt>'<tt class="literal">john</tt>'<tt class="literal">,</tt>'<tt class="literal">abe</tt>'<tt class="literal">,</tt>'<tt class="literal">bill</tt>'<tt class="literal">)</tt>
returns).</p></dd>





<dt><b><tt class="literal">FIND_IN_SET(</tt><em class="replaceable">string,set</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the position of <em class="replaceable">string</em> within
<em class="replaceable">set</em>. The <em class="replaceable">set</em>
argument is a series of strings separated by commas (e.g.,
<tt class="literal">FIND_IN_SET (</tt>'<tt class="literal">abe</tt>'<tt class="literal">,
</tt>'<tt class="literal">george, john, abe,
bill</tt>'<tt class="literal">)</tt> returns 3).</p></dd>





<dt><b><tt class="literal">FLOOR(</tt>
<a name="INDEX-1016" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the largest integer smaller than or equal to
<em class="replaceable">number</em> (e.g., <tt class="literal">FLOOR
(5.67)</tt> returns 5).</p></dd>





<dt><b><tt class="literal">FORMAT(</tt>
<a name="INDEX-1017" /><em class="replaceable">number,</em><em class="emphasis"> </em><em class="replaceable">decimals</em><tt class="literal">)</tt></b></dt>
<dd><p>Neatly formats the given number, using the given number of decimals
(e.g.,<tt class="literal"> FORMAT(4432.99134,2)</tt> returns
"4,432.99").</p></dd>





<dt><b><tt class="literal">FROM_DAYS(</tt>
<a name="INDEX-1018" /><em class="replaceable">days</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the date that is the given number of days (where day 1 is the
Jan 1<sup class="superscript"> </sup>of year 1) (e.g.,
<tt class="literal">FROM_DAYS(728749)</tt> returns
"1995-04-02").</p></dd>





<dt><b><tt class="literal">FROM_UNIXTIME(</tt>
<a name="INDEX-1019" /><em class="replaceable">seconds</em><tt class="literal">[</tt><em class="replaceable">,</em><tt class="literal"> </tt><em class="replaceable">format</em><tt class="literal">])</tt></b></dt>
<dd><p>Returns the date (in <tt class="literal">GMT</tt>) corresponding to the
given number of seconds since the epoch (January 1, 1970
<tt class="literal">GMT</tt>). If a format string (using the same format as
<tt class="literal">DATE_FORMAT</tt>) is given, the returned time is
formatted accordingly (e.g.,<tt class="literal">
FROM_UNIXTIME(903981584)</tt> returns "1998-08-24
18:00:02").</p></dd>





<dt><b><tt class="literal">GET_LOCK(</tt>
<a name="INDEX-1020" /><em class="replaceable">name,seconds</em><tt class="literal">)</tt></b></dt>
<dd><p>Creates a named user-defined lock that waits for the given number of
seconds until timeout. This lock can be used for client-side
application locking between programs that cooperatively use the same
lock names. If the lock is successful, 1 is returned. If the lock
times out while waiting,
is returned. All others errors return a <tt class="literal">NULL</tt>
value. Only one named lock may be active at a time for a singe
session. Running <tt class="literal">GET_LOCK()</tt> more than once will
silently remove any previous locks (e.g.,
<tt class="literal">GET_LOCK("mylock",10)</tt> could return 1 within the
following 10 seconds).</p></dd>





<dt><b><tt class="literal">GREATEST(</tt>
<a name="INDEX-1021" /><em class="replaceable">num1, num2</em><tt class="literal">[</tt><em class="replaceable">, num3,</em><tt class="literal"> . . . ])</tt></b></dt>
<dd><p>Returns the numerically largest of all of the arguments (e.g.,
<tt class="literal">GREATEST(5,6,68,1,4)</tt> returns 68).</p></dd>





<dt><b><tt class="literal">HEX(</tt>
<a name="INDEX-1022" /><em class="replaceable">decimal</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the hexadecimal value of the given decimal number. This is
equivalent to the function CONV(decimal,10,16) (e.g., HEX(90) returns
"3a").</p></dd>





<dt><b><tt class="literal">HOUR(</tt>
<a name="INDEX-1023" /><em class="replaceable">time</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the hour of the given time (e.g.,
<tt class="literal">HOUR(</tt>'<tt class="literal">15:33:30</tt>'<tt class="literal">)</tt>
returns 15).</p></dd>





<dt><b><tt class="literal">IF(</tt>
<a name="INDEX-1024" /><em class="replaceable">test, value1, value2</em><tt class="literal">)</tt></b></dt>
<dd><p>If <em class="replaceable">test</em> is true, returns
<em class="replaceable">value1</em>, otherwise returns
<em class="replaceable">value2</em>. The
<em class="replaceable">test</em> value is considered to be an integer,
therefore floating point values must be used with comparison
operations to generate an integer (e.g.,
<tt class="literal">IF(1&gt;0,"true","false")</tt> returns
<tt class="literal">true</tt>).</p></dd>





<dt><b><tt class="literal">IFNULL(</tt>
<a name="INDEX-1025" /><em class="replaceable">value, value2</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">value</em> if it is not null, otherwise
returns <em class="replaceable">value2</em> (e.g.,
<tt class="literal">IFNULL(NULL, "bar")</tt> returns "bar").</p></dd>





<dt><b><tt class="literal">INSERT(</tt>
<a name="INDEX-1026" /><em class="replaceable">string,position,length,new</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the string created by replacing the substring of
<em class="replaceable">string</em> starting at
<em class="replaceable">position</em> and going
<em class="replaceable">length</em> characters with
<em class="replaceable">new</em> (e.g.,
<tt class="literal">INSERT(</tt>'<tt class="literal">help</tt>'<tt class="literal">,3,1,</tt>'<tt class="literal">
can jum</tt>'<tt class="literal">)</tt> returns "he can
jump").</p></dd>





<dt><b><tt class="literal">INSTR(</tt>
<a name="INDEX-1027" /><em class="replaceable">string,substring</em><tt class="literal">)</tt></b></dt>
<dd><p>Identical to <tt class="literal">LOCATE</tt> except that the arguments are
reversed (e.g.,
<tt class="literal">INSTR(</tt>'<tt class="literal">makebelieve</tt>'<tt class="literal">,</tt>'<tt class="literal">lie</tt>'<tt class="literal">)</tt>
returns 7).</p></dd>





<dt><b><tt class="literal">ISNULL(</tt>
<a name="INDEX-1028" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns 1 if the expression evaluates to <tt class="literal">NULL</tt>,
otherwise returns
(e.g.,<tt class="literal"> ISNULL(3)</tt> returns 0).</p></dd>





<dt><b><tt class="literal">INTERVAL(</tt><em class="replaceable">A,B,C,D,</em><tt class="literal"> . . . )</tt></b></dt>
<dd><p>Returns
if <em class="replaceable">A</em> is the smallest value, 1 if
<em class="replaceable">A</em> is between <em class="replaceable">B</em>
and C, 2 if <em class="replaceable">A</em> is between
<em class="replaceable">C</em> and <em class="replaceable">D</em>, etc.
All of the values except for <em class="replaceable">A</em> must be in
order (e.g.,<tt class="literal"> INTERVAL(5,2,4,6,8)</tt> returns 2
(because 5 is in the second interval, between 4 and 6).</p></dd>





<dt><b><tt class="literal">LAST_INSERT_ID()</tt></b></dt>
<dd><p>Returns the last value that was automatically generated for an
<tt class="literal">AUTO_INCREMENT</tt> field (e.g.,
<tt class="literal">LAST_INSERT_ID()</tt> could return 4).</p></dd>





<dt><b><tt class="literal">LCASE(</tt>
<a name="INDEX-1029" />
<a name="INDEX-1030" /><em class="replaceable">string</em><tt class="literal">)/LOWER(</tt><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">string</em> with all characters turned
into lower case (e.g.,
<tt class="literal">LCASE(</tt>'<tt class="literal">BoB</tt>'<tt class="literal">)</tt>
returns "bob").</p></dd>





<dt><b><tt class="literal">LEAST(</tt>
<a name="INDEX-1031" /><em class="replaceable">num1, num2</em><tt class="literal">[</tt><em class="replaceable">, num3,</em><em class="emphasis"> </em><tt class="literal">. . .])</tt></b></dt>
<dd><p>Returns the numerically smallest of all of the arguments (e.g.,
<tt class="literal">LEAST(5,6,68,1,4)</tt> returns 1).</p></dd>





<dt><b><tt class="literal">LEFT(</tt>
<a name="INDEX-1032" /><em class="replaceable">string,length</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">length</em> characters from the left
end of <em class="replaceable">string</em> (e.g.,<tt class="literal">
LEFT("12345",3)</tt> returns "123").</p></dd>





<dt><b><tt class="literal">LENGTH(</tt>
<a name="INDEX-1033" /><em class="replaceable">string</em><tt class="literal">)/OCTET_LENGTH(</tt>
<a name="INDEX-1034" /><em class="replaceable">string</em><tt class="literal">)/CHAR_LENGTH(</tt>
<a name="INDEX-1035" /><em class="replaceable">string</em><tt class="literal">)/CHARACTER_LENGTH(</tt>
<a name="INDEX-1036" /><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the length of <em class="replaceable">string</em> (e.g.,
<tt class="literal">CHAR_LENGTH(</tt>'<tt class="literal">Hi
Mom!</tt>'<tt class="literal">)</tt> returns 7). In character sets
that use multibyte characters (such as Unicode, and several Asian
character sets), one character may take up more than one byte. In
these cases, MySQL's string functions should correctly count
the number of characters, not bytes, in the string. However, in
versions prior to 3.23, this did not work properly and the function
returned the number of bytes.</p></dd>





<dt><b><tt class="literal">LOCATE(</tt>
<a name="INDEX-1037" /><em class="replaceable">substring,string</em><tt class="literal">[</tt><em class="replaceable">,number</em><tt class="literal">])/POSITION(</tt><em class="replaceable">substring,string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the character position of the first occurrence of
<em class="replaceable">substring</em> within
<em class="replaceable">string</em>. If
<em class="replaceable">substring</em> does not exist in
<em class="replaceable">string</em>,
is returned. If a numerical third argument is supplied to
<tt class="literal">LOCATE</tt>, the search for
<em class="replaceable">substring</em> within
<em class="replaceable">string</em> does not start until the given
position within <em class="replaceable">string</em> (e.g.,<tt class="literal">
LOCATE(</tt>'<tt class="literal">SQL</tt>'<tt class="literal">,</tt>'<tt class="literal">MySQL</tt>'<tt class="literal">)</tt>
returns 3).</p></dd>





<dt><b><tt class="literal">LOG(</tt>
<a name="INDEX-1038" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the natural logarithm of <em class="replaceable">number</em>
(e.g., <tt class="literal">LOG(2)</tt> returns 0.693147).</p></dd>





<dt><b><tt class="literal">LOG10(</tt>
<a name="INDEX-1039" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the common logarithm of <em class="replaceable">number</em>
(e.g., <tt class="literal">LOG10(1000)</tt> returns 3.000000).</p></dd>





<dt><b><tt class="literal">LPAD(</tt>
<a name="INDEX-1040" /><em class="replaceable">string,length,padding</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">string</em> with
<tt class="literal">padding</tt> added to the left end until the new string
is <em class="replaceable">length</em> characters long (e.g.,
<tt class="literal">LPAD(</tt>'<tt class="literal"> Merry
X-Mas</tt>'<tt class="literal">,18,</tt>'<tt class="literal">Ho</tt>'<tt class="literal">)</tt>
returns "HoHoHo Merry X-Mas").</p></dd>





<dt><b><tt class="literal">LTRIM(</tt>
<a name="INDEX-1041" /><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">string</em> with all leading whitespace
removed (e.g.,<tt class="literal"> LTRIM(</tt>'<tt class="literal">
Oops</tt>'<tt class="literal">)</tt> returns "Oops").</p></dd>





<dt><b><tt class="literal">MID(</tt>
<a name="INDEX-1042" /><em class="replaceable">string,position,length</em><tt class="literal">)/SUBSTRING(</tt><em class="replaceable">string,position,length</em><tt class="literal">)/SUBSTRING(</tt><em class="replaceable">string</em><em class="emphasis"> </em><tt class="literal">FROM</tt><em class="emphasis"> </em><em class="replaceable">position</em><em class="emphasis"> </em><tt class="literal">FOR</tt><em class="emphasis"> </em><em class="replaceable">length</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the substring formed by taking
<em class="replaceable">length</em> characters from
<em class="replaceable">string</em>, starting at
<em class="replaceable">position</em> (e.g.,
<tt class="literal">SUBSTRING(</tt>'<tt class="literal">12345</tt>'<tt class="literal">,2,3)</tt>
returns "234").</p></dd>





<dt><b><tt class="literal">MINUTE(</tt>
<a name="INDEX-1043" /><em class="replaceable">time</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the minute of the given time (e.g.,
<tt class="literal">MINUTE(</tt>'<tt class="literal">15:33:30</tt>'<tt class="literal">)</tt>
returns 33).</p></dd>





<dt><b><tt class="literal">MOD(</tt>
<a name="INDEX-1044" /><em class="replaceable">num1, num2</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the modulo of <em class="replaceable">num1</em> divided by
<em class="replaceable">num2</em>. This is the same as the % operator
(e.g., <tt class="literal">MOD(11,3)</tt> returns 2).</p></dd>





<dt><b><tt class="literal">MONTH(</tt>
<a name="INDEX-1045" /><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of the month (1 is January) for the given date
(e.g., <tt class="literal">MONTH</tt>(`1998-08-22') returns 8).</p></dd>





<dt><b><tt class="literal">MONTHNAME(</tt>
<a name="INDEX-1046" /><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the name of the month for the given date (e.g.,
<tt class="literal">MONTHNAME(</tt>'<tt class="literal">1998-08-22</tt>'<tt class="literal">)</tt>
returns "August").</p></dd>





<dt><b><tt class="literal">NOW()/SYSDATE()/CURRENT_TIMESTAMP()</tt>
<a name="INDEX-1047" />
<a name="INDEX-1048" />
<a name="INDEX-1049" /></b></dt>
<dd><p>Returns the current date and time. A number of the form
<tt class="literal">YYYYMMDDHHMMSS</tt> is returned if this is used in a
numerical context, otherwise a string of the form
'<tt class="literal">YYYY-MM-DD HH:MM:SS</tt>' is returned (e.g.,
<tt class="literal">SYSDATE()</tt> could return "1998-08-24
12:55:32").</p></dd>





<dt><b><tt class="literal">OCT(</tt>
<a name="INDEX-1050" /><em class="replaceable">decimal</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the octal value of the given decimal number. This is
equivalent to the function <tt class="literal">CONV(decimal,10,8)</tt>
(e.g.,<tt class="literal"> OCT(8)</tt> returns 10).</p></dd>





<dt><b><tt class="literal">PASSWORD(</tt>
<a name="INDEX-1051" /><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns a password-encrypted version of the given string
(e.g.,<tt class="literal">
PASSWD(</tt>'<tt class="literal">mypass</tt>'<tt class="literal">)</tt>
could return "3afi4004idgv").</p></dd>





<dt><b><tt class="literal">PERIOD_ADD(</tt>
<a name="INDEX-1052" /><em class="replaceable">date,months</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the date formed by adding the given number of months to
<em class="replaceable">date</em> (which must be of the form
<tt class="literal">YYMM</tt> or <tt class="literal">YYYYMM</tt>) (e.g.,<tt class="literal">
PERIOD_ADD(9808,14)</tt> returns 199910).</p></dd>





<dt><b><tt class="literal">PERIOD_DIFF(</tt>
<a name="INDEX-1053" /><em class="replaceable">date1, date2</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of months between the two dates (which must be of
the form <tt class="literal">YYMM</tt> or <tt class="literal">YYYYMM</tt>) (e.g.,
<tt class="literal">PERIOD_DIFF(199901,8901)</tt> returns 120).</p></dd>





<dt><b><tt class="literal">PI()</tt>
<a name="INDEX-1054" /></b></dt>
<dd><p>Returns the value of pi: 3.141593.</p></dd>





<dt><b><tt class="literal">POW(</tt>
<a name="INDEX-1055" /><em class="replaceable">num1, num2</em><tt class="literal">)/POWER(</tt><em class="replaceable">num1, num2</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the value of <em class="replaceable">num1</em> raised to the
<em class="replaceable">num2</em> power (e.g.,
<tt class="literal">POWER(3,2)</tt> returns 9.000000).</p></dd>





<dt><b><tt class="literal">QUARTER(</tt>
<a name="INDEX-1056" /><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of the quarter of the given date (1 is
January-March) (e.g.,<tt class="literal">
QUARTER(</tt>'<tt class="literal">1998-08-22</tt>'<tt class="literal">)</tt>
returns 3).</p></dd>





<dt><b><tt class="literal">RADIANS(</tt>
<a name="INDEX-1057" /><em class="replaceable">degrees</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the given argument converted from degrees to radians (e.g.,
<tt class="literal">RADIANS(-90)</tt> returns -1.570796).</p></dd>





<dt><b><tt class="literal">RAND([</tt>
<a name="INDEX-1058" /><em class="replaceable">seed</em><tt class="literal">])</tt></b></dt>
<dd><p>Returns a random decimal value between
and 1. If an argument is specified, it is used as the seed of the
random number generator (e.g., <tt class="literal">RAND(3)</tt> could
return 0.435434).</p></dd>





<dt><b><tt class="literal">RELEASE_LOCK(</tt>
<a name="INDEX-1059" /><em class="replaceable">name</em><tt class="literal">)</tt></b></dt>
<dd><p>Removes the named locked created with the <tt class="literal">GET_LOCK</tt>
function. Returns 1 if the release is successful,
if it failed because the current thread did not own the lock and a
<tt class="literal">null</tt> value if the lock did not exist (e.g.,
<tt class="literal">RELEASE_LOCK("mylock")</tt>).</p></dd>





<dt><b><tt class="literal">REPEAT(</tt>
<a name="INDEX-1060" /><em class="replaceable">string,number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns a string consisting of the original
<em class="replaceable">string</em> repeated
<em class="replaceable">number</em> times. Returns an empty string if
<em class="replaceable">number</em> is less than or equal to zero
(e.g.,<tt class="literal">
REPEAT(</tt>'<tt class="literal">ma</tt>'<tt class="literal">,4)</tt>
returns `mamamama').</p></dd>





<dt><b><tt class="literal">REPLACE(</tt>
<a name="INDEX-1061" /><em class="replaceable">string,old,new</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns a string that has all occurrences of the substring
<em class="replaceable">old</em> replaced with
<em class="replaceable">new</em> (e.g.,
<tt class="literal">REPLACE</tt>('<em class="replaceable">black
jack</em>','<em class="replaceable">ack</em>','<em class="replaceable">oke</em>')
returns "bloke joke").</p></dd>





<dt><b><tt class="literal">REVERSE(</tt>
<a name="INDEX-1062" /><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the character reverse of <em class="replaceable">string</em>
(e.g., <tt class="literal">REVERSE(</tt>'<tt class="literal">my
bologna</tt>'<tt class="literal">)</tt> returns "angolob
ym").</p></dd>





<dt><b><tt class="literal">RIGHT(</tt><em class="replaceable">string,length</em><tt class="literal">)/SUBSTRING(</tt>
<a name="INDEX-1063" /><em class="emphasis">string </em><tt class="literal">FROM</tt><em class="emphasis"> length</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">length</em> characters from the right
end of <em class="replaceable">string</em> (e.g.,
<tt class="literal">SUBSTRING</tt>("12345" FROM 3) returns
"345").</p></dd>





<dt><b><tt class="literal">ROUND(</tt>
<a name="INDEX-1064" /><em class="replaceable">number</em><tt class="literal">[</tt><em class="replaceable">,decimal</em><tt class="literal">])</tt></b></dt>
<dd><p>Returns <em class="replaceable">number</em>, rounded to the given
number of decimals. If no <em class="replaceable">decimal</em> argument
is supplied, <em class="replaceable">number</em> is rounded to an
integer (e.g., <tt class="literal">ROUND(5.67,1)</tt> returns 5.7).</p></dd>





<dt><b><tt class="literal">RPAD(</tt>
<a name="INDEX-1065" /><em class="replaceable">string,length,padding</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">string</em> with padding added to the
right end until the new string is <em class="replaceable">length</em>
characters long (e.g.,
<tt class="literal">RPAD(</tt>'<tt class="literal">Yo</tt>'<tt class="literal">,5,</tt>'<tt class="literal">!</tt>'<tt class="literal">)</tt>
returns "Yo!!!").</p></dd>





<dt><b><tt class="literal">RTRIM(</tt>
<a name="INDEX-1066" /><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">string</em> with all trailing
whitespace removed (e.g., <tt class="literal">RTRIM(</tt>'<tt class="literal">Oops
</tt>'<tt class="literal">)</tt> returns "Oops").</p></dd>





<dt><b><tt class="literal">SECOND(</tt>
<a name="INDEX-1067" /><em class="replaceable">time</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the seconds of the given time (e.g.,
<tt class="literal">SECOND(</tt>'<tt class="literal">15:33:30</tt>'<tt class="literal">)</tt>
returns 30).</p></dd>





<dt><b><tt class="literal">SEC_TO_TIME(</tt>
<a name="INDEX-1068" /><em class="replaceable">seconds</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of hours, minutes and seconds in the given number
of seconds. A number of the form <tt class="literal">HHMMSS</tt> is
returned if this is used in a numerical context, otherwise a string
of the form <tt class="literal">HH:MM:SS</tt> is returned (e.g.,<tt class="literal">
SEC_TO_TIME(3666)</tt> returns "01:01:06").</p></dd>





<dt><b><tt class="literal">SIGN(</tt>
<a name="INDEX-1069" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns -1 if <em class="replaceable">number</em> is negative,
if it's zero, or 1 if it's positive (e.g.,
<tt class="literal">SIGN(4)</tt> returns 1).</p></dd>





<dt><b><tt class="literal">SIN(</tt>
<a name="INDEX-1070" /><em class="replaceable">radians</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the sine of the given number, which is in radians (e.g.,
<tt class="literal">SIN(2*PI())</tt> returns 0.000000).</p></dd>





<dt><b><tt class="literal">SOUNDEX(</tt>
<a name="INDEX-1071" /><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the Soundex code associated with string (e.g.,
<tt class="literal">SOUNDEX(</tt>'<tt class="literal">Jello</tt>'<tt class="literal">)</tt>
returns "J400").</p></dd>





<dt><b><tt class="literal">SPACE(</tt>
<a name="INDEX-1072" /><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns a string that contains <em class="replaceable">number</em>
spaces (e.g., <tt class="literal">SPACE(5)</tt> returns "<tt class="literal">
</tt>").</p></dd>





<dt><b><tt class="literal">SQRT(</tt><em class="replaceable">number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the square root of <em class="replaceable">number</em> (e.g.,
<tt class="literal">SQRT(16)</tt> returns 4.000000).</p></dd>





<dt><b><tt class="literal">STRCMP(</tt>
<a name="INDEX-1073" /><em class="replaceable">string1, string2</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns
if the strings are the same, -1 if <em class="replaceable">string1</em>
would sort before than <em class="replaceable">string2</em>, or 1 if
<em class="replaceable">string1</em> would sort after than
<em class="replaceable">string2</em> (e.g.,
<tt class="literal">STRCMP(</tt>'<tt class="literal">bob</tt>'<tt class="literal">,</tt>'<tt class="literal">bobbie</tt>'<tt class="literal">)</tt>
returns -1).</p></dd>





<dt><b><tt class="literal">SUBSTRING_INDEX(</tt>
<a name="INDEX-1074" /><em class="replaceable">string,character,number</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the substring formed by counting
<em class="replaceable">number</em> of
<em class="replaceable">character</em> within
<em class="replaceable">string</em> and then returning everything to
the right if count is positive, or everything to the left if count is
negative (e.g.,
<tt class="literal">SUBSTRING_INDEX(</tt>'<tt class="literal">1,2,3,4,5</tt>'<tt class="literal">,</tt>'<tt class="literal">,</tt>'<tt class="literal">,-3)</tt>
returns "1,2,3").</p></dd>





<dt><b><tt class="literal">SUBSTRING(</tt>
<a name="INDEX-1075" /><em class="replaceable">string,position</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns all of <em class="replaceable">string</em> starting at
<em class="replaceable">position</em> characters (e.g.,
<tt class="literal">SUBSTRING</tt>("123456",3) returns
"3456").</p></dd>





<dt><b><tt class="literal">TAN(</tt>
<a name="INDEX-1076" /><em class="replaceable">radians</em><tt class="literal">)</tt></b></dt>
<dd><p>
<a name="INDEX-1077" />Returns the tangent of the given
number, which must be in radians (e.g.,<tt class="literal"> TAN(0)</tt>
returns 0.000000).</p></dd>





<dt><b><tt class="literal">TIME_FORMAT(</tt>
<a name="INDEX-1078" /><em class="replaceable">time, format</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the given time using a format string. The format string is of
the same type as <tt class="literal">DATE_FORMAT</tt>, as shown earlier.</p></dd>





<dt><b><tt class="literal">TIME_TO_SEC(</tt>
<a name="INDEX-1079" /><em class="replaceable">time</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of seconds in the <em class="replaceable">time</em>
argument (e.g.,
<tt class="literal">TIME_TO_SEC(</tt>'<tt class="literal">01:01:06</tt>'<tt class="literal">)</tt>
returns 3666).</p></dd>





<dt><b><tt class="literal">TO_DAYS(</tt>
<a name="INDEX-1080" /><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of days (where day 1 is the Jan 1 of year 1) to
the given date. The date may be a value of type
<tt class="literal">DATE</tt>, <tt class="literal">DATETIME</tt> or
<tt class="literal">TIMESTAMP,</tt> or a number of the form
<tt class="literal">YYMMDD</tt> or <tt class="literal">YYYYMMDD</tt> (e.g.,
<tt class="literal">TO_DAYS(19950402)</tt> returns 728749).</p></dd>





<dt><b><tt class="literal">TRIM([BOTH|LEADING|TRAILING] [</tt>
<a name="INDEX-1081" /><em class="replaceable">remove</em><tt class="literal">] [FROM] </tt><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>With no modifiers, returns <em class="replaceable">string</em> with all
trailing and leading whitespace removed. You can specify whether to
remove either the leading or the trailing whitespace, or both. You
can also specify another character other than space to be removed
(e.g., <tt class="literal">TRIM(both </tt>'<tt class="literal">-</tt>'<tt class="literal">
from </tt>'<tt class="literal">---look
here---</tt>'<tt class="literal">)</tt> returns "look
here").</p></dd>





<dt><b><tt class="literal">TRUNCATE</tt>
<a name="INDEX-1082" /><em class="emphasis">(</em><em class="replaceable">number, decimals</em><em class="emphasis">)</em></b></dt>
<dd><p>Returns <em class="replaceable">number</em> truncated to the given
number of decimals (e.g., <tt class="literal">TRUNCATE(3.33333333,2)</tt>
returns 3.33).</p></dd>





<dt><b><tt class="literal">UCASE(</tt>
<a name="INDEX-1083" />
<a name="INDEX-1084" /><em class="replaceable">string</em><tt class="literal">)/UPPER(</tt><em class="replaceable">string</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns <em class="replaceable">string</em> with all characters turned
into uppercase (e.g.,<tt class="literal"> UPPER
(</tt>'<tt class="literal">Scooby</tt>'<tt class="literal">)</tt> returns
"<tt class="literal">SCOOBY</tt>").</p></dd>





<dt><b><tt class="literal">UNIX_TIMESTAMP([</tt>
<a name="INDEX-1085" /><em class="replaceable">date</em><tt class="literal">])</tt></b></dt>
<dd><p>Returns the number of seconds from the epoch (January 1, 1970
<tt class="literal">GMT</tt>) to the given date (in
<tt class="literal">GMT</tt>). If no date is given, the number of seconds
to the current date is used (e.g.,
<tt class="literal">UNIX_TIMESTAMP(</tt>'<tt class="literal">1998-08-24
18:00:02</tt>'<tt class="literal">)</tt> returns 903981584).</p></dd>





<dt><b><tt class="literal">USER()/SYSTEM_USER()/SESSION_USER()</tt>
<a name="INDEX-1086" />
<a name="INDEX-1087" />
<a name="INDEX-1088" /></b></dt>
<dd><p>Returns the name of the current user (e.g.,
<tt class="literal">SYSTEM_USER()</tt> could return "ryarger").</p></dd>





<dt><b><tt class="literal">VERSION()</tt>
<a name="INDEX-1089" /></b></dt>
<dd><p>Returns the version of the MySQL server itself (e.g.,
<tt class="literal">VERSION()</tt> could return
"3.22.5c-alpha").</p></dd>





<dt><b><tt class="literal">WEEK(</tt>
<a name="INDEX-1090" /><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the week of the year for the given date (e.g.,
<tt class="literal">WEEK(</tt>'<tt class="literal">1998-12-29</tt>'<tt class="literal">)</tt>
returns 52).</p></dd>





<dt><b><tt class="literal">YEAR(</tt>
<a name="INDEX-1091" /><em class="replaceable">date</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the year of the given date (e.g.,
<tt class="literal">YEAR(</tt>'<tt class="literal">1998-12-29</tt>'<tt class="literal">)</tt>
returns 1998).</p></dd>

</dl><p>The following functions are aggregate functions that perform upon a
set of data. The usual method of using these is to perform some
action on a complete set of returned rows. For example,
<tt class="literal">SELECT AVG(height) FROM kids</tt> would return the
average of all of the values of the '<tt class="literal">height</tt>' field
in the <tt class="literal">kids</tt> table.</p><dl>
<dt><b><tt class="literal">AVG(</tt>
<a name="INDEX-1092" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the average value of the values in
<em class="replaceable">expression</em> (e.g., <tt class="literal">SELECT
AVG(score) FROM tests</tt>).</p></dd>





<dt><b><tt class="literal">BIT_AND(</tt>
<a name="INDEX-1093" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the bitwise <tt class="literal">AND</tt> aggregate of all of the
values in <em class="replaceable">expression</em> (e.g.,<tt class="literal">
SELECT BIT_AND(flags) FROM options)</tt>.</p></dd>





<dt><b><tt class="literal">BIT_OR(</tt>
<a name="INDEX-1094" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the bitwise <tt class="literal">OR</tt> aggregate of all of the
values in <em class="replaceable">expression</em> (e.g.,
<tt class="literal">SELECT BIT_OR(flags) FROM options</tt>).</p></dd>





<dt><b><tt class="literal">COUNT(</tt>
<a name="INDEX-1095" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the number of times <em class="replaceable">expression</em> was
not null. <tt class="literal">COUNT(*)</tt> will return the number of rows
with some data in the entire table (e.g., <tt class="literal">SELECT COUNT(*)
FROM folders</tt>).</p></dd>





<dt><b><tt class="literal">MAX(</tt>
<a name="INDEX-1096" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the largest of the values in
<em class="replaceable">expression</em> (e.g., <tt class="literal">SELECT MAX
(elevation) FROM mountains)</tt>.</p></dd>





<dt><b><tt class="literal">MIN(</tt>
<a name="INDEX-1097" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the smallest of the values in
<em class="replaceable">expression</em> (e.g., <tt class="literal">SELECT
MIN(level) FROM toxic_waste</tt>).</p></dd>





<dt><b><tt class="literal">STD(</tt>
<a name="INDEX-1098" />
<a name="INDEX-1099" /><em class="replaceable">expression</em><tt class="literal">)/STDDEV(</tt><em class="replaceable">expression</em><em class="emphasis">)</em></b></dt>
<dd><p>Returns the standard deviation of the values in
<em class="replaceable">expression</em> (e.g., <tt class="literal">SELECT
STDDEV(points) FROM data)</tt>.</p></dd>





<dt><b><tt class="literal">SUM(</tt>
<a name="INDEX-1100" /><em class="replaceable">expression</em><tt class="literal">)</tt></b></dt>
<dd><p>Returns the sum of the values in
<em class="replaceable">expression</em> (e.g., <tt class="literal">SELECT
SUM(calories) FROM daily_diet</tt>).</p></dd>

</dl>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Find all names in the 'people' table where the 'state' field is 'MI'.
SELECT name FROM people WHERE state='MI'
# Display all of the data in the 'mytable' table.
SELECT * FROM mytable<a name="INDEX-1101" /></pre></blockquote>





</div>

<a name="INDEX-1102" /><a name="INDEX-1103" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>SET</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
SET OPTION SQL_OPTION=<em class="replaceable">value</em>
</pre></td><td align="right" /></tr></table><p>Defines an option for the current session. Values set by this
statement are not in effect anywhere but the current connection, and
they disappear at the end of the connection. The following options
are current supported:</p><dl>
<dt><b><tt class="literal">CHARACTER SET </tt><em class="replaceable">charsetname</em><em class="emphasis"> or </em><tt class="literal">DEFAULT</tt></b></dt>
<dd><p>Changes the character set used by MySQL. Currently the only other
built-in character set is <tt class="literal">cp1251_koi8, which</tt>
refers to the Russian alphabet. Specifying <tt class="literal">DEFAULT</tt>
will return to the original character set.</p></dd>





<dt><b><tt class="literal">LAST_INSERT_ID</tt><em class="emphasis">=</em><em class="replaceable">number</em></b></dt>
<dd><p>Determines the value returned from the
<tt class="literal">LAST_INSERT_ID()</tt> function.</p></dd>





<dt><b><tt class="literal">SQL_BIG_SELECTS</tt><em class="emphasis">=0 or 1</em></b></dt>
<dd><p>Determines the behavior when a large <tt class="literal">SELECT</tt> query
is encountered. If set to 1, MySQL will abort the query with an error
if the query would probably take too long to compute. MySQL decides
that a query will take too long it will have to examine more rows
than the value of the <tt class="literal">max_join_size</tt> server
variable. The default value is 0, which allows all queries.</p></dd>





<dt><b><tt class="literal">SQL_BIG_TABLES</tt><em class="emphasis">=0 or 1</em></b></dt>
<dd><p>Determines the behavior of temporary tables (usually generated when
dealing with large data sets). If this value is 1, temporary tables
are stored on disk, which is slower than primary memory but can
prevent errors on systems with low memory. The default value is 0,
which stores temporary tables in RAM.</p></dd>





<dt><b><tt class="literal">SQL_LOG_OFF</tt><em class="emphasis">=0 or 1</em></b></dt>
<dd><p>When set to 1, turns off standard logging for the current session.
This does not stop logging to the ISAM log or the update log. You
must have <tt class="literal">PROCESS LIST</tt> privileges to use this
option. The default is 0, which enables regular logging. <a href="ch04_01.htm">Chapter 4, "MySQL"</a>, describes the various MySQL logging schemes.</p></dd>





<dt><b><tt class="literal">SQL_SELECT_LIMIT</tt><em class="emphasis">=</em><em class="replaceable">number</em></b></dt>
<dd><p>The maximum number of records returned by a <tt class="literal">SELECT</tt>
query. A <tt class="literal">LIMIT</tt> modifier in a
<tt class="literal">SELECT</tt> statement overrides this value. The default
behavior is to return all records.</p></dd>





<dt><b><tt class="literal">SQL_UPDATE_LOG</tt><em class="emphasis">=0 or 1</em></b></dt>
<dd><p>When set to 0, turns off update logging for the current session. This
does not affect standard logging or ISAM logging. You must have
<tt class="literal">PROCESS LIST</tt> privileges to use this option. The
default is 1, which enables regular logging.</p></dd>





<dt><b><tt class="literal">TIMESTAMP</tt><em class="emphasis">=</em><em class="replaceable">value</em><em class="emphasis"> or </em><tt class="literal">DEFAULT</tt></b></dt>
<dd><p>Determines the time used for the session. This time is logged to the
update log and will be used if data is restored from the log.
Specifying <tt class="literal">DEFAULT</tt> will return to the system time.</p></dd>

</dl>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Turn off logging for the current connection.
SET OPTION SQL_LOG_OFF=1<a name="INDEX-1103" /></pre></blockquote>





</div>

<a name="INDEX-1104" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>SHOW</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
SHOW DATABASES [LIKE <em class="replaceable">clause</em>]
SHOW KEYS FROM <em class="replaceable">table</em> [FROM <em class="replaceable">database</em>]
SHOW INDEX FROM <em class="replaceable">table</em> [FROM <em class="replaceable">database</em>]
SHOW TABLES [FROM <em class="replaceable">database</em>] [LIKE <em class="replaceable">clause</em>]
SHOW COLUMNS FROM <em class="replaceable">table</em> [FROM <em class="replaceable">database</em>] [LIKE <em class="replaceable">clause</em>]
SHOW FIELDS FROM <em class="replaceable">table</em> [FROM <em class="replaceable">database</em>] [LIKE <em class="replaceable">clause</em>]
SHOW STATUS
SHOW TABLE STATUS [FROM <em class="replaceable">database</em>] [LIKE <em class="replaceable">clause</em>]
SHOW VARIABLES [LIKE <em class="replaceable">clause</em>]
</pre></td><td align="right" /></tr></table><p>Displays various information about the MySQL system. This statement
can be used to examine the status or structure of almost any part of
MySQL.</p>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Show the available databases
SHOW DATABASES
# Display information on the indexes on table 'bigdata'
SHOW KEYS FROM bigdata
# Display information on the indexes on table 'bigdata' in the database 'mydata'
SHOW INDEX FROM bigdata FROM mydata
# Show the tables available from the database 'mydata' that begin with the
# letter 'z'
SHOW TABLES FROM mydata LIKE 'z%'
# Display information about the columns on the table 'skates'
SHOW COLUMNS FROM stakes
# Display information about the columns on the table 'people' that end with
# '_name'
SHOW FIELDS FROM people LIKE '%\_name'
# Show server status information.
SHOW STATUS
# Display server variables
SHOW VARIABLES</pre></blockquote>





</div>

<a name="INDEX-1105" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>UNLOCK</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>UNLOCK TABLES
</pre></td><td align="right" /></tr></table><p>Unlocks all tables that were locked using the <tt class="literal">LOCK</tt>
statement during the current connection.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Unlock all tables
UNLOCK TABLES</pre></blockquote>





</div>

<a name="INDEX-1106" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>UPDATE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
UPDATE <em class="replaceable">table</em> SET <em class="replaceable">column</em>=<em class="replaceable">value</em>, ... [WHERE <em class="replaceable">clause</em>]
</pre></td><td align="right" /></tr></table><p>Alters data within a table. This statement is used to change actual
data within a table without altering the table itself. You may use
the name of a column as a value when setting a new value. For
example, <tt class="literal">UPDATE health SET miles_ran=miles_ran+5</tt>
would add five to the current value of the
<tt class="literal">miles_ran</tt> column. The statement returns the number
of rows changed.</p><p>You must have <tt class="literal">UPDATE</tt> privileges to use this
statement.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Change the name 'John Deo' to 'John Doe' everywhere in the people table.
UPDATE people SET name='John Doe' WHERE name='John Deo'</pre></blockquote>





</div>

<a name="INDEX-1107" /><a name="INDEX-1108" /><a name="INDEX-1109" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>USE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>USE database
</pre></td><td align="right" /></tr></table><p>Selects the default database. The database given in this statement is
used as the default database for subsequent queries. Other databases
may still be explicitly specified using the
<tt class="literal">database.table.column</tt> notation.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Make db1 the default database.<a name="INDEX-1108" />
<a name="INDEX-1109" />
USE db1</pre></blockquote>





</div>
</div>




































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="part3.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch15_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">III. Reference</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">15.2. mSQL SQL
</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
