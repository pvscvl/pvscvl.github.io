<?label 2. Database Design?><html><head><title>Database Design (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 2. Database Design</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch02_01.htm">Database Design</a><br />
<a href="ch02_02.htm">Normalization</a><br />
<a href="ch02_03.htm">A Logical Data Modeling Methodology</a><br />
<a href="ch02_04.htm">Physical Database Design</a><br /></p></div>










<p>Once you install your DBMS software on your computer, it can be very
tempting to just jump right into creating a database without much
thought or planning. As with any software development, this kind of
ad hoc approach works with only the simplest of problems. If you
expect your database to support any kind of complexity, some planning
and design will definitely save you time in the long run. You will
need to take a look at what details are important to good database
design.</p>


































<div class="sect1"><a name="ch02-32507" />
<h2 class="sect1">2.1. Database Design</h2>





<p>
<a name="INDEX-31" />Suppose
you have a large collection of compact discs and you want to create a
database to track them. The first step is to determine what the data
that you are going to store is about. One good way to start is to
think about why you want to store the data in the first place. In our
case, we most likely want to be able to look up CDs by artist, title,
and song. Since we want to look up those items, we know they must be
included in the database. In addition, it is often useful to simply
list items that should be tracked. One possible list might include:
CD title, record label, band name, song title. As a starting point,
we will store the data in the table shown in <a href="ch02_01.htm">Table 2-1</a>.</p>





<a name="ch02-27352" /><h4 class="objtitle">Table 2-1. A CD Database Made Up of a Single Table </h4><table border="1">





<tr>
<th>
<p>Band Name</p></th>
<th>
<p>CD Title</p></th>
<th>
<p>Record Label</p></th>
<th>
<p>Songs</p></th>
</tr>










<tr>
<td>
<p>Stevie Wonder</p></td>
<td>
<p>Talking Book</p></td>
<td>
<p>Motown</p></td>
<td>
<p>You Are the Sunshine of My Life, Maybe Your Baby, Superstition, . . .</p></td>
</tr>




<tr>
<td>
<p>Miles Davis Quintet</p></td>
<td>
<p>Miles Smiles</p></td>
<td>
<p>Columbia</p></td>
<td>
<p>Orbits, Circle, . . .</p></td>
</tr>




<tr>
<td>
<p>Wayne Shorter</p></td>
<td>
<p>Speak No Evil</p></td>
<td>
<p>Blue Note</p></td>
<td>
<p>Witch Hunt, Fee-Fi-Fo-Fum</p></td>
</tr>




<tr>
<td>
<p>Herbie Hancock</p></td>
<td>
<p>Headhunters</p></td>
<td>
<p>Columbia</p></td>
<td>
<p>Man, . . .</p></td>
</tr>




<tr>
<td>
<p>Herbie Hancock</p></td>
<td>
<p>Maiden Voyage</p></td>
<td>
<p>Blue Note</p></td>
<td>
<p>Maiden Voyage</p></td>
</tr>





</table>





<p>(For brevity's sake, we have left out most of the songs.) At
first glance, this table seems like it will meet our needs since we
are storing all of the data we need. Upon closer inspection, however,
we find several problems. Take the example of Herbie Hancock.
"Band Name" is repeated twice: once for each CD. This
repetition is a problem for several reasons. First, when entering
data in the database, we end up typing the same name over and over.
Second, and more important, if any of the data changes, we have to
update it in multiple places. For example, what if
"Herbie" were misspelled? We would have to update the
data in each of the two rows. The same problem would occur if the
name Herbie Hancock changes in the future (&agrave; la Jefferson
Airplane or John Cougar). As we add more Herbie Hancock CDs to our
collection, we add to the amount of effort required to maintain data
consistency.</p>





<p>Another problem with the single CD table lies in the way it stores
songs. We are storing them in the CD table as a list of songs in a
single column. We will run into all sorts of problems if we want to
use this data meaningfully. Imagine having to enter and maintain that
list. And what if we want to store the length of the songs as well?
What if we want to perform a search by song title? It quickly becomes
clear that storing the songs in this fashion is undesirable.</p>





<p>This is where database design comes into play. One of the main
purposes of database design is to eliminate redundancy from the
database. To accomplish this task, we use a technique called
<em class="emphasis">normalization</em>. Before we start with normalization, let's start
with some fundamental relational database concepts. A data model is a
diagram that illustrates your database design. It is made up of three
main elements: entities, attributes, and relationships. For now,
let's focus on entities and attributes; we will take a look at
relationships later.</p>





<a name="ch02-1-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.1. Database Entities</h3>





<p>
<a name="INDEX-32" />An entity
is a thing or object of importance about which data must be captured.
All "things" are not entities, only those things about
which you need to capture information. Information about an entity is
captured in the form of attributes and/or relationships. If something
is a candidate for being an entity and it has no attributes or
relationships, it is not really an entity. Database entities appear
in a data model as a box with a title. The title is the name of the
entity.<a name="INDEX-33" /></p>
</div>
















<a name="ch02-2-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.2. Entity Attributes</h3>





<p>
<a name="INDEX-34" />An attribute describes information about
an entity that must be captured. Each entity has zero or more
attributes that describe it, and each attribute describes exactly one
entity. Each entity instance (row in the table) has exactly one
value, possibly <tt class="literal">NULL</tt>, for each of its attributes.
An attribute value can be numeric, a character string, date, time, or
some other basic data value. In the first step of database design,
logical data modeling, we do not worry about how the attributes will
be stored.<a name="INDEX-35" /></p>





<a name="ch02-3-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p><tt class="literal">NULL</tt> provides the basis for the problem of dealing
with missing information. It is specifically used for the case in
which you lack a certain piece of information. As an example,
consider the situation where a CD does not list the song lengths of
each of its tracks. Each song has a length, but you cannot tell from
the case what that length is. You do not want to store the length as
zero, since that would be incorrect. Instead, you store the length as
<tt class="literal">NULL</tt>. If you are thinking you could store it as
zero and use zero to mean "unknown", you are falling into
one of the same traps that led to one of the Y2K problems. Not only
did old systems store years as two digits, but they often gave a
special meaning to 9-9-99.<a name="INDEX-36" /></p>
</blockquote>





<p>Our example database refers to a number of things: the CD, the CD
title, the band name, the songs, and the record label. Which of these
are entities and which are attributes?<a name="INDEX-37" /></p>
</div>
















<a name="ch02-4-fm2xml" /><div class="sect2">
<h3 class="sect2">2.1.3. Data Model</h3>





<p>
<a name="INDEX-38" />Notice that
we capture several pieces of data (CD title, band name, etc.) about
each CD, and we absolutely cannot describe a CD without those items.
CD is therefore one of those things we want to capture data about and
is likely an entity. To start a data model, we will diagram it as an
entity. <a href="ch02_01.htm">Figure 2-1</a> shows our sole entity in a data
model.</p>





<a name="ch02-28897" /><div class="figure"><img width="502" src="figs/MSQL.0201.gif" height="139" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. The CD entity in a data model</h4>

<p>By common entity naming conventions, an entity name must be singular.
We therefore call the table where we store CDs "CD" and
not "CDs." We use this convention because each entity
names an instance. For example, the "San Francisco 49ers"
is an instance of "Football Team," not "Football
Teams."</p>





<p>At first glance, it appears that the rest of the database describes a
CD. This would indicate that they are attributes of CD. <a href="ch02_01.htm">Figure 2-2</a> adds them to the <tt class="literal">CD</tt> entity
in <a href="ch02_01.htm">Figure 2-1</a>. In a data model, attributes appear
as names listed in their entity's box.</p>





<a name="ch02-49504" /><div class="figure"><img width="502" src="figs/MSQL.0202.gif" height="132" alt="Figure 2-2" /></div><h4 class="objtitle">Figure 2-2. The CD entity with its attributes</h4>

<p>This diagram is simple, but we are not done yet. In fact, we have
only just begun. Earlier, we discussed how the purpose of data
modeling is to eliminate redundancy using a technique called
normalization. We have a nice diagram for our database, but we have
not gotten rid of the redundancy as we set out to do. It is now time
to normalize our database.<a name="INDEX-39" /></p>
</div>
</div>








































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch02_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">1.4. MySQL and mSQL</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">2.2. Normalization</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>