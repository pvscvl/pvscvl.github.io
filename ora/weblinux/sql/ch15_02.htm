<?label 15.2. mSQL SQL
?><html><head><title>mSQL SQL
 (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch16_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<a name="INDEX-1110" /><a name="INDEX-1111" /><h2 class="sect1">15.2. mSQL SQL
</h2>






<a name="INDEX-1112" /><a name="INDEX-1113" /><a name="INDEX-1114" /><a name="INDEX-1115" /><a name="INDEX-1116" /><a name="INDEX-1117" /><a name="INDEX-1118" /><a name="INDEX-1119" /><a name="INDEX-1120" /><a name="INDEX-1121" /><a name="INDEX-1122" /><a name="INDEX-1123" /><a name="INDEX-1124" /><a name="INDEX-1125" /><a name="INDEX-1126" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>CREATE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
CREATE TABLE <em class="replaceable">name</em> <em class="replaceable">field_name</em> <em class="replaceable">field_type</em>, [<em class="replaceable">field2</em> <em class="replaceable">type2</em>, ...]
CREATE SEQUENCE ON <em class="replaceable">table</em> [STEP <em class="replaceable">value</em>] [VALUE <em class="replaceable">value</em>]
CREATE INDEX <em class="replaceable">name</em> ON <em class="replaceable">table</em> ( <em class="replaceable">column</em>, ... )
</pre></td><td align="right" /></tr></table><p>Creates new database elements (or entirely new databases). This
statement is used to create tables, indices, and sequences.</p><p>The <tt class="literal">CREATE SEQUENCE</tt>
<a name="INDEX-1113" /> statement adds a sequence to a
table. A sequence is simply a value associated with a table that the
mSQL server keeps track of. Most commonly, a sequence is used to
generate unique identification numbers for tables. The value of the
sequence is incremented every time the sequence value is read. The
<tt class="literal">STEP</tt> modifier determines how much the sequence
value is increased each time. The <tt class="literal">VALUE</tt> modifier
gives the initial value of the sequence.</p><p>The <tt class="literal">CREATE INDEX</tt>
<a name="INDEX-1114" /> statement defines an index for the
table. The mSQL system supports indexes that contain more than one
field. You must provide a name for the index, although it need not be
meaningful because it is rarely needed by the end user.</p><p>The <tt class="literal">CREATE TABLE</tt>
<a name="INDEX-1115" /> statement defines the structure of a
table within the database. This statement is how all mSQL tables are
created. The syntax of the create definition is the name of a field
followed by the type of the field, followed by any modifiers (e.g.,
<tt class="literal">name char(30) not null</tt>). The following
<a name="INDEX-1116" />
<a name="INDEX-1117" />datatypes
are supported by mSQL:</p><dl>
<dt><b><tt class="literal">CHAR(</tt>
<a name="INDEX-1118" /><em class="replaceable">length</em><tt class="literal">)</tt></b></dt>
<dd><p>Fixed length character value. No values can be greater than the given
length.</p></dd>





<dt><b><tt class="literal">DATE</tt>
<a name="INDEX-1119" /></b></dt>
<dd><p>Standard date type.</p></dd>





<dt><b><tt class="literal">INT</tt>
<a name="INDEX-1120" /></b></dt>
<dd><p>Standard 4-byte integer. Range is -2147483646 to 2147483647.</p></dd>





<dt><b><tt class="literal">MONEY</tt>
<a name="INDEX-1121" /></b></dt>
<dd><p>Monetary type suitable for accurately storing money values. This type
allows for storing decimal values (like 19.99) without the
imprecision of using a floating point type.</p></dd>





<dt><b><tt class="literal">REAL</tt>
<a name="INDEX-1122" /></b></dt>
<dd><p>Standard 8-byte floating point value. Minimum nonzero values are +/-
4.94E-324 and maximum are +/- 1.79E+308.</p></dd>





<dt><b><tt class="literal">TEXT(</tt>
<a name="INDEX-1123" /><em class="replaceable">length</em><tt class="literal">)</tt></b></dt>
<dd><p>Variable length character value. The given length is the maximum
value for most of the data, but longer data can be entered.</p></dd>





<dt><b><tt class="literal">TIME</tt>
<a name="INDEX-1124" /></b></dt>
<dd><p>Standard time type.</p></dd>





<dt><b><tt class="literal">UINT</tt>
<a name="INDEX-1125" /></b></dt>
<dd><p>Standard 4-byte unsigned integer. Range is 0 to 4294967295.</p></dd>

</dl><p>In addition to the main types, several modifiers can also be used to
qualify the type:</p><dl>
<dt><b><em class="replaceable">length</em></b></dt>
<dd><p>This value is the maximum length of a character type. For
<tt class="literal">CHAR</tt>, this is the absolute maximum. For
<tt class="literal">TEXT</tt> this is only an approximate maximum that
should apply to most of the data. Longer data can be inserted into a
<tt class="literal">TEXT</tt> field, but it will make the table slower.</p></dd>





<dt><b><tt class="literal">NOT NULL</tt>
<a name="INDEX-1126" /></b></dt>
<dd><p>Specifies that the field cannot contain a null value. Attempting to
insert a null value into such a field will result in an error.</p></dd>

</dl>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code">CREATE TABLE emp_data ( id INT, name CHAR(50) )
# Add a sequence to the table 'checks' with the initial value '1000' and the
# default step of 1.
CREATE SEQUENCE ON checks VALUE 1000
# Create an index on the table 'music' that covers the fields 'artist',
# 'publisher', and 'title'.
CREATE INDEX idx1 ON music ( artist, publisher, title )</pre></blockquote>





</div>

<a name="INDEX-1127" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DELETE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>DELETE FROM <em class="replaceable">table</em> [WHERE <em class="replaceable">clause</em>]
</pre></td><td align="right" /></tr></table><p>Deletes rows from a table. When used without a
<tt class="literal">WHERE</tt> clause, this will erase the entire table and
recreate it as an empty table. With a clause, it will delete the rows
that match the condition of the clause.</p>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Erase all of the data (but not the table itself) for the table 'olddata'.
DELETE FROM olddata
# Erase all records in the 'sales' table where the 'year' field is '1995'.
DELETE FROM sales WHERE year=1995</pre></blockquote>





</div>

<a name="INDEX-1128" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DROP</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
DROP INDEX <em class="replaceable">name</em>
DROP TABLE <em class="replaceable">name</em>
DROP SEQUENCE FROM <em class="replaceable">table</em>
</pre></td><td align="right" /></tr></table><p>Permanently remove a table, index, or sequence from the mSQL system.</p><a name="ch15-52-fm2xml" /><blockquote><h4 class="objtitle">WARNING</h4>

<p><tt class="literal">DROP</tt> is by far the most dangerous SQL statement.
If you have drop privileges, you may permanently erase a table or
even an entire database. This is done without warning or
confirmation. The only way to undo a <tt class="literal">DROP</tt> is to
restore the table or database from backups. The lessons to be learned
here are (1) always keep backups and (2) don't use
<tt class="literal">DROP</tt> unless you are really sure.</p>




</blockquote>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Delete the tables 'oh_no'
DROP TABLE oh_no
# Remove the named index 'my_index'
DROP INDEX my_index
# Erase the sequence defined on the table 'counter'. Another sequence can be
# recreated at any time using the 'CREATE SEQUENCE' statement.
DROP SEQUENCE FROM counter</pre></blockquote>





</div>

<a name="INDEX-1129" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>INSERT</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
INSERT INTO <em class="replaceable">table</em> [ (<em class="replaceable">column</em>, ...) ] VALUES ( <em class="replaceable">values</em> )
</pre></td><td align="right" /></tr></table><p>Inserts data into a table. This statement inserts the given values
into the given columns. Columns in the table that are not given
values are set to <tt class="literal">NULL</tt>. If you leave out the list
of columns, the number of value given must exactly match the number
of columns in the table.</p>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Insert a record into the 'people' table.
INSERT INTO people ( name, rank, serial_number ) VALUES ( 'Bob Smith',
    'Captain', 12345 )</pre></blockquote>





</div>

<a name="INDEX-1130" /><a name="INDEX-1131" /><a name="INDEX-1132" /><a name="INDEX-1133" /><a name="INDEX-1134" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>SELECT</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
SELECT [DISTINCT] <em class="replaceable">columns</em> FROM <em class="replaceable">table</em> [<em class="replaceable">clause</em>]
</pre></td><td align="right" /></tr></table><p>Retrieves data from a database. The <tt class="literal">SELECT</tt>
statement is the primary method of reading data from database tables.</p><p>If you specify more than one table, mSQL will automatically join the
tables so that you can compare values between the tables.</p><p>If the <tt class="literal">DISTINCT</tt> keyword is present, only one row
of data will be output for every group of rows that is identical.</p><p>The column names can be specified as <tt class="literal">column</tt> or
<tt class="literal">table.column</tt>. The longer form is necessary only to
disambiguate columns with the same name, but can be used at any time
(e.g., <tt class="literal">SELECT name FROM people; SELECT people.name FROM
people)</tt>.</p><p>The list of tables to join are specified as <tt class="literal">Table1, Table2,
Table3, ...</tt> The tables are joined in the manner that mSQL
deems most efficient. Table names can also be aliased (e.g.,
<tt class="literal">SELECT t1.name, t2.address FROM long_table_name=t1,
longer_table_name=t2</tt>).</p><p>If no clause is provided, <tt class="literal">SELECT</tt> returns all of
the data in the selected table(s).</p><p>The search clause can contain any of the following substatements:</p><dl>
<dt><b><tt class="literal">WHERE</tt>
<a name="INDEX-1131" /> statement</b></dt>
<dd><p>The <tt class="literal">WHERE</tt> statement construct is the most common
way of searching for data in SQL. The statement is a comparison of
two or more values. Named values (such as column names and aliases)
and literal numbers and strings can be used in the statement. The
following operators are supported:<a name="INDEX-1132" /></p>






<dl>
<dt><b><tt class="literal">AND</tt></b></dt>
<dd><p>Performs a logical <tt class="literal">AND</tt> (returns 0 if any of the arguments are 0, otherwise returns 1)</p></dd>





<dt><b><tt class="literal">OR</tt></b></dt>
<dd><p>Performs a logical <tt class="literal">OR</tt> (returns 1 if any of the arguments are not 0, otherwise returns 0)</p></dd>





<dt><b><tt class="literal">()</tt></b></dt>
<dd><p>Parentheses are used to group operators in order to force precedence.</p></dd>





<dt><b>=</b></dt>
<dd><p>Returns 1 if the two values are equal, otherwise returns 0. MySQL automatically converts between types when comparing values.</p></dd>





<dt><b>&lt;&gt;</b></dt>
<dd><p>Returns 1 if the two values are not equal, otherwise returns 0.</p></dd>





<dt><b>&lt;=</b></dt>
<dd><p>Returns 1 if the left value is less than or equal to the right value, otherwise returns 0.</p></dd>





<dt><b>&lt;</b></dt>
<dd><p>Returns 1 if the left value is less than the right value, otherwise returns 0.</p></dd>





<dt><b>&gt;=</b></dt>
<dd><p>Returns 1 if the left value is greater than or equal to the right value, otherwise returns 0.</p></dd>





<dt><b>&gt;</b></dt>
<dd><p>Returns 1 if the left value is greater than the right value, otherwise returns 0.</p></dd>

</dl></dd>





<dt><b><tt class="literal">ORDER BY</tt> <em class="replaceable">column</em> <em class="emphasis">[</em><tt class="literal">DESC</tt><em class="emphasis">][,</em> <em class="replaceable">column2</em> <em class="emphasis">[</em><tt class="literal">DESC</tt><em class="emphasis">],</em><em class="replaceable">...</em><em class="emphasis">]</em></b></dt>
<dd><p>Sorts the returned data using the given column(s). If
<tt class="literal">DESC</tt> is present, the data is sorted in descending
order, otherwise ascending order is used (e.g., <tt class="literal">SELECT name,
age FROM people ORDER BY age DESC</tt>).<a name="INDEX-1133" /></p></dd>





<dt><b><em class="replaceable">value1 </em><tt class="literal">LIKE</tt><em class="replaceable"> value2</em></b></dt>
<dd><p>Compares <em class="replaceable">value1</em> to
<em class="replaceable">value2</em> and returns 1 if they match and
otherwise. The right-hand value can contain the wildcard
"%" which matches any number of characters (including 0)
and `_' which matches exactly one character. This is
probably the single most used comparison in SQL. The most common
usage is to compare a field value with a literal containing a
wildcard (e.g., <tt class="literal">SELECT name FROM people WHERE name LIKE
</tt>'<tt class="literal">B%</tt>'<tt class="literal">)</tt>.</p></dd>





<dt><b><em class="replaceable">value1 </em><tt class="literal">RLIKE</tt><em class="replaceable"> value2</em></b></dt>
<dd><p>Compares <em class="replaceable">value1</em> to
<em class="replaceable">value2</em> using the extended regular
expression syntax and returns 1 if they match and
otherwise. The right hand value can contain full Unix regular
expression wildcards and constructs (e.g., <tt class="literal">SELECT name FROM
people WHERE name RLIKE
</tt>'<tt class="literal">^B.*</tt>'<tt class="literal">)</tt>.</p></dd>





<dt><b><em class="replaceable">value1 </em><tt class="literal">CLIKE</tt><em class="replaceable"> value2</em></b></dt>
<dd><p>Compares<tt class="literal">
</tt><em class="replaceable">value1</em><tt class="literal">
</tt>to<tt class="literal">
</tt><em class="replaceable">value2</em><tt class="literal"> </tt>using
a case insensitive version of the<tt class="literal"> LIKE </tt>operator
(e.g.,<tt class="literal"> SELECT name FROM people WHERE name CLIKE
</tt>'<tt class="literal">b%</tt>').</p>





<p>The <tt class="literal">WHERE</tt> clause returns any of the expression
values that are not
or <tt class="literal">NULL</tt>. Therefore, <tt class="literal">SELECT age FROM
people WHERE age&gt;10</tt> will return only those ages that are
greater than 10.</p></dd>

</dl>
<h4 class="refsect1">Examples</h4>





<blockquote><pre class="code"># Find all names in the 'people' table where the 'state' field is 'MI'.
SELECT name FROM people WHERE state='MI'
# Display all of the data in the 'mytable' table.
SELECT * FROM mytable<a name="INDEX-1134" /></pre></blockquote>





</div>

<a name="INDEX-1135" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>UPDATE</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
UPDATE <em class="replaceable">table</em> SET <em class="replaceable">column</em>=<em class="replaceable">value</em>, ... [WHERE <em class="replaceable">clause</em>]
</pre></td><td align="right" /></tr></table><p>Alters data within a table. This statement is used to change actual
data within a table without altering the table itself.</p>
<h4 class="refsect1">Example</h4>





<blockquote><pre class="code"># Change the name 'John Deo' to 'John Doe' everywhere in the people table.
UPDATE people SET name='John Doe' WHERE name='John Deo'</pre></blockquote>





</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch15_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch16_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">15. SQL Reference</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">16. MySQL and mSQL System Variables</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>