<?label 6.4. Indices?><html><head><title>Indices (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch06_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch06_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">6.4. Indices</h2>





<p>
<a name="INDEX-510" />
<a name="INDEX-511" />While MySQL
and mSQL both have greater performance than any of the larger
database servers, some problems still call for careful database
design. For instance, if we had a table with millions of rows of
data, a search for a specific row would take a long time. As we
discussed in <a href="ch02_01.htm">Chapter 2, "Database Design"</a>, most database engines
enable you to help it in these searches through a tool called an
index.</p>





<p>Indices help the database store data in a way that makes for quicker
searches. Unfortunately, you sacrifice disk space and modification
speed for the benefit of quicker searches. The most efficient use of
indices is to create an index for columns on which you tend to search
the most. MySQL and mSQL support a common syntax for index creation:</p>





<blockquote><pre class="code">CREATE INDEX <em class="replaceable">index_name</em> ON <em class="replaceable">tablename</em> (<em class="replaceable">column1</em>,
                                      <em class="replaceable">column2</em>,
                                      <em class="replaceable">...</em>,
                                      <em class="replaceable">columnN</em>)</pre></blockquote>





<p>MySQL also lets you create an index at the same time you create a
table using the following syntax:</p>





<blockquote><pre class="code">CREATE TABLE <em class="replaceable">materials</em> (<em class="replaceable">id</em>         INT      NOT NULL,
                        <em class="replaceable">name</em>       CHAR(50) NOT NULL,
                        <em class="replaceable">resistance</em> INT,
                        <em class="replaceable">melting_pt</em> REAL,
                        INDEX <em class="replaceable">index1</em> (<em class="replaceable">id</em>, <em class="replaceable">name</em>),
                        UNIQUE INDEX <em class="replaceable">index2</em> (<em class="replaceable">name</em>))</pre></blockquote>





<p>The previous example creates two indices for the table. The first
index -- named <tt class="literal">index1</tt> -- consists of both
the <tt class="literal">id</tt> and <tt class="literal">name</tt> fields. The
second index includes only the <tt class="literal">name</tt> field and
specifies that values for the <tt class="literal">name</tt> field must
always be unique. If you try to insert a field with a
<tt class="literal">name</tt> held by a row already in the database, the
insert will fail. All fields declared in a unique index must be
declared as being <tt class="literal">NOT NULL</tt>
<a name="INDEX-512" />.</p>





<p>Even though we created an index for <tt class="literal">name</tt> by
itself, we did not create an index for just <tt class="literal">id</tt>. If
we did want such an index, we would not need to create it -- it is
already there. When an index contains more than one column (for
example: <tt class="literal">name</tt>, <tt class="literal">rank</tt>, and
<tt class="literal">serial_number</tt>), MySQL reads the columns in order
from left to right. Because of the structure of the index MySQL uses,
any subset of the columns from left to right are automatically
created as indices within the "main" index. For example,
<tt class="literal">name</tt> by itself and <tt class="literal">name</tt> and
<tt class="literal">rank</tt> together are both "free" indices
created when you create the index <tt class="literal">name</tt>,
<tt class="literal">rank</tt>, <tt class="literal">serial_number</tt>. An index
of <tt class="literal">rank</tt> by itself or <tt class="literal">name</tt> and
<tt class="literal">serial_number</tt> together, however, is not created
unless you explicitly create it yourself.</p>





<p>MySQL also supports the ANSI SQL semantics of a special index called
a primary key. In MySQL, a primary key is a unique key with the name
<tt class="literal">PRIMARY</tt>. By calling a column a primary key at
creation, you are naming it as a unique index that will support table
joins. The following example creates a <tt class="literal">cities</tt>
table with a primary key of <tt class="literal">id</tt>.</p>





<blockquote><pre class="code">CREATE TABLE <em class="replaceable">cities</em> (<em class="replaceable">id</em>      INT  NOT NULL PRIMARY KEY,
                     <em class="replaceable">name</em>    VARCHAR(100),
                     <em class="replaceable">pop</em>     MEDIUMINT,
                     <em class="replaceable">founded</em> DATE)</pre></blockquote>





<p>Before you create a table, you should determine which fields, if any,
should be keys. As we mentioned above, any fields which will be
supporting joins are good candidates for primary keys. See <a href="ch02_01.htm">Chapter 2, "Database Design"</a> for a detailed discussion on how to design
your tables with good primary keys.</p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch06_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch06_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">6.3. SQL Datatypes</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">6.5. Sequences and Auto-Incrementing</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>