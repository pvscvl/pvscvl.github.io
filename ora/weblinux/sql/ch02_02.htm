<?label 2.2. Normalization?><html><head><title>Normalization (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">2.2. Normalization</h2>





<p>
<a name="INDEX-40" />E.F.
Codd<a name="INDEX-41" />, then a
researcher for IBM, first presented the concept of database
normalization in several important papers written in the 1970s. The
aim of normalization remains the same today: to eradicate certain
undesirable characteristics from a database design. Specifically, the
goal is to remove certain kinds of data redundancy and therefore
avoid update anomalies. Update anomalies are difficulties with the
insert, update, and delete operations on a database due to the data
structure. Normalization additionally aids in the production of a
design that is a high-quality representation of the real world; thus
normalization increases the clarity of the data model.</p>





<p>As an example, say we misspelled "Herbie Hancock" in our
database and we want to update it. We would have to visit each CD by
Herbie Hancock and fix the artist's name. If the updates are
controlled by an application which enables us to edit only one record
at a time, we end up having to edit many rows. It would be much more
desirable to have the name "Herbie Hancock" stored only
once so we have to maintain it in just one place.</p>





<a name="ch02-5-fm2xml" /><div class="sect2">
<a name="INDEX-42" /><h3 class="sect2">2.2.1. First Normal Form (1NF)</h3>





<p>
<a name="INDEX-43" />The general concept of
normalization is broken up into several "normal forms."
An entity is said to be in the first normal form when all attributes
are single-valued. To apply the first normal form to an entity, we
have to verify that each attribute in the entity has a single value
for each instance of the entity. If any attribute has repeating
values, it is not in 1NF.</p>





<p>A quick look back at our database reveals that we have repeating
values in the Songs attribute, so the <tt class="literal">CD</tt> is
clearly not in 1NF. To remedy this problem, an entity with repeating
values indicates that we have missed at least one other entity. One
way to discover other entities is to look at each attribute and ask
the question "What thing does this describe?"</p>





<p>What does <tt class="literal">Song</tt> describe? It lists the songs on the
CD. So <tt class="literal">Song</tt> is another "thing" that we
capture data about and is probably an entity. We will add it to our
diagram and give it a <tt class="literal">Song Name</tt> attribute. To
complete the <tt class="literal">Song</tt> entity, we need to ask if there
is more about a <tt class="literal">Song</tt> that we would like to
capture. We identified earlier song length as something we might want
to capture. <a href="ch02_02.htm">Figure 2-1</a> shows the new data model.</p>





<a name="ch02-11434" /><div class="figure"><img width="502" src="figs/MSQL.0203.gif" height="139" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. A data model with CD and Song entities</h4>

<p>Now that the <tt class="literal">Song Name</tt> and <tt class="literal">Song
Length</tt> are attributes in a <tt class="literal">Song</tt> entity,
we have a data model with two entities in 1NF. None of their
attributes contain multiple values. Unfortunately, we have not shown
any way of relating a <tt class="literal">CD</tt> to a
<tt class="literal">Song</tt>.<a name="INDEX-44" /></p>
</div>
















<a name="ch02-6-fm2xml" /><div class="sect2">
<h3 class="sect2">2.2.2. The Unique Identifier</h3>





<p>Before discussing relationships, we need to impose one more rule on entities. Each entity must have a unique identifier<a name="INDEX-45" />
<a name="INDEX-46" /> -- we'll call it the ID. An ID is an attribute of an entity that meets the following rules:</p>




<ul><li><p>It is unique across all instances of the entity.</p></li><li><p>It has a non-<tt class="literal">NULL</tt> value for each instance of the
entity, for the entire lifetime of the instance.</p></li><li><p>It has a value that never changes for the entire lifetime of the
instance.</p></li></ul>

<p>The ID is very important because it gives us a way to know which
instance of an entity we are dealing with. Identifier selection is
critical because it is also used to model relationships. If, after
you've selected an ID for an entity, you find that it
doesn't meet one of the above rules, this could affect your
entire data model.</p>





<p>Novice data modelers often make the mistake of choosing attributes
that should not be identifiers and making them identifiers. If, for
example, you have a <tt class="literal">Person</tt> entity, it might be
tempting to use the <tt class="literal">Name</tt> attribute as the
identifier because all people have a name and that name never
changes. But what if a person marries? What if the person decides to
legally change his name? What if you misspelled the name when you
first entered it? If any of these events causes a name change, the
third rule of identifiers is violated. Worse, is a name really ever
unique? Unless you can guarantee with 100% certainty that the
<tt class="literal">Name</tt> is unique, you will be violating the first
rule. Finally, you do know that all <tt class="literal">Person</tt>
instances have non-<tt class="literal">NULL</tt> names. But are you certain
that you will always know the name of a <tt class="literal">Person</tt>
when you first enter information about them in the database?
Depending on your application processes, you may not know the name of
a <tt class="literal">Person</tt> when a record is first created. The
lesson to be learned is that there are many problems with taking a
nonidentifying attribute and making it one.</p>





<p>The solution to the identifier problem is to invent an identifying
attribute that has no other meaning except to serve as an identifying
attribute. Because this attribute is invented and completely
unrelated to the entity, we have full control over it and guarantee
that it meets the rules of unique identifiers. <a href="ch02_02.htm">Figure 2-1</a> adds invented ID attributes to each of our
entities. A unique identifier is diagrammed as an underlined
attribute.</p>





<a name="ch02-13133" /><div class="figure"><img width="502" src="figs/MSQL.0204.gif" height="141" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. The CD and Song entities with their unique identifiers</h4>
</div>
















<a name="ch02-7-fm2xml" /><div class="sect2">
<h3 class="sect2">2.2.3. Relationships</h3>





<p>
<a name="INDEX-47" />
<a name="INDEX-48" />
<a name="INDEX-49" />The identifiers in our entities
enable us to model their relationships. A relationship describes a
binary association between two entities. A relationship may also
exist between an entity and itself. Such a relationship is called a
<em class="emphasis">recursive relationship</em>. Each entity within a relationship describes
and is described by the other. Each side of the relationship has two
components: a name and a degree.</p>





<p>Each side of the relationship has a name that describes the
relationship. Take two hypothetical entities, an
<tt class="literal">Employee</tt> and a <tt class="literal">Department</tt>. One
possible relationship between the two is that an
<tt class="literal">Employee</tt> is "assigned to" a
<tt class="literal">Department</tt>. That <tt class="literal">Department</tt> is
"responsible for" an <tt class="literal">Employee</tt>. The
<tt class="literal">Employee</tt> side of the relationship is thus named
"assigned to" and the <tt class="literal">Department</tt> side
"responsible for."</p>





<p>
<a name="INDEX-50" />
<a name="INDEX-51" />Degree,
also referred to as cardinality, states how many instances of the
describing entity must describe one instance of the described entity.
Degree is expressed using two different values: "one and only
one" (1) and "one or many" (M). An employee is
assigned to one department at a time, so <tt class="literal">Employee</tt>
has a one and only one relationship with
<tt class="literal">Department</tt>. In the other direction, a department
is responsible for many employees. We therefore say
<tt class="literal">Department</tt> has a "one or many"
relationship with <tt class="literal">Employee</tt>. As a result a
<tt class="literal">Department</tt> could have exactly one
<tt class="literal">Employee</tt>.</p>





<p>It is sometimes helpful to express a relationship verbally. One way
of doing this is to plug the various components of a direction of the
relationship into this formula:</p>





<blockquote class="simplelist">

<p><em class="emphasis">entity1</em> has [one and only one | one or many] <em class="emphasis">entity2</em></p>

</blockquote>





<p>Using this formula, <tt class="literal">Employee</tt> and
<tt class="literal">Department</tt> would be expressed like so:</p>





<blockquote class="simplelist">

<p>Each <tt class="literal">Employee</tt> must be assigned to one and only one <tt class="literal">Department</tt>.</p>

<p>Each <tt class="literal">Department</tt> may be responsible for one or many <tt class="literal">Employees</tt>.</p>

</blockquote>





<p>
<a name="INDEX-52" />We can use this
formula to describe the entities in our data model. A
<tt class="literal">CD</tt> contains one or many <tt class="literal">Songs</tt>
and a <tt class="literal">Song</tt> is contained on one and only one
<tt class="literal">CD</tt>. In our data model, this relationship can be
shown by drawing a line between the two entities. Degree is expressed
with a straight line for "one and only one" relationships
or "crows feet" for "one or many"
relationships. <a href="ch02_02.htm">Figure 2-1</a> illustrates these
conventions.</p>





<a name="ch02-10602" /><div class="figure"><img width="502" src="figs/MSQL.0205.gif" height="184" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. Anatomy of a relationship</h4>

<p>How does this apply to the relationship between
<tt class="literal">Song</tt> and <tt class="literal">CD</tt>? In reality, a
<tt class="literal">Song</tt> can be contained on many
<tt class="literal">CD</tt>s, but we ignore this for the purposes of this
example. <a href="ch02_02.htm">Figure 2-2</a> shows the data model with the
relationships in place.</p>





<a name="ch02-48917" /><div class="figure"><img width="502" src="figs/MSQL.0206.gif" height="275" alt="Figure 2-2" /></div><h4 class="objtitle">Figure 2-2. CD-Song relationship</h4>

<p>With these relationships firmly in place, we can go back to the
normalization process and improve upon the design. So far, we have
normalized repeating song values into a new entity and modeled the
relationship between it and the <tt class="literal">CD</tt>
entity.<a name="INDEX-53" /></p>
</div>
















<a name="ch02-8-fm2xml" /><div class="sect2">
<a name="INDEX-54" /><h3 class="sect2">2.2.4. Second Normal Form (2NF)</h3>





<p>
<a name="INDEX-55" />An entity is said to be in the
second normal form if it is already in 1NF and all nonidentifying
attributes are dependent on the entity's entire unique
identifier. If any attribute is not dependent entirely on the
entity's unique identifier, that attribute has been misplaced
and must be removed. Normalize these attributes either by finding the
entity where it belongs or by creating an additional entity where the
attribute should be placed.</p>





<p>In our example, "Herbie Hancock" is the <tt class="literal">Band
Name</tt> for two different CDs. This fact illustrates that
<tt class="literal">Band Name</tt> is not entirely dependent on <tt class="literal">CD
ID</tt>. This duplication is a problem because if, for example,
we had misspelled "Herbie Hancock," we would have to
update the value in multiple places. We thus have a sign that
<tt class="literal">Band Name</tt> should be part of a new entity with some
relationship to <tt class="literal">CD</tt>. As before, we resolve this
problem by asking the question: "What does a band name
describe"? It describes a band, or more generally, an artist.
Artist is yet another thing we are capturing data about and is
therefore probably an entity. We will add it to our diagram with
<tt class="literal">Band Name</tt> as an attribute. Since all artists may
not be bands, we will rename the attribute <tt class="literal">Artist
Name</tt>. <a href="ch02_02.htm">Figure 2-1</a> shows the new state of
the model.</p>





<a name="ch02-24127" /><div class="figure"><img width="502" src="figs/MSQL.0207.gif" height="284" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. The data model with the new Artist entity</h4>

<p>Of course, the relationships for the new Artist table are missing. We
know that each <tt class="literal">Artist</tt> has one or many
<tt class="literal">CD</tt>s. Each <tt class="literal">CD</tt> could have one or
many <tt class="literal">Artist</tt>s. We model this in <a href="ch02_02.htm">Figure 2-2</a>.</p>





<a name="ch02-35598" /><div class="figure"><img width="502" src="figs/MSQL.0208.gif" height="285" alt="Figure 2-2" /></div><h4 class="objtitle">Figure 2-2. The Artist relationships in the data model</h4>

<p>We originally had the <tt class="literal">Band Name</tt> attribute in the
<tt class="literal">CD</tt> entity. It thus seemed natural to make
<tt class="literal">Artist</tt> directly related to <tt class="literal">CD</tt>.
But is this really correct? On closer inspection, it would seem that
there should be a direct relationship between an
<tt class="literal">Artist</tt> and a <tt class="literal">Song</tt>. Each
<tt class="literal">Artist</tt> has one or more <tt class="literal">Song</tt>s.
Each <tt class="literal">Song</tt> is performed by one and only one
<tt class="literal">Artist</tt>. The true relationship appears in <a href="ch02_02.htm">Figure 2-3</a>.</p>





<a name="ch02-34982" /><div class="figure"><img width="502" src="figs/MSQL.0209.gif" height="139" alt="Figure 2-3" /></div><h4 class="objtitle">Figure 2-3. The real relationship between Artist and the rest of our data model</h4>

<p>Not only does this make more sense than a relationship between
<tt class="literal">Artist</tt> and <tt class="literal">CD</tt>, but it also
addresses the issue of compilation <tt class="literal">CD</tt>s.</p>
</div>
















<a name="ch02-9-fm2xml" /><div class="sect2">
<h3 class="sect2">2.2.5. Kinds of Relationships</h3>





<p>
<a name="INDEX-56" />When modeling the relationship between
entities, it is important to determine both directions of the
relationship. After both sides of the relationship have been
determined, we end up with three main kinds of relationships. If both
sides of the relationship have a degree of one and only one, the
relationship is called a "one-to-one" or
"1-to-1" relationship. As we will find out later,
one-to-one relationships are rare. We do not have one in our data
model.<a name="INDEX-57" /></p>





<p>
<a name="INDEX-58" />If one of the sides as a degree of
"one or many" and the other side has a degree of
"one and only one," the relationship is a
"one-to-many" or "1-to-M" relationship. All
of the relationships in our current data model are one-to-many
relationships. This is to be expected since one-to-many relationships
are the most common.</p>





<p>
<a name="INDEX-59" />The final kind of relationships is
where both sides of the relationship are "one or many"
relationships. These kind of relationships are called
"many-to-many" or "M-to-M" relationships. In
an earlier version of our data model, the
<tt class="literal">Artist</tt>-<tt class="literal">CD</tt> relationship was a
many-to-many relationship.</p>
</div>
















<a name="ch02-10-fm2xml" /><div class="sect2">
<a name="INDEX-60" /><h3 class="sect2">2.2.6. Refining Relationships</h3>





<p>As we noted earlier, one-to-one relationships are quite rare. In
fact, if you encounter one during your data modeling, you should take
a closer look at your design. A one-to-one relationship may imply
that two entities are really the same entity. If they do turn out to
be the same entity, they should be folded into a single entity.</p>





<p>Many-to-many relationships are more common than one-to-one
relationships. In these relationships, there is often some data we
want to capture about the relationship. For example, take a look at
the earlier version of our data model in <a href="ch02_02.htm">Figure 2-2</a>
that had the many-to-many relationship between
<tt class="literal">Artist</tt> and <tt class="literal">CD</tt>. What data might
we want to capture about that relationship? An
<tt class="literal">Artist</tt> has a relationship with a
<tt class="literal">CD</tt> because an <tt class="literal">Artist</tt> has one or
more <tt class="literal">Song</tt>s on that <tt class="literal">CD</tt>. The data
model in <a href="ch02_02.htm">Figure 2-3</a> is actually another
representation of this many-to-many relationship.</p>





<p>All many-to-many relationships should be resolved using the following
technique:</p>





<ol><li><p>Create a new entity (sometimes referred to as a <em class="emphasis">junction
entity</em>). Name it appropriately. If you cannot think of an
appropriate name for the junction entity, name it by combining the
names of the two related entities (e.g.,
<tt class="literal">ArtistCD</tt>). In our data model,
<tt class="literal">Song</tt> is a junction entity for the
<tt class="literal">Artist</tt>-<tt class="literal">CD</tt> relationship.</p></li><li><p>Relate the new entity to the two original entities. Each of the
original entities should have a one-to-many relationship with the
junction entity.</p></li><li><p>If the new entity does not have an obvious unique identifier, inherit
the identifying attributes from the original entities into the
junction entity and make them together the unique identifier for the
new entity.</p></li></ol>

<p>In almost all cases, you will find additional attributes that belong
in the new junction entity. If not, the many-to-many relationship
still needs to be resolved, otherwise you will have a problem
translating your data model into a physical schema.</p>
</div>
















<a name="ch02-11-fm2xml" /><div class="sect2">
<h3 class="sect2">2.2.7. More 2NF</h3>





<p>
<a name="INDEX-61" />Our data model is still not in
2NF. The value of the <tt class="literal">Record Label</tt> attribute has
only one value for each <tt class="literal">CD</tt>, but we see the same
<tt class="literal">Record Label</tt> in multiple <tt class="literal">CD</tt>s.
This situation is similar to the one we saw with <tt class="literal">Band
Name</tt>. As with <tt class="literal">Band Name</tt>, this
duplication indicates that <tt class="literal">Record Label</tt> should be
part of its own entity. Each <tt class="literal">Record Label</tt> releases
one or many <tt class="literal">CD</tt>s. Each <tt class="literal">CD</tt> is
released by one and only one <tt class="literal">Record Label</tt>. <a href="ch02_02.htm">Figure 2-1</a> models this relationsh<a name="INDEX-62" />ip.<a name="INDEX-63" /></p>





<a name="ch02-21222" /><div class="figure"><img width="502" src="figs/MSQL.0210.gif" height="274" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. Our data model in the second normal form</h4>
</div>
















<a name="ch02-12-fm2xml" /><div class="sect2">
<a name="INDEX-64" /><h3 class="sect2">2.2.8. Third Normal Form (3NF)</h3>





<p>
<a name="INDEX-65" />An entity is said to be in the
third normal form if it is already in 2NF and no non-identifying
attributes are dependent on any other nonidentifying attributes.
Attributes that are dependent on other nonidentifying attributes are
normalized by moving both the dependent attribute and the attribute
on which it is dependent into a new entity.</p>





<p>If we wanted to track <tt class="literal">Record Label</tt> address
information, we would have a problem for 3NF. The <tt class="literal">Record
Label</tt> entity with address data would have <tt class="literal">State
Name</tt> and <tt class="literal">State Abbreviation</tt> attributes.
Though we really do not need this information to track
<tt class="literal">CD</tt> data, we will add it to our data model for the
sake of our example. <a href="ch02_02.htm">Figure 2-1</a> shows address data
in the <tt class="literal">Record Label</tt> entity.</p>





<a name="ch02-39691" /><div class="figure"><img width="502" src="figs/MSQL.0211.gif" height="306" alt="Figure 2-1" /></div><h4 class="objtitle">Figure 2-1. Record Label address information in our CD database</h4>

<p>The values of <tt class="literal">State Name</tt> and <tt class="literal">State
Abbreviation</tt> would conform to 1NF because they have only
one value per record in the <tt class="literal">Record Label</tt> entity.
The problem here is that <tt class="literal">State Name</tt> and
<tt class="literal">State Abbreviation</tt> are dependent on each other. In
other words, if we change the <tt class="literal">State
Abbreviation</tt>
<a name="INDEX-66" /> for a
particular <tt class="literal">Record Label</tt> -- from MN to
CA -- we also have to change the <tt class="literal">State
Name</tt> -- from Minnesota to California. We would normalize
this by creating a <tt class="literal">State</tt> entity with
<tt class="literal">State Name</tt> and <tt class="literal">State
Abbreviation</tt> attributes. <a href="ch02_02.htm">Figure 2-2</a> shows
how to relate this new entity to the <tt class="literal">Record Label</tt>
entity.</p>





<a name="ch02-30093" /><div class="figure"><img width="502" src="figs/MSQL.0212.gif" height="306" alt="Figure 2-2" /></div><h4 class="objtitle">Figure 2-2. Our data model in the third normal form</h4>

<p>Now that we are in 3NF, we can say that our data model is normalized.
There are other normal forms which have some value from a database
design standpoint, but these are beyond the scope of this book. For
most design purposes, the third normal form is sufficient to
guarantee a proper <a name="INDEX-67" />design.<a name="INDEX-68" /></p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch02_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">2. Database Design</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">2.3. A Logical Data Modeling Methodology</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>