<html><head>
<title>Database Administration (MySQL &amp; mSQL)</title>
<link href="../style/style1.css" type="text/css" rel="stylesheet" />


</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">4.4. Database Administration</h2>





<p>You should now have a fresh MySQL installation up and running. The
first thing you should do is change the <a name="INDEX-120" />
<a name="INDEX-121" />root password for the server using the
following command from inside the MySQL installation directory:</p>





<blockquote><pre class="code">./bin/mysqladmin -u root password `<em class="replaceable">'mynewpasswd'</em>'</pre></blockquote>





<p>With the MySQL server up and running securely, you can begin tackling
some basic database administration issues so that MySQL can begin
serving your needs.</p>





<a name="ch04-1-fm2xml" /><div class="sect2">
<a name="INDEX-122" /><a name="INDEX-123" /><h3 class="sect2">4.4.1. The 
mysqladmin Utility</h3>





<p>The <em class="emphasis">mysqladmin</em> is the primary tool for database
administration under MySQL. Using this utility, you can create,
destroy, and monitor your server and the databases it supports.</p>





<a name="ch04-2-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.1.1. Database creation</h3>





<p>Your database server is useless to you unless it actually has
databases to serve. Using <em class="emphasis">mysqladmin</em>, you can
create new databases:</p>





<blockquote><pre class="code">mysqladmin -p create <em class="replaceable">DATABASENAME</em></pre></blockquote>





<p>The <em class="emphasis">-p</em> option tells MySQL that you want to be
prompted for the root password you specified earlier. If you enter
the correct password, <em class="emphasis">mysqladmin</em> will create a
new, blank database with the name you specify. Because a database
under MySQL is a set of files in a specific directory, the
<em class="emphasis">mysqladmin create</em> command creates a new
directory to hold the files for the new database. For example, if you
created a database called "mydata," the directory
<em class="emphasis">mydata</em> will appear in the
<em class="emphasis">data</em> directory of your MySQL
installation.<a name="INDEX-124" /></p>





<a name="ch04-3-fm2xml" /><blockquote><h4 class="objtitle">WARNING</h4>

<p>Because MySQL databases and tables are stored as file system files,
you will encounter an unfortunate behavioral mismatch between Win32
implementations and Unix implementations. Specifically, all
<a name="INDEX-125" />Win32
file systems are case-insensitive while <a name="INDEX-126" />Unix file systems are case-sensitive.
The result is that database and table names are case- sensitive under
Unix and case-insensitive under Win32.</p>




</blockquote>
</div>









<a name="ch04-4-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.1.2. Database destruction</h3>





<p>During the process of developing a new database application, you will
likely want to create several databases to support the development
process. For example, it is common in database application
development to have separate databases for development, testing, and
production. When development is complete, it is time to get rid of
the development and testing databases. The
<em class="emphasis">mysqladmin</em> utility provides the
<a name="INDEX-127" />"drop" option to let you
delete a database:</p>





<blockquote><pre class="code">mysqladmin -p drop <em class="replaceable">DATABASENAME</em></pre></blockquote>





<p>As with the <em class="emphasis">mysqladmin create</em> command,
<em class="replaceable">DATABASENAME</em> is the name of the database
you wish to destroy. MySQL will not let you accidentally drop the
database. After issuing this command, it will warn you that dropping
a database is potentially a very bad thing to do and ask you to
confirm the drop. You can examine the
<em class="emphasis">data</em>
<a name="INDEX-128" /> directory after dropping the database
to verify that the directory that once served as that database no
longer exists.</p>
</div>









<a name="ch04-5-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.1.3. Database renaming and copying</h3>





<p>MySQL does not have a utility for renaming and copying databases.
Because databases are simply files in a specific directory, you can,
with care, use operating systems to copy or rename databases. Though
using the file system commands will successfully copy or rename the
database in question, they will not carry over the security
configurations from the original table because MySQL keeps security
information in a database table. In order to fully copy a database,
you will have to also duplicate its security information in the MySQL
system database. We will go into more detail on MySQL security later
in the chapter.</p>
</div>









<a name="ch04-6-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.1.4. Server status</h3>





<p>MySQL provides a very rich array of commands in the mysqladmin
utility for monitoring the MySQL server. Running the command
<em class="emphasis">mysqladmin status</em>
<a name="INDEX-129" /> will provide a single line status
display that looks like this:</p>





<blockquote><pre class="code">Uptime: 395  Threads: 1  Questions: 14  Slow queries: 0  
Opens: 10 Flush tables: 1  Open tables: 6</pre></blockquote>





<p>The values you see in the <em class="emphasis">mysqladmin status</em>
output have the following meanings:</p>





<dl>
<dt><b>
<a name="INDEX-130" />Uptime</b></dt>
<dd><p>The number of seconds the server has been up and running.</p></dd>





<dt><b>
<a name="INDEX-131" />Threads</b></dt>
<dd><p>The number of threads that are currently interacting with the
database. When examining the number of threads, you will always see
at least one thread. The one thread is the one counting all the other
threads. The server also has three other threads that are not visible
to this command -- one to handle signals, one to manage all of the
other threads, and one to listen for incoming connections.</p></dd>





<dt><b>
<a name="INDEX-132" />Questions</b></dt>
<dd><p>The number of queries that have been sent to the database since it
started.</p></dd>





<dt><b>
<a name="INDEX-133" />Slow queries</b></dt>
<dd><p>The number of queries that have taken longer than a configurable
amount of time to execute. The configuration key is
<tt class="literal">long_query_time</tt>. We will discuss configuration
parameters later in the chapter.</p></dd>





<dt><b>
<a name="INDEX-134" />Opens</b></dt>
<dd><p>The number of tables that have been opened since the server started.</p></dd>





<dt><b>
<a name="INDEX-135" />Flush tables</b></dt>
<dd><p>The number of <em class="emphasis">flush</em>,
<em class="emphasis">refresh</em>, and <em class="emphasis">reload</em>
commands.</p></dd>





<dt><b>
<a name="INDEX-136" />Open tables</b></dt>
<dd><p>The number of tables currently open. Because MySQL is multithreaded,
one table may be open more than once at any given time. For instance,
any number of <tt class="literal">SELECT</tt> statements can be performed
on the same table at the same time. Because of this trick, the value
of "Open tables" can be larger than the number of tables
in the system.</p></dd>

</dl>





<p>The <em class="emphasis">mysqladmin status</em> command also provides
values for memory in use and maximum memory used if MySQL was
compiled with the <tt class="literal">--with-debug</tt> option.</p>





<p>If you are looking for some more general, static information, then
<em class="emphasis">mysqladmin version</em> is the command you are
looking for. It provides the following output:</p>





<blockquote><pre class="code">bin/mysqladmin  Ver 7.8 Distrib 3.22.17, for sun-solaris2.6 on sparc
TCX Datakonsult AB, by Monty

Server version          3.22.17
Protocol version        10
Connection              Localhost via Unix socket
Unix socket             /tmp/mysql.sock
Uptime:                 23 min 58 sec

Threads: 1  Questions: 15  Slow queries: 0  Opens: 10  Flush tables: 1  Open tables: 6</pre></blockquote>





<p>The last line of information is, of course, identical to the
information you saw from <em class="emphasis">mysqladmin status</em>. The
rest of the display is entirely new.</p>





<dl>
<dt><b>
<a name="INDEX-137" />Server version</b></dt>
<dd><p>The version of MySQL being run.</p></dd>





<dt><b>
<a name="INDEX-138" />Protocol version</b></dt>
<dd><p>The version of the MySQL communications protocol that the server
supports. If you are having problems with a tool that uses the MySQL
communications protocol, you might want to check the value it expects
against your MySQL protocol version from this display.</p></dd>





<dt><b>
<a name="INDEX-139" />Connection</b></dt>
<dd><p>The method by which you are connected to the server. In the example
above, the client is communicating with MySQL through a Unix socket.
If you are looking at a remote MySQL server, this entry will hold the
name of the machine from which you are connecting.</p></dd>





<dt><b>
<a name="INDEX-140" />Unix socket</b></dt>
<dd><p>The file name of the socket you are using to communicate with the
server. If you are communicating with MySQL via TCP/IP, this entry
will disappear in favor of a <tt class="literal">TCP port</tt> entry that
holds the port number of the MySQL server.</p></dd>





<dt><b>Uptime</b></dt>
<dd><p>The total time the server has been running.</p></dd>

</dl>





<p>Two other commands, <em class="emphasis">mysqladmin variables</em> and
<em class="emphasis">mysqladmin extended-status</em>, offer more
information.</p>





<p>Because MySQL is multithreaded, monitoring process activity is not as
simple as using the Unix <em class="emphasis">ps</em> command. Though many
threads are running, only one process will appear in the process
list. To help address this problem, MySQL provides the
<em class="emphasis">mysqladmin
processlist</em>
<a name="INDEX-141" /> to display all of the running threads in
a nicely formatted table:</p>





<blockquote><pre class="code">+----+------+-----------+------+-----------+------+-------+------+
| Id | User | Host      | db   | Command   | Time | State | Info |
+----+------+-----------+------+-----------+------+-------+------+
| 920| joe  | client.com|mydata| Sleep     | 0    |       |      |
| 939| root | localhost |      | Processes | 0    |       |      |
+----+------+-----------+------+-----------+------+-------+------+</pre></blockquote>





<p>This output tells you exactly what each thread is doing. The values
in the display have the following meaning:</p>





<dl>
<dt><b>
<a name="INDEX-142" />Id</b></dt>
<dd><p>The internal identification number of the thread. This value has no
relation to any operating system process IDs. You can use this number
with the <em class="emphasis">mysqladmin kill</em> command to terminate
the thread.</p></dd>





<dt><b>
<a name="INDEX-143" />User</b></dt>
<dd><p>The user connected to the server with this thread.</p></dd>





<dt><b>
<a name="INDEX-144" />Host</b></dt>
<dd><p>The host from which the user is connected.</p></dd>





<dt><b>
<a name="INDEX-145" />db</b></dt>
<dd><p>The database to which the user is connected.</p></dd>





<dt><b>
<a name="INDEX-146" />Command</b></dt>
<dd><p>The type of command being executed by the thread. The command can be
one of the following:</p>






<dl>
<dt><b>
<a name="INDEX-147" />Sleep</b></dt>
<dd><p>The thread is waiting for user input. Most processes should be in
this state.</p></dd>





<dt><b>
<a name="INDEX-148" />Quit</b></dt>
<dd><p>The thread is in the process of terminating.</p></dd>





<dt><b>
<a name="INDEX-149" />Init DB</b></dt>
<dd><p>The thread is preparing the selected database for interaction. A
client may communicate with only one database at a time, but it can
switch any time it likes.</p></dd>





<dt><b>
<a name="INDEX-150" />Query</b></dt>
<dd><p>The thread is performing an actual query. While most interaction with
the database is in the form of queries, these commands occur very
quickly and thus rarely appear in this output.</p></dd>





<dt><b>
<a name="INDEX-151" />Field list</b></dt>
<dd><p>The thread is generating a list of the fields in a table.</p></dd>





<dt><b>
<a name="INDEX-152" />Create DB</b></dt>
<dd><p>The thread is creating a new database.</p></dd>





<dt><b>
<a name="INDEX-153" />Drop DB</b></dt>
<dd><p>The thread is deleting a database.</p></dd>





<dt><b>
<a name="INDEX-154" />Reload</b></dt>
<dd><p>The thread is reloading the MySQL access tables. When the reload is
finished, all new threads will use the refreshed access tables.</p></dd>





<dt><b>Reload</b></dt>
<dd><p>The thread is reloading the MySQL access tables. When the reload is finished, all new threads will use the refreshed access tables.</p></dd>





<dt><b>Shutdown</b></dt>
<dd><p>The thread is in the process of terminating all other threads and
shutting down the server.</p></dd>





<dt><b>
<a name="INDEX-155" />Statistics</b></dt>
<dd><p>The thread is generating statistics.</p></dd>





<dt><b>
<a name="INDEX-156" />Processes</b></dt>
<dd><p>This thread is examining other threads. The thread executing this
command will show up with this value.</p></dd>





<dt><b>
<a name="INDEX-157" />Connect</b></dt>
<dd><p>The thread is negotiating an incoming connection from a client.</p></dd>





<dt><b>
<a name="INDEX-158" />Kill</b></dt>
<dd><p>The thread is terminating another thread.</p></dd>





<dt><b>
<a name="INDEX-159" />Refresh</b></dt>
<dd><p>The thread is flushing all of the caches and resetting the log files.</p></dd>

</dl></dd>

</dl>





<p>The MySQL log file provides yet another way to get useful
administrative information about the MySQL server. MySQL generates
the main log if <em class="emphasis">mysqld</em> is launched with the
<em class="emphasis"> -- log</em>
<a name="INDEX-160" /> option. This log appears in
<em class="emphasis">/usr/local/var/</em><em class="replaceable">HOSTNAME</em><em class="emphasis">.log</em>
where <tt class="literal">HOSTNAME</tt> is the name of the machine on which
MySQL is running. This log tracks connections to the server and the
commands that clients send to it.</p>





<p>By passing the
<em class="emphasis"> -- debug</em>
<a name="INDEX-161" /> option to <em class="emphasis">mysqld</em>
(or <em class="emphasis">safe_mysqld</em>), you can have MySQL send
additional information to the log file. The debug package that MySQL
uses has dozens of options, most of which you will never use. The
most common debug setting, however, is
<em class="emphasis">-d:t:o,</em><em class="replaceable">FILENAME</em> where
<tt class="literal">FILENAME</tt> is the name of the debug log you wish to
use. This option will log almost everything the server does,
step-by-step.</p>





<p>MySQL supports one more human-readable log. When you start MySQL with
the  -- log-update option, MySQL will create a file with the name
<em class="replaceable">HOSTNAME.#</em> where
<tt class="literal">HOSTNAME</tt> is the name of the server machine and
<tt class="literal">#</tt> is a unique number. This log will hold all
changes to database tables. The log appears as SQL so that the
operations can be replicated in another database server.</p>
</div>









<a name="ch04-7-fm2xml" /><div class="sect3">
<a name="INDEX-162" /><h3 class="sect3">4.4.1.5. Server shutdown</h3>





<p>The following command will perform a clean shutdown of the MySQL
database server:</p>





<blockquote><pre class="code">mysqladmin -p shutdown</pre></blockquote>





<p>This command is the most orderly way to shut down the server. If you
started MySQL with <em class="emphasis">safe_mysqld</em> and try using
some other method for shutting down the server,
<em class="emphasis">safe_mysqld</em> will just start up a new instance of
the server. One can also shut down the server safely with the
traditional Unix <em class="emphasis">kill</em> command. But avoid using
the drastic <em class="emphasis">kill-9</em> command.</p>
</div>









<a name="ch04-8-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.1.6. Command line options for mysqladmin</h3>





<p>The <em class="emphasis">mysqladmin</em> utility is a very rich tool with
a handful of command line options. Its general format is</p>





<blockquote><pre class="code">mysqladmin <em class="replaceable">OPTIONS</em> <em class="replaceable">COMMAND1</em> <em class="replaceable">COMMAND2</em> ... <em class="replaceable">COMMANDn</em></pre></blockquote>





<p>In other words, you can issue multiple commands at one time with the
<em class="emphasis">mysqladmin</em> utility. Just for grins, you could do</p>





<blockquote><pre class="code">mysqladmin -p create <em class="replaceable">silly</em> drop <em class="replaceable">silly</em></pre></blockquote>





<p>This command will both create and drop the database
"silly" in one shot. The following is a list of commands
you can send to <em class="emphasis">mysqladmin</em>:</p>





<dl>
<dt><b>
<a name="INDEX-163" />create DATABASENAME</b></dt>
<dd><p>Creates a new database with the specified name</p></dd>





<dt><b>
<a name="INDEX-164" />drop DATABASENAME</b></dt>
<dd><p>Drops an existing database with the specified name</p></dd>





<dt><b>
<a name="INDEX-165" />extended-status</b></dt>
<dd><p>Provides an extended status message from the server</p></dd>





<dt><b>
<a name="INDEX-166" />flush-hosts</b></dt>
<dd><p>Flushes all cached hosts</p></dd>





<dt><b>
<a name="INDEX-167" />flush-logs</b></dt>
<dd><p>Flushes all logs</p></dd>





<dt><b>
<a name="INDEX-168" />flush-tables</b></dt>
<dd><p>Flushes all tables</p></dd>





<dt><b>
<a name="INDEX-169" />flush-privileges</b></dt>
<dd><p>Same as <em class="emphasis">reload</em></p></dd>





<dt><b>
<a name="INDEX-170" />kill ID1,ID2, . . . ,IDn</b></dt>
<dd><p>Terminates the threads with the specified thread IDs</p></dd>





<dt><b>
<a name="INDEX-171" />password NEWPASSWORD</b></dt>
<dd><p>Changes the old password to the specified value</p></dd>





<dt><b>
<a name="INDEX-172" />ping</b></dt>
<dd><p>Verifies that <em class="emphasis">mysqld</em> is still running</p></dd>





<dt><b>
<a name="INDEX-173" />processlist</b></dt>
<dd><p>Shows a list of active threads</p></dd>





<dt><b>
<a name="INDEX-174" />reload</b></dt>
<dd><p>Reloads all grant tables</p></dd>





<dt><b>
<a name="INDEX-175" />refresh</b></dt>
<dd><p>Flushes all tables and closes and opens all log files</p></dd>





<dt><b>
<a name="INDEX-176" />shutdown</b></dt>
<dd><p>Shuts down the server</p></dd>





<dt><b>
<a name="INDEX-177" />status</b></dt>
<dd><p>Gives a short status message from the server</p></dd>





<dt><b>
<a name="INDEX-178" />variables</b></dt>
<dd><p>Prints available variables</p></dd>





<dt><b>
<a name="INDEX-179" />version</b></dt>
<dd><p>Shows server version information</p></dd>

</dl>





<p>In addition to the commands it supports, it also supports the
following options:</p>





<dl>
<dt><b>
<a name="INDEX-180" />-# <em class="replaceable">LOG</em></b></dt>
<dd><p>Output debug log. Often this is
`<em class="emphasis">d:t:o,</em><em class="replaceable">FILENAME</em>'.</p></dd>





<dt><b>-f</b></dt>
<dd><p>Do not ask for confirmation of a dropped table and continue to the
next command even if this one fails.</p></dd>





<dt><b>
<a name="INDEX-181" />-?  or   -- help</b></dt>
<dd><p>Show help for the <em class="emphasis">mysqladmin</em> utility.</p></dd>





<dt><b>-C</b></dt>
<dd><p>Use compression in the client/server protocol.</p></dd>





<dt><b>-h <em class="replaceable">HOST</em></b></dt>
<dd><p>Connect to the specified host.</p></dd>





<dt><b>-p <em class="replaceable">[PASSWORD]</em></b></dt>
<dd><p>Use the specified password to validate the user. If this option is
used without specifying a password, then the user will be prompted to
enter the password.</p></dd>





<dt><b>
<a name="INDEX-182" />-P <em class="replaceable">PORT</em></b></dt>
<dd><p>Use the specified port number for a connection.</p></dd>





<dt><b>-i <em class="replaceable">SECONDS</em></b></dt>
<dd><p>Execute the commands repeatedly with the specified sleep interval in
between executions.</p></dd>





<dt><b>-s</b></dt>
<dd><p>Silently exit if a connection to the server cannot be established.</p></dd>





<dt><b>-S <em class="replaceable">SOCKET</em></b></dt>
<dd><p>The file to use for the Unix socket.</p></dd>





<dt><b>-t <em class="replaceable">TIMEOUT</em></b></dt>
<dd><p>The timeout for the connection.</p></dd>





<dt><b>-u <em class="replaceable">USER</em></b></dt>
<dd><p>The user for the login if not the current user.</p></dd>





<dt><b>-V</b></dt>
<dd><p>Show version information and exit.</p></dd>





<dt><b>-w <em class="replaceable">COUNT</em></b></dt>
<dd><p>Wait and retry the specified number of times if the server is not
currently up.<a name="INDEX-183" />
<a name="INDEX-184" /></p></dd>

</dl>
</div>
</div>
















<a name="ch04-9-fm2xml" /><div class="sect2">
<a name="INDEX-185" /><a name="INDEX-186" /><h3 class="sect2">4.4.2. Backups
</h3>





<p>The importance of regular backups in successful operation cannot be
stressed enough. Without a usable backup, a single power outage can
destroy months or years of work. However, with a properly planned
backup schedule, you can recover from almost any catastrophe in a
very short time.</p>





<p><a href="ch05_01.htm">Chapter 5, "mSQL"</a>, provides a detailed discussion of the
role of the <em class="emphasis">msqldump</em> command in mSQL backups.
MySQL supports nearly identical functionality in the form of the
<em class="emphasis">mysqldump</em> command. We recommend that you have a
look at that discussion to understand the use of
<em class="emphasis">mysqldump</em>
<a name="INDEX-187" /> and full backups. In this section, we
will focus on the next most important form up backup: the incremental
backup.</p>





<p>While full data backups are technically all that are needed to
recover from data loss, they can be difficult to work with at times.
When you have a great deal of data, the files required to backup all
of the data can take up a large amount of space. Therefore, it is
common practice to only back up all data once a week or some similar
data. Then, every day, a backup is performed of all data that has
changed since the last full backup. This is referred to as an
incremental backup.</p>





<p>With MySQL, it is possible to perform an
<a name="INDEX-188" />incremental backup using a feature of
the database server known as the "<a name="INDEX-189" />update log." If the
<em class="emphasis">mysqld</em> database server is launched with the
-<em class="emphasis">-log-update</em> option, all changes to any database
will be logged in a file as an SQL command. These changes will be
logged in the order they happen. The result is a file that, when fed
into the <em class="emphasis">mysql</em> monitor, will replay all actions
that have been performed on the database. If the log has been kept
from the beginning of the database, it will go through the entire
life of the database and end up with the data in its current state.</p>





<p>More usefully, if the log is kept since a certain defined point, say
the last full data backup, the log can then be used to catch up the
backup to the current state. In this way, the functionality of an
incremental backup is obtained. At a regular interval (such as every
week) perform a full data backup. Then every day copy the update log
either to tape, or to a backup area on hard disk. Keep a separate
copy of the update log for every day back to the last full data
backup. This provides the ability to recreate the database in case of
disaster and also to recover any partial data lost since the last
full data backup. Because the update log is plain ASCII, SQL commands
they can be searched for specific data.</p>





<p>Whatever method you use to back up your data, make sure that you do
it often and that your periodically check your backups to make sure
that you can indeed use them to recover your system. Many database
administrators have faithfully kept backups only to find out in their
time of need that because of some error -- human, software, or
physical media -- their backups were absolutely useless.</p>
</div>
















<a name="ch04-10-fm2xml" /><div class="sect2">
<a name="INDEX-190" /><a name="INDEX-191" /><a name="INDEX-192" /><h3 class="sect2">4.4.3. Security

</h3>





<p>In addition to making sure you can get at your data reliably, you
also want to make sure others cannot get to it at all.
<a name="INDEX-193" />MySQL
uses its own database server to implement security. When you first
install MySQL, the installation process creates a database called
"mysql." This database contains five tables:
<tt class="literal">db</tt>, <tt class="literal">host</tt>,
<tt class="literal">user</tt>, <tt class="literal">tables_priv</tt>, and
<tt class="literal">columns_priv</tt>. Newer versions of MySQL also create
a database called <tt class="literal">func</tt>, but it is unrelated to
security. MySQL uses these tables to decide who is allowed to do
what. The <tt class="literal">user</tt> table contains security information
that applies to the server as a whole. The <tt class="literal">host</tt>
table gives entire machines rights to the server. Finally, the
<tt class="literal">db</tt>, <tt class="literal">tables_priv</tt>, and
<tt class="literal">columns_priv</tt> tables control access to individual
databases, tables, and columns.</p>





<p>We will take a brief look at all of MySQL's security tables and
then discuss the details of how they work together to make MySQL a
secure database engine.</p>





<a name="ch04-11-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.3.1. The user table</h3>





<p>The <tt class="literal">user</tt>
<a name="INDEX-194" /> table shown in <a href="ch04_04.htm">Table 4-1</a> has the following structure:</p>





<a name="ch04-39374" /><h4 class="objtitle">Table 4-1. The User Table </h4><table border="1">







<tr>
<th>
<p>Field</p></th>
<th>
<p>Type</p></th>
<th>
<p>Null</p></th>
<th>
<p>Key</p></th>
<th>
<p>Default</p></th>
<th>
<p>Extra</p></th>
</tr>










<tr>
<td>
<p>Host</p></td>
<td>
<p>char(60)</p></td>
<td />
<td>
<p>PRI</p></td>
<td />
<td />
</tr>




<tr>
<td>
<p>User</p></td>
<td>
<p>char(16)</p></td>
<td />
<td>
<p>PRI</p></td>
<td />
<td />
</tr>




<tr>
<td>
<p>Password</p></td>
<td>
<p>char(16)</p></td>
<td />
<td />
<td />
<td />
</tr>




<tr>
<td>
<p>Select_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Insert_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Update_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Delete_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Create_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Drop_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Reload_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Shutdown_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Process_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>File_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Grant_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>References_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Index_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Alter_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>





</table>





<p>In both the Host and User columns, you can use "<tt class="literal">%</tt>"
wildcard values. A host name of "chem<tt class="literal">%</tt>lab," for example,
includes "chembiolab," "chemtestlab," and so
on. The special user name "nobody" acts like a single
"%." It covers any user not explicitly named elsewhere.
Here is what the different<a name="INDEX-195" /> access rights mean:<a name="INDEX-196" />
<a name="INDEX-197" /></p>





<dl>
<dt><b>Select_priv</b></dt>
<dd><p>The ability to perform <tt class="literal">SELECT</tt> statements</p></dd>





<dt><b>Insert_priv</b></dt>
<dd><p>The ability to perform <tt class="literal">INSERT</tt> statements</p></dd>





<dt><b>Update_priv</b></dt>
<dd><p>The ability to perform <tt class="literal">UPDATE</tt> statements</p></dd>





<dt><b>Delete_priv</b></dt>
<dd><p>The ability to perform <tt class="literal">DELETE</tt> statements</p></dd>





<dt><b>Create_priv</b></dt>
<dd><p>The ability to perform <tt class="literal">CREATE</tt> statements or to
create databases</p></dd>





<dt><b>Drop_priv</b></dt>
<dd><p>The ability to perform <tt class="literal">DROP</tt> statements or to drop
databases</p></dd>





<dt><b>Reload_priv</b></dt>
<dd><p>The ability to reload access information via <em class="emphasis">mysqladmin
reload</em></p></dd>





<dt><b>Shutdown_priv</b></dt>
<dd><p>The ability to shutdown the server via <em class="emphasis">mysqladmin
shutdown</em></p></dd>





<dt><b>Process_priv</b></dt>
<dd><p>The ability to manage server processes</p></dd>





<dt><b>File_priv</b></dt>
<dd><p>The ability to read and write files using commands like
<tt class="literal">SELECT INTO OUTFILE</tt> and <tt class="literal">LOAD DATA
INFILE</tt></p></dd>





<dt><b>Grant_priv</b></dt>
<dd><p>The ability to grant your privileges to others</p></dd>





<dt><b>Index_priv</b></dt>
<dd><p>The ability to create or drop indices</p></dd>





<dt><b>Alter_priv</b></dt>
<dd><p>The ability to perform the <tt class="literal">ALTER TABLE</tt> statement</p></dd>

</dl>





<p>MySQL provides a special function to keep passwords safe from prying
eyes. The <tt class="literal">password()</tt>
<a name="INDEX-198" /> function encrypts a password. The
following statements show the <tt class="literal">password()</tt> function
in action in the course of adding users to the system.</p>





<blockquote><pre class="code">INSERT INTO user (Host, User, Password, Select_priv, 
                  Insert_priv, Update_priv, Delete_priv)
VALUES ('%', 'bob', password('mypass'), 'Y', 'Y', 'Y','Y')
INSERT INTO user (Host, User, Password, Select_priv)
VALUES ('athens.imaginary.com', 'jane', '', 'Y')
INSERT INTO user(Host, User, Password)
VALUES ('%', 'nobody', '')
INSERT INTO user (Host, User, Password, Select_priv,
                  Insert_priv, Update_priv, Delete_priv)
VALUES ('athens.imaginary.com', 'nobody', 
        password('thispass'), 'Y', 'Y', 'Y', 'Y')</pre></blockquote>





<a name="ch04-12-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>MySQL user names are mostly unrelated to operating system
<a name="INDEX-199" />user names. By
default, the MySQL client tools use your operating system user name
in attempting a login. There is, however, no necessary connection
between the two. By using the<em class="emphasis"> -u</em> option with
most of the MySQL client utilities, you can connect to MySQL using
any user name you like. Similarly, your operating system user name
will not appear in the MySQL <tt class="literal">user </tt>table unless
someone specifically adds it and grants you permissions.</p>
</blockquote>





<p>The first user we created, "bob," can come from any host
and can <tt class="literal">SELECT</tt>, <tt class="literal">INSERT</tt>,
<tt class="literal">UPDATE</tt>, and <tt class="literal">DELETE</tt> records. The
second user, "jane," can connect from
"athens.imaginary.com." has no password, and can only
execute <tt class="literal">SELECT </tt>statements. The third user is
"nobody" from any host. This user is able to do
absolutely nothing. The final user is "nobody" from
"athens.imaginary.com" and can <tt class="literal">SELECT</tt>,
<tt class="literal">INSERT</tt>, <tt class="literal">UPDATE</tt>, and
<tt class="literal">DELETE</tt> records like "bob."</p>





<p>So how does MySQL do matching? Perhaps you noticed above that a given
name could actually match several records. For example,
"nobody@athens.imaginary.com" matches
"nobody@%" and "nobody@athens.imaginary.com."
Before checking the <tt class="literal">user</tt> table, MySQL sorts the
data in the following manner:</p>




<ol><li><p>MySQL first matches hosts that do not contain wildcards followed by
hosts with wildcards. Empty <tt class="literal">Host</tt> fields are
treated like they contain "%."</p></li><li><p>When hosts are the same, users without wildcards are checked before
users with wildcards. As with <tt class="literal">Host</tt>, an empty
<tt class="literal">User</tt> field is treated as if it contains
"%."</p></li><li><p>The first match encountered is the only match considered.</p></li></ol>

<p>In the earlier example, the user would be verified against
"nobody" from "athens.imaginary.com" because
"athens.imaginary.com" is sorted before "%."
Because hosts are sorted before users, the values of any host from
which you are connecting will take precedence over any specific
privileges you might have. For example, if the
<tt class="literal">user</tt> table contains the following entries:</p>





<a name="ch04-13-fm2xml" /><table border="1">



<tr>
<th>
<p>Host</p></th>
<th>
<p>User</p></th>
</tr>










<tr>
<td>
<p>%</p></td>
<td>
<p>jane</p></td>
</tr>




<tr>
<td>
<p>athens.imaginary.com</p></td>
<td />
</tr>





</table>

<p>If "jane" connects from
"athens.imaginary.com," the privileges associated with
"athens.imaginary.com" are the privileges that MySQL will
use.</p>
</div>









<a name="ch04-14-fm2xml" /><div class="sect3">
<a name="INDEX-200" /><h3 class="sect3">4.4.3.2. The db table</h3>





<p>You may have noticed that the <tt class="literal">user</tt> table makes no
mention of specific databases or tables. The <tt class="literal">user</tt>
table rules over the entire server. Most servers, however, have
multiple databases. Different databases generally serve different
purposes, and thus different user groups. The <tt class="literal">db</tt>
table sets permissions for individual databases. The
<tt class="literal">db</tt> table shown in <a href="ch04_04.htm">Table 4-1</a> has
the following structure:</p>






<p>This table looks a lot like the <tt class="literal">user</tt> table. The major distinction is that instead of having a <tt class="literal">Password</tt> column, this table has a <tt class="literal">Db</tt> column. This table manages a user's privileges within a specific database. Because <tt class="literal">user</tt> table permissions span the entire server, any activity granted to a user by the <tt class="literal">user</tt> table overrides that user's entry in the <tt class="literal">db</tt> table. Thus, if a user has <tt class="literal">INSERT</tt> access in the <tt class="literal">user</tt> table, that user will have <tt class="literal">INSERT</tt> access for all databases no matter what the <tt class="literal">db</tt> table says.</p>






<a name="ch04-15412" /><h4 class="objtitle">Table 4-1. The db Table</h4><table border="1">







<tr>
<th>
<p>Field</p></th>
<th>
<p>Type</p></th>
<th>
<p>Null</p></th>
<th>
<p>Key</p></th>
<th>
<p>Default</p></th>
<th>
<p>Extra</p></th>
</tr>










<tr>
<td>
<p>Host</p></td>
<td>
<p>char(60)</p></td>
<td />
<td>
<p>PRI</p></td>
<td />
<td />
</tr>




<tr>
<td>
<p>Db</p></td>
<td>
<p>char(32)</p></td>
<td />
<td>
<p>PRI</p></td>
<td />
<td />
</tr>




<tr>
<td>
<p>User</p></td>
<td>
<p>char(16)</p></td>
<td />
<td>
<p>PRI</p></td>
<td />
<td />
</tr>




<tr>
<td>
<p>Select_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Insert_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Update_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Delete_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Create_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Drop_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>References_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Index_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Alter_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>





</table>





<p>This table looks a lot like the <tt class="literal">user</tt> table. The
major distinction is that instead of having a
<tt class="literal">Password</tt> column, this table has a
<tt class="literal">Db</tt> column. This table manages a user's
privileges within a specific database. Because
<tt class="literal">user</tt> table permissions span the entire server, any
activity granted to a user by the <tt class="literal">user</tt> table
overrides that user's entry in the <tt class="literal">db</tt> table.
Thus, if a user has <tt class="literal">INSERT</tt> access in the
<tt class="literal">user</tt> table, that user will have
<tt class="literal">INSERT</tt>
<a name="INDEX-201" /> access for all databases no matter what
the <tt class="literal">db</tt> table says.</p>





<p>The most effective use of the <tt class="literal">user</tt> table is to
create entries for each user in the <tt class="literal">user </tt>table
with no permissions. This scheme enables a user to connect to the
server, but do nothing else. The exception would be anyone who should
be a server administrator. Everyone else should gain their
permissions from the <tt class="literal">db</tt> table. Every user does
have to appear in the <tt class="literal">user</tt> table, or they will not
be allowed to connect to the database.</p>





<p>The same rules for user and host matching on the
<tt class="literal">User</tt> and <tt class="literal">Host</tt> columns from the
<tt class="literal">user</tt> table applies to this table -- with a bit
of a twist. A blank <tt class="literal">Host</tt> field will prompt MySQL
to look for an entry matching the user's host in the
<tt class="literal">host</tt> table. If no such match is found, MySQL
denies the operation. If an entry is found, MySQL calculates the
permission as the intersection of those found in the
<tt class="literal">db</tt> and <tt class="literal">host</tt> entries. In other
words, both entries must have a `Y' in them or access is
denied.</p>
</div>









<a name="ch04-15-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.3.3. The host table</h3>





<p>The <tt class="literal">host</tt> table serves a special purpose. The
<tt class="literal">host</tt> table shown in <a href="ch04_04.htm">Table 4-1</a>
has the following structure:</p>





<a name="ch04-10595" /><h4 class="objtitle">Table 4-1. The Host Table</h4><table border="1">







<tr>
<th>
<p>Field</p></th>
<th>
<p>Type</p></th>
<th>
<p>Null</p></th>
<th>
<p>Key</p></th>
<th>
<p>Default</p></th>
<th>
<p>Extra</p></th>
</tr>










<tr>
<td>
<p>Host</p></td>
<td>
<p>char(60)</p></td>
<td />
<td>
<p>PRI</p></td>
<td />
<td />
</tr>




<tr>
<td>
<p>Db</p></td>
<td>
<p>char(32)</p></td>
<td />
<td>
<p>PRI</p></td>
<td />
<td />
</tr>




<tr>
<td>
<p>Select_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Insert_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Update_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Delete_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Create_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Drop_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Grant_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>References_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Index_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>




<tr>
<td>
<p>Alter_priv</p></td>
<td>
<p>enum(`N',`Y')</p></td>
<td />
<td />
<td>
<p>N</p></td>
<td />
</tr>





</table>





<p>The <tt class="literal">host</tt>
<a name="INDEX-202" /> table gives you a way of creating basic
permissions on a host-by-host basis. When MySQL attempts to verify an
operation, it seeks a match on the user name and host in the
<tt class="literal">db</tt> table. If it finds a match on the user name
with an empty <tt class="literal">Host</tt> field, it will consult the
<tt class="literal">host</tt> table and use the intersection of the two
sets of privileges to determine the outcome. For example, you may
have a set of servers that you consider less secure than the rest of
your network. You can deny them any kind of write access. If
"bob" comes in from one of those machines and his entry
in the <tt class="literal">db</tt> table has a blank
<tt class="literal">Host</tt> field, he will be denied write access even
though his <tt class="literal">db</tt> table entry would otherwise allow
it.</p>
</div>









<a name="ch04-16-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.3.4. The tables_priv and columns_priv tables</h3>





<p>These two tables are basically refinements of what the
<tt class="literal">db</tt> table provides. Specifically, any operation is
checked with the relevant <tt class="literal">db</tt> entry, followed by
any relevant <tt class="literal">tables_priv</tt> entry, followed by any
relevant <tt class="literal">columns_priv</tt> entry. If one of these is
allowed, then the operation is allowed. With these two tables, you
can narrow permissions down to the table and column levels. You can
manipulate the contents of the tables through the
<tt class="literal">GRANT</tt> and <tt class="literal">REVOKE</tt> commands in
SQL.</p>
</div>









<a name="ch04-17-fm2xml" /><div class="sect3">
<a name="INDEX-203" /><h3 class="sect3">4.4.3.5. The stages of access control</h3>





<p>You have had a look at the players in MySQL security. Now we need to
put the players together and demonstrate how they are applied to real
situations. MySQL divides access control into two stages. The first
stage is connection. You must be able to connect to the server before
you can do anything else.</p>





<p>Connection involves two checks. First, MySQL checks to see that the
user name and host under which you are connecting has a corresponding
entry in the <tt class="literal">user </tt>table. Matching an entry for you
is based on the rules for matching we discussed earlier. If MySQL
fails to find a match, your connection request is denied. If it finds
a match and that match has a nonblank <tt class="literal">Password</tt>
field entry, you must specify and match that password. Failure to
match the password results in the denial of your connection request.</p>





<p>Once connected, the MySQL server enters the request verification
stage. At this point, any specific requests you make are matched
against your privileges. MySQL may take these privileges from any of
the <tt class="literal">user</tt>, <tt class="literal">db</tt>,
<tt class="literal">host</tt>, <tt class="literal">tables_priv</tt>, or
<tt class="literal">columns_priv</tt> tables. If there is a match with the
user table and the user table has a positive permission, then the
operation is immediately allowed. Otherwise, MySQL looks for matches
in the following tables in the following order:</p>




<ol><li><p><tt class="literal">db</tt></p></li><li><p><tt class="literal">tables_priv</tt></p></li><li><p><tt class="literal">columns_priv</tt></p></li></ol>

<p>If the <tt class="literal">db</tt> table has a positive entry, the
operation is allowed and no further checking occurs. If the entry is
negative, then MySQL checks with all matching
<tt class="literal">tables_priv</tt> entries. If, for example, the
operation is a <tt class="literal">SELECT</tt> that joins two tables, then
the user must have positive entries for both tables in that database
in the <tt class="literal">tables_priv</tt> table. If one or more of the
entries is negative or nonexistent, then MySQL will perform the same
logic for all of the columns in the <tt class="literal">columns_priv</tt>
table.</p>
</div>









<a name="ch04-18-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.3.6. The mysqlaccess utility</h3>





<p>You may find learning the MySQL security system confusing at first.
To simplify matters a bit, MySQL comes with a utility called
<a name="INDEX-204" /><em class="emphasis">mysqlaccess</em>. This
command is a Perl script<a href="#FOOTNOTE-4">[4]</a> that
will take the host, username, and database combination and provide
you with the exact access rights for that user and why. For example,
using the command <em class="emphasis">mysqlaccess nobody isp.com
mydata</em> might report the following output:</p><blockquote>




<a name="FOOTNOTE-4" /><p>[4]For some reason, MySQL has
shipped some distributions with the <em class="filename">mysqlaccess</em>
script pointing to a nonstandard location for Perl binaries. If you
get the response "command not found" when trying to
execute <em class="filename">mysqlaccess</em>, you are almost certainly
experiencing that problem. You will need to change line 1 of the
<em class="filename">mysqlaccess</em> script so that it points to the
proper location of your Perl binary, generally
<em class="filename">/usr/local/bin/perl</em>.</p>




</blockquote>





<blockquote><pre class="code">Access-rights
for USER 'nobody', from HOST 'isp.com', to DB 'mydata'
        +-----------------+---+ +-----------------+---+
        | Select_priv     | Y | | Drop_priv       | N |
        | Insert_priv     | Y | | Reload_priv     | N |
        | Update_priv     | Y | | Shutdown_priv   | N |
        | Delete_priv     | Y | | Process_priv    | N |
        | Create_priv     | N | | File_priv       | N |
        +-----------------+---+ +-----------------+---+
BEWARE:  Everybody can access your DB as user 'nobody'
      :  from host 'isp.com' WITHOUT supplying a password.
      :  Be very careful about it!!

The following rules are used:
 db    : 'isp.com','mydata','nobody','Y','Y','Y','Y','N',
'N','N','N','N','N'
 host  : 'Not processed: host-field is not empty in db-
table.'
 user  : '%','nobody','','N','N','N','N','N','N','N','N','N'</pre></blockquote>





<p>As you can see, even if you understand MySQL security fully,
<em class="emphasis">mysqlaccess</em> can be a valuable tool in auditing
your server's security.</p>
</div>









<a name="ch04-19-fm2xml" /><div class="sect3">
<h3 class="sect3">4.4.3.7. Making changes</h3>





<p>MySQL loads the access tables at server startup. The advantage of
this approach over constant lookups is speed. The downside, however,
is that changes you make to the MySQL access tables are not
immediately visible. In order to make those changes visible, you need
to issue the command <em class="emphasis">mysqladmin
reload</em>.<a name="INDEX-205" />
<a name="INDEX-206" />
<a name="INDEX-207" /> If you change the tables through
<tt class="literal">GRANT</tt> or <tt class="literal">REVOKE</tt> commands in
SQL, you do not have to explicitly reload the tables.</p>
</div>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch04_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch04_05.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">4.3. Running MySQL</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">4.5. MySQL Utilities</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
