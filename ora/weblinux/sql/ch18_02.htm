<?label 18.2. Lite?><html><head><title>Lite (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch18_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch19_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">18.2. Lite</h2>





<p>Lite is the scripting language used by W3-mSQL. In syntax, it is
similar to C and even more to Perl. In fact, many Lite scripts are
syntactically indistinguishable from Perl scripts. Lite, however,
lacks many of the advanced features of Perl.</p>





<p>Below is a quick reference of the standard Lite functions that are
available when using W3-mSQL.</p>






<a name="INDEX-1725" /><a name="INDEX-1726" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
chdir</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = chdir($path)</pre></td><td align="right" /></tr></table><p>Changes directory to the specified path. If the operation is
unsuccessful, a negative integer is returned.</p></div>

<a name="INDEX-1727" /><a name="INDEX-1728" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
chmod</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = chmod($filename, $mode)</pre></td><td align="right" /></tr></table><p>Changes the mode of the specified file to <tt class="literal">mode</tt>. If
the operation is unsuccessful, a negative integer is returned. The
value <tt class="literal">mode</tt> can be given as a decimal, octal or
hexadecimal value.</p></div>

<a name="INDEX-1729" /><a name="INDEX-1730" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
chop</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$string = chop($string)</pre></td><td align="right" /></tr></table><p>Returns the string with the last character removed. This is handy for
removing newlines from the end of strings read with
<tt class="literal">readln</tt>.</p></div>

<a name="INDEX-1731" /><a name="INDEX-1732" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
close</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
close ($fd)</pre></td><td align="right" /></tr></table><p>Closes the file associated with the file descriptor.</p></div>

<a name="INDEX-1733" /><a name="INDEX-1734" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
ctime</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$time = ctime($time)</pre></td><td align="right" /></tr></table><p>Converts <tt class="literal">time</tt>, which is some number of seconds
since the epoch, into the common Unix text representation of the
time.</p></div>

<a name="INDEX-1735" /><a name="INDEX-1736" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
echo</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
FM-Command&gt;echo($string)</pre></td><td align="right" /></tr></table><p>Prints the given string. Any variables in the string will be replaced
with the values of the variables.</p></div>

<a name="INDEX-1737" /><a name="INDEX-1738" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
fprintf</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
fprintf($fd, $string [, arg ...])</pre></td><td align="right" /></tr></table><p>Works like the C (or Perl) function of the same name. The first
argument is a file descriptor. The formatted string is printed to the
file associated with the file descriptor.</p></div>

<a name="INDEX-1739" /><a name="INDEX-1740" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
gethostbyaddr</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$hostinfo = gethostbyaddr($address) </pre></td><td align="right" /></tr></table><p>Returns the same array as <tt class="literal">gethostbyname() </tt>for
given IP number. The IP should be given as a decimal string, as in
"127.0.0.1". In the official W3-mSQL documentation, this
function is referred to as both <tt class="literal">gethostbyaddr</tt> and
<tt class="literal">gethostbyaddress</tt>. At the time of this writing
<tt class="literal">gethostbyaddress</tt> is incorrect and does not exist
as a function in W3-mSQL.</p></div>

<a name="INDEX-1741" /><a name="INDEX-1742" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
gethostbyname</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$hostinfo = gethostbyname($host) </pre></td><td align="right" /></tr></table><p>Returns an array of information about the given host. The first
element of the array is the name of the host and the second is the IP
number.</p></div>

<a name="INDEX-1743" /><a name="INDEX-1744" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
getpid</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$pid = getpid()</pre></td><td align="right" /></tr></table><p>Returns the process ID of the Lite program.</p></div>

<a name="INDEX-1745" /><a name="INDEX-1746" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
getpwnam</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$entry = getpwnam($username)</pre></td><td align="right" /></tr></table><p>Returns an array of information about the user with the username
<tt class="literal">username</tt>. The fields of the array are as follows:</p><ol><li><p>Username</p></li><li><p>Password</p></li><li><p>UID</p></li><li><p>GID</p></li><li><p>GECOS (Full name and other optional information)</p></li><li><p>Home directory</p></li><li><p>Shell</p></li></ol></div>

<a name="INDEX-1747" /><a name="INDEX-1748" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
getpwuid</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$entry = getpwuid($UID)</pre></td><td align="right" /></tr></table><p>Returns an array identical to that of <tt class="literal">getpwnam</tt> for
the user with the user ID <tt class="literal">$UID</tt>.</p></div>

<a name="INDEX-1749" /><a name="INDEX-1750" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
includeFile</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
includeFile($filename)</pre></td><td align="right" /></tr></table><p>This function includes the file <tt class="literal">filename</tt> into the
output of the program. The file is not modified or parsed in any way.</p></div>

<a name="INDEX-1751" /><a name="INDEX-1752" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
kill</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = kill($pid, $signal)</pre></td><td align="right" /></tr></table><p>Sends the signal <tt class="literal">signal</tt> to the process
<tt class="literal">pid</tt>. If the operation is unsuccessful, a negative
integer is returned.</p></div>

<a name="INDEX-1753" /><a name="INDEX-1754" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
link</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = link($file, $newlinkname)</pre></td><td align="right" /></tr></table><p>Creates a `hard' link from <tt class="literal">file</tt> to
<tt class="literal">newlinkname</tt>. If the operation is unsuccessful, a
negative integer is returned.</p></div>

<a name="INDEX-1755" /><a name="INDEX-1756" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
mkdir</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = mkdir($directoryname)</pre></td><td align="right" /></tr></table><p>Creates a directory with the given name. If the operation is
unsuccessful, a negative integer is returned.</p></div>

<a name="INDEX-1757" /><a name="INDEX-1758" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlConnect</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$socket = msqlConnect($host)</pre></td><td align="right" /></tr></table><p>Connects to the mSQL server on the host <tt class="literal">host</tt>. The
return value is the socket number used in a subsequence communication
with the database server. If unsuccessful, a negative integer is
returned.</p></div>

<a name="INDEX-1759" /><a name="INDEX-1760" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlClose</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
msqlClose($socket) </pre></td><td align="right" /></tr></table><p>Terminates the connection identified by <tt class="literal">socket</tt>.</p></div>

<a name="INDEX-1761" /><a name="INDEX-1762" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlDataSeek</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
msqlDataSeek($result, $location)</pre></td><td align="right" /></tr></table><p>This places the `pointer' for <tt class="literal">result</tt>
immediately before the row <tt class="literal">location</tt>. Setting the
location to <tt class="literal">0</tt> puts the pointer at the beginning of
the data. The next call to <tt class="literal">msqlFetchRow</tt> will
retrieve the row after <tt class="literal">location</tt>.</p></div>

<a name="INDEX-1763" /><a name="INDEX-1764" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlEncode</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$string = msqlEncode($string)</pre></td><td align="right" /></tr></table><p>This function returns a copy of <tt class="literal">string</tt> that is
safely encoded for use in a mSQL query.</p></div>

<a name="INDEX-1765" /><a name="INDEX-1766" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlFetchRow</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$row = msqlFetchRow($result)</pre></td><td align="right" /></tr></table><p>This function returns the next row of available data in
<tt class="literal">result</tt> as an array.</p></div>

<a name="INDEX-1767" /><a name="INDEX-1768" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlFieldSeek</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
msqlFieldSeek($result, $location)</pre></td><td align="right" /></tr></table><p>This changes the `pointer' of a result generated by
<tt class="literal">msqlInitFieldList</tt> in the same way that
<tt class="literal">msqlDataSeek</tt> effects results from
<tt class="literal">msqlStoreResult</tt>.</p></div>

<a name="INDEX-1769" /><a name="INDEX-1770" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlFreeResult</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
msqlFreeResult($result)</pre></td><td align="right" /></tr></table><p>This frees any memory used by a result retrieved with
<tt class="literal">msqlStoreResult</tt>. This function must be called for
each result when you are finished with it.</p></div>

<a name="INDEX-1771" /><a name="INDEX-1772" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlInitFieldList</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = msqlInitFieldList($socket, $database, $table)</pre></td><td align="right" /></tr></table><p>This creates a table of information about the table
<tt class="literal">table</tt> in the database <tt class="literal">database</tt>
on the server indicated by <tt class="literal">socket</tt>.</p></div>

<a name="INDEX-1773" /><a name="INDEX-1774" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlListDBs</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$databases = msqlListDBs($socket)</pre></td><td align="right" /></tr></table><p>Returns an array of the names of all of the databases available on
the server indicated by <tt class="literal">socket</tt>.</p></div>

<a name="INDEX-1775" /><a name="INDEX-1776" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlListField</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$tableinfo = msqlListField($result)</pre></td><td align="right" /></tr></table><p>Returns an array of information about the next field in the table
generated from <tt class="literal">msqlInitFieldList</tt>, indicated by
<tt class="literal">result</tt>. Each successive call to
<tt class="literal">msqlListField</tt> produces a new array until there are
no more fields left. The array consists of the following fields:</p><dl>
<dt><b>0</b></dt>
<dd><p>Field Name</p></dd>





<dt><b>1</b></dt>
<dd><p>Table Type</p></dd>





<dt><b>2</b></dt>
<dd><p>Type</p></dd>





<dt><b>3</b></dt>
<dd><p>Length</p></dd>





<dt><b>4</b></dt>
<dd><p>Flags</p></dd>

</dl></div>

<a name="INDEX-1777" /><a name="INDEX-1778" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlListTables</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$tables = msqlListTables($socket, $database)</pre></td><td align="right" /></tr></table><p>Returns an array of the names of the tables available on
<tt class="literal">database</tt> on the server indicated by
<tt class="literal">socket</tt>.</p></div>

<a name="INDEX-1779" /><a name="INDEX-1780" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlNumRows</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
msqlNumRows($result)</pre></td><td align="right" /></tr></table><p>Returns the number of rows of data contained in the result
<tt class="literal">result</tt>.</p></div>

<a name="INDEX-1781" /><a name="INDEX-1782" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlQuery</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = msqlQuery($socket, $query)</pre></td><td align="right" /></tr></table><p>This attempts to send to query <tt class="literal">query</tt> to the
connection <tt class="literal">socket</tt>. If the query was not
successfully executed, a negative integer is returned.</p></div>

<a name="INDEX-1783" /><a name="INDEX-1784" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlSelectDB</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = msqlSelectDB($socket, $database)</pre></td><td align="right" /></tr></table><p>This function attempts to set the connection
<tt class="literal">socket</tt> to use the database
<tt class="literal">database</tt>. If unsuccessful, a negative integer is
returned.</p></div>

<a name="INDEX-1785" /><a name="INDEX-1786" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
msqlStoreResult</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = msqlStoreResult</pre></td><td align="right" /></tr></table><p>Retrieves any data that was produced by the last
<tt class="literal">msqlQuery</tt> call and stores it for access and
manipulation.</p></div>

<a name="INDEX-1787" /><a name="INDEX-1788" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
open</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$fd = open($file, $mode)</pre></td><td align="right" /></tr></table><p>This function opens the given file using the given mode and
associates a file descriptor with the file. The defined modes are as
follows:</p><dl>
<dt><b>&gt;</b></dt>
<dd><p>Open the file for writing.</p></dd>





<dt><b>&lt;</b></dt>
<dd><p>Open the file for reading.</p></dd>





<dt><b>&lt;&gt;</b></dt>
<dd><p>Open the file for reading or writing.</p></dd>





<dt><b>&lt;P</b></dt>
<dd><p>Create a named pipe and open it for reading.</p></dd>





<dt><b>&gt;P</b></dt>
<dd><p>Create a named pipe and open it for writing.</p></dd>





<dt><b>&lt;|</b></dt>
<dd><p>Execute the file as a command and read the output.</p></dd>





<dt><b>&gt;|</b></dt>
<dd><p>Execute the file as a command and write to the process.</p></dd>

</dl></div>

<a name="INDEX-1789" /><a name="INDEX-1790" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
pid</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$pid = getppid()</pre></td><td align="right" /></tr></table><p>Returns the process ID of the process that is the parent of the Lite
program.</p></div>

<a name="INDEX-1791" /><a name="INDEX-1792" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
printf</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
printf($string [, arg, ... ])</pre></td><td align="right" /></tr></table><p>This works like the C (or Perl) function of the same name. Variables
in the string are not substituted; standard C
`<tt class="literal">%s</tt>' format must be used to insert
variables into the string.</p></div>

<a name="INDEX-1793" /><a name="INDEX-1794" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
read</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$data = read($fd, $length)</pre></td><td align="right" /></tr></table><p>Read <tt class="literal">length</tt> number of bytes from the specified
file descriptor.</p></div>

<a name="INDEX-1795" /><a name="INDEX-1796" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
readln</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$line = readln($fd)</pre></td><td align="right" /></tr></table><p>Read the next line from the specified file descriptor.</p></div>

<a name="INDEX-1797" /><a name="INDEX-1798" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
readtok</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$data = readtok($fd, $token)</pre></td><td align="right" /></tr></table><p>Read data from the specified file descriptor until the token is
encountered. Only the first character of <tt class="literal">token</tt> is
used.</p></div>

<div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>rename</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = rename($oldname, $newname)</pre></td><td align="right" /></tr></table><p>This attempts to rename of the specified file (or directory) from
<tt class="literal">oldname</tt> to <tt class="literal">newname</tt>. If the
operation is unsuccessful, a negative integer is returned.</p></div>

<a name="INDEX-1799" /><a name="INDEX-1800" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
rmdir</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = rmdir($path)</pre></td><td align="right" /></tr></table><p>This attempts to remove the given directory. If the operation is
unsuccessful, a negative integer is returned.</p></div>

<a name="INDEX-1801" /><a name="INDEX-1802" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
setContentType</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
setContentType($string)</pre></td><td align="right" /></tr></table><p>This function overrides the default content type of HTML page
containing the script and uses <tt class="literal">string</tt> in its
place. This function must be the very first line in the document to
work. Not even a blank line can precede it.</p></div>

<a name="INDEX-1803" /><a name="INDEX-1804" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
sleep</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
sleep($time)</pre></td><td align="right" /></tr></table><p>This stops the program for <tt class="literal">time</tt> number of seconds.</p></div>

<a name="INDEX-1805" /><a name="INDEX-1806" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
split</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$strings = split($string, $token)</pre></td><td align="right" /></tr></table><p>Splits the given string by the token character into an array of
strings.</p></div>

<a name="INDEX-1807" /><a name="INDEX-1808" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
stat</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$stat = stat($file)</pre></td><td align="right" /></tr></table><p>Returns an array of information about <tt class="literal">file</tt>. The
elements of the array are as follows:</p><ol><li><p>Inode number</p></li><li><p>File mode</p></li><li><p>Number of links to file</p></li><li><p>UID</p></li><li><p>GID</p></li><li><p>Size of file</p></li><li><p>Atime</p></li><li><p>Mtime</p></li><li><p>Ctime</p></li><li><p>Block size of file system (in bytes)</p></li><li><p> Number of file system block used</p></li></ol></div>

<a name="INDEX-1809" /><a name="INDEX-1810" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
strftime</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$time = strftime($format, $time)</pre></td><td align="right" /></tr></table><p>This converts a Unix time into a text representation of the time
using <tt class="literal">format</tt> as a guide. Any of the following
sequences in <tt class="literal">format</tt> are replaced with their
corresponding value:</p><dl>
<dt><b>%a</b></dt>
<dd><p>Day of week, using locale's abbreviated weekday names</p></dd>





<dt><b>%A</b></dt>
<dd><p>Day of week, using locale's full weekday names</p></dd>





<dt><b>%b</b></dt>
<dd><p>Month, using locale's abbreviated month names</p></dd>





<dt><b>%B</b></dt>
<dd><p>Month, using locale's full month names</p></dd>





<dt><b>%d</b></dt>
<dd><p>Day of month (01-31)</p></dd>





<dt><b>%D</b></dt>
<dd><p>Date as %m/%d/%y</p></dd>





<dt><b>%e</b></dt>
<dd><p>Day of month (1-31 with single digits preceded by a space)</p></dd>





<dt><b>%H</b></dt>
<dd><p>Hour (00-23)</p></dd>





<dt><b>%I</b></dt>
<dd><p>Hour (00-12)</p></dd>





<dt><b>%j</b></dt>
<dd><p>Day of year (001-366)</p></dd>





<dt><b>%k</b></dt>
<dd><p>Hour (0-23, blank padded)</p></dd>





<dt><b>%l</b></dt>
<dd><p>hour (1-12, blank padded)</p></dd>





<dt><b>%m</b></dt>
<dd><p>Month number (01-12)</p></dd>





<dt><b>%M</b></dt>
<dd><p>Minute (00-59)</p></dd>





<dt><b>%p</b></dt>
<dd><p>AM or PM</p></dd>





<dt><b>%S</b></dt>
<dd><p>Seconds (00-59)</p></dd>





<dt><b>%T</b></dt>
<dd><p>Time as %H:%M:%S</p></dd>





<dt><b>%U</b></dt>
<dd><p>Week number in year (01-52)</p></dd>





<dt><b>%w</b></dt>
<dd><p>Day of week (0-6, Sunday being 0)</p></dd>





<dt><b>%y</b></dt>
<dd><p>Year within the century (00-99)</p></dd>





<dt><b>%Y</b></dt>
<dd><p>Year including century (e.g., 1999)</p></dd>

</dl></div>

<div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>strseg</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$string = strseg($string, $start, $end)</pre></td><td align="right" /></tr></table><p>Returns the substring of the given string which starts at
<tt class="literal">start</tt> characters and ends at
<tt class="literal">end</tt> characters from the beginning of the string.</p></div>

<a name="INDEX-1811" /><a name="INDEX-1812" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
sub</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$string = sub($string, $expr1, $expr2)</pre></td><td align="right" /></tr></table><p>This substitutes any occurrences of <tt class="literal">expr1</tt> in
<tt class="literal">string</tt> with <tt class="literal">expr2</tt>. The values
of <tt class="literal">expr1</tt> and <tt class="literal">expr2</tt> may differ
in length; <tt class="literal">string</tt> will be lengthened or shortened
automatically.</p></div>

<a name="INDEX-1813" /><a name="INDEX-1814" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
substr</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$string = substr($string1, $regexp, $string2)</pre></td><td align="right" /></tr></table><p>This finds the substrings of <tt class="literal">string1</tt> that match
the regular expression <tt class="literal">regexp</tt>. For each part of
the regular expression enclosed in parenthesis that matches, the
corresponding variable <tt class="literal">$1</tt>, <tt class="literal">$2</tt>,
<tt class="literal">$3</tt>, etc. is set with the value of the match. The
value of <tt class="literal">string2</tt> is returned with variables
(including <tt class="literal">$1</tt>, <tt class="literal">$2</tt>,
<tt class="literal">$3</tt>, etc.) expanded.</p></div>

<a name="INDEX-1815" /><a name="INDEX-1816" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
symlink</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = symlink($file, $newlinkname)</pre></td><td align="right" /></tr></table><p>This attempts to create a symbolic link from <tt class="literal">file</tt>
to <tt class="literal">newlinkname</tt>. This function is only supported on
some operating systems. If the operation is unsuccessful, a negative
integer is returned.</p></div>

<a name="INDEX-1817" /><a name="INDEX-1818" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
system</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = system($command)</pre></td><td align="right" /></tr></table><p>This function spawns a shell and executes <tt class="literal">command</tt>.
Any output of the command is redirected to the output of the program.</p></div>

<a name="INDEX-1819" /><a name="INDEX-1820" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
test</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = test($test, $filename)</pre></td><td align="right" /></tr></table><p>This performs the test <tt class="literal">test</tt> on the file
<tt class="literal">filename</tt>. If the test is successful, 1 is
returned, otherwise
is returned. The available tests are as follows:</p><dl>
<dt><b>b</b></dt>
<dd><p>Block mode device</p></dd>





<dt><b>c</b></dt>
<dd><p>Character mode device</p></dd>





<dt><b>d</b></dt>
<dd><p>Directory</p></dd>





<dt><b>p</b></dt>
<dd><p>Named pipe</p></dd>





<dt><b>s</b></dt>
<dd><p>Nonempty regular file</p></dd>





<dt><b>f</b></dt>
<dd><p>Regular file</p></dd>





<dt><b>u</b></dt>
<dd><p>Setuid file</p></dd>





<dt><b>g</b></dt>
<dd><p>Setgid file</p></dd>

</dl></div>

<div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>time</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$time = time()</pre></td><td align="right" /></tr></table><p>Returns the number of seconds since the epoch (00:00:00 GMT, Jan. 1,
1970).</p></div>

<a name="INDEX-1821" /><a name="INDEX-1822" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
time2unixtime</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$time = time2unixtime($sec, $min, $hour, $day, $month, $year)</pre></td><td align="right" /></tr></table><p>This converts the values for a time into the Unix form of the time
(which is the number of seconds since the epoch).</p></div>

<a name="INDEX-1823" /><a name="INDEX-1824" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
tr</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$string = tr($string, $list1, $list2)</pre></td><td align="right" /></tr></table><p>Substitutes all of the characters in <tt class="literal">list1</tt> that
exist in <tt class="literal">string</tt> with the equivalent character in
<tt class="literal">list2</tt> (e.g.,<tt class="literal">
tr(</tt>"<tt class="literal">Robby","oy","ai")</tt> would return the
string "Rabbi"). The list of characters can contain a
range of characters separated with <tt class="literal">"-"</tt>. For
instance, <tt class="literal">tr("e.e. cummings", "a-z," "A-Z")</tt> will
return the string "E.E. CUMMINGS."</p></div>

<a name="INDEX-1825" /><a name="INDEX-1826" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
truncate</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = truncate($file, $length)</pre></td><td align="right" /></tr></table><p>This attempts to truncate the given file to <tt class="literal">length</tt>
bytes. This is usually used to create a zero-length file. If the
operation is unsuccessful, a negative integer is returned.</p></div>

<a name="INDEX-1827" /><a name="INDEX-1828" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
umask</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
umask($mask)</pre></td><td align="right" /></tr></table><p>This sets the umask of the current process to
<tt class="literal">mask</tt>. The value <tt class="literal">mask </tt>can be
given in decimal, octal, or hexadecimal.</p></div>

<a name="INDEX-1829" /><a name="INDEX-1830" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
unixtime2*</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$year = unixtime2year($time)
$month = unixtime2month($time)
$day = unixtime2day($time)
$hour = unixtime2hour($time)
$min = unixtime2min($time)
$sec = unixtime2sec($time)</pre></td><td align="right" /></tr></table><p>These functions take a Unix time value and return the requested
value. For example, <tt class="literal">unixtime2day(time())</tt>, would
return the current day of the month (a value between 1 and 31).</p></div>

<a name="INDEX-1831" /><a name="INDEX-1832" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
unlink</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$result = unlink("filename")</pre></td><td align="right" /></tr></table><p>This deletes the specified file. If the operation is unsuccessful, a
negative integer is returned.</p></div>

<a name="INDEX-1833" /><a name="INDEX-1834" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>
urlEncode</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left"><pre>
$string = urlEncode($string)</pre></td><td align="right" /></tr></table><p>This function returns a copy of <tt class="literal">string</tt> that is
safely encoded for insertion into a URL.</p></div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch18_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch19_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">18. PHP and Lite Reference</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">19. C Reference</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>