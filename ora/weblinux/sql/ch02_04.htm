<?label 2.4. Physical Database Design?><html><head><title>Physical Database Design (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch03_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">2.4. Physical Database Design</h2>





<p>
<a name="INDEX-70" />What was
the point in creating the logical data model? You want to create a
database to store data about <tt class="literal">CD</tt>s. The data model
is only an intermediate step along the way. Ultimately, you would
like to end up with a MySQL or mSQL database where you can store
data. How do you get there? Physical database design translates your
logical data model into a set of SQL statements that define your
MySQL or mSQL database.</p>





<p>Since MySQL and mSQL are relational database systems, it is
relatively easy to translate from a logical data model, such as the
one we described earlier, into a physical MySQL or mSQL database.
Here are the rules for translation:</p>




<ol><li><p>Entities become tables in the physical database.</p></li><li><p>Attributes become columns in the physical database. You have to
choose an appropriate datatype for each of the columns.</p></li><li><p>Unique identifiers become columns that are not allowed to have
<tt class="literal">NULL</tt>s. These are called <em class="emphasis">primary keys</em> in the
physical database. You may also choose to create a unique index on
the identifiers to enforce uniqueness. For your purposes, mSQL does
not have a concept of a primary key. It simply has unique indices.
This issue does not apply to MySQL.</p></li><li><p>Relationships are modeled as <em class="emphasis">foreign keys</em>. We
will cover this later.</p></li></ol>

<p>If we apply these rules to our data model -- minus the
<tt class="literal">Record Label</tt> address information -- we will end
up with the physical database described in <a href="ch02_04.htm">Table 2-1</a>.</p>





<a name="ch02-32458" /><h4 class="objtitle">Table 2-1. Physical Table Definitions for the CD Database </h4><table border="1">





<tr>
<th>
<p>Table</p></th>
<th>
<p>Column</p></th>
<th>
<p>Datatype</p></th>
<th>
<p>Notes</p></th>
</tr>










<tr>
<td>
<p>CD</p></td>
<td>
<p>CDId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>CDTitle</p></td>
<td>
<p>TEXT(50)</p></td>
<td />
</tr>




<tr>
<td>
<p>Artist</p></td>
<td>
<p>ArtistId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>ArtistName</p></td>
<td>
<p>TEXT(50)</p></td>
<td />
</tr>




<tr>
<td>
<p>Song</p></td>
<td>
<p>SongId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>SongName</p></td>
<td>
<p>TEXT(50)</p></td>
<td />
</tr>




<tr>
<td>
<p>RecordLabel</p></td>
<td>
<p>RecordLabelId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>RecordLabelName</p></td>
<td>
<p>TEXT(50)</p></td>
<td>
<p>primary key</p></td>
</tr>





</table>





<p>
<a name="INDEX-71" />
<a name="INDEX-72" />The first thing you may notice is that all
of the spaces are gone from the entity names in our physical schema.
This is because these names need to translate into SQL calls to
create these tables. Table names should thus conform to SQL naming
rules. Another thing to notice is that we made all primary keys of
type <tt class="literal">INT</tt>. Because these attributes are complete
inventions on our part, they can be of any indexible
datatype.<a href="#FOOTNOTE-3">[3]</a> The fact that they are of
type <tt class="literal">INT</tt> here is almost purely arbitrary. It is
<em class="emphasis">almost</em> arbitrary because it is actually faster
to search on numeric fields in many database engines and hence
numeric fields make good primary keys. However, we could have chosen
<tt class="literal">CHAR</tt> as the type for the primary key fields and
everything would work just fine. The bottom line is that this choice
should be driven by your criteria for choosing identifiers.</p><blockquote>




<a name="FOOTNOTE-3" /><p>[3]Later in this book, we will cover the
datatypes supported by MySQL and mSQL. Each database engine has
different rules about which datatypes can be indexible. Neither
database, for example, allows indices to be created on whole
<tt class="literal">TEXT</tt> fields. It would therefore be inappropriate
to have a primary key column be of type
<tt class="literal">TEXT</tt>.</p>




</blockquote>





<p>
<a name="INDEX-73" />
<a name="INDEX-74" />The
rest of the columns are set to be of type <tt class="literal">TEXT</tt>
with a length of 50. This definition works for both MySQL and mSQL.
For MySQL, however, <tt class="literal">VARCHAR</tt> would be a better
choice but not important to this example. Picking the right datatype
for columns is very important, but we will not dwell on it here since
we have not yet covered the datatypes for MySQL and mSQL.</p>





<p>We now have a starting point for a physical schema. We haven't
yet translated the relationships into the physical data model. As we
discussed earlier, once you have refined your data model, you should
have mostly 1-to-1 and 1-to-M relationships -- the M-to-M
relationships were resolved via junction tables. We model
relationships by adding a foreign key to one of the tables involved
in the relationship. A foreign key is the unique identifier or
primary key of the table on the other side of the
relationship.<a name="INDEX-75" /></p>





<p>
<a name="INDEX-76" />The most common relationship is
the 1-to-M relationship. This relationship is mapped by placing the
primary key on the "one" side of the relationship into
the table on the "many" side. In our example, this rule
means that we need to do the following:</p>




<ul><li><p>Place a <tt class="literal">RecordLabelId</tt> column in the
<tt class="literal">CD</tt> table.</p></li><li><p>Place a <tt class="literal">CDId</tt> column in the <tt class="literal">Song</tt>
table.</p></li><li><p>Place an <tt class="literal">ArtistId</tt> column in the
<tt class="literal">Song</tt> table.</p></li></ul>

<p><a href="ch02_04.htm">Table 2-2</a> shows the new schema.</p>





<a name="ch02-11117" /><h4 class="objtitle">Table 2-2. The Physical Data Model for the CD Database </h4><table border="1">





<tr>
<th>
<p>Table</p></th>
<th>
<p>Column</p></th>
<th>
<p>Datatype</p></th>
<th>
<p>Notes</p></th>
</tr>










<tr>
<td>
<p>CD</p></td>
<td>
<p>CdId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>CDTitle</p></td>
<td>
<p>TEXT(50)</p></td>
<td />
</tr>




<tr>
<td />
<td>
<p>RecordLabelId</p></td>
<td>
<p>INT</p></td>
<td>
<p>foreign key</p></td>
</tr>




<tr>
<td>
<p>Artist</p></td>
<td>
<p>ArtistId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>ArtistName</p></td>
<td>
<p>TEXT(50)</p></td>
<td />
</tr>




<tr>
<td>
<p>Song</p></td>
<td>
<p>SongId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>SongName</p></td>
<td>
<p>TEXT(50)</p></td>
<td />
</tr>




<tr>
<td />
<td>
<p>CdId</p></td>
<td>
<p>INT</p></td>
<td>
<p>foreign key</p></td>
</tr>




<tr>
<td />
<td>
<p>ArtistId</p></td>
<td>
<p>INT</p></td>
<td>
<p>foreign key</p></td>
</tr>




<tr>
<td>
<p>RecordLabel</p></td>
<td>
<p>RecordLabelId</p></td>
<td>
<p>INT</p></td>
<td>
<p>primary key</p></td>
</tr>




<tr>
<td />
<td>
<p>RecordLabelName</p></td>
<td>
<p>TEXT(50)</p></td>
<td />
</tr>





</table>





<p>We do not have any 1-to-1 relationships in this data model. If we did
have such a relationship, it should be mapped by picking one of the
tables and giving it a foreign key column that matches the primary
key from the other table. In theory, it does not matter which table
you choose, but practical considerations may dictate which column
makes the most sense as a foreign key.</p>





<p>We now have a complete physical database schema ready to go. The last
remaining task is to translate that schema into SQL. For each table
in the schema, you write one <tt class="literal">CREATE
TABLE</tt>
<a name="INDEX-77" /> statement. Typically, you will choose
to create unique indices on the primary keys to enforce uniqueness.</p>





<p>We are, in a sense, jumping ahead at this point. You may not be
familiar with SQL yet, and it is not the purpose of this chapter to
introduce the MySQL and mSQL variants of SQL. Nevertheless, here are
two sample scripts to create the CD database. The first script, <a href="ch02_04.htm">Example 2-1</a> is for MySQL. <a href="ch02_04.htm">Example 2-2</a> is
for mSQL.<a name="INDEX-78" />
<a name="INDEX-79" />
<a name="INDEX-80" /></p>





<a name="ch02-80918" /><div class="example">
<h4 class="objtitle">Example 2-1. An Example Script for Creating the CD Database in MySQL </h4>




<blockquote><pre class="code">CREATE TABLE CD (CD_ID INT NOT NULL,
	         RECORD_LABEL_I INT,
       CD_TITLE TEXT,
       PRIMARY KEY (CD_ID))
CREATE TABLE Artist (ARTIST_ID INT NOT NULL, 
       ARTIST_NAME  TEXT,
		     PRIMARY KEY (ARTIST_ID))
CREATE TABLE Song (SONG_ID INT NOT NULL, 
                   CD_ID INT,
                   SONG_NAME TEXT,
                   PRIMARY KEY (SONG_ID))
CREATE TABLE RecorLabel (RECORD_LABEL_ID INT NOT NULL,
			  RECORD_LABEL_NAME TEXT,
			  PRIMARY KEY(RECORD_LABEL_ID))</pre></blockquote>
</div>





<a name="ch02-11187" /><div class="example">
<h4 class="objtitle">Example 2-2. An Example Script for Creating the CD Database in mSQL </h4>




<blockquote><pre class="code">CREATE TABLE CD (CD_ID            INT NOT NULL,
                 RECORD_LABEL_ID  INT,
                 CD_TITLE         TEXT(50))
CREATE UNIQUE INDEX CD_IDX ON CD (CD_ID)
CREATE TABLE Artist (ARTIST_ID     INT NO NULL,
                     ARTIST_NAME   TEXT(50))
CREATE UNIQUE INDEX Artist_IDX ON Artist (ARTIST_ID)
CREATE TABLE Song (SONG_ID         INT NOT NULL,
                   CD_ID           INT,
                   SONG_NAME       TEXT(50))
CREATE UNIQUE INDEX Song_IDX ON Song (SONG_ID)
CREATE TABLE RecordLabel (RECORD_LABEL_ID   INT NOT NULL,
                          RECORD_LABEL_NAME TEXT(50))
CREATE UNIQUE INDEX RecordLabel_IDX 
                   ON RecordLabel(RECORD_LABEL_ID)</pre></blockquote>
</div>





<p>Data models are meant to be database independent. You can therefore
take the techniques and the data model we have generated in this
chapter and apply them not only to MySQL and mSQL, but to Oracle,
Sybase, Ingres, or any other relational database engine. In the
following chapters, we will discuss the details of how you can merge
your new database design knowledge into MySQL and mSQL.</p>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch02_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch03_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">2.3. A Logical Data Modeling Methodology</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">3. Installation</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>