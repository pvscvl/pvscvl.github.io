<?label 14. Java and JDBC?><html><head><title>Java and JDBC (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 14. Java and JDBC</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch14_01.htm">What Is JDBC?</a><br />
<a href="ch14_02.htm">Simple Database Access
</a><br />
<a href="ch14_03.htm">Dynamic Database Access
</a><br />
<a href="ch14_04.htm">A Guest Book Servlet
</a><br /></p></div>










<p>
<a name="INDEX-831" />In <a href="ch13_01.htm">Chapter 13, "C and C++"</a>, we
introduced you to the C APIs for MySQL and mSQL. Unfortunately, each
API only enables you to program for the database it supports. If you
are looking to port an application between MySQL and mSQL, or even
worse, if you are looking to make an application work on
<a name="INDEX-832" />
<a name="INDEX-833" />Oracle or Sybase or any other database
engine, you must rewrite your database code to make use of that
database engine's proprietary API. Java programmers, however,
are mostly freed from database portability issues. They have a single
API, the <a name="INDEX-834" />Java DataBase Connectivity API (JDBC), that
provides them with a unified interface into all SQL
databases.<a name="INDEX-835" /></p>





<p>Because JDBC is a single interface to all databases, you need only to
learn it in order to be able to write applications that run on both
MySQL and mSQL. In fact, as long as you write proper JDBC code, the
Java applications you write will be able to run against any database
engine. If you have access to a database other than MySQL or mSQL,
you should give this claim a test by running this chapter's
examples on that database.</p>





<p>In this chapter, we are assuming a basic understanding of the Java
programming language and Java concepts. If you do not already have
this background, we strongly recommend taking a look at
<em class="emphasis">Exploring Java</em> (O'Reilly &amp; Associates,
Inc.). For more details on how to build the sort of three-tier
database applications we discussed in <a href="ch08_01.htm">Chapter 8, "Database Application Architectures"</a>,
take a look at <em class="emphasis">Database Programming with JDBC and Java
</em> (O'Reilly &amp; Associates, Inc.).</p>


































<div class="sect1"><a name="ch14-37766" />
<h2 class="sect1">14.1. What Is JDBC?</h2>





<p>Like all Java APIs, JDBC is a set of classes and interfaces that work
together to support a specific set of functionality. In the case of
JDBC, this functionality is naturally database access. The classes
and interfaces that make up the JDBC API are thus abstractions from
concepts common to database access for any kind of database. A
<tt class="literal">Connection</tt>
<a name="INDEX-836" />
<a name="INDEX-837" />, for example, is a Java interface
representing a database connection. Similarly, a
<tt class="literal">ResultSet</tt> represents a result set of data returned
from a SQL <tt class="literal">SELECT</tt> statement. Java puts the classes
that form the JDBC API together in the <tt class="literal">java.sql</tt>
package which Sun introduced in JDK 1.1.</p>





<p>The details of database access naturally differ from vendor to
vendor. JDBC does not actually deal with those details. Most of the
classes in the <tt class="literal">java.sql</tt> package are in fact
interfaces -- and thus no implementation details. Individual
database vendors provide implementations of these interfaces in the
form of something called a JDBC driver. As a database programmer,
however, you need to know only a few details about the driver you are
using -- the rest you manage via the JDBC interfaces. The vendor
specific information you need in order to use JDBC includes:</p>




<ul><li><p>The JDBC URL for the driver</p></li><li><p>The name of the class that implements<tt class="literal">
java.sql.Driver</tt></p></li></ul>

<a name="ch14-1-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>The new <a name="INDEX-838" />JDBC 2.0 specification adds an
optional standard extension API for vendors to implement. If your
JDBC vendor implements this standard extension, you do not even need
to know the JDBC URL or <tt class="literal">Driver</tt> class
implementation. It prescribes a
<tt class="literal">DataSource</tt>
<a name="INDEX-839" /> class that you can look up by a
configurable name in a JNDI<a href="#FOOTNOTE-22">[22]</a>-supported directory.</p><blockquote>




<a name="FOOTNOTE-22" /><p>[22]JNDI is the Java Naming
and Directory Interface API. It lets you store Java objects in a
naming and directory service like an Lightweight Directory Access
Protocol (LDAP) server and then look them up by name.</p>




</blockquote>
</blockquote>





<p>Both of these items can be supplied at runtime, either on the command
line or in a properties file. Your code never needs to mention these
two implementation-dependent pieces. <a name="INDEX-840" />We will cover what the JDBC URL and
<tt class="literal">Driver</tt> class do in a few paragraphs when we cover
database connections. <a href="ch14_01.htm">Figure 14-1</a> diagrams the
interfaces of JDBC.</p>





<a name="ch14-34991" /><div class="figure"><img width="502" src="figs/MSQL.1401.gif" height="303" alt="Figure 14-1" /></div><h4 class="objtitle">Figure 14-1. The classes and interfaces of the JDBC API</h4>

<a name="ch14-2-fm2xml" /><div class="sect2">
<a name="INDEX-841" /><h3 class="sect2">14.1.1. The Database Connection</h3>





<p>Your first step is to connect to the database. One of the few
implementation classes in the
<tt class="literal">java.sql.package</tt>
<a name="INDEX-842" /> is the
<tt class="literal">DriverManager</tt>
<a name="INDEX-843" /> class. It maintains a list of JDBC
implementations and provides you with database connections based on
JDBC URLs you provide it. A JDBC URL comes in the form of
<em class="emphasis">jdbc:protocol:subprotocol</em>. It tells a
<tt class="literal">DriverManager</tt> which database engine you wish to
connect to and it provides the <tt class="literal">DriverManager</tt> with
enough information to make a connection.</p>





<a name="ch14-3-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>
<a name="INDEX-844" />JDBC
uses the word "driver" in multiple contexts. In the
lower-case sense, a JDBC driver is the collection of classes that
together implement all of the JDBC interfaces and provide an
application with access to at least one database. In the upper-case
sense, the <tt class="literal">Driver</tt> is the class that implements
<tt class="literal">java.sql.Driver</tt>. Finally, JDBC provides a
<tt class="literal">DriverManager</tt> that can be used to keep track of
all of the different <tt class="literal">Driver</tt> implementations.</p>
</blockquote>





<p>
<a name="INDEX-845" />
<a name="INDEX-846" />The protocol part of the URL refers
to a given JDBC driver. In the case of MySQL and mSQL, the protocol
is <em class="emphasis">mysql</em> and <em class="emphasis">msql</em>,
respectively. The subprotocol provides the implementation-specific
connection data. Both MySQL and mSQL require a host name and database
name in order to make a connection. Optionally, they may require a
port if your database engine is not running as root. The full mSQL
URL therefore looks like: <em class="emphasis">jdbc:msql://athens.imaginary.com:1114/test</em>.
It says that the <tt class="literal">DriverManager</tt> should find the
mSQL JDBC driver and connect to the database test at
<em class="emphasis">athens.imaginary.com</em> on port 1114. All of this
is done via a single call to the <tt class="literal">DriverManager</tt>
<tt class="literal">getConnection()</tt>
<a name="INDEX-847" /> method. <a href="ch14_01.htm">Example 14-1</a>
shows how to make a connection to an mSQL database.<a name="INDEX-848" /></p>





<a name="ch14-65340" /><div class="example">
<h4 class="objtitle">Example 14-1. A Code Snippet from the Examples that Come with the Imaginary JDBC Driver for mSQL Showing How to Make a Connection </h4>




<blockquote><pre class="code">import java.sql.*;

public class Connect {
    public static void main(String argv[]) {
        Connection con = null;

        try {
            // here is the JDBC URL for this database
            String url = "jdbc:msql://athens.imaginary.com:1114/db_test";
            // more on what the Statement and ResultSet classes do later
            Statement stmt;
            ResultSet rs; 

            // either pass this as a property, i.e.
            // -Djdbc.drivers=com.imaginary.sql.msql.MsqlDriver
            // or load it here like we are doing in this example
            Class.forName("com.imaginary.sql.msql.MsqlDriver");
            // here is where the connection is made   
            con = DriverManager.getConnection(url, "borg", ""); 
        }
        catch( SQLException e ) {
            e.printStackTrace();
        }
        finally {
            if( con != null ) {
                try { con.close(); }
                catch( Exception e ) { }
            }
        }
    }
}</pre></blockquote>
</div>





<p>The line <tt class="literal">con = DriverManager.getConnection(url, "borg",
"")</tt> makes the database connection in this example. In this
case, the JDBC URL and <tt class="literal">Driver</tt> implementation class
names are actually hard coded into this application. The only reason
this is acceptable is because this application is a demo for the
mSQL-JDBC driver. For a serious application, you would want to load
this information from a properties file, pass it as command line
arguments, or pass it as system properties. The
<tt class="literal">Driver</tt> implementation will automatically be loaded
if you pass it as the system property
<em class="emphasis">jdbc.drivers</em> -- in other words, you do not
have to call
<tt class="literal">Class.forName().newInstance(driver_name)</tt> when you
pass the driver name as the <em class="emphasis">jdbc.drivers</em> system
property. The second and third arguments to
<tt class="literal">getConnection()</tt> are the user ID and password to
use for the connection. Because mSQL does not use passwords for user
authentication, this example just uses an empty string. In MySQL,
however, you will need to provide a password.<a href="#FOOTNOTE-23">[23]</a>
<a name="INDEX-849" /></p><blockquote>




<a name="FOOTNOTE-23" /><p>[23]MySQL
actually has several JDBC drivers. At least one of them allows you to
specify the user ID and password as part of the URL.</p>




</blockquote>
</div>
















<a name="ch14-4-fm2xml" /><div class="sect2">
<h3 class="sect2">14.1.2. Maintaining Portability Using Properties Files</h3>





<p>
<a name="INDEX-850" />
<a name="INDEX-851" />
<a name="INDEX-852" />Though our focus is on two specific databases, it is good Java
programming practice to make your applications completely portable.
To most people, portability means that you do not write code that
will run on only one platform. In the Java world, however, the word
"portable" is a much stronger term. It means no hardware
resource dependencies, and that means no database dependencies.</p>





<p>We discussed how the JDBC URL and <tt class="literal">Driver</tt> name are
implementation dependent, but we did not discuss how to avoid hard
coding them. Because both are simple strings, you can pass them on
the command line as runtime arguments or as parameters to applets.
While that solution works, it is hardly elegant since it requires
command line users to remember long command lines. A similar solution
might be to prompt the user for this information; but again, you are
requiring that the user remember a JDBC URL and a Java class name
each time they run an application.</p>





<p>A more elegant solution than either of the above solutions would be
to use a properties file. Properties files are supported by the
<tt class="literal">java.util.ResourceBundle</tt> and its subclasses to
enable an application to extract runtime specific information from a
text file. For a JDBC application, you can stick the URL and
<tt class="literal">Driver</tt> name in the properties file, leaving the
details of the connectivity up to an application administrator. <a href="ch14_01.htm">Example 14-1</a> shows a properties file that provides
connection information.</p>





<a name="ch14-10037" /><div class="example">
<h4 class="objtitle">Example 14-1. The SelectResource.properties File with Connection Details for a Connection </h4>

<a name="INDEX-853" />



<blockquote><pre class="code">Driver=com.imaginary.sql.msql.MsqlDriver
URL=jdbc:msql://athens.imaginary.com:1114/db_test</pre></blockquote>
</div>





<p><a href="ch14_01.htm">Example 14-2</a> shows the portable
<tt class="literal">Select</tt> class.</p>





<a name="ch14-98392" /><div class="example">
<h4 class="objtitle">Example 14-2. Specific Information </h4>




<blockquote><pre class="code">import java.sql.*;
import java.util.*;

public class Connect {
    public static void main(String argv[]) {
        Connection con = null;
        ResourceBundle bundle = ResourceBundle.getBundle("SelectResource");

        try {
            String url = bundle.getString("URL");
            Statement stmt;
            ResultSet rs; 

             Class.forName(bundle.getString("Driver"));
            // here is where the connection is made   
            con = DriverManager.getConnection(url, "borg", ""); 
        }
        catch( SQLException e ) {
            e.printStackTrace();
        }
        finally {
            if( con != null ) {
                try { con.close(); }
                catch( Exception e ) { }
            }
        }
    }
}</pre></blockquote>
</div>





<p>We have gotten rid of anything specific to mSQL in the sample
connection code. One important issue still faces portable JDBC
developers -- one that stings mSQL developers in particular. JDBC
requires any driver to support SQL2 entry level. This is an ANSI
standard for minimum SQL support. As long as you use SQL2 entry level
SQL in your JDBC calls, your application will be 100% portable to
other database engines. Unfortunately, while MySQL is SQL2 entry
level, mSQL is not. Applications you write for mSQL will very likely
port to other databases without issue, but applications written to
use the full range of SQL92 entry level will not port back to mSQL
without pain.<a name="INDEX-854" />
<a name="INDEX-855" />
<a name="INDEX-856" /></p>
</div>
</div>








































































































<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch13_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch14_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">13.2. Object-oriented Database Access in C++</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">14.2. Simple Database Access
</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>