<?label 22. JDBC Reference?><html><head><title>JDBC Reference (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch21_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="index/index.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />



<h1 class="chapter">Chapter 22. JDBC Reference</h1>










<p>The<tt class="literal"> java.sql</tt>
<a name="INDEX-2028" /> package contains the entire
<a name="INDEX-2029" />JDBC API. It first
became part of the core Java libraries with the 1.1 release. Classes
new as of JDK 1.2 are indicated by the "Availability"
header. Deprecated methods are preceded by a <a name="INDEX-2030" />
<a name="INDEX-2031" />hash (#) mark. New JDK 1.2
methods in old JDK 1.1 classes are shown in bold. <a href="ch22_01.htm">Figure 22-1</a> shows the entire <tt class="literal">java.sql</tt>
package.</p>





<a name="ch22-22497" /><div class="figure"><img width="502" src="figs/MSQL.2201.gif" height="366" alt="Figure 22-1" /></div><h4 class="objtitle">Figure 22-1. The classes and interfaces of the java.sql package</h4>



































<a name="INDEX-2032" /><a name="INDEX-2033" /><a name="INDEX-2034" /><a name="INDEX-2035" /><a name="INDEX-2036" /><a name="INDEX-2037" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Array</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name:<tt class="literal">	java.sql.Array</tt></p>

<p>Superclass:	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	New as of JDK 1.2</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>The <tt class="literal">Array</tt>
<a name="INDEX-2032" /> interface is a new addition to JDBC
that supports <a name="INDEX-2033" />SQL3 array objects. The default duration
of a reference to a SQL array is for the life of the transaction in
which it was created.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Array {
    Object getArray() throws SQLException;
    Object getArray(Map map) throws SQLException;
    Object getArray(long index, int count) 
        throws SQLException;
    Object getArray(long index, int count, Map map)
        throws SQLException;
    int getBaseType() throws SQLException;
    String getBaseTypeName() throws SQLException;
    ResultSet getResultSet() throws SQLException;
    ResultSet getResultSet(Map map) throws SQLException;
    ResultSet getResultSet(long index, int count)
        throws SQLException;
    ResultSet getResultSet(long index, int count, 
                           Map map) throws SQLException
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2034" />getArray(  )</b></dt>

<dd><blockquote><pre class="code">public Object getArray() throws SQLException
public Object getArray(Map map) throws SQLException
public Object getArray(long index, int count) 
    throws SQLException
public Object getArray(long index, int count, Map map)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Place the contents of this SQL
array into a Java language array or, instead, into the Java type
specified by a provided Map. If a map is specified but no match is
found in there, then the default mapping to a Java array is used. The
two versions that accept an array index and element count enable you
to place a subset of the elements in the array.</p></dd>





<dt><b>
<a name="INDEX-2035" />getBaseType(  )</b></dt>

<dd><blockquote><pre class="code">public int getBaseType() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the JDBC type of the
elements of this array.</p></dd>





<dt><b>
<a name="INDEX-2036" />getBaseTypeName(  )</b></dt>

<dd><blockquote><pre class="code">public String getBaseTypeName() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the SQL type name for the
elements of this array.</p></dd>





<dt><b>
<a name="INDEX-2037" />getResultSet(  )</b></dt>

<dd><blockquote><pre class="code">public ResultSet getResultSet() throws SQLException
public ResultSet getResultSet(Map map) 
    throws SQLException
public ResultSet getResultSet(long index, int count)
    throws SQLException
public ResultSet getResultSet(long index, int count, 
                              Map map)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides a result set that contains
the array's elements as rows. If appropriate, the elements are
mapped using the type map for the connection, or the specified type
map if you pass one. Each row contains two columns: the first column
is the index number (starting with 1), and the second column is the
actual value.</p></dd>

</dl>





</div>

<a name="INDEX-2038" /><a name="INDEX-2039" /><a name="INDEX-2040" /><a name="INDEX-2041" /><a name="INDEX-2042" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Blob</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: 	<tt class="literal">java.sql.Blob</tt></p>

<p>Superclass: 	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	New as of JDK 1.2</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>The JDBC <tt class="literal">Blob</tt>
<a name="INDEX-2038" /> interface represents a SQL
<tt class="literal">BLOB</tt>.
<tt class="literal">BLOB</tt>
<a name="INDEX-2039" /> stands for "binary large
object" and is a relational database representation of a large
piece of binary data. The value of using a <tt class="literal">BLOB</tt> is
that you can manipulate the <tt class="literal">BLOB</tt> as a Java object
without retrieving all of the data behind the <tt class="literal">BLOB</tt>
from the database. A <tt class="literal">BLOB</tt> object is only valid for
the duration of the transaction in which it was created.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Blob {
    InputStream getBinaryStream() throws SQLException;
    byte[] getBytes(long pos, int count) 
        throws SQLException;
    long length() throws SQLException;
    long position(byte[] pattern, long start) 
        throws SQLException;
    long position(Blob pattern, long start)
        throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2040" />getBinaryStream(  )</b></dt>

<dd><blockquote><pre class="code">public InputStream getBinaryStream() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Retrieves the data that makes up
the binary object as a stream from the database.</p></dd>





<dt><b>
<a name="INDEX-2041" />getBytes(  )</b></dt>

<dd><blockquote><pre class="code">public byte[] getBytes(long pos, int count) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the data that makes up the
underlying binary object in part or in whole as an array of bytes.
You can get a subset of the binary data by specifying a nonzero
starting index or by specifying a number of bytes less than the
object's length.</p></dd>





<dt><b>length(  )</b></dt>
<dd><blockquote><pre class="code">public long length() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the number of bytes that
make up the <tt class="literal">BLOB</tt>.</p></dd>





<dt><b>
<a name="INDEX-2042" />position(  )</b></dt>

<dd><blockquote><pre class="code">public long position(byte[] pattern, long start) 
    throws SQLException
public long position(Blob pattern, long start) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Searches this
<tt class="literal">Blob</tt> for the specified pattern and returns the
byte at which the specified pattern occurs within this
<tt class="literal">Blob</tt>. If the pattern does not occur, then this
method will return -1.</p></dd>

</dl>





</div>

<a name="INDEX-2043" /><a name="INDEX-2044" /><a name="INDEX-2045" /><a name="INDEX-2046" /><a name="INDEX-2047" /><a name="INDEX-2048" /><a name="INDEX-2049" /><a name="INDEX-2050" /><a name="INDEX-2051" /><a name="INDEX-2052" /><a name="INDEX-2053" /><a name="INDEX-2054" /><a name="INDEX-2055" /><a name="INDEX-2056" /><a name="INDEX-2057" /><a name="INDEX-2058" /><a name="INDEX-2059" /><a name="INDEX-2060" /><a name="INDEX-2061" /><a name="INDEX-2062" /><a name="INDEX-2063" /><a name="INDEX-2064" /><a name="INDEX-2065" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>CallableStatement</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: 	<tt class="literal">java.sql.CallableStatement</tt></p>

<p>Superclass: <tt class="literal">	java.sql.PreparedStatement</tt></p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>The <tt class="literal">CallableStatement</tt> is an extension of the
<tt class="literal">PreparedStatement</tt> interface that provides support
for SQL stored procedures. It specifies methods that handle the
binding of output parameters. JDBC prescribes a standard form in
which stored procedures should appear independent of the DBMS being
used. The format is:</p>





<blockquote><pre class="code">{? = call ...}
{call ...}</pre></blockquote>





<p>Each <a name="INDEX-2044" />
<a name="INDEX-2045" />question mark is a place
holder for an input or output parameter. The first syntax provides
for a single result parameter. The second syntax has no result
parameters. The parameters are referred to sequentially with the
first question mark holding the place for parameter 1.</p>





<p>Before executing a stored procedure, all output parameters should be
registered using the <tt class="literal">registerOutParameter()
</tt>
<a name="INDEX-2046" />method. You then bind the input
parameters using the various set methods, and then execute the stored
procedure.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface CallableStatement extends PreparedStatement {
    Array getArray(int index) throws SQLException;
    BigDecimal getBigDecimal(int index) 
        throws SQLException;
    #BigDecimal getBigDecimal(int index, int scale) 
        throws SQLException;
    Blob getBlob(int index) throws SQLException;
    boolean getBoolean(int index) throws SQLException;
    byte getByte(int index) throws SQLException;
    byte[] getBytes(int index) throws SQLException;
    Clob getClob(int index) throws SQLException;
    java.sql.Date getDate(int index, Calendar cal)
        throws SQLException;
    java.sql.Date getDate(int index) throws SQLException;
    double getDouble(int index) throws SQLException;
    float getFloat(int index) throws SQLException;
    int getInt(int index) throws SQLException;
    long getLong(int index) throws SQLException;
    Object getObject(int index) throws SQLException;
    Object getObject(int index, Map map) 
        throws SQLException;
    Ref getRef(int index) throws SQLException;
    short getShort(int index) throws SQLException;
    String getString(int index) throws SQLException;
    java.sql.Time getTime(int index) throws SQLException;
    java.sql.Time getTime(int index, Calendar cal)
        throws SQLException;
    java.sql.Timestamp getTimestamp(int index) 
        throws SQLException;
    java.sql.Timestamp getTimestamp(int index, 
                                    Calendar cal)
        throws SQLException;
    void registerOutParameter(int index, int type) 
        throws SQLException;
    void registerOutParameter(int index, int type, 
                              int scale)
        throws SQLException;
    void registerOutParameter(int index, int type,
                              String typename)
        throws SQLException;
    boolean wasNull() throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>getBigDecimal(  )</b></dt>
<dd><blockquote><pre class="code">public BigDecimal getBigDecimal(int index)
    throws SQLException
#public BigDecimal getBigDecimal(int index, int scale) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the value of the parameter
specified by the<tt class="literal"> index</tt> parameter as a Java
<tt class="literal">BigDecimal</tt> with a scale specified by the
<tt class="literal">scale</tt> argument. The scale is a nonnegative number
representing the number of digits to the right of the decimal.
Parameter indices start at 1; parameter 1 is thus
<tt class="literal">index</tt> 1.</p></dd>





<dt><b>
<a name="INDEX-2047" />
<a name="INDEX-2048" />
<a name="INDEX-2049" />
<a name="INDEX-2050" />
<a name="INDEX-2051" />
<a name="INDEX-2052" />
<a name="INDEX-2053" />
<a name="INDEX-2054" />
<a name="INDEX-2055" />
<a name="INDEX-2056" />
<a name="INDEX-2057" />
<a name="INDEX-2058" />
<a name="INDEX-2059" />getArray(  ), getBlob(  ), getBoolean(  ),
getByte(  ), getBytes(  ), getClob(  ), getDouble(  ), getFloat(  ),
getInt(  ), getLong(  ), getRef(  ), getShort(  ), and getString(  )</b></dt>

<dd><blockquote><pre class="code">public Array getArray(int index) 
    throws SQLException
public Blob getBlob(int index) throws SQLException
public boolean getBoolean(int index) throws SQLException
public byte getByte(int index) throws SQLException
public byte[] getBytes(int index) throws SQLException
public Clob getClob(int index) throws SQLException
public double getDouble(int index) throws SQLException
public float getFloat(int index) throws SQLException
public int getInt(int index) throws SQLException
public long getLong(int index) throws SQLException
public Ref getRef(int index) throws SQLException
public short getShort(int index) throws SQLException
public String getString(int index) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the value of the parameter
specified by the <tt class="literal">index</tt> argument as the Java
datatype indicated by the method name.</p></dd>





<dt><b>
<a name="INDEX-2060" />
<a name="INDEX-2061" />
<a name="INDEX-2062" />getDate(  ), getTime(  ), and getTimestamp(  )</b></dt>

<dd><blockquote><pre class="code">public Date getDate(int index) throws SQLException
public Date getDate(int index, Calendar cal)
    throws SQLException
public Time getTime(int index) throws SQLException
public Time getTime(int index, Calendar cal)
    throws SQLException
public Timestamp getTimestamp(int index) 
    throws SQLException
public Timestamp getTimestamp(int index, Calendar cal)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> JDBC provides refinements on the
basic java.util.Date object more suitable to database programming.
These methods provide ways to access return values from a
CallableStatement as a Date, Time, or Timestamp object. The new JDK
1.2 variants allow you to specify a Calendar.</p></dd>





<dt><b>
<a name="INDEX-2063" />getObject(  )</b></dt>

<dd><blockquote><pre class="code">public Object getObject(int index) throws SQLException
public Object getObject(int index, Map map)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Like the other
<tt class="literal">getXXX()</tt> methods, this method returns the value of
the specified output parameter. In the case of
<tt class="literal">getObject()</tt>, however, the JDBC driver chooses the
Java class that corresponds to the SQL type registered for this
parameter using <tt class="literal">registerOutParameter()</tt> or
according to the specified type map.</p></dd>





<dt><b>
<a name="INDEX-2064" />registerOutParameter(  )</b></dt>

<dd><blockquote><pre class="code">public void registerOutParameter(int index, int type)
    throws SQLException
public void registerOutParameter(int index, int type, 
                                 int scale) 
    throws SQLException
public void registerOutParameter(int index, int type,
                                 String typename)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Before executing any stored
procedure using a <tt class="literal">CallableStatement</tt>, you must
register each of the output parameters. This method registers the
<tt class="literal">java.sql.Type</tt> of an output parameter for a stored
procedure. The first parameter specifies the output parameter being
registered and the second the <tt class="literal">java.sql.Type</tt> to
register. The three-argument version of this method is for
<tt class="literal">BigDecimal</tt> types that require a scale. You later
read the output parameters using the corresponding
<tt class="literal">getXXX()</tt> method or <tt class="literal">getObject()</tt>.
The third version of this method is new to JDK 1.2 and provides a way
to map <tt class="literal">REF</tt> SQL types or custom SQL types.</p></dd>





<dt><b>
<a name="INDEX-2065" />wasNull(  )</b></dt>

<dd><blockquote><pre class="code">public boolean wasNull() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> If the last value you read using a
<tt class="literal">getXXX()</tt> call was SQL NULL, this method will
return <tt class="literal">true</tt>.</p></dd>

</dl>





</div>

<a name="INDEX-2066" /><a name="INDEX-2067" /><a name="INDEX-2068" /><a name="INDEX-2069" /><a name="INDEX-2070" /><a name="INDEX-2071" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Clob</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: <tt class="literal">	java.sql.Clob</tt></p>

<p>Superclass: 	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	New as of JDK 1.2</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p><tt class="literal">CLOB</tt> is a SQL3 type that stands for
"character large object." Like a <tt class="literal">BLOB</tt>,
a <tt class="literal">CLOB</tt> represents a very large chunk of data in
the database. Unlike a <tt class="literal">BLOB</tt>, a
<tt class="literal">CLOB</tt> represents text stored using some sort of
character encoding. The point of a <tt class="literal">CLOB</tt> type as
opposed to a <tt class="literal">CHAR</tt> or <tt class="literal">VARCHAR</tt>
type is that <tt class="literal">CLOB</tt> data, like
<tt class="literal">BLOB</tt> data, can be retrieved as a stream instead of
all at once.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Clob {
    InputStream getAsciiStream() throws SQLException;
    Reader getCharacterStream() throws SQLException;
    String getSubString(long pos, int count) 
        throws SQLException;
    long length() throws SQLException;
    long position(String pattern, long start)
        throws SQLException;
    long position(Clob pattern, long start)
        throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2067" />getAsciiStream(  )</b></dt>

<dd><blockquote><pre class="code">public InputStream getAsciiStream() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides access to the data that
makes up this <tt class="literal">Clob</tt> via an ASCII stream.</p></dd>





<dt><b>
<a name="INDEX-2068" />getCharacterStream(  )</b></dt>

<dd><blockquote><pre class="code">public Reader getCharacterStream() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides access to the data that
makes up this <tt class="literal">Clob</tt> via a Unicode stream.</p></dd>





<dt><b>
<a name="INDEX-2069" />getSubString(  )</b></dt>

<dd><blockquote><pre class="code">public String getSubString(long pos, int count)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns a substring of the
<tt class="literal">Clob</tt> starting at the named position up to the
number of character specified by the <tt class="literal">count</tt> value.</p></dd>





<dt><b>
<a name="INDEX-2070" />length(  )</b></dt>

<dd><blockquote><pre class="code">public long length() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the number of characters
that make up the <tt class="literal">Clob</tt>.</p></dd>





<dt><b>
<a name="INDEX-2071" />position(  )</b></dt>

<dd><blockquote><pre class="code">public long position(String pattern, long start)
    throws SQLException;
public long position(Clob pattern, long start)
    throws SQLException;</pre></blockquote>





<p><em class="emphasis">Description:</em> Searches the
<tt class="literal">Clob</tt> for the specified pattern starting at the
specified start point. If the pattern is found within the
<tt class="literal">Clob</tt>, the index at which the pattern first occurs
is returned. If it does not exist within the <tt class="literal">Clob</tt>,
then this method returns -1.</p></dd>

</dl>





</div>

<a name="INDEX-2072" /><a name="INDEX-2073" /><a name="INDEX-2074" /><a name="INDEX-2075" /><a name="INDEX-2076" /><a name="INDEX-2077" /><a name="INDEX-2078" /><a name="INDEX-2079" /><a name="INDEX-2080" /><a name="INDEX-2081" /><a name="INDEX-2082" /><a name="INDEX-2083" /><a name="INDEX-2084" /><a name="INDEX-2085" /><a name="INDEX-2086" /><a name="INDEX-2087" /><a name="INDEX-2088" /><a name="INDEX-2089" /><a name="INDEX-2090" /><a name="INDEX-2091" /><a name="INDEX-2092" /><a name="INDEX-2093" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Connection</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: 	<tt class="literal">java.sql.Connection</tt></p>

<p>Superclass: 	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>The <tt class="literal">Connection</tt> class is the JDBC representation of
a database session. It provides an application with
<tt class="literal">Statement</tt> objects (and its subclasses) for that
session. It also handles the transaction management for those
statements. By default, each statement is committed immediately upon
execution. You can use the <tt class="literal">Connection</tt> object to
turn off this Autocommit feature for the session. In that event, you
must expressly send commits, or any statements executed will be lost.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Connection {
    static public final int TRANSACTION_NONE;
    static public final int TRANSACTION_READ_UNCOMMITTED;
    static public final int TRANSACTION_READ_COMMITTED;
    static public final int TRANSACTION_REPEATABLE_READ;
    static public final int TRANSACTION_SERIALIZABLE;

    void clearWarnings() throws SQLException;
    void close() throws SQLException;
    void commit() throws SQLException;
    Statement createStatement() throws SQLException;
    Statement createStatement(int type, int concur)
        throws SQLException;
    boolean getAutoCommit() throws SQLException;
    String getCatalog() throws SQLException;
    Map getTypeMap() throws SQLException;
    DatabaseMetaData getMetaData() throws SQLException;
    int getTransactionIsolation() throws SQLException;
    SQLWarning getWarnings() throws SQLException;
    boolean isClosed() throws SQLException;
    boolean isReadOnly() throws SQLException;
    String nativeSQL(String sql) throws SQLException;
    CallableStatement prepareCall(String sql) 
        throws SQLException;
    CallableStatement prepareCall(String sql, int type,
                                  int concur)
        throws SQLException;
    PreparedStatement prepareStatement(String sql) 
        throws SQLException;
    PreparedStatement prepareStatement(String sql, 
                                       int type, 
                                       int concur)
        throws SQLException;
    void rollback() throws SQLException;
    void setAutoCommit(boolean ac) throws SQLException;
    void setCatalog(String catalog) throws SQLException;
    void setReadOnly(boolean ro) throws SQLException;
    void setTransactionIsolation(int level) 
        throws SQLException;
    void setTypeMap(Map map) throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Class Attributes</h4>





<dl>
<dt><b>TRANSACTION_NONE</b></dt>
<dd><blockquote><pre class="code">static public final int TRANSACTION_NONE</pre></blockquote>





<p><em class="emphasis">Description:</em> Transactions are not supported.</p></dd>





<dt><b>TRANSACTION_READ_UNCOMMITTED</b></dt>
<dd><blockquote><pre class="code">static public final int TRANSACTION_READ_UNCOMMITTED</pre></blockquote>





<p><em class="emphasis">Description:</em> This transaction isolation level
allows uncommitted changes by one transaction to be readable by other
transactions.</p></dd>





<dt><b>TRANSACTION_READ_COMMITTED</b></dt>
<dd><blockquote><pre class="code">static public final int TRANSACTION_READ_COMMITTED</pre></blockquote>





<p><em class="emphasis">Description:</em> This transaction isolation level
prevents dirty reads from occurring. In other words, changes by a
<tt class="literal">TRANSACTION_READ_COMMITTED</tt> transaction are
invisible to other transactions until the transaction making the
change commits those changes.</p></dd>





<dt><b>TRANSACTION_REPEATABLE_READ</b></dt>
<dd><blockquote><pre class="code">static public final int TRANSACTION_REPEATABLE_READ</pre></blockquote>





<p><em class="emphasis">Description:</em> This transaction isolation level
prevents dirty reads and nonrepeatable reads. A nonrepeatable read is
one where one transaction reads a row, a second transaction alters
the row, and the first transaction rereads the row, getting different
values the second time.</p></dd>

</dl>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2073" />clearWarnings(  )</b></dt>

<dd><blockquote><pre class="code">public void clearWarnings() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Clears out all the warnings
associated with this <tt class="literal">Connection</tt> so that
<tt class="literal">getWarnings()</tt> will return null until a new warning
is reported.</p></dd>





<dt><b>
<a name="INDEX-2074" />close(  )</b></dt>

<dd><blockquote><pre class="code">public void close() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method manually releases all
resources (such as network connections and database locks) associated
with a given JDBC <tt class="literal">Connection</tt>. This method is
automatically called when garbage collection occurs; however, it is
best to manually close a <tt class="literal">Connection</tt> once you are
done with it.</p></dd>





<dt><b>
<a name="INDEX-2075" />commit(  )</b></dt>

<dd><blockquote><pre class="code">public void commit() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method makes permanent the
changes created by all statements associated with this
<tt class="literal">Connection</tt> since the last commit or rollback was
issued. It should only be used when Autocommit is off. It does not
commit changes made by statements associated with other
<tt class="literal">Connection</tt> objects.</p></dd>





<dt><b>
<a name="INDEX-2076" />createStatement(  )</b></dt>

<dd><blockquote><pre class="code">public Statement createStatement() throws SQLException
public Statement createStatement(int type, int concur)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method creates a
<tt class="literal">Statement</tt> object associated with this
<tt class="literal">Connection</tt> session. The no argument version of
this method creates a <tt class="literal">Statement</tt> whose
<tt class="literal">ResultSet</tt> instances are type forward-only and
read-only concurrency.</p></dd>





<dt><b>
<a name="INDEX-2077" />getAutoCommit(  ) and <a name="INDEX-2078" />setAutoCommit(  )</b></dt>

<dd><blockquote><pre class="code">public boolean getAutoCommit() throws SQLException
public void setAutoCommit(boolean ac) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> By default, all
<tt class="literal">Connection</tt> objects are in Autocommit mode. With
Autocommit mode on, each statement is committed as it is executed. An
application may instead choose to manually commit a series of
statements together as a single transaction. In this case, you use
the <tt class="literal">setAutoCommit()</tt> method to turn Autocommit off.
You then follow your statements with a call to
<tt class="literal">commit()</tt> or <tt class="literal">rollback()</tt>
depending on the success or failure of the transaction.</p>





<p>When in Autocommit mode, a statement is committed either when the
statement completes or when the next statement is executed, whichever
is first. For statements returning a <tt class="literal">ResultSet</tt>,
the statement completes when the last row has been retrieved or the
<tt class="literal">ResultSet</tt> has been closed. If a statement returns
multiple result sets, the commit occurs when the last row of the last
<tt class="literal">ResultSet</tt> object has been retrieved.</p></dd>





<dt><b>
<a name="INDEX-2079" />getCatalog(  ) and <a name="INDEX-2080" />setCatalog(  )</b></dt>

<dd><blockquote><pre class="code">public String getCatalog() throws SQLException
public void setCatalog(String catalog) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> If a driver supports catalogs, then
you use <tt class="literal">setCatalog()</tt> to select a subspace of the
database with the specified catalog name. If the driver does not
support catalogs, it will ignore this request.</p></dd>





<dt><b>
<a name="INDEX-2081" />getMetaData(  )</b></dt>

<dd><blockquote><pre class="code">public DatabaseMetaData getMetaData() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> The
<tt class="literal">DatabaseMetaData</tt> class provides methods that
describe a database's tables, SQL support, stored procedures,
and other information relating to the database and this
<tt class="literal">Connection</tt>, which are not directly related to
executing statements and retrieving result sets. This method provides
an instance of the <tt class="literal">DatabaseMetaData</tt> class for this
<tt class="literal">Connection</tt>.</p></dd>





<dt><b>
<a name="INDEX-2082" />getTransactionIsolation(  ) and <a name="INDEX-2083" />setTransactionIsolation(  )</b></dt>

<dd><blockquote><pre class="code">public int getTransactionIsolation() throws SQLException
public void setTransactionIsolation(int level) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Sets the Connection object's
current transaction isolation level using one of the class attributes
for the <tt class="literal">Connection</tt> interface. Those levels are
called <tt class="literal">TRANSACTION_NONE</tt>,
<tt class="literal">TRANSACTION_READ_UNCOMMITTED</tt>,<tt class="literal">
TRANSACTION_READ_COMMITTED</tt>, and
<tt class="literal">TRANSACTION_REPEATABLE_READ</tt>.</p></dd>





<dt><b>
<a name="INDEX-2084" />getTypeMap(  ) and <a name="INDEX-2085" />setTypeMap(  )</b></dt>

<dd><blockquote><pre class="code">public Map getTypeMap() throws SQLException
public void setTypeMap(Map map) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> You can use these methods to define
or retrieve a custom mapping for SQL structured types and distinct
types for all statements associated with this connection.</p></dd>





<dt><b>
<a name="INDEX-2086" />getWarnings(  )</b></dt>

<dd><blockquote><pre class="code">public SQLWarning getWarnings() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the first warning in the
chain of warnings associated with this <tt class="literal">Connection</tt>
object.</p></dd>





<dt><b>
<a name="INDEX-2087" />isClosed(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isClosed() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns<tt class="literal"> true</tt> if
the <tt class="literal">Connection</tt> has been closed.</p></dd>





<dt><b>
<a name="INDEX-2088" />isReadOnly(  ) and <a name="INDEX-2089" />setReadOnly(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isReadOnly() throws SQLException
public void setReadOnly(boolean ro) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Some databases can optimize for
read-only database access. The <tt class="literal">setReadOnly()</tt>
method provides you with a way to put a <tt class="literal">Connection</tt>
into read-only mode so that those optimizations occur. You cannot
call <tt class="literal">setReadOnly()</tt> while in the middle of a
transaction.</p></dd>





<dt><b>
<a name="INDEX-2090" />nativeSQL(  )</b></dt>

<dd><blockquote><pre class="code">public String nativeSQL(String sql) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Many databases may not actually
support the same SQL required by JDBC. This method allows an
application to see the native SQL for a given JDBC SQL string.</p></dd>





<dt><b>
<a name="INDEX-2091" />prepareCall(  )</b></dt>

<dd><blockquote><pre class="code">public CallableStatement prepareCall(String sql)
    throws SQLException
public CallableStatement prepareCall(String sql,
                                     int type, 
                                     int concur)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Given a particular SQL string, this
method creates a <tt class="literal">CallableStatement</tt> object
associated with this <tt class="literal">Connection</tt> session. This is
the preferred way of handling stored procedures. The default (no
argument) version of this method provides a
<tt class="literal">CallableStatement</tt> whose
<tt class="literal">ResultSet</tt> instances are type forward-only and
read-only concurrency.</p></dd>





<dt><b>
<a name="INDEX-2092" />prepareStatement(  )</b></dt>

<dd><blockquote><pre class="code">public PreparedStatement prepareStatement(String sql) 
    throws SQLException
public PreparedStatement prepareStatement(String sql,
                                          int type,
                                          int concur)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides a
<tt class="literal">PreparedStatement</tt> object to be associated with
this<tt class="literal"> Connection</tt> session. This is the preferred way
of handling precompiled SQL statements. The default (no argument)
version of this method provides a
<tt class="literal">PreparedStatement</tt> whose
<tt class="literal">ResultSet</tt> instances are type forward-only and
read-only concurrency.</p></dd>





<dt><b>
<a name="INDEX-2093" />rollback(  )</b></dt>

<dd><blockquote><pre class="code">public void rollback() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Aborts all changes made by
statements associated with this Connection since the last time a
commit or rollback was issued. If you want to make those changes at a
later time, your application will have to reexecute the statements
that made those changes. This should be used only when auto-commit is
off.</p></dd>

</dl>





</div>

<a name="INDEX-2094" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DatabaseMetaData</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: <tt class="literal">	java.sql.DatabaseMetaData</tt></p>

<p>Superclass: 	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	New as of JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class provides a lot of information about the database to which
a <tt class="literal">Connection</tt> object is connected. In many cases,
it returns this information in the form of JDBC
<tt class="literal">ResultSet</tt> objects. For databases that do not
support a particular kind of metadata,
<tt class="literal">DatabaseMetaData</tt> will throw an SQLException.</p>





<p><tt class="literal">DatabaseMetaData</tt> methods take string patterns as
arguments where specific tokens within the <tt class="literal">String</tt>
are interpreted to have a certain meaning. <tt class="literal">%</tt>
matches any substring of
or more characters and <tt class="literal">_</tt> matches any one
character. You can pass null to methods in place of string pattern
arguments; this means that the argument's criteria should be
dropped from the search.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface DatabaseMetaData { 
    static public final int bestRowTemporary;
    static public final int bestRowTransaction;
    static public final int bestRowSession;
    static public final int bestRowUnknown;
    static public final int bestRowNotPseudo;
    static public final int bestRowPseudo;
    static public final int columnNoNulls;
    static public final int columnNullable;
    static public final int columnNullableUnknown;
    static public final int importedKeyCascade;
    static public final int importedKeyRestrict;
    static public final int importedKeySetNull;
    static public final int importedKeyNoAction;
    static public final int importedKeySetDefault;
    static public final int importedKeyInitiallyDeferred;
    static public final int importedKeyInitiallyImmediate;
    static public final int importedKeyNotDeferrable;
    static public final int procedureResultUnknown;
    static public final int procedureNoResult;
    static public final int procedureReturnsResult;
    static public final int procedureColumnUnknown;
    static public final int procedureColumnIn;
    static public final int procedureColumnOut;
    static public final int procedureColumnReturn;
    static public final int procedureColumnResult;
    static public final int procedureNoNulls;
    static public final int procedureNullable;
    static public final int procedureNullableUnknown;
    static public final short tableIndexStatistic;
    static public final short tableIndexClustered;
    static public final short tableIndexHashed;
    static public final short tableIndexOther;
    static public final int typeNoNulls;
    static public final int typeNullable;
    static public final int typeNullableUnknown;
    static public final int typePredNone;
    static public final int typePredChar;
    static public final int typePredBasic;
    static public final int typeSearchable;
    static public final int versionColumnUnknown;
    static public final int versionColumnNotPseudo;
    static public final int versionColumnPseudo;
 
    boolean allProceduresAreCallable() 
        throws SQLException;
    boolean allTablesAreSelectable() throws SQLException;
    boolean dataDefinitionCausesTransactionCommit()
        throws SQLException;
    boolean dataDefinitionIgnoredInTransactions()
        throws SQLException;
    ResultSet getBestRowIdentifier(String catalog, 
        String schema, String table, int scope, 
        boolean nullable)
        throws SQLException;
    ResultSet getCatalogs() throws SQLException;
    String getCatalogSeparator() throws SQLException;
    String getCatalogTerm() throws SQLException;
    ResultSet getColumnPriveleges(String catalog,
            String spat, String table, 
            String cpat) throws SQLException;
    ResultSet getColumns(String catalog, 
            String spat, String tpat, 
            String cpat) throws SQLException;
    ResultSet getCrossReference(String primaryCatalog,
            String primarySchema, String primaryTable, 
            String foreignCatalog, String foreignSchema, 
            String foreignTable) throws SQLException;
    String getDatabaseProductName() throws SQLException;
    String getDatabaseProductVersion() 
        throws SQLException;
    int getDefaultTransactionIsolation()  
        throws SQLException;
    int getDriverMajorVersion();
    int getDriverMinorVersion();
    String getDriverName() throws SQLException;
    String getDriverVersion() throws SQLException;
    ResultSet getExportedKeys(String catalog, 
        String schema, String table) 
        throws SQLException;
    String getExtraNameCharacters() throws SQLException;
    String getIdentifierQuoteString() throws SQLException;
    ResultSet getImportedKeys(String catalog, 
        String schema, String table) throws SQLException;
    ResultSet getIndexInfo(String catalog, 
        String schema, String table, boolean unique, 
        boolean approximate) throws SQLException;
    int getMaxBinaryLiteralLength() throws SQLException;
    int getMaxCatalogNameLength() throws SQLException;
    int getMaxCharLiteralLength() throws SQLException;
    int getMaxcnameLength() throws SQLException;
    int getMaxColumnsInGroupBy() throws SQLException;
    int getMaxColumnsInIndex() throws SQLException;
    int getMaxColumnsInOrderBy() throws SQLException;
    int getMaxColumnsInSelect() throws SQLException;
    int getMaxColumnsInTable() throws SQLException;
    int getMaxConnections() throws SQLException;
    int getMaxIndexLength() throws SQLException;
    int getMaxProcedureNameLength() 
        throws SQLException;
    int getMaxRowSize() throws SQLException;
    int getMaxRowSizeIncludeBlobs() 
        throws SQLException;
    int getMaxSchemaNameLength() throws SQLException;
    int getMaxStatementLength() throws SQLException;
    int getMaxStatements() throws SQLException;
    int getMaxTableNameLength() throws SQLException;
    int getMaxTablesInSelect() throws SQLException;
    int getMaxUserNameLength() throws SQLException;
    String getNumericFunctions() throws SQLException;
    ResultSet getPrimaryKeys(String catalog, 
        String schema, String table) throws SQLException;
    ResultSet getProcedureColumns(String catalog,
        String schemePattern, String procedureNamePattern, 
       String cnamePattern) throws SQLException;
    String getProcedureTerm() throws SQLException;
    ResultSet getProcedures(String catalog, 
        String schemaPattern, String procedureNamePattern)
        throws SQLException;
    public abstract ResultSet getSchemas() throws SQLException;
    public abstract String getSchemaTerm() throws SQLException;
    String getSearchStringEscape() throws SQLException;
    String getSQLKeywords() throws SQLException;
    String getStringFunctions() throws  SQLException;
    String getSystemFunctions() throws SQLException;
    ResultSet getTablePriveleges(String catalog, 
        String schemaPattern, String tableNamePattern) 
        throws SQLException;
    ResultSet getTableTypes() throws SQLException;
    ResultSet getTables(String catalog, 
        String schemaPattern, String tableNamePattern, 
        String types[]) throws SQLException;
    String getTimeDateFunctions() throws SQLException;
    ResultSet getTypeInfo() throws SQLException;
    String getURL() throws SQLException;
    String getUserName() throws SQLException;
    ResultSet getVersionColumns(String catalog, 
        String schema, String table) throws SQLException;
    boolean isCatalogAtStart() throws SQLException;
    boolean isReadOnly() throws SQLException;
    boolean nullPlusNonNullIsNull() throws SQLException;
    boolean nullsAreSortedHigh() throws SQLException;
    boolean nullsAreSortedLow() throws SQLException;
    boolean nullsAreSortedAtStart() throws SQLException;
    boolean nullsAreSortedAtEnd() throws SQLException;
    boolean storesLowerCaseIdentifiers() 
        throws SQLException;
    boolean storesLowerCaseQuotedIdentifiers()
        throws SQLException;
    boolean storesMixedCaseIdentifiers() 
        throws SQLException;
    boolean storesMixedCaseQuotedIdentifiers()
        throws SQLException;
    boolean storesUpperCaseIdentifiers() 
        throws SQLException;
    boolean storesUpperCaseQuotedIdentifiers()
        throws SQLException;
    boolean supportsAlterTableWithAddColumn() 
        throws SQLException;
    boolean supportsAlterTableWithDropColumn()
        throws SQLException;
    boolean supportsANSI92FullSQL() throws SQLException;
    boolean supportsANSI92IntermediateSQL()
        throws SQLException;
    boolean supportsCatalogsInDataManipulation()
        throws SQLException;
    boolean suppportsCatalogsInIndexDefinitions()
        throws SQLException;
    boolean supportsCatalogsInPrivelegeDefinitions()
        throws SQLException;
    boolean supportsCatalogsInProcedureCalls()
        throws SQLException;
    boolean supportsCatalogsInTableDefinitions()
        throws SQLException;
    boolean supportsColumnAliasing() throws SQLException;
    boolean supportsConvert() throws SQLException;
    boolean supportsConvert(int fromType, int toType)
        throws SQLException;
    boolean supportsCoreSQLGrammar() throws SQLException;
    boolean supportsCorrelatedSubqueries() 
        throws SQLException; 
    boolean 
    supportsDataDefinitionAndDataManipulationTransactions() 
        throws SQLException;
    boolean supportsDataManipulationTransactionsOnly()
        throws SQLException;
    boolean supportsDifferentTableCorrelationNames()
        throws SQLException;
    boolean supportsExpressionsInOrderBy() 
        throws SQLException;
    boolean supportsExtendedSQLGrammar() 
        throws SQLException;
    boolean supportsFullOuterJoins() throws SQLException;
    boolean supportsGroupBy() throws SQLException;
    boolean supportsGroupByBeyondSelect() 
        throws SQLException;
    boolean supportsGroupByUnrelated() 
        throws SQLException;
    boolean supportsIntegrityEnhancementFacility()
        throws SQLException;
    boolean supportsLikeEscapeClause() 
        throws SQLException;
    boolean supportsLimitedOuterJoins() 
        throws SQLException;
    boolean supportsMinimumSQLGrammar() 
        throws SQLException;
    boolean supportsMixedCaseIdentifiers() 
        throws SQLException;
    boolean supportsMixedCaseQuotedIdenfitiers()
        throws SQLException;
    boolean supportsMultipleResultSets() 
        throws SQLException;
    boolean supportsMultipleTransactions() 
        throws SQLException;
    boolean supportsNonNullableColumns() 
        throws SQLException;
    boolean supportsOpenCursorsAcrossCommit() 
        throws SQLException;
    boolean supportsOpenCursorsAcrossRollback()
        throws SQLException;
    boolean supportsOpenStatementsAcrossCommit()
        throws SQLException;
    boolean supportsOpenStatementsAcrossRollback()
        throws SQLException;
    boolean supportsOrderByUnrelated()
        throws SQLException;
    boolean supportsOuterJoins() throws SQLException;
    boolean supportsPositionedDelete() 
        throws SQLException;
    boolean supportsPositionedUpdate() 
        throws SQLException;
    boolean supportsSchemasInDataManipulation()
        throws SQLException;
    boolean supportsSchemasInIndexDefinitions()
        throws SQLException;
    boolean supportsSchemasInPrivelegeDefinitions()
        throws SQLException;
    boolean supportsSchemasInProcedureCalls() 
        throws SQLException;
    boolean supportsSchemasInTableDefinitions()
        throws SQLException;
    boolean supportsSelectForUpdate()
        throws SQLException;
    boolean supportsStoredProcedures() 
        throws SQLException;
    boolean supportsSubqueriesInComparisons() 
        throws SQLException;
    boolean supportsSubqueriesInExists() 
        throws SQLException;
    boolean supportsSubqueriesInIns() 
        throws SQLException;
    boolean supportsSubqueriesInQuantifieds()
        throws SQLException;
    boolean supportsTableCorrelationNames() 
        throws SQLException;
    boolean supportsTransactionIsolationLevel(int level)
        throws SQLException;
    boolean supportsTransactions() throws SQLException;
    boolean supportsUnion() throws SQLException;
    boolean supportsUnionAll() throws SQLException;
    boolean usesLocalFilePerTable() 
        throws SQLException;
    boolean usesLocalFiles() throws SQLException;
}</pre></blockquote>





</div>

<a name="INDEX-2095" /><a name="INDEX-2096" /><a name="INDEX-2097" /><a name="INDEX-2098" /><a name="INDEX-2099" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Date</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: <tt class="literal">	java.sql.Date</tt></p>

<p>Superclass: 	j<tt class="literal">ava.util.Date</tt></p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class deals with a subset of functionality found in the
<tt class="literal">java.util.Date</tt> class. It specifically worries only
about days and ignores hours, minutes, and seconds.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public class Date extends java.util.Date {
    static public Date valueOf(String s);
    #public Date(int year, int month, int day);
    public Date(long date);
    public void setTime(long date);
    public String toString();
}</pre></blockquote>






<h4 class="refsect1">Class Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2096" />valueOf(  )</b></dt>

<dd><blockquote><pre class="code">static public Date valueOf(String s)</pre></blockquote>





<p><em class="emphasis">Description:</em> Given a <tt class="literal">String</tt>
in the form of <tt class="literal">yyyy-mm-dd</tt>, this will return a
corresponding instance of the <tt class="literal">Date</tt> class
representing that date.</p></dd>

</dl>






<h4 class="refsect1">Object Constructors</h4>





<dl>
<dt><b>
<a name="INDEX-2097" />Date(  )</b></dt>

<dd><blockquote><pre class="code">public Date(long date)
#public Date(int year, int month, int day)</pre></blockquote>





<p><em class="emphasis">Description:</em> Constructs a new
<tt class="literal">Date</tt> instance. The proper way to construct a
<tt class="literal">Date</tt> is to use the new JDK 1.2
<tt class="literal">Date(long)</tt> constructor. The date argument
specifies the number of milliseconds since 1 January 1970 00:00:00
GMT. A negative number represents the milliseconds before that date.
The second, deprecated constructor naturally should never be used
since it is ambiguous with respect to calendar and time zone.</p></dd>

</dl>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2098" />setTime(  )</b></dt>

<dd><blockquote><pre class="code">public void setTime(long date)</pre></blockquote>





<p><em class="emphasis">Description:</em> Sets the time represented by this
Date object to the specified number of milliseconds since 1 January
1970 00:00:00 GMT. A negative number represents the milliseconds
before that date.</p></dd>





<dt><b>
<a name="INDEX-2099" />toString(  )</b></dt>

<dd><blockquote><pre class="code">public String toString()</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides a <tt class="literal">String
</tt>representing this <tt class="literal">Date</tt> in the form
<tt class="literal">yyyy-mm-dd</tt>.</p></dd>

</dl>





</div>

<a name="INDEX-2100" /><a name="INDEX-2101" /><a name="INDEX-2102" /><a name="INDEX-2103" /><a name="INDEX-2104" /><a name="INDEX-2105" /><a name="INDEX-2106" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Driver</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: <tt class="literal">	java.sql.Driver</tt></p>

<p>Superclass: 	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class represents a specific JDBC implementation. When a
<tt class="literal">Driver</tt> is loaded, it should create an instance of
itself and register that instance with the
<tt class="literal">DriverManager</tt> class. This allows applications to
create instances of it using the<tt class="literal"> Class.forName()</tt>
call to load a driver.</p>





<p>The <tt class="literal">Driver</tt> object then provides the ability for an
application to connect to one or more databases. When a request for a
specific database comes through, the <tt class="literal">DriverManager</tt>
will pass the data source request to each <tt class="literal">Driver</tt>
registered as a URL. The first <tt class="literal">Driver</tt> to connect
to the data source using that URL will be used.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Driver {
    boolean acceptsURL(String url) throws SQLException;
    Connection connect(String url, Properties info)
        throws SQLException;
    int getMajorVersion();
    int getMinorVersion();
    DriverPropertyInfo[] getPropertyInfo(String url, 
                                         Properties info)
        throws SQLException;
    boolean jdbcCompliant();
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2101" />acceptsURL(  )</b></dt>

<dd><blockquote><pre class="code">public boolean acceptsURL(String url) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
the specified URL matches the URL subprotocol used by this driver.</p></dd>





<dt><b>
<a name="INDEX-2102" />connect(  )</b></dt>

<dd><blockquote><pre class="code">public Connection connect(String url, Properties info) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method attempts a connect
using the specified URL and <tt class="literal">Property</tt> information
(usually containing the user name and password). If the URL is not
right for this driver, <tt class="literal">connect()</tt> simply returns
<tt class="literal">null</tt>. If it is the right URL, but an error occurs
during the connection process, an <tt class="literal">SQLException</tt>
should be thrown.</p></dd>





<dt><b>
<a name="INDEX-2103" />getMajorVersion(  )</b></dt>

<dd><blockquote><pre class="code">public int getMajorVersion()</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the major version number
for the driver.</p></dd>





<dt><b>
<a name="INDEX-2104" />getMinorVersion(  )</b></dt>

<dd><blockquote><pre class="code">public int getMinorVersion()</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the minor version number
for the driver.</p></dd>





<dt><b>
<a name="INDEX-2105" />getPropertyInfo(  )</b></dt>

<dd><blockquote><pre class="code">public DriverPropertyInfo[] getPropertyInfo(String url, 
                                       Properties info) 
    throws SQLException;</pre></blockquote>





<p><em class="emphasis">Description:</em> This method allows GUI-based RAD
environments to find out which properties the driver needs on connect
so that it can prompt a user to enter values for those properties.</p></dd>





<dt><b>
<a name="INDEX-2106" />jdbcCompliant(  )</b></dt>

<dd><blockquote><pre class="code">public boolean jdbcCompliant()</pre></blockquote>





<p><em class="emphasis">Description:</em> A Driver can return true here only
if it passes the JDBC compliance tests. This means that the driver
implementation supports the full JDBC API and full SQL 92 Entry
Level.</p></dd>

</dl>





</div>

<a name="INDEX-2107" /><a name="INDEX-2108" /><a name="INDEX-2109" /><a name="INDEX-2110" /><a name="INDEX-2111" /><a name="INDEX-2112" /><a name="INDEX-2113" /><a name="INDEX-2114" /><a name="INDEX-2115" /><a name="INDEX-2116" /><a name="INDEX-2117" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DriverManager</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: 	<tt class="literal">java.sql.DriverManager</tt></p>

<p>Superclass: <tt class="literal">	java.lang.Object</tt></p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>The <tt class="literal">DriverManager</tt> holds the master list of
registered JDBC drivers for the system. Upon initialization, it loads
all classes specified in the <tt class="literal">jdbc.drivers</tt>
property. You can thus specify any runtime information about the
database being used by an application on the command line.</p>





<p>During program execution, other drivers may register themselves with
the <tt class="literal">DriverManager</tt> by calling the
<tt class="literal">registerDriver()</tt> method. The
<tt class="literal">DriverManager</tt> uses a JDBC URL to find an
application's desired driver choice when requests are made
through <tt class="literal">getConnection()</tt>.</p>





<p>The <tt class="literal">DriverManager</tt> class is likely to disappear one
day as the new JDBC 2.0 Standard Extension provides a much more
application-friendly way of getting a database connection.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public class DriverManager {
    static void deregisterDriver(Driver driver) 
        throws SQLException;
    static public synchronized Connection getConnection(String url, 
        Properties info) throws SQLException;
     static public synchronized Connection getConnection(String url,
        String user, String password) throws SQLException;
     static public synchronized Connection getConnection(String url) 
        throws SQLException;
     static public Driver getDriver(String url) throws SQLException;
    static public Enumeration getDrivers();
    static public int getLoginTimeout();
    #static public PrintStream getLogStream();
    static public PrintWriter getLogWriter();

    static public void println(String message);
    static public synchronized void registerDriver(Driver driver)
            throws SQLException;
    #static public void setLogStream(PrintStream out);
 <b class="emphasis-bold">   static public void setLogWriter(PrintWriter out);</b></pre></blockquote>




<blockquote><pre class="code">static public void setLoginTimeout(int seconds);
}</pre></blockquote>






<h4 class="refsect1">Class Methods     </h4>





<dl>
<dt><b>
<a name="INDEX-2108" />deregisterDriver(  )</b></dt>

<dd><blockquote><pre class="code">static public void deregisterDriver(Driver driver) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Removes a <tt class="literal">Driver</tt>
from the list of registered drivers.</p></dd>





<dt><b>
<a name="INDEX-2109" />getConnection(  )</b></dt>

<dd><blockquote><pre class="code">static public synchronized Connection getConnection(String url, 
        Properties info) throws SQLException
static public synchronized Connection getConnection(String url,
        String user, String password) throws SQLException
static public synchronized Connection getConnection(String url) 
        throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Establishes a connection to the
data store represented by the URL given. The
<tt class="literal">DriverManager</tt> then looks through its list of
registered <tt class="literal">Driver </tt>instances for one that will
handle the specified URL. If none is found, it throws an
<tt class="literal">SQLException</tt>. Otherwise it returns the
<tt class="literal">Connection</tt> instance from the
<tt class="literal">connect()</tt> method in the<tt class="literal"> Driver</tt>
class.</p></dd>





<dt><b>
<a name="INDEX-2110" />getDriver(  )</b></dt>

<dd><blockquote><pre class="code">static public Driver getDriver(String url) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns a driver than can handle
the specified URL.</p></dd>





<dt><b>
<a name="INDEX-2111" />getDrivers(  )</b></dt>

<dd><blockquote><pre class="code">static public Enumeration getDrivers()</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns a list of all registered
drivers.</p></dd>





<dt><b>
<a name="INDEX-2112" />getLoginTimeout(  ) and <a name="INDEX-2113" />setLoginTimeout(  )</b></dt>

<dd><blockquote><pre class="code">static public int getLoginTimeout()
static public int setLoginTimeout()</pre></blockquote>





<p><em class="emphasis">Description: </em>The login timeout is the maximum
time in seconds that a driver can wait in attempting to log in to a
database.</p></dd>





<dt><b>
<a name="INDEX-2114" />getLogStream(  ) and <a name="INDEX-2115" />setLogStream(  )</b></dt>

<dd><blockquote><pre class="code">#static public PrintStream getLogStream()
#static public void setLogStream(PrintStream out)
static public PrintWriter getLogWriter()
static public void setLogWriter(PrintWriter out)</pre></blockquote>





<p><em class="emphasis">Description:</em> Sets the stream used by the
<tt class="literal">DriverManager</tt> and all drivers. The
<tt class="literal">LogStream</tt> variant is the old JDK 1.1 version and
should be avoided in favor of log writers</p></dd>





<dt><b>
<a name="INDEX-2116" />println(  )</b></dt>

<dd><blockquote><pre class="code">static public void println(String message)</pre></blockquote>





<p><em class="emphasis">Description:</em> Prints a message to the current log
stream.</p></dd>





<dt><b>
<a name="INDEX-2117" />registerDriver(  )</b></dt>

<dd><blockquote><pre class="code">static public synchronized void registerDriver(Driver driver) 
        throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method allows a newly loaded
<tt class="literal">Driver</tt> to register itself with the
<tt class="literal">DriverManager</tt> class.</p></dd>

</dl>





</div>

<a name="INDEX-2118" /><a name="INDEX-2119" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>DriverPropertyInfo</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: 	<tt class="literal">java.sql.DriverPropertyInfo</tt></p>

<p>Superclass: 	<tt class="literal">java.lang.Object</tt></p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class provides information required by a driver in order to
connect to a database. Only development tools are likely ever to
require this class. It has no methods, simply a list of public
attributes.</p>






<h4 class="refsect1">Class Summary     </h4>





<blockquote><pre class="code">public class DriverPropertyInfo {
    public String[] choices;
    public String description;
    public String name;     
    public boolean required; 
    public String value;
    public DriverPropertyInfo(String name, String value);
}</pre></blockquote>






<h4 class="refsect1">Object Attributes</h4>





<dl>
<dt><b>choices</b></dt>
<dd><blockquote><pre class="code">public String[] choices</pre></blockquote>





<p><em class="emphasis">Description:</em> A list of choices from which a user
may be prompted to specify a value for this property. This value can
be null.</p></dd>





<dt><b>description</b></dt>
<dd><blockquote><pre class="code">public String description</pre></blockquote>





<p><em class="emphasis">Description:</em> A brief description of the property
or null.</p></dd>





<dt><b>name</b></dt>
<dd><blockquote><pre class="code">public String name</pre></blockquote>





<p><em class="emphasis">Description:</em> The  name of the property.</p></dd>





<dt><b>required</b></dt>
<dd><blockquote><pre class="code">public boolean required</pre></blockquote>





<p><em class="emphasis">Description:</em> Indicates whether or not this
property must be set in order to make a connection.</p></dd>





<dt><b>value</b></dt>
<dd><blockquote><pre class="code">public String value</pre></blockquote>





<p><em class="emphasis">Description:</em> The current value of the property
or null if no current value is set.</p></dd>

</dl>






<h4 class="refsect1">Object Constructors</h4>





<dl>
<dt><b>
<a name="INDEX-2119" />DriverPropertyInfo(  )</b></dt>

<dd><blockquote><pre class="code">public DriverPropertyInfo(String name, String value)</pre></blockquote>





<p><em class="emphasis">Description:</em> Constructs a new
<tt class="literal">DriverPropertyInfo</tt> object with the
<tt class="literal">name</tt> and <tt class="literal">value</tt> attributes set
to the specified parameters. All other values are set to their
default values.</p></dd>

</dl>





</div>

<a name="INDEX-2120" /><a name="INDEX-2121" /><a name="INDEX-2122" /><a name="INDEX-2123" /><a name="INDEX-2124" /><a name="INDEX-2125" /><a name="INDEX-2126" /><a name="INDEX-2127" /><a name="INDEX-2128" /><a name="INDEX-2129" /><a name="INDEX-2130" /><a name="INDEX-2131" /><a name="INDEX-2132" /><a name="INDEX-2133" /><a name="INDEX-2134" /><a name="INDEX-2135" /><a name="INDEX-2136" /><a name="INDEX-2137" /><a name="INDEX-2138" /><a name="INDEX-2139" /><a name="INDEX-2140" /><a name="INDEX-2141" /><a name="INDEX-2142" /><a name="INDEX-2143" /><a name="INDEX-2144" /><a name="INDEX-2145" /><a name="INDEX-2146" /><a name="INDEX-2147" /><a name="INDEX-2148" /><a name="INDEX-2149" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>PreparedStatement</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: 	<tt class="literal">java.sql.PreparedStatement</tt></p>

<p>Superclass: 	<tt class="literal">java.sql.Statement</tt></p>

<p>Immediate Subclasses: 	<tt class="literal">java.sql.CallableStatement</tt></p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class represents a precompiled SQL statement.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface PreparedStatement extends Statement {
    <b class="emphasis-bold">void addBatch() throws SQLException;</b></pre></blockquote>




<blockquote><pre class="code">void clearParameters() throws SQLException;
    boolean execute() throws SQLException;
    ResultSet executeQuery() throws SQLException;
    int executeUpdate() throws SQLException;
    <b class="emphasis-bold">ResultSetMetaData getMetaData() throws SQLException;</b>
    void setArray(int index, Array arr) 
        throws SQLException; 
    void setAsciiStream(int index, InputStream is, 
        int length) throws SQLException;
    void setBigDecimal(int index, BigDecimal d) 
        throws SQLException;
    void setBinaryStream(int index, InputStream is, 
        int length) throws SQLException;
    void setBlob(int index, Blob b) throws SQLException;
    void setBoolean(int index, boolean b)
        throws SQLException;
    void setByte(int index, byte b) throws SQLException;
    void setBytes(int index, byte[] bts)
        throws SQLException;
    void setCharacterStream(int index, Reader rdr, 
        int length) throws SQLException;
    void setClob(int index, Clob c) throws SQLException;
    void setDate(int index, Date d) throws SQLException;
    void setDate(int index, Date d, Calendar cal)
        throws SQLException;
    void setDouble(int index, double x)
        throws SQLException;
    void setFloat(int index, float f) throws SQLException;
    void setInt(int index, int x) throws SQLException;
    void setLong(int index, long x) throws SQLException;
    void setNull(int index, int type) throws SQLException;
    void setNull(int index, int type, String tname)
        throws SQLException;
    void setObject(int index, Object ob) 
        throws SQLException;
    void setObject(int index, Object ob, int type)
        throws SQLException;
    void setObject(int index, Object ob, int type,
        int scale) throws SQLException;
    void setRef(int index, Ref ref) throws SQLException;
    void setShort(int index, short s) throws SQLException;
    void setString(int index, String str)
        throws SQLException;
    void setTime(int index, Time t) throws SQLException;
    void setTime(int index, Time t, Calendar cal)
        throws SQLException;
    void setTimestamp(int index, Timestamp ts)
        throws SQLException;
    void setTimestamp(int index, Timestamp ts, Calendar cal)
        throws SQLException;
    #void setUnicodeStream(int index, InputStream is, 
        int length) throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2121" />addBatch(  )</b></dt>

<dd><blockquote><pre class="code">public void addBatch() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Adds a set of parameters to the
batch for batch processing.</p></dd>





<dt><b>
<a name="INDEX-2122" />clearParameters(  )</b></dt>

<dd><blockquote><pre class="code">public abstract void clearParameters() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Once set, a parameter value remains
bound until either a new value is set for the parameter or until
<tt class="literal">clearParameters()</tt> is called. This method clears
all parameters associated with the
<tt class="literal">PreparedStatement</tt>.</p></dd>





<dt><b>
<a name="INDEX-2123" />execute(  ), <a name="INDEX-2124" />executeQuery(  ), and <a name="INDEX-2125" />executeUpdate(  )</b></dt>

<dd><blockquote><pre class="code">public abstract boolean execute() throws SQLException
public abstract ResultSet executeQuery() throws SQLException
public abstract int executeUpdate() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Executes the
<tt class="literal">PreparedStatement</tt>. The first method,
<tt class="literal">execute(),</tt> allows you to execute the
<tt class="literal">PreparedStatement</tt> when you do not know if it is a
query or an update. It returns true if the statement has result sets
to process.</p>





<p>The <tt class="literal">executeQuery()</tt> method is used for executing
queries. It returns a result set for processing.</p>





<p>The <tt class="literal">executeUpdate()</tt> statement is used for
executing updates. It returns the number of rows affected by the
update.</p></dd>





<dt><b>
<a name="INDEX-2126" />getMetaData(  )</b></dt>

<dd><blockquote><pre class="code">public ResultSetMetaData getMetaData() throws SQLException;</pre></blockquote>





<p><em class="emphasis">Description:</em> Retrieves the number, types, and
properties of a <tt class="literal">ResultSet</tt>'s columns.</p></dd>





<dt><b>
<a name="INDEX-2127" />
<a name="INDEX-2128" />
<a name="INDEX-2129" />
<a name="INDEX-2130" />
<a name="INDEX-2131" />
<a name="INDEX-2132" />
<a name="INDEX-2133" />
<a name="INDEX-2134" />
<a name="INDEX-2135" />
<a name="INDEX-2136" />
<a name="INDEX-2137" />
<a name="INDEX-2138" />setArray(  ), setAsciiStream(  ), setBigDecimal(  ), setBinaryStream(  ), setBlob(  ), setBoolean(  ), setByte(  ), setBytes(  ), setCharacterStream(  ), setClob(  ), setDate(  ), setDouble(  ), <a name="INDEX-2139" />
<a name="INDEX-2140" />
<a name="INDEX-2141" />
<a name="INDEX-2142" />
<a name="INDEX-2143" />
<a name="INDEX-2144" />
<a name="INDEX-2145" />
<a name="INDEX-2146" />
<a name="INDEX-2147" />
<a name="INDEX-2148" />
<a name="INDEX-2149" />setFloat(  ), setInt(  ), setLong(  ), setNull(  ), setObject(  ), setRef(  ), setShort(  ), setString(  ), setTime(  ), setTimestamp(  ), and setUnicodeStream(  )</b></dt>

<dd><blockquote><pre class="code">public void setArray(int index, Array arr)
    throws SQLException
public void setAsciiStream(int index, InputStream is, 
    int length) throws SQLException
public void setBigDecimal(int index, BigDecimal d)
    throws SQLException
public void setBinaryStream(int index, InputStream is,
    int length) throws SQLException
public void setBlob(int index, Blob b) 
    throws SQLException
public void setBoolean(int index, boolean b)
    throws SQLException
public void setByte(int index, byte b) 
    throws SQLException
public void setBytes(int index, byte[] bts)
    throws SQLException
public void setCharacterStream(int index, Reader rdr,
    int length) throws SQLException
public void setClob(int index, Clob c)
    throws SQLException
public void setDate(int index, Date d)
    throws SQLException
public void setDate(int index, Date d, Calendar cal)
    throws SQLException
public void setDouble(int index, double d)
    throws SQLException
public void setFloat(int index, float f)
    throws SQLException
public void setInt(int index, int x) 
    throws SQLException
public void setLong(int index, long x)
    throws SQLException
public void setNull(int index, int type)
    throws SQLException
public void setNull(int index, int type, String tname)
    throws SQLException
public void setObject(int index, Object ob)
    throws SQLException
public void setObject(int index, Object ob, int type)
    throws SQLException
public void setObject(int index, Object ob, int type,
    int scale) throws SQLException
public void setRef(int index, Ref ref)
    throws SQLException
public void setShort(int index, short s)
    throws SQLException
public void setString(int index, String str)
    throws SQLException
public void setTime(int index, Time t)
    throws SQLException
public void setTime(int index, Time t, Calendar cal)
    throws SQLException
public void setTimestamp(int index, Timestamp ts)
    throws SQLException
public void setTimestamp(int index, Timestamp ts,
    Calendar cal) throws SQLException
#public void setUnicodeStream(int index, InputStream is, 
    int length) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Binds a value to the specified
parameter.</p></dd>

</dl>





</div>

<a name="INDEX-2150" /><a name="INDEX-2151" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Ref</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: <tt class="literal">	java.sql.Ref</tt></p>

<p>Superclass: 	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	New as of JDK 1.2</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>A <tt class="literal">Ref</tt> is a reference to a value of an SQL
structured type in the database. You can dereference a
<tt class="literal">Ref</tt> by passing it as a parameter to an SQL
statement and executing the statement.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Ref {
    String getBaseTypeName() throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2151" />getBaseTypeName(  )</b></dt>

<dd><blockquote><pre class="code">public String getBaseTypeName() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the SQL structured type
name for the referenced item.</p></dd>

</dl>





</div>

<a name="INDEX-2152" /><a name="INDEX-2153" /><a name="INDEX-2154" /><a name="INDEX-2155" /><a name="INDEX-2156" /><a name="INDEX-2157" /><a name="INDEX-2158" /><a name="INDEX-2159" /><a name="INDEX-2160" /><a name="INDEX-2161" /><a name="INDEX-2162" /><a name="INDEX-2163" /><a name="INDEX-2164" /><a name="INDEX-2165" /><a name="INDEX-2166" /><a name="INDEX-2167" /><a name="INDEX-2168" /><a name="INDEX-2169" /><a name="INDEX-2170" /><a name="INDEX-2171" /><a name="INDEX-2172" /><a name="INDEX-2173" /><a name="INDEX-2174" /><a name="INDEX-2175" /><a name="INDEX-2176" /><a name="INDEX-2177" /><a name="INDEX-2178" /><a name="INDEX-2179" /><a name="INDEX-2180" /><a name="INDEX-2181" /><a name="INDEX-2182" /><a name="INDEX-2183" /><a name="INDEX-2184" /><a name="INDEX-2185" /><a name="INDEX-2186" /><a name="INDEX-2187" /><a name="INDEX-2188" /><a name="INDEX-2189" /><a name="INDEX-2190" /><a name="INDEX-2191" /><a name="INDEX-2192" /><a name="INDEX-2193" /><a name="INDEX-2194" /><a name="INDEX-2195" /><a name="INDEX-2196" /><a name="INDEX-2197" /><a name="INDEX-2198" /><a name="INDEX-2199" /><a name="INDEX-2200" /><a name="INDEX-2201" /><a name="INDEX-2202" /><a name="INDEX-2203" /><a name="INDEX-2204" /><a name="INDEX-2205" /><a name="INDEX-2206" /><a name="INDEX-2207" /><a name="INDEX-2208" /><a name="INDEX-2209" /><a name="INDEX-2210" /><a name="INDEX-2211" /><a name="INDEX-2212" /><a name="INDEX-2213" /><a name="INDEX-2214" /><a name="INDEX-2215" /><a name="INDEX-2216" /><a name="INDEX-2217" /><a name="INDEX-2218" /><a name="INDEX-2219" /><a name="INDEX-2220" /><a name="INDEX-2221" /><a name="INDEX-2222" /><a name="INDEX-2223" /><a name="INDEX-2224" /><a name="INDEX-2225" /><a name="INDEX-2226" /><a name="INDEX-2227" /><a name="INDEX-2228" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>ResultSet</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name: 	<tt class="literal">java.sql.ResultSet</tt></p>

<p>Superclass: 	None</p>

<p>Immediate Subclasses: 	None</p>

<p>Interfaces Implemented: 	None</p>

<p>Availability: 	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class represents a database result set. It provides an
application with access to database queries one row at a time. During
query processing, a <tt class="literal">ResultSet</tt> maintains a pointer
to the current row being manipulated. The application then moves
through the results sequentially until all results have been
processed or the <tt class="literal">ResultSet</tt> is closed. A
<tt class="literal">ResultSet</tt> is automatically closed when the
<tt class="literal">Statement</tt> that generated it is closed, reexecuted,
or used to retrieve the next <tt class="literal">ResultSet</tt> in a
multiple result set query.</p>






<h4 class="refsect1">Class Summary     </h4>





<blockquote><pre class="code">public interface ResultSet {
    static public final int CONCUR_READ_ONLY;
    static public final int CONCUR_UPDATABLE;
    static public final int FETCH_FORWARD;
    static public final int FETCH_REVERSE;
    static public final int FETCH_UNKNOWN;
    static public final int TYPE_FORWARD_ONLY;
    static public final int TYPE_SCROLL_INSENSITIVE;
    static public final int TYPE_SCROLL_SENSITIVE;
    boolean absolute(int row) throws SQLException;
    void afterLast() throws SQLException;
    void beforeFirst() throws SQLException;
    void cancelRowUpdates() throws SQLException;
    void clearWarnings() throws SQLException;
    void close() throws SQLException;
    void deleteRow() throws SQLException;
    int findColumn(String cname) throws SQLException;
    boolean first() throws SQLException;
    Array getArray(int index) throws SQLException;
    Array getArray(String cname) throws SQLException;
    InputStream getAsciiStream(int index) 
        throws SQLException;
    InputStream getAsciiStream(String cname)
        throws SQLException;
    InputStream getBinaryStream(int index) 
        throws SQLException;
    InputStream getBinaryStream(String cname)
        throws SQLException;
    BigDecimal getBigDecimal(int index)
        throws SQLException;
    #BigDecimal getBigDecimal(int index, int scale)
        throws SQLException;
    BigDecimal getBigDecimal(String cname)
        throws SQLException;
    #BigDecimal getBigDecimal(String cname, int scale)
        throws SQLException;
    InputStream getBinaryStream(int index)
        throws SQLException;
    InputStream getBinaryStream(String cname)
        throws SQLException;
    Blob getBlob(int index) throws SQLException;
    Blob getBlob(String cname) throws SQLException;
    boolean getBoolean(int index) throws SQLException;
    boolean getBoolean(String cname) throws SQLException; 
    byte getByte(int index) throws SQLException;
    byte getByte(String cname) throws SQLException;
    byte[] getBytes(int index) throws SQLException;
    byte[] getBytes(String cname) throws SQLException;
    Reader getCharacterStream(int index) 
        throws SQLException;
    Reader getCharacterStream(String cname)
        throws SQLException;
    Clob getClob(int index) throws SQLException;
    Clob getClob(String cname) throws SQLException;
    int getConcurrency() throws SQLException;
    String getCursorName() throws SQLException;
    Date getDate(int index) throws SQLException;
    Date getDate(int index, Calendar cal)
        throws SQLException;
    Date getDate(String cname) throws SQLException;
    Date getDate(String cname, Calendar cal)
        throws SQLException;
    double getDouble(int index) throws SQLException;
    double getDouble(String cname) throws SQLException;
    int getFetchDirection() throws SQLException;
    int getFetchSize() throws SQLException;
    float getFloat(int index) throws SQLException;
    float getFloat(String cname) throws SQLException;
    int getInt(int index) throws SQLException;
    int getInt(String cname) throws SQLException;
    long getLong(int index) throws SQLException;
    long getLong(String cname) throws SQLException;
    ResultSetMetaData getMetaData() throws SQLException;
    Object getObject(int index) throws SQLException;
    Object getObject(int index, Map map)
        throws SQLException;
    Object getObject(String cname) throws SQLException;
    Object getObject(String cname, Map map)
        throws SQLException;
    Ref getRef(int index) throws SQLException;
    Ref getRef(String cname) throws SQLException;
    int getRow() throws SQLException;
    short getShort(int index) throws SQLException;
    short getShort(String cname) throws SQLException;
    Statement getStatement() throws SQLException;
    String getString(int index) throws SQLException;
    String getString(String cname) throws SQLException;
    Time getTime(int index) throws SQLException;
    Time getTime(int index, Calendar cal)
        throws SQLException;
    Time getTime(String cname) throws SQLException;
    Time getTime(String cname, Calendar cal) 
        throws SQLException;
    Timestamp getTimestamp(int index) throws SQLException;
    Timestamp getTimestamp(int index, Calendar cal)
        throws SQLException;
    Timestamp getTimestamp(String cname) throws SQLException;
    Timestamp getTimestamp(String cname, Calendar cal)
        throws SQLException;
    int getType() throws SQLException;
    #InputStream getUnicodeStream(int index)
        throws SQLException;
    #InputStream getUnicodeStream(String cname)
        throws SQLException;
    SQLWarning getWarnings() throws SQLException;
    void insertRow() throws SQLException;
    boolean isAfterLast() throws SQLException;
    boolean isBeforeFirst() throws SQLException;
    boolean isFirst() throws SQLException;
    boolean isLast() throws SQLException;
    boolean last() throws SQLException;
    void moveToCurrentRow() throws SQLException;
    void moveToInsertRow() throws SQLException;
    boolean next() throws SQLException;
    boolean previous() throws SQLException;
    void refreshRow() throws SQLException;
    boolean relative(int rows) throws SQLException;
    boolean rowDeleted() throws SQLException;
    boolean rowInserted() throws SQLException;
    boolean rowUpdated() throws SQLException;
    void setFetchDirection(int dir) throws SQLException;
    void setFetchSize(int rows) throws SQLException;
    void updateAsciiStream(int index, InputStream is,
        int length) throws SQLException;
    void updateAsciiStream(String cname, InputStream is,
        int length) throws SQLException;
    void updateBigDecimal(int index, BigDecimal d)
        throws SQLException;
    void updateBigDecimal(String cname, BigDecimal d)
        throws SQLException;
    void updateBinaryStream(int index, InputStream is)
        throws SQLException;
    void updateBinaryStream(String cname, InputStream is)
        throws SQLException;
    void updateBoolean(int index, boolean b)
        throws SQLException;
    void updateBoolean(String cname, boolean b)
        throws SQLException;
    void updateByte(int index, byte b)
        throws SQLException;
    void updateByte(String cname, byte b) 
        throws SQLException;
    void updateBytes(int index, byte[] bts)
        throws SQLException;
    void updateBytes(String cname, byte[] bts)
        throws SQLException;
    void updateCharacterStream(int index, Reader rdr,
        int length) throws SQLException;
    void updateCharacterStream(String cname, Reader rdr,
        int length) throws SQLException;
    void updateDate(int index, Date d) 
        throws SQLException;
    void updateDate(String cname, Date d)
        throws SQLException;
    void updateDouble(int index, double d)
        throws SQLException;
    void updateDouble(String cname, double d)
        throws SQLException;
    void updateFloat(int index, float f)
        throws SQLException;
    void updateFloat(String cname, float f)
        throws SQLException;
    void updateInt(int index, int x) throws SQLException;
    void updateInt(String cname, int x)
        throws SQLException;
    void updateLong(int index, long x)
        throws SQLException;
    void updateLong(String cname, long x)
        throws SQLException;
    void updateNull(int index) throws SQLException;
    void updateNull(String cname) throws SQLException;
    void updateObject(int index, Object ob)
        throws SQLException;
    void updateObject(int index, Object ob, int scale)
    void updateObject(String cname, Object ob)
        throws SQLException;
    void updateObject(String cname, Object ob, int scale)
        throws SQLException;
    void updateRow() throws SQLException;
    void updateShort(int index, short s)
        throws SQLException;
    void updateShort(String cname, short s)
        throws SQLException;
    void updateString(int index, String str)
        throws SQLException;
    void updateString(String cname, String str)
        throws SQLException;
    void updateTime(int index, Time t)
        throws SQLException;
    void updateTime(String cname, Time t)
        throws SQLException;
    void updateTimestamp(int index, Timestamp ts)
        throws SQLException;
    void updateTimestamp(String cname, Timestamp ts)
        throws SQLException;
    boolean wasNull() throws SQLException;    
}</pre></blockquote>






<h4 class="refsect1">Class Attributes</h4>





<dl>
<dt><b>CONCUR_READ_ONLY</b></dt>
<dd><blockquote><pre class="code">static public final int CONCUR_READ_ONLY</pre></blockquote>





<p><em class="emphasis">Description:</em> The concurrency mode that specifies
that a result set may not be updated.</p></dd>





<dt><b>CONCUR_UPDATABLE</b></dt>
<dd><blockquote><pre class="code">static public final int CONCUR_UPDATABLE</pre></blockquote>





<p><em class="emphasis">Description:</em> The concurrency mode that specifies
that a result set is updatable.</p></dd>





<dt><b>FETCH_FORWARD</b></dt>
<dd><blockquote><pre class="code">static public final int FETCH_FORWARD</pre></blockquote>





<p><em class="emphasis">Description:</em> This value specifies that a result
set's fetch direction is in the forward direction, from first
to last.</p></dd>





<dt><b>FETCH_REVERSE</b></dt>
<dd><blockquote><pre class="code">static public final int FETCH_REVERSE</pre></blockquote>





<p><em class="emphasis">Description:</em> This value specifies that a result
set's fetch direction is in the reverse direction, from last to
first.</p></dd>





<dt><b>FETCH_UNKNOWN</b></dt>
<dd><blockquote><pre class="code">static public final int FETCH_UNKNOWN</pre></blockquote>





<p><em class="emphasis">Description:</em> This value specifies that the order
of result set processing is unknown.</p></dd>





<dt><b>TYPE_FORWARD_ONLY</b></dt>
<dd><blockquote><pre class="code">static public final int TYPE_FORWARD_ONLY</pre></blockquote>





<p><em class="emphasis">Description:</em> This result set type specifies that
a result set can only be navigated in the forward direction.</p></dd>





<dt><b>TYPE_SCROLL_INSENSITIVE</b></dt>
<dd><blockquote><pre class="code">static public final int TYPE_SCROLL_INSENSITIVE</pre></blockquote>





<p><em class="emphasis">Description:</em> This result set type specifies that
a result set may be navigated in any direction, but it is not
sensitive to changes made by others.</p></dd>





<dt><b>TYPE_SCROLL_SENSITIVE</b></dt>
<dd><blockquote><pre class="code">static public final int TYPE_SCROLL_SENSITIVE</pre></blockquote>





<p><em class="emphasis">Description:</em> This result set type specifies that
a result set may be navigated in any direction and that changes made
by others will be seen in the result set.</p></dd>

</dl>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2153" />absolute(  )</b></dt>

<dd><blockquote><pre class="code">public boolean absolute(int row) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method moves the cursor to the
specified row number starting from the beginning for a positive
number or from the end for a negative number.</p></dd>





<dt><b>
<a name="INDEX-2154" />afterLast(  )</b></dt>

<dd><blockquote><pre class="code">public void afterLast() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method moves the cursor to the
end of the result set, after the last row.</p></dd>





<dt><b>
<a name="INDEX-2155" />beforeFirst(  )</b></dt>

<dd><blockquote><pre class="code">public void beforeFirst() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Moves the cursor to the beginning
of the result set, before the first row.</p></dd>





<dt><b>
<a name="INDEX-2156" />cancelRowUpdates(  )</b></dt>

<dd><blockquote><pre class="code">public void cancelRowUpdates() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Cancels any updates made to this
row.</p></dd>





<dt><b>
<a name="INDEX-2157" />clearWarnings(  )</b></dt>

<dd><blockquote><pre class="code">public void clearWarnings() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Clears all warnings from the
<tt class="literal">SQLWarning</tt> chain. Subsequent calls to
<tt class="literal">getWarnings()</tt> then returns <tt class="literal">null</tt>
until another warning occurs.</p></dd>





<dt><b>close(  )</b></dt>
<dd><blockquote><pre class="code">public void close() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Performs an immediate, manual close
of the <tt class="literal">ResultSet</tt>. This is generally never
required, as the closure of the <tt class="literal">Statement</tt>
associated with the <tt class="literal">ResultSet</tt> will automatically
close the <tt class="literal">ResultSet</tt>.</p></dd>





<dt><b>
<a name="INDEX-2158" />deleteRow(  )</b></dt>

<dd><blockquote><pre class="code">public void deleteRow() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Deletes the current row from this
result set and from the database.</p></dd>





<dt><b>
<a name="INDEX-2159" />findColumn(  )</b></dt>

<dd><blockquote><pre class="code">public int findColumn(String cname) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> For the specified column name, this
method will return the column number associated with it.</p></dd>





<dt><b>
<a name="INDEX-2160" />first(  )</b></dt>

<dd><blockquote><pre class="code">public boolean first() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Moves the cursor to the first row
of a result set.</p></dd>





<dt><b>
<a name="INDEX-2161" />getAsciiStream(  ), <a name="INDEX-2162" />getBinaryStream(  ), <a name="INDEX-2163" />getCharacterStream(  ), and <a name="INDEX-2164" />getUnicodeStream(  )</b></dt>

<dd><blockquote><pre class="code">public InputStream getAsciiStream(int index)
    throws SQLException
public InputStream getAsciiStream(String cname) 
    throws SQLException
public InputStream getBinaryStream(int index) 
    throws SQLException
public InputStream getBinaryStream(String cname) 
    throws SQLException
public Reader getCharacterStream(int index)
    throws SQLException
public Reader getCharacterStream(String cname)
    throws SQLException
#public InputStream getUnicodeStream(int index) 
    throws SQLException
#public InputStream getUnicodeStream(String cname) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> In some cases, it may make sense to
retrieve large pieces of data from the database as a Java
<tt class="literal">InputStream</tt>. These methods allow an application to
retrieve the specified column from the current row in this manner.
You should notice that the <tt class="literal">getUnicodeStream()</tt>
method has been deprecated in favor of the new
<tt class="literal">getCharacterStream()</tt> method.</p></dd>





<dt><b>
<a name="INDEX-2165" />
<a name="INDEX-2166" />
<a name="INDEX-2167" />
<a name="INDEX-2168" />
<a name="INDEX-2169" />
<a name="INDEX-2170" />
<a name="INDEX-2171" />
<a name="INDEX-2172" />
<a name="INDEX-2173" />
<a name="INDEX-2174" />
<a name="INDEX-2175" />
<a name="INDEX-2176" />getArray(  ), getBlob(  ), getBoolean(  ), getByte(  ), getBytes(  ), getClob(  ), getDate(  ), getDouble(  ), getFloat(  ), getInt(  ), getLong(  ), getRef(  ), <a name="INDEX-2177" />
<a name="INDEX-2178" />
<a name="INDEX-2179" />
<a name="INDEX-2180" />getShort(  ), getString(  ), getTime(  ), and getTimestamp(  )</b></dt>

<dd><blockquote><pre class="code">public Array getArray(int index) throws SQLException
public Array getArray(String cname) throws SQLException
public Blob getBlob(int index) throws SQLException
public Blob getBlob(String cname) throws SQLException
public boolean getBoolean(int index) throws SQLException
public boolean getBoolean(String cname) throws SQLException
public byte getByte(int index) throws SQLException
public byte getByte(String cname) throws SQLException
public byte[] getBytes(int index) throws SQLException
public byte[] getBytes(String cname) throws SQLException
public Clob getClob(int index) throws SQLException
public Clob getClob(String cname) throws SQLException
public Date getDate(int index) throws SQLException
public Date getDate(String cname) throws SQLException
public double getDouble(int index) throws SQLException
public double getDouble(String cname) throws SQLException
public float getFloat(int index) throws SQLException
public float getFloat(String cname) throws SQLException
public int getInt(int index) throws SQLException
public int getInt(String cname) throws SQLException
public long getLong(int index) throws SQLException
public long getLong(String cname) throws SQLException
public Ref getRef(int index) throws SQLException
public Ref getRef(String cname) throws SQLException
public short getShort(int index) throws SQLException
public short getShort(String cname) throws SQLException
public String getString(int index) throws SQLException
public String getString(String cname) throws SQLException
public Time getTime(int index) throws SQLException
public Time getTime(String cname) throws SQLException
public Timestamp getTimestamp(int index) 
    throws SQLException
public Timestamp getTimestamp(String cname)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> These methods return the specified
column value for the current row as the Java datatype that matches
the method name.</p></dd>





<dt><b>
<a name="INDEX-2181" />getConcurrency(  ), and <a name="INDEX-2182" />setConcurrency(  )</b></dt>

<dd><blockquote><pre class="code">public int getConcurrency() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> These methods access the result set
concurrency mode. It initially takes its value from the statement
that generated this result set.</p></dd>





<dt><b>
<a name="INDEX-2183" />getCursorName(  )</b></dt>

<dd><blockquote><pre class="code">public String getCursorName() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Because some databases allow
positioned updates, an application needs the cursor name associated
with a <tt class="literal">ResultSet</tt> in order to perform those
positioned updates. This method provides the cursor name.</p></dd>





<dt><b>
<a name="INDEX-2184" />getMetaData(  )</b></dt>

<dd><blockquote><pre class="code">public ResultSetMetaData getMetaData() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the meta-data object for
this <tt class="literal">ResultSet</tt>.</p></dd>





<dt><b>
<a name="INDEX-2185" />getFetchDirection(  ), <a name="INDEX-2186" />setFetchDirection(  ), <a name="INDEX-2187" />getFetchSize(  ), and <a name="INDEX-2188" />setFetchSize(  )</b></dt>

<dd><blockquote><pre class="code">public int getFetchDirection() throws SQLException
public void setFetchDirection(int dir) throws SQLException
public int getFetchSize() throws SQLException
public void setFetchSize(int rows) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> These methods provide optimization
hints for the driver. The driver is free to ignore these hints. The
fetch size is the suggested number of rows the driver should prefetch
for each time it grabs data from the database. The direction is a
hint to the driver about the direction in which you intend to work.</p></dd>





<dt><b>
<a name="INDEX-2189" />getObject(  )</b></dt>

<dd><blockquote><pre class="code">public Object getObject(int index) throws SQLException
public Object getObject(int index, Map map)
    throws SQLException
public Object getObject(String cname) throws SQLException
public Object getObject(String cname, Map map)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the specified column value
for the current row as a Java object. The type returned will be the
Java object that most closely matches the SQL type for the column. It
is also useful for columns with database-specific datatypes.</p></dd>





<dt><b>
<a name="INDEX-2190" />getRow(  )</b></dt>

<dd><blockquote><pre class="code">public int getRow() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the current row number.</p></dd>





<dt><b>
<a name="INDEX-2191" />getStatement(  )</b></dt>

<dd><blockquote><pre class="code">public Statement getStatement() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the
<tt class="literal">Statement</tt> instance that generated this result set.</p></dd>





<dt><b>
<a name="INDEX-2192" />getType(  )</b></dt>

<dd><blockquote><pre class="code">public int getType() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the result set type for
this result set.</p></dd>





<dt><b>
<a name="INDEX-2193" />getWarnings(  )</b></dt>

<dd><blockquote><pre class="code">public SQLWarning getWarnings() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the first
<tt class="literal">SQLWarning</tt> object in the warning chain.</p></dd>





<dt><b>
<a name="INDEX-2194" />insertRow(  )</b></dt>

<dd><blockquote><pre class="code">public void insertRow() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Inserts the contents of the insert
row into the result set and into the database.</p></dd>





<dt><b>
<a name="INDEX-2195" />isAfterLast(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isAfterLast() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns true if this result set is
positioned after the last row in the result set.</p></dd>





<dt><b>
<a name="INDEX-2196" />isBeforeLast(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isBeforeFirst() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns true if this result set is
positioned before the first row in the result set.</p></dd>





<dt><b>
<a name="INDEX-2197" />isFirst(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isFirst() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns true if the result set is
positioned on the first row of the result set.</p></dd>





<dt><b>
<a name="INDEX-2198" />isLast(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isLast() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns true if result set is
positioned after the last row in the result set.</p></dd>





<dt><b>
<a name="INDEX-2199" />last(  )</b></dt>

<dd><blockquote><pre class="code">public boolean last() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Moves the cursor to the last row in
the result set.</p></dd>





<dt><b>
<a name="INDEX-2200" />moveToCurrentRow(  )</b></dt>

<dd><blockquote><pre class="code">public void moveToCurrentRow() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Moves the result set to the current
row. This is used after you are done inserting a row.</p></dd>





<dt><b>
<a name="INDEX-2201" />moveToInsertRow(  )</b></dt>

<dd><blockquote><pre class="code">public void moveToInsertRow() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Moves the result to a new insert
row. You need to call <tt class="literal">moveToCurrentRow() </tt>to get
back.</p></dd>





<dt><b>
<a name="INDEX-2202" />next(  ) and <a name="INDEX-2203" />previous(  )</b></dt>

<dd><blockquote><pre class="code">public boolean next() throws SQLException
public boolean previous() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> These methods navigate one row
forward or one row backward in the <tt class="literal">ResultSet</tt>.
Under a newly created result set, the result set is positioned before
the first row. The first call to next() would thus move the result
set to the first row. These methods return <tt class="literal">true</tt> as
long as there is a row to move to. If there are no further rows to
process, it returns <tt class="literal">false</tt>. If an
<tt class="literal">InputStream</tt> from the previous row is still open,
it is closed. The <tt class="literal">SQLWarning</tt> chain is also
cleared.</p></dd>





<dt><b>
<a name="INDEX-2204" />refreshRow(  )</b></dt>

<dd><blockquote><pre class="code">public void refreshRow() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Refreshes the current row with its
most recent value from the database.</p></dd>





<dt><b>
<a name="INDEX-2205" />relative(  )</b></dt>

<dd><blockquote><pre class="code">public boolean relative(int rows) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Moves the cursor the specified
number of rows forwards or backwards. A positive number indicates
that the cursor should be moved forwards and a negative number
indicates it should be moved backwards.</p></dd>





<dt><b>
<a name="INDEX-2206" />rowDeleted(  ), <a name="INDEX-2207" />rowInserted(  ), and <a name="INDEX-2208" />rowUpdated(  )</b></dt>

<dd><blockquote><pre class="code">public boolean rowDeleted() throws SQLException
public boolean rowInserted() throws SQLException
public boolean rowUpdated() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns true if the current row has
been deleted, inserted, or updated.</p></dd>





<dt><b>
<a name="INDEX-2209" />
<a name="INDEX-2210" />
<a name="INDEX-2211" />
<a name="INDEX-2212" />
<a name="INDEX-2213" />
<a name="INDEX-2214" />
<a name="INDEX-2215" />
<a name="INDEX-2216" />
<a name="INDEX-2217" />updateAsciiStream(  ), updateBigDecimal(  ), updateBinaryStream(  ), update- Boolean(  ), updateByte(  ), updateBytes(  ), updateCharacterStream(  ), updateDate(  ), updateDouble(  ), <a name="INDEX-2218" />
<a name="INDEX-2219" />
<a name="INDEX-2220" />
<a name="INDEX-2221" />
<a name="INDEX-2222" />
<a name="INDEX-2223" />
<a name="INDEX-2224" />
<a name="INDEX-2225" />
<a name="INDEX-2226" />updateFloat(  ), updateInt(  ), updateLong(  ), updateNull(  ), update- Object(  ), updateShort(  ), updateString(  ), updateTime(  ), and updateTimestamp(  )</b></dt>

<dd><blockquote><pre class="code">public void updateAsciiStream(int index, InputStream is,
    int length) throws SQLException
public void updateAsciiStream(String cname, InputStream is,
    int length) throws SQLException
public void updateBigDecimal(int index, BigDecimal d)
    throws SQLException
public void updateBigDecimal(String cname, BigDecimal d)
    throws SQLException
public void updateBinaryStream(int index, InputStream is)
    throws SQLException
public void updateBinaryStream(String cname, InputStream is)
    throws SQLException
public void updateBoolean(int index, boolean b)
    throws SQLException
public void updateBoolean(String cname, boolean b)
    throws SQLException
public void updateByte(int index, byte b)
    throws SQLException
public void updateByte(String cname, byte b) 
    throws SQLException
public void updateBytes(int index, byte[] bts)
    throws SQLException
public void updateBytes(String cname, byte[] bts)
    throws SQLException
public void updateCharacterStream(int index, Reader rdr,
    int length) throws SQLException
public void updateCharacterStream(String cname, Reader rdr,
    int length) throws SQLException
public void updateDate(int index, Date d) 
    throws SQLException
public void updateDate(String cname, Date d)
    throws SQLException
public void updateDouble(int index, double d)
    throws SQLException
public void updateDouble(String cname, double d)
    throws SQLException
public void updateFloat(int index, float f)
    throws SQLException
public void updateFloat(String cname, float f)
    throws SQLException
public void updateInt(int index, int x) 
    throws SQLException
public void updateInt(String cname, int x)
    throws SQLException
public void updateLong(int index, long x)
    throws SQLException
public void updateLong(String cname, long x)
    throws SQLException
public void updateNull(int index) throws SQLException
public void updateNull(String cname) throws SQLException
public void updateObject(int index, Object ob)
    throws SQLException
public void updateObject(int index, Object ob, int scale)
    throws SQLException
public void updateObject(String cname, Object ob)
    throws SQLException
public void updateObject(String cname, Object ob, int scale)
    throws SQLException
public void updateShort(int index, short s)
    throws SQLException
public void updateShort(String cname, short s)
    throws SQLException
public void updateString(int index, String str)
    throws SQLException
public void updateString(String cname, String str)
    throws SQLException
public void updateTime(int index, Time t)
    throws SQLException
public void updateTime(String cname, Time t)
    throws SQLException
public void updateTimestamp(int index, Timestamp ts)
    throws SQLException
public void updateTimestamp(String cname, Timestamp ts)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> These methods update column by
column in the current row of your result set as long as your result
set supports updating. Once you are done modifying the row, you can
call <tt class="literal">insertRow()</tt> or <tt class="literal">updateRow()</tt>
to save the changes to the database.</p></dd>





<dt><b>
<a name="INDEX-2227" />updateRow(  )</b></dt>

<dd><blockquote><pre class="code">public void updateRow() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Updates any changes made to the
current row to the database.</p></dd>





<dt><b>
<a name="INDEX-2228" />wasNull(  )</b></dt>

<dd><blockquote><pre class="code">public boolean wasNull() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method returns<tt class="literal">
true</tt> if the last column read was <tt class="literal">null</tt>;
otherwise it returns <tt class="literal">false</tt>.</p></dd>

</dl>





</div>

<a name="INDEX-2229" /><a name="INDEX-2230" /><a name="INDEX-2231" /><a name="INDEX-2232" /><a name="INDEX-2233" /><a name="INDEX-2234" /><a name="INDEX-2235" /><a name="INDEX-2236" /><a name="INDEX-2237" /><a name="INDEX-2238" /><a name="INDEX-2239" /><a name="INDEX-2240" /><a name="INDEX-2241" /><a name="INDEX-2242" /><a name="INDEX-2243" /><a name="INDEX-2244" /><a name="INDEX-2245" /><a name="INDEX-2246" /><a name="INDEX-2247" /><a name="INDEX-2248" /><a name="INDEX-2249" /><a name="INDEX-2250" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>ResultSetMetaData</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name:	<tt class="literal">java.sql.ResultSetMetaData</tt></p>

<p>Superclass:	None</p>

<p>Immediate Subclasses:	None</p>

<p>Interfaces Implemented:	None</p>

<p>Availability:	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description      </h4>





<p>This class provides meta-information about the types and properties
of the columns in a <tt class="literal">ResultSet</tt> instance.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface ResultSetMetaData {
    static public final int columnNoNulls;
    static public final int columnNullable;
    static public final int columnNullableUnknown;
    String getCatalogName(int index) 
        throws SQLException;
    String getColumnClassName(int index)
        throws SQLException;
    public int getColumnCount() throws SQLException;
    public int getColumnDisplaySize(int index) 
        throws SQLException;
    public String getColumnLabel(int index) 
        throws SQLException;
    public String getColumnName(int index) 
        throws SQLException;
    public int getColumnType(int index) throws SQLException;
    public String getColumnTypeName(int index) 
        throws SQLException;
    public int getPrecision(int index) throws SQLException;
    public int getScale(int index) throws SQLException;
    public String getSchemaName(int index) 
        throws SQLException;
    public String getTableName(int index) 
        throws SQLException;
    public boolean isAutoIncrement(int index) 
        throws SQLException;
    public isCaseSensitive(int index) 
        throws SQLException;
    public boolean isCurrency(int index)
        throws SQLException;
    public boolean isDefinitelyWritable(int index)
        throws SQLException;
    public int isNullable(int index) throws SQLException;
    public boolean isReadOnly(int index)
        throws SQLException;
    public boolean isSearchable(int index)
        throws SQLException;
    public boolean isSigned(int index) throws SQLException;
    public boolean isWritable(int index) 
        throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Class Attributes</h4>





<dl>
<dt><b>columnNoNulls</b></dt>
<dd><blockquote><pre class="code">static public final int columnNoNulls</pre></blockquote>





<p><em class="emphasis">Description:</em> The column in question does not
allow <tt class="literal">NULL</tt> values.</p></dd>





<dt><b>columnNullable</b></dt>
<dd><blockquote><pre class="code">static public final int columnNullable</pre></blockquote>





<p><em class="emphasis">Description:</em> The column in question allows
<tt class="literal">NULL</tt> values.</p></dd>





<dt><b>columnNullableUnknown</b></dt>
<dd><blockquote><pre class="code">static public final int columnNullableUnknown</pre></blockquote>





<p><em class="emphasis">Description:</em> It is not known if the column in
question can accept <tt class="literal">NULL</tt> values.</p></dd>

</dl>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2230" />getCatalogName(  )</b></dt>

<dd><blockquote><pre class="code">public String getCatalogName(int index) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the catalog name
associated with the specified column's table.</p></dd>





<dt><b>
<a name="INDEX-2231" />getColumnClassName(  )</b></dt>

<dd><blockquote><pre class="code">public String getColumnClassName(int index)
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the fully-qualified name
of the Java class that will be instantiated by a call to
<tt class="literal">ResultSet.getObject()</tt> for this column.</p></dd>





<dt><b>
<a name="INDEX-2232" />getColumnCount(  )</b></dt>

<dd><blockquote><pre class="code">public int getColumnCount() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the number of columns in
the result set.</p></dd>





<dt><b>
<a name="INDEX-2233" />getColumnDisplaySize(  )</b></dt>

<dd><blockquote><pre class="code">public int getColumnDisplaySize(int column) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the maximum width for
displaying the column's values.</p></dd>





<dt><b>
<a name="INDEX-2234" />getColumnLabel(  )</b></dt>

<dd><blockquote><pre class="code">public String getColumnLabel(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the display name for the
column.</p></dd>





<dt><b>
<a name="INDEX-2235" />getColumnName(  )</b></dt>

<dd><blockquote><pre class="code">public String getcname(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the database name for the
column.</p></dd>





<dt><b>
<a name="INDEX-2236" />getColumnType(  )</b></dt>

<dd><blockquote><pre class="code">public int getColumnType(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the SQL type for the
specified column as a value from <tt class="literal">java.sql.Types</tt>.</p></dd>





<dt><b>
<a name="INDEX-2237" />getColumnTypeName(  )</b></dt>

<dd><blockquote><pre class="code">public String getColumnTypeName(int column) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the name of the SQL type
for the specified column.</p></dd>





<dt><b>
<a name="INDEX-2238" />getPrecision(  )</b></dt>

<dd><blockquote><pre class="code">public int getPrecision(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the number of decimal
digits for the specified column.</p></dd>





<dt><b>
<a name="INDEX-2239" />getScale(  )</b></dt>

<dd><blockquote><pre class="code">public int getScale(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the number of digits to the
right of the decimal for this column.</p></dd>





<dt><b>
<a name="INDEX-2240" />getSchemaName(  )</b></dt>

<dd><blockquote><pre class="code">public String getSchemaName(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the schema for the table
for the specified column.</p></dd>





<dt><b>
<a name="INDEX-2241" />getTableName(  )</b></dt>

<dd><blockquote><pre class="code">public String getTableName(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the name of the table for
the specified column.</p></dd>





<dt><b>
<a name="INDEX-2242" />isAutoIncrement(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isAutoIncrement(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
the column is automatically numbered and therefore read-only.</p></dd>





<dt><b>
<a name="INDEX-2243" />isCaseSensitive(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isCaseSensitive(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
the column's case is important.</p></dd>





<dt><b>
<a name="INDEX-2244" />isCurrency(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isCurrency(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns<tt class="literal"> true</tt> if
the value for the specified column represents a currency value.</p></dd>





<dt><b>
<a name="INDEX-2245" />isDefinitelyWritable(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isDefinitelyWritable(int column) 
    throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
a write operation on the column will definitely succeed.</p></dd>





<dt><b>
<a name="INDEX-2246" />isNullable(  )</b></dt>

<dd><blockquote><pre class="code">public int isNullable(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
<tt class="literal">null</tt> values are allowed for the column.</p></dd>





<dt><b>
<a name="INDEX-2247" />isReadOnly(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isReadOnly(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
the column is read-only.</p></dd>





<dt><b>
<a name="INDEX-2248" />isSearchable(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isSearchable(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
the column may be used in a WHERE clause.</p></dd>





<dt><b>
<a name="INDEX-2249" />isSigned(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isSigned(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
the column contains a signed number.</p></dd>





<dt><b>
<a name="INDEX-2250" />isWritable(  )</b></dt>

<dd><blockquote><pre class="code">public boolean isWritable(int column) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
it is possible for a write on a column to succeed.</p></dd>

</dl>





</div>

<a name="INDEX-2251" /><a name="INDEX-2252" /><a name="INDEX-2253" /><a name="INDEX-2254" /><a name="INDEX-2255" /><a name="INDEX-2256" /><a name="INDEX-2257" /><a name="INDEX-2258" /><a name="INDEX-2259" /><a name="INDEX-2260" /><a name="INDEX-2261" /><a name="INDEX-2262" /><a name="INDEX-2263" /><a name="INDEX-2264" /><a name="INDEX-2265" /><a name="INDEX-2266" /><a name="INDEX-2267" /><a name="INDEX-2268" /><a name="INDEX-2269" /><a name="INDEX-2270" /><a name="INDEX-2271" /><a name="INDEX-2272" /><a name="INDEX-2273" /><a name="INDEX-2274" /><a name="INDEX-2275" /><a name="INDEX-2276" /><a name="INDEX-2277" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Statement</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name:	<tt class="literal">java.sql.Statement</tt></p>

<p>Superclass:	None</p>

<p>Immediate Subclasses:	<tt class="literal">java.sql.PreparedStatement</tt></p>

<p>Interfaces Implemented:	None</p>

<p>Availability:	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description    </h4>





<p>This class represents an embedded SQL statement and is used by an
application to perform database access. The closing of a
<tt class="literal">Statement</tt> automatically closes any open
<tt class="literal">ResultSet</tt> associated with the
<tt class="literal">Statement</tt>.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Statement {
    void addBatch(String sql) throws SQLException;
    void cancel() throws SQLException;
    void clearBatch() throws SQLException;
    void clearWarnings() throws SQLException;
    void close() throws SQLException;
    boolean execute(String sql) throws SQLException;
    int[] executeBatch() throws SQLException;
    ResultSet executeQuery(String sql) 
        throws SQLException;
    int executeUpdate(String sql) throws SQLException;
    Connection getConnection() throws SQLException;
    int getFetchDirection() throws SQLException;
    int getFetchSize() throws SQLException;
    int getMaxFieldSize() throws SQLException;    
    int getMaxRows() throws SQLException;
    boolean getMoreResults() throws SQLException;
    int getQueryTimeout() throws SQLException;
    ResultSet getResultSet() throws SQLException;
    int getResultSetConcurrency() throws SQLException;
    int getResultSetType() throws SQLException;
    int getUpdateCount() throws SQLException;
    SQLWarning getWarnings() throws SQLException;
    void setCursorName(String name) throws SQLException;
    void setEscapeProcessing(boolean enable) 
        throws SQLException;
    void setFetchDirection(int dir) throws SQLException;
    void setFetchSize(int rows) throws SQLException;
    void setMaxFieldSize(int max) throws SQLException;
    void setMaxRows(int max) throws SQLException;
    void setQueryTimeout(int seconds) 
        throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2252" />addBatch(  )</b></dt>

<dd><blockquote><pre class="code">public void addBatch(String sql) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Adds the specified SQL statement to
the current set of batch commands.</p></dd>





<dt><b>
<a name="INDEX-2253" />cancel(  )</b></dt>

<dd><blockquote><pre class="code">public void cancel() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> In a multithreaded environment, you
can use this method to indicate that any processing for this
<tt class="literal">Statement</tt> should be canceled. In this respect, it
is similar to the <tt class="literal">stop()</tt> method for
<tt class="literal">Thread</tt> objects.</p></dd>





<dt><b>
<a name="INDEX-2254" />clearBatch(  )</b></dt>

<dd><blockquote><pre class="code">public void clearBatch() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Clears out any batch statements.</p></dd>





<dt><b>
<a name="INDEX-2255" />clearWarnings(  ) and <a name="INDEX-2256" />getWarnings(  )</b></dt>

<dd><blockquote><pre class="code">public void clearWarnings() throws SQLException
public SQLWarning getWarnings() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> The
<tt class="literal">clearWarnings()</tt> method allows you to clear all
warnings from the warning chain associated with this class. The
<tt class="literal">getWarnings()</tt> method retrieves the first warning
on the chain. You can retrieve any subsequent warnings on the chain
using that first warning.</p></dd>





<dt><b>
<a name="INDEX-2257" />close(  )</b></dt>

<dd><blockquote><pre class="code">public void close() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Manually closes the
<tt class="literal">Statement</tt>. This is generally not required because
a <tt class="literal">Statement</tt> is automatically closed whenever the
<tt class="literal">Connection</tt> associated with it is closed.</p></dd>





<dt><b>
<a name="INDEX-2258" />execute(  ), <a name="INDEX-2259" />executeQuery(  ), and <a name="INDEX-2260" />executeUpdate(  )</b></dt>

<dd><blockquote><pre class="code">public boolean execute(String sql) throws SQLException
public ResultSet executeQuery(String sql) throws SQLException
public int executeUpdate(String sql) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Executes the
<tt class="literal">Statement</tt> by passing the specified SQL to the
database. The first method, <tt class="literal">execute(),</tt> allows you
to execute the <tt class="literal">Statement</tt> when you do not know if
it is a query or an update. It will return <tt class="literal">true</tt> if
the statement has result sets to process.</p>





<p>The <tt class="literal">executeQuery()</tt> method is used for executing
queries. It returns a result set for processing.</p>





<p>The <tt class="literal">executeUpdate()</tt> statement is used for
executing updates. It returns the number of rows affected by the
update.</p></dd>





<dt><b>
<a name="INDEX-2261" />executeBatch(  )</b></dt>

<dd><blockquote><pre class="code">public int[] executeBatch(String sql) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Submits the batched list of SQL
statements to the database for execution. The return value is an
array of numbers that describe the number of rows affected by each
SQL statement.</p></dd>





<dt><b>
<a name="INDEX-2262" />getConnection(  )</b></dt>

<dd><blockquote><pre class="code">public Connection getConnection() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the
<tt class="literal">Connection</tt> object associated with this
<tt class="literal">Statement</tt>.</p></dd>





<dt><b>
<a name="INDEX-2263" />getFetchDirection(  ), <a name="INDEX-2264" />setFetchDirection(  ), getFetchSize(  ), and <a name="INDEX-2265" />setFetchSize(  )</b></dt>

<dd><blockquote><pre class="code">public int getFetchDirection() throws SQLException
public void setFetchDirection(int dir) throws SQLException
public int getFetchSize() throws SQLException
public void setFetchSize(int rows) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> These methods provide optimization
hints for the driver. The driver is free to ignore these hints. The
fetch size is the suggested number of rows the driver should prefetch
for each time it grabs data from the database. The direction is a
hint to the driver about the direction in which you intend to work.</p></dd>





<dt><b>
<a name="INDEX-2266" />getMaxFieldSize(  ) and <a name="INDEX-2267" />setMaxFieldize(  )</b></dt>

<dd><blockquote><pre class="code">public int getMaxFieldSize() throws SQLException
public void setMaxFieldSize(int max) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> These methods support the maximum
field size attribute that determines the maximum amount of data for
any BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR
column value. If the limit is exceeded, the excess is silently
discarded.</p></dd>





<dt><b>
<a name="INDEX-2268" />getMaxRows(  ) and <a name="INDEX-2269" />setMaxRows(  )</b></dt>

<dd><blockquote><pre class="code">public int getMaxRows() throws SQLException
public void setMaxRows(int max) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This attribute represents the
maximum number of rows a <tt class="literal">ResultSet</tt> can contain. If
this number is exceeded, then any excess rows are silently discarded.</p></dd>





<dt><b>
<a name="INDEX-2270" />getMoreResults(  )</b></dt>

<dd><blockquote><pre class="code">public boolean getMoreResults() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method moves to the next
result and returns <tt class="literal">true</tt> if that result is a
<tt class="literal">ResultSet</tt>. Any previously open
<tt class="literal">ResultSet</tt> for this <tt class="literal">Statement</tt> is
then implicitly closed. If the next result is not a
<tt class="literal">ResultSet</tt> or if there are no more results, this
method will return <tt class="literal">false</tt>. You can test explicitly
for no more results using:</p>





<blockquote><pre class="code">(!getMoreResults() &amp;&amp; (getUpdateCount() == -1)</pre></blockquote></dd>






<dt><b>getQueryTimeout(  ) and setQueryTimeout(  )</b></dt>
<dd><blockquote><pre class="code">public int getQueryTimeout() throws SQLException
public void setQueryTimeout(int seconds) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This attribute is the amount of
time a driver will wait for a <tt class="literal">Statement</tt> to
execute. If the limit is exceeded, an <tt class="literal">SQLException</tt>
is thrown.</p></dd>





<dt><b>
<a name="INDEX-2271" />getResultSet(  )</b></dt>

<dd><blockquote><pre class="code">public ResultSet getResultSet() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method returns the current
<tt class="literal">ResultSet</tt>. You should call this only once per
result. You never need to call this for
<tt class="literal">executeQuery()</tt> calls that return a single result.</p></dd>





<dt><b>
<a name="INDEX-2272" />getResultSetConcurrency(  )</b></dt>

<dd><blockquote><pre class="code">public int getResultSetConcurrency() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the concurrency for the
result sets generated by this <tt class="literal">Statement</tt>.</p></dd>





<dt><b>
<a name="INDEX-2273" />getResultSetType(  )</b></dt>

<dd><blockquote><pre class="code">public int getResultSetType() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns the result set type for any
result sets generated by this <tt class="literal">Statement</tt>.</p></dd>





<dt><b>
<a name="INDEX-2274" />getUpdateCount(  )</b></dt>

<dd><blockquote><pre class="code">public int getUpdateCount() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> If the current result was an
update, this method returns the number of rows affected by the
update. If the result is a <tt class="literal">ResultSet</tt> or if there
are no more results, -1 is returned. As with
<tt class="literal">getResultSet()</tt>, this method should only be called
once per result.</p></dd>





<dt><b>
<a name="INDEX-2275" />getWarnings(  )</b></dt>

<dd><blockquote><pre class="code">public SQLWarning getWarnings() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Retrieves the first warning
associated with this object.</p></dd>





<dt><b>
<a name="INDEX-2276" />setCursorName(  )</b></dt>

<dd><blockquote><pre class="code">public void setCursorName(String name) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> This method specifies the cursor
name to be used by subsequent <tt class="literal">Statement</tt>
executions. For databases that support positioned updates and
deletes, you can then use this cursor name in coordination with any
<tt class="literal">ResultSet</tt> objects returned by your
<tt class="literal">execute()</tt> or <tt class="literal">executeQuery()</tt>
calls to identify the current row for a positioned update or delete.
You must use a different <tt class="literal">Statement</tt> object to
perform those updates or deletes. This method does nothing for
databases that do not support positioned updates or deletes.</p></dd>





<dt><b>
<a name="INDEX-2277" />setEscapeProcessing(  )</b></dt>

<dd><blockquote><pre class="code">public void setEscapeProcessing(boolean enable)
        throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Escape processing is on by default.
When enabled, the driver will perform escape substitution before
sending SQL to the database.</p></dd>

</dl>





</div>

<a name="INDEX-2278" /><a name="INDEX-2279" /><a name="INDEX-2280" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Struct</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name:	<tt class="literal">java.sql.Struct</tt></p>

<p>Superclass:	<tt class="literal">None</tt></p>

<p>Immediate Subclasses:	None</p>

<p>Interfaces Implemented:	None</p>

<p>Availability:	New as of JDK 1.2</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class maps to a SQL3 structured type. A
<tt class="literal">Struct</tt> instance has values that map to each of the
attributes in its associated structured value in the database.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public interface Struct {
    Object[] getAttributes() throws SQLException;
    Object[] getAttributes(Map map) throws SQLException;
    String getSQLTypeName() throws SQLException;
}</pre></blockquote>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2279" />getAttributes(  )</b></dt>

<dd><blockquote><pre class="code">public Object[] getAttributes() throws SQLException
public Object[] getAttributes(Map map) throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the values for the
attributes in the SQL structured type in order. If you pass a type
map, it will use that type map to construct the Java values.</p></dd>





<dt><b>
<a name="INDEX-2280" />getSQLTypeName(  )</b></dt>

<dd><blockquote><pre class="code">public String getSQLTypeName() throws SQLException</pre></blockquote>





<p><em class="emphasis">Description:</em> Provides the SQL type name for this
structured type.</p></dd>

</dl>





</div>

<a name="INDEX-2281" /><a name="INDEX-2282" /><a name="INDEX-2283" /><a name="INDEX-2284" /><a name="INDEX-2285" /><a name="INDEX-2286" /><a name="INDEX-2287" /><a name="INDEX-2288" /><a name="INDEX-2289" /><a name="INDEX-2290" /><a name="INDEX-2291" /><a name="INDEX-2292" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Time</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name:	<tt class="literal">java.sql.Time</tt></p>

<p>Superclass:	<tt class="literal">java.util.Date</tt></p>

<p>Immediate Subclasses:	None</p>

<p>Interfaces Implemented:	None</p>

<p>Availability:	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This version of the java.util.Date class maps to an SQL TIME datatype.</p>






<h4 class="refsect1">Class Summary     </h4>





<blockquote><pre class="code">public class Time extends java.util.Date {
    static public Time valueOf(String s);
    public Time(int hour, int minute, int second);
    public Time(long time);
    #public int getDate();
    #public int getDay();
    #public int getMonth();
    #public int getYear();
    #public int setDate(int i);
    #public int setMonth(int i);
    public void setTime(long time);
    #public void setYear(int i);
    public String toString();
}</pre></blockquote>






<h4 class="refsect1">Object Constructors</h4>





<dl>
<dt><b>
<a name="INDEX-2282" />Time(  )</b></dt>

<dd><blockquote><pre class="code">public Timestamp(int hour, int minute, intsecond)
public Timestamp(long time)</pre></blockquote>





<p><em class="emphasis">Description:</em> Constructs a new
<tt class="literal">Time</tt> object. The first prototype constructs a
<tt class="literal">Time</tt> for the hour, minute, and seconds specified.
The second constructs one based on the number of seconds since
12:00:00 January 1, 1970 GMT.</p></dd>

</dl>






<h4 class="refsect1">Object Methods</h4>





<dl>
<dt><b>
<a name="INDEX-2283" />getDate(  ), <a name="INDEX-2284" />setDate(  ), <a name="INDEX-2285" />getDay(  ), <a name="INDEX-2286" />getMonth(  ), <a name="INDEX-2287" />setMonth(  ), <a name="INDEX-2288" />getYear(  ), and <a name="INDEX-2289" />setYear(  )</b></dt>

<dd><blockquote><pre class="code">#public int getDate()
#public int getDay()
#public int getMonth()
#public int getYear()
#public int setDate(int i)
#public int setMonth(int i)
#public void setYear(int i)</pre></blockquote>





<p><em class="emphasis">Description:</em> These attributes represent the
individual segments of a <tt class="literal">Time</tt> object.</p></dd>





<dt><b>
<a name="INDEX-2290" />setTime(  )</b></dt>

<dd><blockquote><pre class="code">public void setTime(long time)</pre></blockquote>





<p><em class="emphasis">Description:</em> This method sets the
<tt class="literal">Time</tt> object to the specified time as the number of
seconds since 12:00:00 January 1, 1970 GMT.</p></dd>





<dt><b>
<a name="INDEX-2291" />toString(  )</b></dt>

<dd><blockquote><pre class="code">public String toString()</pre></blockquote>





<p><em class="emphasis">Description:</em> Formats the <tt class="literal">Time</tt>
into a <tt class="literal">String</tt> in the form of<tt class="literal">
hh:mm:ss</tt>.</p></dd>





<dt><b>
<a name="INDEX-2292" />valueOf(  )</b></dt>

<dd><blockquote><pre class="code">static public Timestamp valueOf(String s)</pre></blockquote>





<p><em class="emphasis">Description:</em> Create a new
<tt class="literal">Time</tt> based on a <tt class="literal">String</tt> in the
form of <tt class="literal">hh:mm:ss</tt>.</p></dd>

</dl>





</div>

<a name="INDEX-2293" /><a name="INDEX-2294" /><a name="INDEX-2295" /><a name="INDEX-2296" /><a name="INDEX-2297" /><a name="INDEX-2298" /><a name="INDEX-2299" /><a name="INDEX-2300" /><a name="INDEX-2301" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Timestamp</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name:	<tt class="literal">java.sql.Timestamp</tt></p>

<p>Superclass:	<tt class="literal">java.util.Date</tt></p>

<p>Immediate Subclasses:	None</p>

<p>Interfaces Implemented:	None</p>

<p>Availability:	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class serves as an SQL representation of the Java
<tt class="literal">Date</tt> class specifically designed to serve as an
SQL TIMESTAMP. It also provides the ability to hold nanoseconds as
required by SQL TIMESTAMP values. You should keep in mind that this
class uses the <tt class="literal">java.util.Date</tt> version of
<tt class="literal">hashcode()</tt>. This means that two timestamps that
differ only by nanoseconds will have identical
<tt class="literal">hashcode()</tt> return values.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public class Timestamp extends java.util.Date {
    static public Timestamp valueOf(String s);
    #public Timestamp(int year, int month, int date, 
        int hour, int minute, int second, int nano);
    public Timestamp(long time);
    public boolean after(Timestamp t);
    public boolean before(Timestamp t);
    public boolean equals(Timestamp t);
    public int getNanos();
    public void setNanos(int n);
    public String toString();
}</pre></blockquote>






<h4 class="refsect1">Object Constructors</h4>





<dl>
<dt><b>
<a name="INDEX-2294" />Timestamp(  )</b></dt>

<dd><blockquote><pre class="code">#public Timestamp(int year, int month, int date, int hour, int minute, 
        int second, int nano)
public Timestamp(long time)</pre></blockquote>





<p><em class="emphasis">Description:</em> Constructs a new
<tt class="literal">Timestamp</tt> object. The first prototype constructs a
<tt class="literal">Timestamp</tt> for the year, month, date, hour, minute,
seconds, and nanoseconds specified. The second prototype constructs
one based on the number of seconds since 12:00:00 January 1, 1970
GMT.</p></dd>

</dl>






<h4 class="refsect1">Object Methods    </h4>





<dl>
<dt><b>
<a name="INDEX-2295" />after(  )</b></dt>

<dd><blockquote><pre class="code">public boolean after(Timestamp t)</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns<tt class="literal"> true</tt> if
this <tt class="literal">Timestamp</tt> is later than the argument.</p></dd>





<dt><b>
<a name="INDEX-2296" />before(  )</b></dt>

<dd><blockquote><pre class="code">public boolean before(Timestamp t)</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns<tt class="literal"> true</tt> if
this <tt class="literal">Timestamp</tt> is earlier than the argument.</p></dd>





<dt><b>
<a name="INDEX-2297" />equals(  )</b></dt>

<dd><blockquote><pre class="code">public boolean equals(Timestamp t)</pre></blockquote>





<p><em class="emphasis">Description:</em> Returns <tt class="literal">true</tt> if
the two timestamps are equivalent.</p></dd>





<dt><b>
<a name="INDEX-2298" />getNanos(  ) and <a name="INDEX-2299" />setNanos(  )</b></dt>

<dd><blockquote><pre class="code">public int getNanos()
public void setNanos(int n)</pre></blockquote>





<p><em class="emphasis">Description:</em> This attribute represents the
number of nanoseconds for this <tt class="literal">Timestamp</tt>.</p></dd>





<dt><b>
<a name="INDEX-2300" />toString(  )</b></dt>

<dd><blockquote><pre class="code">public String toString()</pre></blockquote>





<p><em class="emphasis">Description:</em> Formats the
<tt class="literal">Timestamp</tt> into a <tt class="literal">String</tt> in the
form of <tt class="literal">yyyy-mm-dd hh:mm:ss.fffffffff</tt>.</p></dd>





<dt><b>
<a name="INDEX-2301" />valueOf(  )</b></dt>

<dd><blockquote><pre class="code">static public Timestamp valueOf(String s)</pre></blockquote>





<p><em class="emphasis">Description:</em> Creates a new
<tt class="literal">Timestamp</tt> based on a <tt class="literal">String</tt> in
the form of <tt class="literal">yyyy-mm-dd hh:mm:ss.fffffffff</tt>.</p></dd>

</dl>



</div>

<a name="INDEX-2302" /><div class="refentry"><table cellpadding="5" border="0" width="515"><tr><td align="left"><font size="+1"><b><i>Types</i></b></font></td><td align="right"><i /></td></tr></table><hr color="black" align="left" noshade="true" size="3" width="515" /><table cellpadding="5" border="0" width="515"><tr><td align="left" /><td align="right" /></tr></table>
<h4 class="refsect1">Synopsis</h4>





<blockquote class="simplelist">

<p>Class Name:	<tt class="literal">java.sql.Types</tt></p>

<p>Superclass:	<tt class="literal">java.lang.Object</tt></p>

<p>Immediate Subclasses:	None</p>

<p>Interfaces Implemented:	None</p>

<p>Availability:	JDK 1.1</p>

</blockquote>






<h4 class="refsect1">Description</h4>





<p>This class holds static attributes representing SQL data types. These
values are the actual constant values defined in the XOPEN
specification.</p>






<h4 class="refsect1">Class Summary</h4>





<blockquote><pre class="code">public class Types {
    static public final int ARRAY;
    static public final int BIGINT;
    static public final int BINARY;
    static public final int BIT;
    static public final int BLOB;
    static public final int CHAR;
    static public final int CLOB;
    static public final int DATE;
    static public final int DECIMAL;
    static public final int DISTINCT;
    static public final int DOUBLE;
    static public final int FLOAT;
    static public final int INTEGER;
    static public final int JAVA_OBJECT;
    static public final int LONGVARBINARY;
    static public final int LONGVARCHAR;
    static public final int NULL;
    static public final int NUMERIC;
    static public final int OTHER;
    static public final int REAL;
    static public final int REF;
    static public final int SMALLINT;
    static public final int STRUCT;
    static public final int TIME;
    static public final int TIMESTAMP;
    static public final int TINYINT;
    static public final int VARBINARY;
    static public final int VARCHAR;
}</pre></blockquote>





</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch21_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="index/index.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">21.4. 
Mysql.pm API</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">Index</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>
