<?label 1.4. MySQL and mSQL?><html><head><title>MySQL and mSQL (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch02_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">1.4. MySQL and mSQL</h2>





<p>
<a name="INDEX-19" />
<a name="INDEX-20" />MySQL
and mSQL are very similar, cheap, lightweight, and fast databases.
This book covers both databases due to their overwhelming similarity.
They are, however, different in very important ways and we will be
sure to cover those differences as well. Both systems support C,
Perl, Java (via Java DataBase Connectivity API [JDBC]), and Python
programming. With the tools MySQL and mSQL provide these languages,
it is possible to create full-blown client/server applications and
database-integrated web sites and not spend a fortune. This is great
news for the small web publisher or for anyone developing small-scale
client/server applications who cannot afford to purchase one of the
commercially available products.</p>





<p>The inexpensive -- in some cases, free -- nature of MySQL and
mSQL does not come cost free. Neither DBMS supports the full range of
SQL. These engines lack some features that may be required by more
complex applications. For some applications you also have to work a
little harder on the client side to meet needs that you get for free
from expensive database engines. We will, however, teach you how to
build portable MySQL and mSQL applications so that you have the
option to try out more heavy-weight database engines when your needs
demand them -- you won't have to make a ton of changes to
migrate to a big-time database. In order to understand what these two
engines have to offer, it is best to take a brief look at their
histories.</p>





<a name="ch01-2-fm2xml" /><div class="sect2">
<h3 class="sect2">1.4.1. The History of mSQL</h3>





<p>
<a name="INDEX-21" />Before
1994, you were out of luck if you wanted a SQL-based RDBMS without
paying large sums of money. The dominant commercial SQL solutions
were Oracle, Sybase, and Informix. These database engines were
designed to handle tremendous amounts of data with very complex
relationships. They were powerful and full of features -- and very
resource intensive and expensive. In those days, you could not buy a
$2,000 200 MHz Pentium server. The resources required by these
database engines cost tens of thousands of dollars.</p>





<p>Large corporations and major universities had no problem spending
millions of dollars per year on these large DBMS/server combinations.
As a small organization or individual user, however, you had to
settle for weak desktop database programs. A few cheap client/server
database engines did exist at that time, but none of them used SQL as
their query language. The most notable of these database engines was
Postgres, which was a DBMS descended from the same roots as the
commercial Ingres RDBMS. Postgres, unfortunately, came with similar
resource requirements as its commercial counterparts without the
advantage of SQL as a query language. At the time, postgres used a
variant of the QUEL language called PostQUEL.</p>





<a name="ch01-3-fm2xml" /><div class="sect3">
<h3 class="sect3">1.4.1.1. David Hughes</h3>





<p>
<a name="INDEX-22" />
<a name="INDEX-23" />As part of his Ph.D. thesis at Bond University
in Australia, David Hughes (a.k.a. Bambi) was developing a system of
monitoring and managing a variety of systems from one or more
locations. This project was called the <a name="INDEX-24" />Minerva Network
Management System. A key piece of Minerva was a DBMS for storing
information about the machines on the network. As a university
student without direct access to a server running one of the major
commercial relational database engines, Hughes looked to
<a name="INDEX-25" />Postgres as the obvious solution to
his database needs.</p>





<p>Hughes' colleagues initially suggested that SQL should be the
standard query language for Minerva. After all, SQL was -- and
still is -- the most overwhelmingly accepted standard for a query
language. By standardizing on SQL, Minerva could serve the needs of
people all over the world just as long as they had some type of SQL
DBMS installed. In other words, SQL exposed Minerva to a much wider
audience than <a name="INDEX-26" />PostQUEL, which was limited to
Postgres. As it turns out, today even Postgres speaks SQL.</p>





<p>The tug-of-war between the SQL standard and access to a SQL database
engine left Hughes in a bind. If he based Minerva's query
language on SQL, he would have no database engine. Because buying a
multithousand dollar RDBMS was not an option, Hughes took a creative
approach to the problem. He decided the solution was to create an
application that could translate SQL into PostQUEL on the fly. This
program would intercept all SQL statements sent from Minerva, convert
them to PostQUEL, and then send the PostQUEL on to Postgres. Hughes
created this product and named it miniSQL, or mSQL.</p>
</div>









<a name="ch01-4-fm2xml" /><div class="sect3">
<h3 class="sect3">1.4.1.2. From PostQUEL translator to RDBMS</h3>





<p>For a while, this configuration worked well for Hughes' needs.
The Minerva system did not care what DBMS was in use so long as it
understood SQL. As far as Minerva knew, Postgres did understand SQL
because mSQL was there in the middle to handle PostQUEL translation.
Unfortunately, as Minerva grew bigger, it also grew significantly
slower. It eventually became clear that Postgres -- or any other
huge RDBMS -- was not capable of supporting the small feature set
demanded by Minerva in the limited resources available to Minerva.
For example, Minerva required multiple simultaneous database
connections. In order to support this, Postgres required multiple
instances<a href="#FOOTNOTE-2">[2]</a> of the database server to be running at
the same time. In addition, several potential contributors to the
Minerva project could not get involved because Postgres did not
support their systems and they, too, did not have the option of
purchasing an expensive SQL-based DBMS.</p><blockquote>




<a name="FOOTNOTE-2" /><p>[2]Each process running the same program is
called an instance of that program, because it occupies memory just
as an instance of a variable takes up a program's
memeory.</p>




</blockquote>





<p>In the face of these problems, Hughes reevaluated his decision to use
Postgres. As large and complex as it was, it was likely too complex
for Minerva's needs. Most of Minerva's queries were
simple <tt class="literal">INSERT</tt>, <tt class="literal">DELETE</tt>, and
<tt class="literal">SELECT</tt> statements. All of the other stuff that
cost Postgres in terms of performance simply was not required by
Minerva.</p>





<p>Hughes already had mSQL doing SQL translation. He only needed to add
data storage and retrieval capabilities to it and he had a database
server that met his needs. This evolution led to the mSQL to that
exists today.</p>
</div>
</div>
















<a name="ch01-5-fm2xml" /><div class="sect2">
<h3 class="sect2">1.4.2. The History of MySQL</h3>





<p>
<a name="INDEX-27" />It would be a mistake to characterize MySQL
as a simple reaction to mSQL's failures. Its inventor, Michael
Widenius (a.k.a. Monty) at the Swedish company TcX, has been working
with databases since 1979. Until recently, Widenius was the only
developer at TcX. In 1979, he developed an in-house database tool
called UNIREG for managing databases. Since 1979,
<tt class="literal">UNIREG</tt> has been rewritten in several different
languages and extended to handle big databases.</p>





<p>In 1994, TcX began developing web-based applications and used
<tt class="literal">UNIREG</tt> to support this effort. Unfortunately,
<tt class="literal">UNIREG</tt>
<a name="INDEX-28" />
created too much overhead to be successful in dynamically generating
web pages. TcX began looking at SQL and mSQL. At that time, however,
mSQL was still in its 1.x releases. As we mentioned, mSQL 1.x did not
support any indices. mSQL's performance was therefore poor in
comparison to UNIREG.</p>





<p>Widenius contacted David Hughes -- the author of mSQL -- to see
if Hughes would be interested in connecting mSQL to UNIREG's B+
ISAM handler. Hughes was already well on his way to mSQL 2, however,
and already had his indexing infrastructure in place. TcX decided to
create a database server that was more compatible with its
requirements.</p>





<p>TcX was smart enough not to try to reinvent the wheel. It built upon
UNIREG and capitalized on the growing number of third party mSQL
utilities by writing an API into its system that was, at least
initially, practically identical to the mSQL API. As a result, an
mSQL user who wanted to move to the TcX more feature-rich database
server would only have to make trivial changes to any existing code.
The code supporting this new database, however, was completely
original.</p>





<p>By May 1995, TcX had a database that met its internal
needs -- MySQL 1.0. A business partner, David Axmark at Detron HB,
began pressing TcX to release this server on the Internet. The goal
of an Internet release would be to use a business model pioneered by
Aladdin Peter Deutsch. The result was a very flexible copyright that
makes MySQL "more free" than mSQL.</p>





<p>As for the name MySQL, Widenius says, "It is not perfectly
clear where the name MySQL derives from. TcX's base directory
and a large amount of their libraries and tools have had the prefix
'my' for well over 10 years. However, my daughter (some
years younger) is also named My. So which of the two gave its name to
MySQL is still a mystery."</p>





<p>Since the initial Internet release of MySQL, it has been ported to a
host of Unix operating systems, Win32, and OS/2. TCX estimates that
MySQL runs on about 500,000 severs.</p>





<p>Major changes in Version 3.22, the current recommended version, are:</p>




<ul><li><p>Better security</p></li><li><p>Faster connections, faster parsing of SQL queries, and a better query
optimizer</p></li><li><p>Support for more operating systems</p></li><li><p><tt class="literal">INSERT DELAYED</tt></p></li><li><p><tt class="literal">GRANT</tt> and <tt class="literal">REVOKE</tt> commands</p></li><li><p><tt class="literal">CREATE INDEX</tt> and <tt class="literal">DROP INDEX</tt></p></li><li><p><tt class="literal">HIGH_PRIORITY</tt> and <tt class="literal">LOW_PRIORITY</tt>
lock levels for <tt class="literal">SELECT</tt>, <tt class="literal">INSERT</tt>,
<tt class="literal">UPDATE</tt>, and <tt class="literal">DELETE</tt> statements</p></li><li><p>A new <tt class="literal">FLUSH</tt> command operating on
<tt class="literal">TABLES</tt>, <tt class="literal">HOSTS</tt>,
<tt class="literal">LOGS</tt>, and <tt class="literal">PRIVILEGES</tt></p></li><li><p>A new <tt class="literal">KILL</tt> command in SQL that works like
<em class="emphasis">kill</em> under Unix or
<em class="emphasis">msqladmin</em></p></li><li><p>A <tt class="literal">HAVING</tt> clause supporting expressions</p></li><li><p>Compressed client/server protocol</p></li><li><p>Saving default program options in my.cnf files</p></li></ul>

<p>Major changes in Version 3.23, a development version, are:</p>




<ul><li><p>Tables directly portable between different operating systems and CPUs</p></li><li><p>Temporary tables and <tt class="literal">HEAP</tt> tables, which are stored
only in RAM</p></li><li><p>Support for big files (63 bit) on operating systems that support them</p></li><li><p>True floating point fields</p></li><li><p>Comments on tables</p></li><li><p>Sample <tt class="literal">ANALYSE( ) </tt>procedure</p></li><li><p>User-defined functions</p></li><li><p>Much faster <tt class="literal">SELECT DISTINCT</tt> handling</p></li><li><p><tt class="literal">COUNT(DISTINCT)</tt></p></li></ul>

<p>Future enhancements planned for 3.23 include support for nesting one
<tt class="literal">SELECT</tt> statement inside another and support for
replicating databases, which permits load distribution among multiple
servers and recovery in case of hardware failure.</p>





<p>MySQL is a very rapidly evolving database platform because of the
army of volunteer coders who are helping to add to its strong base.
You should therefore not be too surprised to find something that was
true when we wrote this chapter is no longer true!</p>





<a name="ch01-6-fm2xml" /><div class="sect3">
<h3 class="sect3">1.4.2.1. MySQL or mSQL?</h3>





<p>We certainly have not yet provided you with enough information from
which to make a decision. To get a full appreciation for the
differences between the two engines as they exist today, you need to
read on and understand the nuances as we present them in this book.
On the surface, MySQL appears to be the obvious choice. mSQL fell
behind after a time and is currently slower. David Hughes is not
complacent. He is working on Version 2.1 of mSQL which should address
many of its current shortcomings. At the same time, however, MySQL is
moving ahead at the speed of light.</p>





<p>The case for mSQL may depend on the tools you are using. Because mSQL
has been around longer, you may find more luck locating a tool that
supports your specific needs. For example, only mSQL had a JDBC 2.0
compliant JDBC driver for Java database access at the time of this
book's publication. Certainly this situation will have changed
by the time you read this book. Nevertheless, you need to consider
issues such as that when you decide which database to use.</p>





<p>No matter which database you use, you will be a winner. Both database
engines are faster than any other choice you will make. Both database
engines are perfect for mid-range database needs. For an objective
comparison of these two databases with each other or any other
database, we recommend you visit
<a name="INDEX-29" />
<a name="INDEX-30" /><a href="../../../../../../www.mysql.com/crash-me-choose.htmy">http://www.mysql.com/crash-me-choose.htmy</a>. It
is on the MySQL home page, but its criteria are openly verifiable and
it is very well done.</p>
</div>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch01_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch02_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">1.3. Applications and Databases</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">2. Database Design</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>