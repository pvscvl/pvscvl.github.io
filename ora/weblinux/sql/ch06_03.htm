<?label 6.3. SQL Datatypes?><html><head><title>SQL Datatypes (MySQL &amp; mSQL)</title><link href="../style/style1.css" type="text/css" rel="stylesheet" />

<meta name="DC.Creator" content="Randy Jay Yarger, George Reese and Tim King" /><meta scheme="MIME" content="text/xml" name="DC.Format" /><meta content="en-US" name="DC.Language" /><meta content="O'Reilly & Associates, Inc." name="DC.Publisher" /><meta scheme="ISBN" name="DC.Source" content="1565924347L" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="MySQL &amp; mSQL" /><meta content="Text.Monograph" name="DC.Type" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" alt="Book Home" usemap="#banner-map" border="0" /><map name="banner-map"><area alt="MySQL and mSQL" href="index.htm" coords="0,0,466,65" shape="rect" /><area alt="Search this book" href="jobjects/fsearch.htm" coords="467,0,514,18" shape="rect" /></map>

<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch06_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm">MySQL &amp; mSQL</a></td><td width="172" valign="top" align="right"><a href="ch06_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>
<hr align="left" width="515" />


<h2 class="sect1">6.3. SQL Datatypes</h2>





<p>
<a name="INDEX-473" />In
a table, each column has a type. As we mentioned earlier, a SQL
<a name="INDEX-474" />datatype
is similar to a datatype in traditional programming languages. While
many languages define a bare-minimum set of types necessary for
completeness, SQL goes out of its way to provide types such as
<tt class="literal">MONEY</tt> and <tt class="literal">DATE</tt> that will be
useful to every day users. You could store a <tt class="literal">MONEY</tt>
type in a more basic numeric type, but having a type specifically
dedicated to the nuances of money processing helps add to SQL's
ease of use -- one of SQL's primary
goals.<a name="INDEX-475" />
<a name="INDEX-476" /></p>





<p><a href="ch15_01.htm">Chapter 15, "SQL Reference"</a>, provides a full reference of SQL types
supported by MySQL or mSQL. <a href="ch06_03.htm">Table 6-1</a> is an
abbreviated listing of the most common types supported in both
languages.</p>





<a name="ch06-33272" /><h4 class="objtitle">Table 6-1. The Most Often Used Datatypes Common to Both MySQL and mSQL </h4><table border="1">



<tr>
<th>
<p>Datatype</p></th>
<th>
<p>Description</p></th>
</tr>










<tr>
<td>
<p>
<a name="INDEX-477" />INT</p></td>
<td>
<p>An integer value. MySQL allows an <tt class="literal">INT</tt> to be either
signed or unsigned, while mSQL provides a distinct type,
<tt class="literal">UINT</tt>, for unsigned integers.</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-478" />REAL</p></td>
<td>
<p>A floating point value. This type offers a greater range and
precision than the <tt class="literal">INT</tt> type, but it does not have
the exactness of an <tt class="literal">INT</tt>.</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-479" />CHAR(length)</p></td>
<td>
<p>A fixed-length character value. No <tt class="literal">CHAR</tt> fields can
hold strings greater in length than the specified value. Fields of
lesser length are padded with spaces. This type is likely the most
commonly used type in any SQL implementation.</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-480" />TEXT(length)</p></td>
<td>
<p>A variable length character value. In mSQL, the given length is used
as a suggestion as to how long the strings being stored will be. You
may store larger values, but at a performance cost. Under MySQL,
<tt class="literal">TEXT</tt> is just one of many variable-length
datatypes.</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-481" />DATE</p></td>
<td>
<p>A standard date value. While the format for storing a date differs
between MySQL and mSQL, both database engines are capable of using
the <tt class="literal">DATE</tt> type to store arbitrary dates for the
past, present, and future. Both database engines are Y2K compliant in
their date storage.</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-482" />TIME</p></td>
<td>
<p>A standard time value. This type stores the time of day independent
of a particular date. When used together with a date, a specific date
and time can be stored. MySQL additionally supplies a
<tt class="literal">DATETIME</tt> type that will store date and time
together in one field.</p></td>
</tr>





</table>





<a name="ch06-5-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>MySQL supports the
<tt class="literal">UNSIGNED</tt>
<a name="INDEX-483" /> attribute for all numeric types. This
modifier forces the column to accept only positive (unsigned)
numbers. Unsigned fields have an upper limit that is double that of
their signed counterparts. An unsigned
<tt class="literal">TINYINT</tt> -- <a name="INDEX-484" />MySQL's single byte
numeric type -- has a range of
to 255 instead of the -127 to 127 range of its signed counterpart.</p>
</blockquote>





<p>Both database engines provide more types than those mentioned above.
MySQL, in particular, is very rich in the number of datatypes it
supports. In day-to-day programming, however, you will find yourself
using mostly the types mentioned earlier. With mSQL, choosing a
datatype is pretty much as simple as picking the type that most
closely resembles the data you want to store. The size of the data
you wish to store, however, plays a much larger role in designing
MySQL tables.</p>





<a name="ch06-6-fm2xml" /><div class="sect2">
<a name="INDEX-485" /><h3 class="sect2">6.3.1. Numeric Types</h3>





<p>Before you create a table, you should have a good idea of what kind
of data you wish to store in the table. Beyond obvious decisions
about whether your data is character-based or numeric, you should
know the approximate size of the data to be stored. If it is a
numeric field, what is its maximum possible value? What is its
minimum possible value? Could that change in the future? If the
minimum is always positive, you should consider an unsigned type. You
should always choose the smallest numeric type that can support your
largest conceivable value. If, for example, we had a field that
represented the population of a state, we would use an unsigned
<tt class="literal">INT</tt> field. No state can have a negative
population. Furthermore, in order for an unsigned
<tt class="literal">INT</tt> field not to be able to hold a number
representing a state's population, that state's
population would have to be roughly the population of the entire
Earth.</p>
</div>
















<a name="ch06-7-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.2. Character Types</h3>





<p>Managing <a name="INDEX-486" />character types is a little more
complicated. Not only do you have to worry about the minimum and
maximum string lengths, but you also have to worry about the average
size, the amount of variation likely, and the need for indexing. For
our current purposes, an <em class="emphasis">index</em> is a field or
combination of fields on which you plan to search -- basically,
the fields in your <tt class="literal">WHERE</tt> clause. Indexing is,
however, much more complicated than this simplistic description, and
we will cover indexing later in the chapter. The important fact to
note here is that indexing one character fields works best when the
field is fixed length. In fact, mSQL does not even provide an
indexible variable-length character field! If there is
little -- or, preferably, no -- variation in the length of your
character-based fields, then a <tt class="literal">CHAR</tt> type is likely
the right answer. An example of a good candidate for a
<tt class="literal">CHAR</tt> field is a country code. The
<a name="INDEX-487" />ISO provides a comprehensive list of
standard two-character representations of <a name="INDEX-488" />country codes (US for the U.S.A., FR for
France, etc.).<a href="#FOOTNOTE-9">[9]</a> Since these
codes are always exactly two characters, a <tt class="literal">CHAR(2)</tt>
is always the right answer for this field.</p><blockquote>




<a name="FOOTNOTE-9" /><p>[9]Don't be lulled into believing
states/provinces work this way. If you want to write an application
that works in an international environment and stores state/province
codes, make sure to make it a <tt class="literal">CHAR(3)</tt> since
Australia uses three-character state codes. Also note that there is a
3-character ISO country-code standard.</p>




</blockquote>





<p>A value does not need to be invariant in its length to be a candidate
for a <tt class="literal">CHAR</tt> field. It should, however, have very
little variance. Phone numbers, for example, can be stored safely in
a <tt class="literal">CHAR(13)</tt> field even though phone number length
varies from nation to nation. The variance simply is not that great,
so there is no value to making a phone number field variable in
length. The important thing to keep in mind with a
<tt class="literal">CHAR</tt> field is that no matter how big the actual
string being stored is, the field always takes up exactly the number
of characters specified as the field's size -- no more, no
less. Any difference between the length of the text being stored and
the length of the field is made up by padding the value with spaces.
While the few potential extra characters being wasted on a subset of
the phone number data is not anything to worry about, you do not want
to be wasting much more. Variable-length text fields meet this need.</p>





<p>A good, common example of a field that demands a
<a name="INDEX-489" />variable-length datatype is a web URL.
Most web addresses can fit into a relatively small amount of
space -- <em class="emphasis">http://www.ora.com</em>,
<em class="emphasis">http://www.hughes.com.au</em>,
<em class="emphasis">http://www.mysql.com</em> -- and consequentially
do not represent a problem. Occasionally, however, you will run into
web addresses like:</p>





<blockquote class="simplelist">

<p><em class="emphasis">http://www.winespectator.com/Wine/Spectator/_notes|5527293926834323221480431354?Xv11=&amp;Xr5=&amp;Xv1=&amp;type-region-search-code=&amp;Xa14=flora+springs&amp;Xv4=</em>. </p>

</blockquote>





<p>If you construct a <tt class="literal">CHAR</tt> field large enough to hold
that URL, you will be wasting a significant amount of space for most
every other URL being stored. Variable-length fields let you define a
field length that can store the odd, long-length value while not
wasting all that space for the common, short-length values. MySQL and
mSQL each take separate approaches to this problem.</p>





<a name="ch06-8-fm2xml" /><div class="sect3">
<a name="INDEX-490" /><h3 class="sect3">6.3.2.1. 
Variable-length character fields in MySQL</h3>





<p>If you are using only mSQL, you can skip this section. The advantage
of variable-length text fields under MySQL is that such fields use
precisely the minimum storage space required to store an individual
field. A <tt class="literal">VARCHAR(255)</tt> column that holds the string
"hello world," for example, only takes up 12 bytes
(one byte for each character plus an extra byte to store the length).</p>





<a name="ch06-9-fm2xml" /><blockquote><h4 class="objtitle">NOTE</h4>

<p>In opposition to the ANSI standard,
<tt class="literal">VARCHAR</tt>
<a name="INDEX-491" /> in MySQL fields are not padded. Any
extra spaces are removed from a value before it is stored.</p>
</blockquote>





<p>You cannot store strings whose lengths are greater than the field
length you have specified. With a <tt class="literal">VARCHAR(4)
</tt>field, you can store at most a string with 4 characters. If
you attempt to store the string "happy birthday," MySQL
will truncate the string to "happ." The downside of the
MySQL approach to variable-length text fields over the mSQL approach
is that there is no way to store the odd string that exceeds your
designated field size. <a href="ch06_03.htm">Table 6-1</a> shows the storage
space required to store the 144 character Wine Spectator URL shown
above along with an average-sized 30 character URL.</p>





<a name="ch06-15420" /><h4 class="objtitle">Table 6-1. The Storage Space Required by the Different MySQL Character Types </h4><table border="1">





<tr>
<th>
<p>Datatype</p></th>
<th>
<p>Storage for a 144 Character String</p></th>
<th>
<p>Storage for a 30 Character String</p></th>
<th>
<p>Maximum String Size</p></th>
</tr>










<tr>
<td>
<p>
<a name="INDEX-492" />CHAR(150)</p></td>
<td>
<p>150</p></td>
<td>
<p>150</p></td>
<td>
<p>255</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-493" />VARCHAR(150)</p></td>
<td>
<p>145</p></td>
<td>
<p>31</p></td>
<td>
<p>255</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-494" />TINYTEXT(150)</p></td>
<td>
<p>145</p></td>
<td>
<p>31</p></td>
<td>
<p>255</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-495" />TEXT(150)</p></td>
<td>
<p>146</p></td>
<td>
<p>32</p></td>
<td>
<p>65535</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-496" />MEDIUMTEXT(150)</p></td>
<td>
<p>147</p></td>
<td>
<p>33</p></td>
<td>
<p>16777215</p></td>
</tr>




<tr>
<td>
<p>
<a name="INDEX-497" />LONGTEXT(150)</p></td>
<td>
<p>148</p></td>
<td>
<p>34</p></td>
<td>
<p>4294967295</p></td>
</tr>





</table>





<p>If, after years of uptime with your database, you find that the world
has changed and a field that once comfortably existed as a
<tt class="literal">VARCHAR(25)</tt> now must be able to hold strings as
long as 30 characters, you are not out of luck. MySQL provides a
command called <tt class="literal">ALTER
TABLE</tt>
<a name="INDEX-498" /> that enables you to redefine a field
type without losing any data.</p>





<blockquote><pre class="code">ALTER TABLE <em class="replaceable">mytable</em> MODIFY <em class="replaceable">mycolumn</em> <em class="replaceable">LONGTEXT</em></pre></blockquote>
</div>









<a name="ch06-10-fm2xml" /><div class="sect3">
<h3 class="sect3">6.3.2.2. Variable-length character fields in mSQL</h3>





<p>You can skip this section if you are only interested in MySQL.
Variable-length character fields in mSQL enable you to define a
field's length to be the size of the average character string
length it will hold. While every value you insert into this field
will still take up at least the amount you specify, it can hold more.
The database does this by creating an overflow table to hold the
extra data. The downside of this approach comes in the form of
performance and the inability to index variable-length fields.</p>





<p>Let's take a moment to examine the impact of different design
choices with mSQL. In order to store all of the above URLs in a
<tt class="literal">CHAR</tt> field, we would need to have a
<tt class="literal">CHAR(144) </tt>column. Under this scenario, the four
URLs in question would take up 576 bytes (144x3), even though you are
only actually storing 216 bytes of data. The other 360 bytes is
simply wasted space. If you multiple that times thousands or millions
of rows, you can easily see how this becomes a serious problem. Using
a variable-length <tt class="literal">TEXT(30) </tt>field, however, only
234 bytes (30x3+144) are required to store the 216 bytes of data.
Only 18 bytes are wasted. That is a 41% savings!</p>
</div>
</div>
















<a name="ch06-11-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.3. Binary Datatypes</h3>





<p>mSQL has no support for <a name="INDEX-499" />binary data. MySQL, on the other hand,
provides a set of binary datatypes that closely mirror their
character counterparts. The MySQL binary types are
<a name="INDEX-500" /><tt class="literal">CHAR BINARY</tt>,
<tt class="literal">VARCHAR BINARY</tt>
<a name="INDEX-501" />,
<tt class="literal">TINYBLOB</tt>
<a name="INDEX-502" />,
<tt class="literal">BLOB</tt>
<a name="INDEX-503" />, <tt class="literal">MEDIUMBLOB</tt>, and
<tt class="literal">LONGBLOB</tt>
<a name="INDEX-504" />. The practical distinction between
character types and their binary counterparts is the concept of
encoding. <em class="emphasis">Binary data</em> is basically just a chunk
of data that MySQL makes no effort to interpret. <em class="emphasis">Character
data</em>, on the other hand, is assumed to represent textual
data from human alphabets. It thus is encoded and sorted based on
rules appropriate to the character set in question. Specifically,
MySQL sorts binary in a case-insensitive, ASCII order.</p>
</div>
















<a name="ch06-12-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.4. Enumerations and Sets</h3>





<p>MySQL provides two other special kinds of types with no mSQL analog.
The <tt class="literal">ENUM</tt>
<a name="INDEX-505" /> type allows you specify at table
creation a list of possible values that can be inserted into that
field. For example, if you had a column named fruit into which you
wanted to allow only "apple," "orange,"
"kiwi," or "banana," you would assign this
column the type <tt class="literal">ENUM</tt>:</p>





<blockquote><pre class="code">CREATE TABLE meal(meal_id INT NOT NULL PRIMARY KEY,
                  fruit ENUM(`apple', `orange', `kiwi',
                             `banana'))</pre></blockquote>





<p>When you insert a value into that column, it must be one of the
specified fruits. Because MySQL knows ahead of time what valid values
are for the column, it can abstract them to some underlying numeric
type. In other words, instead of storing "apple" in the
column as a string, it stores it as a single byte number. You just
use "apple" when you call the table or when you view
results from the table.</p>





<p>The MySQL <tt class="literal">SET</tt>
<a name="INDEX-506" /> type works in the same way, except it
lets you store multiple values in a field at the same time.</p>
</div>
















<a name="ch06-13-fm2xml" /><div class="sect2">
<h3 class="sect2">6.3.5. Other Kinds of Data</h3>





<p>Every piece of data you will ever encounter can be stored using
numeric or character types. Technically, you could even store numbers
as character types. Just because you can do so, however, does not
mean that you should do so. Consider, for example, storing money in
the database. You could store that as an <tt class="literal">INT</tt> or a
<tt class="literal">REAL</tt>. While a <tt class="literal">REAL</tt> might seem
more intuitive -- money requires decimal places, after
all -- an <tt class="literal">INT</tt> actually makes more sense. With
floating point values like <tt class="literal">REAL</tt> fields, it is
often impossible to capture a number with a specific decimal value.
If, for example, you insert the number 0.43 to represent $0.43, MySQL
and mSQL may store that as 0.42999998. This small difference can be
problematic when applied to a large number of mathematical
operations. By storing the number as an INT and inserting the decimal
into the right place, you can be certain that the value represents
exactly what you intend it to represent.<a name="INDEX-507" />
<a name="INDEX-508" />
<a name="INDEX-509" /></p>





<p>Isn't all of that a major pain? Wouldn't it be nice if
MySQL and mSQL provided some sort of datatype specifically suited to
money values? MySQL and, to a lesser degree, mSQL both provide
special datatypes to handle special kinds of data.
<tt class="literal">MONEY</tt> is an example of one of these kinds of data.
<tt class="literal">DATE</tt> is another. For a full description of all
datatypes, see <a href="ch17_01.htm">Chapter 17, "MySQL and mSQL Programs and Utilities"</a>.</p>
</div>


<hr align="left" width="515" />
<div class="navbar"><table border="0" width="515"><tr><td width="172" valign="top" align="left"><a href="ch06_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td width="171" valign="top" align="center"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td width="172" valign="top" align="right"><a href="ch06_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td width="172" valign="top" align="left">6.2. Creating and Dropping Tables</td><td width="171" valign="top" align="center"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td width="172" valign="top" align="right">6.4. Indices</td></tr></table></div>
<hr align="left" width="515" />

<img src="../gifs/navbar.gif" alt="Library Navigation Links" usemap="#library-map" border="0" />
<p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2001</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map"><area href="../index.htm" coords="1,1,83,102" shape="rect" /><area href="../lnut/index.htm" coords="81,0,152,95" shape="rect" /><area href="../run/index.htm" coords="172,2,252,105" shape="rect" /><area href="../apache/index.htm" coords="238,2,334,95" shape="rect" /><area href="index.htm" coords="336,0,412,104" shape="rect" /><area href="../dbi/index.htm" coords="415,0,507,101" shape="rect" /><area href="../cgi/index.htm" coords="511,0,601,99" shape="rect" /></map>

</body></html>